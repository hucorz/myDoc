{"config":{"indexing":"full","lang":["ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u4e00\u540d\u849f\u84bb\u7684\u5b66\u4e60\u7b14\u8bb0 \u00b6 \u6b64\u6587\u6863\u4ec5\u4f5c\u4e3a\u4e2a\u4eba\u7684\u5b66\u4e60\u7b14\u8bb0\u4ee5\u53ca\u4e00\u4e9b\u642c\u8fd0 \u535a\u5ba2\uff1a hucorz's blog \u5982\u6709\u9519\u8bef\u5341\u5206\u62b1\u6b49\uff0c\u6b22\u8fce\u6307\u6b63\uff1aQQ3044464174 \u4e00\u4e9b\u53ef\u4ee5\u53c2\u8003\u7684\u5b66\u4e60\u7f51\u7ad9\uff1a \u5c0f\u6797coding (xiaolincoding.com)","title":"Home"},{"location":"#_1","text":"\u6b64\u6587\u6863\u4ec5\u4f5c\u4e3a\u4e2a\u4eba\u7684\u5b66\u4e60\u7b14\u8bb0\u4ee5\u53ca\u4e00\u4e9b\u642c\u8fd0 \u535a\u5ba2\uff1a hucorz's blog \u5982\u6709\u9519\u8bef\u5341\u5206\u62b1\u6b49\uff0c\u6b22\u8fce\u6307\u6b63\uff1aQQ3044464174 \u4e00\u4e9b\u53ef\u4ee5\u53c2\u8003\u7684\u5b66\u4e60\u7f51\u7ad9\uff1a \u5c0f\u6797coding (xiaolincoding.com)","title":"\u4e00\u540d\u849f\u84bb\u7684\u5b66\u4e60\u7b14\u8bb0"},{"location":"ISL/","text":"\u7edf\u8ba1\u5b66\u5bfc\u8bba \u57fa\u4e8eR\u5e94\u7528 \u00b6 An Introduction to Statistical Learning with Applications in R \u5e38\u7528\u672f\u8bed \u00b6 MSE \uff1aMean Squared Error \u5747\u65b9\u8bef\u5dee \\(MSE=\\frac{1}{n}\\sum(\\hat{y_i}-y_i)^2=\\frac{1}{n}RSS\\) RSS \uff1aResidual Sum of Squares \u6b8b\u5dee\u5e73\u65b9\u548c \\(RSS=\\sum(y_i-\\hat{y_i})^2\\) ESS \uff1aExplained Sum of Squares \u89e3\u91ca\u5e73\u65b9\u548c \\(ESS=\\sum(\\hat{y_i}-\\bar{y})^2\\) TSS \uff1aTotal Sum of Square \u603b\u5e73\u65b9\u548c \\(TSS=\\sum(y_i-\\bar{y})^2=RSS+ESS\\) RSE \uff1aResidual Standard Error \u6b8b\u5dee\u6807\u51c6\u8bef \u6b8b\u5dee\u7684\u6807\u51c6\u5dee \\(RSE=\\sqrt{\\frac{1}{n-p-1}RSS}\\) \uff0cp \u662f \u53d8\u91cf\u6570 \\(R^2\\) \u7edf\u8ba1\u91cf \uff1a \\(R^2=\\frac{TSS-RSS}{TSS}=1-\\frac{RSS}{TSS}\\) SD / SE \uff1a \u7edf\u8ba1\u5b66\u4e0a\u6807\u51c6\u5dee\u4e0e\u6807\u51c6\u8bef\u7684\u533a\u522b\u4e0e\u8054\u7cfb\u662f\u4ec0\u4e48\uff1f \u4e2a\u4eba\u7406\u89e3\u5982\u4e0b\uff1a SD\u662f\u6807\u51c6\u5dee\uff0cSE\u662f\u6807\u51c6\u8bef\uff1bSD\u662f\u7edf\u8ba1\u91cf\uff0cSE\u662f\u7edf\u8ba1\u91cf\u7684\u6807\u51c6\u5dee\uff0c\u6bd4\u5982\u5bf9\u4e8e\u4e00\u4e2a\u6837\u672c\u7684\u5e73\u5747\u503c\uff0c\u5728\u603b\u4f53\u4e2d\u591a\u6b21\u53d6\u6709\u653e\u56de\u7684\u53d6\u540c\u89c4\u6a21\u7684\u6837\u672c\uff0c\u5f97\u5230\u7684\u5e73\u5747\u503c\u662f\u4e0d\u540c\u7684\uff0c\u6240\u4ee5\u8fd9\u4e2a\u5e73\u5747\u503c\u4e5f\u662f\u6709\u6807\u51c6\u5dee\u7684\uff0c\u53eb\u505a\u6807\u51c6\u8bef\uff1b\u800c\u4e14\u663e\u7136\u7684\u662f\u6837\u672c\u89c4\u6a21\u8d8a\u5927\uff0c\u6807\u51c6\u8bef\u8d8a\u5c0f\uff08\u6240\u4ee5\u6807\u51c6\u8bef\u7684\u5f0f\u5b50\u7684\u5206\u6bcd\u662f n\uff09\uff1bSE \u8d8a\u5c0f\u8868\u793a\u6240\u5f97\u7684\u7edf\u8ba1\u503c\u8d8a\u63a5\u8fd1\u771f\u5b9e\u503c \\(C_p=\\frac{1}{n}(RSS+2d\\hat{\\sigma}^2)\\) \\(AIC=\\frac{1}{n\\hat{\\sigma}^2}(RSS+2d\\hat{\\sigma}^2)\\) \\(BIC=\\frac{1}{n}(RSS+log(n)d\\hat{\\sigma}^2)\\) \\(\u8c03\u6574R^2=1-\\frac{RSS/(n-d-1)}{TSS/(n-1)}\\) \u7ebf\u6027\u56de\u5f52 \u00b6 \u7b80\u5355\u7ebf\u6027\u56de\u5f52 \u00b6 \\[ Y=\\beta_0+\\beta_1X+\\epsilon \\] \u4f30\u8ba1\u7cfb\u6570 \u00b6 \\[ RSS=\\sum_n(y_i-\\beta_0-\\beta_0x_i)^2 \\] \\[ \\beta_1=\\frac{\\sum_n(x_i-\\bar{x})(y_i-\\bar{y})}{\\sum_n(x_i-\\bar{x})^2} \\\\ \\beta_0=\\bar{y}-\\beta_1\\bar{x} \\] \u4f30\u8ba1\u503c\u7684\u51c6\u786e\u6027 \u00b6 \u5047\u8bbe \\(Y=\\beta_0+\\beta_1X+\\epsilon\\) \u4e2d\u7684\u8bef\u5dee\u9879 \\(\\epsilon_i\\) \u72ec\u7acb\u5e76\u5177\u6709\u76f8\u7b49\u7684\u65b9\u5dee\uff0c\u6709 \\(\\hat{u}\\) \u7684\u6807\u51c6\u8bef\uff1a \u8bb0 \\(\\hat{u}\\) \u4e3a \\(Y\\) \u7684\u6837\u672c\u5747\u503c\uff0c\u6709 \u6807\u51c6\u8bef (standard error\uff0c\u5199\u4f5c \\(SE(\\hat{u})\\) )\uff0c \\(Var(\\hat{u})=SE(\\hat{u})^2=\\frac{\\sigma^2}{n}\\) \uff0c\u5176\u4e2d \\(\\sigma\\) \u662f \\(Y\\) \u7684\u6bcf\u4e2a\u5b9e\u73b0\u503c \\(y_i\\) \u7684\u6807\u51c6\u5dee\uff0c\u6807\u51c6\u8bef\u544a\u8bc9\u6211\u4eec \\(\\hat{u}\\) \u504f\u79bb\u771f\u5b9e\u503c \\(u\\) \u7684\u5e73\u5747\u91cf\uff0c\u800c\u4e14\u8fd9\u79cd\u504f\u5dee\u968f\u7740 \\(n\\) \u7684\u589e\u52a0\u800c\u51cf\u5c0f \\(\\hat{\\beta_0} \\ \\hat{\\beta_1}\\) \u7684\u6807\u51c6\u8bef\uff1a \\(SE(\\hat{\\beta_0})^2=\\sigma^2[\\frac{1}{n}+\\frac{\\bar{x}^2}{\\sum(x_i-\\bar{x})^2}] \\ \\ \\ \\ SE(\\hat{\\beta_1})^2=\\frac{\\sigma^2}{\\sum(x_i-\\bar{x})^2}\\) \uff0c \u5176\u4e2d \\(\\sigma^2=Var(\\epsilon)\\) \\(x_i\\) \u503c\u5206\u6563\u65f6\uff0c \\(SE(\\hat{\\beta_1})\\) \u66f4\u5c0f\uff1b \\(\\bar{x}=0\\) \u65f6\uff0c \\(SE(\\hat{\\beta_0})=SE(\\hat{u})\\) \\(\\sigma^2\\) \u662f\u672a\u77e5\u7684\uff0c\u5bf9\u5176\u4e2d \\(\\sigma^2\\) \u7684\u4f30\u8ba1\u7528 RSE\uff08\u6b8b\u5dee\u6807\u51c6\u8bef\uff09\uff1a \\(RES=\\sqrt{\\frac{1}{n-2}RSS}\\) \u6709\u4e86\u6807\u51c6\u8bef\u540e\u5c31\u53ef\u4ee5\u8ba1\u7b97\u7f6e\u4fe1\u533a\u95f4\uff0c\u5bf9\u4e8e\u7ebf\u6027\u56de\u5f52\u6a21\u578b \\(\\beta_1\\) \u7684 95% \u7684\u7f6e\u4fe1\u533a\u95f4\u4e3a \\(\\beta_1\\pm 2SE(\\hat{\\beta_1})\\) \uff1b\u4e5f\u53ef\u4ee5\u8fdb\u884c\u5047\u8bbe\u68c0\u9a8c $$ H_0:X\u548cY\u6ca1\u6709\u5173\u7cfb\\ \\ H_{\\alpha}:X\u548cY\u4e4b\u95f4\u6709\u4e00\u5b9a\u5173\u7cfb \\ \u5373 H_0:\\beta_1=0 \\ \\ H_{\\alpha}:\\beta_1\\not=0 $$ \u5f53 \\(t=|\\frac{\\hat{\\beta_1}-0}{SE(\\hat{\\beta_1})}|>Z_{\\alpha/2}\\) \u662f\u62d2\u7edd\u539f\u5047\u8bbe \u8bc4\u4ef7\u6a21\u578b\u7684\u6b63\u786e\u6027 \u00b6 \u91cf\u5316 \u6a21\u578b\u62df\u5408\u6570\u636e\u7684\u7a0b\u5ea6 \u7528 RSE\uff08\u6b8b\u5dee\u6807\u51c6\u8bef\uff09\u548c \\(R^2\\) \u7edf\u8ba1\u91cf RSE\uff1a\u5bf9\u6a21\u578b \u5931\u62df \u7684\u5ea6\u91cf\uff0c\u8d8a\u5c0f\u8868\u793a\u6a21\u578b\u8d8a\u63a5\u8fd1\u771f\u5b9e\u503c \\(R^2\\) \u7edf\u8ba1\u91cf\uff1a \\(R^2=\\frac{TSS-RSS}{TSS}=1-\\frac{RSS}{TSS}\\) \u8d8a\u63a5\u8fd1 1 \u8d8a\u597d\uff0c\u8d8a\u63a5\u8fd1 1 \u8bf4\u660e\u56de\u5f52\u7684\u6a21\u578b\u53ef\u4ee5\u89e3\u91ca\u54cd\u5e94\u53d8\u91cf \\(y_i\\) \u7684\u7edd\u5927\u90e8\u5206\u53d8\u5f02\uff1b\u63a5\u8fd1 0 \u8bf4\u660e \u7ebf\u6027\u6a21\u578b\u662f\u9519\u8bef\u7684\uff0c\u6216\u8005\u662f \u56fa\u6709\u8bef\u5dee \\(\\sigma^2\\) \u8f83\u5927\uff0c\u6216\u8005\u4e24\u8005\u517c\u6709 \\(R^2\\) \u4e00\u5b9a\u5728 0~1 \u4e4b\u95f4\uff0c\u6240\u4ee5\u6bd4 RSE \u66f4\u6613\u4e8e\u89e3\u91ca\uff0c\u4f46\u662f\u8fd8\u662f\u8981\u5177\u4f53\u53d6\u51b3\u4e8e\u5e94\u7528 \\(R^2\\) \u8861\u91cf\u4e86 \\(X\\ Y\\) \u4e4b\u95f4\u7684\u7ebf\u6027\u5173\u7cfb\uff0c\u800c \u76f8\u5173\u7cfb\u6570 \\(r=cor(X,Y)\\) \u4e5f\u8861\u91cf\u4e86 \\(X\\ Y\\) \u4e4b\u95f4\u7684\u7ebf\u6027\u5173\u7cfb\uff1b\u4e8b\u5b9e\u4e0a\u5728\u7b80\u5355\u7684\u7ebf\u6027\u56de\u5f52\u6a21\u578b\u4e2d\uff0c \\(R^2=r^2\\) \uff1b\u4f46\u5728\u591a\u5143\u7ebf\u6027\u56de\u5f52\u4e2d \\(r^2\\) \u65e0\u6cd5\u8bc4\u4ef7\u7ebf\u6027\u56de\u5f52\u6a21\u578b\u7684\u62df\u5408\u5ea6\uff0c \\(R^2\\) \u5c06\u627f\u62c5\u8fd9\u9879\u4efb\u52a1 \u591a\u5143\u7ebf\u6027\u56de\u5f52 \u00b6 \\[ Y=\\beta_0+\\sum_p(\\beta_iX_i)+\\epsilon \\] \u4f30\u8ba1\u7cfb\u6570 \u00b6 \\[ RSS=\\sum(\\hat{y_i}-y_i)^2 \\] \u4e00\u4e9b\u91cd\u8981\u95ee\u9898 \u00b6 \u76f8\u5e94\u53d8\u91cf\u548c\u9884\u6d4b\u53d8\u91cf\u4e4b\u95f4\u662f\u5426\u6709\u5173\u7cfb\uff1f \u00b6 \u5047\u8bbe\u68c0\u9a8c $$ H_0:\\beta_1=..\\beta_p=0 \\ \\ \\ H_{\\alpha}:\u81f3\u5c11\u6709\u4e00\u4e2a\\beta_j \\not=0\u200b $$ \u8ba1\u7b97 F\u7edf\u8ba1\u91cf \uff1a \\(F=\\frac{ESS/p}{RSS/(n-p-1)}\\) \uff0cF \u63a5\u8fd1 1 \u63a5\u53d7\u539f\u5047\u8bbe .... \u9009\u5b9a\u91cd\u8981\u53d8\u91cf \u00b6 \u5c1d\u8bd5\u6240\u6709\u7684\u6a21\u578b( \\(2^p\\) \u79cd)\uff1a \u7edf\u8ba1\u6307\u6807\uff1aMallow's\u7edf\u8ba1\u91cf \\(C_p\\) \uff0c\u8d64\u6c60\u4fe1\u606f\u91cf\u51c6\u5219AIC\uff0c\u8d1d\u53f6\u65af\u4fe1\u606f\u51c6\u5219BIC\uff0c\u8c03\u6574 \\(R^2\\) (Adjusted \\(R^2\\) ) \u53ea\u9002\u7528\u4e8e p \u8f83\u5c0f\u7684\u60c5\u51b5 \u5411\u524d\u9009\u62e9\uff0c\u5411\u540e\u9009\u62e9\uff0c\u6df7\u5408\u9009\u62e9 p > n \u65f6\u4e0d\u80fd\u5411\u540e\u9009\u62e9 \u6a21\u578b\u62df\u5408 \u00b6 RSE \u548c \\(R^2\\) \u9884\u6d4b \u00b6 \u56de\u5f52\u6a21\u578b\u5176\u4ed6\u6ce8\u610f\u4e8b\u9879 \u00b6 \u8425\u9500\u8ba1\u5212 \u00b6 \u7ebf\u6027\u56de\u5f52\u4e0eK\u6700\u8fd1\u90bb\u6cd5\u7684\u6bd4\u8f83 \u00b6 \u5b9e\u9a8c\uff1a\u7ebf\u6027\u56de\u5f52 \u00b6 \u91cd\u62bd\u6837\u65b9\u6cd5 \u00b6 \u4ea4\u53c9\u9a8c\u8bc1\u6cd5 \u00b6 \u9a8c\u8bc1\u96c6\u65b9\u6cd5 \u00b6 \u5c06\u6570\u636e\u96c6\u5206\u4e3a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\uff0c\u5c06\u4e0d\u540c\u7684\u6a21\u578b\u8bad\u7ec3\u597d\u540e\u53bb\u6d4b\u8bd5\u96c6\u8ba1\u7b97\u5747\u65b9\u8bef\u5dee \u7f3a\u9677\uff1a\u6d4b\u8bd5\u96c6\u7684\u6ce2\u52a8\u5927\uff0c\u8bad\u7ec3\u6570\u636e\u5c11 \u7559\u4e00\u4ea4\u53c9\u9a8c\u8bc1\u6cd5 \u00b6 LOOCV\uff1aleave-one-out cross-validation \u5728\u89c4\u6a21\u4e3a n \u7684\u6570\u636e\u96c6\u4e2d\u7559\u4e0b \\((x_i,y_i)\\) \u4f5c\u4e3a\u6d4b\u8bd5\u96c6\uff0c\u5176\u4f59 \\(n-1\\) \u4e2a\u6570\u636e\u4f5c\u4e3a\u8bad\u7ec3\u96c6\uff0c\u8bad\u7ec3\u540e\u5728 \\((x_i,y_i)\\) \u4e0a\u8ba1\u7b97\u51fa \\(MSE_i=(y_i-\\hat{y_i})^2\\) \u91cd\u590d\u4e0a\u8ff0\u64cd\u4f5c n \u6b21\uff0c\u8ba1\u7b97 \\(CV_{n}=\\frac{1}{n}\\sum_{i=1}^nMSE_i\\) \u7f3a\u9677\uff1a n \u5f88\u5927 \u6216\u8005 \u62df\u5408\u4e00\u6b21\u5f88\u6162 \u5341\u5206\u8017\u65f6 \u5982\u679c\u7528\u6700\u5c0f\u4e8c\u4e58\u6cd5\u6765\u62df\u5408\u7ebf\u6027\u6216\u8005\u591a\u9879\u5f0f\u56de\u5f52\u6a21\u578b\uff0c\u53ef\u4ee5\u628a\u65f6\u95f4\u538b\u7f29\u81f3\u4e0e\u62df\u5408\u4e00\u4e2a\u6a21\u578b\u65f6\u95f4\u76f8\u540c\uff0c\u516c\u5f0f\u5982\u4e0b\uff1a $$ CV_{n}=\\frac{i}{n}\\sum_{i=1}^n(\\frac{y_i-\\hat{y_i}}{1-h_i})^2 $$ \u5176\u4e2d \\(h_i\\) \u4e3a\u6760\u6746\u503c k \u6298\u4ea4\u53c9\u9a8c\u8bc1\u6cd5 \u00b6 \u4e0e LOOCV \u7c7b\u4f3c\uff0c\u628a\u6570\u636e\u96c6\u5206\u6210 k \u7ec4\uff0c\u6bcf\u6b21\u7559\u4e00\u7ec4\u4f5c\u4e3a\u9a8c\u8bc1\u96c6\uff0c\u8ba1\u7b97 \\(CV_k=\\frac{1}{k}\\sum_{i=1}^kMSE_i\\) \u4e3a\u4e86\u6743\u8861\u65b9\u5dee\u4e0e\u504f\u5dee\uff0ck \u4e00\u822c\u53d6 5 \u6216 10 \u4f18\u70b9\u663e\u800c\u6613\u89c1\uff0c\u8fd0\u7b97\u5feb\uff0c\u4f46\u662f\u5b58\u5728\u4e00\u5b9a\u7684\u6ce2\u52a8\u6027 LOOCV \u548c k\u6298\u4ea4\u53c9\u9a8c\u8bc1\u8fd8\u53ef\u4ee5\u7528\u4e8e\u9009\u62e9\u6a21\u578b\u7684\u5149\u6ed1\u7a0b\u5ea6 k \u6298\u4ea4\u53c9\u9a8c\u8bc1\u7684\u504f\u5dee-\u65b9\u5dee\u6743\u8861 \u00b6 \u4ece\u51cf\u5c0f\u504f\u5dee\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u663e\u7136 LOOCV \u6bd4 k \u6298 CV\u597d\uff0c\u4f46\u504f\u5dee\u4e0d\u662f\u552f\u4e00\u8003\u8651\u7684\u8981\u7d20 \\(k<n\\) \u65f6\uff0cLOOCV \u65b9\u6cd5\u7684\u65b9\u5dee\u6bd4 k \u6298 CV \u65b9\u6cd5\u7684\u65b9\u5dee\u5927\uff1b\u56e0\u4e3a LOOCV \u7684\u6bcf\u4e2a\u8bad\u7ec3\u96c6\u90fd\u662f\u51e0\u4e4e\u4e00\u6837\u7684\uff0c\u800c k \u6298 CV \u6bcf\u4e2a\u8bad\u7ec3\u96c6\u7684\u91cd\u53e0\u7a0b\u5ea6\u76f8\u5bf9\u8f83\u5c0f \u6240\u4ee5\u4e3a\u4e86\u6743\u8861\u65b9\u5dee\u4e0e\u504f\u5dee\uff0ck \u4e00\u822c\u53d6 5 \u6216 10 \u81ea\u52a9\u6cd5 \u00b6 \u7ebf\u6027\u6a21\u578b\u9009\u62e9\u4e0e\u6b63\u5219\u5316 \u00b6 \u5b50\u96c6\u9009\u62e9 \u00b6 \u4ece \\(p\\) \u4e2a\u9884\u6d4b\u53d8\u91cf\u4e2d\u6311\u9009\u4e0e\u54cd\u5e94\u53d8\u91cf\u76f8\u5173\u7684\u53d8\u91cf\u5f62\u6210\u5b50\u96c6\uff0c\u518d\u5bf9\u8fd9\u4e2a\u5b50\u96c6\u8fd0\u7528\u6700\u5c0f\u4e8c\u4e58 \u6700\u4f18\u5b50\u96c6\u9009\u62e9 \u00b6 \u5bf9 \\(p\\) \u4e2a\u9884\u6d4b\u53d8\u91cf\u7684\u6240\u6709\u7ec4\u5408\u5206\u522b\u4f7f\u7528\u6700\u5c0f\u4e8c\u4e58\uff0c\u5373\u4e00\u5171 \\(2^p\\) \u4e2a\u6a21\u578b \\(O(2^p)\\) \u5177\u4f53\u8fc7\u7a0b\uff1a \u4e0d\u542b\u9884\u6d4b\u53d8\u91cf\u7684\u96f6\u6a21\u578b \\(M_0\\) \u53ea\u7528\u4e8e\u4f30\u8ba1\u89c2\u6d4b\u6837\u672c\u7684\u6837\u672c\u5747\u503c \u5bf9\u4e8e \\(k=1,2,...,p\\) \uff1a (a) \u62df\u5408 \\(\\begin{pmatrix}p\\\\k\\end{pmatrix}\\) \u4e2a\u5305\u542b \\(k\\) \u4e2a\u9884\u6d4b\u53d8\u91cf\u7684\u6a21\u578b (b) \u4ece \\(\\begin{pmatrix}p\\\\k\\end{pmatrix}\\) \u4e2d\u9009\u62e9 \\(RSS\\) \u6700\u5c0f \u6216 \\(R^2\\) \u6700\u5927\u7684\u4f5c\u4e3a\u6700\u4f18\u6a21\u578b\uff0c\u8bb0\u4e3a \\(M_k\\) \u6839\u636e\u4ea4\u53c9\u9a8c\u8bc1\u9884\u6d4b\u8bef\u5dee\uff0c \\(c_p(AIC)\\) \uff0c \\(BIC\\) \uff0c\u6216\u8005 \u8c03\u6574 \\(R^2\\) \u4ece \\(M_0,...,M_p\\) \u4e2d\u9009\u62e9\u6700\u4f18\u7684\u6a21\u578b \u9010\u6b65\u9009\u62e9 \u00b6 \u5411\u524d\u9010\u6b65\u9009\u62e9 \u00b6 \u6bcf\u6b21\u6dfb\u52a0\u4e00\u4e2a\u80fd\u6700\u5927\u9650\u5ea6\u63d0\u5347\u6a21\u578b\u6548\u679c\u7684\u53d8\u91cf\u52a0\u5165\u6a21\u578b \\(O(n^2)\\) \u4e0d\u542b\u9884\u6d4b\u53d8\u91cf\u7684\u96f6\u6a21\u578b\u8bb0\u4e3a \\(M_0\\) \u5bf9\u4e8e \\(k=0,2,...,p-1\\) \uff1a (a) \u4ece \\(p-k\\) \u4e2a\u6a21\u578b\u4e2d\u8fdb\u884c\u9009\u62e9\uff0c\u6bcf\u4e2a\u90fd\u5728 \\(M_k\\) \u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e00\u4e2a\u53d8\u91cf (b) \u5728 \\(p-k\\) \u4e2a\u6a21\u578b\u4e2d\u9009\u62e9 \\(RSS\\) \u6700\u5c0f \u6216 \\(R^2\\) \u6700\u5927\u7684\u6a21\u578b\u8bb0\u4e3a \\(M_{k+1}\\) \u6839\u636e\u4ea4\u53c9\u9a8c\u8bc1\u9884\u6d4b\u8bef\u5dee\uff0c \\(c_p(AIC)\\) \uff0c \\(BIC\\) \uff0c\u6216\u8005 \u8c03\u6574 \\(R^2\\) \u4ece \\(M_0,...,M_p\\) \u4e2d\u9009\u62e9\u6700\u4f18\u7684\u6a21\u578b \u65e0\u6cd5\u4fdd\u8bc1\u662f\u5168\u5c40\u6700\u4f18\u7684\uff0c\u5728 \\(n<p\\) \u65f6\u90fd\u53ef\u4ee5\u4f7f\u7528\u5411\u524d\u9009\u62e9\uff0c\u8fd9\u65f6\u53ef\u4ee5\u5efa\u7acb\u5b50\u6a21\u578b \\(M_0,...,M_{n-1}\\) \u82e5 \\(n\\leq p\\) \uff0c\u7ed3\u679c\u662f\u4e0d\u552f\u4e00\u7684 \u5411\u540e\u9010\u6b65\u9009\u62e9 \u00b6 \u4e0e\u5411\u524d\u9009\u62e9\u7c7b\u4f3c \\(O(n^2)\\) \u5305\u542b\u5168\u90e8 \\(p\\) \u4e2a\u9884\u6d4b\u53d8\u91cf\u7684\u96f6\u6a21\u578b\u8bb0\u4e3a \\(M_p\\) \u5bf9\u4e8e \\(k=p,...1\\) \uff1a (a) \u4ece \\(k\\) \u4e2a\u6a21\u578b\u4e2d\u8fdb\u884c\u9009\u62e9\uff0c\u6bcf\u4e2a\u90fd\u5728 \\(M_k\\) \u7684\u57fa\u7840\u4e0a\u51cf\u5c11\u4e00\u4e2a\u53d8\u91cf (b) \u5728 \\(k\\) \u4e2a\u6a21\u578b\u4e2d\u9009\u62e9 \\(RSS\\) \u6700\u5c0f \u6216 \\(R^2\\) \u6700\u5927\u7684\u6a21\u578b\u8bb0\u4e3a \\(M_{k-1}\\) \u6839\u636e\u4ea4\u53c9\u9a8c\u8bc1\u9884\u6d4b\u8bef\u5dee\uff0c \\(c_p(AIC)\\) \uff0c \\(BIC\\) \uff0c\u6216\u8005 \u8c03\u6574 \\(R^2\\) \u4ece \\(M_0,...,M_p\\) \u4e2d\u9009\u62e9\u6700\u4f18\u7684\u6a21\u578b \u65e0\u6cd5\u4fdd\u8bc1\u662f\u5168\u5c40\u6700\u4f18\u7684\uff0c\u4e14\u9700\u8981\u6ee1\u8db3 \\(n > p\\) \u9009\u62e9\u6700\u4f18\u6a21\u578b \u00b6 \\(C_p\\) \uff0cAIC\uff0cBIC\uff0c\u8c03\u6574 \\(R^2\\) \u00b6 \u8bad\u7ec3\u8bef\u5dee\u53ef\u80fd\u662f\u6d4b\u8bd5\u8bef\u5dee\u4e2d\u8f83\u5dee\u7684\u4e00\u4e2a\u4f30\u8ba1\uff0c \\(RSS,R^2\\) \u503c\u5e76\u4e0d\u9002\u7528\u4e8e\u5bf9\u5305\u542b\u4e0d\u540c\u53d8\u91cf\u4e2a\u6570\u7684\u6a21\u578b\u8fdb\u884c\u9009\u62e9 \u672c\u8282\u5305\u542b\u4e09\u4e2a\u65b9\u6cd5\uff1a \\(C_p\\) \uff0c\u8d64\u6c60\u4fe1\u606f\u91cf\u51c6\u5219AIC\uff0c\u8d1d\u53f6\u65af\u4fe1\u606f\u51c6\u5219BIC\uff0c\u8c03\u6574 \\(R^2\\) (Adjusted \\(R^2\\) ) \\(C_p=\\frac{1}{n}(RSS+2d\\hat{\\sigma}^2)\\) \u5176\u4e2d \\(\\hat{\\sigma}^2\\) \u662f \\(\\epsilon\\) \u7684\u4f30\u8ba1\u503c\uff0c \\(d\\) \u662f\u9884\u6d4b\u53d8\u91cf\u6570 \\(AIC=\\frac{1}{n\\hat{\\sigma}^2}(RSS+2d\\hat{\\sigma}^2)\\) \u9002\u7528\u4e8e\u4f7f\u7528\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u62df\u5408\u7684\u6a21\u578b\uff0c\u82e5 \\(\\epsilon\\) \u670d\u4ece\u9ad8\u65af\u5206\u5e03\uff0c\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u548c\u6700\u5c0f\u4e8c\u4e58\u662f\u7b49\u4ef7\u7684\uff1b\u5bf9\u4e8e\u6700\u5c0f\u4e8c\u4e58\u6a21\u578b \\(c_p\\ \\ AIC\\) \u6210\u6bd4\u4f8b \\(BIC=\\frac{1}{n}(RSS+log(n)d\\hat{\\sigma}^2)\\) \uff0c\u5bf9\u4e8e\u4efb\u610f \\(n>7,\\ log(n)>2\\) \u6240\u4ee5 \\(BIC\\) \u7684\u60e9\u7f5a\u66f4\u91cd\uff0c\u76f8\u6bd4\u4e8e \\(C_p\\) \u5f97\u5230\u7684\u6a21\u578b\u7684\u53d8\u91cf\u66f4\u5c11 \\(\u8c03\u6574R^2=1-\\frac{RSS/(n-d-1)}{TSS/(n-1)}\\) \u76f8\u6bd4\u4e8e \\(R^2\\) \u5f15\u5165\u4e86\u60e9\u7f5a \u9664\u4e86 \\(\u8c03\u6574R^2\\) \u90fd\u662f\u8d8a\u5c0f\u8d8a\u597d \u9a8c\u8bc1\u4e0e\u4ea4\u53c9\u9a8c\u8bc1 \u00b6 \u538b\u7f29\u4f30\u8ba1\u65b9\u6cd5 \u00b6 \u5bf9\u5168\u90e8 \\(p\\) \u4e2a\u53d8\u91cf\u62df\u5408\uff0c\u52a0\u5165\u4e00\u4e9b\u7ea6\u675f\uff0c\u4e0e\u6700\u5c0f\u4e8c\u4e58\u76f8\u6bd4\u53ef\u4ee5\u5c06\u67d0\u4e9b\u7cfb\u6570\u7f29\u51cf\u4e3a 0 \u5cad\u56de\u5f52 \u00b6 \\[ min \\ \\ RSS+\\lambda\\sum_{j=1}^{p}\\beta_j^2 \\] \\(\\lambda=0\\) \u65f6\uff0c\u60e9\u7f5a\u9879\u4e0d\u8d77\u4f5c\u7528\uff1b \\(\\lambda\\rightarrow inf\\) \u65f6\uff0c\u4f30\u8ba1\u503c\u4f1a\u8d8a\u6765\u8d8a\u63a5\u8fd1 0 \u60e9\u7f5a\u9879\u4e0d\u60e9\u7f5a\u5e38\u6570\u9879 \\(\\beta_0\\) \u6700\u5c0f\u4e8c\u4e58\u5982\u679c\u4e00\u4e2a\u53d8\u91cf\u7684\u5355\u4f4d\u53d8\u4e86\uff0c\u53ea\u4f1a\u5f71\u54cd\u6b64\u53d8\u91cf\u7684\u7cfb\u6570\uff1b\u800c\u5cad\u56de\u5f52\u5219\u4f1a\u5f71\u54cd\u5176\u4ed6\u7684\u7cfb\u6570\uff0c\u6240\u4ee5\u4f7f\u7528\u524d\u9700\u8981\u5c06\u53d8\u91cf\u8fdb\u884c\u6807\u51c6\u5316 (\u8fd9\u91cc\u7684\u6807\u51c6\u5316\u53ea\u662f\u9664\u4ee5\u4e86\u6807\u51c6\u5dee) $$ \\widetilde{x} {i,j}=\\frac{x {i,j}}{\\sqrt{\\frac{1}{n}\\sum(x_{ij}-\\bar{x}_j)^2}} $$ \u52a3\u52bf\uff1a\u4e0d\u4f1a\u628a\u7cfb\u6570\u786e\u5207\u7684\u538b\u7f29\u81f3 0\uff0c\u5f53 p \u5f88\u5927\u65f6\uff0c\u4e0d\u5229\u4e8e\u6a21\u578b\u89e3\u91ca Lasso \u00b6 \\[ min \\ \\ RSS+\\lambda\\sum_{j=1}^p|\\beta_j| \\] \u60e9\u7f5a\u9879\u4e0d\u60e9\u7f5a\u5e38\u6570\u9879 \\(\\beta_0\\) Lasso \u80fd\u591f\u5c06\u53d8\u91cf\u538b\u7f29\u81f3 0 \u5176\u4ed6 \u00b6 \u6700\u5c0f\u4e8c\u4e58\u63a8\u5bfc \u00b6 \u7b80\u5355\u7ebf\u6027\u56de\u5f52\uff1a $$ RSS=\\sum_n(y_i-\\beta_0-\\beta_1x_i)^2 $$ \\[ \\frac{\\alpha RSS}{\\alpha \\beta_1}=\\sum_n-2x_i(y_i-\\beta_0-\\beta_1x_i)=0 \\\\ \\frac{\\alpha RSS}{\\alpha \\beta_0}=\\sum_n-2(y_i-\\beta_0-\\beta_1x_i)=0 \\] \u6574\u7406\u5f97 $$ \\beta_1=\\frac{\\sum_n(x_i-\\bar{x})(y_i-\\bar{y})}{\\sum_n(x_i-\\bar{x})^2} \\ \\beta_0=\\bar{y}-\\beta_1\\bar{x} $$ \u591a\u5143\u7ebf\u6027\u56de\u5f52\uff1a\u7528\u77e9\u9635\u7684\u5f62\u5f0f $$ min(RSS)=min||XA-Y||_2^2 $$ \\[ \\begin{equation} \\begin{split} \\frac{\\alpha RSS}{\\alpha X} &=\\frac{\\alpha (AX-Y)^T(AX-Y)}{\\alpha X} \\\\ &=\\frac{\\alpha (X^TA^TAX-X^TA^TY-Y^TAX+Y^TY)}{\\alpha X} \\end{split} \\end{equation} \\] \u7531 \\(\\frac{\\alpha X^TA}{\\alpha X} =\\frac{\\alpha A^TX}{\\alpha X}=A, \\ \\ \\ \\frac{\\alpha X^TAX}{\\alpha X} =AX+A^TX\\) \u5f97 $$ \\frac{\\alpha RSS}{\\alpha X} =2A^TAX-2A^TY=0 \\ X=(A^TA)^{-1}A^TY $$","title":"\u7edf\u8ba1\u5b66\u5bfc\u8bba \u57fa\u4e8eR\u5e94\u7528"},{"location":"ISL/#r","text":"An Introduction to Statistical Learning with Applications in R","title":"\u7edf\u8ba1\u5b66\u5bfc\u8bba \u57fa\u4e8eR\u5e94\u7528"},{"location":"ISL/#_1","text":"MSE \uff1aMean Squared Error \u5747\u65b9\u8bef\u5dee \\(MSE=\\frac{1}{n}\\sum(\\hat{y_i}-y_i)^2=\\frac{1}{n}RSS\\) RSS \uff1aResidual Sum of Squares \u6b8b\u5dee\u5e73\u65b9\u548c \\(RSS=\\sum(y_i-\\hat{y_i})^2\\) ESS \uff1aExplained Sum of Squares \u89e3\u91ca\u5e73\u65b9\u548c \\(ESS=\\sum(\\hat{y_i}-\\bar{y})^2\\) TSS \uff1aTotal Sum of Square \u603b\u5e73\u65b9\u548c \\(TSS=\\sum(y_i-\\bar{y})^2=RSS+ESS\\) RSE \uff1aResidual Standard Error \u6b8b\u5dee\u6807\u51c6\u8bef \u6b8b\u5dee\u7684\u6807\u51c6\u5dee \\(RSE=\\sqrt{\\frac{1}{n-p-1}RSS}\\) \uff0cp \u662f \u53d8\u91cf\u6570 \\(R^2\\) \u7edf\u8ba1\u91cf \uff1a \\(R^2=\\frac{TSS-RSS}{TSS}=1-\\frac{RSS}{TSS}\\) SD / SE \uff1a \u7edf\u8ba1\u5b66\u4e0a\u6807\u51c6\u5dee\u4e0e\u6807\u51c6\u8bef\u7684\u533a\u522b\u4e0e\u8054\u7cfb\u662f\u4ec0\u4e48\uff1f \u4e2a\u4eba\u7406\u89e3\u5982\u4e0b\uff1a SD\u662f\u6807\u51c6\u5dee\uff0cSE\u662f\u6807\u51c6\u8bef\uff1bSD\u662f\u7edf\u8ba1\u91cf\uff0cSE\u662f\u7edf\u8ba1\u91cf\u7684\u6807\u51c6\u5dee\uff0c\u6bd4\u5982\u5bf9\u4e8e\u4e00\u4e2a\u6837\u672c\u7684\u5e73\u5747\u503c\uff0c\u5728\u603b\u4f53\u4e2d\u591a\u6b21\u53d6\u6709\u653e\u56de\u7684\u53d6\u540c\u89c4\u6a21\u7684\u6837\u672c\uff0c\u5f97\u5230\u7684\u5e73\u5747\u503c\u662f\u4e0d\u540c\u7684\uff0c\u6240\u4ee5\u8fd9\u4e2a\u5e73\u5747\u503c\u4e5f\u662f\u6709\u6807\u51c6\u5dee\u7684\uff0c\u53eb\u505a\u6807\u51c6\u8bef\uff1b\u800c\u4e14\u663e\u7136\u7684\u662f\u6837\u672c\u89c4\u6a21\u8d8a\u5927\uff0c\u6807\u51c6\u8bef\u8d8a\u5c0f\uff08\u6240\u4ee5\u6807\u51c6\u8bef\u7684\u5f0f\u5b50\u7684\u5206\u6bcd\u662f n\uff09\uff1bSE \u8d8a\u5c0f\u8868\u793a\u6240\u5f97\u7684\u7edf\u8ba1\u503c\u8d8a\u63a5\u8fd1\u771f\u5b9e\u503c \\(C_p=\\frac{1}{n}(RSS+2d\\hat{\\sigma}^2)\\) \\(AIC=\\frac{1}{n\\hat{\\sigma}^2}(RSS+2d\\hat{\\sigma}^2)\\) \\(BIC=\\frac{1}{n}(RSS+log(n)d\\hat{\\sigma}^2)\\) \\(\u8c03\u6574R^2=1-\\frac{RSS/(n-d-1)}{TSS/(n-1)}\\)","title":"\u5e38\u7528\u672f\u8bed"},{"location":"ISL/#_2","text":"","title":"\u7ebf\u6027\u56de\u5f52"},{"location":"ISL/#_3","text":"\\[ Y=\\beta_0+\\beta_1X+\\epsilon \\]","title":"\u7b80\u5355\u7ebf\u6027\u56de\u5f52"},{"location":"ISL/#_4","text":"\\[ RSS=\\sum_n(y_i-\\beta_0-\\beta_0x_i)^2 \\] \\[ \\beta_1=\\frac{\\sum_n(x_i-\\bar{x})(y_i-\\bar{y})}{\\sum_n(x_i-\\bar{x})^2} \\\\ \\beta_0=\\bar{y}-\\beta_1\\bar{x} \\]","title":"\u4f30\u8ba1\u7cfb\u6570"},{"location":"ISL/#_5","text":"\u5047\u8bbe \\(Y=\\beta_0+\\beta_1X+\\epsilon\\) \u4e2d\u7684\u8bef\u5dee\u9879 \\(\\epsilon_i\\) \u72ec\u7acb\u5e76\u5177\u6709\u76f8\u7b49\u7684\u65b9\u5dee\uff0c\u6709 \\(\\hat{u}\\) \u7684\u6807\u51c6\u8bef\uff1a \u8bb0 \\(\\hat{u}\\) \u4e3a \\(Y\\) \u7684\u6837\u672c\u5747\u503c\uff0c\u6709 \u6807\u51c6\u8bef (standard error\uff0c\u5199\u4f5c \\(SE(\\hat{u})\\) )\uff0c \\(Var(\\hat{u})=SE(\\hat{u})^2=\\frac{\\sigma^2}{n}\\) \uff0c\u5176\u4e2d \\(\\sigma\\) \u662f \\(Y\\) \u7684\u6bcf\u4e2a\u5b9e\u73b0\u503c \\(y_i\\) \u7684\u6807\u51c6\u5dee\uff0c\u6807\u51c6\u8bef\u544a\u8bc9\u6211\u4eec \\(\\hat{u}\\) \u504f\u79bb\u771f\u5b9e\u503c \\(u\\) \u7684\u5e73\u5747\u91cf\uff0c\u800c\u4e14\u8fd9\u79cd\u504f\u5dee\u968f\u7740 \\(n\\) \u7684\u589e\u52a0\u800c\u51cf\u5c0f \\(\\hat{\\beta_0} \\ \\hat{\\beta_1}\\) \u7684\u6807\u51c6\u8bef\uff1a \\(SE(\\hat{\\beta_0})^2=\\sigma^2[\\frac{1}{n}+\\frac{\\bar{x}^2}{\\sum(x_i-\\bar{x})^2}] \\ \\ \\ \\ SE(\\hat{\\beta_1})^2=\\frac{\\sigma^2}{\\sum(x_i-\\bar{x})^2}\\) \uff0c \u5176\u4e2d \\(\\sigma^2=Var(\\epsilon)\\) \\(x_i\\) \u503c\u5206\u6563\u65f6\uff0c \\(SE(\\hat{\\beta_1})\\) \u66f4\u5c0f\uff1b \\(\\bar{x}=0\\) \u65f6\uff0c \\(SE(\\hat{\\beta_0})=SE(\\hat{u})\\) \\(\\sigma^2\\) \u662f\u672a\u77e5\u7684\uff0c\u5bf9\u5176\u4e2d \\(\\sigma^2\\) \u7684\u4f30\u8ba1\u7528 RSE\uff08\u6b8b\u5dee\u6807\u51c6\u8bef\uff09\uff1a \\(RES=\\sqrt{\\frac{1}{n-2}RSS}\\) \u6709\u4e86\u6807\u51c6\u8bef\u540e\u5c31\u53ef\u4ee5\u8ba1\u7b97\u7f6e\u4fe1\u533a\u95f4\uff0c\u5bf9\u4e8e\u7ebf\u6027\u56de\u5f52\u6a21\u578b \\(\\beta_1\\) \u7684 95% \u7684\u7f6e\u4fe1\u533a\u95f4\u4e3a \\(\\beta_1\\pm 2SE(\\hat{\\beta_1})\\) \uff1b\u4e5f\u53ef\u4ee5\u8fdb\u884c\u5047\u8bbe\u68c0\u9a8c $$ H_0:X\u548cY\u6ca1\u6709\u5173\u7cfb\\ \\ H_{\\alpha}:X\u548cY\u4e4b\u95f4\u6709\u4e00\u5b9a\u5173\u7cfb \\ \u5373 H_0:\\beta_1=0 \\ \\ H_{\\alpha}:\\beta_1\\not=0 $$ \u5f53 \\(t=|\\frac{\\hat{\\beta_1}-0}{SE(\\hat{\\beta_1})}|>Z_{\\alpha/2}\\) \u662f\u62d2\u7edd\u539f\u5047\u8bbe","title":"\u4f30\u8ba1\u503c\u7684\u51c6\u786e\u6027"},{"location":"ISL/#_6","text":"\u91cf\u5316 \u6a21\u578b\u62df\u5408\u6570\u636e\u7684\u7a0b\u5ea6 \u7528 RSE\uff08\u6b8b\u5dee\u6807\u51c6\u8bef\uff09\u548c \\(R^2\\) \u7edf\u8ba1\u91cf RSE\uff1a\u5bf9\u6a21\u578b \u5931\u62df \u7684\u5ea6\u91cf\uff0c\u8d8a\u5c0f\u8868\u793a\u6a21\u578b\u8d8a\u63a5\u8fd1\u771f\u5b9e\u503c \\(R^2\\) \u7edf\u8ba1\u91cf\uff1a \\(R^2=\\frac{TSS-RSS}{TSS}=1-\\frac{RSS}{TSS}\\) \u8d8a\u63a5\u8fd1 1 \u8d8a\u597d\uff0c\u8d8a\u63a5\u8fd1 1 \u8bf4\u660e\u56de\u5f52\u7684\u6a21\u578b\u53ef\u4ee5\u89e3\u91ca\u54cd\u5e94\u53d8\u91cf \\(y_i\\) \u7684\u7edd\u5927\u90e8\u5206\u53d8\u5f02\uff1b\u63a5\u8fd1 0 \u8bf4\u660e \u7ebf\u6027\u6a21\u578b\u662f\u9519\u8bef\u7684\uff0c\u6216\u8005\u662f \u56fa\u6709\u8bef\u5dee \\(\\sigma^2\\) \u8f83\u5927\uff0c\u6216\u8005\u4e24\u8005\u517c\u6709 \\(R^2\\) \u4e00\u5b9a\u5728 0~1 \u4e4b\u95f4\uff0c\u6240\u4ee5\u6bd4 RSE \u66f4\u6613\u4e8e\u89e3\u91ca\uff0c\u4f46\u662f\u8fd8\u662f\u8981\u5177\u4f53\u53d6\u51b3\u4e8e\u5e94\u7528 \\(R^2\\) \u8861\u91cf\u4e86 \\(X\\ Y\\) \u4e4b\u95f4\u7684\u7ebf\u6027\u5173\u7cfb\uff0c\u800c \u76f8\u5173\u7cfb\u6570 \\(r=cor(X,Y)\\) \u4e5f\u8861\u91cf\u4e86 \\(X\\ Y\\) \u4e4b\u95f4\u7684\u7ebf\u6027\u5173\u7cfb\uff1b\u4e8b\u5b9e\u4e0a\u5728\u7b80\u5355\u7684\u7ebf\u6027\u56de\u5f52\u6a21\u578b\u4e2d\uff0c \\(R^2=r^2\\) \uff1b\u4f46\u5728\u591a\u5143\u7ebf\u6027\u56de\u5f52\u4e2d \\(r^2\\) \u65e0\u6cd5\u8bc4\u4ef7\u7ebf\u6027\u56de\u5f52\u6a21\u578b\u7684\u62df\u5408\u5ea6\uff0c \\(R^2\\) \u5c06\u627f\u62c5\u8fd9\u9879\u4efb\u52a1","title":"\u8bc4\u4ef7\u6a21\u578b\u7684\u6b63\u786e\u6027"},{"location":"ISL/#_7","text":"\\[ Y=\\beta_0+\\sum_p(\\beta_iX_i)+\\epsilon \\]","title":"\u591a\u5143\u7ebf\u6027\u56de\u5f52"},{"location":"ISL/#_8","text":"\\[ RSS=\\sum(\\hat{y_i}-y_i)^2 \\]","title":"\u4f30\u8ba1\u7cfb\u6570"},{"location":"ISL/#_9","text":"","title":"\u4e00\u4e9b\u91cd\u8981\u95ee\u9898"},{"location":"ISL/#_10","text":"\u5047\u8bbe\u68c0\u9a8c $$ H_0:\\beta_1=..\\beta_p=0 \\ \\ \\ H_{\\alpha}:\u81f3\u5c11\u6709\u4e00\u4e2a\\beta_j \\not=0\u200b $$ \u8ba1\u7b97 F\u7edf\u8ba1\u91cf \uff1a \\(F=\\frac{ESS/p}{RSS/(n-p-1)}\\) \uff0cF \u63a5\u8fd1 1 \u63a5\u53d7\u539f\u5047\u8bbe ....","title":"\u76f8\u5e94\u53d8\u91cf\u548c\u9884\u6d4b\u53d8\u91cf\u4e4b\u95f4\u662f\u5426\u6709\u5173\u7cfb\uff1f"},{"location":"ISL/#_11","text":"\u5c1d\u8bd5\u6240\u6709\u7684\u6a21\u578b( \\(2^p\\) \u79cd)\uff1a \u7edf\u8ba1\u6307\u6807\uff1aMallow's\u7edf\u8ba1\u91cf \\(C_p\\) \uff0c\u8d64\u6c60\u4fe1\u606f\u91cf\u51c6\u5219AIC\uff0c\u8d1d\u53f6\u65af\u4fe1\u606f\u51c6\u5219BIC\uff0c\u8c03\u6574 \\(R^2\\) (Adjusted \\(R^2\\) ) \u53ea\u9002\u7528\u4e8e p \u8f83\u5c0f\u7684\u60c5\u51b5 \u5411\u524d\u9009\u62e9\uff0c\u5411\u540e\u9009\u62e9\uff0c\u6df7\u5408\u9009\u62e9 p > n \u65f6\u4e0d\u80fd\u5411\u540e\u9009\u62e9","title":"\u9009\u5b9a\u91cd\u8981\u53d8\u91cf"},{"location":"ISL/#_12","text":"RSE \u548c \\(R^2\\)","title":"\u6a21\u578b\u62df\u5408"},{"location":"ISL/#_13","text":"","title":"\u9884\u6d4b"},{"location":"ISL/#_14","text":"","title":"\u56de\u5f52\u6a21\u578b\u5176\u4ed6\u6ce8\u610f\u4e8b\u9879"},{"location":"ISL/#_15","text":"","title":"\u8425\u9500\u8ba1\u5212"},{"location":"ISL/#k","text":"","title":"\u7ebf\u6027\u56de\u5f52\u4e0eK\u6700\u8fd1\u90bb\u6cd5\u7684\u6bd4\u8f83"},{"location":"ISL/#_16","text":"","title":"\u5b9e\u9a8c\uff1a\u7ebf\u6027\u56de\u5f52"},{"location":"ISL/#_17","text":"","title":"\u91cd\u62bd\u6837\u65b9\u6cd5"},{"location":"ISL/#_18","text":"","title":"\u4ea4\u53c9\u9a8c\u8bc1\u6cd5"},{"location":"ISL/#_19","text":"\u5c06\u6570\u636e\u96c6\u5206\u4e3a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\uff0c\u5c06\u4e0d\u540c\u7684\u6a21\u578b\u8bad\u7ec3\u597d\u540e\u53bb\u6d4b\u8bd5\u96c6\u8ba1\u7b97\u5747\u65b9\u8bef\u5dee \u7f3a\u9677\uff1a\u6d4b\u8bd5\u96c6\u7684\u6ce2\u52a8\u5927\uff0c\u8bad\u7ec3\u6570\u636e\u5c11","title":"\u9a8c\u8bc1\u96c6\u65b9\u6cd5"},{"location":"ISL/#_20","text":"LOOCV\uff1aleave-one-out cross-validation \u5728\u89c4\u6a21\u4e3a n \u7684\u6570\u636e\u96c6\u4e2d\u7559\u4e0b \\((x_i,y_i)\\) \u4f5c\u4e3a\u6d4b\u8bd5\u96c6\uff0c\u5176\u4f59 \\(n-1\\) \u4e2a\u6570\u636e\u4f5c\u4e3a\u8bad\u7ec3\u96c6\uff0c\u8bad\u7ec3\u540e\u5728 \\((x_i,y_i)\\) \u4e0a\u8ba1\u7b97\u51fa \\(MSE_i=(y_i-\\hat{y_i})^2\\) \u91cd\u590d\u4e0a\u8ff0\u64cd\u4f5c n \u6b21\uff0c\u8ba1\u7b97 \\(CV_{n}=\\frac{1}{n}\\sum_{i=1}^nMSE_i\\) \u7f3a\u9677\uff1a n \u5f88\u5927 \u6216\u8005 \u62df\u5408\u4e00\u6b21\u5f88\u6162 \u5341\u5206\u8017\u65f6 \u5982\u679c\u7528\u6700\u5c0f\u4e8c\u4e58\u6cd5\u6765\u62df\u5408\u7ebf\u6027\u6216\u8005\u591a\u9879\u5f0f\u56de\u5f52\u6a21\u578b\uff0c\u53ef\u4ee5\u628a\u65f6\u95f4\u538b\u7f29\u81f3\u4e0e\u62df\u5408\u4e00\u4e2a\u6a21\u578b\u65f6\u95f4\u76f8\u540c\uff0c\u516c\u5f0f\u5982\u4e0b\uff1a $$ CV_{n}=\\frac{i}{n}\\sum_{i=1}^n(\\frac{y_i-\\hat{y_i}}{1-h_i})^2 $$ \u5176\u4e2d \\(h_i\\) \u4e3a\u6760\u6746\u503c","title":"\u7559\u4e00\u4ea4\u53c9\u9a8c\u8bc1\u6cd5"},{"location":"ISL/#k_1","text":"\u4e0e LOOCV \u7c7b\u4f3c\uff0c\u628a\u6570\u636e\u96c6\u5206\u6210 k \u7ec4\uff0c\u6bcf\u6b21\u7559\u4e00\u7ec4\u4f5c\u4e3a\u9a8c\u8bc1\u96c6\uff0c\u8ba1\u7b97 \\(CV_k=\\frac{1}{k}\\sum_{i=1}^kMSE_i\\) \u4e3a\u4e86\u6743\u8861\u65b9\u5dee\u4e0e\u504f\u5dee\uff0ck \u4e00\u822c\u53d6 5 \u6216 10 \u4f18\u70b9\u663e\u800c\u6613\u89c1\uff0c\u8fd0\u7b97\u5feb\uff0c\u4f46\u662f\u5b58\u5728\u4e00\u5b9a\u7684\u6ce2\u52a8\u6027 LOOCV \u548c k\u6298\u4ea4\u53c9\u9a8c\u8bc1\u8fd8\u53ef\u4ee5\u7528\u4e8e\u9009\u62e9\u6a21\u578b\u7684\u5149\u6ed1\u7a0b\u5ea6","title":"k \u6298\u4ea4\u53c9\u9a8c\u8bc1\u6cd5"},{"location":"ISL/#k-","text":"\u4ece\u51cf\u5c0f\u504f\u5dee\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u663e\u7136 LOOCV \u6bd4 k \u6298 CV\u597d\uff0c\u4f46\u504f\u5dee\u4e0d\u662f\u552f\u4e00\u8003\u8651\u7684\u8981\u7d20 \\(k<n\\) \u65f6\uff0cLOOCV \u65b9\u6cd5\u7684\u65b9\u5dee\u6bd4 k \u6298 CV \u65b9\u6cd5\u7684\u65b9\u5dee\u5927\uff1b\u56e0\u4e3a LOOCV \u7684\u6bcf\u4e2a\u8bad\u7ec3\u96c6\u90fd\u662f\u51e0\u4e4e\u4e00\u6837\u7684\uff0c\u800c k \u6298 CV \u6bcf\u4e2a\u8bad\u7ec3\u96c6\u7684\u91cd\u53e0\u7a0b\u5ea6\u76f8\u5bf9\u8f83\u5c0f \u6240\u4ee5\u4e3a\u4e86\u6743\u8861\u65b9\u5dee\u4e0e\u504f\u5dee\uff0ck \u4e00\u822c\u53d6 5 \u6216 10","title":"k \u6298\u4ea4\u53c9\u9a8c\u8bc1\u7684\u504f\u5dee-\u65b9\u5dee\u6743\u8861"},{"location":"ISL/#_21","text":"","title":"\u81ea\u52a9\u6cd5"},{"location":"ISL/#_22","text":"","title":"\u7ebf\u6027\u6a21\u578b\u9009\u62e9\u4e0e\u6b63\u5219\u5316"},{"location":"ISL/#_23","text":"\u4ece \\(p\\) \u4e2a\u9884\u6d4b\u53d8\u91cf\u4e2d\u6311\u9009\u4e0e\u54cd\u5e94\u53d8\u91cf\u76f8\u5173\u7684\u53d8\u91cf\u5f62\u6210\u5b50\u96c6\uff0c\u518d\u5bf9\u8fd9\u4e2a\u5b50\u96c6\u8fd0\u7528\u6700\u5c0f\u4e8c\u4e58","title":"\u5b50\u96c6\u9009\u62e9"},{"location":"ISL/#_24","text":"\u5bf9 \\(p\\) \u4e2a\u9884\u6d4b\u53d8\u91cf\u7684\u6240\u6709\u7ec4\u5408\u5206\u522b\u4f7f\u7528\u6700\u5c0f\u4e8c\u4e58\uff0c\u5373\u4e00\u5171 \\(2^p\\) \u4e2a\u6a21\u578b \\(O(2^p)\\) \u5177\u4f53\u8fc7\u7a0b\uff1a \u4e0d\u542b\u9884\u6d4b\u53d8\u91cf\u7684\u96f6\u6a21\u578b \\(M_0\\) \u53ea\u7528\u4e8e\u4f30\u8ba1\u89c2\u6d4b\u6837\u672c\u7684\u6837\u672c\u5747\u503c \u5bf9\u4e8e \\(k=1,2,...,p\\) \uff1a (a) \u62df\u5408 \\(\\begin{pmatrix}p\\\\k\\end{pmatrix}\\) \u4e2a\u5305\u542b \\(k\\) \u4e2a\u9884\u6d4b\u53d8\u91cf\u7684\u6a21\u578b (b) \u4ece \\(\\begin{pmatrix}p\\\\k\\end{pmatrix}\\) \u4e2d\u9009\u62e9 \\(RSS\\) \u6700\u5c0f \u6216 \\(R^2\\) \u6700\u5927\u7684\u4f5c\u4e3a\u6700\u4f18\u6a21\u578b\uff0c\u8bb0\u4e3a \\(M_k\\) \u6839\u636e\u4ea4\u53c9\u9a8c\u8bc1\u9884\u6d4b\u8bef\u5dee\uff0c \\(c_p(AIC)\\) \uff0c \\(BIC\\) \uff0c\u6216\u8005 \u8c03\u6574 \\(R^2\\) \u4ece \\(M_0,...,M_p\\) \u4e2d\u9009\u62e9\u6700\u4f18\u7684\u6a21\u578b","title":"\u6700\u4f18\u5b50\u96c6\u9009\u62e9"},{"location":"ISL/#_25","text":"","title":"\u9010\u6b65\u9009\u62e9"},{"location":"ISL/#_26","text":"\u6bcf\u6b21\u6dfb\u52a0\u4e00\u4e2a\u80fd\u6700\u5927\u9650\u5ea6\u63d0\u5347\u6a21\u578b\u6548\u679c\u7684\u53d8\u91cf\u52a0\u5165\u6a21\u578b \\(O(n^2)\\) \u4e0d\u542b\u9884\u6d4b\u53d8\u91cf\u7684\u96f6\u6a21\u578b\u8bb0\u4e3a \\(M_0\\) \u5bf9\u4e8e \\(k=0,2,...,p-1\\) \uff1a (a) \u4ece \\(p-k\\) \u4e2a\u6a21\u578b\u4e2d\u8fdb\u884c\u9009\u62e9\uff0c\u6bcf\u4e2a\u90fd\u5728 \\(M_k\\) \u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e00\u4e2a\u53d8\u91cf (b) \u5728 \\(p-k\\) \u4e2a\u6a21\u578b\u4e2d\u9009\u62e9 \\(RSS\\) \u6700\u5c0f \u6216 \\(R^2\\) \u6700\u5927\u7684\u6a21\u578b\u8bb0\u4e3a \\(M_{k+1}\\) \u6839\u636e\u4ea4\u53c9\u9a8c\u8bc1\u9884\u6d4b\u8bef\u5dee\uff0c \\(c_p(AIC)\\) \uff0c \\(BIC\\) \uff0c\u6216\u8005 \u8c03\u6574 \\(R^2\\) \u4ece \\(M_0,...,M_p\\) \u4e2d\u9009\u62e9\u6700\u4f18\u7684\u6a21\u578b \u65e0\u6cd5\u4fdd\u8bc1\u662f\u5168\u5c40\u6700\u4f18\u7684\uff0c\u5728 \\(n<p\\) \u65f6\u90fd\u53ef\u4ee5\u4f7f\u7528\u5411\u524d\u9009\u62e9\uff0c\u8fd9\u65f6\u53ef\u4ee5\u5efa\u7acb\u5b50\u6a21\u578b \\(M_0,...,M_{n-1}\\) \u82e5 \\(n\\leq p\\) \uff0c\u7ed3\u679c\u662f\u4e0d\u552f\u4e00\u7684","title":"\u5411\u524d\u9010\u6b65\u9009\u62e9"},{"location":"ISL/#_27","text":"\u4e0e\u5411\u524d\u9009\u62e9\u7c7b\u4f3c \\(O(n^2)\\) \u5305\u542b\u5168\u90e8 \\(p\\) \u4e2a\u9884\u6d4b\u53d8\u91cf\u7684\u96f6\u6a21\u578b\u8bb0\u4e3a \\(M_p\\) \u5bf9\u4e8e \\(k=p,...1\\) \uff1a (a) \u4ece \\(k\\) \u4e2a\u6a21\u578b\u4e2d\u8fdb\u884c\u9009\u62e9\uff0c\u6bcf\u4e2a\u90fd\u5728 \\(M_k\\) \u7684\u57fa\u7840\u4e0a\u51cf\u5c11\u4e00\u4e2a\u53d8\u91cf (b) \u5728 \\(k\\) \u4e2a\u6a21\u578b\u4e2d\u9009\u62e9 \\(RSS\\) \u6700\u5c0f \u6216 \\(R^2\\) \u6700\u5927\u7684\u6a21\u578b\u8bb0\u4e3a \\(M_{k-1}\\) \u6839\u636e\u4ea4\u53c9\u9a8c\u8bc1\u9884\u6d4b\u8bef\u5dee\uff0c \\(c_p(AIC)\\) \uff0c \\(BIC\\) \uff0c\u6216\u8005 \u8c03\u6574 \\(R^2\\) \u4ece \\(M_0,...,M_p\\) \u4e2d\u9009\u62e9\u6700\u4f18\u7684\u6a21\u578b \u65e0\u6cd5\u4fdd\u8bc1\u662f\u5168\u5c40\u6700\u4f18\u7684\uff0c\u4e14\u9700\u8981\u6ee1\u8db3 \\(n > p\\)","title":"\u5411\u540e\u9010\u6b65\u9009\u62e9"},{"location":"ISL/#_28","text":"","title":"\u9009\u62e9\u6700\u4f18\u6a21\u578b"},{"location":"ISL/#c_paicbicr2","text":"\u8bad\u7ec3\u8bef\u5dee\u53ef\u80fd\u662f\u6d4b\u8bd5\u8bef\u5dee\u4e2d\u8f83\u5dee\u7684\u4e00\u4e2a\u4f30\u8ba1\uff0c \\(RSS,R^2\\) \u503c\u5e76\u4e0d\u9002\u7528\u4e8e\u5bf9\u5305\u542b\u4e0d\u540c\u53d8\u91cf\u4e2a\u6570\u7684\u6a21\u578b\u8fdb\u884c\u9009\u62e9 \u672c\u8282\u5305\u542b\u4e09\u4e2a\u65b9\u6cd5\uff1a \\(C_p\\) \uff0c\u8d64\u6c60\u4fe1\u606f\u91cf\u51c6\u5219AIC\uff0c\u8d1d\u53f6\u65af\u4fe1\u606f\u51c6\u5219BIC\uff0c\u8c03\u6574 \\(R^2\\) (Adjusted \\(R^2\\) ) \\(C_p=\\frac{1}{n}(RSS+2d\\hat{\\sigma}^2)\\) \u5176\u4e2d \\(\\hat{\\sigma}^2\\) \u662f \\(\\epsilon\\) \u7684\u4f30\u8ba1\u503c\uff0c \\(d\\) \u662f\u9884\u6d4b\u53d8\u91cf\u6570 \\(AIC=\\frac{1}{n\\hat{\\sigma}^2}(RSS+2d\\hat{\\sigma}^2)\\) \u9002\u7528\u4e8e\u4f7f\u7528\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u62df\u5408\u7684\u6a21\u578b\uff0c\u82e5 \\(\\epsilon\\) \u670d\u4ece\u9ad8\u65af\u5206\u5e03\uff0c\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u548c\u6700\u5c0f\u4e8c\u4e58\u662f\u7b49\u4ef7\u7684\uff1b\u5bf9\u4e8e\u6700\u5c0f\u4e8c\u4e58\u6a21\u578b \\(c_p\\ \\ AIC\\) \u6210\u6bd4\u4f8b \\(BIC=\\frac{1}{n}(RSS+log(n)d\\hat{\\sigma}^2)\\) \uff0c\u5bf9\u4e8e\u4efb\u610f \\(n>7,\\ log(n)>2\\) \u6240\u4ee5 \\(BIC\\) \u7684\u60e9\u7f5a\u66f4\u91cd\uff0c\u76f8\u6bd4\u4e8e \\(C_p\\) \u5f97\u5230\u7684\u6a21\u578b\u7684\u53d8\u91cf\u66f4\u5c11 \\(\u8c03\u6574R^2=1-\\frac{RSS/(n-d-1)}{TSS/(n-1)}\\) \u76f8\u6bd4\u4e8e \\(R^2\\) \u5f15\u5165\u4e86\u60e9\u7f5a \u9664\u4e86 \\(\u8c03\u6574R^2\\) \u90fd\u662f\u8d8a\u5c0f\u8d8a\u597d","title":"\\(C_p\\)\uff0cAIC\uff0cBIC\uff0c\u8c03\u6574\\(R^2\\)"},{"location":"ISL/#_29","text":"","title":"\u9a8c\u8bc1\u4e0e\u4ea4\u53c9\u9a8c\u8bc1"},{"location":"ISL/#_30","text":"\u5bf9\u5168\u90e8 \\(p\\) \u4e2a\u53d8\u91cf\u62df\u5408\uff0c\u52a0\u5165\u4e00\u4e9b\u7ea6\u675f\uff0c\u4e0e\u6700\u5c0f\u4e8c\u4e58\u76f8\u6bd4\u53ef\u4ee5\u5c06\u67d0\u4e9b\u7cfb\u6570\u7f29\u51cf\u4e3a 0","title":"\u538b\u7f29\u4f30\u8ba1\u65b9\u6cd5"},{"location":"ISL/#_31","text":"\\[ min \\ \\ RSS+\\lambda\\sum_{j=1}^{p}\\beta_j^2 \\] \\(\\lambda=0\\) \u65f6\uff0c\u60e9\u7f5a\u9879\u4e0d\u8d77\u4f5c\u7528\uff1b \\(\\lambda\\rightarrow inf\\) \u65f6\uff0c\u4f30\u8ba1\u503c\u4f1a\u8d8a\u6765\u8d8a\u63a5\u8fd1 0 \u60e9\u7f5a\u9879\u4e0d\u60e9\u7f5a\u5e38\u6570\u9879 \\(\\beta_0\\) \u6700\u5c0f\u4e8c\u4e58\u5982\u679c\u4e00\u4e2a\u53d8\u91cf\u7684\u5355\u4f4d\u53d8\u4e86\uff0c\u53ea\u4f1a\u5f71\u54cd\u6b64\u53d8\u91cf\u7684\u7cfb\u6570\uff1b\u800c\u5cad\u56de\u5f52\u5219\u4f1a\u5f71\u54cd\u5176\u4ed6\u7684\u7cfb\u6570\uff0c\u6240\u4ee5\u4f7f\u7528\u524d\u9700\u8981\u5c06\u53d8\u91cf\u8fdb\u884c\u6807\u51c6\u5316 (\u8fd9\u91cc\u7684\u6807\u51c6\u5316\u53ea\u662f\u9664\u4ee5\u4e86\u6807\u51c6\u5dee) $$ \\widetilde{x} {i,j}=\\frac{x {i,j}}{\\sqrt{\\frac{1}{n}\\sum(x_{ij}-\\bar{x}_j)^2}} $$ \u52a3\u52bf\uff1a\u4e0d\u4f1a\u628a\u7cfb\u6570\u786e\u5207\u7684\u538b\u7f29\u81f3 0\uff0c\u5f53 p \u5f88\u5927\u65f6\uff0c\u4e0d\u5229\u4e8e\u6a21\u578b\u89e3\u91ca","title":"\u5cad\u56de\u5f52"},{"location":"ISL/#lasso","text":"\\[ min \\ \\ RSS+\\lambda\\sum_{j=1}^p|\\beta_j| \\] \u60e9\u7f5a\u9879\u4e0d\u60e9\u7f5a\u5e38\u6570\u9879 \\(\\beta_0\\) Lasso \u80fd\u591f\u5c06\u53d8\u91cf\u538b\u7f29\u81f3 0","title":"Lasso"},{"location":"ISL/#_32","text":"","title":"\u5176\u4ed6"},{"location":"ISL/#_33","text":"\u7b80\u5355\u7ebf\u6027\u56de\u5f52\uff1a $$ RSS=\\sum_n(y_i-\\beta_0-\\beta_1x_i)^2 $$ \\[ \\frac{\\alpha RSS}{\\alpha \\beta_1}=\\sum_n-2x_i(y_i-\\beta_0-\\beta_1x_i)=0 \\\\ \\frac{\\alpha RSS}{\\alpha \\beta_0}=\\sum_n-2(y_i-\\beta_0-\\beta_1x_i)=0 \\] \u6574\u7406\u5f97 $$ \\beta_1=\\frac{\\sum_n(x_i-\\bar{x})(y_i-\\bar{y})}{\\sum_n(x_i-\\bar{x})^2} \\ \\beta_0=\\bar{y}-\\beta_1\\bar{x} $$ \u591a\u5143\u7ebf\u6027\u56de\u5f52\uff1a\u7528\u77e9\u9635\u7684\u5f62\u5f0f $$ min(RSS)=min||XA-Y||_2^2 $$ \\[ \\begin{equation} \\begin{split} \\frac{\\alpha RSS}{\\alpha X} &=\\frac{\\alpha (AX-Y)^T(AX-Y)}{\\alpha X} \\\\ &=\\frac{\\alpha (X^TA^TAX-X^TA^TY-Y^TAX+Y^TY)}{\\alpha X} \\end{split} \\end{equation} \\] \u7531 \\(\\frac{\\alpha X^TA}{\\alpha X} =\\frac{\\alpha A^TX}{\\alpha X}=A, \\ \\ \\ \\frac{\\alpha X^TAX}{\\alpha X} =AX+A^TX\\) \u5f97 $$ \\frac{\\alpha RSS}{\\alpha X} =2A^TAX-2A^TY=0 \\ X=(A^TA)^{-1}A^TY $$","title":"\u6700\u5c0f\u4e8c\u4e58\u63a8\u5bfc"},{"location":"ML/","text":"VAE\uff1a\u7c7b\u4f3c\uff27\uff21\uff2e Deep Learning \u00b6 \u57fa\u672c\u4e0a\u5206\u6210\u4e86 Regression \u548c Classification\uff0c\u9664\u6b64\u4e4b\u5916\u8fd8\u6709 Structed Learning CV \u00b6 Classification \u00b6 Conv \u00b6 LeNet\uff1aYann Lecun \u63d0\u51fa AlexNet\uff1a VGG\uff1a NiN\uff1a GoogLeNet\uff1a Inception\u5bb6\u65cf\u7684\u300c\u594b\u6597\u53f2\u300d - \u77e5\u4e4e (zhihu.com) ResNet\uff1a ResNetXt pytorch\u5b9e\u73b0ResNet_winycg\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_pytorch resnet MobileNet ShuffleNet EfficientNet vision transformer \u00b6 Activation Function \u00b6 Sigmoid Function $$ y(b+wx) = c\\ \\ sigmoid(b+wx)=c\\frac{1}{1+e^{-(b+wx)}} $$ \u5bf9\u4e0d\u540c\u7684 Hard Sigmoid \u53e0\u52a0\u7136\u540e\u52a0\u4e0a bias \u53ef\u4ee5\u5b9e\u73b0\u975e\u7ebf\u6027\u7cfb\u7edf\uff1a \u5bf9\u4e8e\u4e00\u4e2a\u7279\u5f81\u6765\u8bf4 \\(y=b+\\sum_i c_i\\ sigmoid(b_i+w_ix)\\) \u5bf9\u4e8e\u591a\u4e2a\u7279\u5f81\u6765\u8bf4 \\(y=b+\\sum_i c_i\\ sigmoid(b_i+\\sum_j w_{ij}x_{j})\\) ReLU Rectified Linear Unit $$ y(x) = c\\ max(0, x) $$ \u4e24\u4e2a ReLU \u7684\u53e0\u52a0\u53ef\u4ee5\u5f97\u5230 Hard Sigmoid self-attention \u00b6 attention positional coding Transformer \u00b6 encoder decoder\uff1aAutoregressive model\uff08AT\uff09\uff0cNon-autoregressive model\uff08NAT\uff09 guided attention\u3001beam search TTS\uff1aTextToSpeech Generative Model \u00b6 divergence GAN\uff1a WGAN \u4f7f\u7528 Wasserstein Distance \u7684 GAN Wasserstein Distance\uff1a $$ max_{D\\in1-Lipschitz}{E_{y-P_{data}}[D(y)]-E_{y-P_G}[D(y)]} $$ Improved WGAN\uff1aGradient Penalty Cycle GAN\uff1a SNGAN\uff1aSpectral Normalization GAN styleGAN Ensemble \u00b6 Bagging \u00b6 Transfer Learning \u00b6 \u7528\u9884\u8bad\u7ec3\u6a21\u578b\u65f6\u9700\u8981\u4f7f\u7528\u76f8\u540c\u7684\u9884\u5904\u7406\u65b9\u5f0f fine-tuning Semi-supervised Learning \u00b6 \u534a\u76d1\u7763\u6df1\u5ea6\u5b66\u4e60\u5c0f\u7ed3 - \u77e5\u4e4e (zhihu.com) \u534a\u76d1\u7763\u6df1\u5ea6\u5b66\u4e60\u8bad\u7ec3\u548c\u5b9e\u73b0\u5c0fTricks - \u77e5\u4e4e (zhihu.com) pseudo labeling Self-supervise Learning \u00b6 Contrast Learning \u00b6 https://www.bilibili.com/video/BV19S4y1M7hm?spm_id_from=333.337.search-card.all.click InstDisc\uff0cInvaSpread\uff0cCPC\uff0cCMC Moco\uff1ahttps://www.bilibili.com/video/BV1C3411s7t9?spm_id_from=333.337.search-card.all.click SimCLR SWaV BYOL\uff0cSimSaim Unsupersived Learning \u00b6 Self-supervised Learning \u00b6 BERT Auto-Encoder\uff1a Anomaly Detection\uff1a\u548c\u4e8c\u5143\u5206\u7c7b\u7684\u533a\u522b\uff1a\u5f02\u5e38\u8d44\u6599\u96be\u6536\u96c6 Explainable AI / Adversarial Attack \u00b6 Transfer Learning \u00b6 \u5982\u679c target data \u6709\u5c11\u91cf\u7684 label \u90a3\u5c31\u505a fine-tune\uff0c\u6ce8\u610f\u4e0d\u8981 overfitting\uff08\u5c11\u8dd1\u51e0\u4e2a epoch\uff0c\u6216\u8005\u524d\u540e\u53c2\u6570\u5dee\u5f02\u4e0d\u8981\u592a\u5927\uff09 Domain Adversarial Training \u00b6 Reinforcement Learning \u00b6 Policy Gradient Actor-Critic Reward Shaping\uff1aCuriosity Imitation Learning Inverse Reinforcement Learning\uff08IRL\uff09\uff1a\u6ca1\u6709 reward function Life Long Learning \u00b6 \u5176\u4ed6 \u00b6 General Guidance \u00b6 loss on training data\uff1a large\uff1a\u4ece\u7b80\u5355\u7684 model \u5f00\u59cb\u505a\u6765\u77e5\u9053\u662f model bias \u8fd8\u662f optimizer \u7684\u95ee\u9898 model bias\uff1a\u589e\u52a0 feature\uff0c\u52a0\u6df1\u6df1\u5ea6 optimizer\uff1a small\uff1a\u770b loss on testing data\uff1a large\uff1a overfitting\uff1a\u589e\u52a0\u8bad\u7ec3\u8d44\u6599\uff0cdata augmentation\uff0cless parameters\uff0csharingparames\uff0cless features\uff0cearly stopping\uff0cregularization\uff0cdropout mismatch\uff1a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u7684\u5206\u5e03\u4e0d\u540c small\uff1a\u597d loss \u6ce2\u52a8\u5f88\u5927\uff1a lr \u5927\u4e86 \u5404\u4e2a batch \u4e0d\u662f homogeneous \u7684\uff08\u5373\u5185\u5bb9\u5dee\u522b\u592a\u5927\uff09\uff0c\u4e0d\u80fd\u4ee3\u8868\u6574\u4f53\u6570\u636e\uff0c\u52a0\u5927 batch size Learning rate schedule \u00b6 Ablation study \u00b6 \u4ec0\u4e48\u662f\u6d88\u878d\u5b9e\u9a8c\uff08Ablation experiment\uff09Sandwichsauce\u7684\u535a\u5ba2-CSDN\u535a\u5ba2 \u6709\u4e00\u70b9\u50cf\u63a7\u5236\u53d8\u91cf\u7684\u611f\u89c9\u3002 \u56e0\u4e3a\u4f5c\u8005\u63d0\u51fa\u4e86\u4e00\u79cd\u65b9\u6848\uff0c\u540c\u65f6\u6539\u53d8\u4e86\u591a\u4e2a\u6761\u4ef6/\u53c2\u6570\uff0c\u4ed6\u5728\u63a5\u4e0b\u53bb\u7684\u6d88\u878d\u5b9e\u9a8c\u4e2d\uff0c\u4f1a\u4e00\u4e00\u63a7\u5236\u4e00\u4e2a\u6761\u4ef6/\u53c2\u6570\u4e0d\u53d8\uff0c\u6765\u770b\u770b\u7ed3\u679c\uff0c\u5230\u5e95\u662f\u54ea\u4e2a\u6761\u4ef6/\u53c2\u6570\u5bf9\u7ed3\u679c\u7684\u5f71\u54cd\u66f4\u5927\u3002 \u4e0b\u9762\u8fd9\u6bb5\u8bdd\u6458\u81ea\u77e5\u4e4e\uff0c@\u4eba\u6c11\u827a\u672f\u5bb6\uff1a \u4f60\u670b\u53cb\u8bf4\u4f60\u4eca\u5929\u7684\u6837\u5b50\u5f88\u5e05\uff0c\u4f60\u60f3\u77e5\u9053\u53d1\u578b\u3001\u4e0a\u8863\u548c\u88e4\u5b50\u5206\u522b\u8d77\u4e86\u591a\u5927\u7684\u4f5c\u7528\uff0c\u4e8e\u662f\u4f60\u6362\u4e86\u51e0\u4e2a\u53d1\u578b\uff0c\u4f60\u670b\u53cb\u8bf4\u8fd8\u662f\u633a\u5e05\u7684\uff0c\u4f60\u53c8\u6362\u4e86\u4ef6\u4e0a\u8863\uff0c\u4f60\u670b\u53cb\u8bf4\u4e0d\u5e05\u4e86\uff0c\u770b\u6765\u8fd9\u4ef6\u8863\u670d\u8fd8\u633a\u91cd\u8981\u7684\u3002 \u5206\u7c7b\u6027\u80fd\u5ea6\u91cf\u6307\u6807 \u00b6 ROC\u66f2\u7ebf\u3001AUC\u503c\u3001\u6b63\u786e\u7387\u3001\u53ec\u56de\u7387\u3001\u654f\u611f\u5ea6\u3001\u7279\u5f02\u5ea6 Batch Normalization \u00b6 \\[ x_{i+1}=\\gamma \\frac{x_i-\\mu_B}{\\sigma_B}+\\beta \\] \u5176\u4e2d \\(B\\) \u8868\u793a\u8f93\u5165\uff0c \\(\\mu_B\\) \u8868\u793a\u5747\u503c\uff0c \\(\\sigma_B^2\\) \u8868\u793a\u65b9\u5dee \u611f\u53d7\u91ce \u00b6 \u5377\u79ef\u5c42 $$ F(i)=(F(i+1)-1)\\times Stride+Ksize \\ F(n)= 1 $$ Activation Function \u00b6 Sigmoid h-sigmoid ReLU ReLU6 swish h-swish","title":"ML"},{"location":"ML/#deep-learning","text":"\u57fa\u672c\u4e0a\u5206\u6210\u4e86 Regression \u548c Classification\uff0c\u9664\u6b64\u4e4b\u5916\u8fd8\u6709 Structed Learning","title":"Deep Learning"},{"location":"ML/#cv","text":"","title":"CV"},{"location":"ML/#classification","text":"","title":"Classification"},{"location":"ML/#conv","text":"LeNet\uff1aYann Lecun \u63d0\u51fa AlexNet\uff1a VGG\uff1a NiN\uff1a GoogLeNet\uff1a Inception\u5bb6\u65cf\u7684\u300c\u594b\u6597\u53f2\u300d - \u77e5\u4e4e (zhihu.com) ResNet\uff1a ResNetXt pytorch\u5b9e\u73b0ResNet_winycg\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_pytorch resnet MobileNet ShuffleNet EfficientNet","title":"Conv"},{"location":"ML/#vision-transformer","text":"","title":"vision transformer"},{"location":"ML/#activation-function","text":"Sigmoid Function $$ y(b+wx) = c\\ \\ sigmoid(b+wx)=c\\frac{1}{1+e^{-(b+wx)}} $$ \u5bf9\u4e0d\u540c\u7684 Hard Sigmoid \u53e0\u52a0\u7136\u540e\u52a0\u4e0a bias \u53ef\u4ee5\u5b9e\u73b0\u975e\u7ebf\u6027\u7cfb\u7edf\uff1a \u5bf9\u4e8e\u4e00\u4e2a\u7279\u5f81\u6765\u8bf4 \\(y=b+\\sum_i c_i\\ sigmoid(b_i+w_ix)\\) \u5bf9\u4e8e\u591a\u4e2a\u7279\u5f81\u6765\u8bf4 \\(y=b+\\sum_i c_i\\ sigmoid(b_i+\\sum_j w_{ij}x_{j})\\) ReLU Rectified Linear Unit $$ y(x) = c\\ max(0, x) $$ \u4e24\u4e2a ReLU \u7684\u53e0\u52a0\u53ef\u4ee5\u5f97\u5230 Hard Sigmoid","title":"Activation Function"},{"location":"ML/#self-attention","text":"attention positional coding","title":"self-attention"},{"location":"ML/#transformer","text":"encoder decoder\uff1aAutoregressive model\uff08AT\uff09\uff0cNon-autoregressive model\uff08NAT\uff09 guided attention\u3001beam search TTS\uff1aTextToSpeech","title":"Transformer"},{"location":"ML/#generative-model","text":"divergence GAN\uff1a WGAN \u4f7f\u7528 Wasserstein Distance \u7684 GAN Wasserstein Distance\uff1a $$ max_{D\\in1-Lipschitz}{E_{y-P_{data}}[D(y)]-E_{y-P_G}[D(y)]} $$ Improved WGAN\uff1aGradient Penalty Cycle GAN\uff1a SNGAN\uff1aSpectral Normalization GAN styleGAN","title":"Generative Model"},{"location":"ML/#ensemble","text":"","title":"Ensemble"},{"location":"ML/#bagging","text":"","title":"Bagging"},{"location":"ML/#transfer-learning","text":"\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u65f6\u9700\u8981\u4f7f\u7528\u76f8\u540c\u7684\u9884\u5904\u7406\u65b9\u5f0f fine-tuning","title":"Transfer Learning"},{"location":"ML/#semi-supervised-learning","text":"\u534a\u76d1\u7763\u6df1\u5ea6\u5b66\u4e60\u5c0f\u7ed3 - \u77e5\u4e4e (zhihu.com) \u534a\u76d1\u7763\u6df1\u5ea6\u5b66\u4e60\u8bad\u7ec3\u548c\u5b9e\u73b0\u5c0fTricks - \u77e5\u4e4e (zhihu.com) pseudo labeling","title":"Semi-supervised Learning"},{"location":"ML/#self-supervise-learning","text":"","title":"Self-supervise Learning"},{"location":"ML/#contrast-learning","text":"https://www.bilibili.com/video/BV19S4y1M7hm?spm_id_from=333.337.search-card.all.click InstDisc\uff0cInvaSpread\uff0cCPC\uff0cCMC Moco\uff1ahttps://www.bilibili.com/video/BV1C3411s7t9?spm_id_from=333.337.search-card.all.click SimCLR SWaV BYOL\uff0cSimSaim","title":"Contrast Learning"},{"location":"ML/#unsupersived-learning","text":"","title":"Unsupersived Learning"},{"location":"ML/#self-supervised-learning","text":"BERT Auto-Encoder\uff1a Anomaly Detection\uff1a\u548c\u4e8c\u5143\u5206\u7c7b\u7684\u533a\u522b\uff1a\u5f02\u5e38\u8d44\u6599\u96be\u6536\u96c6","title":"Self-supervised Learning"},{"location":"ML/#explainable-ai-adversarial-attack","text":"","title":"Explainable AI / Adversarial Attack"},{"location":"ML/#transfer-learning_1","text":"\u5982\u679c target data \u6709\u5c11\u91cf\u7684 label \u90a3\u5c31\u505a fine-tune\uff0c\u6ce8\u610f\u4e0d\u8981 overfitting\uff08\u5c11\u8dd1\u51e0\u4e2a epoch\uff0c\u6216\u8005\u524d\u540e\u53c2\u6570\u5dee\u5f02\u4e0d\u8981\u592a\u5927\uff09","title":"Transfer Learning"},{"location":"ML/#domain-adversarial-training","text":"","title":"Domain Adversarial Training"},{"location":"ML/#reinforcement-learning","text":"Policy Gradient Actor-Critic Reward Shaping\uff1aCuriosity Imitation Learning Inverse Reinforcement Learning\uff08IRL\uff09\uff1a\u6ca1\u6709 reward function","title":"Reinforcement Learning"},{"location":"ML/#life-long-learning","text":"","title":"Life Long Learning"},{"location":"ML/#_1","text":"","title":"\u5176\u4ed6"},{"location":"ML/#general-guidance","text":"loss on training data\uff1a large\uff1a\u4ece\u7b80\u5355\u7684 model \u5f00\u59cb\u505a\u6765\u77e5\u9053\u662f model bias \u8fd8\u662f optimizer \u7684\u95ee\u9898 model bias\uff1a\u589e\u52a0 feature\uff0c\u52a0\u6df1\u6df1\u5ea6 optimizer\uff1a small\uff1a\u770b loss on testing data\uff1a large\uff1a overfitting\uff1a\u589e\u52a0\u8bad\u7ec3\u8d44\u6599\uff0cdata augmentation\uff0cless parameters\uff0csharingparames\uff0cless features\uff0cearly stopping\uff0cregularization\uff0cdropout mismatch\uff1a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u7684\u5206\u5e03\u4e0d\u540c small\uff1a\u597d loss \u6ce2\u52a8\u5f88\u5927\uff1a lr \u5927\u4e86 \u5404\u4e2a batch \u4e0d\u662f homogeneous \u7684\uff08\u5373\u5185\u5bb9\u5dee\u522b\u592a\u5927\uff09\uff0c\u4e0d\u80fd\u4ee3\u8868\u6574\u4f53\u6570\u636e\uff0c\u52a0\u5927 batch size","title":"General Guidance"},{"location":"ML/#learning-rate-schedule","text":"","title":"Learning rate schedule"},{"location":"ML/#ablation-study","text":"\u4ec0\u4e48\u662f\u6d88\u878d\u5b9e\u9a8c\uff08Ablation experiment\uff09Sandwichsauce\u7684\u535a\u5ba2-CSDN\u535a\u5ba2 \u6709\u4e00\u70b9\u50cf\u63a7\u5236\u53d8\u91cf\u7684\u611f\u89c9\u3002 \u56e0\u4e3a\u4f5c\u8005\u63d0\u51fa\u4e86\u4e00\u79cd\u65b9\u6848\uff0c\u540c\u65f6\u6539\u53d8\u4e86\u591a\u4e2a\u6761\u4ef6/\u53c2\u6570\uff0c\u4ed6\u5728\u63a5\u4e0b\u53bb\u7684\u6d88\u878d\u5b9e\u9a8c\u4e2d\uff0c\u4f1a\u4e00\u4e00\u63a7\u5236\u4e00\u4e2a\u6761\u4ef6/\u53c2\u6570\u4e0d\u53d8\uff0c\u6765\u770b\u770b\u7ed3\u679c\uff0c\u5230\u5e95\u662f\u54ea\u4e2a\u6761\u4ef6/\u53c2\u6570\u5bf9\u7ed3\u679c\u7684\u5f71\u54cd\u66f4\u5927\u3002 \u4e0b\u9762\u8fd9\u6bb5\u8bdd\u6458\u81ea\u77e5\u4e4e\uff0c@\u4eba\u6c11\u827a\u672f\u5bb6\uff1a \u4f60\u670b\u53cb\u8bf4\u4f60\u4eca\u5929\u7684\u6837\u5b50\u5f88\u5e05\uff0c\u4f60\u60f3\u77e5\u9053\u53d1\u578b\u3001\u4e0a\u8863\u548c\u88e4\u5b50\u5206\u522b\u8d77\u4e86\u591a\u5927\u7684\u4f5c\u7528\uff0c\u4e8e\u662f\u4f60\u6362\u4e86\u51e0\u4e2a\u53d1\u578b\uff0c\u4f60\u670b\u53cb\u8bf4\u8fd8\u662f\u633a\u5e05\u7684\uff0c\u4f60\u53c8\u6362\u4e86\u4ef6\u4e0a\u8863\uff0c\u4f60\u670b\u53cb\u8bf4\u4e0d\u5e05\u4e86\uff0c\u770b\u6765\u8fd9\u4ef6\u8863\u670d\u8fd8\u633a\u91cd\u8981\u7684\u3002","title":"Ablation study"},{"location":"ML/#_2","text":"ROC\u66f2\u7ebf\u3001AUC\u503c\u3001\u6b63\u786e\u7387\u3001\u53ec\u56de\u7387\u3001\u654f\u611f\u5ea6\u3001\u7279\u5f02\u5ea6","title":"\u5206\u7c7b\u6027\u80fd\u5ea6\u91cf\u6307\u6807"},{"location":"ML/#batch-normalization","text":"\\[ x_{i+1}=\\gamma \\frac{x_i-\\mu_B}{\\sigma_B}+\\beta \\] \u5176\u4e2d \\(B\\) \u8868\u793a\u8f93\u5165\uff0c \\(\\mu_B\\) \u8868\u793a\u5747\u503c\uff0c \\(\\sigma_B^2\\) \u8868\u793a\u65b9\u5dee","title":"Batch Normalization"},{"location":"ML/#_3","text":"\u5377\u79ef\u5c42 $$ F(i)=(F(i+1)-1)\\times Stride+Ksize \\ F(n)= 1 $$","title":"\u611f\u53d7\u91ce"},{"location":"ML/#activation-function_1","text":"Sigmoid h-sigmoid ReLU ReLU6 swish h-swish","title":"Activation Function"},{"location":"MLL/","text":"Deep Learning \u00b6 \u57fa\u672c\u4e0a\u5206\u6210\u4e86 Regression \u548c Classification\uff0c\u9664\u6b64\u4e4b\u5916\u8fd8\u6709 Structed Learning CV \u00b6 Classification \u00b6 CNN \u00b6 LeNet\uff1aYann Lecun \u63d0\u51fa AlexNet\uff1a VGG\uff1a NiN\uff1a GoogLeNet\uff1a Inception\u5bb6\u65cf\u7684\u300c\u594b\u6597\u53f2\u300d - \u77e5\u4e4e (zhihu.com) ResNet\uff1a ResNetXt pytorch\u5b9e\u73b0ResNet_winycg\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_pytorch resnet MobileNet ShuffleNet EfficientNet vision transformer \u00b6 Vit\uff1ahttps://arxiv.org/abs/2010.11929 Objection Detection \u00b6 \u5e38\u7528\u6307\u6807\uff1a TP / FP / FN / TF\uff08\u901a\u8fc7\u9650\u5b9a IoU \u6765\u5224\u65ad\uff09 \\(\\Rightarrow\\) Precision\uff0cRecall AP,P-R \u66f2\u7ebf\uff0cmAP RCNN FastRCNN\uff1a\u901f\u5ea6\u7684\u74f6\u9888\u53d8\u6210\u4e86 SS \u7b97\u6cd5 FasterRCNN SSD YOLO Mask-RCNN NLP \u00b6 Normalization Layers \u00b6 Batch Norm: https://blog.csdn.net/qq_37541097/article/details/104434557\uff0cBN \u53d7\u5230\u6a21\u578b \u6a21\u5f0f \u7684\u5f71\u54cd \uff08train \u548c eval\uff09\uff0c\u56e0\u4e3a\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u4f1a\u52a8\u91cf\u66f4\u65b0\u5747\u503c\u548c\u65b9\u5dee\uff1b\u662f\u5bf9\u540c\u4e00\u901a\u9053\u5185\uff0c\u4e0d\u540c\u7a7a\u95f4\u4f4d\u7f6e\uff0c\u6765\u81ea\u4e0d\u540c\u6837\u672c\u7684\u6570\u636e\u505a\u5f52\u4e00\u5316\uff1b\u5e94\u7528 BN \u7684 Conv \u4e00\u822c\u4e0d\u9700\u8981 Bias Layer Norm: \u94fe\u63a5 \uff0cLN \u4e0d\u53d7\u6a21\u578b\u6a21\u5f0f\u7684\u5f71\u54cd Learning Schedule \u00b6 optimizer \u00b6 SGD Stochastic Gradient Descend\uff0c\u4f7f\u7528\u4e00\u4e2a mini batch \u505a\u68af\u5ea6\u4e0b\u964d momentunm\u7684\u4f5c\u7528\uff1a \u7f13\u89e3\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u7684\u6ce2\u52a8 \u5e2e\u52a9\u9003\u79bb\u5c40\u90e8\u6781\u5c0f\u503c\u70b9\u548c\u978d\u70b9 Adagrad \u53ef\u53d8\u5b66\u4e60\u7387\u7684\u4f18\u5316\u7b97\u6cd5\uff1b\u4f46\u662f\u968f\u7740\u8fed\u4ee3\u6b21\u6570\u7684\u53d8\u5927\u5b66\u4e60\u6548\u7387\u4f1a\u53d8\u4f4e\uff0c\u5f53\u4e00\u76f4\u51fa\u73b0\u5927\u7684 grad \u65f6\u4f1a\u5bfc\u81f4 lr \u8fc5\u901f\u4e0b\u964d\uff0c\u5b66\u4e60\u6548\u7387\u4e5f\u4f1a\u53d8\u4f4e\uff1b \\[ w^{t+1}=w^t-\\frac{\\eta}{\\sqrt{\\sum\\limits_{i=0}^t(g^i)^2}}\\cdot g^t \\] RMSprop Root Mean Square prop \u5728 Adagrad \u7684\u57fa\u7840\u4e0a\u5bf9\u5b66\u4e60\u7387\u7684\u5206\u6bcd\u90e8\u5206\u7528\u7684\u52a0\u6743\u548c\uff0c\u8d8a\u65e9\u7684 grad \u7684\u6743\u91cd\u8d8a\u4f4e $$ w^{t+1}=w^t-\\frac{\\eta}{\\sigma^t}\\cdot g^t \\ \\sigma^t=\\sqrt{\\alpha(\\sigma^{t-1})^2+(1-\\alpha)(g^t)^2)} $$ Adadelta Adam RMSProp + Momentum $$ v_t=\\beta_1v_{t-1}+(1-\\beta_1)g_t \\ s_t=\\beta_2s_{t-1}+(1-\\beta_2)g_t^2 $$ \u5728\u65f6\u95f4\u6b65 \\(t\\) \u53ef\u4ee5\u5f97\u5230 \\(v_t=(1-\\beta_1)\\sum_{i=1}^{t}\\beta_1^{t-i}g_i\\) \uff0c\u628a\u8fc7\u53bb\u6240\u6709\u68af\u5ea6\u7684\u6743\u91cd\u76f8\u52a0\u5f97 \\((1-\\beta_1)\\sum_{i=1}^{t}\\beta_1^{t-i}g_i=1-\\beta^t\\) \uff0c\u5f53 \\(t\\) \u8f83\u5c0f\u65f6\u8fc7\u53bb\u5c0f\u6279\u91cf\u68af\u5ea6\u6743\u91cd\u4e4b\u548c\u592a\u5c0f\u4e86\uff0c\u4e3a\u4e86\u6d88\u9664\u5f71\u54cd\u505a\u504f\u5dee\u4fee\u6b63 $$ \\hat{v}_t=\\frac{v_t}{1-\\beta_1^t} \\ \\hat{s}_t=\\frac{s_t}{1-\\beta_2^t} $$ \u7136\u540e\u518d\u8c03\u6574\u53c2\u6570\uff1a $$ g_t^{'} = \\frac{\\eta \\hat{v}_t}{\\sqrt{\\hat{s}_t}+\\epsilon} $$ Adadelta lr scheduler \u00b6 warm up lr \u9010\u6e10\u53d8\u4f4e Loss Functions \u00b6 MSELoss \u5747\u65b9\u5dee BCELoss Binary Cross Entropy \\[ \u2113(x,y)=L=\\{l_1,\u2026,l_N\\}\u22a4\\\\ l_n=-w_n[y_n\\cdot logx_n+(1-y_n)\\cdot log(1-x_n)] \\] NLLLoss \u8d1f\u5bf9\u6570\u4f3c\u7136\u4f30\u8ba1 LogSoftmax \\(LogSoftmax(x_i)=log(\\frac{exp(x_i)}{\u2211_jexp(x_j)})\\) CrossEntropyLoss pytorch \u4e2d\u8981\u6ce8\u610f\u7528 CrossEntropy \u65f6\uff0c\u6a21\u578b\u4e0d\u9700\u8981\u505a SoftMax \\(loss(x,class)=\u2212log(\\frac{exp(x[class])}{\u2211_jexp(x[j])})=\u2212x[class]+log(\u2211_j exp(x[j]))\\) \u5176\u4e2d x \u662f Tensor \u8868\u793a\u9884\u6d4b\u5411\u91cf\uff0cclass \u662f\u771f\u5b9e\u6807\u7b7e LabelSmoothLoss \u7f13\u89e3\u8fc7\u62df\u5408 $$ loss =-\\sum_{i=1}^kp_ilog(q_i) \\ p_i = \\begin{cases} 1-\\epsilon ,if\\ \\ i=y \\ \\frac{\\epsilon}{K-1},if\\ \\ i\\not =y \\end{cases} $$ \u5176\u4ed6 \u00b6 weight initialize \u00b6 \u6734\u7d20\u65b9\u6cd5\uff1a\u5747\u5300\u5206\u5e03\u6216\u9ad8\u65af\u5206\u5e03 Xavier Kaiming \u9884\u8bad\u7ec3\u6743\u91cd + finetune \u9632\u6b62 overfitting \u00b6 early stop weigh decay Data Augmentation Data Augmentation \u00b6 \u901a\u7528\u7684\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\uff1a\u968f\u673a\u88c1\u5207\u3001\u7ffb\u8f6c\uff08\u5de6\u53f3\u4e0a\u4e0b\uff09\u3001\u989c\u8272\u6296\u52a8\uff08color jitter\uff09\u3001\u566a\u58f0\uff08\u9ad8\u65af\u566a\u58f0\uff09\u3001\u65cb\u8f6c\u3001 \u5e73\u79fb\u3001\u7f29\u653e\u3001\u4eff\u5c04\u53d8\u6362\u7b49 mixup cutout cutmix blog \u00b6 \u8f6c\u7f6e\u5377\u79ef\uff1a \u53f2\u4e39\u5229\u590d\u5408\u7530 \u592a\u9633\u82b1\u7684\u5c0f\u7eff\u8c46","title":"Deep Learning"},{"location":"MLL/#deep-learning","text":"\u57fa\u672c\u4e0a\u5206\u6210\u4e86 Regression \u548c Classification\uff0c\u9664\u6b64\u4e4b\u5916\u8fd8\u6709 Structed Learning","title":"Deep Learning"},{"location":"MLL/#cv","text":"","title":"CV"},{"location":"MLL/#classification","text":"","title":"Classification"},{"location":"MLL/#cnn","text":"LeNet\uff1aYann Lecun \u63d0\u51fa AlexNet\uff1a VGG\uff1a NiN\uff1a GoogLeNet\uff1a Inception\u5bb6\u65cf\u7684\u300c\u594b\u6597\u53f2\u300d - \u77e5\u4e4e (zhihu.com) ResNet\uff1a ResNetXt pytorch\u5b9e\u73b0ResNet_winycg\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_pytorch resnet MobileNet ShuffleNet EfficientNet","title":"CNN"},{"location":"MLL/#vision-transformer","text":"Vit\uff1ahttps://arxiv.org/abs/2010.11929","title":"vision transformer"},{"location":"MLL/#objection-detection","text":"\u5e38\u7528\u6307\u6807\uff1a TP / FP / FN / TF\uff08\u901a\u8fc7\u9650\u5b9a IoU \u6765\u5224\u65ad\uff09 \\(\\Rightarrow\\) Precision\uff0cRecall AP,P-R \u66f2\u7ebf\uff0cmAP RCNN FastRCNN\uff1a\u901f\u5ea6\u7684\u74f6\u9888\u53d8\u6210\u4e86 SS \u7b97\u6cd5 FasterRCNN SSD YOLO Mask-RCNN","title":"Objection Detection"},{"location":"MLL/#nlp","text":"","title":"NLP"},{"location":"MLL/#normalization-layers","text":"Batch Norm: https://blog.csdn.net/qq_37541097/article/details/104434557\uff0cBN \u53d7\u5230\u6a21\u578b \u6a21\u5f0f \u7684\u5f71\u54cd \uff08train \u548c eval\uff09\uff0c\u56e0\u4e3a\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u4f1a\u52a8\u91cf\u66f4\u65b0\u5747\u503c\u548c\u65b9\u5dee\uff1b\u662f\u5bf9\u540c\u4e00\u901a\u9053\u5185\uff0c\u4e0d\u540c\u7a7a\u95f4\u4f4d\u7f6e\uff0c\u6765\u81ea\u4e0d\u540c\u6837\u672c\u7684\u6570\u636e\u505a\u5f52\u4e00\u5316\uff1b\u5e94\u7528 BN \u7684 Conv \u4e00\u822c\u4e0d\u9700\u8981 Bias Layer Norm: \u94fe\u63a5 \uff0cLN \u4e0d\u53d7\u6a21\u578b\u6a21\u5f0f\u7684\u5f71\u54cd","title":"Normalization Layers"},{"location":"MLL/#learning-schedule","text":"","title":"Learning Schedule"},{"location":"MLL/#optimizer","text":"SGD Stochastic Gradient Descend\uff0c\u4f7f\u7528\u4e00\u4e2a mini batch \u505a\u68af\u5ea6\u4e0b\u964d momentunm\u7684\u4f5c\u7528\uff1a \u7f13\u89e3\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u7684\u6ce2\u52a8 \u5e2e\u52a9\u9003\u79bb\u5c40\u90e8\u6781\u5c0f\u503c\u70b9\u548c\u978d\u70b9 Adagrad \u53ef\u53d8\u5b66\u4e60\u7387\u7684\u4f18\u5316\u7b97\u6cd5\uff1b\u4f46\u662f\u968f\u7740\u8fed\u4ee3\u6b21\u6570\u7684\u53d8\u5927\u5b66\u4e60\u6548\u7387\u4f1a\u53d8\u4f4e\uff0c\u5f53\u4e00\u76f4\u51fa\u73b0\u5927\u7684 grad \u65f6\u4f1a\u5bfc\u81f4 lr \u8fc5\u901f\u4e0b\u964d\uff0c\u5b66\u4e60\u6548\u7387\u4e5f\u4f1a\u53d8\u4f4e\uff1b \\[ w^{t+1}=w^t-\\frac{\\eta}{\\sqrt{\\sum\\limits_{i=0}^t(g^i)^2}}\\cdot g^t \\] RMSprop Root Mean Square prop \u5728 Adagrad \u7684\u57fa\u7840\u4e0a\u5bf9\u5b66\u4e60\u7387\u7684\u5206\u6bcd\u90e8\u5206\u7528\u7684\u52a0\u6743\u548c\uff0c\u8d8a\u65e9\u7684 grad \u7684\u6743\u91cd\u8d8a\u4f4e $$ w^{t+1}=w^t-\\frac{\\eta}{\\sigma^t}\\cdot g^t \\ \\sigma^t=\\sqrt{\\alpha(\\sigma^{t-1})^2+(1-\\alpha)(g^t)^2)} $$ Adadelta Adam RMSProp + Momentum $$ v_t=\\beta_1v_{t-1}+(1-\\beta_1)g_t \\ s_t=\\beta_2s_{t-1}+(1-\\beta_2)g_t^2 $$ \u5728\u65f6\u95f4\u6b65 \\(t\\) \u53ef\u4ee5\u5f97\u5230 \\(v_t=(1-\\beta_1)\\sum_{i=1}^{t}\\beta_1^{t-i}g_i\\) \uff0c\u628a\u8fc7\u53bb\u6240\u6709\u68af\u5ea6\u7684\u6743\u91cd\u76f8\u52a0\u5f97 \\((1-\\beta_1)\\sum_{i=1}^{t}\\beta_1^{t-i}g_i=1-\\beta^t\\) \uff0c\u5f53 \\(t\\) \u8f83\u5c0f\u65f6\u8fc7\u53bb\u5c0f\u6279\u91cf\u68af\u5ea6\u6743\u91cd\u4e4b\u548c\u592a\u5c0f\u4e86\uff0c\u4e3a\u4e86\u6d88\u9664\u5f71\u54cd\u505a\u504f\u5dee\u4fee\u6b63 $$ \\hat{v}_t=\\frac{v_t}{1-\\beta_1^t} \\ \\hat{s}_t=\\frac{s_t}{1-\\beta_2^t} $$ \u7136\u540e\u518d\u8c03\u6574\u53c2\u6570\uff1a $$ g_t^{'} = \\frac{\\eta \\hat{v}_t}{\\sqrt{\\hat{s}_t}+\\epsilon} $$ Adadelta","title":"optimizer"},{"location":"MLL/#lr-scheduler","text":"warm up lr \u9010\u6e10\u53d8\u4f4e","title":"lr scheduler"},{"location":"MLL/#loss-functions","text":"MSELoss \u5747\u65b9\u5dee BCELoss Binary Cross Entropy \\[ \u2113(x,y)=L=\\{l_1,\u2026,l_N\\}\u22a4\\\\ l_n=-w_n[y_n\\cdot logx_n+(1-y_n)\\cdot log(1-x_n)] \\] NLLLoss \u8d1f\u5bf9\u6570\u4f3c\u7136\u4f30\u8ba1 LogSoftmax \\(LogSoftmax(x_i)=log(\\frac{exp(x_i)}{\u2211_jexp(x_j)})\\) CrossEntropyLoss pytorch \u4e2d\u8981\u6ce8\u610f\u7528 CrossEntropy \u65f6\uff0c\u6a21\u578b\u4e0d\u9700\u8981\u505a SoftMax \\(loss(x,class)=\u2212log(\\frac{exp(x[class])}{\u2211_jexp(x[j])})=\u2212x[class]+log(\u2211_j exp(x[j]))\\) \u5176\u4e2d x \u662f Tensor \u8868\u793a\u9884\u6d4b\u5411\u91cf\uff0cclass \u662f\u771f\u5b9e\u6807\u7b7e LabelSmoothLoss \u7f13\u89e3\u8fc7\u62df\u5408 $$ loss =-\\sum_{i=1}^kp_ilog(q_i) \\ p_i = \\begin{cases} 1-\\epsilon ,if\\ \\ i=y \\ \\frac{\\epsilon}{K-1},if\\ \\ i\\not =y \\end{cases} $$","title":"Loss Functions"},{"location":"MLL/#_1","text":"","title":"\u5176\u4ed6"},{"location":"MLL/#weight-initialize","text":"\u6734\u7d20\u65b9\u6cd5\uff1a\u5747\u5300\u5206\u5e03\u6216\u9ad8\u65af\u5206\u5e03 Xavier Kaiming \u9884\u8bad\u7ec3\u6743\u91cd + finetune","title":"weight initialize"},{"location":"MLL/#overfitting","text":"early stop weigh decay Data Augmentation","title":"\u9632\u6b62 overfitting"},{"location":"MLL/#data-augmentation","text":"\u901a\u7528\u7684\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\uff1a\u968f\u673a\u88c1\u5207\u3001\u7ffb\u8f6c\uff08\u5de6\u53f3\u4e0a\u4e0b\uff09\u3001\u989c\u8272\u6296\u52a8\uff08color jitter\uff09\u3001\u566a\u58f0\uff08\u9ad8\u65af\u566a\u58f0\uff09\u3001\u65cb\u8f6c\u3001 \u5e73\u79fb\u3001\u7f29\u653e\u3001\u4eff\u5c04\u53d8\u6362\u7b49 mixup cutout cutmix","title":"Data Augmentation"},{"location":"MLL/#blog","text":"\u8f6c\u7f6e\u5377\u79ef\uff1a \u53f2\u4e39\u5229\u590d\u5408\u7530 \u592a\u9633\u82b1\u7684\u5c0f\u7eff\u8c46","title":"blog"},{"location":"Pytorch/","text":"Pytorch \u00b6 \u53c2\u8003\uff1ahttps://space.bilibili.com/18161609 \u5de5\u5177\uff1aTensorBoard Tensor \u64cd\u4f5c\u548c\u5904\u7406 \u00b6 \u521b\u5efa\u4e0e\u521d\u59cb\u5316 \u00b6 torch . tensor ( data ) torch . FloatTensor ( data ) torch . LongTensor ( data ) torch . rand ( * sizes , dtype = None ) # \u5747\u5300\u5206\u5e03 [0, 1) torch . randn ( * sizes , dtype = None ) # \u6b63\u6001\u5206\u5e03 torch . empty ( * size , dtype = None ) # Returns a tensor filled with uninitialized data torch . zeors ( * size , dtype = None ) torch . ones ( * size ) torch . eye ( * size ) torch . arange ( s , e , step ) torch . linspace ( s , e , steps ) # [s, e], \u5747\u5206\u51fa steps \u4e2a\u6570 torch . as_tensor () \u7ef4\u5ea6\u53d8\u6362 \u00b6 transpose \u9488\u5bf9 2 \u4e2a\u7ef4\u5ea6\u7684\u53d8\u6362 permute \u76f8\u5f53\u4e8e\u591a\u6b21 permute\uff0c\u5185\u5b58\u4e2d\u5b58\u50a8\u7684\u65b9\u5f0f\u4e0d\u53d8 view \u5fc5\u987b\u64cd\u4f5c\u5728\u4e00\u4e2a contiguous \u7684\u77e9\u9635\u4e0a\uff0c\u56e0\u4e3a\u5b83\u662f\u5148\u628a Tensor \u5c55\u6210\u4e00\u7ef4\u540e\u518d\u5904\u7406 tensor . dim () # Returns the number of dimensions tensor . ndim # alias dim() torch . sequeeze () torch . unsequeeze () torch . view () torch . transpose ( input , dim1 , dim2 ) tensor . transpose ( dim1 , dim2 ) torch . permute ( input , dims ) # dims: tuple of ints tensor . permute ( * dims ) torch . flatten ( input , dim ) torch . chunk ( input , chunks , dim = 0 ) tensor . expand ( * size ) # \u7c7b\u4f3c\u5e7f\u64ad\u673a\u5236\uff1f \u589e\u5220\u6539\u67e5 \u00b6 tensor . expand ( * size ) # \u7c7b\u4f3c\u5e7f\u64ad\u673a\u5236\uff1f torch . stack ( inputs , dim = 0 ) # inputs \u4e2d\u7684 Tensor \u7ef4\u5ea6\u76f8\u540c\uff0c\u5728\u4e00\u4e2a\u65b0\u7684 dim \u4e0a\u8fde\u63a5 torch . cat ( inputs , dim = 0 ) # inputs \u4e2d\u7684 Tensor \u5728\u6307\u5b9a\u7ef4\u5ea6\u5916\u7ef4\u5ea6\u8981\u76f8\u540c\uff0c\u5728\u5df2\u6709\u7684\u7ef4\u5ea6\u4e0a\u8fde\u63a5 F . pad ( input , pad ) # pad \u4e3a tuple\uff0c\u4e14\u8868\u793a\u7684\u7ef4\u5ea6\u4ece\u540e\u5f80\u524d tensor . masked_fill ( mask , value ) # mask: BoolTensor, shape \u5fc5\u987b\u53ef\u4ee5\u8fdb\u884c\u5e7f\u64ad \u7c7b\u578b\u8f6c\u6362 \u00b6 tensor . numpy () \u8ba1\u7b97\u4e0e\u7edf\u8ba1 \u00b6 torch . bincount () # \u7edf\u8ba1\u9891\u6570 torch . diag () # \u83b7\u53d6\u5bf9\u89d2\u7ebf\u7684\u5143\u7d20 \u5176\u4ed6 \u00b6 # eg # \u539f\u6765 x = [[1, 2], [3, 4]] \u5728\u5185\u5b58\u4e2d\u4e3a 1, 2, 3, 4 # transpose \u540e x = [[1, 3], [2, 4]] \u5728\u5185\u5b58\u4e2d\u8fd8\u662f 1, 2, 3, 4 # contiguous \u540e x = [[1, 3], [2, 4]] \u5728\u5185\u5b58\u662f 1, 3, 2, 4 tensor . contiguous () tensor . unbind ( dim ) torch . roll ( input , shifts , dims = None ) # \u5728\u6307\u5b9a\u7ef4\u5ea6\u4e0a\u6eda\u52a8 shifts \u6b21 (\u6bd4\u5982\u5728 Swin Transformer \u7684 SW-MSA \u4f1a\u7528\u5230) tensor . new_full () # \u521b\u5efa\u4e00\u4e2a\u65b0Tensor tensor . expand_as () # \u6269\u5c55\u5230\u548c\u53e6\u4e00\u4e2aTensor\u76f8\u540c\u7684\u7ef4\u5ea6 tensor . split () # \u5bf9\u6307\u5b9a\u7ef4\u5ea6\u8fdb\u884c\u5206\u5272 tensor . topk () tensor . clamp ( min , max ) # \u88c1\u526a torch . ge () torch . logical_and () torch . nonzero () torch . where () # \u8981\u6ce8\u610f\u548c torch.nonzero() \u8fd4\u56de\u503c\u7684\u533a\u522b torch . numel () torch . randperm () torch . zeros_like () torch.nn \u00b6 Module \u7684\u64cd\u4f5c\u548c\u5904\u7406 \u00b6 \u521b\u5efa\u81ea\u5b9a\u4e49Module \u00b6 import torch.nn as nn class mynn ( nn . Module ): def __init__ ( self ): super ( mynn , self ) . __init__ () # \u8c03\u7528\u7236\u7c7b\u6784\u9020\u51fd\u6570 self . model = nn . Sequential ([ # Sequential \u7684\u5b9a\u4e49\u65b9\u5f0f\u53c2\u8003 nn.Sequential nn . Conv2d ( 1 , 20 , 5 ) nn . ReLU () ]) def forward ( self , x ): x = self . model ( x ) return x nn . Sequential () # \u53c2\u6570\u4e3a *list \u6216\u8005 OrderedDict nn . ModuleList ( list ) \u83b7\u53d6\u4e2d\u95f4\u6a21\u5757 \u00b6 children() \u8fd4\u56de\u76f4\u63a5\u5b50\u6a21\u5757\uff0cmodules() \u4f1a\u9012\u5f52\u7684\u904d\u5386\u6240\u6709\u5b50\u6a21\u5757 Module.children() && Module.named_children() model.modules() && model.named_modules() Module \u65b9\u6cd5 \u00b6 Module . apply ( fn ) # Applies fn recursively to every submodule (as returned by .children()) # https://blog.csdn.net/weixin_38145317/article/details/104917218 Module . register_buffer ( name , tensor , persistent = True ) # \u5411\u6a21\u5757\u6dfb\u52a0\u6301\u4e45\u7f13\u51b2\u533a, \u4ee5\u5b57\u5178\u5f62\u5f0f\uff0c\u4e0d\u4f1a\u56e0\u4e3a step \u800c\u66f4\u65b0 \u6fc0\u6d3b\u51fd\u6570 \u00b6 \u6fc0\u6d3b\u51fd\u6570 \u8bf4\u660e nn.Sigmoid() nn.ReLU() nn.ReLU6() nn.GELU() \u6c60\u5316\u5c42 Pooling layers \u00b6 \u6c60\u5316\u5c42 \u8bf4\u660e nn.AdaptiveAvgPool2d((H, W)) \u81ea\u9002\u5e94\u5e73\u5747\u6c60\u5316\u5c42\uff0c\u53c2\u6570\u6307\u5b9a\u8f93\u51fa\u7684 \\(H\\times W\\) \u4e22\u5f03\u5c42 Dropout layers \u00b6 # \u5728 forward \u4e2d\u4f7f\u7528 F.dropout() x = F . dropout ( x , 0.5 , training = self . training ) # model.train()\u65f6,self.training=True\uff0cmodel.eval()\u65f6\u4e3aFalse # \u4f7f\u7528 F.dropout() \u7684\u5c01\u88c5 nn.Dropout() self . dropout = nn . Dropout ( 0.5 ) # \u5728\u521d\u59cb\u5316\u4e2d x = self . dropout ( x ) # \u5728 forward \u4e2d \u6807\u51c6\u5316\u5c42 Normalization layers \u00b6 \u4e3a\u4ec0\u4e48\u662f Normalization \u800c\u4e0d\u662f Standardization\uff1f $$ \\hat{x}=a\\frac{x-\\mu}{\\sigma} + b $$ nn.BatchNorm1d() / 2d() / 3d() \u4f7f\u7528BN \u65f6\u9700\u8981\u6ce8\u610f\u7684\u95ee\u9898\uff1a batch size \u4e0d\u5b9c\u8fc7\u5c0f\uff0c\u4e0d\u7136\u6c42\u51fa\u7684\u5747\u503c\u548c\u65b9\u5dee\u8bef\u5dee\u4f1a\u5f88\u5927 bn \u5c42\u5efa\u8bae\u653e\u5728 Conv \u548c \u6fc0\u6d3b\u5c42 \u4e4b\u95f4\uff0c\u5e76\u4e14 Conv \u4e0d\u9700\u8981\u4f7f\u7528 bias Parameter \u00b6 \u8ba9 Tensor \u4f5c\u4e3a\u53ef\u8bad\u7ec3\u7684\u53c2\u6570\uff0c\u5982 Transformer \u4e2d\u7684 position \u4fe1\u606f \u662f Tensor \u7684\u5b50\u7c7b torch . nn . parameter . Parameter ( data = None , requires_grad = True ) \u4f18\u5316\u5668 optimizer \u00b6 optimizer \u00b6 \u770b\u5230\u7684\u65b0\u7684\u4f18\u5316\u5668\uff1aSWA Why Momentum Really Works (distill.pub) optim.SGD() optimizer = torch . optim . SGD ( net . parameters (), lr = step_size , momentum = momentum , weight_decay = 0 ) print ( optimizer ) weight_decay\uff1a\u6743\u91cd\u8870\u51cf\uff08L2 penalty\uff09\u7684\u7cfb\u6570 optim.Adagrad() \u53ef\u53d8\u5b66\u4e60\u7387\u7684\u4f18\u5316\u7b97\u6cd5\uff1b\u4f46\u662f\u968f\u7740\u8fed\u4ee3\u6b21\u6570\u7684\u53d8\u5927\u5b66\u4e60\u6548\u7387\u4f1a\u53d8\u4f4e\uff0c\u5f53\u4e00\u76f4\u51fa\u73b0\u5927\u7684 grad \u65f6\u4f1a\u5bfc\u81f4 lr \u8fc5\u901f\u4e0b\u964d\uff0c\u5b66\u4e60\u6548\u7387\u4e5f\u4f1a\u53d8\u4f4e\uff1b \\[ w^{t+1}=w^t-\\frac{\\eta}{\\sqrt{\\sum\\limits_{i=0}^t(g^i)^2}}\\cdot g^t \\] optim.RMSprop() Root Mean Square prop \u5728 Adagrad \u7684\u57fa\u7840\u4e0a\u5bf9\u5b66\u4e60\u7387\u7684\u5206\u6bcd\u90e8\u5206\u7528\u7684\u52a0\u6743\u548c\uff0c\u8d8a\u65e9\u7684 grad \u7684\u6743\u91cd\u8d8a\u4f4e $$ w^{t+1}=w^t-\\frac{\\eta}{\\sigma^t}\\cdot g^t \\ \\sigma^t=\\sqrt{\\alpha(\\sigma^{t-1})^2+(1-\\alpha)(g^t)^2)} $$ optim.Adadelta() optim.Adam() RMSProp + Momentum $$ v_t=\\beta_1v_{t-1}+(1-\\beta_1)g_t \\ s_t=\\beta_2s_{t-1}+(1-\\beta_2)g_t^2 $$ \u5728\u65f6\u95f4\u6b65 \\(t\\) \u53ef\u4ee5\u5f97\u5230 \\(v_t=(1-\\beta_1)\\sum_{i=1}^{t}\\beta_1^{t-i}g_i\\) \uff0c\u628a\u8fc7\u53bb\u6240\u6709\u68af\u5ea6\u7684\u6743\u91cd\u76f8\u52a0\u5f97 \\((1-\\beta_1)\\sum_{i=1}^{t}\\beta_1^{t-i}g_i=1-\\beta^t\\) \uff0c\u5f53 \\(t\\) \u8f83\u5c0f\u65f6\u8fc7\u53bb\u5c0f\u6279\u91cf\u68af\u5ea6\u6743\u91cd\u4e4b\u548c\u592a\u5c0f\u4e86\uff0c\u4e3a\u4e86\u6d88\u9664\u5f71\u54cd\u505a\u504f\u5dee\u4fee\u6b63 $$ \\hat{v}_t=\\frac{v_t}{1-\\beta_1^t} \\ \\hat{s}_t=\\frac{s_t}{1-\\beta_2^t} $$ \u7136\u540e\u518d\u8c03\u6574\u53c2\u6570\uff1a $$ g_t^{'} = \\frac{\\eta \\hat{v}_t}{\\sqrt{\\hat{s}_t}+\\epsilon} $$ optimizer = torch . optim . Adam ( params , lr = 0.001 , betas = ( 0.9 , 0.999 ), weight_decay = 0 ) print ( optimizer ) lr (float) \uff1alearning rate\uff0cdefault\uff1a 0.001 weight_decay (float) \uff1a\u6b63\u5219\u9879\u524d\u9762\u7684\u7cfb\u6570 betas (Tuple[float, float]) \uff1a\u89c1\u4e0a\u8ff0\u63a8\u5bfc torch.optim.Adadelta() Learning rate schedule \u00b6 \u4e3a\u5b50\u7f51\u8bbe\u7f6e\u4e0d\u540c\u7684 lr \u53ef\u4ee5\u4e3a\u4e0d\u540c\u5b50\u7f51\u7edc\u8bbe\u7f6e\u4e0d\u540c\u7684\u5b66\u4e60\u7387\uff0c\u8fd9\u5728finetune\u65f6\u7ecf\u5e38\u7528\u5230 optimizer = optim . SGD ([ # \u5982\u679c\u5bf9\u67d0\u4e2a\u53c2\u6570\u4e0d\u6307\u5b9a\u5b66\u4e60\u7387\uff0c\u5c31\u4f7f\u7528\u6700\u5916\u5c42\u7684\u9ed8\u8ba4\u5b66\u4e60\u7387 { 'params' : net . subnet1 . parameters ()}, # lr=0.03 { 'params' : net . subnet2 . parameters (), 'lr' : 0.01 } ], lr = 0.03 ) \u8c03\u6574 lr \u4e0d\u5e0c\u671b lr \u662f\u4e00\u4e2a\u56fa\u5b9a\u7684\u5e38\u6570\uff0c\u5982 Learning Rate Deacy \u5e0c\u671b lr \u968f\u65f6\u95f4\u53d8\u5c0f \u65b9\u6cd51\uff1a\u4fee\u6539 optimizer.param_groups \u4e2d\u5bf9\u5e94\u7684\u5b66\u4e60\u7387 # \u8c03\u6574\u5b66\u4e60\u7387 for param_group in optimizer . param_groups : param_group [ 'lr' ] *= 0.1 # \u5b66\u4e60\u7387\u4e3a\u4e4b\u524d\u76840.1\u500d \u65b9\u6cd52\uff1a\u65b0\u5efa\u4f18\u5316\u5668 optimizer \u6784\u5efa\u7684\u5f00\u9500\u5f88\u5c0f\uff0c\u4f46\u662f\u5bf9\u4e8e\u4f7f\u7528\u52a8\u91cf\u7684\u4f18\u5316\u5668\uff08\u5982Adam\uff09\u4f1a\u4e22\u5931\u52a8\u91cf\u4fe1\u606f\uff0c\u53ef\u80fd\u4f1a\u9020\u6210\u635f\u5931\u51fd\u6570\u7684\u6536\u655b\u51fa\u73b0\u9707\u8361\u7b49\u60c5\u51b5 optim.lr_scheduler \u5982\u679c\u8981 resume \u4e00\u4e2a model \u8981\u6ce8\u610f\u4fdd\u5b58\u8bad\u7ec3\u65f6\u7684 epoch \u6216\u8005 iter \u6570 # \u4f7f\u7528\u6d41\u7a0b optimizer . step () scheduler . step () # \u66f4\u65b0 lr # lr schedule lr_scheduler . LambdaLR ( optimizer , lr_lambda , last_epoch =- 1 ) # lr = lr*lr_lambda(epoch) lr_schedule . StepLR ( optimizer , step_size , gamma ) # lr = lr*gamma, step \u662f iter \u8fd8\u662f epoch \u53d6\u51b3\u4e8e step \u653e\u7684\u4f4d\u7f6e torchvision \u00b6 datasets \u00b6 \u81ea\u5e26\u6570\u636e\u96c6 \u00b6 torchvision.datasets \u4e2d\u5305\u542b\u4e86\u4ee5\u4e0b\u4e0e\u5176\u4ed6\u66f4\u591a\u6570\u636e\u96c6 All datasets are subclasses of torch.utils.data.Dataset i.e, they have __getitem__ and __len__ methods implemented. Hence, they can all be passed to a torch.utils.data.DataLoader which can load multiple samples parallelly using torch.multiprocessing workers. MNIST COCO\uff08\u7528\u4e8e\u56fe\u50cf\u6807\u6ce8\u548c\u76ee\u6807\u68c0\u6d4b\uff09(Captioning and Detection) LSUN Classification ImageFolder Imagenet-12 CIFAR10 and CIFAR100 STL10 eg: torchvision . datasets . FashionMNIS ( root , train = True , transform = None , target_transform = None , download = False ) \u6784\u9020 dataset \u00b6 torchvison \u4e2d\u7684 dataset \u662f\u5c0f\u5199\u7684\uff0cutils \u4e2d\u7684 Dataset \u662f\u5927\u5199\u7684 datasets.DatasetFolder torchvision . datasets . DatasetFolder ( root , loader , extensions = None , transform = None , target_transform = None , is_valid_file = None ) A generic data loader where the samples are arranged in this way: root/class_x/xxx.ext root/class_x/xxy.ext root/class_x/xxz.ext root/class_y/123.ext root/class_y/nsdf3.ext root/class_y/asd932_.ext datasets.ImageFolder torchvision . datasets . ImageFolder ( root , transform = None , target_transform = None , loader =< function default_loader > , is_valid_file = None ) \u7ee7\u627f\u81eaDatasetFolder\uff0cA generic data loader where the images are arranged in this way: root / dog / xxx . png root / dog / xxy . png root / dog / xxz . png root / cat / 123. png root / cat / nsdf3 . png root / cat / asd932_ . png Attr: class_to_idx\uff08 dictionary \uff09\uff1a torchvision.transforms \u00b6 PyTorch \u5b66\u4e60\u7b14\u8bb0:transforms\u7684\u4e8c\u5341\u4e8c\u4e2a\u65b9\u6cd5 \u521d\u8bc6-CV\u7684\u535a\u5ba2 \u5173\u4e8e\u5982\u4f55\u505a augmentation\uff1a \u6570\u636e\u589e\u5f3a\u4e0d\u4f1a\u589e\u52a0\u6837\u672c\u6570\u91cf\uff0c\u4f46\u662f\u5728\u6bcf\u4e2a epoch \u4e2d\u7684\u540c\u4e00\u4e2a\u6837\u672c\u56e0\u4e3a\u968f\u673a\u7684\u56e0\u7d20\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u53d8\u76f8\u7684\u589e\u52a0\u4e86\u6837\u672c \u4f7f\u7528\u4e0d\u540c\u7684 transforms \u505a\u51fa\u4e0d\u540c\u7684 dataset\uff0c\u7136\u540e\u4f7f\u7528 concatdataset \u4f7f\u7528\u65b9\u6cd5\uff1a # \u4f7f\u7528 Compose \u5b9a\u4e49\u4e00\u4e2a\u6d41\u6c34\u7ebf import torchvision.transforms as transforms train_transform = transforms . Compose ([ transforms . CenterCrop ( 10 ), transforms . ToTensor (), ]) # \u4f7f\u7528 transformer \u63d0\u4f9b\u7684 func from torchvision.transforms import functional as F img = F . resize ( img , size ) Crop \u00b6 \u968f\u673a\u88c1\u526a transforms . RandomCrop ( size , padding = None , pad_if_needed = False , fill = 0 , padding_mode = 'constant' \uff09 \u4e2d\u5fc3\u88c1\u526a transforms . CenterCrop ( size ) \u968f\u673a\u957f\u5bbd\u6bd4\u88c1\u526a transforms . RandomResizedCrop ( size , scale = ( 0.08 , 1.0 ), ratio = ( 0.75 , 1.3333333333333333 ), interpolation = 2 ) size\uff1aoutput size of each edge scale\uff1a\u662f\u539f\u56fe\u5927\u5c0f\u591a\u5c11\u7684\u533a\u57df\u7684\u968f\u673a\u8303\u56f4 ratio\uff1acrop \u533a\u57df\u7684\u5bbd\u9ad8\u6bd4\u7684\u968f\u673a\u8303\u56f4 \u4e0a\u4e0b\u5de6\u53f3\u4e2d\u5fc3\u88c1\u526a transforms . FiveCrop ( size ) \u4e0a\u4e0b\u5de6\u53f3\u4e2d\u5fc3\u88c1\u526a\u540e\u7ffb\u8f6c transforms . TenCrop ( size , vertical_flip = False ) Flip and Rotation \u00b6 \u4f9d\u6982\u7387 p \u6c34\u5e73\u7ffb\u8f6c transforms . RandomHorizontalFlip ( p = 0.5 ) # p \u9ed8\u8ba4\u4e3a 0.5 \u4f9d\u6982\u7387 p \u5782\u76f4\u7ffb\u8f6c transforms . RandomVerticalFlip ( p = 0.5 ) \u968f\u673a\u65cb\u8f6c transforms . RandomRotation ( degrees , resample = False , expand = False , center = None ) degree \uff1a sequence or float or int \uff0c\u5982\u679c\u4e0d\u662f\u4e00\u4e2a\u8303\u56f4\u800c\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u90a3\u8303\u56f4\u662f \\((-degree,degree)\\) change in value \u00b6 Resize transforms . Resize ( size , interpolation = 2 ) \u6807\u51c6\u5316 \u5728 ToTensor() \u540e\u53ef\u4ee5\u8fdb\u4e00\u6b65\u5f52\u4e00\u5316\u5230 [-1, 1]\uff0c\u8fd9\u4e48\u505a\u53ef\u4ee5\u52a0\u5feb\u6a21\u578b\u7684\u62df\u5408\u901f\u5ea6\uff0c\u5982\u679c\u5206\u5e03\u5728 [0, 1] \u4e4b\u95f4\uff0c\u53ef\u80fd\u5b9e\u9645\u7684 bias\uff08\u795e\u7ecf\u7f51\u7edc\u7684\u8f93\u5165b\uff09\u4f1a\u6bd4\u8f83\u5927\uff0c\u800c\u6a21\u578b\u521d\u59cb\u5316\u65f6 b=0 transforms . Normalize ( mean , std , inplace ) mean \uff1a\u5e38\u7528\u503c [0.485, 0.456, 0.406] std \uff1a\u5e38\u7528\u503c [0.229, 0.224, 0.225] pytorch torchvision.transforms.Normalize()\u4e2d\u7684mean\u548cstd\u53c2\u6570---\u89e3\u60d1 \u8f6c\u4e3a Tensor transforms . ToTensor () Converts a PIL Image or numpy.ndarray (H x W x C) in the range [0, 255] to a torch.FloatTensor of shape (C x H x W) in the range [0.0, 1.0] \u8f93\u5165\u6570\u636e\u7684\u7c7b\u578b\u4e3a PIL \u56fe\u7247\u6216\u8005 np.unit8\uff0c\u8f93\u51fa\u7c7b\u578b\u4e3a torch.float32 \u7684 Tensor \u6ce8\u610f\u4e8b\u9879\uff1a\u5f52\u4e00\u5316\u81f3 [0, 1] \u662f\u76f4\u63a5\u9664\u4ee5255\uff0c\u82e5\u81ea\u5df1\u7684 ndarray \u6570\u636e\u5c3a\u5ea6\u6709\u53d8\u5316\uff0c\u5219\u9700\u8981\u81ea\u884c\u4fee\u6539\uff1b\u7531\u4e8e\u50cf\u7d20\u503c\u4e3a0\u5230255\u7684\u6574\u6570\uff0c\u6240\u4ee5\u521a\u597d\u662fuint8\u6240\u80fd\u8868\u793a\u7684\u8303\u56f4\uff0c\u5305\u62ec transforms.ToTensor() \u5728\u5185\u7684\u4e00\u4e9b\u5173\u4e8e\u56fe\u7247\u7684\u51fd\u6570\u5c31\u9ed8\u8ba4\u8f93\u5165\u7684\u662fuint8\u578b\uff0c\u82e5\u4e0d\u662f\uff0c\u53ef\u80fd\u4e0d\u4f1a\u62a5\u9519\u4f46\u53ef\u80fd\u5f97\u4e0d\u5230\u60f3\u8981\u7684\u7ed3\u679c\u3002\u6240\u4ee5\uff0c \u5982\u679c\u7528\u50cf\u7d20\u503c(0-255\u6574\u6570)\u8868\u793a\u56fe\u7247\u6570\u636e\uff0c\u90a3\u4e48\u4e00\u5f8b\u5c06\u5176\u7c7b\u578b\u8bbe\u7f6e\u6210uint8\uff0c\u907f\u514d\u4e0d\u5fc5\u8981\u7684bug \u8f6c\u6362\u4e3a PILImage Converts a torch.Tensor of shape C x H x W or a numpy ndarray of shape H x W x C to a PIL Image while preserving the value range. \u6bcf\u4e2a\u5143\u7d20\u90fd\u4f1a\u4e58\u4ee5 255 transforms . ToPILImage ( mode = None ) mode\uff1acolor space and pixel depth of input data\uff0cdefault\uff1a None \uff0cNone \u65f6\u53d6\u51b3\u4e8e input data input \u6709 4 channels\uff0cmode \u4e3a RGBA input \u6709 3 channels\uff0cmode \u4e3a RGB input \u6709 2 channels\uff0cmode \u4e3a LA input \u6709 1 channel\uff0cmode \u53d6\u51b3\u4e8e datatype\uff08i.e int, float, short\uff09 \u6807\u51c6\u5316 torchvision . transforms . Normalize ( mean , std , inplace = False ) mean ( sequence ) \uff1amean for each channel std ( sequence ) \uff1astd for each channel \u586b\u5145 transforms . Pad ( padding , fill = 0 , padding_mode = 'constant' ) \u4fee\u6539\u4eae\u5ea6\u3001\u5bf9\u6bd4\u5ea6\u548c\u9971\u548c\u5ea6 transforms . ColorJitter ( brightness = 0 , contrast = 0 , saturation = 0 , hue = 0 ) \u8f6c\u7070\u5ea6\u56fe transforms . Grayscale ( num_output_channels = 1 ) \u7ebf\u6027\u53d8\u6362 transforms . LinearTransformation ( transformation_matrix ) \u4eff\u5c04\u53d8\u6362 transforms . RandomAffine ( degrees , translate = None , scale = None , shear = None , resample = False , fillcolor = 0 ) \u4f9d\u6982\u7387 p \u8f6c\u4e3a\u7070\u5ea6\u56fe transforms . RandomGrayscale ( p = 0.1 ) Lambda transforms . Lambda ( lambd ) \u5bf9 transforms \u64cd\u4f5c \u00b6 RandomChoice transforms . RandomChoice ( transforms ) RandomApply transforms . RandomApply ( transforms , p = 0.5 ) RandomOrder transforms . RandomOrder ( transforms ) \u5176\u4ed6 \u00b6 \u53ef\u590d\u73b0 reproducibility \u00b6 myseed = 42069 # set a random seed for reproducibility torch . backends . cudnn . deterministic = True torch . backends . cudnn . benchmark = False np . random . seed ( myseed ) torch . manual_seed ( myseed ) if torch . cuda . is_available (): torch . cuda . manual_seed ( myseed ) torch . cuda . manual_seed_all ( myseed ) torch.backends.cudnn.deterministic = True\uff1a\u6bcf\u6b21\u8fd4\u56de\u7684\u5377\u79ef\u7b97\u6cd5\u5c06\u662f\u786e\u5b9a\u7684\uff0c\u5373\u9ed8\u8ba4\u7b97\u6cd5 torch.backends.cudnn.benchmark = False\uff1a\u5982\u679c\u8bbe\u7f6e\u4e3aTrue\uff0c\u53ef\u80fd\u65e0\u6cd5\u4fdd\u8bc1\u7ed3\u679c\u53ef\u4ee5\u590d\u73b0\u3002True \u7684\u8bdd\u7a0b\u5e8f\u5728\u5f00\u59cb\u65f6\u4f1a\u4e3a\u6574\u4e2a\u7f51\u7edc\u7684\u6bcf\u4e2a\u5377\u79ef\u5c42\u641c\u7d22\u6700\u9002\u5408\u5b83\u7684\u5377\u79ef\u5b9e\u73b0\u7b97\u6cd5 torch.jit \u00b6 https://zhuanlan.zhihu.com/p/370455320 https://www.cnblogs.com/SuKiWX/p/8804974.html https://blog.csdn.net/MumuziD/article/details/113280207","title":"Pytorch"},{"location":"Pytorch/#pytorch","text":"\u53c2\u8003\uff1ahttps://space.bilibili.com/18161609 \u5de5\u5177\uff1aTensorBoard","title":"Pytorch"},{"location":"Pytorch/#tensor","text":"","title":"Tensor \u64cd\u4f5c\u548c\u5904\u7406"},{"location":"Pytorch/#_1","text":"torch . tensor ( data ) torch . FloatTensor ( data ) torch . LongTensor ( data ) torch . rand ( * sizes , dtype = None ) # \u5747\u5300\u5206\u5e03 [0, 1) torch . randn ( * sizes , dtype = None ) # \u6b63\u6001\u5206\u5e03 torch . empty ( * size , dtype = None ) # Returns a tensor filled with uninitialized data torch . zeors ( * size , dtype = None ) torch . ones ( * size ) torch . eye ( * size ) torch . arange ( s , e , step ) torch . linspace ( s , e , steps ) # [s, e], \u5747\u5206\u51fa steps \u4e2a\u6570 torch . as_tensor ()","title":"\u521b\u5efa\u4e0e\u521d\u59cb\u5316"},{"location":"Pytorch/#_2","text":"transpose \u9488\u5bf9 2 \u4e2a\u7ef4\u5ea6\u7684\u53d8\u6362 permute \u76f8\u5f53\u4e8e\u591a\u6b21 permute\uff0c\u5185\u5b58\u4e2d\u5b58\u50a8\u7684\u65b9\u5f0f\u4e0d\u53d8 view \u5fc5\u987b\u64cd\u4f5c\u5728\u4e00\u4e2a contiguous \u7684\u77e9\u9635\u4e0a\uff0c\u56e0\u4e3a\u5b83\u662f\u5148\u628a Tensor \u5c55\u6210\u4e00\u7ef4\u540e\u518d\u5904\u7406 tensor . dim () # Returns the number of dimensions tensor . ndim # alias dim() torch . sequeeze () torch . unsequeeze () torch . view () torch . transpose ( input , dim1 , dim2 ) tensor . transpose ( dim1 , dim2 ) torch . permute ( input , dims ) # dims: tuple of ints tensor . permute ( * dims ) torch . flatten ( input , dim ) torch . chunk ( input , chunks , dim = 0 ) tensor . expand ( * size ) # \u7c7b\u4f3c\u5e7f\u64ad\u673a\u5236\uff1f","title":"\u7ef4\u5ea6\u53d8\u6362"},{"location":"Pytorch/#_3","text":"tensor . expand ( * size ) # \u7c7b\u4f3c\u5e7f\u64ad\u673a\u5236\uff1f torch . stack ( inputs , dim = 0 ) # inputs \u4e2d\u7684 Tensor \u7ef4\u5ea6\u76f8\u540c\uff0c\u5728\u4e00\u4e2a\u65b0\u7684 dim \u4e0a\u8fde\u63a5 torch . cat ( inputs , dim = 0 ) # inputs \u4e2d\u7684 Tensor \u5728\u6307\u5b9a\u7ef4\u5ea6\u5916\u7ef4\u5ea6\u8981\u76f8\u540c\uff0c\u5728\u5df2\u6709\u7684\u7ef4\u5ea6\u4e0a\u8fde\u63a5 F . pad ( input , pad ) # pad \u4e3a tuple\uff0c\u4e14\u8868\u793a\u7684\u7ef4\u5ea6\u4ece\u540e\u5f80\u524d tensor . masked_fill ( mask , value ) # mask: BoolTensor, shape \u5fc5\u987b\u53ef\u4ee5\u8fdb\u884c\u5e7f\u64ad","title":"\u589e\u5220\u6539\u67e5"},{"location":"Pytorch/#_4","text":"tensor . numpy ()","title":"\u7c7b\u578b\u8f6c\u6362"},{"location":"Pytorch/#_5","text":"torch . bincount () # \u7edf\u8ba1\u9891\u6570 torch . diag () # \u83b7\u53d6\u5bf9\u89d2\u7ebf\u7684\u5143\u7d20","title":"\u8ba1\u7b97\u4e0e\u7edf\u8ba1"},{"location":"Pytorch/#_6","text":"# eg # \u539f\u6765 x = [[1, 2], [3, 4]] \u5728\u5185\u5b58\u4e2d\u4e3a 1, 2, 3, 4 # transpose \u540e x = [[1, 3], [2, 4]] \u5728\u5185\u5b58\u4e2d\u8fd8\u662f 1, 2, 3, 4 # contiguous \u540e x = [[1, 3], [2, 4]] \u5728\u5185\u5b58\u662f 1, 3, 2, 4 tensor . contiguous () tensor . unbind ( dim ) torch . roll ( input , shifts , dims = None ) # \u5728\u6307\u5b9a\u7ef4\u5ea6\u4e0a\u6eda\u52a8 shifts \u6b21 (\u6bd4\u5982\u5728 Swin Transformer \u7684 SW-MSA \u4f1a\u7528\u5230) tensor . new_full () # \u521b\u5efa\u4e00\u4e2a\u65b0Tensor tensor . expand_as () # \u6269\u5c55\u5230\u548c\u53e6\u4e00\u4e2aTensor\u76f8\u540c\u7684\u7ef4\u5ea6 tensor . split () # \u5bf9\u6307\u5b9a\u7ef4\u5ea6\u8fdb\u884c\u5206\u5272 tensor . topk () tensor . clamp ( min , max ) # \u88c1\u526a torch . ge () torch . logical_and () torch . nonzero () torch . where () # \u8981\u6ce8\u610f\u548c torch.nonzero() \u8fd4\u56de\u503c\u7684\u533a\u522b torch . numel () torch . randperm () torch . zeros_like ()","title":"\u5176\u4ed6"},{"location":"Pytorch/#torchnn","text":"","title":"torch.nn"},{"location":"Pytorch/#module","text":"","title":"Module \u7684\u64cd\u4f5c\u548c\u5904\u7406"},{"location":"Pytorch/#module_1","text":"import torch.nn as nn class mynn ( nn . Module ): def __init__ ( self ): super ( mynn , self ) . __init__ () # \u8c03\u7528\u7236\u7c7b\u6784\u9020\u51fd\u6570 self . model = nn . Sequential ([ # Sequential \u7684\u5b9a\u4e49\u65b9\u5f0f\u53c2\u8003 nn.Sequential nn . Conv2d ( 1 , 20 , 5 ) nn . ReLU () ]) def forward ( self , x ): x = self . model ( x ) return x nn . Sequential () # \u53c2\u6570\u4e3a *list \u6216\u8005 OrderedDict nn . ModuleList ( list )","title":"\u521b\u5efa\u81ea\u5b9a\u4e49Module"},{"location":"Pytorch/#_7","text":"children() \u8fd4\u56de\u76f4\u63a5\u5b50\u6a21\u5757\uff0cmodules() \u4f1a\u9012\u5f52\u7684\u904d\u5386\u6240\u6709\u5b50\u6a21\u5757 Module.children() && Module.named_children() model.modules() && model.named_modules()","title":"\u83b7\u53d6\u4e2d\u95f4\u6a21\u5757"},{"location":"Pytorch/#module_2","text":"Module . apply ( fn ) # Applies fn recursively to every submodule (as returned by .children()) # https://blog.csdn.net/weixin_38145317/article/details/104917218 Module . register_buffer ( name , tensor , persistent = True ) # \u5411\u6a21\u5757\u6dfb\u52a0\u6301\u4e45\u7f13\u51b2\u533a, \u4ee5\u5b57\u5178\u5f62\u5f0f\uff0c\u4e0d\u4f1a\u56e0\u4e3a step \u800c\u66f4\u65b0","title":"Module \u65b9\u6cd5"},{"location":"Pytorch/#_8","text":"\u6fc0\u6d3b\u51fd\u6570 \u8bf4\u660e nn.Sigmoid() nn.ReLU() nn.ReLU6() nn.GELU()","title":"\u6fc0\u6d3b\u51fd\u6570"},{"location":"Pytorch/#pooling-layers","text":"\u6c60\u5316\u5c42 \u8bf4\u660e nn.AdaptiveAvgPool2d((H, W)) \u81ea\u9002\u5e94\u5e73\u5747\u6c60\u5316\u5c42\uff0c\u53c2\u6570\u6307\u5b9a\u8f93\u51fa\u7684 \\(H\\times W\\)","title":"\u6c60\u5316\u5c42 Pooling layers"},{"location":"Pytorch/#dropout-layers","text":"# \u5728 forward \u4e2d\u4f7f\u7528 F.dropout() x = F . dropout ( x , 0.5 , training = self . training ) # model.train()\u65f6,self.training=True\uff0cmodel.eval()\u65f6\u4e3aFalse # \u4f7f\u7528 F.dropout() \u7684\u5c01\u88c5 nn.Dropout() self . dropout = nn . Dropout ( 0.5 ) # \u5728\u521d\u59cb\u5316\u4e2d x = self . dropout ( x ) # \u5728 forward \u4e2d","title":"\u4e22\u5f03\u5c42 Dropout layers"},{"location":"Pytorch/#normalization-layers","text":"\u4e3a\u4ec0\u4e48\u662f Normalization \u800c\u4e0d\u662f Standardization\uff1f $$ \\hat{x}=a\\frac{x-\\mu}{\\sigma} + b $$ nn.BatchNorm1d() / 2d() / 3d() \u4f7f\u7528BN \u65f6\u9700\u8981\u6ce8\u610f\u7684\u95ee\u9898\uff1a batch size \u4e0d\u5b9c\u8fc7\u5c0f\uff0c\u4e0d\u7136\u6c42\u51fa\u7684\u5747\u503c\u548c\u65b9\u5dee\u8bef\u5dee\u4f1a\u5f88\u5927 bn \u5c42\u5efa\u8bae\u653e\u5728 Conv \u548c \u6fc0\u6d3b\u5c42 \u4e4b\u95f4\uff0c\u5e76\u4e14 Conv \u4e0d\u9700\u8981\u4f7f\u7528 bias","title":"\u6807\u51c6\u5316\u5c42 Normalization layers"},{"location":"Pytorch/#parameter","text":"\u8ba9 Tensor \u4f5c\u4e3a\u53ef\u8bad\u7ec3\u7684\u53c2\u6570\uff0c\u5982 Transformer \u4e2d\u7684 position \u4fe1\u606f \u662f Tensor \u7684\u5b50\u7c7b torch . nn . parameter . Parameter ( data = None , requires_grad = True )","title":"Parameter"},{"location":"Pytorch/#optimizer","text":"","title":"\u4f18\u5316\u5668 optimizer"},{"location":"Pytorch/#optimizer_1","text":"\u770b\u5230\u7684\u65b0\u7684\u4f18\u5316\u5668\uff1aSWA Why Momentum Really Works (distill.pub) optim.SGD() optimizer = torch . optim . SGD ( net . parameters (), lr = step_size , momentum = momentum , weight_decay = 0 ) print ( optimizer ) weight_decay\uff1a\u6743\u91cd\u8870\u51cf\uff08L2 penalty\uff09\u7684\u7cfb\u6570 optim.Adagrad() \u53ef\u53d8\u5b66\u4e60\u7387\u7684\u4f18\u5316\u7b97\u6cd5\uff1b\u4f46\u662f\u968f\u7740\u8fed\u4ee3\u6b21\u6570\u7684\u53d8\u5927\u5b66\u4e60\u6548\u7387\u4f1a\u53d8\u4f4e\uff0c\u5f53\u4e00\u76f4\u51fa\u73b0\u5927\u7684 grad \u65f6\u4f1a\u5bfc\u81f4 lr \u8fc5\u901f\u4e0b\u964d\uff0c\u5b66\u4e60\u6548\u7387\u4e5f\u4f1a\u53d8\u4f4e\uff1b \\[ w^{t+1}=w^t-\\frac{\\eta}{\\sqrt{\\sum\\limits_{i=0}^t(g^i)^2}}\\cdot g^t \\] optim.RMSprop() Root Mean Square prop \u5728 Adagrad \u7684\u57fa\u7840\u4e0a\u5bf9\u5b66\u4e60\u7387\u7684\u5206\u6bcd\u90e8\u5206\u7528\u7684\u52a0\u6743\u548c\uff0c\u8d8a\u65e9\u7684 grad \u7684\u6743\u91cd\u8d8a\u4f4e $$ w^{t+1}=w^t-\\frac{\\eta}{\\sigma^t}\\cdot g^t \\ \\sigma^t=\\sqrt{\\alpha(\\sigma^{t-1})^2+(1-\\alpha)(g^t)^2)} $$ optim.Adadelta() optim.Adam() RMSProp + Momentum $$ v_t=\\beta_1v_{t-1}+(1-\\beta_1)g_t \\ s_t=\\beta_2s_{t-1}+(1-\\beta_2)g_t^2 $$ \u5728\u65f6\u95f4\u6b65 \\(t\\) \u53ef\u4ee5\u5f97\u5230 \\(v_t=(1-\\beta_1)\\sum_{i=1}^{t}\\beta_1^{t-i}g_i\\) \uff0c\u628a\u8fc7\u53bb\u6240\u6709\u68af\u5ea6\u7684\u6743\u91cd\u76f8\u52a0\u5f97 \\((1-\\beta_1)\\sum_{i=1}^{t}\\beta_1^{t-i}g_i=1-\\beta^t\\) \uff0c\u5f53 \\(t\\) \u8f83\u5c0f\u65f6\u8fc7\u53bb\u5c0f\u6279\u91cf\u68af\u5ea6\u6743\u91cd\u4e4b\u548c\u592a\u5c0f\u4e86\uff0c\u4e3a\u4e86\u6d88\u9664\u5f71\u54cd\u505a\u504f\u5dee\u4fee\u6b63 $$ \\hat{v}_t=\\frac{v_t}{1-\\beta_1^t} \\ \\hat{s}_t=\\frac{s_t}{1-\\beta_2^t} $$ \u7136\u540e\u518d\u8c03\u6574\u53c2\u6570\uff1a $$ g_t^{'} = \\frac{\\eta \\hat{v}_t}{\\sqrt{\\hat{s}_t}+\\epsilon} $$ optimizer = torch . optim . Adam ( params , lr = 0.001 , betas = ( 0.9 , 0.999 ), weight_decay = 0 ) print ( optimizer ) lr (float) \uff1alearning rate\uff0cdefault\uff1a 0.001 weight_decay (float) \uff1a\u6b63\u5219\u9879\u524d\u9762\u7684\u7cfb\u6570 betas (Tuple[float, float]) \uff1a\u89c1\u4e0a\u8ff0\u63a8\u5bfc torch.optim.Adadelta()","title":"optimizer"},{"location":"Pytorch/#learning-rate-schedule","text":"\u4e3a\u5b50\u7f51\u8bbe\u7f6e\u4e0d\u540c\u7684 lr \u53ef\u4ee5\u4e3a\u4e0d\u540c\u5b50\u7f51\u7edc\u8bbe\u7f6e\u4e0d\u540c\u7684\u5b66\u4e60\u7387\uff0c\u8fd9\u5728finetune\u65f6\u7ecf\u5e38\u7528\u5230 optimizer = optim . SGD ([ # \u5982\u679c\u5bf9\u67d0\u4e2a\u53c2\u6570\u4e0d\u6307\u5b9a\u5b66\u4e60\u7387\uff0c\u5c31\u4f7f\u7528\u6700\u5916\u5c42\u7684\u9ed8\u8ba4\u5b66\u4e60\u7387 { 'params' : net . subnet1 . parameters ()}, # lr=0.03 { 'params' : net . subnet2 . parameters (), 'lr' : 0.01 } ], lr = 0.03 ) \u8c03\u6574 lr \u4e0d\u5e0c\u671b lr \u662f\u4e00\u4e2a\u56fa\u5b9a\u7684\u5e38\u6570\uff0c\u5982 Learning Rate Deacy \u5e0c\u671b lr \u968f\u65f6\u95f4\u53d8\u5c0f \u65b9\u6cd51\uff1a\u4fee\u6539 optimizer.param_groups \u4e2d\u5bf9\u5e94\u7684\u5b66\u4e60\u7387 # \u8c03\u6574\u5b66\u4e60\u7387 for param_group in optimizer . param_groups : param_group [ 'lr' ] *= 0.1 # \u5b66\u4e60\u7387\u4e3a\u4e4b\u524d\u76840.1\u500d \u65b9\u6cd52\uff1a\u65b0\u5efa\u4f18\u5316\u5668 optimizer \u6784\u5efa\u7684\u5f00\u9500\u5f88\u5c0f\uff0c\u4f46\u662f\u5bf9\u4e8e\u4f7f\u7528\u52a8\u91cf\u7684\u4f18\u5316\u5668\uff08\u5982Adam\uff09\u4f1a\u4e22\u5931\u52a8\u91cf\u4fe1\u606f\uff0c\u53ef\u80fd\u4f1a\u9020\u6210\u635f\u5931\u51fd\u6570\u7684\u6536\u655b\u51fa\u73b0\u9707\u8361\u7b49\u60c5\u51b5 optim.lr_scheduler \u5982\u679c\u8981 resume \u4e00\u4e2a model \u8981\u6ce8\u610f\u4fdd\u5b58\u8bad\u7ec3\u65f6\u7684 epoch \u6216\u8005 iter \u6570 # \u4f7f\u7528\u6d41\u7a0b optimizer . step () scheduler . step () # \u66f4\u65b0 lr # lr schedule lr_scheduler . LambdaLR ( optimizer , lr_lambda , last_epoch =- 1 ) # lr = lr*lr_lambda(epoch) lr_schedule . StepLR ( optimizer , step_size , gamma ) # lr = lr*gamma, step \u662f iter \u8fd8\u662f epoch \u53d6\u51b3\u4e8e step \u653e\u7684\u4f4d\u7f6e","title":"Learning rate schedule"},{"location":"Pytorch/#torchvision","text":"","title":"torchvision"},{"location":"Pytorch/#datasets","text":"","title":"datasets"},{"location":"Pytorch/#_9","text":"torchvision.datasets \u4e2d\u5305\u542b\u4e86\u4ee5\u4e0b\u4e0e\u5176\u4ed6\u66f4\u591a\u6570\u636e\u96c6 All datasets are subclasses of torch.utils.data.Dataset i.e, they have __getitem__ and __len__ methods implemented. Hence, they can all be passed to a torch.utils.data.DataLoader which can load multiple samples parallelly using torch.multiprocessing workers. MNIST COCO\uff08\u7528\u4e8e\u56fe\u50cf\u6807\u6ce8\u548c\u76ee\u6807\u68c0\u6d4b\uff09(Captioning and Detection) LSUN Classification ImageFolder Imagenet-12 CIFAR10 and CIFAR100 STL10 eg: torchvision . datasets . FashionMNIS ( root , train = True , transform = None , target_transform = None , download = False )","title":"\u81ea\u5e26\u6570\u636e\u96c6"},{"location":"Pytorch/#dataset","text":"torchvison \u4e2d\u7684 dataset \u662f\u5c0f\u5199\u7684\uff0cutils \u4e2d\u7684 Dataset \u662f\u5927\u5199\u7684 datasets.DatasetFolder torchvision . datasets . DatasetFolder ( root , loader , extensions = None , transform = None , target_transform = None , is_valid_file = None ) A generic data loader where the samples are arranged in this way: root/class_x/xxx.ext root/class_x/xxy.ext root/class_x/xxz.ext root/class_y/123.ext root/class_y/nsdf3.ext root/class_y/asd932_.ext datasets.ImageFolder torchvision . datasets . ImageFolder ( root , transform = None , target_transform = None , loader =< function default_loader > , is_valid_file = None ) \u7ee7\u627f\u81eaDatasetFolder\uff0cA generic data loader where the images are arranged in this way: root / dog / xxx . png root / dog / xxy . png root / dog / xxz . png root / cat / 123. png root / cat / nsdf3 . png root / cat / asd932_ . png Attr: class_to_idx\uff08 dictionary \uff09\uff1a","title":"\u6784\u9020 dataset"},{"location":"Pytorch/#torchvisiontransforms","text":"PyTorch \u5b66\u4e60\u7b14\u8bb0:transforms\u7684\u4e8c\u5341\u4e8c\u4e2a\u65b9\u6cd5 \u521d\u8bc6-CV\u7684\u535a\u5ba2 \u5173\u4e8e\u5982\u4f55\u505a augmentation\uff1a \u6570\u636e\u589e\u5f3a\u4e0d\u4f1a\u589e\u52a0\u6837\u672c\u6570\u91cf\uff0c\u4f46\u662f\u5728\u6bcf\u4e2a epoch \u4e2d\u7684\u540c\u4e00\u4e2a\u6837\u672c\u56e0\u4e3a\u968f\u673a\u7684\u56e0\u7d20\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u53d8\u76f8\u7684\u589e\u52a0\u4e86\u6837\u672c \u4f7f\u7528\u4e0d\u540c\u7684 transforms \u505a\u51fa\u4e0d\u540c\u7684 dataset\uff0c\u7136\u540e\u4f7f\u7528 concatdataset \u4f7f\u7528\u65b9\u6cd5\uff1a # \u4f7f\u7528 Compose \u5b9a\u4e49\u4e00\u4e2a\u6d41\u6c34\u7ebf import torchvision.transforms as transforms train_transform = transforms . Compose ([ transforms . CenterCrop ( 10 ), transforms . ToTensor (), ]) # \u4f7f\u7528 transformer \u63d0\u4f9b\u7684 func from torchvision.transforms import functional as F img = F . resize ( img , size )","title":"torchvision.transforms"},{"location":"Pytorch/#crop","text":"\u968f\u673a\u88c1\u526a transforms . RandomCrop ( size , padding = None , pad_if_needed = False , fill = 0 , padding_mode = 'constant' \uff09 \u4e2d\u5fc3\u88c1\u526a transforms . CenterCrop ( size ) \u968f\u673a\u957f\u5bbd\u6bd4\u88c1\u526a transforms . RandomResizedCrop ( size , scale = ( 0.08 , 1.0 ), ratio = ( 0.75 , 1.3333333333333333 ), interpolation = 2 ) size\uff1aoutput size of each edge scale\uff1a\u662f\u539f\u56fe\u5927\u5c0f\u591a\u5c11\u7684\u533a\u57df\u7684\u968f\u673a\u8303\u56f4 ratio\uff1acrop \u533a\u57df\u7684\u5bbd\u9ad8\u6bd4\u7684\u968f\u673a\u8303\u56f4 \u4e0a\u4e0b\u5de6\u53f3\u4e2d\u5fc3\u88c1\u526a transforms . FiveCrop ( size ) \u4e0a\u4e0b\u5de6\u53f3\u4e2d\u5fc3\u88c1\u526a\u540e\u7ffb\u8f6c transforms . TenCrop ( size , vertical_flip = False )","title":"Crop"},{"location":"Pytorch/#flip-and-rotation","text":"\u4f9d\u6982\u7387 p \u6c34\u5e73\u7ffb\u8f6c transforms . RandomHorizontalFlip ( p = 0.5 ) # p \u9ed8\u8ba4\u4e3a 0.5 \u4f9d\u6982\u7387 p \u5782\u76f4\u7ffb\u8f6c transforms . RandomVerticalFlip ( p = 0.5 ) \u968f\u673a\u65cb\u8f6c transforms . RandomRotation ( degrees , resample = False , expand = False , center = None ) degree \uff1a sequence or float or int \uff0c\u5982\u679c\u4e0d\u662f\u4e00\u4e2a\u8303\u56f4\u800c\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u90a3\u8303\u56f4\u662f \\((-degree,degree)\\)","title":"Flip and Rotation"},{"location":"Pytorch/#change-in-value","text":"Resize transforms . Resize ( size , interpolation = 2 ) \u6807\u51c6\u5316 \u5728 ToTensor() \u540e\u53ef\u4ee5\u8fdb\u4e00\u6b65\u5f52\u4e00\u5316\u5230 [-1, 1]\uff0c\u8fd9\u4e48\u505a\u53ef\u4ee5\u52a0\u5feb\u6a21\u578b\u7684\u62df\u5408\u901f\u5ea6\uff0c\u5982\u679c\u5206\u5e03\u5728 [0, 1] \u4e4b\u95f4\uff0c\u53ef\u80fd\u5b9e\u9645\u7684 bias\uff08\u795e\u7ecf\u7f51\u7edc\u7684\u8f93\u5165b\uff09\u4f1a\u6bd4\u8f83\u5927\uff0c\u800c\u6a21\u578b\u521d\u59cb\u5316\u65f6 b=0 transforms . Normalize ( mean , std , inplace ) mean \uff1a\u5e38\u7528\u503c [0.485, 0.456, 0.406] std \uff1a\u5e38\u7528\u503c [0.229, 0.224, 0.225] pytorch torchvision.transforms.Normalize()\u4e2d\u7684mean\u548cstd\u53c2\u6570---\u89e3\u60d1 \u8f6c\u4e3a Tensor transforms . ToTensor () Converts a PIL Image or numpy.ndarray (H x W x C) in the range [0, 255] to a torch.FloatTensor of shape (C x H x W) in the range [0.0, 1.0] \u8f93\u5165\u6570\u636e\u7684\u7c7b\u578b\u4e3a PIL \u56fe\u7247\u6216\u8005 np.unit8\uff0c\u8f93\u51fa\u7c7b\u578b\u4e3a torch.float32 \u7684 Tensor \u6ce8\u610f\u4e8b\u9879\uff1a\u5f52\u4e00\u5316\u81f3 [0, 1] \u662f\u76f4\u63a5\u9664\u4ee5255\uff0c\u82e5\u81ea\u5df1\u7684 ndarray \u6570\u636e\u5c3a\u5ea6\u6709\u53d8\u5316\uff0c\u5219\u9700\u8981\u81ea\u884c\u4fee\u6539\uff1b\u7531\u4e8e\u50cf\u7d20\u503c\u4e3a0\u5230255\u7684\u6574\u6570\uff0c\u6240\u4ee5\u521a\u597d\u662fuint8\u6240\u80fd\u8868\u793a\u7684\u8303\u56f4\uff0c\u5305\u62ec transforms.ToTensor() \u5728\u5185\u7684\u4e00\u4e9b\u5173\u4e8e\u56fe\u7247\u7684\u51fd\u6570\u5c31\u9ed8\u8ba4\u8f93\u5165\u7684\u662fuint8\u578b\uff0c\u82e5\u4e0d\u662f\uff0c\u53ef\u80fd\u4e0d\u4f1a\u62a5\u9519\u4f46\u53ef\u80fd\u5f97\u4e0d\u5230\u60f3\u8981\u7684\u7ed3\u679c\u3002\u6240\u4ee5\uff0c \u5982\u679c\u7528\u50cf\u7d20\u503c(0-255\u6574\u6570)\u8868\u793a\u56fe\u7247\u6570\u636e\uff0c\u90a3\u4e48\u4e00\u5f8b\u5c06\u5176\u7c7b\u578b\u8bbe\u7f6e\u6210uint8\uff0c\u907f\u514d\u4e0d\u5fc5\u8981\u7684bug \u8f6c\u6362\u4e3a PILImage Converts a torch.Tensor of shape C x H x W or a numpy ndarray of shape H x W x C to a PIL Image while preserving the value range. \u6bcf\u4e2a\u5143\u7d20\u90fd\u4f1a\u4e58\u4ee5 255 transforms . ToPILImage ( mode = None ) mode\uff1acolor space and pixel depth of input data\uff0cdefault\uff1a None \uff0cNone \u65f6\u53d6\u51b3\u4e8e input data input \u6709 4 channels\uff0cmode \u4e3a RGBA input \u6709 3 channels\uff0cmode \u4e3a RGB input \u6709 2 channels\uff0cmode \u4e3a LA input \u6709 1 channel\uff0cmode \u53d6\u51b3\u4e8e datatype\uff08i.e int, float, short\uff09 \u6807\u51c6\u5316 torchvision . transforms . Normalize ( mean , std , inplace = False ) mean ( sequence ) \uff1amean for each channel std ( sequence ) \uff1astd for each channel \u586b\u5145 transforms . Pad ( padding , fill = 0 , padding_mode = 'constant' ) \u4fee\u6539\u4eae\u5ea6\u3001\u5bf9\u6bd4\u5ea6\u548c\u9971\u548c\u5ea6 transforms . ColorJitter ( brightness = 0 , contrast = 0 , saturation = 0 , hue = 0 ) \u8f6c\u7070\u5ea6\u56fe transforms . Grayscale ( num_output_channels = 1 ) \u7ebf\u6027\u53d8\u6362 transforms . LinearTransformation ( transformation_matrix ) \u4eff\u5c04\u53d8\u6362 transforms . RandomAffine ( degrees , translate = None , scale = None , shear = None , resample = False , fillcolor = 0 ) \u4f9d\u6982\u7387 p \u8f6c\u4e3a\u7070\u5ea6\u56fe transforms . RandomGrayscale ( p = 0.1 ) Lambda transforms . Lambda ( lambd )","title":"change in value"},{"location":"Pytorch/#transforms","text":"RandomChoice transforms . RandomChoice ( transforms ) RandomApply transforms . RandomApply ( transforms , p = 0.5 ) RandomOrder transforms . RandomOrder ( transforms )","title":"\u5bf9 transforms \u64cd\u4f5c"},{"location":"Pytorch/#_10","text":"","title":"\u5176\u4ed6"},{"location":"Pytorch/#reproducibility","text":"myseed = 42069 # set a random seed for reproducibility torch . backends . cudnn . deterministic = True torch . backends . cudnn . benchmark = False np . random . seed ( myseed ) torch . manual_seed ( myseed ) if torch . cuda . is_available (): torch . cuda . manual_seed ( myseed ) torch . cuda . manual_seed_all ( myseed ) torch.backends.cudnn.deterministic = True\uff1a\u6bcf\u6b21\u8fd4\u56de\u7684\u5377\u79ef\u7b97\u6cd5\u5c06\u662f\u786e\u5b9a\u7684\uff0c\u5373\u9ed8\u8ba4\u7b97\u6cd5 torch.backends.cudnn.benchmark = False\uff1a\u5982\u679c\u8bbe\u7f6e\u4e3aTrue\uff0c\u53ef\u80fd\u65e0\u6cd5\u4fdd\u8bc1\u7ed3\u679c\u53ef\u4ee5\u590d\u73b0\u3002True \u7684\u8bdd\u7a0b\u5e8f\u5728\u5f00\u59cb\u65f6\u4f1a\u4e3a\u6574\u4e2a\u7f51\u7edc\u7684\u6bcf\u4e2a\u5377\u79ef\u5c42\u641c\u7d22\u6700\u9002\u5408\u5b83\u7684\u5377\u79ef\u5b9e\u73b0\u7b97\u6cd5","title":"\u53ef\u590d\u73b0 reproducibility"},{"location":"Pytorch/#torchjit","text":"https://zhuanlan.zhihu.com/p/370455320 https://www.cnblogs.com/SuKiWX/p/8804974.html https://blog.csdn.net/MumuziD/article/details/113280207","title":"torch.jit"},{"location":"R/","text":"R \u00b6 \u57fa\u672c\u64cd\u4f5c \u00b6 ? funcname # \u6253\u5f00\u51fd\u6570\u5e2e\u52a9\u6587\u4ef6 ls () # \u67e5\u770b\u6240\u6709\u5bf9\u8c61 rm ( x , y ) # \u5220\u9664\u5bf9\u8c61 rm ( list = ls ()) # \u5220\u9664\u6240\u6709\u5bf9\u8c61 set.seed ( n ) # \u6307\u5b9a\u968f\u673a\u6570\u79cd\u5b50 q () # \u9000\u51fa Matrix \u00b6 \u5411\u91cf \u00b6 x = c ( 1 , 2 , 3 , 4 ) # connect \u5efa\u7acb\u6570\u503c\u5411\u91cf seq ( a , b , length = n ) # [a,b]\u4e4b\u95f4\u7b49\u8ddd\u7684n\u4e2a\u5143\u7d20\u7684\u5411\u91cf\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5 a:b rnorm ( n ) # \u4ea7\u751f\u957f\u5ea6\u4e3an\u7684\u968f\u673a\u6b63\u6001\u5206\u5e03\u5411\u91cf\uff0c\u5982\u679c\u6307\u5b9a\u4e86\u968f\u673a\u6570\u79cd\u5b50\u90a3\u6bcf\u6b21\u7684\u6570\u4f1a\u4e00\u6837 length ( x ) # \u8fd4\u56de\u5411\u91cf\u957f\u5ea6 mean ( x ) # \u5411\u91cf\u5747\u503c sd ( x ) # \u6807\u51c6\u5dee var ( x ) # \u5411\u91cf\u65b9\u5dee cor ( x , y ) # \u8ba1\u7b972\u5411\u91cf\u7684\u76f8\u5173\u7cfb\u6570 Matrix \u00b6 matrix ( data = NA , nrow = 1 , ncol = 1 , byrow = FALSE ) # eg: x = (data=c(1,2,3,4),2,2) \u53ea\u5199\u524d\u4e09\u4e2a\u53c2\u6570\u540d\u53ef\u4ee5\u7701\u7565 # \u9ed8\u8ba4\u6309\u5217\u586b\u5199matrix, byrow=TRUE\u4f1a\u6309\u884c\u586b\u5199 dim ( A ) # \u8f93\u51fa\u7ef4\u6570 sqrt ( x ) # \u6bcf\u4e2a\u5143\u7d20\u5f00\u6839 x ^ 2 # \u6bcf\u4e2a\u5143\u7d20\u5f00\u65b9 \u7d22\u5f15\u6570\u636e \u00b6 A [ 1 , 2 ] # \u6307\u5b9a\u5355\u5143\u683c A [ c ( x1 , x2 ), c ( y1 , y2 )] # \u6307\u5b9a\u67d0\u4e9b\u5217\u548c\u67d0\u4e9b\u884c A [ x1 : x2 , y1 : y2 ] # \u6307\u5b9a\u884c\u4e0e\u5217\u7684\u8303\u56f4 A [ x1 : x2 ,] # \u6307\u5b9a\u884c\uff0c\u4e0d\u6307\u5b9a\u5217 A [ - c ( x1 , x2 )] # \u6307\u5b9a\u4e0d\u5305\u542b\u7684\u6570\u636e \u6570\u636e\u5904\u7406 \u00b6 a = as.factor ( a ) # \u5982\u679ca\u7684\u6570\u636e\u662f\u79bb\u6563\u7684\u8f6c\u6362\u6210\u4e00\u4e2a\u5b9a\u6027\u7684\u53d8\u91cf # eg: # > a=[1,2,2,3,1,2,3,2,1,3] # > a=as.factor(a) # > print(a) # [1] 1 2 3 1 2 1 3 2 1 # Levels: 1 2 3 summary ( a ) # \u5bf9\u6307\u5b9a\u6570\u636e\u96c6\u4e2d\u7684\u6bcf\u4e2a\u53d8\u91cf\u8ba1\u7b97\u7edf\u8ba1\u4fe1\u606f(\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c...) summary ( name ) # \u4e5f\u53ef\u4ee5\u6307\u5b9a\u67d0\u4e2a\u5177\u4f53\u7684\u5c5e\u6027\u540d \u56fe\u50cf \u00b6 \u5efa\u7acb\u56fe\u50cf \u00b6 # \u5982\u679cx\u662f\u5b9a\u6027(\u79bb\u6563)\u53d8\u91cf\u4f1a\u81ea\u52a8\u753b\u7bb1\u7ebf\u56fe plot ( x , y , xlim = ( x1 , x2 ), xlab = \"\" , main = \"\" ) # main: title hist ( x ) # \u76f4\u65b9\u56fe,\u7eb5\u5750\u6807\u662f\u843d\u5728\u533a\u95f4\u5185\u5143\u7d20\u7684\u4e2a\u6570 # \u901a\u8fc7 IO \u6570\u636e\u4f5c\u56fe plot ( a $ name1 , a $ name2 ) # \u6570\u636e\u96c6\u548c\u53d8\u91cf\u540d\u95f4\u52a0$ attach ( a ) # \u4e5f\u53ef\u4ee5\u6307\u5b9a\u6570\u636e\u96c6 plot ( name1 , name2 ) \u7b49\u9ad8\u7ebf\u56fe \u00b6 outer ( x , y , FUN = \"*\" ) # \u5efa\u7acb\u4e00\u4e2alen(x)*len(y)\u7ef4\u7684\u77e9\u9635\uff0cfun\u9ed8\u8ba4\u662f*,\u5373 xi*yj contour ( x , y , z , nlevels = 10 ) # \u7b49\u9ad8\u7ebf nlevels:\u7b49\u9ad8\u7ebf\u6570\u91cf image ( x , y , z , xlim , xlab ) # \u70ed\u5730\u56fe persp ( x , y , z , xlim , xlab , theta , phi ) # \u4e09\u7ef4\u56fe theta/phi \u63a7\u5236\u56fe\u5f62\u67e5\u770b\u89d2\u5ea6eg:persp(x, y, z, theta = 30, phi = 20) \u4fdd\u5b58\u56fe\u50cf \u00b6 pdf ( \"test.pdf\" ) # \u7528\u8fd9\u4e2a\u6587\u4ef6\u4fdd\u5b58\u56fe\u50cf plot ( x , y ) dev.off () # \u6307\u793a\u521b\u5efa\u56fe\u50cf\u7684\u5de5\u4f5c\u7ed3\u675f I/O \u00b6 \u8bfb\u5165\u6570\u636e \u00b6 a = read.table ( \"filepath\" , header = T , na.strings = \"\" ) # \u8bfb\u5165\u6587\u672c\u6587\u4ef6,\u6307\u5b9a\u8868\u5934\u548c\u7f3a\u5931\u503c a = read.csv () # \u8bfb\u5165csv(','\u5206\u9694\u7b26\u6587\u4ef6) a = na.omit ( a ) # \u76f4\u63a5\u5220\u53bb\u6709\u7f3a\u5931\u503c\u7684\u884c fix ( a ) # \u5c55\u793a\u6570\u636e name ( a ) # \u67e5\u770b\u8868\u5934(\u53d8\u91cf\u540d)","title":"R"},{"location":"R/#r","text":"","title":"R"},{"location":"R/#_1","text":"? funcname # \u6253\u5f00\u51fd\u6570\u5e2e\u52a9\u6587\u4ef6 ls () # \u67e5\u770b\u6240\u6709\u5bf9\u8c61 rm ( x , y ) # \u5220\u9664\u5bf9\u8c61 rm ( list = ls ()) # \u5220\u9664\u6240\u6709\u5bf9\u8c61 set.seed ( n ) # \u6307\u5b9a\u968f\u673a\u6570\u79cd\u5b50 q () # \u9000\u51fa","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"R/#matrix","text":"","title":"Matrix"},{"location":"R/#_2","text":"x = c ( 1 , 2 , 3 , 4 ) # connect \u5efa\u7acb\u6570\u503c\u5411\u91cf seq ( a , b , length = n ) # [a,b]\u4e4b\u95f4\u7b49\u8ddd\u7684n\u4e2a\u5143\u7d20\u7684\u5411\u91cf\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5 a:b rnorm ( n ) # \u4ea7\u751f\u957f\u5ea6\u4e3an\u7684\u968f\u673a\u6b63\u6001\u5206\u5e03\u5411\u91cf\uff0c\u5982\u679c\u6307\u5b9a\u4e86\u968f\u673a\u6570\u79cd\u5b50\u90a3\u6bcf\u6b21\u7684\u6570\u4f1a\u4e00\u6837 length ( x ) # \u8fd4\u56de\u5411\u91cf\u957f\u5ea6 mean ( x ) # \u5411\u91cf\u5747\u503c sd ( x ) # \u6807\u51c6\u5dee var ( x ) # \u5411\u91cf\u65b9\u5dee cor ( x , y ) # \u8ba1\u7b972\u5411\u91cf\u7684\u76f8\u5173\u7cfb\u6570","title":"\u5411\u91cf"},{"location":"R/#matrix_1","text":"matrix ( data = NA , nrow = 1 , ncol = 1 , byrow = FALSE ) # eg: x = (data=c(1,2,3,4),2,2) \u53ea\u5199\u524d\u4e09\u4e2a\u53c2\u6570\u540d\u53ef\u4ee5\u7701\u7565 # \u9ed8\u8ba4\u6309\u5217\u586b\u5199matrix, byrow=TRUE\u4f1a\u6309\u884c\u586b\u5199 dim ( A ) # \u8f93\u51fa\u7ef4\u6570 sqrt ( x ) # \u6bcf\u4e2a\u5143\u7d20\u5f00\u6839 x ^ 2 # \u6bcf\u4e2a\u5143\u7d20\u5f00\u65b9","title":"Matrix"},{"location":"R/#_3","text":"A [ 1 , 2 ] # \u6307\u5b9a\u5355\u5143\u683c A [ c ( x1 , x2 ), c ( y1 , y2 )] # \u6307\u5b9a\u67d0\u4e9b\u5217\u548c\u67d0\u4e9b\u884c A [ x1 : x2 , y1 : y2 ] # \u6307\u5b9a\u884c\u4e0e\u5217\u7684\u8303\u56f4 A [ x1 : x2 ,] # \u6307\u5b9a\u884c\uff0c\u4e0d\u6307\u5b9a\u5217 A [ - c ( x1 , x2 )] # \u6307\u5b9a\u4e0d\u5305\u542b\u7684\u6570\u636e","title":"\u7d22\u5f15\u6570\u636e"},{"location":"R/#_4","text":"a = as.factor ( a ) # \u5982\u679ca\u7684\u6570\u636e\u662f\u79bb\u6563\u7684\u8f6c\u6362\u6210\u4e00\u4e2a\u5b9a\u6027\u7684\u53d8\u91cf # eg: # > a=[1,2,2,3,1,2,3,2,1,3] # > a=as.factor(a) # > print(a) # [1] 1 2 3 1 2 1 3 2 1 # Levels: 1 2 3 summary ( a ) # \u5bf9\u6307\u5b9a\u6570\u636e\u96c6\u4e2d\u7684\u6bcf\u4e2a\u53d8\u91cf\u8ba1\u7b97\u7edf\u8ba1\u4fe1\u606f(\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c...) summary ( name ) # \u4e5f\u53ef\u4ee5\u6307\u5b9a\u67d0\u4e2a\u5177\u4f53\u7684\u5c5e\u6027\u540d","title":"\u6570\u636e\u5904\u7406"},{"location":"R/#_5","text":"","title":"\u56fe\u50cf"},{"location":"R/#_6","text":"# \u5982\u679cx\u662f\u5b9a\u6027(\u79bb\u6563)\u53d8\u91cf\u4f1a\u81ea\u52a8\u753b\u7bb1\u7ebf\u56fe plot ( x , y , xlim = ( x1 , x2 ), xlab = \"\" , main = \"\" ) # main: title hist ( x ) # \u76f4\u65b9\u56fe,\u7eb5\u5750\u6807\u662f\u843d\u5728\u533a\u95f4\u5185\u5143\u7d20\u7684\u4e2a\u6570 # \u901a\u8fc7 IO \u6570\u636e\u4f5c\u56fe plot ( a $ name1 , a $ name2 ) # \u6570\u636e\u96c6\u548c\u53d8\u91cf\u540d\u95f4\u52a0$ attach ( a ) # \u4e5f\u53ef\u4ee5\u6307\u5b9a\u6570\u636e\u96c6 plot ( name1 , name2 )","title":"\u5efa\u7acb\u56fe\u50cf"},{"location":"R/#_7","text":"outer ( x , y , FUN = \"*\" ) # \u5efa\u7acb\u4e00\u4e2alen(x)*len(y)\u7ef4\u7684\u77e9\u9635\uff0cfun\u9ed8\u8ba4\u662f*,\u5373 xi*yj contour ( x , y , z , nlevels = 10 ) # \u7b49\u9ad8\u7ebf nlevels:\u7b49\u9ad8\u7ebf\u6570\u91cf image ( x , y , z , xlim , xlab ) # \u70ed\u5730\u56fe persp ( x , y , z , xlim , xlab , theta , phi ) # \u4e09\u7ef4\u56fe theta/phi \u63a7\u5236\u56fe\u5f62\u67e5\u770b\u89d2\u5ea6eg:persp(x, y, z, theta = 30, phi = 20)","title":"\u7b49\u9ad8\u7ebf\u56fe"},{"location":"R/#_8","text":"pdf ( \"test.pdf\" ) # \u7528\u8fd9\u4e2a\u6587\u4ef6\u4fdd\u5b58\u56fe\u50cf plot ( x , y ) dev.off () # \u6307\u793a\u521b\u5efa\u56fe\u50cf\u7684\u5de5\u4f5c\u7ed3\u675f","title":"\u4fdd\u5b58\u56fe\u50cf"},{"location":"R/#io","text":"","title":"I/O"},{"location":"R/#_9","text":"a = read.table ( \"filepath\" , header = T , na.strings = \"\" ) # \u8bfb\u5165\u6587\u672c\u6587\u4ef6,\u6307\u5b9a\u8868\u5934\u548c\u7f3a\u5931\u503c a = read.csv () # \u8bfb\u5165csv(','\u5206\u9694\u7b26\u6587\u4ef6) a = na.omit ( a ) # \u76f4\u63a5\u5220\u53bb\u6709\u7f3a\u5931\u503c\u7684\u884c fix ( a ) # \u5c55\u793a\u6570\u636e name ( a ) # \u67e5\u770b\u8868\u5934(\u53d8\u91cf\u540d)","title":"\u8bfb\u5165\u6570\u636e"},{"location":"ML/10_Adversarial%20Attack/","text":"Attack ML Models \u00b6 Motivation \u00b6 \u5e94\u5bf9\u6765\u81ea\u4eba\u7c7b\u7684\u6076\u610f \u5bf9\u4e00\u5f20\u56fe\u7247\u52a0\u5165\u4e00\u4e9b\u6742\u8baf\u4f1a\u5bf9 Classifier \u7684\u7ed3\u679c\u9020\u6210\u5f71\u54cd Attack \u00b6 Attack \u5c31\u662f\u8ba9\u4e00\u5f20\u56fe\u7247\u4e0d\u6539\u53d8\u4eba\u7c7b\u5bf9\u5b83\u7684\u8fa8\u8bc6\u7684\u60c5\u51b5\u4e0b\uff0c\u6539\u53d8\u540c\u4e00\u4e2a model \u7684\u7ed3\u679c Loss Function for Attack \u00b6 \u5728 train \u4e00\u4e2a model \u65f6\uff0cinput \\(x\\) \u200b \u662f\u56fa\u5b9a\u7684\uff0closs function\u4e3a \\(L_{train}(\\theta)=C(y^0,y^{true})\\) \u200b\uff0c\u901a\u8fc7\u4e0d\u65ad\u8c03\u6574 \\(\\theta\\) \u200b \u7684\u503c\uff0c\u4f7f\u5f97 \\(L_{train}(\\theta)\\) \u200b\u200b\u200b \u8d8a\u5c0f\u8d8a\u597d Non-targeted Attack \uff1a\u6b64\u65f6 network \u7684\u53c2\u6570 \\(\\theta\\) \u200b \u662f\u56fa\u5b9a\u7684\uff0c\u901a\u8fc7\u4e0d\u65ad\u8c03\u6574 input \\(x\\) \u200b \u7684\u503c\u4f7f\u5f97 \\(L(x')=-C(y',y^{true})\\) \u200b\u200b\u200b \u8d8a\u5c0f\u8d8a\u597d\u200b\uff0c\u5373\u548c\u539f\u6765\u7684 target \u8d8a\u8fdc\u8d8a\u597d Targeted Attack \uff1a\u6b64\u65f6 network \u7684\u53c2\u6570 \\(\\theta\\) \u662f\u56fa\u5b9a\u7684\uff0c\u901a\u8fc7\u4e0d\u65ad\u8c03\u6574 input \\(x\\) \u7684\u503c\u4f7f\u5f97 \\(L(x')=-C(y',y^{true})+C(y',y^{false})\\) \u200b\u200b\u200b \u8d8a\u5c0f\u8d8a\u597d\uff0c\u5373\u548c\u539f\u6765\u7684 target \u8d8a\u8fdc\u8d8a\u597d\uff0c\u548c\u65b0\u7684 target \u8d8a\u8fd1\u8d8a\u597d \u4e0e\u6b64\u540c\u65f6\u8fd8\u9700\u8981\u9650\u5236\u8f93\u5165 \\(x^0,x'\\) \u200b \u4e4b\u95f4\u7684\u5dee\u5f02\uff08\u4e0d\u6539\u53d8\u4eba\u7c7b\u5bf9\u5b83\u7684\u8fa8\u8bc6\u7684\u60c5\u51b5\uff09\uff0c\u53ea\u6709\u8fd9\u8f93\u5165\u4e4b\u95f4\u7684\u5dee\u5f02 d \u5c0f\u4e8e \\(\\epsilon\\) \u200b\uff0c\u6211\u4eec\u624d\u53ef\u4ee5\u8ba4\u4e3a \\(x'\\) \u200b \u662f\u4e0e \\(x^0\\) \u200b \u76f8\u4f3c\u7684\uff0c\u624d\u8fbe\u5230\u4e86 attack \u7684\u76ee\u7684\uff0c\u5373\u4f7f\u8f93\u5165\u5c3d\u53ef\u80fd\u5177\u6709\u8ff7\u60d1\u6027\uff0c\u4ece\u800c\u4f7f\u7f51\u7edc\u8f93\u51fa\u9519\u8bef\u7684\u7ed3\u679c Constraint \u00b6 \u8ba1\u7b97 d \u7684\u65b9\u6cd5 L2-norm\uff0c\u4e3a \\(x^0,x'\\) \u200b\u4e4b\u95f4\u6bcf\u4e2a\u50cf\u7d20\u5dee\u5f02\u7684\u5e73\u65b9\u548c L-infinity\uff0c\u4e3a \\(x^0,x'\\) \u200b\u200b \u4e4b\u95f4\u6bcf\u4e2a\u50cf\u7d20\u5dee\u5f02\u7684\u6700\u5927\u503c \u5982\u679c\u6539\u53d8\u4e00\u5f20\u56fe\u4e2d\u7684\u6bcf\u4e2a pixel\uff0c\u53e6\u5916\u4e00\u5e45\u56fe\u53ea\u6539\u53d8\u5176\u4e2d\u4e00\u4e2a pixel\uff0c\u4f7f\u5f97\u8fd9\u4e24\u8005\u4e4b\u95f4\u7684L2-norm \u662f\u4e00\u6837\u7684\uff0c\u4f46\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u5f97\u51fa\u7684 L-infinity \u66f4\u5927 How to Attack \u00b6 \u5c31\u50cf\u8bad\u7ec3\u4e00\u4e2a neural network \u4e00\u6837\uff0c\u4f46\u9700\u8981\u8bad\u7ec3\u7684\u53c2\u6570\u662f \\(x'\\) \uff0c\u6b64\u65f6\u5c31\u9700\u8981\u627e\u5230\u4e00\u4e2a\u53c2\u6570 \\(x^*\\) \uff0c\u6765\u6700\u5c0f\u5316 \\(L(x')\\) \uff0c\u9650\u5236\u6761\u4ef6\u662f \\(d(x^0,x')\\leq\\epsilon\\) \u200b $$ x^*=arg\\mathop{min}_\\limits {d(x^0,x')\\leq\\epsilon}L(x') $$ \u5f53 \\(d(x^0,x^t)>\\epsilon\\) \u65f6\uff0c\uff0c\u4f7f\u7528 \\(fix(x^t)\\) \u6765\u66f4\u65b0\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5982\u679c\u8d85\u8fc7\u4e86 \\(\\epsilon\\) \u90a3\u5c31\u8bbe\u4e3a \\(\\epsilon\\) \u5047\u8bbe \\(x_0\\) \u662f\u5728\u9ad8\u7ef4\u4e0a\u79fb\u52a8\u7684\u4e00\u4e2a\u70b9\uff0c\u5728\u67d0\u4e9b\u7ef4\u5ea6\u4e0a\u79fb\u52a8\u65f6\uff0c\u5b83\u8fd8\u662f\u539f\u6765\u7684\u7c7b\u522b\u7684\u53ef\u80fd\u6027\u8fd8\u662f\u5f88\u9ad8\uff0c\u4f46\u5728\u67d0\u8d34\u7279\u5b9a\u7684\u7ef4\u5ea6\u4e0a\u79fb\u52a8\u65f6\uff0c\u53ea\u9700\u8981\u79fb\u52a8\u4e00\u70b9\u70b9\u5c31\u4f1a\u53d8\u6210\u4e00\u4e2a\u5b8c\u5168\u4e0d\u4e00\u6837\u7684\u7c7b\u522b Attack Approaches \u00b6 FGSM (https://arxiv.org/abs/1412.6572) Basic iterative method (https://arxiv.org/abs/1607.02533) L-BFGS (https://arxiv.org/abs/1312.6199) Deepfool (https://arxiv.org/abs/1511.04599) JSMA (https://arxiv.org/abs/1511.07528) C&W (https://arxiv.org/abs/1608.04644) Elastic net attack (https://arxiv.org/abs/1709.04114) Spatially Transformed (https://arxiv.org/abs/1801.02612) One Pixel Attack (https://arxiv.org/abs/1710.08864) ...... only list a few \u8fd9\u4e9b\u65b9\u6cd5\u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e\u4f7f\u7528\u4e86\u4e0d\u540c\u7684 constrains\uff0c\u6216\u8005\u4f7f\u7528\u4e86\u4e0d\u540c\u7684 optimization methods \u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e0b FGSM \uff0c\u5b83\u7684\u7b56\u7565\u662f\u5bf9\u6bcf\u4e00\u7ef4\u7684 \\(\\frac{\\partial L}{\\partial x_i}\\) \u5982\u679c\u662f\u6b63\u503c\u53d6 +1\uff0c\u8d1f\u503c\u5c31\u53d6 -1\uff1b\u5373\u5bf9\u4e8e \\(x^0\\) \u7684\u6240\u6709\u7ef4\uff0c\u8981\u4e48 \\(+\\epsilon\\) \uff0c\u8981\u4e48 \\(-\\epsilon\\) \u200b\uff1b\u8fd9\u6837\u7684\u8bdd\u5728FGSM\u91cc\u9762\uff0c\u6211\u4eec\u53ea\u5728\u610f gradient \u7684\u65b9\u5411\uff0c\u4e0d\u5728\u610f\u5176\u5177\u4f53\u7684\u5927\u5c0f Black Box Attack \u00b6 \u653b\u51fb\u4e00\u4e2a\u9ed1\u7bb1\uff0c\u5373\u4e0d\u77e5\u9053\u5177\u4f53\u53c2\u6570\u7684 neuron network\uff0c\u5982\u679c\u77e5\u9053 black network \u7684 training data\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528 data \u6765 train \u4e00\u4e2a proxy network\uff0c\u518d\u5229\u7528\u8fd9\u4e2a proxy network \u6765 attack \u5982\u679c\u5f97\u4e0d\u5230 training data \u4f46\u662f network \u662f\u5728\u7ebf\u7248\u672c\uff0c\u53ef\u4ee5\u8f93\u5165\u5927\u91cf\u56fe\u7247\u6765\u5236\u9020 data \u8fd9\u6837\u7684\u65b9\u6cd5\u662f\u5f88\u6709\u53ef\u80fd\u594f\u6548\u7684 Attack in the Real World \u00b6 \u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u901a\u8fc7\u5e26\u7279\u6b8a\u7684\u773c\u955c attack \u4e86\u4e00\u4e2a\u4eba\u8138\u8fa8\u8bc6\u7cfb\u7edf Defense \u00b6 Adversarial Attack cannot be defended by weight regularization, dropout and model ensemble Two types of defense: Passive Proactive Passive Defense \u00b6 \u56fe\u7247\u4e22\u8fdb network \u524d\u4e22\u8fdb\u4e00\u4e2a filter\uff0c\u8fd9\u4e2a filter \u53ef\u4ee5\u662f smoothing Q\uff1a\u90a3\u4e48\u4e3a\u4ec0\u4e48 smoothing \u53ef\u4ee5\u8fbe\u5230\u8fd9\u79cd\u6548\u679c\u5462\uff1f A\uff1a\u53ea\u6709\u67d0\u51e0\u79cd\u65b9\u5411\u4e0a\u7684\u7684\u4fe1\u53f7\u53ef\u4ee5\u4f7f attack \u6210\u529f\u3002\u5982\u679c\u4f7f\u7528\u4e86 smoothing \u8fd9\u79cd filter\uff0c\u5c31\u628a\u8fd9\u51e0\u79cd\u4fe1\u53f7\u6539\u53d8\u4e86\uff0c\u90a3\u4e48 attack \u5c31\u5931\u6548\u4e86 \uff1b\u52a0\u4e0a smoothing \u5e76\u4e0d\u4f1a\u4f24\u5bb3\u539f\u6765\u7684\u56fe\u7247\uff0c\u6240\u4ee5 network \u4ecd\u7136\u53ef\u4ee5\u5f97\u51fa\u6b63\u786e\u7684\u7ed3\u679c \u6839\u636e\u8fd9\u79cd\u601d\u60f3\uff0c\u6709\u5b66\u8005\u5c31\u63d0\u51fa\u4e86 feature squeeze\uff0cSqueezer \u5c31\u662f\u4e0d\u540c\u7684 filter \u5bf9\u4e8e\u540c\u4e00\u4e2a input\uff0c\u6211\u4eec\u5148\u5f97\u51fa model \u7684\u8f93\u51fa\u7ed3\u679c \\(Prediction_0\\) \u200b\uff0c\u518d\u6839\u636e \\(Squeeze_1\uff0cSqueeze_2\\) \u200b \u5f97\u51fa\u7ed3\u679c \\(Prediction_1,Prediction_2\\) \u200b\uff0c\u5982\u679c \\(Prediction_0\\) \u200b\u548c \\(Prediction_1,Prediction_2\\) \u200b\u200b\u200b \u4e4b\u95f4\u7684\u5dee\u503c d \u5f88\u5927\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8ba4\u4e3a input \u662f\u6765 attack \u7684 \u53e6\u5916\u4e00\u4e2a\u65b9\u6cd5 \u5bf9\u539f\u56fe\u7247\u8fdb\u884c\u7f29\u653e\u5e76\u5728\u5468\u56f4\u52a0\u4e0a padding\uff0c\u6539\u52a8\u4e0d\u80fd\u8fc7\u5927\uff0c\u76ee\u7684\u662f\u4f7f\u67d0\u4e2a\u65b9\u5411\u4e0a\u7684\u653b\u51fb\u5931\u6548 Passive Defense \u65b9\u6cd5\u5982\u679c\u76fe\u724c\u673a\u5236\u88ab\u6cc4\u9732\u4e86\u8fd8\u662f\u65e0\u80fd\u4e3a\u529b\uff0c\u56e0\u4e3a\u53ef\u4ee5\u628a\u6bd4\u5982\u524d\u9762\u7684 filter \u5f53\u6210\u7b2c\u4e00\u5c42 layer Proactive Defense \u00b6 \u601d\u60f3\u662f\u81ea\u5df1 attack \u8bad\u7ec3\u597d\u7684 model\uff0c\u7136\u540e\u628a attack \u7684\u56fe\u7247\u52a0\u8fdb training data \u91cd\u65b0\u8bad\u7ec3 \u53cd\u590d\u5f88\u591a\u6b21\uff0c\u4e0d\u65ad\u7684\u8865\u6f0f\u6d1e \u4f46\u662f\u5982\u679c attacker \u77e5\u9053\u4e86\u6211\u4eec\u662f\u4f7f\u7528\u7b97\u6cd5 A \u6765\u8fdb\u884c\u6a21\u62df\uff0c\u90a3\u4e48 attacker \u53ef\u4ee5\u4f7f\u7528\u7b97\u6cd5 B\u6765\u8fdb\u884c attack\uff0c\u90a3\u4e48\u6211\u4eec\u7684 network \u5e76\u4e0d\u80fd\u62b5\u5fa1\u8fd9\u79cd attack","title":"Attack ML Models"},{"location":"ML/10_Adversarial%20Attack/#attack-ml-models","text":"","title":"Attack ML Models"},{"location":"ML/10_Adversarial%20Attack/#motivation","text":"\u5e94\u5bf9\u6765\u81ea\u4eba\u7c7b\u7684\u6076\u610f \u5bf9\u4e00\u5f20\u56fe\u7247\u52a0\u5165\u4e00\u4e9b\u6742\u8baf\u4f1a\u5bf9 Classifier \u7684\u7ed3\u679c\u9020\u6210\u5f71\u54cd","title":"Motivation"},{"location":"ML/10_Adversarial%20Attack/#attack","text":"Attack \u5c31\u662f\u8ba9\u4e00\u5f20\u56fe\u7247\u4e0d\u6539\u53d8\u4eba\u7c7b\u5bf9\u5b83\u7684\u8fa8\u8bc6\u7684\u60c5\u51b5\u4e0b\uff0c\u6539\u53d8\u540c\u4e00\u4e2a model \u7684\u7ed3\u679c","title":"Attack"},{"location":"ML/10_Adversarial%20Attack/#loss-function-for-attack","text":"\u5728 train \u4e00\u4e2a model \u65f6\uff0cinput \\(x\\) \u200b \u662f\u56fa\u5b9a\u7684\uff0closs function\u4e3a \\(L_{train}(\\theta)=C(y^0,y^{true})\\) \u200b\uff0c\u901a\u8fc7\u4e0d\u65ad\u8c03\u6574 \\(\\theta\\) \u200b \u7684\u503c\uff0c\u4f7f\u5f97 \\(L_{train}(\\theta)\\) \u200b\u200b\u200b \u8d8a\u5c0f\u8d8a\u597d Non-targeted Attack \uff1a\u6b64\u65f6 network \u7684\u53c2\u6570 \\(\\theta\\) \u200b \u662f\u56fa\u5b9a\u7684\uff0c\u901a\u8fc7\u4e0d\u65ad\u8c03\u6574 input \\(x\\) \u200b \u7684\u503c\u4f7f\u5f97 \\(L(x')=-C(y',y^{true})\\) \u200b\u200b\u200b \u8d8a\u5c0f\u8d8a\u597d\u200b\uff0c\u5373\u548c\u539f\u6765\u7684 target \u8d8a\u8fdc\u8d8a\u597d Targeted Attack \uff1a\u6b64\u65f6 network \u7684\u53c2\u6570 \\(\\theta\\) \u662f\u56fa\u5b9a\u7684\uff0c\u901a\u8fc7\u4e0d\u65ad\u8c03\u6574 input \\(x\\) \u7684\u503c\u4f7f\u5f97 \\(L(x')=-C(y',y^{true})+C(y',y^{false})\\) \u200b\u200b\u200b \u8d8a\u5c0f\u8d8a\u597d\uff0c\u5373\u548c\u539f\u6765\u7684 target \u8d8a\u8fdc\u8d8a\u597d\uff0c\u548c\u65b0\u7684 target \u8d8a\u8fd1\u8d8a\u597d \u4e0e\u6b64\u540c\u65f6\u8fd8\u9700\u8981\u9650\u5236\u8f93\u5165 \\(x^0,x'\\) \u200b \u4e4b\u95f4\u7684\u5dee\u5f02\uff08\u4e0d\u6539\u53d8\u4eba\u7c7b\u5bf9\u5b83\u7684\u8fa8\u8bc6\u7684\u60c5\u51b5\uff09\uff0c\u53ea\u6709\u8fd9\u8f93\u5165\u4e4b\u95f4\u7684\u5dee\u5f02 d \u5c0f\u4e8e \\(\\epsilon\\) \u200b\uff0c\u6211\u4eec\u624d\u53ef\u4ee5\u8ba4\u4e3a \\(x'\\) \u200b \u662f\u4e0e \\(x^0\\) \u200b \u76f8\u4f3c\u7684\uff0c\u624d\u8fbe\u5230\u4e86 attack \u7684\u76ee\u7684\uff0c\u5373\u4f7f\u8f93\u5165\u5c3d\u53ef\u80fd\u5177\u6709\u8ff7\u60d1\u6027\uff0c\u4ece\u800c\u4f7f\u7f51\u7edc\u8f93\u51fa\u9519\u8bef\u7684\u7ed3\u679c","title":"Loss Function for Attack"},{"location":"ML/10_Adversarial%20Attack/#constraint","text":"\u8ba1\u7b97 d \u7684\u65b9\u6cd5 L2-norm\uff0c\u4e3a \\(x^0,x'\\) \u200b\u4e4b\u95f4\u6bcf\u4e2a\u50cf\u7d20\u5dee\u5f02\u7684\u5e73\u65b9\u548c L-infinity\uff0c\u4e3a \\(x^0,x'\\) \u200b\u200b \u4e4b\u95f4\u6bcf\u4e2a\u50cf\u7d20\u5dee\u5f02\u7684\u6700\u5927\u503c \u5982\u679c\u6539\u53d8\u4e00\u5f20\u56fe\u4e2d\u7684\u6bcf\u4e2a pixel\uff0c\u53e6\u5916\u4e00\u5e45\u56fe\u53ea\u6539\u53d8\u5176\u4e2d\u4e00\u4e2a pixel\uff0c\u4f7f\u5f97\u8fd9\u4e24\u8005\u4e4b\u95f4\u7684L2-norm \u662f\u4e00\u6837\u7684\uff0c\u4f46\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u5f97\u51fa\u7684 L-infinity \u66f4\u5927","title":"Constraint"},{"location":"ML/10_Adversarial%20Attack/#how-to-attack","text":"\u5c31\u50cf\u8bad\u7ec3\u4e00\u4e2a neural network \u4e00\u6837\uff0c\u4f46\u9700\u8981\u8bad\u7ec3\u7684\u53c2\u6570\u662f \\(x'\\) \uff0c\u6b64\u65f6\u5c31\u9700\u8981\u627e\u5230\u4e00\u4e2a\u53c2\u6570 \\(x^*\\) \uff0c\u6765\u6700\u5c0f\u5316 \\(L(x')\\) \uff0c\u9650\u5236\u6761\u4ef6\u662f \\(d(x^0,x')\\leq\\epsilon\\) \u200b $$ x^*=arg\\mathop{min}_\\limits {d(x^0,x')\\leq\\epsilon}L(x') $$ \u5f53 \\(d(x^0,x^t)>\\epsilon\\) \u65f6\uff0c\uff0c\u4f7f\u7528 \\(fix(x^t)\\) \u6765\u66f4\u65b0\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5982\u679c\u8d85\u8fc7\u4e86 \\(\\epsilon\\) \u90a3\u5c31\u8bbe\u4e3a \\(\\epsilon\\) \u5047\u8bbe \\(x_0\\) \u662f\u5728\u9ad8\u7ef4\u4e0a\u79fb\u52a8\u7684\u4e00\u4e2a\u70b9\uff0c\u5728\u67d0\u4e9b\u7ef4\u5ea6\u4e0a\u79fb\u52a8\u65f6\uff0c\u5b83\u8fd8\u662f\u539f\u6765\u7684\u7c7b\u522b\u7684\u53ef\u80fd\u6027\u8fd8\u662f\u5f88\u9ad8\uff0c\u4f46\u5728\u67d0\u8d34\u7279\u5b9a\u7684\u7ef4\u5ea6\u4e0a\u79fb\u52a8\u65f6\uff0c\u53ea\u9700\u8981\u79fb\u52a8\u4e00\u70b9\u70b9\u5c31\u4f1a\u53d8\u6210\u4e00\u4e2a\u5b8c\u5168\u4e0d\u4e00\u6837\u7684\u7c7b\u522b","title":"How to Attack"},{"location":"ML/10_Adversarial%20Attack/#attack-approaches","text":"FGSM (https://arxiv.org/abs/1412.6572) Basic iterative method (https://arxiv.org/abs/1607.02533) L-BFGS (https://arxiv.org/abs/1312.6199) Deepfool (https://arxiv.org/abs/1511.04599) JSMA (https://arxiv.org/abs/1511.07528) C&W (https://arxiv.org/abs/1608.04644) Elastic net attack (https://arxiv.org/abs/1709.04114) Spatially Transformed (https://arxiv.org/abs/1801.02612) One Pixel Attack (https://arxiv.org/abs/1710.08864) ...... only list a few \u8fd9\u4e9b\u65b9\u6cd5\u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e\u4f7f\u7528\u4e86\u4e0d\u540c\u7684 constrains\uff0c\u6216\u8005\u4f7f\u7528\u4e86\u4e0d\u540c\u7684 optimization methods \u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e0b FGSM \uff0c\u5b83\u7684\u7b56\u7565\u662f\u5bf9\u6bcf\u4e00\u7ef4\u7684 \\(\\frac{\\partial L}{\\partial x_i}\\) \u5982\u679c\u662f\u6b63\u503c\u53d6 +1\uff0c\u8d1f\u503c\u5c31\u53d6 -1\uff1b\u5373\u5bf9\u4e8e \\(x^0\\) \u7684\u6240\u6709\u7ef4\uff0c\u8981\u4e48 \\(+\\epsilon\\) \uff0c\u8981\u4e48 \\(-\\epsilon\\) \u200b\uff1b\u8fd9\u6837\u7684\u8bdd\u5728FGSM\u91cc\u9762\uff0c\u6211\u4eec\u53ea\u5728\u610f gradient \u7684\u65b9\u5411\uff0c\u4e0d\u5728\u610f\u5176\u5177\u4f53\u7684\u5927\u5c0f","title":"Attack Approaches"},{"location":"ML/10_Adversarial%20Attack/#black-box-attack","text":"\u653b\u51fb\u4e00\u4e2a\u9ed1\u7bb1\uff0c\u5373\u4e0d\u77e5\u9053\u5177\u4f53\u53c2\u6570\u7684 neuron network\uff0c\u5982\u679c\u77e5\u9053 black network \u7684 training data\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528 data \u6765 train \u4e00\u4e2a proxy network\uff0c\u518d\u5229\u7528\u8fd9\u4e2a proxy network \u6765 attack \u5982\u679c\u5f97\u4e0d\u5230 training data \u4f46\u662f network \u662f\u5728\u7ebf\u7248\u672c\uff0c\u53ef\u4ee5\u8f93\u5165\u5927\u91cf\u56fe\u7247\u6765\u5236\u9020 data \u8fd9\u6837\u7684\u65b9\u6cd5\u662f\u5f88\u6709\u53ef\u80fd\u594f\u6548\u7684","title":"Black Box Attack"},{"location":"ML/10_Adversarial%20Attack/#attack-in-the-real-world","text":"\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u901a\u8fc7\u5e26\u7279\u6b8a\u7684\u773c\u955c attack \u4e86\u4e00\u4e2a\u4eba\u8138\u8fa8\u8bc6\u7cfb\u7edf","title":"Attack in the Real World"},{"location":"ML/10_Adversarial%20Attack/#defense","text":"Adversarial Attack cannot be defended by weight regularization, dropout and model ensemble Two types of defense: Passive Proactive","title":"Defense"},{"location":"ML/10_Adversarial%20Attack/#passive-defense","text":"\u56fe\u7247\u4e22\u8fdb network \u524d\u4e22\u8fdb\u4e00\u4e2a filter\uff0c\u8fd9\u4e2a filter \u53ef\u4ee5\u662f smoothing Q\uff1a\u90a3\u4e48\u4e3a\u4ec0\u4e48 smoothing \u53ef\u4ee5\u8fbe\u5230\u8fd9\u79cd\u6548\u679c\u5462\uff1f A\uff1a\u53ea\u6709\u67d0\u51e0\u79cd\u65b9\u5411\u4e0a\u7684\u7684\u4fe1\u53f7\u53ef\u4ee5\u4f7f attack \u6210\u529f\u3002\u5982\u679c\u4f7f\u7528\u4e86 smoothing \u8fd9\u79cd filter\uff0c\u5c31\u628a\u8fd9\u51e0\u79cd\u4fe1\u53f7\u6539\u53d8\u4e86\uff0c\u90a3\u4e48 attack \u5c31\u5931\u6548\u4e86 \uff1b\u52a0\u4e0a smoothing \u5e76\u4e0d\u4f1a\u4f24\u5bb3\u539f\u6765\u7684\u56fe\u7247\uff0c\u6240\u4ee5 network \u4ecd\u7136\u53ef\u4ee5\u5f97\u51fa\u6b63\u786e\u7684\u7ed3\u679c \u6839\u636e\u8fd9\u79cd\u601d\u60f3\uff0c\u6709\u5b66\u8005\u5c31\u63d0\u51fa\u4e86 feature squeeze\uff0cSqueezer \u5c31\u662f\u4e0d\u540c\u7684 filter \u5bf9\u4e8e\u540c\u4e00\u4e2a input\uff0c\u6211\u4eec\u5148\u5f97\u51fa model \u7684\u8f93\u51fa\u7ed3\u679c \\(Prediction_0\\) \u200b\uff0c\u518d\u6839\u636e \\(Squeeze_1\uff0cSqueeze_2\\) \u200b \u5f97\u51fa\u7ed3\u679c \\(Prediction_1,Prediction_2\\) \u200b\uff0c\u5982\u679c \\(Prediction_0\\) \u200b\u548c \\(Prediction_1,Prediction_2\\) \u200b\u200b\u200b \u4e4b\u95f4\u7684\u5dee\u503c d \u5f88\u5927\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8ba4\u4e3a input \u662f\u6765 attack \u7684 \u53e6\u5916\u4e00\u4e2a\u65b9\u6cd5 \u5bf9\u539f\u56fe\u7247\u8fdb\u884c\u7f29\u653e\u5e76\u5728\u5468\u56f4\u52a0\u4e0a padding\uff0c\u6539\u52a8\u4e0d\u80fd\u8fc7\u5927\uff0c\u76ee\u7684\u662f\u4f7f\u67d0\u4e2a\u65b9\u5411\u4e0a\u7684\u653b\u51fb\u5931\u6548 Passive Defense \u65b9\u6cd5\u5982\u679c\u76fe\u724c\u673a\u5236\u88ab\u6cc4\u9732\u4e86\u8fd8\u662f\u65e0\u80fd\u4e3a\u529b\uff0c\u56e0\u4e3a\u53ef\u4ee5\u628a\u6bd4\u5982\u524d\u9762\u7684 filter \u5f53\u6210\u7b2c\u4e00\u5c42 layer","title":"Passive Defense"},{"location":"ML/10_Adversarial%20Attack/#proactive-defense","text":"\u601d\u60f3\u662f\u81ea\u5df1 attack \u8bad\u7ec3\u597d\u7684 model\uff0c\u7136\u540e\u628a attack \u7684\u56fe\u7247\u52a0\u8fdb training data \u91cd\u65b0\u8bad\u7ec3 \u53cd\u590d\u5f88\u591a\u6b21\uff0c\u4e0d\u65ad\u7684\u8865\u6f0f\u6d1e \u4f46\u662f\u5982\u679c attacker \u77e5\u9053\u4e86\u6211\u4eec\u662f\u4f7f\u7528\u7b97\u6cd5 A \u6765\u8fdb\u884c\u6a21\u62df\uff0c\u90a3\u4e48 attacker \u53ef\u4ee5\u4f7f\u7528\u7b97\u6cd5 B\u6765\u8fdb\u884c attack\uff0c\u90a3\u4e48\u6211\u4eec\u7684 network \u5e76\u4e0d\u80fd\u62b5\u5fa1\u8fd9\u79cd attack","title":"Proactive Defense"},{"location":"ML/11_Network%20Compression/","text":"","title":"11 Network Compression"},{"location":"ML/1_Regression/","text":"Regression \u00b6 Regression \u5177\u4f53\u8fc7\u7a0b \u00b6 \u5b9a\u4e49\u4e00\u4e2a model \u5373 function set \u5b9a\u4e49\u4e00\u4e2a goodness of function \u635f\u5931\u51fd\u6570\u53bb\u8bc4\u4f30\u8be5 function \u7684\u597d\u574f \u627e\u4e00\u4e2a\u6700\u597d\u7684 function Linear Model \u7ebf\u6027\u6a21\u578b \u00b6 Model (function set)\uff1a \\(y=b+w \\cdot X_{cp}\\) \uff0c\u53ef\u4ee5\u6269\u5c55\u4e3a \\(y=b+ \\sum w_ix_i\\) Loss function\uff1a \\(L(f)=L(w,b)=\\sum_{n=1}^{10}(\\widehat{y}^n-(b+w \\cdot x^{n}_{cp}))^2\\) Gradient Descent \u68af\u5ea6\u4e0b\u964d \u00b6 \u5355\u4e2a\u53c2\u6570\u76f4\u63a5\u6c42\u5fae\u5206\uff0c\u591a\u4e2a\u53c2\u6570\u6c42\u504f\u5fae\u5206 \\[ \\begin{align} L(w,b)=\\sum\\limits_{n=1}^{10}(\\widehat{y}^n-(b+w\\cdot x_{cp}^n))^2 \\\\ \\frac{\\partial L}{\\partial w}=\\sum\\limits_{n=1}^{10}2(\\widehat{y}^n-(b+w\\cdot x_{cp}^n))(-x_{cp}^n) \\\\ \\frac{\\partial L}{\\partial b}=\\sum\\limits_{n=1}^{10}2(\\widehat{y}^n-(b+w\\cdot x_{cp}^n))(-1) \\end{align} \\] \\[ \\begin{align} w^1=w^0-\u03b7\\frac{\\partial L}{\\partial w}|_{w=w^0,b=b^0} \\ \\ \\ \\ \\ \\ \\ \\ \\ b^1=b^0-\u03b7\\frac{\\partial L}{\\partial b}|_{w=w^0,b=b^0} \\\\ w^2=w^1-\u03b7\\frac{\\partial L}{\\partial w}|_{w=w^1,b=b^1} \\ \\ \\ \\ \\ \\ \\ \\ \\ b^2=b^1-\u03b7\\frac{\\partial L}{\\partial b}|_{w=w^1,b=b^1} \\\\ ... \\\\ w^{i+1}=w^{i}-\u03b7\\frac{\\partial L}{\\partial w}|_{w=w^{i},b=b^{i}} \\ \\ \\ \\ \\ \\ \\ \\ \\ b^{i+1}=b^{i}-\u03b7\\frac{\\partial L}{\\partial b}|_{w=w^{i},b=b^{i}} \\\\ if(\\frac{\\partial L}{\\partial w}==0 \\&\\& \\frac{\\partial L}{\\partial b}==0) \\ \\ \\ then \\ \\ stop \\end{align} \\] \u7f3a\u70b9\uff1a\u627e\u5230\u7684\u70b9\u672a\u5fc5\u662f\u6781\u5c0f\u503c\u70b9 # eg: y = b + w * x \u8ba1\u7b97\u68af\u5ea6\u5fae\u5206\u7684\u51fd\u6570 getGrad() def getGrad ( b , w ): # initial b_grad and w_grad b_grad = 0.0 w_grad = 0.0 for i in range ( 10 ): b_grad += ( - 2.0 ) * ( y_data [ i ] - ( b + w * x_data [ i ])) w_grad += ( - 2.0 * x_data [ i ]) * ( y_data [ i ] - ( b + w * x_data [ i ])) return ( b_grad , w_grad ) \u975e\u7ebf\u6027\u7684\u6a21\u578b \u00b6 \\((x_{cp})^2\\) \u7684 model \uff1atraining data \u4e2d model \u8d8a\u590d\u6742 error \u4f1a\u8d8a\u4f4e\uff0c\u4f46 testing data \u4e2d error \u4f1a\u53d8\u5927\uff0coverfitting \u8003\u8651\u79cd\u65cf\u3001\u7c7b\u522b\u7684\u5f71\u54cd \\[ \\begin{align} if \\ \\ x_s=Pidgey: \\ \\ \\ \\ \\ \\ \\ y=b_1+w_1\\cdot x_{cp} \\\\ if \\ \\ x_s=Weedle: \\ \\ \\ \\ \\ \\ y=b_2+w_2\\cdot x_{cp} \\\\ if \\ \\ x_s=Caterpie: \\ \\ \\ \\ y=b_3+w_3\\cdot x_{cp} \\\\ if \\ \\ x_s=Eevee: \\ \\ \\ \\ \\ \\ \\ \\ \\ y=b_4+w_4\\cdot x_{cp} \\end{align} \\] regularization \u89e3\u51b3 overfitting \u00b6 \u6b63\u5219\u5316\u89e3\u51b3\u8fc7\u62df\u5408\u95ee\u9898 $$ L=\\sum\\limits_i^n(\\widehat{y}^i-(b+\\sum\\limits_{j}w_jx_j))^2+\\lambda\\sum(w_i)^2 $$ \u5e0c\u671b \\(w_i\\) \u6bd4\u8f83\u5c0f\u800c\u5f97\u5230\u4e00\u4e2a\u5e73\u6ed1\u7684\u66f2\u7ebf\uff0c\u8fd9\u91cc\u7684 \u03bb \u9700\u8981\u6211\u4eec\u624b\u52a8\u53bb\u8c03\u6574\u4ee5\u53d6\u5f97\u6700\u597d\u7684\u503c\uff0c\u4e5f\u53eb weight decay\uff0c\u6743\u91cd\u8870\u51cf Adaptive Learning rates \u00b6 learning rate \u5927\u4e86\u5c0f\u4e86\u90fd\u4e0d\u597d \u4e00\u4e2a\u7b80\u7b54\u7684\u539f\u5219\uff1alearning rate \u901a\u5e38\u662f\u968f\u7740\u53c2\u6570\u7684 update \u8d8a\u6765\u8d8a\u5c0f\u7684 eg\uff1a \\(\\eta^t=\\eta/ \\sqrt{t+1}\\) \uff08\u7b2c t \u6b21 update\uff09 Adagrad \u00b6 Divide the learning rate of each parameter by the root mean square(\u65b9\u5747\u6839) of its previous derivatives Adagrad \u5c06\u4e0d\u540c\u53c2\u6570\u7684 learning rate \u5206\u5f00\u8003\u8651\uff0cupdate\u5230\u540e\u9762\u901f\u5ea6\u4f1a\u8d8a\u6765\u8d8a\u6162\uff0c\u8fd9\u662fadaptive\u7b97\u6cd5\u4e2d\u6700\u7b80\u5355\u7684\u4e00\u79cd \\[ \\begin{equation} \\begin{split} &Adagrad\\\\ &w^1=w^0-\\frac{\\eta^0}{\\sigma^0}\\cdot g^0, \\ \\ \\ \\sigma^0=\\sqrt{(g^0)^2} \\\\ &w^2=w^1-\\frac{\\eta^1}{\\sigma^1}\\cdot g^1, \\ \\ \\ \\sigma^1=\\sqrt{\\frac{1}{2}[(g^0)^2+(g^1)^2]} \\\\ &w^3=w^2-\\frac{\\eta2}{\\sigma^2}\\cdot g^2, \\ \\ \\ \\sigma^2=\\sqrt{\\frac{1}{3}[(g^0)^2+(g^1)^2+(g^2)^2]} \\\\ &... \\\\ &w^{t+1}=w^t-\\frac{\\eta^t}{\\sigma^t}\\cdot g^t, \\ \\ \\ \\sigma^t=\\sqrt{\\frac{1}{1+t}\\sum\\limits_{i=0}^{t}(g^i)^2} \\end{split} \\end{equation} \\] \\(g^t\\) \u8868\u793a Loss \u5bf9 w \u7684\u504f\u5fae\u5206 \u7531\u4e8e \\(\\eta^t=\\eta/ \\sqrt{t+1}\\) \u548c \\(\\sigma^t=\\sqrt{\\frac{1}{1+t}\\sum\\limits_{i=0}^{t}(g^i)^2}\\) \u4e2d\u90fd\u6709\u4e00\u4e2a \\(\\sqrt{\\frac{1}{1+t}}\\) \u7684\u56e0\u5b50\uff0c\u4e24\u8005\u76f8\u6d88\uff0c\u5373\u53ef\u5f97\u5230 adagrad \u7684\u6700\u7ec8\u8868\u8fbe\u5f0f\uff1a $$ w^{t+1}=w^t-\\frac{\\eta}{\\sqrt{\\sum\\limits_{i=0}^t(g^i)^2}}\\cdot g^t $$ Adagrad \u7684 contradiction \u89e3\u91ca \u6211\u4eec\u5728\u505a gradient descent \u7684\u65f6\u5019\uff0c\u5e0c\u671b\u7684\u662f\u5f53\u68af\u5ea6\u503c\u5373\u5fae\u5206\u503c \\(g^t\\) \u8d8a\u5927\u7684\u65f6\u5019\u66f4\u65b0\u7684\u6b65\u4f10\u8981\u66f4\u5927\u4e00\u4e9b\uff0c\u4f46\u662f Adagrad \u7684\u8868\u8fbe\u5f0f\u4e2d\uff0c\u5206\u6bcd\u8868\u793a\u68af\u5ea6\u8d8a\u5927\u6b65\u4f10\u8d8a\u5c0f\uff0c\u5206\u5b50\u5374\u8868\u793a\u68af\u5ea6\u8d8a\u5927\u6b65\u4f10\u8d8a\u5927\uff0c\u4e24\u8005\u4f3c\u4e4e\u76f8\u4e92\u77db\u76fe \u5728\u4e00\u4e9b paper \u91cc\u662f\u8fd9\u6837\u89e3\u91ca\u7684\uff1aAdagrad \u8981\u8003\u8651\u7684\u662f\uff0c\u8fd9\u4e2a gradient \u6709\u591a surprise\uff0c\u5373\u53cd\u5dee\u6709\u591a\u5927\uff0c\u5047\u8bbe t=4 \u7684\u65f6\u5019 \\(g^4\\) \u4e0e\u524d\u9762\u7684 gradient \u53cd\u5dee\u7279\u522b\u5927\uff0c\u90a3\u4e48 \\(g^t\\) \u4e0e \\(\\sqrt{\\frac{1}{t+1}\\sum\\limits_{i=0}^t(g^i)^2}\\) \u4e4b\u95f4\u7684\u5927\u5c0f\u53cd\u5dee\u5c31\u4f1a\u6bd4\u8f83\u5927\uff0c\u5b83\u4eec\u7684\u5546\u5c31\u4f1a\u628a\u8fd9\u4e00\u53cd\u5dee\u6548\u679c\u4f53\u73b0\u51fa\u6765 gradient \u8d8a\u5927\uff0c\u79bb\u6700\u4f4e\u70b9\u8d8a\u8fdc\u8fd9\u4ef6\u4e8b\u60c5\u5728\u6709\u591a\u4e2a\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u662f\u4e0d\u4e00\u5b9a\u6210\u7acb\u7684 \u5b9e\u9645\u4e0a\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u4e8c\u6b21\u51fd\u6570 \\(y=ax^2+bx+c\\) \u6765\u8bf4\uff0c\u6700\u5c0f\u503c\u70b9\u7684 \\(x=-\\frac{b}{2a}\\) \uff0c\u800c\u5bf9\u4e8e\u4efb\u610f\u4e00\u70b9 \\(x_0\\) \uff0c\u5b83\u8fc8\u51fa\u6700\u597d\u7684\u6b65\u4f10\u957f\u5ea6\u662f \\(|x_0+\\frac{b}{2a}|=|\\frac{2ax_0+b}{2a}|\\) (\u8fd9\u6837\u5c31\u4e00\u6b65\u8fc8\u5230\u6700\u5c0f\u503c\u70b9\u4e86)\uff0c\u8054\u7cfb\u8be5\u51fd\u6570\u7684\u4e00\u9636\u548c\u4e8c\u9636\u5bfc\u6570 \\(y'=2ax+b\\) \u3001 \\(y''=2a\\) \uff0c\u53ef\u4ee5\u53d1\u73b0the best step is \\(|\\frac{y'}{y''}|\\) \uff0c\u4e5f\u5c31\u662f\u8bf4\u4ed6\u4e0d\u4ec5\u8ddf\u4e00\u9636\u5bfc\u6570(gradient)\u6709\u5173\uff0c\u8fd8\u8ddf\u4e8c\u9636\u5bfc\u5e08\u6709\u5173\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u6cd5\u91cd\u65b0\u6bd4\u8f83\u4e0a\u9762\u7684a\u548cc\u70b9\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u6bd4\u8f83\u6b63\u786e\u7684\u7b54\u6848 \u518d\u6765\u56de\u987e Adagrad \u7684\u8868\u8fbe\u5f0f\uff1a \\(w^{t+1}=w^t-\\frac{\\eta}{\\sqrt{\\sum\\limits_{i=0}^t(g^i)^2}}\\cdot g^t\\) \\(g^t\\) \u5c31\u662f\u4e00\u6b21\u5fae\u5206\uff0c\u800c\u5206\u6bcd\u4e2d\u7684 \\(\\sum\\limits_{i=0}^t(g^i)^2\\) \u53cd\u6620\u4e86\u4e8c\u6b21\u5fae\u5206\u7684\u5927\u5c0f\uff0c\u6240\u4ee5 Adagrad \u60f3\u8981\u505a\u7684\u4e8b\u60c5\u5c31\u662f\uff0c\u5728\u4e0d\u589e\u52a0\u4efb\u4f55\u989d\u5916\u8fd0\u7b97\u7684\u524d\u63d0\u4e0b\uff0c\u60f3\u529e\u6cd5\u53bb\u4f30\u6d4b\u4e8c\u6b21\u5fae\u5206\u7684\u503c Stochastic Gradicent Descent \u00b6 \u968f\u673a\u68af\u5ea6\u4e0b\u964d\u7684\u65b9\u6cd5\u53ef\u4ee5\u8ba9\u8bad\u7ec3\u66f4\u5feb\u901f\uff0c\u4f20\u7edf\u7684 gradient descent \u7684\u601d\u8def\u662f\u770b\u5b8c\u6240\u6709\u7684\u6837\u672c\u70b9\u4e4b\u540e\u518d\u6784\u5efa loss function\uff0c\u7136\u540e\u53bb update \u53c2\u6570\uff1b\u800c stochastic gradient descent \u7684\u505a\u6cd5\u662f\uff0c\u770b\u5230\u4e00\u4e2a\u6837\u672c\u70b9\u5c31 update \u4e00\u6b21\uff0c\u56e0\u6b64\u5b83\u7684 loss function \u4e0d\u662f\u6240\u6709\u6837\u672c\u70b9\u7684 error \u5e73\u65b9\u548c\uff0c\u800c\u662f\u8fd9\u4e2a\u968f\u673a\u6837\u672c\u70b9\u7684 error \u5e73\u65b9 Feature Scaling \u00b6 \u7279\u5f81\u7f29\u653e\uff0c\u5f53\u591a\u4e2a\u7279\u5f81\u7684\u5206\u5e03\u8303\u56f4\u5f88\u4e0d\u4e00\u6837\u65f6\uff0c\u6700\u597d\u5c06\u8fd9\u4e9b\u4e0d\u540c feature \u7684\u8303\u56f4\u7f29\u653e\u6210\u4e00\u6837\uff0c\u5373\u5c06\u7279\u5f81\u7684\u6307\u6807\u6807\u51c6\u5316 \u5982\u4f55\u505a feature scaling \u5047\u8bbe\u6709 R \u4e2a example (\u4e0a\u6807i\u8868\u793a\u7b2ci\u4e2a\u6837\u672c\u70b9)\uff0c \\(x^1,x^2,x^3,...,x^r,...x^R\\) \uff0c\u6bcf\u4e00\u7b14 example\uff0c\u5b83\u91cc\u9762\u90fd\u6709\u4e00\u7ec4 feature (\u4e0b\u6807j\u8868\u793a\u8be5\u6837\u672c\u70b9\u7684\u7b2cj\u4e2a\u7279\u5f81) \u5bf9\u6bcf\u4e00\u4e2a \\(demension_i\\) \uff0c\u90fd\u53bb\u7b97\u51fa\u5b83\u7684\u5e73\u5747\u503c \\(mean=m_i\\) \uff0c\u4ee5\u53ca\u6807\u51c6\u5dee \\(standard\\ deviation=\\sigma_i\\) \u5bf9\u7b2c r \u4e2a example \u7684\u7b2c i \u4e2a component\uff0c\u51cf\u6389\u5747\u503c\uff0c\u9664\u4ee5\u6807\u51c6\u5dee\uff0c\u5373 \\(x_i^r=\\frac{x_i^r-m_i}{\\sigma_i}\\) \uff0c\u5373\u628a\u6bcf\u4e00\u4e2a\u53c2\u6570\u5316\u6210\u6807\u51c6\u7684\u6b63\u6001\u5206\u5e03 \u5bf9gradient decent\u7684\u5e2e\u52a9 \u5e2e\u52a9\u6211\u4eec\u66f4\u597d\u7684 update \u53c2\u6570 Bias and Variance \u00b6 \u6bd4\u8f83\u7b80\u5355\u7684model\uff0cvariance\u6bd4\u8f83\u5c0f\uff0cbias\u6bd4\u8f83\u5927\uff0c\u751a\u81f3\u5b83\u7684\u8303\u56f4\u6ca1\u6709\u5305\u542b\u771f\u6b63\u7684 target \u800c\u6bd4\u8f83\u590d\u6742\u7684model\uff0cbias\u6bd4\u8f83\u5c0f\uff0cvariance\u6bd4\u8f83\u5927 \u5fc5\u987b\u8981\u77e5\u9053\u81ea\u5df1\u7684 error \u4e3b\u8981\u6765\u81ea\u4e8e\u54ea\u91cc\uff0c\u73b0\u5728\u7684\u95ee\u9898\u662f bias \u5927\uff0c\u8fd8\u662f variance \u5927\uff1f \u5982\u679c model \u6ca1\u6709\u529e\u6cd5 fit training data \u7684 examples\uff0c\u4ee3\u8868 bias \u6bd4\u8f83\u5927\uff0c\u8fd9\u65f6\u662f underfitting \u5982\u679c model \u53ef\u4ee5 fit training data\uff0c\u5728 training data \u4e0a\u5f97\u5230\u5c0f\u7684 error\uff0c\u4f46\u662f\u5728 testing data \u4e0a\uff0c\u5374\u5f97\u5230\u4e00\u4e2a\u5927\u7684 error\uff0c\u4ee3\u8868 variance \u6bd4\u8f83\u5927\uff0c\u8fd9\u65f6\u662f overfitting \u5982\u4f55\u5904\u7406 bias \u5927 or variance \u5927\u7684\u60c5\u51b5\u5462\uff1f \u00b6 bias \u6bd4\u8f83\u5927 redesign\uff0c\u91cd\u65b0\u8bbe\u8ba1\u4f60\u7684 model \u589e\u52a0\u66f4\u591a\u7684 features \u4f5c\u4e3a model \u7684 input \u8f93\u5165\u53d8\u91cf \u6bd4\u5982 pokemon \u7684\u4f8b\u5b50\u91cc\uff0c\u53ea\u8003\u8651\u8fdb\u5316\u524d cp \u503c\u53ef\u80fd\u4e0d\u591f\uff0c\u8fd8\u8981\u8003\u8651 hp \u503c\u3001species \u79cd\u7c7b...\u4f5c\u4e3amodel \u65b0\u7684 input \u53d8\u91cf \u8ba9 model \u53d8\u5f97\u66f4\u590d\u6742\uff0c\u589e\u52a0\u9ad8\u6b21\u9879 \u6bd4\u5982\u539f\u672c\u53ea\u662f linear model\uff0c\u73b0\u5728\u8003\u8651\u589e\u52a0\u4e8c\u6b21\u9879\u3001\u4e09\u6b21\u9879... variance \u6bd4\u8f83\u5927 \u589e\u52a0data \u5982\u679c\u6ca1\u6709\u529e\u6cd5 collect \u66f4\u591a\u7684 data\uff0c\u5176\u5b9e\u6709\u4e00\u62db\uff0c\u6839\u636e\u4f60\u5bf9\u8fd9\u4e2a\u95ee\u9898\u7684\u7406\u89e3\uff0c\u81ea\u5df1\u53bbgenerate \u66f4\u591a\u201c\u5047\u7684\u201d data \u6bd4\u5982\u624b\u5199\u6570\u5b57\u8bc6\u522b\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u4eba\u624b\u5199\u6570\u5b57\u7684\u89d2\u5ea6\u90fd\u4e0d\u4e00\u6837\uff0c\u90a3\u5c31\u628a\u6240\u6709 training data \u91cc\u9762\u7684\u6570\u5b57\u90fd\u5de6\u8f6c15\u00b0\uff0c\u53f3\u8f6c15\u00b0 \u6bd4\u5982\u505a\u706b\u8f66\u7684\u5f71\u50cf\u8fa8\u8bc6\uff0c\u53ea\u6709\u4ece\u5de6\u8fb9\u5f00\u8fc7\u6765\u7684\u706b\u8f66\u5f71\u50cf\u8d44\u6599\uff0c\u6ca1\u6709\u4ece\u53f3\u8fb9\u5f00\u8fc7\u6765\u7684\u706b\u8f66\u5f71\u50cf\u8d44\u6599\uff0c\u8be5\u600e\u4e48\u529e\uff1f\u5b9e\u9645\u4e0a\u53ef\u4ee5\u628a\u6bcf\u5f20\u56fe\u7247\u90fd\u5de6\u53f3\u98a0\u5012\uff0c\u5c31 generate \u51fa\u53f3\u8fb9\u7684\u706b\u8f66\u6570\u636e\u4e86\uff0c\u8fd9\u6837\u5c31\u591a\u4e86\u4e00\u500d data \u51fa\u6765 \u6bd4\u5982\u505a\u8bed\u97f3\u8fa8\u8bc6\u7684\u65f6\u5019\uff0c\u53ea\u6709\u7537\u751f\u8bf4\u7684\u201c\u4f60\u597d\u201d\uff0c\u6ca1\u6709\u5973\u751f\u8bf4\u7684\u201c\u4f60\u597d\u201d\uff0c\u90a3\u5c31\u7528\u7537\u751f\u7684\u58f0\u97f3\u7528\u4e00\u4e2a\u53d8\u58f0\u5668\u628a\u5b83\u8f6c\u5316\u4e00\u4e0b\uff0c\u8fd9\u6837\u7537\u5973\u751f\u7684\u58f0\u97f3\u5c31\u53ef\u4ee5\u4e92\u76f8\u8f6c\u5316\uff0c\u8fd9\u6837 data \u5c31\u53ef\u4ee5\u591a\u51fa\u6765 \u6bd4\u5982\u73b0\u5728\u4f60\u53ea\u6709\u5f55\u97f3\u5ba4\u91cc\u5f55\u4e0b\u7684\u58f0\u97f3\uff0c\u4f46\u662f detection \u5b9e\u9645\u8981\u5728\u771f\u5b9e\u573a\u666f\u4e0b\u4f7f\u7528\u7684\uff0c\u90a3\u4f60\u5c31\u53bb\u771f\u5b9e\u573a\u666f\u4e0b\u5f55\u4e00\u4e9b\u566a\u97f3\u52a0\u5230\u539f\u672c\u7684\u58f0\u97f3\u91cc\uff0c\u5c31\u53ef\u4ee5 generate \u51fa\u7b26\u5408\u6761\u4ef6\u7684 data \u4e86 Regularization(\u6b63\u89c4\u5316) \u5c31\u662f\u5728 loss function \u91cc\u9762\u518d\u52a0\u4e00\u4e2a\u4e0e model \u9ad8\u6b21\u9879\u7cfb\u6570\u76f8\u5173\u7684 term\uff0c\u5b83\u4f1a\u5e0c\u671b\u4f60\u7684 model \u91cc\u9ad8\u6b21\u9879\u7684\u53c2\u6570\u8d8a\u5c0f\u8d8a\u597d\uff0c\u4e5f\u5c31\u662f\u8bf4\u5e0c\u671b\u4f60\u4eca\u5929\u627e\u51fa\u6765\u7684\u66f2\u7ebf\u8d8a\u5e73\u6ed1\u8d8a\u597d\uff1b\u8fd9\u4e2a\u65b0\u52a0\u7684 term\u524d\u9762\u53ef\u4ee5\u6709\u4e00\u4e2a weight\uff0c\u4ee3\u8868\u4f60\u5e0c\u671b\u4f60\u7684\u66f2\u7ebf\u6709\u591a\u5e73\u6ed1 \u52a0\u4e86 regularization \u4ee5\u540e\uff0c\u56e0\u4e3a\u4f60\u5f3a\u8feb\u6240\u6709\u7684\u66f2\u7ebf\u90fd\u8981\u6bd4\u8f83\u5e73\u6ed1\uff0c\u6240\u4ee5\u8fd9\u4e2a\u65f6\u5019\u4e5f\u4f1a\u8ba9\u4f60\u7684variance \u53d8\u5c0f\uff1b\u4f46 regularization \u662f\u53ef\u80fd\u4f1a\u4f24\u5bb3 bias \u7684\uff0c\u56e0\u4e3a\u5b83\u5b9e\u9645\u4e0a\u8c03\u6574\u4e86 function set \u7684 space \u8303\u56f4\uff0c\u53d8\u6210\u5b83\u53ea\u5305\u542b\u90a3\u4e9b\u6bd4\u8f83\u5e73\u6ed1\u7684\u66f2\u7ebf\uff0c\u8fd9\u4e2a\u7f29\u5c0f\u7684 space \u53ef\u80fd\u6ca1\u6709\u5305\u542b\u539f\u5148\u5728\u66f4\u5927 space \u5185\u7684 \\(\\widehat{f}\\) \uff0c\u56e0\u6b64\u4f24\u5bb3\u4e86 bias\uff0c\u6240\u4ee5\u5f53\u4f60\u505a regularization \u7684\u65f6\u5019\uff0c\u9700\u8981\u8c03\u6574 regularization \u7684 weight\uff0c\u5728 variance \u548c bias \u4e4b\u95f4\u53d6\u5f97\u5e73\u8861 \u4e0d\u5e94\u8be5\u505a\u7684\u4e8b \u62ff\u505a\u597d\u7684 model \u901a\u8fc7 testing data \u5f97\u51fa\u7684 error \u6765\u8bc4\u4ef7\u8fd9\u4e2a model\uff0c\u7136\u540e\u89c9\u5f97\u8fd9\u4e2a model \u4e0d\u597d\uff0c\u56de\u53bb\u4fee\u6539\u53c2\u6570 training set \u548c validation set \u00b6 \u628a\u4f60\u7684 training set \u5206\u6210\u4e24\u7ec4\uff1a \u4e00\u7ec4\u662f\u771f\u6b63\u62ff\u6765 training model \u7684\uff0c\u53eb\u505a training set (\u8bad\u7ec3\u96c6) \u53e6\u5916\u4e00\u7ec4\u4e0d\u62ff\u5b83\u6765 training model\uff0c\u800c\u662f\u62ff\u5b83\u6765\u9009 model\uff0c\u53eb\u505a validation set (\u9a8c\u8bc1\u96c6) \u5148\u5728 training set \u4e0a\u627e\u51fa\u6bcf\u4e2a model \u6700\u597d\u7684 function \\(f^*\\) \uff0c\u7136\u540e\u7528 validation set \u6765\u9009\u62e9\u4f60\u7684 model \u5982\u679c\u611f\u89c9\u5206\u6210 2 \u90e8\u5206 training data \u53d8\u5c11\u7684\u8bdd\uff0c\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a\u5df2\u7ecf\u4ece validation \u51b3\u5b9a model3 \u662f\u6700\u597d\u7684model\uff0c\u90a3\u5c31\u5b9a\u4f4f model3 \u4e0d\u53d8 (function\u7684\u8868\u8fbe\u5f0f\u4e0d\u53d8)\uff0c\u7136\u540e\u7528\u5168\u90e8\u7684 data \u5728 model3 \u4e0a\u9762\u518d\u8bad\u7ec3\u4e00\u6b21 (\u4f7f\u7528\u5168\u90e8\u7684 data \u53bb\u66f4\u65b0 model3 \u8868\u8fbe\u5f0f\u7684\u53c2\u6570) \u8fd9\u4e2a\u65f6\u5019\uff0c\u5982\u679c\u4f60\u628a\u8fd9\u4e2a\u8bad\u7ec3\u597d\u7684 model \u7684 \\(f^*\\) apply \u5230 public testing set \u4e0a\u9762\uff0c\u4f60\u53ef\u80fd\u4f1a\u5f97\u5230\u4e00\u4e2a\u5927\u4e8e0.5\u7684 error\uff0c\u867d\u7136\u8fd9\u4e48\u505a\uff0c\u4f60\u5f97\u5230\u7684 error \u8868\u9762\u4e0a\u770b\u8d77\u6765\u662f\u6bd4\u8f83\u5927\u7684\uff0c\u4f46\u662f \u8fd9\u4e2a\u65f6\u5019\u4f60\u5728 public set \u4e0a\u7684 error \u624d\u80fd\u591f\u771f\u6b63\u53cd\u6620\u4f60\u5728 private set \u4e0a\u7684 error \u5982\u4f55\u5212\u5206 training set \u548c validation set\uff1f validation set \u53ef\u80fd\u81ea\u5e26 bias\uff0c\u5bf9\u7ed3\u679c\u4e0d\u5229 N-flod Cross Validation \u5982\u679c\u4f60\u4e0d\u76f8\u4fe1\u67d0\u4e00\u6b21\u5206 train \u548c validation \u7684\u7ed3\u679c\u7684\u8bdd\uff0c\u90a3\u4f60\u5c31\u5206\u5f88\u591a\u79cd\u4e0d\u540c\u7684\u6837\u5b50 \u6bd4\u5982\u8bf4\uff0c\u5982\u679c\u4f60\u505a 3-flod \u7684 validation\uff0c\u610f\u601d\u5c31\u662f\u4f60\u628a training set \u5206\u6210\u4e09\u4efd\uff0c\u4f60\u6bcf\u4e00\u6b21\u62ff\u5176\u4e2d\u4e00\u4efd\u5f53\u505a validation set\uff0c\u53e6\u5916\u4e24\u4efd\u5f53 training \u5206\u522b\u5728\u6bcf\u4e2a\u60c5\u5883\u4e0b\u90fd\u8ba1\u7b97\u4e00\u4e0b3\u4e2amodel \u7684 error\uff0c\u7136\u540e\u8ba1\u7b97\u4e00\u4e0b\u5b83\u7684 average error\uff0c\u9009\u62e9\u4e00\u4e2a error \u6700\u5c0f\u7684 \u7136\u540e\u628a\u7528\u6574\u4e2a\u5b8c\u6574\u7684 training data \u91cd\u65b0\u8bad\u7ec3\u4e00\u904d\u53c2\u6570\uff0c\u518d\u53bb testing data \u4e0a test","title":"Regression"},{"location":"ML/1_Regression/#regression","text":"","title":"Regression"},{"location":"ML/1_Regression/#regression_1","text":"\u5b9a\u4e49\u4e00\u4e2a model \u5373 function set \u5b9a\u4e49\u4e00\u4e2a goodness of function \u635f\u5931\u51fd\u6570\u53bb\u8bc4\u4f30\u8be5 function \u7684\u597d\u574f \u627e\u4e00\u4e2a\u6700\u597d\u7684 function","title":"Regression \u5177\u4f53\u8fc7\u7a0b"},{"location":"ML/1_Regression/#linear-model","text":"Model (function set)\uff1a \\(y=b+w \\cdot X_{cp}\\) \uff0c\u53ef\u4ee5\u6269\u5c55\u4e3a \\(y=b+ \\sum w_ix_i\\) Loss function\uff1a \\(L(f)=L(w,b)=\\sum_{n=1}^{10}(\\widehat{y}^n-(b+w \\cdot x^{n}_{cp}))^2\\)","title":"Linear Model \u7ebf\u6027\u6a21\u578b"},{"location":"ML/1_Regression/#gradient-descent","text":"\u5355\u4e2a\u53c2\u6570\u76f4\u63a5\u6c42\u5fae\u5206\uff0c\u591a\u4e2a\u53c2\u6570\u6c42\u504f\u5fae\u5206 \\[ \\begin{align} L(w,b)=\\sum\\limits_{n=1}^{10}(\\widehat{y}^n-(b+w\\cdot x_{cp}^n))^2 \\\\ \\frac{\\partial L}{\\partial w}=\\sum\\limits_{n=1}^{10}2(\\widehat{y}^n-(b+w\\cdot x_{cp}^n))(-x_{cp}^n) \\\\ \\frac{\\partial L}{\\partial b}=\\sum\\limits_{n=1}^{10}2(\\widehat{y}^n-(b+w\\cdot x_{cp}^n))(-1) \\end{align} \\] \\[ \\begin{align} w^1=w^0-\u03b7\\frac{\\partial L}{\\partial w}|_{w=w^0,b=b^0} \\ \\ \\ \\ \\ \\ \\ \\ \\ b^1=b^0-\u03b7\\frac{\\partial L}{\\partial b}|_{w=w^0,b=b^0} \\\\ w^2=w^1-\u03b7\\frac{\\partial L}{\\partial w}|_{w=w^1,b=b^1} \\ \\ \\ \\ \\ \\ \\ \\ \\ b^2=b^1-\u03b7\\frac{\\partial L}{\\partial b}|_{w=w^1,b=b^1} \\\\ ... \\\\ w^{i+1}=w^{i}-\u03b7\\frac{\\partial L}{\\partial w}|_{w=w^{i},b=b^{i}} \\ \\ \\ \\ \\ \\ \\ \\ \\ b^{i+1}=b^{i}-\u03b7\\frac{\\partial L}{\\partial b}|_{w=w^{i},b=b^{i}} \\\\ if(\\frac{\\partial L}{\\partial w}==0 \\&\\& \\frac{\\partial L}{\\partial b}==0) \\ \\ \\ then \\ \\ stop \\end{align} \\] \u7f3a\u70b9\uff1a\u627e\u5230\u7684\u70b9\u672a\u5fc5\u662f\u6781\u5c0f\u503c\u70b9 # eg: y = b + w * x \u8ba1\u7b97\u68af\u5ea6\u5fae\u5206\u7684\u51fd\u6570 getGrad() def getGrad ( b , w ): # initial b_grad and w_grad b_grad = 0.0 w_grad = 0.0 for i in range ( 10 ): b_grad += ( - 2.0 ) * ( y_data [ i ] - ( b + w * x_data [ i ])) w_grad += ( - 2.0 * x_data [ i ]) * ( y_data [ i ] - ( b + w * x_data [ i ])) return ( b_grad , w_grad )","title":"Gradient Descent \u68af\u5ea6\u4e0b\u964d"},{"location":"ML/1_Regression/#_1","text":"\\((x_{cp})^2\\) \u7684 model \uff1atraining data \u4e2d model \u8d8a\u590d\u6742 error \u4f1a\u8d8a\u4f4e\uff0c\u4f46 testing data \u4e2d error \u4f1a\u53d8\u5927\uff0coverfitting \u8003\u8651\u79cd\u65cf\u3001\u7c7b\u522b\u7684\u5f71\u54cd \\[ \\begin{align} if \\ \\ x_s=Pidgey: \\ \\ \\ \\ \\ \\ \\ y=b_1+w_1\\cdot x_{cp} \\\\ if \\ \\ x_s=Weedle: \\ \\ \\ \\ \\ \\ y=b_2+w_2\\cdot x_{cp} \\\\ if \\ \\ x_s=Caterpie: \\ \\ \\ \\ y=b_3+w_3\\cdot x_{cp} \\\\ if \\ \\ x_s=Eevee: \\ \\ \\ \\ \\ \\ \\ \\ \\ y=b_4+w_4\\cdot x_{cp} \\end{align} \\]","title":"\u975e\u7ebf\u6027\u7684\u6a21\u578b"},{"location":"ML/1_Regression/#regularization-overfitting","text":"\u6b63\u5219\u5316\u89e3\u51b3\u8fc7\u62df\u5408\u95ee\u9898 $$ L=\\sum\\limits_i^n(\\widehat{y}^i-(b+\\sum\\limits_{j}w_jx_j))^2+\\lambda\\sum(w_i)^2 $$ \u5e0c\u671b \\(w_i\\) \u6bd4\u8f83\u5c0f\u800c\u5f97\u5230\u4e00\u4e2a\u5e73\u6ed1\u7684\u66f2\u7ebf\uff0c\u8fd9\u91cc\u7684 \u03bb \u9700\u8981\u6211\u4eec\u624b\u52a8\u53bb\u8c03\u6574\u4ee5\u53d6\u5f97\u6700\u597d\u7684\u503c\uff0c\u4e5f\u53eb weight decay\uff0c\u6743\u91cd\u8870\u51cf","title":"regularization \u89e3\u51b3 overfitting"},{"location":"ML/1_Regression/#adaptive-learning-rates","text":"learning rate \u5927\u4e86\u5c0f\u4e86\u90fd\u4e0d\u597d \u4e00\u4e2a\u7b80\u7b54\u7684\u539f\u5219\uff1alearning rate \u901a\u5e38\u662f\u968f\u7740\u53c2\u6570\u7684 update \u8d8a\u6765\u8d8a\u5c0f\u7684 eg\uff1a \\(\\eta^t=\\eta/ \\sqrt{t+1}\\) \uff08\u7b2c t \u6b21 update\uff09","title":"Adaptive Learning rates"},{"location":"ML/1_Regression/#adagrad","text":"Divide the learning rate of each parameter by the root mean square(\u65b9\u5747\u6839) of its previous derivatives Adagrad \u5c06\u4e0d\u540c\u53c2\u6570\u7684 learning rate \u5206\u5f00\u8003\u8651\uff0cupdate\u5230\u540e\u9762\u901f\u5ea6\u4f1a\u8d8a\u6765\u8d8a\u6162\uff0c\u8fd9\u662fadaptive\u7b97\u6cd5\u4e2d\u6700\u7b80\u5355\u7684\u4e00\u79cd \\[ \\begin{equation} \\begin{split} &Adagrad\\\\ &w^1=w^0-\\frac{\\eta^0}{\\sigma^0}\\cdot g^0, \\ \\ \\ \\sigma^0=\\sqrt{(g^0)^2} \\\\ &w^2=w^1-\\frac{\\eta^1}{\\sigma^1}\\cdot g^1, \\ \\ \\ \\sigma^1=\\sqrt{\\frac{1}{2}[(g^0)^2+(g^1)^2]} \\\\ &w^3=w^2-\\frac{\\eta2}{\\sigma^2}\\cdot g^2, \\ \\ \\ \\sigma^2=\\sqrt{\\frac{1}{3}[(g^0)^2+(g^1)^2+(g^2)^2]} \\\\ &... \\\\ &w^{t+1}=w^t-\\frac{\\eta^t}{\\sigma^t}\\cdot g^t, \\ \\ \\ \\sigma^t=\\sqrt{\\frac{1}{1+t}\\sum\\limits_{i=0}^{t}(g^i)^2} \\end{split} \\end{equation} \\] \\(g^t\\) \u8868\u793a Loss \u5bf9 w \u7684\u504f\u5fae\u5206 \u7531\u4e8e \\(\\eta^t=\\eta/ \\sqrt{t+1}\\) \u548c \\(\\sigma^t=\\sqrt{\\frac{1}{1+t}\\sum\\limits_{i=0}^{t}(g^i)^2}\\) \u4e2d\u90fd\u6709\u4e00\u4e2a \\(\\sqrt{\\frac{1}{1+t}}\\) \u7684\u56e0\u5b50\uff0c\u4e24\u8005\u76f8\u6d88\uff0c\u5373\u53ef\u5f97\u5230 adagrad \u7684\u6700\u7ec8\u8868\u8fbe\u5f0f\uff1a $$ w^{t+1}=w^t-\\frac{\\eta}{\\sqrt{\\sum\\limits_{i=0}^t(g^i)^2}}\\cdot g^t $$ Adagrad \u7684 contradiction \u89e3\u91ca \u6211\u4eec\u5728\u505a gradient descent \u7684\u65f6\u5019\uff0c\u5e0c\u671b\u7684\u662f\u5f53\u68af\u5ea6\u503c\u5373\u5fae\u5206\u503c \\(g^t\\) \u8d8a\u5927\u7684\u65f6\u5019\u66f4\u65b0\u7684\u6b65\u4f10\u8981\u66f4\u5927\u4e00\u4e9b\uff0c\u4f46\u662f Adagrad \u7684\u8868\u8fbe\u5f0f\u4e2d\uff0c\u5206\u6bcd\u8868\u793a\u68af\u5ea6\u8d8a\u5927\u6b65\u4f10\u8d8a\u5c0f\uff0c\u5206\u5b50\u5374\u8868\u793a\u68af\u5ea6\u8d8a\u5927\u6b65\u4f10\u8d8a\u5927\uff0c\u4e24\u8005\u4f3c\u4e4e\u76f8\u4e92\u77db\u76fe \u5728\u4e00\u4e9b paper \u91cc\u662f\u8fd9\u6837\u89e3\u91ca\u7684\uff1aAdagrad \u8981\u8003\u8651\u7684\u662f\uff0c\u8fd9\u4e2a gradient \u6709\u591a surprise\uff0c\u5373\u53cd\u5dee\u6709\u591a\u5927\uff0c\u5047\u8bbe t=4 \u7684\u65f6\u5019 \\(g^4\\) \u4e0e\u524d\u9762\u7684 gradient \u53cd\u5dee\u7279\u522b\u5927\uff0c\u90a3\u4e48 \\(g^t\\) \u4e0e \\(\\sqrt{\\frac{1}{t+1}\\sum\\limits_{i=0}^t(g^i)^2}\\) \u4e4b\u95f4\u7684\u5927\u5c0f\u53cd\u5dee\u5c31\u4f1a\u6bd4\u8f83\u5927\uff0c\u5b83\u4eec\u7684\u5546\u5c31\u4f1a\u628a\u8fd9\u4e00\u53cd\u5dee\u6548\u679c\u4f53\u73b0\u51fa\u6765 gradient \u8d8a\u5927\uff0c\u79bb\u6700\u4f4e\u70b9\u8d8a\u8fdc\u8fd9\u4ef6\u4e8b\u60c5\u5728\u6709\u591a\u4e2a\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u662f\u4e0d\u4e00\u5b9a\u6210\u7acb\u7684 \u5b9e\u9645\u4e0a\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u4e8c\u6b21\u51fd\u6570 \\(y=ax^2+bx+c\\) \u6765\u8bf4\uff0c\u6700\u5c0f\u503c\u70b9\u7684 \\(x=-\\frac{b}{2a}\\) \uff0c\u800c\u5bf9\u4e8e\u4efb\u610f\u4e00\u70b9 \\(x_0\\) \uff0c\u5b83\u8fc8\u51fa\u6700\u597d\u7684\u6b65\u4f10\u957f\u5ea6\u662f \\(|x_0+\\frac{b}{2a}|=|\\frac{2ax_0+b}{2a}|\\) (\u8fd9\u6837\u5c31\u4e00\u6b65\u8fc8\u5230\u6700\u5c0f\u503c\u70b9\u4e86)\uff0c\u8054\u7cfb\u8be5\u51fd\u6570\u7684\u4e00\u9636\u548c\u4e8c\u9636\u5bfc\u6570 \\(y'=2ax+b\\) \u3001 \\(y''=2a\\) \uff0c\u53ef\u4ee5\u53d1\u73b0the best step is \\(|\\frac{y'}{y''}|\\) \uff0c\u4e5f\u5c31\u662f\u8bf4\u4ed6\u4e0d\u4ec5\u8ddf\u4e00\u9636\u5bfc\u6570(gradient)\u6709\u5173\uff0c\u8fd8\u8ddf\u4e8c\u9636\u5bfc\u5e08\u6709\u5173\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u6cd5\u91cd\u65b0\u6bd4\u8f83\u4e0a\u9762\u7684a\u548cc\u70b9\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u6bd4\u8f83\u6b63\u786e\u7684\u7b54\u6848 \u518d\u6765\u56de\u987e Adagrad \u7684\u8868\u8fbe\u5f0f\uff1a \\(w^{t+1}=w^t-\\frac{\\eta}{\\sqrt{\\sum\\limits_{i=0}^t(g^i)^2}}\\cdot g^t\\) \\(g^t\\) \u5c31\u662f\u4e00\u6b21\u5fae\u5206\uff0c\u800c\u5206\u6bcd\u4e2d\u7684 \\(\\sum\\limits_{i=0}^t(g^i)^2\\) \u53cd\u6620\u4e86\u4e8c\u6b21\u5fae\u5206\u7684\u5927\u5c0f\uff0c\u6240\u4ee5 Adagrad \u60f3\u8981\u505a\u7684\u4e8b\u60c5\u5c31\u662f\uff0c\u5728\u4e0d\u589e\u52a0\u4efb\u4f55\u989d\u5916\u8fd0\u7b97\u7684\u524d\u63d0\u4e0b\uff0c\u60f3\u529e\u6cd5\u53bb\u4f30\u6d4b\u4e8c\u6b21\u5fae\u5206\u7684\u503c","title":"Adagrad"},{"location":"ML/1_Regression/#stochastic-gradicent-descent","text":"\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u7684\u65b9\u6cd5\u53ef\u4ee5\u8ba9\u8bad\u7ec3\u66f4\u5feb\u901f\uff0c\u4f20\u7edf\u7684 gradient descent \u7684\u601d\u8def\u662f\u770b\u5b8c\u6240\u6709\u7684\u6837\u672c\u70b9\u4e4b\u540e\u518d\u6784\u5efa loss function\uff0c\u7136\u540e\u53bb update \u53c2\u6570\uff1b\u800c stochastic gradient descent \u7684\u505a\u6cd5\u662f\uff0c\u770b\u5230\u4e00\u4e2a\u6837\u672c\u70b9\u5c31 update \u4e00\u6b21\uff0c\u56e0\u6b64\u5b83\u7684 loss function \u4e0d\u662f\u6240\u6709\u6837\u672c\u70b9\u7684 error \u5e73\u65b9\u548c\uff0c\u800c\u662f\u8fd9\u4e2a\u968f\u673a\u6837\u672c\u70b9\u7684 error \u5e73\u65b9","title":"Stochastic Gradicent Descent"},{"location":"ML/1_Regression/#feature-scaling","text":"\u7279\u5f81\u7f29\u653e\uff0c\u5f53\u591a\u4e2a\u7279\u5f81\u7684\u5206\u5e03\u8303\u56f4\u5f88\u4e0d\u4e00\u6837\u65f6\uff0c\u6700\u597d\u5c06\u8fd9\u4e9b\u4e0d\u540c feature \u7684\u8303\u56f4\u7f29\u653e\u6210\u4e00\u6837\uff0c\u5373\u5c06\u7279\u5f81\u7684\u6307\u6807\u6807\u51c6\u5316 \u5982\u4f55\u505a feature scaling \u5047\u8bbe\u6709 R \u4e2a example (\u4e0a\u6807i\u8868\u793a\u7b2ci\u4e2a\u6837\u672c\u70b9)\uff0c \\(x^1,x^2,x^3,...,x^r,...x^R\\) \uff0c\u6bcf\u4e00\u7b14 example\uff0c\u5b83\u91cc\u9762\u90fd\u6709\u4e00\u7ec4 feature (\u4e0b\u6807j\u8868\u793a\u8be5\u6837\u672c\u70b9\u7684\u7b2cj\u4e2a\u7279\u5f81) \u5bf9\u6bcf\u4e00\u4e2a \\(demension_i\\) \uff0c\u90fd\u53bb\u7b97\u51fa\u5b83\u7684\u5e73\u5747\u503c \\(mean=m_i\\) \uff0c\u4ee5\u53ca\u6807\u51c6\u5dee \\(standard\\ deviation=\\sigma_i\\) \u5bf9\u7b2c r \u4e2a example \u7684\u7b2c i \u4e2a component\uff0c\u51cf\u6389\u5747\u503c\uff0c\u9664\u4ee5\u6807\u51c6\u5dee\uff0c\u5373 \\(x_i^r=\\frac{x_i^r-m_i}{\\sigma_i}\\) \uff0c\u5373\u628a\u6bcf\u4e00\u4e2a\u53c2\u6570\u5316\u6210\u6807\u51c6\u7684\u6b63\u6001\u5206\u5e03 \u5bf9gradient decent\u7684\u5e2e\u52a9 \u5e2e\u52a9\u6211\u4eec\u66f4\u597d\u7684 update \u53c2\u6570","title":"Feature Scaling"},{"location":"ML/1_Regression/#bias-and-variance","text":"\u6bd4\u8f83\u7b80\u5355\u7684model\uff0cvariance\u6bd4\u8f83\u5c0f\uff0cbias\u6bd4\u8f83\u5927\uff0c\u751a\u81f3\u5b83\u7684\u8303\u56f4\u6ca1\u6709\u5305\u542b\u771f\u6b63\u7684 target \u800c\u6bd4\u8f83\u590d\u6742\u7684model\uff0cbias\u6bd4\u8f83\u5c0f\uff0cvariance\u6bd4\u8f83\u5927 \u5fc5\u987b\u8981\u77e5\u9053\u81ea\u5df1\u7684 error \u4e3b\u8981\u6765\u81ea\u4e8e\u54ea\u91cc\uff0c\u73b0\u5728\u7684\u95ee\u9898\u662f bias \u5927\uff0c\u8fd8\u662f variance \u5927\uff1f \u5982\u679c model \u6ca1\u6709\u529e\u6cd5 fit training data \u7684 examples\uff0c\u4ee3\u8868 bias \u6bd4\u8f83\u5927\uff0c\u8fd9\u65f6\u662f underfitting \u5982\u679c model \u53ef\u4ee5 fit training data\uff0c\u5728 training data \u4e0a\u5f97\u5230\u5c0f\u7684 error\uff0c\u4f46\u662f\u5728 testing data \u4e0a\uff0c\u5374\u5f97\u5230\u4e00\u4e2a\u5927\u7684 error\uff0c\u4ee3\u8868 variance \u6bd4\u8f83\u5927\uff0c\u8fd9\u65f6\u662f overfitting","title":"Bias and Variance"},{"location":"ML/1_Regression/#bias-or-variance","text":"bias \u6bd4\u8f83\u5927 redesign\uff0c\u91cd\u65b0\u8bbe\u8ba1\u4f60\u7684 model \u589e\u52a0\u66f4\u591a\u7684 features \u4f5c\u4e3a model \u7684 input \u8f93\u5165\u53d8\u91cf \u6bd4\u5982 pokemon \u7684\u4f8b\u5b50\u91cc\uff0c\u53ea\u8003\u8651\u8fdb\u5316\u524d cp \u503c\u53ef\u80fd\u4e0d\u591f\uff0c\u8fd8\u8981\u8003\u8651 hp \u503c\u3001species \u79cd\u7c7b...\u4f5c\u4e3amodel \u65b0\u7684 input \u53d8\u91cf \u8ba9 model \u53d8\u5f97\u66f4\u590d\u6742\uff0c\u589e\u52a0\u9ad8\u6b21\u9879 \u6bd4\u5982\u539f\u672c\u53ea\u662f linear model\uff0c\u73b0\u5728\u8003\u8651\u589e\u52a0\u4e8c\u6b21\u9879\u3001\u4e09\u6b21\u9879... variance \u6bd4\u8f83\u5927 \u589e\u52a0data \u5982\u679c\u6ca1\u6709\u529e\u6cd5 collect \u66f4\u591a\u7684 data\uff0c\u5176\u5b9e\u6709\u4e00\u62db\uff0c\u6839\u636e\u4f60\u5bf9\u8fd9\u4e2a\u95ee\u9898\u7684\u7406\u89e3\uff0c\u81ea\u5df1\u53bbgenerate \u66f4\u591a\u201c\u5047\u7684\u201d data \u6bd4\u5982\u624b\u5199\u6570\u5b57\u8bc6\u522b\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u4eba\u624b\u5199\u6570\u5b57\u7684\u89d2\u5ea6\u90fd\u4e0d\u4e00\u6837\uff0c\u90a3\u5c31\u628a\u6240\u6709 training data \u91cc\u9762\u7684\u6570\u5b57\u90fd\u5de6\u8f6c15\u00b0\uff0c\u53f3\u8f6c15\u00b0 \u6bd4\u5982\u505a\u706b\u8f66\u7684\u5f71\u50cf\u8fa8\u8bc6\uff0c\u53ea\u6709\u4ece\u5de6\u8fb9\u5f00\u8fc7\u6765\u7684\u706b\u8f66\u5f71\u50cf\u8d44\u6599\uff0c\u6ca1\u6709\u4ece\u53f3\u8fb9\u5f00\u8fc7\u6765\u7684\u706b\u8f66\u5f71\u50cf\u8d44\u6599\uff0c\u8be5\u600e\u4e48\u529e\uff1f\u5b9e\u9645\u4e0a\u53ef\u4ee5\u628a\u6bcf\u5f20\u56fe\u7247\u90fd\u5de6\u53f3\u98a0\u5012\uff0c\u5c31 generate \u51fa\u53f3\u8fb9\u7684\u706b\u8f66\u6570\u636e\u4e86\uff0c\u8fd9\u6837\u5c31\u591a\u4e86\u4e00\u500d data \u51fa\u6765 \u6bd4\u5982\u505a\u8bed\u97f3\u8fa8\u8bc6\u7684\u65f6\u5019\uff0c\u53ea\u6709\u7537\u751f\u8bf4\u7684\u201c\u4f60\u597d\u201d\uff0c\u6ca1\u6709\u5973\u751f\u8bf4\u7684\u201c\u4f60\u597d\u201d\uff0c\u90a3\u5c31\u7528\u7537\u751f\u7684\u58f0\u97f3\u7528\u4e00\u4e2a\u53d8\u58f0\u5668\u628a\u5b83\u8f6c\u5316\u4e00\u4e0b\uff0c\u8fd9\u6837\u7537\u5973\u751f\u7684\u58f0\u97f3\u5c31\u53ef\u4ee5\u4e92\u76f8\u8f6c\u5316\uff0c\u8fd9\u6837 data \u5c31\u53ef\u4ee5\u591a\u51fa\u6765 \u6bd4\u5982\u73b0\u5728\u4f60\u53ea\u6709\u5f55\u97f3\u5ba4\u91cc\u5f55\u4e0b\u7684\u58f0\u97f3\uff0c\u4f46\u662f detection \u5b9e\u9645\u8981\u5728\u771f\u5b9e\u573a\u666f\u4e0b\u4f7f\u7528\u7684\uff0c\u90a3\u4f60\u5c31\u53bb\u771f\u5b9e\u573a\u666f\u4e0b\u5f55\u4e00\u4e9b\u566a\u97f3\u52a0\u5230\u539f\u672c\u7684\u58f0\u97f3\u91cc\uff0c\u5c31\u53ef\u4ee5 generate \u51fa\u7b26\u5408\u6761\u4ef6\u7684 data \u4e86 Regularization(\u6b63\u89c4\u5316) \u5c31\u662f\u5728 loss function \u91cc\u9762\u518d\u52a0\u4e00\u4e2a\u4e0e model \u9ad8\u6b21\u9879\u7cfb\u6570\u76f8\u5173\u7684 term\uff0c\u5b83\u4f1a\u5e0c\u671b\u4f60\u7684 model \u91cc\u9ad8\u6b21\u9879\u7684\u53c2\u6570\u8d8a\u5c0f\u8d8a\u597d\uff0c\u4e5f\u5c31\u662f\u8bf4\u5e0c\u671b\u4f60\u4eca\u5929\u627e\u51fa\u6765\u7684\u66f2\u7ebf\u8d8a\u5e73\u6ed1\u8d8a\u597d\uff1b\u8fd9\u4e2a\u65b0\u52a0\u7684 term\u524d\u9762\u53ef\u4ee5\u6709\u4e00\u4e2a weight\uff0c\u4ee3\u8868\u4f60\u5e0c\u671b\u4f60\u7684\u66f2\u7ebf\u6709\u591a\u5e73\u6ed1 \u52a0\u4e86 regularization \u4ee5\u540e\uff0c\u56e0\u4e3a\u4f60\u5f3a\u8feb\u6240\u6709\u7684\u66f2\u7ebf\u90fd\u8981\u6bd4\u8f83\u5e73\u6ed1\uff0c\u6240\u4ee5\u8fd9\u4e2a\u65f6\u5019\u4e5f\u4f1a\u8ba9\u4f60\u7684variance \u53d8\u5c0f\uff1b\u4f46 regularization \u662f\u53ef\u80fd\u4f1a\u4f24\u5bb3 bias \u7684\uff0c\u56e0\u4e3a\u5b83\u5b9e\u9645\u4e0a\u8c03\u6574\u4e86 function set \u7684 space \u8303\u56f4\uff0c\u53d8\u6210\u5b83\u53ea\u5305\u542b\u90a3\u4e9b\u6bd4\u8f83\u5e73\u6ed1\u7684\u66f2\u7ebf\uff0c\u8fd9\u4e2a\u7f29\u5c0f\u7684 space \u53ef\u80fd\u6ca1\u6709\u5305\u542b\u539f\u5148\u5728\u66f4\u5927 space \u5185\u7684 \\(\\widehat{f}\\) \uff0c\u56e0\u6b64\u4f24\u5bb3\u4e86 bias\uff0c\u6240\u4ee5\u5f53\u4f60\u505a regularization \u7684\u65f6\u5019\uff0c\u9700\u8981\u8c03\u6574 regularization \u7684 weight\uff0c\u5728 variance \u548c bias \u4e4b\u95f4\u53d6\u5f97\u5e73\u8861 \u4e0d\u5e94\u8be5\u505a\u7684\u4e8b \u62ff\u505a\u597d\u7684 model \u901a\u8fc7 testing data \u5f97\u51fa\u7684 error \u6765\u8bc4\u4ef7\u8fd9\u4e2a model\uff0c\u7136\u540e\u89c9\u5f97\u8fd9\u4e2a model \u4e0d\u597d\uff0c\u56de\u53bb\u4fee\u6539\u53c2\u6570","title":"\u5982\u4f55\u5904\u7406 bias \u5927 or variance \u5927\u7684\u60c5\u51b5\u5462\uff1f"},{"location":"ML/1_Regression/#training-set-validation-set","text":"\u628a\u4f60\u7684 training set \u5206\u6210\u4e24\u7ec4\uff1a \u4e00\u7ec4\u662f\u771f\u6b63\u62ff\u6765 training model \u7684\uff0c\u53eb\u505a training set (\u8bad\u7ec3\u96c6) \u53e6\u5916\u4e00\u7ec4\u4e0d\u62ff\u5b83\u6765 training model\uff0c\u800c\u662f\u62ff\u5b83\u6765\u9009 model\uff0c\u53eb\u505a validation set (\u9a8c\u8bc1\u96c6) \u5148\u5728 training set \u4e0a\u627e\u51fa\u6bcf\u4e2a model \u6700\u597d\u7684 function \\(f^*\\) \uff0c\u7136\u540e\u7528 validation set \u6765\u9009\u62e9\u4f60\u7684 model \u5982\u679c\u611f\u89c9\u5206\u6210 2 \u90e8\u5206 training data \u53d8\u5c11\u7684\u8bdd\uff0c\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a\u5df2\u7ecf\u4ece validation \u51b3\u5b9a model3 \u662f\u6700\u597d\u7684model\uff0c\u90a3\u5c31\u5b9a\u4f4f model3 \u4e0d\u53d8 (function\u7684\u8868\u8fbe\u5f0f\u4e0d\u53d8)\uff0c\u7136\u540e\u7528\u5168\u90e8\u7684 data \u5728 model3 \u4e0a\u9762\u518d\u8bad\u7ec3\u4e00\u6b21 (\u4f7f\u7528\u5168\u90e8\u7684 data \u53bb\u66f4\u65b0 model3 \u8868\u8fbe\u5f0f\u7684\u53c2\u6570) \u8fd9\u4e2a\u65f6\u5019\uff0c\u5982\u679c\u4f60\u628a\u8fd9\u4e2a\u8bad\u7ec3\u597d\u7684 model \u7684 \\(f^*\\) apply \u5230 public testing set \u4e0a\u9762\uff0c\u4f60\u53ef\u80fd\u4f1a\u5f97\u5230\u4e00\u4e2a\u5927\u4e8e0.5\u7684 error\uff0c\u867d\u7136\u8fd9\u4e48\u505a\uff0c\u4f60\u5f97\u5230\u7684 error \u8868\u9762\u4e0a\u770b\u8d77\u6765\u662f\u6bd4\u8f83\u5927\u7684\uff0c\u4f46\u662f \u8fd9\u4e2a\u65f6\u5019\u4f60\u5728 public set \u4e0a\u7684 error \u624d\u80fd\u591f\u771f\u6b63\u53cd\u6620\u4f60\u5728 private set \u4e0a\u7684 error \u5982\u4f55\u5212\u5206 training set \u548c validation set\uff1f validation set \u53ef\u80fd\u81ea\u5e26 bias\uff0c\u5bf9\u7ed3\u679c\u4e0d\u5229 N-flod Cross Validation \u5982\u679c\u4f60\u4e0d\u76f8\u4fe1\u67d0\u4e00\u6b21\u5206 train \u548c validation \u7684\u7ed3\u679c\u7684\u8bdd\uff0c\u90a3\u4f60\u5c31\u5206\u5f88\u591a\u79cd\u4e0d\u540c\u7684\u6837\u5b50 \u6bd4\u5982\u8bf4\uff0c\u5982\u679c\u4f60\u505a 3-flod \u7684 validation\uff0c\u610f\u601d\u5c31\u662f\u4f60\u628a training set \u5206\u6210\u4e09\u4efd\uff0c\u4f60\u6bcf\u4e00\u6b21\u62ff\u5176\u4e2d\u4e00\u4efd\u5f53\u505a validation set\uff0c\u53e6\u5916\u4e24\u4efd\u5f53 training \u5206\u522b\u5728\u6bcf\u4e2a\u60c5\u5883\u4e0b\u90fd\u8ba1\u7b97\u4e00\u4e0b3\u4e2amodel \u7684 error\uff0c\u7136\u540e\u8ba1\u7b97\u4e00\u4e0b\u5b83\u7684 average error\uff0c\u9009\u62e9\u4e00\u4e2a error \u6700\u5c0f\u7684 \u7136\u540e\u628a\u7528\u6574\u4e2a\u5b8c\u6574\u7684 training data \u91cd\u65b0\u8bad\u7ec3\u4e00\u904d\u53c2\u6570\uff0c\u518d\u53bb testing data \u4e0a test","title":"training set \u548c validation set"},{"location":"ML/2_Classification/","text":"Classification \u00b6 \u6982\u8ff0 \u00b6 \u5206\u7c7b\uff0cfunction \u7684\u7ed3\u679c\u662f\u79bb\u6563\u578b\u7684\uff0c\u5fc5\u7136\u5c5e\u4e8e\u7ed3\u679c\u96c6\u4e2d\u7684\u67d0\u4e00\u4e2a\uff0c\u6bd4\u5982\u5b9d\u53ef\u68a6\u7684\u5c5e\u6027\uff08\u5f53\u7136\u5b9d\u53ef\u68a6\u6709\u591a\u5c5e\u6027\uff09 Regression\uff1f \u00b6 Regression \u5e76\u4e0d\u9002\u7528\u4e8e output \u662f\u79bb\u6563\u7684\u51fd\u6570 \u800c\u4e14\u9700\u8981\u6ce8\u610f\u7684\u662f\u5982\u679c\u662f \u591a\u5143\u5206\u7c7b\uff0c\u4e0d\u80fd\u628a class1's target \u8bbe\u4e3a 1\uff0c class2's target \u8bbe\u4e3a 2\uff0cclass3's target \u8bbe\u4e3a 3\uff0c\u56e0\u4e3a\u8fd9\u6837\u505a\u5c31\u9ed8\u8ba4 class1 \u548c class2 \u76f8\u6bd4 \u548c class3 \u66f4\u52a0\u63a5\u8fd1 Ideal Alternatives \u00b6 Function Model\uff1afunction f(x) \u91cc\u9762\u8bbe\u53e6\u5916\u4e00\u4e2afunction g(x) \\[ x\\Rightarrow f(x)= \\begin{cases} g(x)>0&output=class1 \\\\ g(x)<0&output=class2 \\end{cases} \\] \u4e3a\u4ec0\u4e48\u53c8\u80fd\u7528\u6570\u503c\u8868\u793a class \u4e86\uff1f \u56e0\u4e3a\u90a3\u662f\u9488\u5bf9 Regression \u7684 Loss function \u800c\u8a00\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u91cd\u65b0\u5b9a\u4e49\u4e00\u4e2a Loss Function $$ Loss=\\sum\\limits_n\\delta(f(x^n)\u2260\\hat{y}^n) $$ \u4e0d\u8fc7\u8fd9\u4e2a Loss Function \u65e0\u6cd5\u5fae\u5206\uff0c\u4e5f\u6709 Perceptron\u3001SVM \u8fd9\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u7528\uff0c\u4f46\u8fd9\u91cc\u5148\u7528\u53e6\u5916\u4e00\u4e2asolution\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898 Generative model \u00b6 \u57fa\u4e8e\u6982\u7387\u8bba\u4e2d\u7684 \u8d1d\u53f6\u65af\u516c\u5f0f \uff1a \\(P(A|B)=\\frac{P(AB)}{P(B)}\\) \u5728\u5df2\u77e5 input x \u7684\u60c5\u51b5\u4e0b\u8ba1\u7b97 \\(P(C_1|x)\\) \u548c \\(P(C_2|x)\\) $$ P(C_1|x)=\\frac{P(C_1)P(x|C_1)}{P(C_1)P(x|C_1 )+P(C_2)P(x|C_2)} $$ \\[ P(C_2|x)=\\frac{P(C_2)P(x|C_2)}{P(C_1)P(x|C_1)+P(C_2)P(x|C_2)} \\] Prior \u00b6 \u6a21\u578b\u9700\u8981\u5f97\u5230\u56db\u4e2a\u503c \\(P(C_1) \\ P(C_2) \\ P(x|C_1) \\ P(x|C_2)\\) \\(P(C_1) \\ P(C_2)\\) \uff1a \u7b97\u51fa training data \u4e2d \u5c5e\u4e8e class1 \u548c class2 \u5404\u81ea\u5360\u603b\u6837\u672c\u91cf\u7684\u6bd4\u4f8b\u5373\u53ef \\(P(x|C_1) \\ P(x|C_2)\\) \uff1a \u591a\u7ef4\u9ad8\u65af\u5206\u5e03\uff1a\u671f\u671b \\(u\\) \u548c \u534f\u65b9\u5dee \\(\\Sigma\\) \u90fd\u662f matrix $$ f_{u,\\Sigma}(x)=\\frac{1}{(2\\pi)^{\\frac{D}{2}}}\\frac{1}{|\\Sigma|^{\\frac{1}{2}}}exp{-\\frac{1}{2}(x-u)^T\\Sigma^{-1}(x-u)} $$ \u5229\u7528\u6781\u5927\u4f3c\u7136\u4f30\u8ba1 \\(u^*,\\Sigma^*=\\arg \\max\\limits_{u,\\Sigma} L(u,\\Sigma)\\) \u53bb\u4f30\u8ba1 \\(u\uff0c\\Sigma\\) \u7684\u53d6\u503c\uff0c\u8fd9\u91cc\u7684\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u7684\u503c\u5c31\u662f\u8bc4\u4ef7\u4e86\u8fd9\u7ec4\u53c2\u6570\u7684\u597d\u574f\uff0c\u6211\u4eec\u8981\u627e\u5230\u4f7f\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u503c\u6700\u5927\u7684\u4e00\u7ec4\u53c2\u6570\uff0c\u5176\u5b9e\u5c31\u662f\u6240\u6709\u6837\u672c\u70b9\u7684\u5747\u503c\u548c\u534f\u65b9\u5dee \u6ce8\uff1a\u6570\u5b66\u671f\u671b\uff1a \\(u=E(X)\\) \uff0c\u534f\u65b9\u5dee\uff1a \\(\\Sigma=cov(X,Y)=E[(X-u)(Y-u)^T]\\) \uff0c\u5bf9\u540c\u4e00\u4e2a\u53d8\u91cf\u6765\u8bf4\uff0c\u534f\u65b9\u5dee\u4e3a \\(cov(X,X)=E[(X-u)(X-u)^T]=D(X)\\) \u5f97\u5230 \\(x|C_1 \\ x|C_2\\) \u7684\u9ad8\u65af\u5206\u5e03\u540e\u628a \\(x\\) \u4ee3\u5165\u5373\u53ef\u5f97\u5230 \\(P(x|C_1) \\ P(x|C_2)\\) Do Classification \u00b6 \\[ \\begin{align} if \\ P(C_1|x) > 0.5 \\Rightarrow x \\ belongs \\ class1 \\\\ if \\ P(C_2|x) > 0.5 \\Rightarrow x \\ belongs \\ class2 \\end{align} \\] \u5728\u53ea\u8003\u8651\u5b9d\u53ef\u68a6\u7684 Defense \u548c SP Denfense \u65f6\u8fd9\u6837\u505a\u51fa\u6765\u7684\u6548\u679c\u7684\u51fa\u6765\u7684\u51c6\u786e\u7387\u5e76\u4e0d\u9ad8\uff0c\u5373\u4f7f\u8003\u8651\u4e866\u4e2a features \u51c6\u786e\u7387\u4e5f\u53ea\u6709 64%\uff0c\u8868\u73b0\u6bd4\u8f83\u7cdf\u7cd5 Modifying Model \u00b6 \u4e0a\u9762\u7684 model \u5176\u5b9e\u5e76\u4e0d\u5e38\u89c1\uff0c\u56e0\u4e3a\u4e00\u822c\u4e0d\u4f1a\u6bcf\u4e2a Gaussion \u90fd\u6709\u81ea\u5df1\u7684 mean \u548c covariance\uff0c\u6bd4\u5982\u6211\u4eec\u7684 class1 \u7528\u7684\u662f \\(u_1\\) \u548c \\(\\Sigma_1\\) \uff0cclass2 \u7528\u7684\u662f \\(u_2\\) \u548c \\(\\Sigma_2\\) \uff0c\u6bd4\u8f83\u5e38\u89c1\u7684\u505a\u6cd5\u662f\uff0c \u4e0d\u540c\u7684 class \u53ef\u4ee5 share \u540c\u4e00\u4e2a cocovariance matrix \u5176\u5b9e variance \u662f\u8ddf input \u7684 feature size \u7684\u5e73\u65b9\u6210\u6b63\u6bd4\u7684\uff0c\u6240\u4ee5\u5f53 feature \u7684\u6570\u91cf\u5f88\u5927\u7684\u65f6\u5019\uff0c \\(\\Sigma\\) \u5927\u5c0f\u7684\u589e\u957f\u662f\u53ef\u4ee5\u975e\u5e38\u5feb\u7684\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7ed9\u4e0d\u540c\u7684 Gaussian \u4ee5\u4e0d\u540c\u7684 covariance matrix\uff0c\u4f1a\u9020\u6210model \u7684\u53c2\u6570\u592a\u591a\uff0c\u800c\u53c2\u6570\u591a\u4f1a\u5bfc\u81f4\u8be5 model \u7684 variance \u8fc7\u5927\uff0c\u51fa\u73b0 overfitting \u7684\u73b0\u8c61\uff0c\u56e0\u6b64\u5bf9\u4e0d\u540c\u7684 class \u4f7f\u7528\u540c\u4e00\u4e2a covariance matrix\uff0c\u53ef\u4ee5\u6709\u6548\u51cf\u5c11\u53c2\u6570 \u6b64\u65f6\u5c31\u628a \\(u_1\\) \u3001 \\(u_2\\) \u548c\u5171\u540c\u7684 \\(\\Sigma\\) \u4e00\u8d77\u53bb\u5408\u6210\u4e00\u4e2a\u6781\u5927\u4f3c\u7136\u51fd\u6570\uff0c\u6b64\u65f6\u4f1a\u53d1\u73b0\uff0c\u5f97\u5230\u7684 \\(u_1\\) \u548c \\(u_2\\) \u548c\u539f\u6765\u4e00\u6837\uff0c\u8fd8\u662f\u5404\u81ea\u7684\u5747\u503c\uff0c\u800c \\(\\Sigma\\) \u5219\u662f\u539f\u5148\u4e24\u4e2a \\(\\Sigma_1\\) \u548c \\(\\Sigma_2\\) \u7684\u52a0\u6743 \u7ed3\u679c\u53ef\u89c6\u5316\u540e\u4f1a\u53d1\u73b0\u8003\u8651 2 \u4e2a\u53c2\u6570\u65f6\uff0c\u5206\u754c\u7ebf\u7531\u66f2\u7ebf\u53d8\u6210\u4e86\u76f4\u7ebf \u8fd9\u6837\u7684 model \u4e5f\u79f0\u4e4b\u4e3a linear model (\u5c3d\u7ba1 Gaussian \u4e0d\u662f linear \u7684\uff0c\u4f46\u662f\u5b83\u5206\u4e24\u4e2a class \u7684boundary \u662f linear) \u5982\u679c\u518d\u628a\u8003\u8651\u6240\u6709\u7684 feature\uff0c\u90a3\u4e48\u51c6\u786e\u7387\u5c06\u4f1a\u53d8\u6210 74%\uff0c\u4f46\u9ad8\u7ef4\u7a7a\u95f4\u65e0\u6cd5\u53ef\u89c6\u5316 \u5176\u4ed6 \u00b6 Naive Bayes Classifier \u00b6 \u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u6cd5 \u4e3a\u4e86\u51cf\u5c11\u53c2\u6570\u5047\u8bbe \\(x=[x_1,x_2,...x_n]\\) \u6bcf\u4e2a\u53c2\u6570\u4e4b\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u90a3\u6bcf\u4e00\u4e2a\u53c2\u6570\u90fd\u53ef\u4ee5\u5199\u4e00\u4e2a\u4e00\u7ef4\u7684 Gaussion\uff0c \\(\\Sigma\\) \u9664\u4e86\u5bf9\u89d2\u7ebf\u4e4b\u5916\u90fd\u662f 0\uff0c\u8fd9\u6837\u5f97\u51fa\u7684\u7ed3\u679c\u4f1a\u6bd4\u8f83\u7cdf\u7cd5\uff0c\u56e0\u4e3a\u663e\u7136\u6218\u6597\u529b\u548c\u9632\u5fa1\u529b\u662f\u6210\u6b63\u6bd4\u7684\uff0ccovariance \u4e0d\u53ef\u80fd\u4e3a0 \u603b\u4e4b\uff0c\u5bfb\u627e model \u603b\u7684\u539f\u5219\u662f\uff0c\u5c3d\u91cf\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u53c2\u6570\uff0c\u4f46\u662f\u5fc5\u7136\u7684\u53c2\u6570\u7edd\u5bf9\u4e0d\u80fd\u5c11 \u90a3\u600e\u4e48\u53bb\u9009\u62e9\u5206\u5e03\u51fd\u6570\u5462\uff1f\u6709\u5f88\u591a\u65f6\u5019\u51ed\u76f4\u89c9\u5c31\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u6bd4\u5982\u5b9d\u53ef\u68a6\u6709\u67d0\u4e2afeature\u662fbinary\u7684\uff0c\u5b83\u4ee3\u8868\u7684\u662f\uff1a\u662f\u6216\u4e0d\u662f\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u4e0d\u592a\u53ef\u80fd\u662f\u9ad8\u65af\u5206\u5e03\u4e86\uff0c\u800c\u5f88\u6709\u53ef\u80fd\u662f\u4f2f\u52aa\u5229\u5206\u5e03(\u4e24\u70b9\u5206\u5e03) Analysis Posterior Probability \u00b6 \u5206\u6790\u4e00\u4e0b\u540e\u9a8c\u6982\u7387 \\(P(C_1|x)\\) \u8868\u8fbe\u5f0f\u540c\u9664\u4ee5\u5206\u5b50\uff0c\u53ef\u4ee5\u5f97\u5230 \\(\\sigma(z)=\\frac{1}{1+e^{-z}}\\) \uff0c\u8fd9\u4e2afunction\u53eb\u505asigmoid function\uff08S\u51fd\u6570\uff09 \u63a8\u5bfc\u4e00\u4e0b Z \u7684\u771f\u6b63\u7684\u6837\u5b50 \u63a8\u5bfc\u8fc7\u7a0b\u6bd4\u8f83\u590d\u6742\uff0c\u4f46\u662f\u7ed3\u679c\u5f88\u7b80\u5355\uff1a $$ z=(\\mu^1-\\mu^2)^T\\Sigma^{-1}x-\\frac{1}{2}(\\mu^1)^T\\Sigma^{-1}\\mu^1+\\frac{1}{2}(\\mu^2)^T\\Sigma^{-1}\\mu^2+ln\\frac{N_1}{N_2} $$ \u53ef\u4ee5\u770b\u6210\uff1a \\(z=w^Tx+b\\) \u5f53 \\(\\Sigma_1 \\ \\Sigma_2\\) \u5171\u7528\u4e00\u4e2a \\(\\Sigma\\) \u5e76\u7ecf\u8fc7\u5316\u7b80\u76f8\u6d88\u540e\uff0c \\(x\\) \u7684\u7cfb\u6570 \\(w\\) \u662f\u4e00\u4e2a vector\uff0c\u540e\u9762\u7684\u662f\u4e00\u4e2a\u5e38\u6570\u9879 b \\(P(C_1|x)=\\sigma (w\\cdot x+b)\\) \u8fd9\u4e2a\u5f0f\u5b50\u5c31\u89e3\u91ca\u4e86\uff0c\u5f53 class1 \u548c class2 \u5171\u7528 \\(\\Sigma\\) \u7684\u65f6\u5019\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684 boundary \u4f1a\u662f linear \u7684 \u90a3\u4e48\u80fd\u4e0d\u80fd\u76f4\u63a5\u6c42\u51fa \\(w\uff0cb\\) \u5462\uff1f","title":"Classification"},{"location":"ML/2_Classification/#classification","text":"","title":"Classification"},{"location":"ML/2_Classification/#_1","text":"\u5206\u7c7b\uff0cfunction \u7684\u7ed3\u679c\u662f\u79bb\u6563\u578b\u7684\uff0c\u5fc5\u7136\u5c5e\u4e8e\u7ed3\u679c\u96c6\u4e2d\u7684\u67d0\u4e00\u4e2a\uff0c\u6bd4\u5982\u5b9d\u53ef\u68a6\u7684\u5c5e\u6027\uff08\u5f53\u7136\u5b9d\u53ef\u68a6\u6709\u591a\u5c5e\u6027\uff09","title":"\u6982\u8ff0"},{"location":"ML/2_Classification/#regression","text":"Regression \u5e76\u4e0d\u9002\u7528\u4e8e output \u662f\u79bb\u6563\u7684\u51fd\u6570 \u800c\u4e14\u9700\u8981\u6ce8\u610f\u7684\u662f\u5982\u679c\u662f \u591a\u5143\u5206\u7c7b\uff0c\u4e0d\u80fd\u628a class1's target \u8bbe\u4e3a 1\uff0c class2's target \u8bbe\u4e3a 2\uff0cclass3's target \u8bbe\u4e3a 3\uff0c\u56e0\u4e3a\u8fd9\u6837\u505a\u5c31\u9ed8\u8ba4 class1 \u548c class2 \u76f8\u6bd4 \u548c class3 \u66f4\u52a0\u63a5\u8fd1","title":"Regression\uff1f"},{"location":"ML/2_Classification/#ideal-alternatives","text":"Function Model\uff1afunction f(x) \u91cc\u9762\u8bbe\u53e6\u5916\u4e00\u4e2afunction g(x) \\[ x\\Rightarrow f(x)= \\begin{cases} g(x)>0&output=class1 \\\\ g(x)<0&output=class2 \\end{cases} \\] \u4e3a\u4ec0\u4e48\u53c8\u80fd\u7528\u6570\u503c\u8868\u793a class \u4e86\uff1f \u56e0\u4e3a\u90a3\u662f\u9488\u5bf9 Regression \u7684 Loss function \u800c\u8a00\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u91cd\u65b0\u5b9a\u4e49\u4e00\u4e2a Loss Function $$ Loss=\\sum\\limits_n\\delta(f(x^n)\u2260\\hat{y}^n) $$ \u4e0d\u8fc7\u8fd9\u4e2a Loss Function \u65e0\u6cd5\u5fae\u5206\uff0c\u4e5f\u6709 Perceptron\u3001SVM \u8fd9\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u7528\uff0c\u4f46\u8fd9\u91cc\u5148\u7528\u53e6\u5916\u4e00\u4e2asolution\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898","title":"Ideal Alternatives"},{"location":"ML/2_Classification/#generative-model","text":"\u57fa\u4e8e\u6982\u7387\u8bba\u4e2d\u7684 \u8d1d\u53f6\u65af\u516c\u5f0f \uff1a \\(P(A|B)=\\frac{P(AB)}{P(B)}\\) \u5728\u5df2\u77e5 input x \u7684\u60c5\u51b5\u4e0b\u8ba1\u7b97 \\(P(C_1|x)\\) \u548c \\(P(C_2|x)\\) $$ P(C_1|x)=\\frac{P(C_1)P(x|C_1)}{P(C_1)P(x|C_1 )+P(C_2)P(x|C_2)} $$ \\[ P(C_2|x)=\\frac{P(C_2)P(x|C_2)}{P(C_1)P(x|C_1)+P(C_2)P(x|C_2)} \\]","title":"Generative model"},{"location":"ML/2_Classification/#prior","text":"\u6a21\u578b\u9700\u8981\u5f97\u5230\u56db\u4e2a\u503c \\(P(C_1) \\ P(C_2) \\ P(x|C_1) \\ P(x|C_2)\\) \\(P(C_1) \\ P(C_2)\\) \uff1a \u7b97\u51fa training data \u4e2d \u5c5e\u4e8e class1 \u548c class2 \u5404\u81ea\u5360\u603b\u6837\u672c\u91cf\u7684\u6bd4\u4f8b\u5373\u53ef \\(P(x|C_1) \\ P(x|C_2)\\) \uff1a \u591a\u7ef4\u9ad8\u65af\u5206\u5e03\uff1a\u671f\u671b \\(u\\) \u548c \u534f\u65b9\u5dee \\(\\Sigma\\) \u90fd\u662f matrix $$ f_{u,\\Sigma}(x)=\\frac{1}{(2\\pi)^{\\frac{D}{2}}}\\frac{1}{|\\Sigma|^{\\frac{1}{2}}}exp{-\\frac{1}{2}(x-u)^T\\Sigma^{-1}(x-u)} $$ \u5229\u7528\u6781\u5927\u4f3c\u7136\u4f30\u8ba1 \\(u^*,\\Sigma^*=\\arg \\max\\limits_{u,\\Sigma} L(u,\\Sigma)\\) \u53bb\u4f30\u8ba1 \\(u\uff0c\\Sigma\\) \u7684\u53d6\u503c\uff0c\u8fd9\u91cc\u7684\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u7684\u503c\u5c31\u662f\u8bc4\u4ef7\u4e86\u8fd9\u7ec4\u53c2\u6570\u7684\u597d\u574f\uff0c\u6211\u4eec\u8981\u627e\u5230\u4f7f\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u503c\u6700\u5927\u7684\u4e00\u7ec4\u53c2\u6570\uff0c\u5176\u5b9e\u5c31\u662f\u6240\u6709\u6837\u672c\u70b9\u7684\u5747\u503c\u548c\u534f\u65b9\u5dee \u6ce8\uff1a\u6570\u5b66\u671f\u671b\uff1a \\(u=E(X)\\) \uff0c\u534f\u65b9\u5dee\uff1a \\(\\Sigma=cov(X,Y)=E[(X-u)(Y-u)^T]\\) \uff0c\u5bf9\u540c\u4e00\u4e2a\u53d8\u91cf\u6765\u8bf4\uff0c\u534f\u65b9\u5dee\u4e3a \\(cov(X,X)=E[(X-u)(X-u)^T]=D(X)\\) \u5f97\u5230 \\(x|C_1 \\ x|C_2\\) \u7684\u9ad8\u65af\u5206\u5e03\u540e\u628a \\(x\\) \u4ee3\u5165\u5373\u53ef\u5f97\u5230 \\(P(x|C_1) \\ P(x|C_2)\\)","title":"Prior"},{"location":"ML/2_Classification/#do-classification","text":"\\[ \\begin{align} if \\ P(C_1|x) > 0.5 \\Rightarrow x \\ belongs \\ class1 \\\\ if \\ P(C_2|x) > 0.5 \\Rightarrow x \\ belongs \\ class2 \\end{align} \\] \u5728\u53ea\u8003\u8651\u5b9d\u53ef\u68a6\u7684 Defense \u548c SP Denfense \u65f6\u8fd9\u6837\u505a\u51fa\u6765\u7684\u6548\u679c\u7684\u51fa\u6765\u7684\u51c6\u786e\u7387\u5e76\u4e0d\u9ad8\uff0c\u5373\u4f7f\u8003\u8651\u4e866\u4e2a features \u51c6\u786e\u7387\u4e5f\u53ea\u6709 64%\uff0c\u8868\u73b0\u6bd4\u8f83\u7cdf\u7cd5","title":"Do Classification"},{"location":"ML/2_Classification/#modifying-model","text":"\u4e0a\u9762\u7684 model \u5176\u5b9e\u5e76\u4e0d\u5e38\u89c1\uff0c\u56e0\u4e3a\u4e00\u822c\u4e0d\u4f1a\u6bcf\u4e2a Gaussion \u90fd\u6709\u81ea\u5df1\u7684 mean \u548c covariance\uff0c\u6bd4\u5982\u6211\u4eec\u7684 class1 \u7528\u7684\u662f \\(u_1\\) \u548c \\(\\Sigma_1\\) \uff0cclass2 \u7528\u7684\u662f \\(u_2\\) \u548c \\(\\Sigma_2\\) \uff0c\u6bd4\u8f83\u5e38\u89c1\u7684\u505a\u6cd5\u662f\uff0c \u4e0d\u540c\u7684 class \u53ef\u4ee5 share \u540c\u4e00\u4e2a cocovariance matrix \u5176\u5b9e variance \u662f\u8ddf input \u7684 feature size \u7684\u5e73\u65b9\u6210\u6b63\u6bd4\u7684\uff0c\u6240\u4ee5\u5f53 feature \u7684\u6570\u91cf\u5f88\u5927\u7684\u65f6\u5019\uff0c \\(\\Sigma\\) \u5927\u5c0f\u7684\u589e\u957f\u662f\u53ef\u4ee5\u975e\u5e38\u5feb\u7684\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7ed9\u4e0d\u540c\u7684 Gaussian \u4ee5\u4e0d\u540c\u7684 covariance matrix\uff0c\u4f1a\u9020\u6210model \u7684\u53c2\u6570\u592a\u591a\uff0c\u800c\u53c2\u6570\u591a\u4f1a\u5bfc\u81f4\u8be5 model \u7684 variance \u8fc7\u5927\uff0c\u51fa\u73b0 overfitting \u7684\u73b0\u8c61\uff0c\u56e0\u6b64\u5bf9\u4e0d\u540c\u7684 class \u4f7f\u7528\u540c\u4e00\u4e2a covariance matrix\uff0c\u53ef\u4ee5\u6709\u6548\u51cf\u5c11\u53c2\u6570 \u6b64\u65f6\u5c31\u628a \\(u_1\\) \u3001 \\(u_2\\) \u548c\u5171\u540c\u7684 \\(\\Sigma\\) \u4e00\u8d77\u53bb\u5408\u6210\u4e00\u4e2a\u6781\u5927\u4f3c\u7136\u51fd\u6570\uff0c\u6b64\u65f6\u4f1a\u53d1\u73b0\uff0c\u5f97\u5230\u7684 \\(u_1\\) \u548c \\(u_2\\) \u548c\u539f\u6765\u4e00\u6837\uff0c\u8fd8\u662f\u5404\u81ea\u7684\u5747\u503c\uff0c\u800c \\(\\Sigma\\) \u5219\u662f\u539f\u5148\u4e24\u4e2a \\(\\Sigma_1\\) \u548c \\(\\Sigma_2\\) \u7684\u52a0\u6743 \u7ed3\u679c\u53ef\u89c6\u5316\u540e\u4f1a\u53d1\u73b0\u8003\u8651 2 \u4e2a\u53c2\u6570\u65f6\uff0c\u5206\u754c\u7ebf\u7531\u66f2\u7ebf\u53d8\u6210\u4e86\u76f4\u7ebf \u8fd9\u6837\u7684 model \u4e5f\u79f0\u4e4b\u4e3a linear model (\u5c3d\u7ba1 Gaussian \u4e0d\u662f linear \u7684\uff0c\u4f46\u662f\u5b83\u5206\u4e24\u4e2a class \u7684boundary \u662f linear) \u5982\u679c\u518d\u628a\u8003\u8651\u6240\u6709\u7684 feature\uff0c\u90a3\u4e48\u51c6\u786e\u7387\u5c06\u4f1a\u53d8\u6210 74%\uff0c\u4f46\u9ad8\u7ef4\u7a7a\u95f4\u65e0\u6cd5\u53ef\u89c6\u5316","title":"Modifying Model"},{"location":"ML/2_Classification/#_2","text":"","title":"\u5176\u4ed6"},{"location":"ML/2_Classification/#naive-bayes-classifier","text":"\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u6cd5 \u4e3a\u4e86\u51cf\u5c11\u53c2\u6570\u5047\u8bbe \\(x=[x_1,x_2,...x_n]\\) \u6bcf\u4e2a\u53c2\u6570\u4e4b\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u90a3\u6bcf\u4e00\u4e2a\u53c2\u6570\u90fd\u53ef\u4ee5\u5199\u4e00\u4e2a\u4e00\u7ef4\u7684 Gaussion\uff0c \\(\\Sigma\\) \u9664\u4e86\u5bf9\u89d2\u7ebf\u4e4b\u5916\u90fd\u662f 0\uff0c\u8fd9\u6837\u5f97\u51fa\u7684\u7ed3\u679c\u4f1a\u6bd4\u8f83\u7cdf\u7cd5\uff0c\u56e0\u4e3a\u663e\u7136\u6218\u6597\u529b\u548c\u9632\u5fa1\u529b\u662f\u6210\u6b63\u6bd4\u7684\uff0ccovariance \u4e0d\u53ef\u80fd\u4e3a0 \u603b\u4e4b\uff0c\u5bfb\u627e model \u603b\u7684\u539f\u5219\u662f\uff0c\u5c3d\u91cf\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u53c2\u6570\uff0c\u4f46\u662f\u5fc5\u7136\u7684\u53c2\u6570\u7edd\u5bf9\u4e0d\u80fd\u5c11 \u90a3\u600e\u4e48\u53bb\u9009\u62e9\u5206\u5e03\u51fd\u6570\u5462\uff1f\u6709\u5f88\u591a\u65f6\u5019\u51ed\u76f4\u89c9\u5c31\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u6bd4\u5982\u5b9d\u53ef\u68a6\u6709\u67d0\u4e2afeature\u662fbinary\u7684\uff0c\u5b83\u4ee3\u8868\u7684\u662f\uff1a\u662f\u6216\u4e0d\u662f\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u4e0d\u592a\u53ef\u80fd\u662f\u9ad8\u65af\u5206\u5e03\u4e86\uff0c\u800c\u5f88\u6709\u53ef\u80fd\u662f\u4f2f\u52aa\u5229\u5206\u5e03(\u4e24\u70b9\u5206\u5e03)","title":"Naive Bayes Classifier"},{"location":"ML/2_Classification/#analysis-posterior-probability","text":"\u5206\u6790\u4e00\u4e0b\u540e\u9a8c\u6982\u7387 \\(P(C_1|x)\\) \u8868\u8fbe\u5f0f\u540c\u9664\u4ee5\u5206\u5b50\uff0c\u53ef\u4ee5\u5f97\u5230 \\(\\sigma(z)=\\frac{1}{1+e^{-z}}\\) \uff0c\u8fd9\u4e2afunction\u53eb\u505asigmoid function\uff08S\u51fd\u6570\uff09 \u63a8\u5bfc\u4e00\u4e0b Z \u7684\u771f\u6b63\u7684\u6837\u5b50 \u63a8\u5bfc\u8fc7\u7a0b\u6bd4\u8f83\u590d\u6742\uff0c\u4f46\u662f\u7ed3\u679c\u5f88\u7b80\u5355\uff1a $$ z=(\\mu^1-\\mu^2)^T\\Sigma^{-1}x-\\frac{1}{2}(\\mu^1)^T\\Sigma^{-1}\\mu^1+\\frac{1}{2}(\\mu^2)^T\\Sigma^{-1}\\mu^2+ln\\frac{N_1}{N_2} $$ \u53ef\u4ee5\u770b\u6210\uff1a \\(z=w^Tx+b\\) \u5f53 \\(\\Sigma_1 \\ \\Sigma_2\\) \u5171\u7528\u4e00\u4e2a \\(\\Sigma\\) \u5e76\u7ecf\u8fc7\u5316\u7b80\u76f8\u6d88\u540e\uff0c \\(x\\) \u7684\u7cfb\u6570 \\(w\\) \u662f\u4e00\u4e2a vector\uff0c\u540e\u9762\u7684\u662f\u4e00\u4e2a\u5e38\u6570\u9879 b \\(P(C_1|x)=\\sigma (w\\cdot x+b)\\) \u8fd9\u4e2a\u5f0f\u5b50\u5c31\u89e3\u91ca\u4e86\uff0c\u5f53 class1 \u548c class2 \u5171\u7528 \\(\\Sigma\\) \u7684\u65f6\u5019\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684 boundary \u4f1a\u662f linear \u7684 \u90a3\u4e48\u80fd\u4e0d\u80fd\u76f4\u63a5\u6c42\u51fa \\(w\uff0cb\\) \u5462\uff1f","title":"Analysis Posterior Probability"},{"location":"ML/3_Logistic%20Regression/","text":"Logistic Regression \u00b6 Review \u00b6 \u5728 Classification \u4e2d\u5f97\u51fa\u7684\u7ed3\u679c\uff1a \\[ \\begin{align} P_{w,b}(C_1|x)=\\sigma(z)=\\frac{1}{1+e^{-z}} \\\\ z=w\\cdot x+b=\\sum\\limits_i w_ix_i+b \\end{align} \\] \u5176\u4e2d \\(w\\) \u548c \\(x\\) \u90fd\u662f\u5411\u91cf\uff0c\u8fd9\u4e2a model \u662f\u53d7 \\(w\\) \u548c \\(b\\) \u63a7\u5236\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u5fc5\u8981\u518d\u53bb\u50cf\u524d\u9762\u4e00\u6837\u8ba1\u7b97\u4e00\u5927\u5806\u4e1c\u897f\uff0c\u800c\u662f\u7528\u8fd9\u4e2a\u5168\u65b0\u7684\u7531 \\(w\\) \u548c \\(b\\) \u51b3\u5b9a\u7684 model \u2014\u2014 Logistic Regression(\u903b\u8f91\u56de\u5f52) Three Steps of machine learning \u00b6 Step 1\uff1afunction set \u00b6 \u8fd9\u91cc\u7684 function set \u5c31\u662f Logistic Regression\u2014\u2014\u903b\u8f91\u56de\u5f52 \\(x_i\\) \uff1ainput\uff0c \\(w_i\\) \uff1aweight\uff0c \\(b\\) \uff1abias\uff0c \\(\\sigma(z)\\) \uff1asigmoid function Step 2\uff1aGoodness of a function \u00b6 \u8bbe\u8ba1\u4e00\u4e2a Loss Function \u77e5\u9053\u4e86\u67d0\u4e00\u7ec4 \\(w\\) \u548c \\(b\\) \u5c31\u53ef\u4ee5\u8ba1\u7b97\u51fa Posterior Probability\uff08\u540e\u9a8c\u6982\u7387\uff09\uff0c\u7136\u540e\u5229\u7528\u540e\u9a8c\u6982\u7387\u53ef\u4ee5\u8ba1\u7b97\u51fa\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\uff0c\u90a3\u4e48\u80fd\u591f\u4f7f\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u503c\u6700\u5927\u7684\u90a3\u7ec4 \\(w^*\\) \u548c \\(b^*\\) \u5c31\u662f\u6700\u6709\u53ef\u80fd\u4ea7\u751f\u5f53\u524d Training Data \u7684\u4e00\u7ec4\u53c2\u6570 \u8fd9\u91cc\u5047\u5b9a\u4e8c\u5143\u5206\u7c7b\uff0cclass1 \u7684\u6982\u7387\u662f 1-class2 \u7684\u6982\u7387 \u5c06\u4e0a\u5f0f\u53d8\u5f62\uff1a \\[ w^*,b^*=\\arg \\max\\limits_{w,b} L(w,b)=\\arg\\min\\limits_{w,b}(-\\ln L(w,b)) \\] \\[ \\begin{align} -\\ln L(w,b)=&-\\ln f_{w,b}(x^1)\\\\ &-\\ln f_{w,b}(x^2)\\\\ &-\\ln(1-f_{w,b}(x^3))\\\\ &-... \\end{align} \\] \u4e3a\u4e86\u7edf\u4e00\u683c\u5f0f\uff0c\u628a output \\(\\hat{y}=1\\) \u200b \u4ee3\u8868 class1\uff0coutput \\(\\hat{y}=0\\) \u200b\u200b \u4ee3\u8868 class2 \\[ \\begin{align} -\\ln L(w,b)=&-[\\hat{y}^1 \\ln f_{w,b}(x^1)+(1-\\hat{y}^1)ln(1-f_{w,b}(x^1))]\\\\ &-[\\hat{y}^2 \\ln f_{w,b}(x^2)+(1-\\hat{y}^2)ln(1-f_{w,b}(x^2))]\\\\ &-[\\hat{y}^3 \\ln f_{w,b}(x^3)+(1-\\hat{y}^3)ln(1-f_{w,b}(x^3))]\\\\ &\\ -... \\end{align} \\] \\[ -\\ln L(w,b)=\\sum\\limits_n -[\\hat{y}^n \\ln f_{w,b}(x^n)+(1-\\hat{y}^n) \\ln(1-f_{w,b}(x^n))] \\] \u8fd9\u4e2a\u5f62\u5f0f\u5176\u5b9e\u5c31\u662f \u4e24\u4e2a Bernoulli distribution (\u4e24\u70b9\u5206\u5e03)\u7684 cross entropy (\u4ea4\u53c9\u71b5) \uff0c\u628a\u8fd9\u4e2a\u4f5c\u4e3a Loss Function \u4e8e\u662f\u6211\u4eec\u628a \u6781\u5927\u4f3c\u7136\u4f30\u8ba1 \u7684\u5f0f\u5b50\u53d8\u6210\u4e86 \u4ea4\u53c9\u71b5 \u4f5c\u4e3a Loss Function \u4ee5\u65b9\u4fbf\u5fae\u5206 Cross Entropy \u00b6 \u7b14\u8bb0 | \u4ec0\u4e48\u662fCross Entropy - \u77e5\u4e4e Cross Entropy: \u4e00\u822c\u7528\u6765\u91cf\u5316\u4e24\u4e2a\u6982\u7387\u5206\u5e03\u4e4b\u95f4\u5dee\u5f02\u7684\u635f\u5931\u51fd\u6570 \u5047\u8bbe\u5bf9\u4e8e \u4e00\u4e2a \u6570\u636e\u7684\u771f\u5b9e\u5206\u5e03\u4e3a p\uff0c\u9884\u6d4b\u5206\u5e03\u4e3a q \u90a3\u4e48 \\(H(p,q)=-\\sum_{x}{p(x)\\ log\\ q(x)}\\) \u5176\u4e2d x \u662f\u7c7b\u522b\u6570 Cross Entropy \u4ea4\u53c9\u71b5\u7684\u542b\u4e49\u662f\u8868\u8fbe\u4e24\u4e2a distribution \u6709\u591a\u63a5\u8fd1\uff0c\u5982\u679c p \u548c q \u8fd9\u4e24\u4e2a distribution \u4e00\u6a21\u4e00\u6837\u7684\u8bdd\uff0c\u90a3\u5b83\u4eec\u7b97\u51fa\u6765\u7684 Cross Entropy \u5c31\u662f 0 (\u8be6\u7ec6\u89e3\u91ca\u5728\u201c\u4fe1\u606f\u8bba\u201d\u4e2d)\uff0c\u800c\u8fd9\u91cc \\(f(x^n)\\) \u8868\u793a function \u7684 output\uff0c \\(\\hat{y}^n\\) \u8868\u793a\u9884\u671f\u7684 target\uff0c\u56e0\u6b64 \u4ea4\u53c9\u71b5\u5b9e\u9645\u4e0a\u8868\u8fbe\u7684\u662f\u5e0c\u671b\u8fd9\u4e2a function \u7684 output\u548c\u5b83\u7684 target \u8d8a\u63a5\u8fd1\u8d8a\u597d negative log loss\uff08\u8d1f\u5bf9\u6570\u4f3c\u7136\u4f30\u8ba1\uff09\u662f Cross Entropy \u7684\u4e00\u4e2a\u5e94\u7528\uff0c\u5728\u5355\u6837\u672c\u7684\u60c5\u51b5\u4e0b\u5047\u8bbe\u771f\u5b9e\u5206\u5e03\u4e3a p \uff0c\u8868\u793a\u4e00\u4e2a\u5411\u91cf\uff0c\u5176\u4e2d \\(p_k=1\\) \uff0c\u5176\u4f59\u4e3a 0\uff0c\u90a3\u4e48 \\(H(p, q) =-log(q_k)\\) \uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4ea4\u53c9\u71b5\u53ea\u5173\u5fc3\u5bf9\u6b63\u786e\u7c7b\u522b\u7684\u9884\u6d4b\u6982\u7387\uff0c\u5e0c\u671b\u5176\u5c3d\u91cf\u5927 step 3\uff1aFind the best function \u00b6 \u5373\u627e\u5230\u4f7f Loss Function \u5373 Cross Entropy \u6700\u5c0f\u7684\u4e00\u7ec4 \\(w^*,b^*\\) \uff0c\u8fd9\u91cc\u8fd0\u7528 Gradient Descent \\[ \\begin{align} P_{w,b}(C_1|x)=\\sigma(z)=\\frac{1}{1+e^{-z}} \\\\ z=w\\cdot x+b=\\sum\\limits_i w_ix_i+b \\end{align} \\] \\[ \\begin{align} f_{w,b}(x)=P_{w,b}(C_1|x) \\end{align} \\] \\[ -\\ln L(w,b)=\\sum\\limits_n -[\\hat{y}^n \\ln f_{w,b}(x^n)+(1-\\hat{y}^n) \\ln(1-f_{w,b}(x^n))] \\] Sigmoid Function \u7684\u5fae\u5206\u516c\u5f0f\uff1a $$ \\frac{\\partial \\sigma(z)}{\\partial z}=\\sigma(z)(1-\\sigma(z)) $$ \u8ba1\u7b97 \\(-\\ln L(w,b)=\\sum\\limits_n -[\\hat{y}^n \\ln f_{w,b}(x^n)+(1-\\hat{y}^n) \\ln(1-f_{w,b}(x^n))]\\) \u5bf9 \\(w_i\\) \u7684\u504f\u5fae\u5206\uff0c\u5176\u4e2d \\(\\hat{y}^n\\) \u548c \\(1-\\hat{y}^n\\) \u662f\u5e38\u6570\uff0c\u53ea\u9700\u8981\u5206\u522b\u6c42\u51fa \\(\\ln f_{w,b}(x^n)\\) \u548c \\(\\ln (1-f_{w,b}(x^n))\\) \u5bf9 \\(w_i\\) \u7684\u504f\u5fae\u5206\u5373\u53ef\uff0c\u6574\u4f53\u63a8\u5bfc\u8fc7\u7a0b\u5982\u4e0b\uff1a \u7ed3\u679c\u5e26\u5165\u5f97\uff1a \u6240\u4ee5\uff1a $$ w_{i+1}=w_i-\\eta \\sum\\limits_{n}-(\\hat{y}^n-f_{w,b}(x^n))x_i^n $$ \\(-\\eta\\) \uff1alearning rate \\(x_i\\) \uff1adata \\(\\hat{y}^n-f_{w,b}(x^n)\\) \uff1a\u4e0e\u7406\u60f3 function set \u7684\u5dee\u8ddd\uff0c\u5dee\u8ddd\u8d8a\u5927 update \u7684\u6b65\u4f10\u8d8a\u5927 \u540c\u7406\u53ef\u5f97\uff1a $$ b_{i+1}=w_i-\\eta \\sum\\limits_{n}-(\\hat{y}^n-f_{w,b}(x^n)) $$ \u6211\u4eec\u4f1a\u53d1\u73b0 Logistic Regression \u7684\u7ed3\u679c\u662f\u548c Linear Regresison \u7684\u5f0f\u5b50\u662f\u4e00\u6837\u7684 Comparison \u00b6 Logistic Regression && Linear Regression \u00b6 \u4e24\u8005\u90fd\u662f\u901a\u8fc7\u5bf9\u6bcf\u4e00\u4e2a feature \\(x_i\\) \u52a0\u6743\u6c42\u548c\u540e\u52a0\u4e0a\u4e00\u4e2a\u5e38\u6570\uff0c\u533a\u522b\u5728\u4e8e Logistic Regression \u6700\u540e\u53c8\u901a\u8fc7\u4e86\u4e00\u4e2a Sigmoid Function\uff0c\u5b83\u7684\u7ed3\u679c\u662f 0~1\uff0c\u800c Linear Regression \u4e0d\u7ecf\u8fc7 Sigmoid Function\uff0c\u7ed3\u679c\u53ef\u4ee5\u662f\u4efb\u610f\u503c Logistic Regression \u7684 Loss Function \u7528\u7684\u4ea4\u53c9\u71b5\u5b9a\u4e49\uff0c\u800c Linear Regression \u7528\u7684 Square Error Logistic Regression + Square Error \uff1f \u00b6 \u5047\u8bbe\u4f7f\u7528 Logistic Regression + Square Error\uff0c \u5982\u679c\u6b64\u65f6 \\(\\hat{y}^n=1\\) \uff0c\u800c\u4e14 function \u7684 output \\(f_{w,b}(x^n)=1\\) \u7684\u8bdd\uff0c\u8bf4\u660e\u73b0\u5728\u79bb target \u5f88\u63a5\u8fd1\u4e86\uff0c \\(f_{w,b}(x)-\\hat{y}=0\\) \uff0c\u4e8e\u662f\u5f97\u5230\u7684\u5fae\u5206 \\(\\frac{\\partial L}{\\partial w_i}\\) \u7b49\u4e8e 0\uff0c\u8fd9\u4ef6\u4e8b\u60c5\u662f\u5f88\u5408\u7406\u7684\uff1b\u4f46\u662f\u5f53 function \u7684 output \\(f_{w,b}(x^n)=0\\) \u7684\u65f6\u5019\uff0c\u8bf4\u660e\u79bb target \u8fd8\u5f88\u9065\u8fdc\uff0c\u4f46\u662f\u7531\u4e8e\u5728step3 \u4e2d\u6c42\u51fa\u6765\u7684 update \u8868\u8fbe\u5f0f\u4e2d\u6709\u4e00\u4e2a \\(f_{w,b}(x^n)\\) \uff0c\u56e0\u6b64\u8fd9\u4e2a\u65f6\u5019\u4e5f\u4f1a\u5bfc\u81f4\u5f97\u5230\u7684\u5fae\u5206 \\(\\frac{\\partial L}{\\partial w_i}\\) \u4e5f\u7b49\u4e8e 0 \u5c06 Loss Function \u9009\u62e9 Cross Entropy \u6216 Square Error \u7684\u53d8\u5316\u60c5\u51b5\u53ef\u89c6\u5316\u4e4b\u540e\u5982\u4e0b\u6240\u793a\uff08\u9ed1\u8272\uff1aCross Entropy \u7ea2\u8272\uff1aSquare Error\uff09 \u53ef\u89c1 Square Error \u4f1a\u5f88\u6162\uff0c\u751a\u81f3\u53ef\u80fd\u4e0d\u4f1a\u52a8 Discriminative && Generative \u00b6 \u628a Logistic Regression \u7684\u65b9\u6cd5\u79f0\u4e4b\u4e3a Discriminative \u7684\u65b9\u6cd5\uff0c\u7528 Gaussian \u6765\u63cf\u8ff0 Posterior Probability \u7684\u65b9\u6cd5\u79f0\u4e4b\u4e3a Generative \u7684\u65b9\u6cd5 \u4ed6\u4eec\u7684 Function Set \u90fd\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f \\(P(C_1|x)=\\sigma(w\\cdot x+b)\\) Logistic Regression \u662f\u901a\u8fc7 Gradient Descent \u7684\u65b9\u6cd5\u76f4\u63a5\u627e\u51fa \\(b\\) \u548c \\(w\\) \uff0c\u800c Generative Model \u7684\u65b9\u6cd5\u662f\u5148\u7b97 \\(u_1,u_2,\\Sigma^{-1}\\) \uff0c\u518d\u6c42 \\(b\\) \u548c \\(w\\) \u4f46\u8fd9\u4e24\u8005\u65b9\u6cd5\u7684\u51fa\u6765\u7684 \\(b\\) \u548c \\(w\\) \u662f\u4e0d\u4e00\u6837\u7684 \u539f\u56e0\u662f\u5728 Logistic Regression \u4e2d \u6ca1\u6709\u505a\u4efb\u4f55\u5b9e\u8d28\u6027\u7684\u5047\u8bbe \uff0c\u5355\u7eaf\u7684\u53bb\u627e \\(w\\) \u548c \\(b\\) \uff0c\u800c\u5728 Generative Model \u4e2d\u5047\u8bbe\u4e86 Gaussion Distribution Discriminative \u7684\u65b9\u6cd5\u5e38\u5e38\u4f1a\u6bd4 Generative \u7684\u65b9\u6cd5\u8868\u73b0\u5f97\u66f4\u597d discriminative model \u5e76\u4e0d\u662f\u5728\u6240\u6709\u7684\u60c5\u51b5\u4e0b\u90fd\u53ef\u4ee5\u8d62\u8fc7 Generative model\uff0cdiscriminative model \u662f\u5341\u5206\u4f9d\u8d56\u4e8e data \u7684\uff0c\u5f53 data \u6570\u91cf\u4e0d\u8db3\u6216\u662f data \u672c\u8eab\u7684 label\u5c31\u6709\u4e00\u4e9b\u95ee\u9898\uff0c\u90a3Generative model\u505a\u4e00\u4e9b\u5047\u8bbe\uff0c\u53cd\u800c\u53ef\u4ee5\u628a data \u7684\u4e0d\u8db3\u6216\u662f\u6709\u95ee\u9898\u90e8\u5206\u7684\u5f71\u54cd\u7ed9\u964d\u5230\u6700\u4f4e \u5728 Generative model \u4e2d\uff0cpriors probabilities \u548c class-dependent probabilities \u662f\u53ef\u4ee5\u62c6\u5f00\u6765\u8003\u8651\u7684\uff0c\u4ee5\u8bed\u97f3\u8fa8\u8bc6\u4e3a\u4f8b\uff0c\u73b0\u5728\u7528\u7684\u90fd\u662f neural network\uff0c\u662f\u4e00\u4e2adiscriminative \u7684\u65b9\u6cd5\uff0c\u4f46\u4e8b\u5b9e\u4e0a\u6574\u4e2a\u8bed\u97f3\u8fa8\u8bc6\u7684\u7cfb\u7edf\u662f\u4e00\u4e2a Generative \u7684 system\uff0c\u5b83\u7684 prior probability \u662f\u67d0\u4e00\u53e5\u8bdd\u88ab\u8bf4\u51fa\u6765\u7684\u51e0\u7387\uff0c\u800c\u60f3\u8981 estimate \u67d0\u4e00\u53e5\u8bdd\u88ab\u8bf4\u51fa\u6765\u7684\u51e0\u7387\u5e76\u4e0d\u9700\u8981\u6709\u58f0\u97f3\u7684 data\uff0c\u53ef\u4ee5\u53bb\u4e92\u8054\u7f51\u4e0a\u722c\u53d6\u5927\u91cf\u6587\u5b57\uff0c\u5c31\u53ef\u4ee5\u8ba1\u7b97\u51fa\u67d0\u4e00\u6bb5\u6587\u5b57\u51fa\u73b0\u7684\u51e0\u7387\uff0c\u5e76\u4e0d\u9700\u8981\u58f0\u97f3\u7684 data\uff0c\u8fd9\u4e2a\u5c31\u662f language model\uff0c\u800c class-dependent \u7684\u90e8\u5206\u624d\u9700\u8981\u58f0\u97f3\u548c\u6587\u5b57\u7684\u914d\u5408\uff0c\u8fd9\u6837\u7684\u5904\u7406\u53ef\u4ee5\u628a prior \u9884\u6d4b\u5730\u66f4\u7cbe\u786e Conclusion \u00b6 \u5bf9\u4e8e\u5206\u7c7b\u95ee\u9898\uff08\u4e3b\u8981\u662f\u4e8c\u5143\u5206\u7c7b\uff09\uff0c\u4e00\u822c\u6709\u4e24\u79cd\u65b9\u6cd5\u5904\u7406\uff1aGenerative \u7684\u65b9\u6cd5\uff0cDiscriminative \u7684\u65b9\u6cd5 \\[ \\begin{align} P(C_i|x)=\\frac{P(C_i)P(x|C_i)}{\\sum\\limits_{j=1}^nP(C_j)P(x|C_j)} \\\\ \\sigma(z)=\\frac{1}{1+e^{-z}}=\\frac{1}{1+e^{-(b+\\sum\\limits_k w_k x_k)}} \\end{align} \\] \u4e24\u8005\u7684\u533a\u522b\u5728\u4e8e\uff1a Generative model \u901a\u5e38\u4f1a\u5047\u8bbe\u4e00\u4e2a\u6982\u7387\u5206\u5e03\uff0c\u7136\u540e\u53bb\u5229\u7528\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u8ba1\u7b97 \\(b\\) \u548c \\(w\\) \uff1bDiscriminative model \u4e0d\u505a\u4efb\u4f55\u5047\u8bbe\uff0c\u5229\u7528\u4ea4\u53c9\u71b5\u548c gradient descent \u8ba1\u7b97 \\(b\\) \u548c \\(w\\) Generative model \u7684\u597d\u5904\u662f\uff0c\u5b83\u5bf9data\u7684\u4f9d\u8d56\u5e76\u6ca1\u6709\u50cfdiscriminative model \u90a3\u4e48\u4e25\u91cd\uff0c\u5728data\u6570\u91cf\u5c11\u6216\u8005data\u672c\u8eab\u5c31\u5b58\u5728noise\u7684\u60c5\u51b5\u4e0b\u53d7\u5230\u7684\u5f71\u54cd\u4f1a\u66f4\u5c0f\uff0c\u800c\u5b83\u8fd8\u53ef\u4ee5\u505a\u5230 Prior \u90e8\u5206\u4e0e class-dependent \u90e8\u5206\u5206\u5f00\u5904\u7406\uff0c\u5982\u679c\u53ef\u4ee5\u501f\u52a9\u5176\u4ed6\u65b9\u5f0f\u63d0\u9ad8 Prior model \u7684\u51c6\u786e\u7387\uff0c\u5bf9\u6574\u4e00\u4e2a model \u662f\u6709\u6240\u5e2e\u52a9\u7684 (\u6bd4\u5982\u524d\u9762\u63d0\u5230\u7684\u8bed\u97f3\u8fa8\u8bc6) \u800c Discriminative model \u7684\u597d\u5904\u662f\uff0c\u5728 data \u5145\u8db3\u7684\u60c5\u51b5\u4e0b\uff0c\u5b83\u8bad\u7ec3\u51fa\u6765\u7684 model \u7684\u51c6\u786e\u7387\u4e00\u822c\u662f\u6bd4 Generative model \u8981\u6765\u7684\u9ad8\u7684 Multi-class Classification \u00b6 Softmax \u00b6 \u5047\u8bbe\u6709\u4e09\u4e2a Class\uff1a \\(C_1,C_2,C_3\\) \uff0c\u6bcf\u4e00\u4e2a Class \u90fd\u6709\u81ea\u5df1\u7684 weight \u548c bias\uff0c\u5206\u522b\u662f \\(w_1,w_2,w_3\\) (vector)\uff0c \\(b_1,b_2,b_3\\) (const)\uff0cinput x \u4e5f\u662f\u4e00\u4e2a vector \u90a3\u4e48 \\(z_i=w^ix+b_i\\) softmax\uff1a\u5f3a\u5316\u6700\u5927\u503c\uff0c\u56e0\u4e3a\u505a exponential \u4f1a\u8ba9\u539f\u672c\u5927\u7684\u503c\u53d8\u5f97\u66f4\u5927 \u7136\u540e\u628a \\(z_1,z_2,z_3\\) \u4e22\u8fdb\u4e00\u4e2a softmax \u7684 function \u53d6 exponential\uff0c\u5f97\u5230 \\(e^{z_1},e^{z_2},e^{z_3}\\) \u5f52\u4e00\u5316\uff0c\u5f97\u5230 \\(y_1=\\frac{e^{z_1}}{\\sum\\limits_{j=1}^3 e^{z_j}}\\) \u3001 \\(y_2=\\frac{e^{z_2}}{\\sum\\limits_{j=1}^3 e^{z_j}}\\) \u3001 \\(y_3=\\frac{e^{z_3}}{\\sum\\limits_{j=1}^3 e^{z_j}}\\) softmax \u7684 output\uff0c\u5c31\u62ff\u6765\u5f53 z \u7684 probability multi-class classification \u7684\u8fc7\u7a0b \u00b6 input x \u7ecf\u8fc7\u4e09\u4e2a\u5f0f\u5b50\u540e\u5206\u522b\u751f\u6210 \\(z_1,z_2,z_3\\) \uff0c\u7ecf\u8fc7 softmax \u540e\u8f6c\u6362\u6210 \\(y_1,y_2,y_3\\) \uff0c\u8fd9\u5206\u522b\u662f\u4e09\u4e2a class \u7684 posterior probability \u4e3a\u4e86\u8ba1\u7b97\u4ea4\u53c9\u71b5\uff0c\u4e0d\u80fd\u628a targrt \u8bbe\u4e3a 1,2,3\uff0c\u8fd9\u91cc\u4f7f\u7528\u5411\u91cf \\[ \\hat{y}= \\begin{bmatrix} 1\\\\0\\\\0 \\end{bmatrix}_{x \\ \u2208 \\ class 1} \\hat{y}= \\begin{bmatrix} 0\\\\1\\\\0 \\end{bmatrix}_{x \\ \u2208 \\ class 2} \\hat{y}= \\begin{bmatrix} 0\\\\0\\\\1 \\end{bmatrix}_{x \\ \u2208 \\ class 3} \\] \u7136\u540e\u8ba1\u7b97 \\(y\uff0c\\hat{y}\\) \u4e4b\u95f4\u7684\u4ea4\u53c9\u71b5\uff0c \\(-\\sum\\limits_{i=1}^3 \\hat{y}_i \\ln y_i\\) Limitation of Logistic Regression \u00b6 Logistic Regression \u6709\u5f88\u5f3a\u7684\u9650\u5236\uff0c\u56e0\u4e3a\u4ed6\u7684 boundary \u662f\u4e00\u6761\u76f4\u7ebf\uff0c\u800c\u5bf9\u4e8e\u4e0b\u9762\u7684\u4f8b\u5b50 \\(x_1\\) \\(x_2\\) label 0 0 class2 0 1 class1 1 0 class1 1 1 class2 \u5728\u5750\u6807\u8f74\u4e0a\u662f\u4e0d\u53ef\u80fd\u753b\u4e00\u6761 boundary \u6765\u533a\u5206 class1 \u548c class2 \u7684 Feature Transformation \u00b6 \u5982\u679c\u539f\u6765\u7684 feature \u4e0d\u597d\u505a\u5212\u5206\uff0c\u53ef\u4ee5\u7528 Feature Transformation \uff0c\u8f6c\u6362\u4e4b\u540e\u53d8\u5f97\u53ef\u4ee5\u5212\u5206\u3002 \u5047\u5b9a\u65b0\u7684 x \u8f74 \\(x'_1\\) \u8868\u793a\u539f\u6765\u7684\u70b9\u5230 \\(\\begin{bmatrix}0\\\\0\\end{bmatrix}\\) \u7684\u8ddd\u79bb\uff0c\u65b0\u7684 y \u8f74 \\(x'_2\\) \u8868\u793a\u7684\u662f\u539f\u6765\u7684\u70b9\u5230 \\(\\begin{bmatrix}1\\\\1\\end{bmatrix}\\) \u7684\u8ddd\u79bb\uff0c\u91cd\u65b0\u6620\u5c04\u4e4b\u540e\u5c31\u53d8\u5f97\u53ef\u5212\u5206\u4e86 \u9ebb\u70e6\u7684\u662f\u5f88\u591a\u65f6\u5019\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u600e\u4e48\u505a Feature Transformation\uff0c\u4e8e\u662f\u6211\u4eec\u4f1a\u5e0c\u671b\u8fd9\u4e2a Transformation \u662f\u673a\u5668\u81ea\u5df1\u4ea7\u751f\u7684\uff0c\u600e\u4e48\u8ba9\u673a\u5668\u81ea\u5df1\u4ea7\u751f\u5462\uff1f \u6211\u4eec\u53ef\u4ee5\u8ba9\u5f88\u591aLogistic Regression cascade\uff08\u8fde\u63a5\uff09\u8d77\u6765 \u5373\u5148\u901a\u8fc7\u4e00\u4e2a Logistic Regression \u7684 Transform \u4f7f\u5f97\u65b0\u7684 feature \\(x'_1,x'_2\\) \u662f\u53ef\u4ee5\u5212\u5206\u7684\uff0c\u7136\u540e\u518d\u7ecf\u8fc7\u4e00\u4e2a Logistic Regression \u5c31\u53ef\u4ee5\u628a class1 \u548c class2 \u5206\u5f00 \u6240\u4ee5\u6574\u4e2a\u6d41\u7a0b\u662f\uff1a\u5148\u901a\u8fc7 n\uff08n\u4e3a\u6bcf\u4e2a\u6837\u672c\u70b9\u7684feature\u6570\u91cf\uff09\u4e2a Logistic Regression \u505a feature Transformation\uff0c\u7136\u540e\u518d\u7528\u4e00\u4e2a Logistic Regression \u505a classification\uff08\u5982\u679c\u662f\u591a\u5143\u5206\u7c7b\u9700\u8981\u7528\u5230\u591a\u4e2a Logistic Regression \u753b\u51fa\u591a\u6761\u76f4\u63a5\u5212\u5206\u6240\u6709\u7684\u7c7b\uff09 \u6211\u4eec\u5982\u679c\u628a\u8fd9\u5176\u4e2d\u7684\u6bcf\u4e2a Logistic Regression \u53eb\u505a\u4e00\u4e2a Neuron\uff0c\u628a\u8fd9\u4e9b Logistic Regression \u4e32\u8d77\u6765\u5f62\u6210\u7684 network \u53eb\u505a Neural Network\uff0c\u5341\u4e5d\u7c7b\u795e\u7ecf\u7f51\u7edc\uff0c\u5c31\u662f Deep Learning","title":"Logistic Regression"},{"location":"ML/3_Logistic%20Regression/#logistic-regression","text":"","title":"Logistic Regression"},{"location":"ML/3_Logistic%20Regression/#review","text":"\u5728 Classification \u4e2d\u5f97\u51fa\u7684\u7ed3\u679c\uff1a \\[ \\begin{align} P_{w,b}(C_1|x)=\\sigma(z)=\\frac{1}{1+e^{-z}} \\\\ z=w\\cdot x+b=\\sum\\limits_i w_ix_i+b \\end{align} \\] \u5176\u4e2d \\(w\\) \u548c \\(x\\) \u90fd\u662f\u5411\u91cf\uff0c\u8fd9\u4e2a model \u662f\u53d7 \\(w\\) \u548c \\(b\\) \u63a7\u5236\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u5fc5\u8981\u518d\u53bb\u50cf\u524d\u9762\u4e00\u6837\u8ba1\u7b97\u4e00\u5927\u5806\u4e1c\u897f\uff0c\u800c\u662f\u7528\u8fd9\u4e2a\u5168\u65b0\u7684\u7531 \\(w\\) \u548c \\(b\\) \u51b3\u5b9a\u7684 model \u2014\u2014 Logistic Regression(\u903b\u8f91\u56de\u5f52)","title":"Review"},{"location":"ML/3_Logistic%20Regression/#three-steps-of-machine-learning","text":"","title":"Three Steps of machine learning"},{"location":"ML/3_Logistic%20Regression/#step-1function-set","text":"\u8fd9\u91cc\u7684 function set \u5c31\u662f Logistic Regression\u2014\u2014\u903b\u8f91\u56de\u5f52 \\(x_i\\) \uff1ainput\uff0c \\(w_i\\) \uff1aweight\uff0c \\(b\\) \uff1abias\uff0c \\(\\sigma(z)\\) \uff1asigmoid function","title":"Step 1\uff1afunction set"},{"location":"ML/3_Logistic%20Regression/#step-2goodness-of-a-function","text":"\u8bbe\u8ba1\u4e00\u4e2a Loss Function \u77e5\u9053\u4e86\u67d0\u4e00\u7ec4 \\(w\\) \u548c \\(b\\) \u5c31\u53ef\u4ee5\u8ba1\u7b97\u51fa Posterior Probability\uff08\u540e\u9a8c\u6982\u7387\uff09\uff0c\u7136\u540e\u5229\u7528\u540e\u9a8c\u6982\u7387\u53ef\u4ee5\u8ba1\u7b97\u51fa\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\uff0c\u90a3\u4e48\u80fd\u591f\u4f7f\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u503c\u6700\u5927\u7684\u90a3\u7ec4 \\(w^*\\) \u548c \\(b^*\\) \u5c31\u662f\u6700\u6709\u53ef\u80fd\u4ea7\u751f\u5f53\u524d Training Data \u7684\u4e00\u7ec4\u53c2\u6570 \u8fd9\u91cc\u5047\u5b9a\u4e8c\u5143\u5206\u7c7b\uff0cclass1 \u7684\u6982\u7387\u662f 1-class2 \u7684\u6982\u7387 \u5c06\u4e0a\u5f0f\u53d8\u5f62\uff1a \\[ w^*,b^*=\\arg \\max\\limits_{w,b} L(w,b)=\\arg\\min\\limits_{w,b}(-\\ln L(w,b)) \\] \\[ \\begin{align} -\\ln L(w,b)=&-\\ln f_{w,b}(x^1)\\\\ &-\\ln f_{w,b}(x^2)\\\\ &-\\ln(1-f_{w,b}(x^3))\\\\ &-... \\end{align} \\] \u4e3a\u4e86\u7edf\u4e00\u683c\u5f0f\uff0c\u628a output \\(\\hat{y}=1\\) \u200b \u4ee3\u8868 class1\uff0coutput \\(\\hat{y}=0\\) \u200b\u200b \u4ee3\u8868 class2 \\[ \\begin{align} -\\ln L(w,b)=&-[\\hat{y}^1 \\ln f_{w,b}(x^1)+(1-\\hat{y}^1)ln(1-f_{w,b}(x^1))]\\\\ &-[\\hat{y}^2 \\ln f_{w,b}(x^2)+(1-\\hat{y}^2)ln(1-f_{w,b}(x^2))]\\\\ &-[\\hat{y}^3 \\ln f_{w,b}(x^3)+(1-\\hat{y}^3)ln(1-f_{w,b}(x^3))]\\\\ &\\ -... \\end{align} \\] \\[ -\\ln L(w,b)=\\sum\\limits_n -[\\hat{y}^n \\ln f_{w,b}(x^n)+(1-\\hat{y}^n) \\ln(1-f_{w,b}(x^n))] \\] \u8fd9\u4e2a\u5f62\u5f0f\u5176\u5b9e\u5c31\u662f \u4e24\u4e2a Bernoulli distribution (\u4e24\u70b9\u5206\u5e03)\u7684 cross entropy (\u4ea4\u53c9\u71b5) \uff0c\u628a\u8fd9\u4e2a\u4f5c\u4e3a Loss Function \u4e8e\u662f\u6211\u4eec\u628a \u6781\u5927\u4f3c\u7136\u4f30\u8ba1 \u7684\u5f0f\u5b50\u53d8\u6210\u4e86 \u4ea4\u53c9\u71b5 \u4f5c\u4e3a Loss Function \u4ee5\u65b9\u4fbf\u5fae\u5206","title":"Step 2\uff1aGoodness of a function"},{"location":"ML/3_Logistic%20Regression/#cross-entropy","text":"\u7b14\u8bb0 | \u4ec0\u4e48\u662fCross Entropy - \u77e5\u4e4e Cross Entropy: \u4e00\u822c\u7528\u6765\u91cf\u5316\u4e24\u4e2a\u6982\u7387\u5206\u5e03\u4e4b\u95f4\u5dee\u5f02\u7684\u635f\u5931\u51fd\u6570 \u5047\u8bbe\u5bf9\u4e8e \u4e00\u4e2a \u6570\u636e\u7684\u771f\u5b9e\u5206\u5e03\u4e3a p\uff0c\u9884\u6d4b\u5206\u5e03\u4e3a q \u90a3\u4e48 \\(H(p,q)=-\\sum_{x}{p(x)\\ log\\ q(x)}\\) \u5176\u4e2d x \u662f\u7c7b\u522b\u6570 Cross Entropy \u4ea4\u53c9\u71b5\u7684\u542b\u4e49\u662f\u8868\u8fbe\u4e24\u4e2a distribution \u6709\u591a\u63a5\u8fd1\uff0c\u5982\u679c p \u548c q \u8fd9\u4e24\u4e2a distribution \u4e00\u6a21\u4e00\u6837\u7684\u8bdd\uff0c\u90a3\u5b83\u4eec\u7b97\u51fa\u6765\u7684 Cross Entropy \u5c31\u662f 0 (\u8be6\u7ec6\u89e3\u91ca\u5728\u201c\u4fe1\u606f\u8bba\u201d\u4e2d)\uff0c\u800c\u8fd9\u91cc \\(f(x^n)\\) \u8868\u793a function \u7684 output\uff0c \\(\\hat{y}^n\\) \u8868\u793a\u9884\u671f\u7684 target\uff0c\u56e0\u6b64 \u4ea4\u53c9\u71b5\u5b9e\u9645\u4e0a\u8868\u8fbe\u7684\u662f\u5e0c\u671b\u8fd9\u4e2a function \u7684 output\u548c\u5b83\u7684 target \u8d8a\u63a5\u8fd1\u8d8a\u597d negative log loss\uff08\u8d1f\u5bf9\u6570\u4f3c\u7136\u4f30\u8ba1\uff09\u662f Cross Entropy \u7684\u4e00\u4e2a\u5e94\u7528\uff0c\u5728\u5355\u6837\u672c\u7684\u60c5\u51b5\u4e0b\u5047\u8bbe\u771f\u5b9e\u5206\u5e03\u4e3a p \uff0c\u8868\u793a\u4e00\u4e2a\u5411\u91cf\uff0c\u5176\u4e2d \\(p_k=1\\) \uff0c\u5176\u4f59\u4e3a 0\uff0c\u90a3\u4e48 \\(H(p, q) =-log(q_k)\\) \uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4ea4\u53c9\u71b5\u53ea\u5173\u5fc3\u5bf9\u6b63\u786e\u7c7b\u522b\u7684\u9884\u6d4b\u6982\u7387\uff0c\u5e0c\u671b\u5176\u5c3d\u91cf\u5927","title":"Cross Entropy"},{"location":"ML/3_Logistic%20Regression/#step-3find-the-best-function","text":"\u5373\u627e\u5230\u4f7f Loss Function \u5373 Cross Entropy \u6700\u5c0f\u7684\u4e00\u7ec4 \\(w^*,b^*\\) \uff0c\u8fd9\u91cc\u8fd0\u7528 Gradient Descent \\[ \\begin{align} P_{w,b}(C_1|x)=\\sigma(z)=\\frac{1}{1+e^{-z}} \\\\ z=w\\cdot x+b=\\sum\\limits_i w_ix_i+b \\end{align} \\] \\[ \\begin{align} f_{w,b}(x)=P_{w,b}(C_1|x) \\end{align} \\] \\[ -\\ln L(w,b)=\\sum\\limits_n -[\\hat{y}^n \\ln f_{w,b}(x^n)+(1-\\hat{y}^n) \\ln(1-f_{w,b}(x^n))] \\] Sigmoid Function \u7684\u5fae\u5206\u516c\u5f0f\uff1a $$ \\frac{\\partial \\sigma(z)}{\\partial z}=\\sigma(z)(1-\\sigma(z)) $$ \u8ba1\u7b97 \\(-\\ln L(w,b)=\\sum\\limits_n -[\\hat{y}^n \\ln f_{w,b}(x^n)+(1-\\hat{y}^n) \\ln(1-f_{w,b}(x^n))]\\) \u5bf9 \\(w_i\\) \u7684\u504f\u5fae\u5206\uff0c\u5176\u4e2d \\(\\hat{y}^n\\) \u548c \\(1-\\hat{y}^n\\) \u662f\u5e38\u6570\uff0c\u53ea\u9700\u8981\u5206\u522b\u6c42\u51fa \\(\\ln f_{w,b}(x^n)\\) \u548c \\(\\ln (1-f_{w,b}(x^n))\\) \u5bf9 \\(w_i\\) \u7684\u504f\u5fae\u5206\u5373\u53ef\uff0c\u6574\u4f53\u63a8\u5bfc\u8fc7\u7a0b\u5982\u4e0b\uff1a \u7ed3\u679c\u5e26\u5165\u5f97\uff1a \u6240\u4ee5\uff1a $$ w_{i+1}=w_i-\\eta \\sum\\limits_{n}-(\\hat{y}^n-f_{w,b}(x^n))x_i^n $$ \\(-\\eta\\) \uff1alearning rate \\(x_i\\) \uff1adata \\(\\hat{y}^n-f_{w,b}(x^n)\\) \uff1a\u4e0e\u7406\u60f3 function set \u7684\u5dee\u8ddd\uff0c\u5dee\u8ddd\u8d8a\u5927 update \u7684\u6b65\u4f10\u8d8a\u5927 \u540c\u7406\u53ef\u5f97\uff1a $$ b_{i+1}=w_i-\\eta \\sum\\limits_{n}-(\\hat{y}^n-f_{w,b}(x^n)) $$ \u6211\u4eec\u4f1a\u53d1\u73b0 Logistic Regression \u7684\u7ed3\u679c\u662f\u548c Linear Regresison \u7684\u5f0f\u5b50\u662f\u4e00\u6837\u7684","title":"step 3\uff1aFind the best function"},{"location":"ML/3_Logistic%20Regression/#comparison","text":"","title":"Comparison"},{"location":"ML/3_Logistic%20Regression/#logistic-regression-linear-regression","text":"\u4e24\u8005\u90fd\u662f\u901a\u8fc7\u5bf9\u6bcf\u4e00\u4e2a feature \\(x_i\\) \u52a0\u6743\u6c42\u548c\u540e\u52a0\u4e0a\u4e00\u4e2a\u5e38\u6570\uff0c\u533a\u522b\u5728\u4e8e Logistic Regression \u6700\u540e\u53c8\u901a\u8fc7\u4e86\u4e00\u4e2a Sigmoid Function\uff0c\u5b83\u7684\u7ed3\u679c\u662f 0~1\uff0c\u800c Linear Regression \u4e0d\u7ecf\u8fc7 Sigmoid Function\uff0c\u7ed3\u679c\u53ef\u4ee5\u662f\u4efb\u610f\u503c Logistic Regression \u7684 Loss Function \u7528\u7684\u4ea4\u53c9\u71b5\u5b9a\u4e49\uff0c\u800c Linear Regression \u7528\u7684 Square Error","title":"Logistic Regression &amp;&amp; Linear Regression"},{"location":"ML/3_Logistic%20Regression/#logistic-regression-square-error","text":"\u5047\u8bbe\u4f7f\u7528 Logistic Regression + Square Error\uff0c \u5982\u679c\u6b64\u65f6 \\(\\hat{y}^n=1\\) \uff0c\u800c\u4e14 function \u7684 output \\(f_{w,b}(x^n)=1\\) \u7684\u8bdd\uff0c\u8bf4\u660e\u73b0\u5728\u79bb target \u5f88\u63a5\u8fd1\u4e86\uff0c \\(f_{w,b}(x)-\\hat{y}=0\\) \uff0c\u4e8e\u662f\u5f97\u5230\u7684\u5fae\u5206 \\(\\frac{\\partial L}{\\partial w_i}\\) \u7b49\u4e8e 0\uff0c\u8fd9\u4ef6\u4e8b\u60c5\u662f\u5f88\u5408\u7406\u7684\uff1b\u4f46\u662f\u5f53 function \u7684 output \\(f_{w,b}(x^n)=0\\) \u7684\u65f6\u5019\uff0c\u8bf4\u660e\u79bb target \u8fd8\u5f88\u9065\u8fdc\uff0c\u4f46\u662f\u7531\u4e8e\u5728step3 \u4e2d\u6c42\u51fa\u6765\u7684 update \u8868\u8fbe\u5f0f\u4e2d\u6709\u4e00\u4e2a \\(f_{w,b}(x^n)\\) \uff0c\u56e0\u6b64\u8fd9\u4e2a\u65f6\u5019\u4e5f\u4f1a\u5bfc\u81f4\u5f97\u5230\u7684\u5fae\u5206 \\(\\frac{\\partial L}{\\partial w_i}\\) \u4e5f\u7b49\u4e8e 0 \u5c06 Loss Function \u9009\u62e9 Cross Entropy \u6216 Square Error \u7684\u53d8\u5316\u60c5\u51b5\u53ef\u89c6\u5316\u4e4b\u540e\u5982\u4e0b\u6240\u793a\uff08\u9ed1\u8272\uff1aCross Entropy \u7ea2\u8272\uff1aSquare Error\uff09 \u53ef\u89c1 Square Error \u4f1a\u5f88\u6162\uff0c\u751a\u81f3\u53ef\u80fd\u4e0d\u4f1a\u52a8","title":"Logistic Regression + Square Error \uff1f"},{"location":"ML/3_Logistic%20Regression/#discriminative-generative","text":"\u628a Logistic Regression \u7684\u65b9\u6cd5\u79f0\u4e4b\u4e3a Discriminative \u7684\u65b9\u6cd5\uff0c\u7528 Gaussian \u6765\u63cf\u8ff0 Posterior Probability \u7684\u65b9\u6cd5\u79f0\u4e4b\u4e3a Generative \u7684\u65b9\u6cd5 \u4ed6\u4eec\u7684 Function Set \u90fd\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f \\(P(C_1|x)=\\sigma(w\\cdot x+b)\\) Logistic Regression \u662f\u901a\u8fc7 Gradient Descent \u7684\u65b9\u6cd5\u76f4\u63a5\u627e\u51fa \\(b\\) \u548c \\(w\\) \uff0c\u800c Generative Model \u7684\u65b9\u6cd5\u662f\u5148\u7b97 \\(u_1,u_2,\\Sigma^{-1}\\) \uff0c\u518d\u6c42 \\(b\\) \u548c \\(w\\) \u4f46\u8fd9\u4e24\u8005\u65b9\u6cd5\u7684\u51fa\u6765\u7684 \\(b\\) \u548c \\(w\\) \u662f\u4e0d\u4e00\u6837\u7684 \u539f\u56e0\u662f\u5728 Logistic Regression \u4e2d \u6ca1\u6709\u505a\u4efb\u4f55\u5b9e\u8d28\u6027\u7684\u5047\u8bbe \uff0c\u5355\u7eaf\u7684\u53bb\u627e \\(w\\) \u548c \\(b\\) \uff0c\u800c\u5728 Generative Model \u4e2d\u5047\u8bbe\u4e86 Gaussion Distribution Discriminative \u7684\u65b9\u6cd5\u5e38\u5e38\u4f1a\u6bd4 Generative \u7684\u65b9\u6cd5\u8868\u73b0\u5f97\u66f4\u597d discriminative model \u5e76\u4e0d\u662f\u5728\u6240\u6709\u7684\u60c5\u51b5\u4e0b\u90fd\u53ef\u4ee5\u8d62\u8fc7 Generative model\uff0cdiscriminative model \u662f\u5341\u5206\u4f9d\u8d56\u4e8e data \u7684\uff0c\u5f53 data \u6570\u91cf\u4e0d\u8db3\u6216\u662f data \u672c\u8eab\u7684 label\u5c31\u6709\u4e00\u4e9b\u95ee\u9898\uff0c\u90a3Generative model\u505a\u4e00\u4e9b\u5047\u8bbe\uff0c\u53cd\u800c\u53ef\u4ee5\u628a data \u7684\u4e0d\u8db3\u6216\u662f\u6709\u95ee\u9898\u90e8\u5206\u7684\u5f71\u54cd\u7ed9\u964d\u5230\u6700\u4f4e \u5728 Generative model \u4e2d\uff0cpriors probabilities \u548c class-dependent probabilities \u662f\u53ef\u4ee5\u62c6\u5f00\u6765\u8003\u8651\u7684\uff0c\u4ee5\u8bed\u97f3\u8fa8\u8bc6\u4e3a\u4f8b\uff0c\u73b0\u5728\u7528\u7684\u90fd\u662f neural network\uff0c\u662f\u4e00\u4e2adiscriminative \u7684\u65b9\u6cd5\uff0c\u4f46\u4e8b\u5b9e\u4e0a\u6574\u4e2a\u8bed\u97f3\u8fa8\u8bc6\u7684\u7cfb\u7edf\u662f\u4e00\u4e2a Generative \u7684 system\uff0c\u5b83\u7684 prior probability \u662f\u67d0\u4e00\u53e5\u8bdd\u88ab\u8bf4\u51fa\u6765\u7684\u51e0\u7387\uff0c\u800c\u60f3\u8981 estimate \u67d0\u4e00\u53e5\u8bdd\u88ab\u8bf4\u51fa\u6765\u7684\u51e0\u7387\u5e76\u4e0d\u9700\u8981\u6709\u58f0\u97f3\u7684 data\uff0c\u53ef\u4ee5\u53bb\u4e92\u8054\u7f51\u4e0a\u722c\u53d6\u5927\u91cf\u6587\u5b57\uff0c\u5c31\u53ef\u4ee5\u8ba1\u7b97\u51fa\u67d0\u4e00\u6bb5\u6587\u5b57\u51fa\u73b0\u7684\u51e0\u7387\uff0c\u5e76\u4e0d\u9700\u8981\u58f0\u97f3\u7684 data\uff0c\u8fd9\u4e2a\u5c31\u662f language model\uff0c\u800c class-dependent \u7684\u90e8\u5206\u624d\u9700\u8981\u58f0\u97f3\u548c\u6587\u5b57\u7684\u914d\u5408\uff0c\u8fd9\u6837\u7684\u5904\u7406\u53ef\u4ee5\u628a prior \u9884\u6d4b\u5730\u66f4\u7cbe\u786e","title":"Discriminative &amp;&amp; Generative"},{"location":"ML/3_Logistic%20Regression/#conclusion","text":"\u5bf9\u4e8e\u5206\u7c7b\u95ee\u9898\uff08\u4e3b\u8981\u662f\u4e8c\u5143\u5206\u7c7b\uff09\uff0c\u4e00\u822c\u6709\u4e24\u79cd\u65b9\u6cd5\u5904\u7406\uff1aGenerative \u7684\u65b9\u6cd5\uff0cDiscriminative \u7684\u65b9\u6cd5 \\[ \\begin{align} P(C_i|x)=\\frac{P(C_i)P(x|C_i)}{\\sum\\limits_{j=1}^nP(C_j)P(x|C_j)} \\\\ \\sigma(z)=\\frac{1}{1+e^{-z}}=\\frac{1}{1+e^{-(b+\\sum\\limits_k w_k x_k)}} \\end{align} \\] \u4e24\u8005\u7684\u533a\u522b\u5728\u4e8e\uff1a Generative model \u901a\u5e38\u4f1a\u5047\u8bbe\u4e00\u4e2a\u6982\u7387\u5206\u5e03\uff0c\u7136\u540e\u53bb\u5229\u7528\u6781\u5927\u4f3c\u7136\u4f30\u8ba1\u8ba1\u7b97 \\(b\\) \u548c \\(w\\) \uff1bDiscriminative model \u4e0d\u505a\u4efb\u4f55\u5047\u8bbe\uff0c\u5229\u7528\u4ea4\u53c9\u71b5\u548c gradient descent \u8ba1\u7b97 \\(b\\) \u548c \\(w\\) Generative model \u7684\u597d\u5904\u662f\uff0c\u5b83\u5bf9data\u7684\u4f9d\u8d56\u5e76\u6ca1\u6709\u50cfdiscriminative model \u90a3\u4e48\u4e25\u91cd\uff0c\u5728data\u6570\u91cf\u5c11\u6216\u8005data\u672c\u8eab\u5c31\u5b58\u5728noise\u7684\u60c5\u51b5\u4e0b\u53d7\u5230\u7684\u5f71\u54cd\u4f1a\u66f4\u5c0f\uff0c\u800c\u5b83\u8fd8\u53ef\u4ee5\u505a\u5230 Prior \u90e8\u5206\u4e0e class-dependent \u90e8\u5206\u5206\u5f00\u5904\u7406\uff0c\u5982\u679c\u53ef\u4ee5\u501f\u52a9\u5176\u4ed6\u65b9\u5f0f\u63d0\u9ad8 Prior model \u7684\u51c6\u786e\u7387\uff0c\u5bf9\u6574\u4e00\u4e2a model \u662f\u6709\u6240\u5e2e\u52a9\u7684 (\u6bd4\u5982\u524d\u9762\u63d0\u5230\u7684\u8bed\u97f3\u8fa8\u8bc6) \u800c Discriminative model \u7684\u597d\u5904\u662f\uff0c\u5728 data \u5145\u8db3\u7684\u60c5\u51b5\u4e0b\uff0c\u5b83\u8bad\u7ec3\u51fa\u6765\u7684 model \u7684\u51c6\u786e\u7387\u4e00\u822c\u662f\u6bd4 Generative model \u8981\u6765\u7684\u9ad8\u7684","title":"Conclusion"},{"location":"ML/3_Logistic%20Regression/#multi-class-classification","text":"","title":"Multi-class Classification"},{"location":"ML/3_Logistic%20Regression/#softmax","text":"\u5047\u8bbe\u6709\u4e09\u4e2a Class\uff1a \\(C_1,C_2,C_3\\) \uff0c\u6bcf\u4e00\u4e2a Class \u90fd\u6709\u81ea\u5df1\u7684 weight \u548c bias\uff0c\u5206\u522b\u662f \\(w_1,w_2,w_3\\) (vector)\uff0c \\(b_1,b_2,b_3\\) (const)\uff0cinput x \u4e5f\u662f\u4e00\u4e2a vector \u90a3\u4e48 \\(z_i=w^ix+b_i\\) softmax\uff1a\u5f3a\u5316\u6700\u5927\u503c\uff0c\u56e0\u4e3a\u505a exponential \u4f1a\u8ba9\u539f\u672c\u5927\u7684\u503c\u53d8\u5f97\u66f4\u5927 \u7136\u540e\u628a \\(z_1,z_2,z_3\\) \u4e22\u8fdb\u4e00\u4e2a softmax \u7684 function \u53d6 exponential\uff0c\u5f97\u5230 \\(e^{z_1},e^{z_2},e^{z_3}\\) \u5f52\u4e00\u5316\uff0c\u5f97\u5230 \\(y_1=\\frac{e^{z_1}}{\\sum\\limits_{j=1}^3 e^{z_j}}\\) \u3001 \\(y_2=\\frac{e^{z_2}}{\\sum\\limits_{j=1}^3 e^{z_j}}\\) \u3001 \\(y_3=\\frac{e^{z_3}}{\\sum\\limits_{j=1}^3 e^{z_j}}\\) softmax \u7684 output\uff0c\u5c31\u62ff\u6765\u5f53 z \u7684 probability","title":"Softmax"},{"location":"ML/3_Logistic%20Regression/#multi-class-classification_1","text":"input x \u7ecf\u8fc7\u4e09\u4e2a\u5f0f\u5b50\u540e\u5206\u522b\u751f\u6210 \\(z_1,z_2,z_3\\) \uff0c\u7ecf\u8fc7 softmax \u540e\u8f6c\u6362\u6210 \\(y_1,y_2,y_3\\) \uff0c\u8fd9\u5206\u522b\u662f\u4e09\u4e2a class \u7684 posterior probability \u4e3a\u4e86\u8ba1\u7b97\u4ea4\u53c9\u71b5\uff0c\u4e0d\u80fd\u628a targrt \u8bbe\u4e3a 1,2,3\uff0c\u8fd9\u91cc\u4f7f\u7528\u5411\u91cf \\[ \\hat{y}= \\begin{bmatrix} 1\\\\0\\\\0 \\end{bmatrix}_{x \\ \u2208 \\ class 1} \\hat{y}= \\begin{bmatrix} 0\\\\1\\\\0 \\end{bmatrix}_{x \\ \u2208 \\ class 2} \\hat{y}= \\begin{bmatrix} 0\\\\0\\\\1 \\end{bmatrix}_{x \\ \u2208 \\ class 3} \\] \u7136\u540e\u8ba1\u7b97 \\(y\uff0c\\hat{y}\\) \u4e4b\u95f4\u7684\u4ea4\u53c9\u71b5\uff0c \\(-\\sum\\limits_{i=1}^3 \\hat{y}_i \\ln y_i\\)","title":"multi-class classification \u7684\u8fc7\u7a0b"},{"location":"ML/3_Logistic%20Regression/#limitation-of-logistic-regression","text":"Logistic Regression \u6709\u5f88\u5f3a\u7684\u9650\u5236\uff0c\u56e0\u4e3a\u4ed6\u7684 boundary \u662f\u4e00\u6761\u76f4\u7ebf\uff0c\u800c\u5bf9\u4e8e\u4e0b\u9762\u7684\u4f8b\u5b50 \\(x_1\\) \\(x_2\\) label 0 0 class2 0 1 class1 1 0 class1 1 1 class2 \u5728\u5750\u6807\u8f74\u4e0a\u662f\u4e0d\u53ef\u80fd\u753b\u4e00\u6761 boundary \u6765\u533a\u5206 class1 \u548c class2 \u7684","title":"Limitation of Logistic Regression"},{"location":"ML/3_Logistic%20Regression/#feature-transformation","text":"\u5982\u679c\u539f\u6765\u7684 feature \u4e0d\u597d\u505a\u5212\u5206\uff0c\u53ef\u4ee5\u7528 Feature Transformation \uff0c\u8f6c\u6362\u4e4b\u540e\u53d8\u5f97\u53ef\u4ee5\u5212\u5206\u3002 \u5047\u5b9a\u65b0\u7684 x \u8f74 \\(x'_1\\) \u8868\u793a\u539f\u6765\u7684\u70b9\u5230 \\(\\begin{bmatrix}0\\\\0\\end{bmatrix}\\) \u7684\u8ddd\u79bb\uff0c\u65b0\u7684 y \u8f74 \\(x'_2\\) \u8868\u793a\u7684\u662f\u539f\u6765\u7684\u70b9\u5230 \\(\\begin{bmatrix}1\\\\1\\end{bmatrix}\\) \u7684\u8ddd\u79bb\uff0c\u91cd\u65b0\u6620\u5c04\u4e4b\u540e\u5c31\u53d8\u5f97\u53ef\u5212\u5206\u4e86 \u9ebb\u70e6\u7684\u662f\u5f88\u591a\u65f6\u5019\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u600e\u4e48\u505a Feature Transformation\uff0c\u4e8e\u662f\u6211\u4eec\u4f1a\u5e0c\u671b\u8fd9\u4e2a Transformation \u662f\u673a\u5668\u81ea\u5df1\u4ea7\u751f\u7684\uff0c\u600e\u4e48\u8ba9\u673a\u5668\u81ea\u5df1\u4ea7\u751f\u5462\uff1f \u6211\u4eec\u53ef\u4ee5\u8ba9\u5f88\u591aLogistic Regression cascade\uff08\u8fde\u63a5\uff09\u8d77\u6765 \u5373\u5148\u901a\u8fc7\u4e00\u4e2a Logistic Regression \u7684 Transform \u4f7f\u5f97\u65b0\u7684 feature \\(x'_1,x'_2\\) \u662f\u53ef\u4ee5\u5212\u5206\u7684\uff0c\u7136\u540e\u518d\u7ecf\u8fc7\u4e00\u4e2a Logistic Regression \u5c31\u53ef\u4ee5\u628a class1 \u548c class2 \u5206\u5f00 \u6240\u4ee5\u6574\u4e2a\u6d41\u7a0b\u662f\uff1a\u5148\u901a\u8fc7 n\uff08n\u4e3a\u6bcf\u4e2a\u6837\u672c\u70b9\u7684feature\u6570\u91cf\uff09\u4e2a Logistic Regression \u505a feature Transformation\uff0c\u7136\u540e\u518d\u7528\u4e00\u4e2a Logistic Regression \u505a classification\uff08\u5982\u679c\u662f\u591a\u5143\u5206\u7c7b\u9700\u8981\u7528\u5230\u591a\u4e2a Logistic Regression \u753b\u51fa\u591a\u6761\u76f4\u63a5\u5212\u5206\u6240\u6709\u7684\u7c7b\uff09 \u6211\u4eec\u5982\u679c\u628a\u8fd9\u5176\u4e2d\u7684\u6bcf\u4e2a Logistic Regression \u53eb\u505a\u4e00\u4e2a Neuron\uff0c\u628a\u8fd9\u4e9b Logistic Regression \u4e32\u8d77\u6765\u5f62\u6210\u7684 network \u53eb\u505a Neural Network\uff0c\u5341\u4e5d\u7c7b\u795e\u7ecf\u7f51\u7edc\uff0c\u5c31\u662f Deep Learning","title":"Feature Transformation"},{"location":"ML/4_Deep%20learning/","text":"Deep Learning \u00b6 Neural Network \u00b6 Concept \u00b6 \u628a\u591a\u4e2a Logistic Regression \u524d\u540e connect \u5728\u4e00\u8d77\uff0c\u7136\u540e\u628a\u4e00\u4e2a Logistic Regression \u79f0\u4e4b\u4e3a neuron\uff0c\u6574\u4e2a\u79f0\u4e4b\u4e3a neural network Fully Connect Feedforward Network \u00b6 Neural Network \u7684\u8fde\u63a5\u65b9\u5f0f\u662f\u9700\u8981\u4f60\u624b\u52a8\u53bb\u8bbe\u8ba1\u7684\uff0c\u6700\u5e38\u89c1\u7684\u8fde\u63a5\u65b9\u5f0f\u53eb\u505a Fully Connect Feedforward Network (\u5168\u8fde\u63a5\u524d\u9988\u7f51\u7edc) Neural Network \u662f\u4e00\u5c42\u4e00\u5c42\u7684\u7ed3\u6784\uff0clayer \u548c layer \u4e4b\u95f4 neuron \u662f\u4e24\u4e24\u4e92\u76f8\u8fde\u63a5\u7684\uff0clayer1 \u7684 neuron output \u4f1a\u8fde\u63a5\u7ed9 layer2 \u7684\u6bcf\u4e00\u4e2a neuron \u4f5c\u4e3a input \u5206\u4e3a\u4e09\u7c7b\uff1ainput layer\uff0coutput layer\uff0chidden layer \u6bcf\u4e00\u4e2a neuron \u91cc\u9762\u7684 sigmoid function\uff0c\u5728 Deep Learning \u4e2d\u88ab\u79f0\u4e3a activation function (\u6fc0\u52b1\u51fd\u6570)\uff0c\u5e76\u4e0d\u4e00\u5b9a\u8981\u7528 sigmoid function\uff08\u800c\u4e14 sigmoid function \u73b0\u5728\u5df2\u7ecf\u7528\u7684\u5f88\u5c11\u4e86\uff09 \u6709\u5f88\u591a\u5c42 layers \u7684 neural network\uff0c\u88ab\u79f0\u4e3a DNN(Deep Neural Network) \u8fd9\u91cc\u9762\u7684\u6240\u6709\u53d8\u91cf\u90fd\u7528\u77e9\u9635\u7684\u5f62\u5f0f\u8868\u793a\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ef\u4ee5\u5229\u7528 GPU \u52a0\u901f Output Layer \u00b6 \u6211\u4eec\u53ef\u4ee5\u628a hidden layers \u8fd9\u90e8\u5206\uff0c\u770b\u505a\u662f\u4e00\u4e2a feature extractor(\u7279\u5f81\u63d0\u53d6\u5668) \uff0c\u8fd9\u4e2a feature extractor \u5c31 replace \u4e86\u6211\u4eec\u4e4b\u524d\u624b\u52a8\u505a feature engineering\uff0cfeature transformation \u8fd9\u4e9b\u4e8b\u60c5\uff0c\u7ecf\u8fc7\u8fd9\u4e2a feature extractor \u5f97\u5230\u7684 \\(x_1,x_2,...,x_k\\) \u5c31\u53ef\u4ee5\u88ab\u5f53\u4f5c\u4e00\u7ec4\u65b0\u7684 feature output layer \u505a\u7684\u4e8b\u60c5\uff0c\u5176\u5b9e\u5c31\u662f\u628a\u5b83\u5f53\u505a\u4e00\u4e2a Multi-class classifier \uff0c\u5b83\u662f\u62ff\u7ecf\u8fc7 feature extractor \u8f6c\u6362\u540e\u7684\u90a3\u4e00\u7ec4\u6bd4\u8f83\u597d\u7684 feature (\u80fd\u591f\u88ab\u5f88\u597d\u5730separate) \u8fdb\u884c\u5206\u7c7b\u7684\uff0c\u7531\u4e8e\u6211\u4eec\u628a output layer \u770b\u505a\u662f\u4e00\u4e2a Multi-class classifier\uff0c\u6240\u4ee5\u6211\u4eec\u4f1a\u5728\u6700\u540e\u4e00\u4e2a layer \u52a0\u4e0a softmax Backpropagation \u00b6 Backpropagation(\u53cd\u5411\u4f20\u64ad)\uff0c\u5c31\u662f\u544a\u8bc9\u6211\u4eec\u7528 gradient descent \u6765 train\u4e00\u4e2a neural network \u7684\u65f6\u5019\u8be5\u600e\u4e48\u505a\uff0c\u5b83\u53ea\u662f\u6c42\u5fae\u5206\u7684\u4e00\u79cd\u65b9\u6cd5\uff0c\u800c\u4e0d\u662f\u4e00\u79cd\u65b0\u7684\u7b97\u6cd5 \u7f51\u7edc\u5b66\u4e60\u7684\u8fc7\u7a0b\u5c31\u662f\u4e0d\u65ad\u8fdb\u884c \u6b63\u5411\u4f20\u64ad\uff0c\u53cd\u5411\u4f20\u64ad\uff08\u8ba1\u7b97\u51fa gradient\uff09\uff0c\u66f4\u65b0\u53c2\u6570 \u5bf9\u6574\u4e2a neural network\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a loss function\uff1a \\(L(\\theta)=\\sum\\limits_{n=1}^N l^n(\\theta)\\) \uff0c\u5b83\u7b49\u4e8e\u6240\u6709 training data \u7684 loss \u4e4b\u548c\uff0c\u5176\u4e2d \\(l^n\\) \u662f\u6837\u672c \\(x^n\\) \u4e0e target \\(\\hat{y}^n\\) \u7684 cross entropy\uff1b\u7136\u540e summary \u6240\u6709\u7684training data \u7684 cross entropy \u540e\u5f97\u5230 \\(L(\\theta)\\) \uff0c\u5bf9\u5176\u505a\u67d0\u4e00\u4e2a\u53c2\u6570w\u505a\u504f\u5fae\u5206\uff0c\u8868\u8fbe\u5f0f\u5982\u4e0b\uff1a $$ \\frac{\\partial L(\\theta)}{\\partial w}=\\sum\\limits_{n=1}^N\\frac{\\partial l^n(\\theta)}{\\partial w} $$ \u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u5982\u4f55\u8ba1\u7b97\u5bf9\u67d0\u4e00\u7b14 data \u7684 \\(\\frac{\\partial l^n(\\theta)}{\\partial w}\\) \u5373\u53ef \u5bf9\u4e8e\u5176\u4e2d\u4e00\u4e2a neuron\uff0c\u6709 \\(z=b+w_1 x_1+w_2 x_2\\) \uff0c\u90a3\u4e48 \\(\\frac{\\partial l}{\\partial w}=\\frac{\\partial z}{\\partial w} \\frac{\\partial l}{\\partial z}\\) \u4e2d\uff0c\u524d\u9762\u7684\u4e00\u4e2a\u662f\u6bd4\u8f83\u597d\u7b97\u7684\uff0c\u540e\u9762\u7684\u4e00\u4e2a\u662f\u6bd4\u8f83\u9ebb\u70e6\u7684 Forward pass \u00b6 \u5148\u8003\u8651 \\(\\frac{\\partial z}{\\partial w}\\) \u8fd9\u4e00\u9879\uff0c\u53ef\u4ee5\u79d2\u7b97\u51fa\u6765\uff0c \\(\\frac{\\partial z}{\\partial w_1}=x_1 ,\\ \\frac{\\partial z}{\\partial w_2}=x_2\\) \uff0c\u5373 \\(w_1,w_2\\) \u7cfb\u6570\u5bf9\u5e94\u7684\u8f93\u5165\u503c\uff0c\u540c\u65f6\u4e5f\u662f\u524d\u4e00\u4e2a layer \u7684\u8f93\u51fa\u503c Backward pass \u00b6 \u518d\u8003\u8651 \\(\\frac{\\partial l}{\\partial z}\\) \u8fd9\u4e00\u9879\uff0c\u5b83\u662f\u6bd4\u8f83\u590d\u6742\u7684\uff0c\u8fd9\u91cc\u6211\u4eec\u4f9d\u65e7\u5047\u8bbe activation function \u662f sigmoid function $$ \\frac{\\partial l}{\\partial z}=\\frac{\\partial a}{\\partial z} \\frac{\\partial l}{\\partial a} $$ \u524d\u9762 \\(\\frac{\\partial a}{\\partial z}\\) \u5c31\u662f sigmoid function \u7684\u504f\u5fae\u5206 \u540e\u9762 \\(\\frac{\\partial l}{\\partial a}\\) \u4e3a\u5982\u4e0b\u5f62\u5f0f\uff1a $$ \\frac{\\partial l}{\\partial a}=\\frac{\\partial z'}{\\partial a} \\frac{\\partial l}{\\partial z'}+\\frac{\\partial z''}{\\partial a} \\frac{\\partial l}{\\partial z''} $$ \u8fd9\u6837\u770b\u6765\u5176\u5b9e\u662f\u4e00\u4e2a\u9012\u5f52\u7684\u5f62\u5f0f\uff0c\u5728 output layer \u5f80\u524d\u7b97\u4fbf\u53ef\u4ee5\u6c42\u51fa\u6240\u6709\u7684 \\(\\frac{\\partial l}{\\partial a}\\) \u8ba8\u8bba\u4e00\u4e0b output layer \u7684\u7ed3\u679c\uff1a $$ \\frac{\\partial l}{\\partial z'}=\\frac{\\partial y_1}{\\partial z'} \\frac{\\partial l}{\\partial y_1} $$ \u5176\u4e2d \\(\\frac{\\partial y_1}{\\partial z'}\\) \u5c31\u662f output layer\u7684 activation function (softmax) \u5bf9 \\(z'\\) \u7684\u504f\u5fae\u5206 \u800c \\(\\frac{\\partial l}{\\partial y_1}\\) \u5c31\u662f loss \u5bf9 \\(y_1\\) \u7684\u504f\u5fae\u5206\uff0c\u5b83\u53d6\u51b3\u4e8e\u4f60\u7684 loss function \u662f\u600e\u4e48\u5b9a\u4e49\u7684\uff0c\u4e5f\u5c31\u662f\u4f60\u7684 output \u548c target \u4e4b\u95f4\u662f\u600e\u4e48 evaluate \u7684\uff0c\u4f60\u53ef\u4ee5\u7528 cross entropy\uff0c\u4e5f\u53ef\u4ee5\u7528 mean square error\uff0c\u7528\u4e0d\u540c\u7684\u5b9a\u4e49\uff0c \\(\\frac{\\partial l}{\\partial y_1}\\) \u7684\u503c\u5c31\u4e0d\u4e00\u6837 Why Deep? \u00b6 \u4e3a\u4ec0\u4e48\u6211\u4eec\u8981 deep learning\uff1f\u4e00\u4e2a\u5f88\u76f4\u89c9\u7684\u7b54\u6848\u662f\uff0c\u8d8a deep\uff0cperformance \u5c31\u8d8a\u597d\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u968f\u7740 deep learning \u4e2d\u7684 layers \u6570\u91cf\u589e\u52a0\uff0cerror \u7387\u4e0d\u65ad\u964d\u4f4e \u751a\u81f3\u6709\u4e00\u4e2a\u7406\u8bba\u662f\u8fd9\u6837\u8bf4\u7684\uff0c\u4efb\u4f55\u8fde\u7eed\u7684 function\uff0c\u5b83 input \u662f\u4e00\u4e2a N \u7ef4\u7684 vector\uff0coutput \u662f\u4e00\u4e2a M \u7ef4\u7684 vector\uff0c\u5b83\u90fd\u53ef\u4ee5\u7528\u4e00\u4e2a hidden layer \u7684 neural network \u6765\u8868\u793a\uff0c\u53ea\u8981\u4f60\u8fd9\u4e2a hidden layer \u7684 neuron \u591f\u591a\uff0c\u5b83\u53ef\u4ee5\u8868\u793a\u6210\u4efb\u4f55\u7684 function\uff0c\u65e2\u7136\u4e00\u4e2a hidden layer \u7684 neural network \u53ef\u4ee5\u8868\u793a\u6210\u4efb\u4f55\u7684 function\uff0c\u800c\u6211\u4eec\u5728\u505a machine learning \u7684\u65f6\u5019\uff0c\u9700\u8981\u7684\u4e1c\u897f\u5c31\u53ea\u662f\u4e00\u4e2a function \u800c\u5df2\uff0c\u90a3\u505a deep \u6709\u4ec0\u4e48\u7279\u6b8a\u7684\u610f\u4e49\u5462\uff1f Design network structure V.s. Feature Engineering \u00b6 \u4e0b\u9762\u804a\u4e00\u4e9b\u7ecf\u9a8c\u4e4b\u8c08 network structure \u7684 design \u662f\u4e00\u4ef6\u4e0d\u5bb9\u6613\u7684\u4e8b\uff0c\u5f88\u591a\u65f6\u5019\u9700\u8981\u9760\u7ecf\u9a8c\u76f4\u89c9\uff0c\u4e43\u81f3\u4e00\u4e9b domain knowledge (\u4e13\u4e1a\u9886\u57df\u7684\u77e5\u8bc6) \u672c\u6765\u4e0d\u662f deep learning \u7684 model\uff0c\u8981\u5f97\u5230\u4e00\u4e2a\u597d\u7684\u7ed3\u679c\uff0c\u5f80\u5f80\u9700\u8981\u505a feature engineering (\u7279\u5f81\u5de5\u7a0b)\uff0c\u4e5f\u5c31\u662f\u505a feature transform\uff0c\u7136\u540e\u627e\u4e00\u7ec4\u597d\u7684 feature\uff1b\u4e00\u5f00\u59cb\u5b66\u4e60 deep learning \u7684\u65f6\u5019\uff0c\u597d\u50cf\u4f1a\u89c9\u5f97 deep learning \u7684 layers \u4e4b\u95f4\u4e5f\u662f\u5728\u505a feature transform\uff0c\u4f46\u5b9e\u9645\u4e0a\u5728\u505a deep learning \u7684\u65f6\u5019\uff0c\u5f80\u5f80\u4e0d\u9700\u8981\u4e00\u4e2a\u597d\u7684 feature \uff0c\u6bd4\u5982\u8bf4\u5728\u505a\u5f71\u50cf\u8fa8\u8bc6\u7684\u65f6\u5019\uff0c\u4f60\u53ef\u4ee5\u628a\u6240\u6709\u7684 pixel \u76f4\u63a5\u4e22\u8fdb\u53bb\uff0c\u4f46\u662f\u5728\u8fc7\u53bb\u505a\u56fe\u50cf\u8bc6\u522b\uff0c\u4f60\u662f\u9700\u8981\u5bf9\u56fe\u50cf\u62bd\u53d6\u51fa\u4e00\u4e9b\u4eba\u5b9a\u7684 feature \u51fa\u6765\u7684\uff0c\u8fd9\u4ef6\u4e8b\u60c5\u5c31\u662ffeature transform\uff0c\u4f46\u662f\u6709\u4e86deep learning \u4e4b\u540e\uff0c\u4f60\u5b8c\u5168\u53ef\u4ee5\u76f4\u63a5\u4e22 pixel \u8fdb\u53bb\u786c\u505a deep learning \u5236\u9020\u4e86\u65b0\u7684\u95ee\u9898\uff0c\u5c31\u662f design network \u7684 structure\uff0c\u6240\u4ee5\u95ee\u9898\u53d8\u6210\u4e86 design structure \u548c feature transform \u54ea\u4e00\u4e2a\u66f4\u5bb9\u6613 \u5bf9\u4e8e\u4e00\u4e9b feature transform \u5f88\u96be\u505a\u7684\u4e8b\u60c5\u6bd4\u5982 \u8bed\u97f3\u548c\u6620\u50cf \u8fa8\u8bc6\uff0c\u7528 deep learning \u5c31\u8fdb\u6b65\u7684\u5f88\u5feb\uff1b\u4f46\u5728\u6587\u5b57\u65b9\u9762\u6bd4\u5982\u8bbe\u8ba1\u4e00\u4e2a rule \u53bb detect \u4e00\u7bc7 document \u662f\u6b63\u9762\u7684\u60c5\u7eea\u8fd8\u662f\u8d1f\u9762\u7684\u60c5\u7eea\u65f6\uff0cdeep learning \u76f8\u8f83\u4e8e\u4f20\u7edf\u7684\u65b9\u6cd5\u8fdb\u6b65\u4e0d\u660e\u663e \u957f\u4e45\u800c\u8a00\uff0c\u53ef\u80fd\u6587\u5b57\u5904\u7406\u4e2d\u4f1a\u6709\u4e00\u4e9b\u9690\u85cf\u7684\u8d44\u8baf\u662f\u4eba\u81ea\u5df1\u4e5f\u4e0d\u77e5\u9053\u7684\uff0c\u6240\u4ee5\u8ba9\u673a\u5668\u81ea\u5df1\u53bb\u5b66\u8fd9\u4ef6\u4e8b\u60c5\uff0c\u8fd8\u662f\u53ef\u4ee5\u5360\u5230\u4e00\u4e9b\u4f18\u52bf\uff0c\u53ea\u662f\u773c\u4e0b\u5b83\u8ddf\u4f20\u7edf\u65b9\u6cd5\u7684\u5dee\u5f02\u770b\u8d77\u6765\u5e76\u6ca1\u6709\u90a3\u4e48\u7684\u60ca\u4eba\uff0c\u4f46\u8fd8\u662f\u6709\u8fdb\u6b65\u7684 Tips for Deep Learning \u00b6 \u9488\u5bf9 training set \u548c testing set \u4e0a\u7684 performance \u5206\u522b\u63d0\u51fa\u9488\u5bf9\u6027\u7684\u89e3\u51b3\u65b9\u6cd5 1\u3001\u5728 training set \u4e0a\u51c6\u786e\u7387\u4e0d\u9ad8\uff1a new activation function\uff1aReLU\u3001Maxout adaptive learning rate\uff1aAdagrad\u3001RMSProp\u3001Momentum\u3001Adam 2\u3001\u5728 testing set \u4e0a\u51c6\u786e\u7387\u4e0d\u9ad8\uff1aEarly Stopping\u3001Regularization or Dropout Good Results on Training Data\uff1f \u00b6 \u50cf k nearest neighbor\uff0cdecision tree \u8fd9\u7c7b\u65b9\u6cd5\uff0c\u5b83\u4eec\u5728 training set \u4e0a\u6b63\u786e\u7387\u90fd\u662f100\uff0c\u8fd9\u624d\u662f\u975e\u5e38\u5bb9\u6613 overfitting \u7684\uff0c\u800c\u5bf9 deep learning \u6765\u8bf4\uff0coverfitting \u5f80\u5f80\u4e0d\u4f1a\u662f\u4f60\u9047\u5230\u7684\u7b2c\u4e00\u4e2a\u95ee\u9898 \u5982\u4f55\u5728 Training Data \u4e0a\u5f97\u5230\u597d\u7684 performance \u5462\uff1f \u5206\u4e3a\u4e24\u4e2a\u6a21\u5757\uff0cNew activation function \u548c Adaptive Learning Rate New activation function \u00b6 training \u7684\u7ed3\u679c\u4e0d\u597d\u53ef\u80fd\u662f network \u7684\u67b6\u6784\u8bbe\u8ba1\u7684\u4e0d\u597d\uff0c\u6bd4\u5982\u8bf4\u7528\u7684 activation function \u662f\u5bf9 training \u6bd4\u8f83\u4e0d\u5229\u7684\uff0c\u5c1d\u8bd5\u7740\u6362\u4e00\u4e9b\u65b0\u7684 activation function\uff0c\u4e5f\u8bb8\u53ef\u4ee5\u5e26\u6765\u6bd4\u8f83\u597d\u7684\u7ed3\u679c \u4e0b\u56fe\u662f\u624b\u5199\u6570\u5b57\u8fa8\u8bc6\u7528 sigmoid function \u65f6\u968f\u7740\u5c42\u6570\u589e\u52a0\u5728 training data \u4e0a\u7684\u60c5\u51b5 Vanishing Gradient Problem \u00b6 \u4e0a\u9762\u8fd9\u4e2a\u95ee\u9898\u7684\u539f\u56e0\u4e0d\u662f overfitting\uff0c\u800c\u662f Vanishing Gradient (\u68af\u5ea6\u6d88\u5931) network \u5f88\u6df1\u7684\u65f6\u5019\uff0c\u5728\u9760\u8fd1 input \u7684\u5730\u65b9\u7684\u53c2\u6570\u7684 gradient \u662f\u6bd4\u8f83\u5c0f\u7684\uff0c\u5728\u9760\u8fd1 output \u7684\u5730\u65b9\u7684 gradient \u662f\u6bd4\u8f83\u5927\u7684\uff1b\u56e0\u6b64\u5728\u8bbe\u5b9a\u76f8\u540c\u7684 learning rate \u65f6\uff0c\u9760\u8fd1 input \u7684\u5730\u65b9\u7684\u53c2\u6570\u7684 update \u662f\u5f88\u6162\u7684 \u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u4e2a\u73b0\u8c61\u53d1\u751f\u5462\uff1f\u5982\u679c\u628a Backpropagation \u7684\u5f0f\u5b50\u5199\u51fa\u6765\u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u5f88\u8f7b\u6613\u5730\u53d1\u73b0\u7528 sigmoid function \u4f1a\u5bfc\u81f4\u8fd9\u4ef6\u4e8b\u60c5\u7684\u53d1\u751f\uff1b\u4f46\u662f\u5176\u5b9e\u4ece\u76f4\u89c9\u4e0a\u6765\u60f3\u4f60\u4e5f\u53ef\u4ee5\u4e86\u89e3\u8fd9\u4ef6\u4e8b\u60c5\u53d1\u751f\u7684\u539f\u56e0\uff1asigmoid function \u4f1a\u628a\u8d1f\u65e0\u7a77\u5927\u5230\u6b63\u65e0\u7a77\u5927\u4e4b\u95f4\u7684\u503c\u90fd\u538b\u7f29\u5230 0~1 \u4e4b\u95f4\uff0c\u6240\u4ee5\u5373\u4f7f \\(\\Delta w\\) \u200b \u5f88\u5927\uff0c\u5982\u679c network \u5f88\u6df1\uff0c\u8870\u51cf\u7684\u6b21\u6570\u5c31\u8d8a\u591a\uff0c\u5bf9 output \u7684\u5f71\u54cd\u5c31\u5f88\u5c0f \u90a3\u4e48\u5982\u4f55\u89e3\u51b3\u5462\uff1f\u6bd4\u8f83\u65e9\u5e74\u7684\u505a\u6cd5\u662f\u53bbtrain RBM\uff0c\u601d\u60f3\u5c31\u662f\uff1a\u5148\u628a\u7b2c\u4e00\u4e2alayer train\u597d\uff0c\u518d\u53bbtrain\u7b2c\u4e8c\u4e2a\uff0c\u7136\u540e\u518d\u7b2c\u4e09\u4e2a... \u4f46\u5176\u5b9e\u6539\u4e00\u4e0b activation function \u53ef\u80fd\u5c31\u53ef\u4ee5 handle \u8fd9\u4e2a\u95ee\u9898 ReLU \u00b6 \u73b0\u5728\u6bd4\u8f83\u5e38\u7528\u7684 activation function \u53eb\u505a Rectified Linear Unit (\u6574\u6d41\u7ebf\u6027\u5355\u5143\u51fd\u6570\uff0c\u53c8\u79f0\u4fee\u6b63\u7ebf\u6027\u5355\u5143)\uff0c\u5b83\u7684\u7f29\u5199\u662fReLU \u9009\u62e9 ReLU \u7684\u7406\u7531\u5982\u4e0b\uff1a \u8ddf sigmoid function \u6bd4\u8d77\u6765\uff0cReLU \u7684\u8fd0\u7b97\u5feb\u5f88\u591a ReLU \u7684\u60f3\u6cd5\u7ed3\u5408\u4e86\u751f\u7269\u4e0a\u7684\u89c2\u5bdf ( Pengel \u7684 paper ) \u65e0\u7a77\u591a bias \u4e0d\u540c\u7684 sigmoid function \u53e0\u52a0\u7684\u7ed3\u679c\u4f1a\u53d8\u6210 ReLU ReLU \u53ef\u4ee5\u5904\u7406 Vanishing gradient \u7684\u95ee\u9898 ( the most important thing ) \u7528 ReLU \u65f6\uff0coutput \u8981\u4e48 = 0\uff0c \u8981\u4e48 = input\uff0c\u5f53 output = 0\u65f6\uff0c\u90a3\u4e2a neuron \u5bf9\u6574\u4e2a network \u662f\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u4ece network \u4e2d\u62ff\u6389\uff0c\u62ff\u6389\u4e4b\u540e network \u5c31\u53d8\u6210\u4e86\u4e00\u5171\u7626\u957f\u7684 linear network\uff0clinear \u7684\u597d\u5904\u65f6\u4e0d\u4f1a\u6709 Vanishing Gradient Q\uff1alinear function \u4f1a\u4e0d\u4f1a\u5f88\u5f31\uff1f A\uff1a\u4f7f\u7528 ReLU \u540e\u7684 network \u6574\u4f53\u8fd8\u662f non-linear\uff0cinput \u505a\u51fa\u8f83\u5927\u6539\u53d8\u65f6\uff0c\u5c31\u4f1a\u5bfc\u81f4 neuron \u7684 operation region \u7684\u6539\u53d8 Q\uff1aReLU \u662f\u5206\u65ad\u8fd8\u662f\uff0c\u6ca1\u529e\u6cd5\u5fae\u5206 A\uff1a\u5728\u5b9e\u9645\u64cd\u4f5c\u4e0a\uff0c\u5f53 region \u7684\u8303\u56f4\u5904\u4e8e z>0 \u65f6\uff0c\u5fae\u5206\u503c gradient \u5c31\u662f 1\uff1b\u5f53 region \u7684\u8303\u56f4\u5904\u4e8e z<0 \u65f6\uff0c\u5fae\u5206\u503c gradient \u5c31\u662f 0\uff1b\u5f53 z \u4e3a 0 \u65f6\uff0c\u5c31\u4e0d\u8981\u7ba1\u5b83 ReLU-variant \u00b6 ReLU \u5728 update \u53c2\u6570\u65f6\u5728 input<0 \u65f6\u65e0\u6cd5\u66f4\u65b0\u53c2\u6570\uff0c\u5982\u679c\u5728 input<0 \u65f6\uff0c\u5fae\u5206\u8fd8\u80fd\u6709\u4e00\u70b9\u7684\u503c\uff0c\u6bd4\u5982\u4ee4 \\(a=0.01z\\) \u200b\u200b\uff0c\u8fd9\u4e2a\u4e1c\u897f\u5c31\u53eb\u505a Leaky ReLU \u90a3\u4e48 \\(z\\) \u7684\u7cfb\u6570\u53ef\u4e0d\u53ef\u4ee5\u662f\u5176\u4ed6\u7684\u5462\uff1f\u4e8e\u662f\u5c31\u63d0\u51fa\u4e86 Parametric ReLU \uff0c \\(a=\\alpha \\cdot z\\) \uff0c\u5176\u4e2d \\(\\alpha\\) \u200b \u4e0d\u662f\u56fa\u5b9a\u7684\u503c\uff0c\u800c\u662f network \u7684\u4e00\u4e2a\u53c2\u6570\uff0c\u901a\u8fc7 training data \u5b66\u4e60\u51fa\u6765 \u66f4\u8fdb\u4e00\u6b65\uff0c\u4e3a\u4ec0\u4e48\u4e00\u5b9a\u8981\u662f ReLU \u7684\u6837\u5b50\u5462\uff1factivation function \u53ef\u4e0d\u53ef\u4ee5\u6709\u522b\u7684\u6837\u5b50\u5462\uff1f\u6240\u4ee5\u540e\u6765\u6709\u4e86\u4e00\u4e2a\u66f4\u8fdb\u9636\u7684\u60f3\u6cd5\uff0c\u53eb\u505a Maxout network Maxout \u00b6 Maxout \u7684\u60f3\u6cd5\u662f\uff0c\u8ba9 network \u81ea\u52a8\u53bb\u5b66\u4e60\u5b83\u7684 activation function\uff0c\u90a3 Maxout network \u5c31\u53ef\u4ee5\u81ea\u52a8\u5b66\u51fa ReLU\uff0c\u4e5f\u53ef\u4ee5\u5b66\u51fa\u5176\u4ed6\u7684 activation function\uff0c\u8fd9\u4e00\u5207\u90fd\u662f\u7531 training data \u6765\u51b3\u5b9a\u7684 \u5047\u8bbe\u73b0\u5728\u6709 input \\(x_1,x_2\\) \uff0c\u5b83\u4eec\u4e58\u4e0a\u51e0\u7ec4\u4e0d\u540c\u7684 weight \u5206\u522b\u5f97\u5230 5,7,-1,1\uff0c\u8fd9\u4e9b\u503c\u672c\u6765\u662f\u4e0d\u540c neuron \u7684 input\uff0c\u5b83\u4eec\u8981\u901a\u8fc7 activation function \u53d8\u4e3a neuron \u7684 output\uff1b\u4f46\u5728Maxout network \u91cc\uff0c\u6211\u4eec\u4e8b\u5148\u51b3\u5b9a\u597d\u5c06\u67d0\u51e0\u4e2a \"neuron\" \u7684 input \u5206\u4e3a\u4e00\u4e2a group\uff0c\u6bd4\u59825,7 \u5206\u4e3a\u4e00\u4e2a group\uff0c\u7136\u540e\u5728\u8fd9\u4e2a group \u91cc\u9009\u53d6\u4e00\u4e2a\u6700\u5927\u503c 7 \u4f5c\u4e3a output \u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u597d\u50cf\u5728\u4e00\u4e2a layer \u4e0a\u505a Max Pooling \u4e00\u6837\uff0c\u5b83\u548c\u539f\u6765\u7684 network \u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u5b83\u628a\u539f\u6765\u51e0\u4e2a \"neuron\" \u7684 input \u6309\u4e00\u5b9a\u89c4\u5219\u7ec4\u6210\u4e86\u4e00\u4e2a group\uff0c\u7136\u540e\u5e76\u6ca1\u6709\u4f7f\u5b83\u4eec\u901a\u8fc7 activation function\uff0c\u800c\u662f\u9009\u53d6\u5176\u4e2d\u7684\u6700\u5927\u503c\u5f53\u505a\u8fd9\u51e0\u4e2a \"neuron\" \u7684 output \u5f53\u7136\uff0c\u5b9e\u9645\u4e0a\u539f\u6765\u7684 \"neuron\" \u65e9\u5c31\u5df2\u7ecf\u4e0d\u5b58\u5728\u4e86\uff0c\u8fd9\u51e0\u4e2a\u88ab\u5408\u5e76\u7684 \"neuron\" \u5e94\u5f53\u88ab\u770b\u505a\u662f\u4e00\u4e2a\u65b0\u7684 neuron\uff0c\u8fd9\u4e2a\u65b0\u7684 neuron \u7684 input \u662f\u539f\u6765\u51e0\u4e2a \"neuron\" \u7684 input \u7ec4\u6210\u7684 vector\uff0coutput \u5219\u53d6 input \u7684\u6700\u5927\u503c\uff0c\u800c\u5e76\u975e\u7531 activation function \u4ea7\u751f group \u7684\u5927\u5c0f\u7531\u81ea\u5df1\u51b3\u5b9a \u90a3\u5982\u679c\u8bf4 Maxout \u53ef\u4ee5\u6a21\u4eff\u51fa\u5176\u4ed6\u7684 activation function\uff0c\u90a3\u662f\u5982\u4f55\u6a21\u4eff\u51fa ReLU \u7684\u5462\uff1f \u5176\u5b9e\u53ea\u8981 \\(z_2\\) \u7684 2 \u4e2a\u53c2\u6570\u90fd\u8bbe\u4e3a 0\uff0c\u7136\u540e\u505a Max Pooling \u5373\u53ef \u90a3\u6a21\u4eff\u51fa\u5176\u4ed6\u7684 activation function \u5462\uff1f \u6bd4\u5982 \\(z_2\\) \u7684\u53c2\u6570 w \u548c b \u4e0d\u662f0\uff0c\u800c\u662f \\(w',b'\\) \u200b\uff0c\u6b64\u65f6\u5982\u4e0b\u56fe\uff0cMax Pooling \u4f7f 2 \u6761\u76f4\u7ebf\u5f62\u6210\u4e00\u4e2a V \u5b57\u578b Maxout \u53ef\u4ee5\u5b9e\u73b0\u4efb\u4f55 piecewise linear convex activation function (\u5206\u6bb5\u7ebf\u6027\u51f8\u6fc0\u6d3b\u51fd\u6570)\uff0c\u5206\u51e0\u6bb5\u53d6\u51b3\u4e8e\u4e00\u4e2a group \u6709\u51e0\u4e2a input How to train Maxout \u00b6 \u5176\u5b9e Max operation \u5c31\u662f linear \u7684 operation\uff0c\u5c31\u50cf\u524d\u9762 ReLU \u63d0\u5230\u7684\u4e00\u6837\uff0c\u6574\u4f53\u6765\u8bf4\u4e0d\u662f Linear \u7684\uff0c\u4f46\u662f\u5f53\u628a data \u653e\u8fdb\u53bb\u540e\u4e00\u4e9b neuron \u5c31\u88ab\u6682\u65f6\u9690\u85cf\u4e86\uff0c\u6b64\u65f6\u5c31\u662f linear \u7684\uff1b\u8fd9\u4e9b\u88ab\u9690\u85cf\u7684 neuron \u4f1a\u5728\u4e0d\u540c\u7684 input data \u4e2d\u88ab\u8bad\u7ec3\u5230 Adaptive Learning Rate \u00b6 \u524d\u9762\u5df2\u7ecf\u8bb2\u8fc7 Adagrad \u7684\u505a\u6cd5\uff0c\u4f46\u5b9e\u9645\u95ee\u9898\u4e2d\u53ef\u80fd\u8fdc\u6bd4 Adagrad \u80fd\u505a\u7684\u95ee\u9898\u8981\u6765\u7684\u590d\u6742 RMSProp \u00b6 loss function \u4e5f\u6709\u53ef\u80fd\u4e00\u4f1a\u513f\u5e73\u5766\u4e00\u4f1a\u513f\u9661\u5ced\uff0c\u6240\u4ee5\u4f60\u8981\u968f\u65f6\u6839\u636e gradient \u7684\u5927\u5c0f\u6765\u5feb\u901f\u5730\u8c03\u6574 learning rate\uff0c\u771f\u6b63\u8981\u5904\u7406 deep learning \u7684\u95ee\u9898\uff0c\u7528 Adagrad \u53ef\u80fd\u662f\u4e0d\u591f\u7684\uff0c\u4f60\u9700\u8981\u66f4 dynamic \u7684\u8c03\u6574 learning rate \u7684\u65b9\u6cd5\uff0c\u6240\u4ee5\u4ea7\u751f \u4e86Adagrad \u7684\u8fdb\u9636\u7248\u2014\u2014 RMSProp learning rate \u4f9d\u65e7\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u56fa\u5b9a\u7684\u503c \\(\\eta\\) \u9664\u6389\u4e00\u4e2a\u53d8\u5316\u7684\u503c \\(\\sigma\\) \uff0c\u8fd9\u4e2a \\(\\sigma\\) \u7b49\u4e8e\u4e0a\u4e00\u4e2a \\(\\sigma\\) \u548c\u5f53\u524d\u68af\u5ea6 \\(g\\) \u7684\u52a0\u6743\u65b9\u5747\u6839\uff08\u7279\u522b\u7684\u662f\uff0c\u5728\u7b2c\u4e00\u4e2a\u65f6\u95f4\u70b9\uff0c \\(\\sigma^0\\) \u5c31\u662f\u7b2c\u4e00\u4e2a\u7b97\u51fa\u6765\u7684gradient\u503c \\(g^0\\) \u200b\uff09\uff0c\u5373\uff1a \\[ \\begin{align} w^{t+1}&=w^t-\\frac{\\eta}{\\sigma^t}g^t \\\\ \\sigma^t&=\\sqrt{\\alpha(\\sigma^{t-1})^2+(1-\\alpha)(g^t)^2} \\end{align} \\] \\(\\alpha\\) \u200b \u503c\u662f\u53ef\u4ee5\u81ea\u7531\u8c03\u6574\u7684\uff0cRMSProp \u8ddf Adagrad \u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0cAdagrad \u7684\u5206\u6bcd\u662f\u5bf9\u8fc7\u7a0b\u4e2d\u6240\u6709\u7684 gradient \u53d6\u5e73\u65b9\u548c\u5f00\u6839\u53f7\uff0c\u4e5f\u5c31\u662f\u8bf4 Adagrad \u8003\u8651\u7684\u662f\u6574\u4e2a\u8fc7\u7a0b\u5e73\u5747\u7684 gradient \u4fe1\u606f\uff1b\u800c RMSProp \u867d\u7136\u4e5f\u662f\u5bf9\u6240\u6709\u7684 gradient \u8fdb\u884c\u5e73\u65b9\u548c\u5f00\u6839\u53f7\uff0c\u4f46\u662f\u5b83 \u7528\u4e00\u4e2a \\(\\alpha\\) \u200b \u6765\u8c03\u6574\u5bf9\u4e0d\u540c gradient \u7684\u4f7f\u7528\u7a0b\u5ea6 \uff0c\u6bd4\u5982\u4f60\u628a \\(\\alpha\\) \u7684\u503c\u8bbe\u7684\u5c0f\u4e00\u70b9\uff0c\u610f\u601d\u5c31\u662f\u4f60\u66f4\u503e\u5411\u4e8e\u76f8\u4fe1\u65b0\u7684 gradient \u6240\u544a\u8bc9\u4f60\u7684 error surface \u7684\u5e73\u6ed1\u6216\u9661\u5ced\u7a0b\u5ea6\uff0c\u800c\u6bd4\u8f83\u65e0\u89c6\u4e8e\u65e7\u7684gradient \u6240\u63d0\u4f9b\u7ed9\u4f60\u7684 information Momentum \u00b6 \u9664\u4e86 learning rate \u7684\u95ee\u9898\u4ee5\u5916\uff0c\u5728\u505a deep learning \u7684\u65f6\u5019\uff0c\u5f88\u591a\u4eba\u62c5\u5fc3\u4f1a\u5361\u5728 local minimum\u3001saddle point \u6216\u662f plateau \u7684\u5730\u65b9\uff1b\u4f46\u5176\u5b9e Yann LeCun \u5728 07 \u5e74\u7684\u65f6\u5019\uff0c\u5c31\u63d0\u51fa\u4e86\u4e00\u4e2a\u86ee\u7279\u522b\u7684\u8bf4\u6cd5\uff0c\u4ed6\u8bf4\u4f60\u4e0d\u8981\u592a\u62c5\u5fc3 local minima \u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u4e00\u65e6\u51fa\u73b0 local minima\uff0c\u5b83\u5c31\u5fc5\u987b\u5728\u6bcf\u4e00\u4e2a dimension \u90fd\u662f\u5c71\u8c37\u7684\u4f4e\u8c37\u5f62\u72b6\uff0c\u53c2\u6570\u975e\u5e38\u591a\u65f6\u8fd9\u79cd\u6982\u7387\u662f\u975e\u5e38\u5c0f\u7684 \u6709\u4e00\u4e2a heuristic(\u542f\u53d1\u6027) \u7684\u65b9\u6cd5\u53ef\u4ee5\u7a0d\u5fae\u5904\u7406\u4e00\u4e0b\u4e0a\u9762\u6240\u8bf4\u7684 \"\u5361\u4f4f\" \u7684\u95ee\u9898\uff0c\u5b83\u7684\u7075\u611f\u6765\u81ea\u4e8e\u771f\u5b9e\u4e16\u754c\uff1a\u628a\u60ef\u6027\u52a0\u5230 gradient descent \u91cc\u9762\uff0c\u8fd9\u4ef6\u4e8b\u60c5\u5c31\u53eb\u505a Momentum how to do Momentum\uff1f \u5f53\u6211\u4eec\u5728 gradient descent \u91cc\u52a0\u4e0a Momentum \u7684\u65f6\u5019\uff0c\u6bcf\u4e00\u6b21 update \u7684\u65b9\u5411\uff0c\u4e0d\u518d\u53ea\u8003\u8651 gradient \u7684\u65b9\u5411\uff0c\u8fd8\u8981\u8003\u8651\u4e0a\u4e00\u6b21 update \u7684\u65b9\u5411\uff0c\u90a3\u8fd9\u91cc\u6211\u4eec\u5c31\u7528\u4e00\u4e2a\u53d8\u91cf \\(v\\) \u53bb\u8bb0\u5f55\u524d\u4e00\u4e2a\u65f6\u95f4\u70b9 update \u7684\u65b9\u5411 \u968f\u673a\u9009\u4e00\u4e2a\u521d\u59cb\u503c \\(\\theta^0\\) \uff0c\u521d\u59cb\u5316 \\(v^0=0\\) \uff0c\u63a5\u4e0b\u6765\u8ba1\u7b97 \\(\\theta^0\\) \u5904\u7684 gradient\uff0c\u7136\u540e\u6211\u4eec\u8981\u79fb\u52a8\u7684\u65b9\u5411\u662f\u7531\u524d\u4e00\u4e2a\u65f6\u95f4\u70b9\u7684\u79fb\u52a8\u65b9\u5411 \\(v^0\\) \u548c gradient \u7684\u53cd\u65b9\u5411 \\(\\nabla L(\\theta^0)\\) \u6765\u51b3\u5b9a\u7684\uff0c\u5373 $$ v^1=\\lambda v^0-\\eta \\nabla L(\\theta^0) $$ \u6ce8\uff1a\u8fd9\u91cc\u7684 \\(\\lambda\\) \u4e5f\u662f\u4e00\u4e2a\u624b\u52a8\u8c03\u6574\u7684\u53c2\u6570\uff0c\u5b83\u8868\u793a\u60ef\u6027\u5bf9\u524d\u8fdb\u65b9\u5411\u7684\u5f71\u54cd\u6709\u591a\u5927 \u5176\u5b9e\u6bcf\u4e00\u4e2a\u65f6\u95f4\u70b9\u8981\u79fb\u52a8\u7684\u6b65\u4f10 \\(v^i\\) \u200b\uff0c\u5305\u62ec\u5927\u5c0f\u548c\u65b9\u5411\uff0c\u90fd\u662f\u524d\u9762\u6240\u6709 gradient \u7684\u52a0\u6743\u548c\uff0c\u4f46\u8d8a\u4e4b\u524d\u7684 gradient \u7684\u6743\u91cd\u8d8a\u5c0f Adam \u00b6 \u5176\u5b9e RMSProp \u52a0\u4e0a Momentum\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230 Adam \u6839\u636e\u4e0b\u9762\u7684 paper \u6765\u5feb\u901f\u63cf\u8ff0\u4e00\u4e0b Adam \u7684 algorithm\uff1a \u5148\u521d\u59cb\u5316 \\(m_0=0\\) \u200b\uff0c \\(m_0\\) \u200b\u5c31\u662f Momentum \u4e2d\uff0c\u524d\u4e00\u4e2a\u65f6\u95f4\u70b9\u7684 movement \u518d\u521d\u59cb\u5316 \\(v_0=0\\) \u200b\uff0c \\(v_0\\) \u200b \u5c31\u662f RMSProp \u91cc\u8ba1\u7b97 gradient \u7684 root mean square \u7684 \\(\\sigma\\) \u200b \u6700\u540e\u521d\u59cb\u5316 \\(t=0\\) \u200b\uff0ct \u7528\u6765\u8868\u793a\u65f6\u95f4\u70b9 \u5148\u7b97\u51fa gradient \\(g_t\\) \u200b \\[ g_t=\\nabla _{\\theta}f_t(\\theta_{t-1}) \\] \u518d\u6839\u636e\u8fc7\u53bb\u8981\u8d70\u7684 movement \\(m_{t-1}\\) \u548c gradient \\(g_t\\) \uff0c\u7b97\u51fa\u73b0\u5728\u8981\u8d70\u7684 movement \\(m_t\\) \u2014\u2014Momentum \\[ m_t=\\beta_1 m_{t-1}+(1-\\beta_1) g_t \\] \u7136\u540e\u6839\u636e\u524d\u4e00\u4e2a\u65f6\u95f4\u70b9\u7684 \\(v_{t-1}\\) \u200b\u200b \u548c gradient \\(g_t\\) \u200b\u200b \u7684\u5e73\u65b9\uff0c\u7b97\u4e00\u4e0b\u653e\u5728\u5206\u6bcd\u7684 \\(v_t\\) \u200b\u200b\u2014\u2014RMSProp \\[ v_t=\\beta_2 v_{t-1}+(1-\\beta_2) g_t^2 \\] \u63a5\u4e0b\u6765\u505a\u4e86\u4e00\u4e2a\u539f\u6765 RMSProp \u548c Momentum \u91cc\u6ca1\u6709\u7684\u4e1c\u897f\uff0c\u5c31\u662f bias correction\uff0c\u5b83\u4f7f \\(m_t\\) \u200b\u200b\u200b \u548c \\(v_t\\) \u200b\u200b\u200b\u200b \u90fd\u9664\u4e0a\u4e00\u4e2a\u503c\uff0c\u8fd9\u4e2a\u503c\u672c\u6765\u6bd4\u8f83\u5c0f\uff0c\u540e\u6765\u4f1a\u8d8a\u6765\u8d8a\u63a5\u8fd1\u4e8e1\uff08 \\(\\beta_1^t\\) \u548c \\(\\beta_2^t\\) \u4f1a\u8d8a\u6765\u8d8a\u5c0f\uff09 \\[ \\begin{align} \\hat{m}_t=\\frac{m_t}{1-\\beta_1^t} \\\\ \\hat{v}_t=\\frac{v_t}{1-\\beta_2^t} \\end{align} \\] \u6700\u540e\u505a update\uff0c\u628a Momentum \u5efa\u8bae\u4f60\u7684\u65b9\u5411 \\(\\hat{m_t}\\) \u4e58\u4e0a learning rate \\(\\alpha\\) \uff0c\u518d\u9664\u6389 RMSProp normalize \u540e\u5efa\u8bae\u7684 learning rate \u5206\u6bcd\uff0c\u7136\u540e\u5f97\u5230 update \u7684 movement \\[ \\theta_t=\\theta_{t-1}-\\frac{\\alpha \\cdot \\hat{m}_t}{\\sqrt{\\hat{v}_t}+\\epsilon} \\] Good Results on Testing Data\uff1f \u00b6 \u5982\u679c training data \u4e0a\u5f97\u5230\u4e86\u597d\u7684 performance\uff0c\u4f46\u662f testing set \u4e0a\u6ca1\u6709\uff0c\u90a3\u624d\u662f overfitting \u56de\u53bb\u89e3\u51b3 overfitting \u65f6\u589e\u52a0\u4e86\u65b0\u7684 technique \u540e\u4f1a\u8ba9 training set \u4e0a\u7684\u7ed3\u679c\u53d8\u574f\uff0c\u6240\u4ee5\u9700\u8981\u91cd\u65b0\u68c0\u67e5 model \u5728 training set \u4e0a\u7684\u7ed3\u679c\uff1b\u5982\u679c\u53d8\u574f\u7684\u8bdd\uff0c\u53ef\u80fd\u5c31\u9700\u8981\u4ece\u5934\u5bf9 network training \u7684 process \u505a\u4e00\u4e9b\u8c03\u6574\uff1b\u5982\u679c training set \u548c testing set \u4e0a\u90fd\u6709\u597d\u7684\u7ed3\u679c\uff0c\u90a3\u5c31\u6210\u529f\u4e86 \u5206\u4e3a\u4e09\u4e2a\u6a21\u5757\uff0cEarly Stopping\u3001Regularization \u548c Dropout \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cEarly Stopping \u548c Regularization \u662f\u5f88 typical \u7684\u505a\u6cd5\uff0c\u5b83\u4eec\u4e0d\u662f\u7279\u522b\u4e3adeep learning \u6240\u8bbe\u8ba1\u7684\uff1b\u800c Dropout \u662f\u4e00\u4e2a\u86ee\u6709 deep learning \u7279\u8272\u7684\u505a\u6cd5 Early Stopping \u00b6 \u7406\u60f3\u4e0a\u5047\u5982\u4f60\u77e5\u9053 testing data \u4e0a\u7684 loss \u53d8\u5316\u60c5\u51b5\uff0c\u4f60\u4f1a\u5728 testing set \u7684 loss \u6700\u5c0f\u7684\u65f6\u5019\u505c\u4e0b\u6765\uff0c\u800c\u4e0d\u662f\u5728 training set \u7684 loss \u6700\u5c0f\u7684\u65f6\u5019\u505c\u4e0b\u6765\uff1b\u4f46 testing set \u5b9e\u9645\u4e0a\u662f\u672a\u77e5\u7684\u4e1c\u897f\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u7528 validation set \u6765\u66ff\u4ee3\u5b83\u53bb\u505a\u8fd9\u4ef6\u4e8b\u60c5 Regularization \u00b6 regularization \u5c31\u662f\u5728\u539f\u6765\u7684 loss function \u4e0a\u989d\u5916\u589e\u52a0\u51e0\u4e2a term\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u53c2\u6570\u90fd\u8bbe\u7f6e\u4e00\u4e2a\u60e9\u7f5a\u9879\uff0c\u53ef\u4ee5\u8ba9\u6700\u540e\u7684 model \u53d8\u5e73\u6ed1\u4ee5\u9632\u6b62 overfitting \u4e0b\u9762\u7684\u8303\u6570\u4f3c\u4e4e\u548c\u5176\u4ed6\u5730\u65b9\u4e0d\u592a\u4e00\u6837 L2 regularization\uff1a\u5b9a\u4e49\u65b0\u7684 loss function \\[ \\begin{align} L'(\\theta)&=L(\\theta)+\\frac{1}{2}\\lambda||\\theta||_2 \\\\ ||\\theta||_2&=(w_1)^2+(w_2)^2+... \\end{align} \\] L1 regularization\uff1a\u5b9a\u4e49\u65b0\u7684 loss function \\[ \\begin{align} L'(\\theta)&=L(\\theta)+\\frac{1}{2}\\lambda||\\theta||_1 \\\\ ||\\theta||_2&=|w_1|+|w_2|+... \\end{align} \\] Q\uff1aL1 regularization \u5982\u4f55\u5fae\u5206\uff1f A\uff1aV \u5b57\u5f62\uff0c\u53f3\u8fb9\u662f 1\uff0c\u5de6\u8fb9\u662f -1\uff0c \u4e3a 0 \u968f\u4fbf\u7ed9\u4e00\u4e2a\u503c\u6bd4\u5982 0 L2 regularization \u5f53\u53c2\u6570\u6bd4\u8f83\u5c0f\u7684\u65f6\u5019\u4e0b\u964d\u7684\u4f1a\u5f88\u6162\uff0c\u53c2\u6570\u6bd4\u8f83\u5927\u7684\u65f6\u5019\u4e0b\u964d\u7684\u65f6\u5019\u4f1a\u5f88\u5feb\uff0c\u6240\u4ee5\u6700\u540e train \u51fa\u6765\u7684\u53c2\u6570\u90fd\u662f\u6bd4\u8f83\u5c0f\u7684 L1 regularization \u6bcf\u6b21\u90fd\u4e0b\u964d\u56fa\u5b9a\u7684\u503c\uff0c\u6240\u4ee5 train \u51fa\u6765\u6709\u5f88\u591a\u53c2\u6570\u63a5\u8fd1 0\uff0c\u4e5f\u4f1a\u6709\u5f88\u5927\u7684\u503c \uff08\u8fd9 2 \u79cd loss function \u7ecf\u5e38\u7528\u4e8e\u6570\u636e\u964d\u7ef4\u4e4b\u4e2d\uff0c\u5982 \u5cad\u56de\u5f52 \u548c Lasso\uff09 Dropout \u00b6 training \u7684\u65f6\u5019\uff0c\u6bcf\u6b21 update \u53c2\u6570\u4e4b\u524d\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2a neuron (\u4e5f\u5305\u62ec input layer \u7684 \"neuron\") \u505asampling (\u62bd\u6837) \uff0c\u6bcf\u4e2a neuron \u90fd\u6709 p% \u7684\u51e0\u7387\u4f1a\u88ab\u4e22\u6389\uff0c\u5982\u679c\u67d0\u4e2a neuron \u88ab\u4e22\u6389\u7684\u8bdd\uff0c\u8ddf\u5b83\u76f8\u8fde\u7684weight\u4e5f\u90fd\u8981\u88ab\u4e22\u6389 \u5b9e\u9645\u4e0a\u5c31\u662f\u6bcf\u6b21 update \u53c2\u6570\u4e4b\u524d\u90fd\u901a\u8fc7\u62bd\u6837\u53ea\u4fdd\u7559 network \u4e2d\u7684\u4e00\u90e8\u5206 neuron \u6765\u505a\u8bad\u7ec3 \u6ce8\uff1a\u6bcf\u6b21 update \u53c2\u6570\u4e4b\u524d\u90fd\u8981\u505a\u4e00\u904d sampling\uff0c\u6240\u4ee5\u6bcf\u6b21 update \u53c2\u6570\u7684\u65f6\u5019\uff0c\u62ff\u6765 training \u7684 network structure \u90fd\u662f\u4e0d\u4e00\u6837\u7684\uff1b\u4f60\u53ef\u80fd\u4f1a\u89c9\u5f97\u8fd9\u4e2a\u65b9\u6cd5\u8ddf\u524d\u9762\u63d0\u5230\u7684 Maxout \u4f1a\u6709\u4e00\u70b9\u50cf\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0cMaxout \u662f\u6bcf\u4e00\u7b14 data \u5bf9\u5e94\u7684 network structure \u4e0d\u540c\uff0c\u800c Dropout \u662f\u6bcf\u4e00\u6b21 update \u7684network structure \u90fd\u662f\u4e0d\u540c\u7684 (\u6bcf\u4e00\u4e2a minibatch \u5bf9\u5e94\u7740\u4e00\u6b21 update\uff0c\u800c\u4e00\u4e2a minibatch \u91cc\u542b\u6709\u5f88\u591a\u7b14 data) \u4f7f\u7528 dropout\uff0c\u5f97\u5230\u7684 train performance \u5176\u5b9e\u662f\u4f1a\u53d8\u5dee\u7684\uff0c\u4f46\u8fd9\u5e76\u4e0d\u662f\u95ee\u9898\uff0c\u56e0\u4e3a\uff1a Dropout \u771f\u6b63\u8981\u505a\u7684\u4e8b\u60c5\uff0c\u5c31\u662f\u8981\u8ba9\u4f60\u5728 training set \u4e0a\u7684\u7ed3\u679c\u53d8\u5dee\uff0c\u4f46\u662f\u5728 testing set \u4e0a\u7684\u7ed3\u679c\u662f\u53d8\u597d\u7684 \u8981\u6ce8\u610f\u7684\u662f Dropout \u662f\u5728 training \u4e0a\u8868\u73b0\u597d\u800c testing \u4e0a\u8868\u73b0\u4e0d\u597d\u624d\u505a\u7684 \u9700\u8981\u6ce8\u610f\u7684\u4e8b\uff1a testing \u7684\u65f6\u5019\u4e0d\u505a dropout\uff0c\u6240\u6709\u7684 neuron \u90fd\u8981\u88ab\u7528\u5230 \u5047\u8bbe\u5728 training \u7684\u65f6\u5019\uff0cdropout rate \u662fp%\uff0c\u4ece training data \u4e2d\u88ab learn \u51fa\u6765\u7684\u6240\u6709 weight \u90fd\u8981\u4e58\u4e0a (1-p%) \u624d\u80fd\u88ab\u5f53\u505a testing \u7684 weight \u4f7f\u7528 Do not always blame overfitting \u00b6 \u4e0d\u80fd\u53ea\u770b\u53f3\u8fb9\u7684\u56fe\u5c31\u8bf4\u662f overfitting\uff0c\u56e0\u4e3a\u53ef\u80fd\u672c\u6765 56-layer \u7684 model \u5c31\u6bd4 20-layer \u7684model \u8868\u73b0\u7684\u66f4\u5dee\uff1b\u4e5f\u4e0d\u80fd\u8bf4\u662f underfitting\uff0c\u56e0\u4e3a underfitting \u7684\u672c\u610f\u662f\u6307 model \u7684 complexity \u4e0d\u8db3\uff0c\u6240\u4ee5\u8fd9\u79cd\u60c5\u51b5\u5176\u5b9e\u53ea\u662f\u6ca1\u6709 train \u597d\uff0c\u6bd4\u5982\u6709 local minimum \u7684\u95ee\u9898\uff0c\u6709 saddle point \u7684\u95ee\u9898\uff0c\u6709 plateau \u7684\u95ee\u9898... Why Deep? \u00b6 \u5728\u76f8\u540c\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\uff0cshallow network \u548c deep network \u76f8\u6bd4\u4e00\u822c\u662f deep network \u8868\u73b0\u4f1a\u597d\u4e00\u4e9b deep learning \u4e2d\u7684\u6bcf\u4e00\u5c42\u7684 layer \u90fd\u662f\u4e00\u4e2a\u5b50\u4efb\u52a1\uff0c\u505a\u597d\u540e\u7531\u4e0b\u4e00\u5c42\u53bb\u505a\u8fdb\u4e00\u6b65\u7684\u4efb\u52a1\uff0c\u800c shallow network \u505a\u4e0d\u5230\u8fd9\u6837 \u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u662f\uff0c\u8981\u628a input \u7684\u4eba\u7269\u5206\u4e3a\u56db\u7c7b\uff1a\u957f\u5934\u53d1\u5973\u751f\u3001\u957f\u5934\u53d1\u7537\u751f\u3001\u77ed\u5934\u53d1\u5973\u751f\u3001\u77ed\u5934\u53d1\u7537\u751f \u5982\u679c\u7528 shallow network \u5c31\u662f\u5206\u522b\u72ec\u7acb\u5730 train \u56db\u4e2a classifier (\u5c31\u76f8\u5f53\u4e8e\u8bad\u7ec3\u56db\u4e2a\u72ec\u7acb\u7684 model)\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u5206\u7c7b\u7684\u95ee\u9898\uff1b\u4f46\u662f\u6709\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u957f\u5934\u53d1\u7537\u751f\u7684 data \u662f\u6bd4\u8f83\u5c11\u7684\uff0c\u6ca1\u6709\u592a\u591a\u7684 training data\uff0c\u6240\u4ee5\uff0c\u4f60 train \u51fa\u6765\u7684 classifier \u5c31\u6bd4\u8f83 weak\uff0c\u53bb detect \u957f\u5934\u53d1\u7537\u751f\u7684 performance \u5c31\u6bd4\u8f83\u5dee \u4f46\u662f\u7537\u751f\u4e0e\u5973\u751f\u7684 data\uff0c\u957f\u53d1\u4e0e\u77ed\u53d1\u7684 data \u662f\u5f88\u591a\u7684\uff0c\u6240\u4ee5\u5982\u679c\u7528 deep network \u7684\u8bdd\uff0c\u7ecf\u8fc7\u524d\u9762\u51e0\u5c42 layer \u7684\u7279\u5f81\u62bd\u53d6\uff0c\u5c31\u53ef\u4ee5\u5934\u53d1\u7684 data \u4e22\u7ed9\u4e00\u4e2a Classifier2\uff0c\u628a\u7537\u751f\u6216\u5973\u751f\u7684 data \u4e22\u7ed9\u4e00\u4e2a Classifier1\uff0c\u8fd9\u6837\u5c31\u771f\u6b63\u505a\u5230\u4e86\u5145\u5206\u3001\u9ad8\u6548\u5730\u5229\u7528\u6570\u636e\uff0c\u6700\u7ec8\u7684 Classifier \u518d\u6839\u636e Classifier1 \u548c Classifier2 \u63d0\u4f9b\u7684\u4fe1\u606f\u7ed9\u51fa\u56db\u7c7b\u4eba\u7684\u5206\u7c7b\u7ed3\u679c","title":"Deep Learning"},{"location":"ML/4_Deep%20learning/#deep-learning","text":"","title":"Deep Learning"},{"location":"ML/4_Deep%20learning/#neural-network","text":"","title":"Neural Network"},{"location":"ML/4_Deep%20learning/#concept","text":"\u628a\u591a\u4e2a Logistic Regression \u524d\u540e connect \u5728\u4e00\u8d77\uff0c\u7136\u540e\u628a\u4e00\u4e2a Logistic Regression \u79f0\u4e4b\u4e3a neuron\uff0c\u6574\u4e2a\u79f0\u4e4b\u4e3a neural network","title":"Concept"},{"location":"ML/4_Deep%20learning/#fully-connect-feedforward-network","text":"Neural Network \u7684\u8fde\u63a5\u65b9\u5f0f\u662f\u9700\u8981\u4f60\u624b\u52a8\u53bb\u8bbe\u8ba1\u7684\uff0c\u6700\u5e38\u89c1\u7684\u8fde\u63a5\u65b9\u5f0f\u53eb\u505a Fully Connect Feedforward Network (\u5168\u8fde\u63a5\u524d\u9988\u7f51\u7edc) Neural Network \u662f\u4e00\u5c42\u4e00\u5c42\u7684\u7ed3\u6784\uff0clayer \u548c layer \u4e4b\u95f4 neuron \u662f\u4e24\u4e24\u4e92\u76f8\u8fde\u63a5\u7684\uff0clayer1 \u7684 neuron output \u4f1a\u8fde\u63a5\u7ed9 layer2 \u7684\u6bcf\u4e00\u4e2a neuron \u4f5c\u4e3a input \u5206\u4e3a\u4e09\u7c7b\uff1ainput layer\uff0coutput layer\uff0chidden layer \u6bcf\u4e00\u4e2a neuron \u91cc\u9762\u7684 sigmoid function\uff0c\u5728 Deep Learning \u4e2d\u88ab\u79f0\u4e3a activation function (\u6fc0\u52b1\u51fd\u6570)\uff0c\u5e76\u4e0d\u4e00\u5b9a\u8981\u7528 sigmoid function\uff08\u800c\u4e14 sigmoid function \u73b0\u5728\u5df2\u7ecf\u7528\u7684\u5f88\u5c11\u4e86\uff09 \u6709\u5f88\u591a\u5c42 layers \u7684 neural network\uff0c\u88ab\u79f0\u4e3a DNN(Deep Neural Network) \u8fd9\u91cc\u9762\u7684\u6240\u6709\u53d8\u91cf\u90fd\u7528\u77e9\u9635\u7684\u5f62\u5f0f\u8868\u793a\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ef\u4ee5\u5229\u7528 GPU \u52a0\u901f","title":"Fully Connect Feedforward Network"},{"location":"ML/4_Deep%20learning/#output-layer","text":"\u6211\u4eec\u53ef\u4ee5\u628a hidden layers \u8fd9\u90e8\u5206\uff0c\u770b\u505a\u662f\u4e00\u4e2a feature extractor(\u7279\u5f81\u63d0\u53d6\u5668) \uff0c\u8fd9\u4e2a feature extractor \u5c31 replace \u4e86\u6211\u4eec\u4e4b\u524d\u624b\u52a8\u505a feature engineering\uff0cfeature transformation \u8fd9\u4e9b\u4e8b\u60c5\uff0c\u7ecf\u8fc7\u8fd9\u4e2a feature extractor \u5f97\u5230\u7684 \\(x_1,x_2,...,x_k\\) \u5c31\u53ef\u4ee5\u88ab\u5f53\u4f5c\u4e00\u7ec4\u65b0\u7684 feature output layer \u505a\u7684\u4e8b\u60c5\uff0c\u5176\u5b9e\u5c31\u662f\u628a\u5b83\u5f53\u505a\u4e00\u4e2a Multi-class classifier \uff0c\u5b83\u662f\u62ff\u7ecf\u8fc7 feature extractor \u8f6c\u6362\u540e\u7684\u90a3\u4e00\u7ec4\u6bd4\u8f83\u597d\u7684 feature (\u80fd\u591f\u88ab\u5f88\u597d\u5730separate) \u8fdb\u884c\u5206\u7c7b\u7684\uff0c\u7531\u4e8e\u6211\u4eec\u628a output layer \u770b\u505a\u662f\u4e00\u4e2a Multi-class classifier\uff0c\u6240\u4ee5\u6211\u4eec\u4f1a\u5728\u6700\u540e\u4e00\u4e2a layer \u52a0\u4e0a softmax","title":"Output Layer"},{"location":"ML/4_Deep%20learning/#backpropagation","text":"Backpropagation(\u53cd\u5411\u4f20\u64ad)\uff0c\u5c31\u662f\u544a\u8bc9\u6211\u4eec\u7528 gradient descent \u6765 train\u4e00\u4e2a neural network \u7684\u65f6\u5019\u8be5\u600e\u4e48\u505a\uff0c\u5b83\u53ea\u662f\u6c42\u5fae\u5206\u7684\u4e00\u79cd\u65b9\u6cd5\uff0c\u800c\u4e0d\u662f\u4e00\u79cd\u65b0\u7684\u7b97\u6cd5 \u7f51\u7edc\u5b66\u4e60\u7684\u8fc7\u7a0b\u5c31\u662f\u4e0d\u65ad\u8fdb\u884c \u6b63\u5411\u4f20\u64ad\uff0c\u53cd\u5411\u4f20\u64ad\uff08\u8ba1\u7b97\u51fa gradient\uff09\uff0c\u66f4\u65b0\u53c2\u6570 \u5bf9\u6574\u4e2a neural network\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a loss function\uff1a \\(L(\\theta)=\\sum\\limits_{n=1}^N l^n(\\theta)\\) \uff0c\u5b83\u7b49\u4e8e\u6240\u6709 training data \u7684 loss \u4e4b\u548c\uff0c\u5176\u4e2d \\(l^n\\) \u662f\u6837\u672c \\(x^n\\) \u4e0e target \\(\\hat{y}^n\\) \u7684 cross entropy\uff1b\u7136\u540e summary \u6240\u6709\u7684training data \u7684 cross entropy \u540e\u5f97\u5230 \\(L(\\theta)\\) \uff0c\u5bf9\u5176\u505a\u67d0\u4e00\u4e2a\u53c2\u6570w\u505a\u504f\u5fae\u5206\uff0c\u8868\u8fbe\u5f0f\u5982\u4e0b\uff1a $$ \\frac{\\partial L(\\theta)}{\\partial w}=\\sum\\limits_{n=1}^N\\frac{\\partial l^n(\\theta)}{\\partial w} $$ \u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u5982\u4f55\u8ba1\u7b97\u5bf9\u67d0\u4e00\u7b14 data \u7684 \\(\\frac{\\partial l^n(\\theta)}{\\partial w}\\) \u5373\u53ef \u5bf9\u4e8e\u5176\u4e2d\u4e00\u4e2a neuron\uff0c\u6709 \\(z=b+w_1 x_1+w_2 x_2\\) \uff0c\u90a3\u4e48 \\(\\frac{\\partial l}{\\partial w}=\\frac{\\partial z}{\\partial w} \\frac{\\partial l}{\\partial z}\\) \u4e2d\uff0c\u524d\u9762\u7684\u4e00\u4e2a\u662f\u6bd4\u8f83\u597d\u7b97\u7684\uff0c\u540e\u9762\u7684\u4e00\u4e2a\u662f\u6bd4\u8f83\u9ebb\u70e6\u7684","title":"Backpropagation"},{"location":"ML/4_Deep%20learning/#forward-pass","text":"\u5148\u8003\u8651 \\(\\frac{\\partial z}{\\partial w}\\) \u8fd9\u4e00\u9879\uff0c\u53ef\u4ee5\u79d2\u7b97\u51fa\u6765\uff0c \\(\\frac{\\partial z}{\\partial w_1}=x_1 ,\\ \\frac{\\partial z}{\\partial w_2}=x_2\\) \uff0c\u5373 \\(w_1,w_2\\) \u7cfb\u6570\u5bf9\u5e94\u7684\u8f93\u5165\u503c\uff0c\u540c\u65f6\u4e5f\u662f\u524d\u4e00\u4e2a layer \u7684\u8f93\u51fa\u503c","title":"Forward pass"},{"location":"ML/4_Deep%20learning/#backward-pass","text":"\u518d\u8003\u8651 \\(\\frac{\\partial l}{\\partial z}\\) \u8fd9\u4e00\u9879\uff0c\u5b83\u662f\u6bd4\u8f83\u590d\u6742\u7684\uff0c\u8fd9\u91cc\u6211\u4eec\u4f9d\u65e7\u5047\u8bbe activation function \u662f sigmoid function $$ \\frac{\\partial l}{\\partial z}=\\frac{\\partial a}{\\partial z} \\frac{\\partial l}{\\partial a} $$ \u524d\u9762 \\(\\frac{\\partial a}{\\partial z}\\) \u5c31\u662f sigmoid function \u7684\u504f\u5fae\u5206 \u540e\u9762 \\(\\frac{\\partial l}{\\partial a}\\) \u4e3a\u5982\u4e0b\u5f62\u5f0f\uff1a $$ \\frac{\\partial l}{\\partial a}=\\frac{\\partial z'}{\\partial a} \\frac{\\partial l}{\\partial z'}+\\frac{\\partial z''}{\\partial a} \\frac{\\partial l}{\\partial z''} $$ \u8fd9\u6837\u770b\u6765\u5176\u5b9e\u662f\u4e00\u4e2a\u9012\u5f52\u7684\u5f62\u5f0f\uff0c\u5728 output layer \u5f80\u524d\u7b97\u4fbf\u53ef\u4ee5\u6c42\u51fa\u6240\u6709\u7684 \\(\\frac{\\partial l}{\\partial a}\\) \u8ba8\u8bba\u4e00\u4e0b output layer \u7684\u7ed3\u679c\uff1a $$ \\frac{\\partial l}{\\partial z'}=\\frac{\\partial y_1}{\\partial z'} \\frac{\\partial l}{\\partial y_1} $$ \u5176\u4e2d \\(\\frac{\\partial y_1}{\\partial z'}\\) \u5c31\u662f output layer\u7684 activation function (softmax) \u5bf9 \\(z'\\) \u7684\u504f\u5fae\u5206 \u800c \\(\\frac{\\partial l}{\\partial y_1}\\) \u5c31\u662f loss \u5bf9 \\(y_1\\) \u7684\u504f\u5fae\u5206\uff0c\u5b83\u53d6\u51b3\u4e8e\u4f60\u7684 loss function \u662f\u600e\u4e48\u5b9a\u4e49\u7684\uff0c\u4e5f\u5c31\u662f\u4f60\u7684 output \u548c target \u4e4b\u95f4\u662f\u600e\u4e48 evaluate \u7684\uff0c\u4f60\u53ef\u4ee5\u7528 cross entropy\uff0c\u4e5f\u53ef\u4ee5\u7528 mean square error\uff0c\u7528\u4e0d\u540c\u7684\u5b9a\u4e49\uff0c \\(\\frac{\\partial l}{\\partial y_1}\\) \u7684\u503c\u5c31\u4e0d\u4e00\u6837","title":"Backward pass"},{"location":"ML/4_Deep%20learning/#why-deep","text":"\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981 deep learning\uff1f\u4e00\u4e2a\u5f88\u76f4\u89c9\u7684\u7b54\u6848\u662f\uff0c\u8d8a deep\uff0cperformance \u5c31\u8d8a\u597d\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u968f\u7740 deep learning \u4e2d\u7684 layers \u6570\u91cf\u589e\u52a0\uff0cerror \u7387\u4e0d\u65ad\u964d\u4f4e \u751a\u81f3\u6709\u4e00\u4e2a\u7406\u8bba\u662f\u8fd9\u6837\u8bf4\u7684\uff0c\u4efb\u4f55\u8fde\u7eed\u7684 function\uff0c\u5b83 input \u662f\u4e00\u4e2a N \u7ef4\u7684 vector\uff0coutput \u662f\u4e00\u4e2a M \u7ef4\u7684 vector\uff0c\u5b83\u90fd\u53ef\u4ee5\u7528\u4e00\u4e2a hidden layer \u7684 neural network \u6765\u8868\u793a\uff0c\u53ea\u8981\u4f60\u8fd9\u4e2a hidden layer \u7684 neuron \u591f\u591a\uff0c\u5b83\u53ef\u4ee5\u8868\u793a\u6210\u4efb\u4f55\u7684 function\uff0c\u65e2\u7136\u4e00\u4e2a hidden layer \u7684 neural network \u53ef\u4ee5\u8868\u793a\u6210\u4efb\u4f55\u7684 function\uff0c\u800c\u6211\u4eec\u5728\u505a machine learning \u7684\u65f6\u5019\uff0c\u9700\u8981\u7684\u4e1c\u897f\u5c31\u53ea\u662f\u4e00\u4e2a function \u800c\u5df2\uff0c\u90a3\u505a deep \u6709\u4ec0\u4e48\u7279\u6b8a\u7684\u610f\u4e49\u5462\uff1f","title":"Why Deep?"},{"location":"ML/4_Deep%20learning/#design-network-structure-vs-feature-engineering","text":"\u4e0b\u9762\u804a\u4e00\u4e9b\u7ecf\u9a8c\u4e4b\u8c08 network structure \u7684 design \u662f\u4e00\u4ef6\u4e0d\u5bb9\u6613\u7684\u4e8b\uff0c\u5f88\u591a\u65f6\u5019\u9700\u8981\u9760\u7ecf\u9a8c\u76f4\u89c9\uff0c\u4e43\u81f3\u4e00\u4e9b domain knowledge (\u4e13\u4e1a\u9886\u57df\u7684\u77e5\u8bc6) \u672c\u6765\u4e0d\u662f deep learning \u7684 model\uff0c\u8981\u5f97\u5230\u4e00\u4e2a\u597d\u7684\u7ed3\u679c\uff0c\u5f80\u5f80\u9700\u8981\u505a feature engineering (\u7279\u5f81\u5de5\u7a0b)\uff0c\u4e5f\u5c31\u662f\u505a feature transform\uff0c\u7136\u540e\u627e\u4e00\u7ec4\u597d\u7684 feature\uff1b\u4e00\u5f00\u59cb\u5b66\u4e60 deep learning \u7684\u65f6\u5019\uff0c\u597d\u50cf\u4f1a\u89c9\u5f97 deep learning \u7684 layers \u4e4b\u95f4\u4e5f\u662f\u5728\u505a feature transform\uff0c\u4f46\u5b9e\u9645\u4e0a\u5728\u505a deep learning \u7684\u65f6\u5019\uff0c\u5f80\u5f80\u4e0d\u9700\u8981\u4e00\u4e2a\u597d\u7684 feature \uff0c\u6bd4\u5982\u8bf4\u5728\u505a\u5f71\u50cf\u8fa8\u8bc6\u7684\u65f6\u5019\uff0c\u4f60\u53ef\u4ee5\u628a\u6240\u6709\u7684 pixel \u76f4\u63a5\u4e22\u8fdb\u53bb\uff0c\u4f46\u662f\u5728\u8fc7\u53bb\u505a\u56fe\u50cf\u8bc6\u522b\uff0c\u4f60\u662f\u9700\u8981\u5bf9\u56fe\u50cf\u62bd\u53d6\u51fa\u4e00\u4e9b\u4eba\u5b9a\u7684 feature \u51fa\u6765\u7684\uff0c\u8fd9\u4ef6\u4e8b\u60c5\u5c31\u662ffeature transform\uff0c\u4f46\u662f\u6709\u4e86deep learning \u4e4b\u540e\uff0c\u4f60\u5b8c\u5168\u53ef\u4ee5\u76f4\u63a5\u4e22 pixel \u8fdb\u53bb\u786c\u505a deep learning \u5236\u9020\u4e86\u65b0\u7684\u95ee\u9898\uff0c\u5c31\u662f design network \u7684 structure\uff0c\u6240\u4ee5\u95ee\u9898\u53d8\u6210\u4e86 design structure \u548c feature transform \u54ea\u4e00\u4e2a\u66f4\u5bb9\u6613 \u5bf9\u4e8e\u4e00\u4e9b feature transform \u5f88\u96be\u505a\u7684\u4e8b\u60c5\u6bd4\u5982 \u8bed\u97f3\u548c\u6620\u50cf \u8fa8\u8bc6\uff0c\u7528 deep learning \u5c31\u8fdb\u6b65\u7684\u5f88\u5feb\uff1b\u4f46\u5728\u6587\u5b57\u65b9\u9762\u6bd4\u5982\u8bbe\u8ba1\u4e00\u4e2a rule \u53bb detect \u4e00\u7bc7 document \u662f\u6b63\u9762\u7684\u60c5\u7eea\u8fd8\u662f\u8d1f\u9762\u7684\u60c5\u7eea\u65f6\uff0cdeep learning \u76f8\u8f83\u4e8e\u4f20\u7edf\u7684\u65b9\u6cd5\u8fdb\u6b65\u4e0d\u660e\u663e \u957f\u4e45\u800c\u8a00\uff0c\u53ef\u80fd\u6587\u5b57\u5904\u7406\u4e2d\u4f1a\u6709\u4e00\u4e9b\u9690\u85cf\u7684\u8d44\u8baf\u662f\u4eba\u81ea\u5df1\u4e5f\u4e0d\u77e5\u9053\u7684\uff0c\u6240\u4ee5\u8ba9\u673a\u5668\u81ea\u5df1\u53bb\u5b66\u8fd9\u4ef6\u4e8b\u60c5\uff0c\u8fd8\u662f\u53ef\u4ee5\u5360\u5230\u4e00\u4e9b\u4f18\u52bf\uff0c\u53ea\u662f\u773c\u4e0b\u5b83\u8ddf\u4f20\u7edf\u65b9\u6cd5\u7684\u5dee\u5f02\u770b\u8d77\u6765\u5e76\u6ca1\u6709\u90a3\u4e48\u7684\u60ca\u4eba\uff0c\u4f46\u8fd8\u662f\u6709\u8fdb\u6b65\u7684","title":"Design network structure V.s. Feature Engineering"},{"location":"ML/4_Deep%20learning/#tips-for-deep-learning","text":"\u9488\u5bf9 training set \u548c testing set \u4e0a\u7684 performance \u5206\u522b\u63d0\u51fa\u9488\u5bf9\u6027\u7684\u89e3\u51b3\u65b9\u6cd5 1\u3001\u5728 training set \u4e0a\u51c6\u786e\u7387\u4e0d\u9ad8\uff1a new activation function\uff1aReLU\u3001Maxout adaptive learning rate\uff1aAdagrad\u3001RMSProp\u3001Momentum\u3001Adam 2\u3001\u5728 testing set \u4e0a\u51c6\u786e\u7387\u4e0d\u9ad8\uff1aEarly Stopping\u3001Regularization or Dropout","title":"Tips for Deep Learning"},{"location":"ML/4_Deep%20learning/#good-results-on-training-data","text":"\u50cf k nearest neighbor\uff0cdecision tree \u8fd9\u7c7b\u65b9\u6cd5\uff0c\u5b83\u4eec\u5728 training set \u4e0a\u6b63\u786e\u7387\u90fd\u662f100\uff0c\u8fd9\u624d\u662f\u975e\u5e38\u5bb9\u6613 overfitting \u7684\uff0c\u800c\u5bf9 deep learning \u6765\u8bf4\uff0coverfitting \u5f80\u5f80\u4e0d\u4f1a\u662f\u4f60\u9047\u5230\u7684\u7b2c\u4e00\u4e2a\u95ee\u9898 \u5982\u4f55\u5728 Training Data \u4e0a\u5f97\u5230\u597d\u7684 performance \u5462\uff1f \u5206\u4e3a\u4e24\u4e2a\u6a21\u5757\uff0cNew activation function \u548c Adaptive Learning Rate","title":"Good Results on Training Data\uff1f"},{"location":"ML/4_Deep%20learning/#new-activation-function","text":"training \u7684\u7ed3\u679c\u4e0d\u597d\u53ef\u80fd\u662f network \u7684\u67b6\u6784\u8bbe\u8ba1\u7684\u4e0d\u597d\uff0c\u6bd4\u5982\u8bf4\u7528\u7684 activation function \u662f\u5bf9 training \u6bd4\u8f83\u4e0d\u5229\u7684\uff0c\u5c1d\u8bd5\u7740\u6362\u4e00\u4e9b\u65b0\u7684 activation function\uff0c\u4e5f\u8bb8\u53ef\u4ee5\u5e26\u6765\u6bd4\u8f83\u597d\u7684\u7ed3\u679c \u4e0b\u56fe\u662f\u624b\u5199\u6570\u5b57\u8fa8\u8bc6\u7528 sigmoid function \u65f6\u968f\u7740\u5c42\u6570\u589e\u52a0\u5728 training data \u4e0a\u7684\u60c5\u51b5","title":"New activation function"},{"location":"ML/4_Deep%20learning/#vanishing-gradient-problem","text":"\u4e0a\u9762\u8fd9\u4e2a\u95ee\u9898\u7684\u539f\u56e0\u4e0d\u662f overfitting\uff0c\u800c\u662f Vanishing Gradient (\u68af\u5ea6\u6d88\u5931) network \u5f88\u6df1\u7684\u65f6\u5019\uff0c\u5728\u9760\u8fd1 input \u7684\u5730\u65b9\u7684\u53c2\u6570\u7684 gradient \u662f\u6bd4\u8f83\u5c0f\u7684\uff0c\u5728\u9760\u8fd1 output \u7684\u5730\u65b9\u7684 gradient \u662f\u6bd4\u8f83\u5927\u7684\uff1b\u56e0\u6b64\u5728\u8bbe\u5b9a\u76f8\u540c\u7684 learning rate \u65f6\uff0c\u9760\u8fd1 input \u7684\u5730\u65b9\u7684\u53c2\u6570\u7684 update \u662f\u5f88\u6162\u7684 \u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u4e2a\u73b0\u8c61\u53d1\u751f\u5462\uff1f\u5982\u679c\u628a Backpropagation \u7684\u5f0f\u5b50\u5199\u51fa\u6765\u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u5f88\u8f7b\u6613\u5730\u53d1\u73b0\u7528 sigmoid function \u4f1a\u5bfc\u81f4\u8fd9\u4ef6\u4e8b\u60c5\u7684\u53d1\u751f\uff1b\u4f46\u662f\u5176\u5b9e\u4ece\u76f4\u89c9\u4e0a\u6765\u60f3\u4f60\u4e5f\u53ef\u4ee5\u4e86\u89e3\u8fd9\u4ef6\u4e8b\u60c5\u53d1\u751f\u7684\u539f\u56e0\uff1asigmoid function \u4f1a\u628a\u8d1f\u65e0\u7a77\u5927\u5230\u6b63\u65e0\u7a77\u5927\u4e4b\u95f4\u7684\u503c\u90fd\u538b\u7f29\u5230 0~1 \u4e4b\u95f4\uff0c\u6240\u4ee5\u5373\u4f7f \\(\\Delta w\\) \u200b \u5f88\u5927\uff0c\u5982\u679c network \u5f88\u6df1\uff0c\u8870\u51cf\u7684\u6b21\u6570\u5c31\u8d8a\u591a\uff0c\u5bf9 output \u7684\u5f71\u54cd\u5c31\u5f88\u5c0f \u90a3\u4e48\u5982\u4f55\u89e3\u51b3\u5462\uff1f\u6bd4\u8f83\u65e9\u5e74\u7684\u505a\u6cd5\u662f\u53bbtrain RBM\uff0c\u601d\u60f3\u5c31\u662f\uff1a\u5148\u628a\u7b2c\u4e00\u4e2alayer train\u597d\uff0c\u518d\u53bbtrain\u7b2c\u4e8c\u4e2a\uff0c\u7136\u540e\u518d\u7b2c\u4e09\u4e2a... \u4f46\u5176\u5b9e\u6539\u4e00\u4e0b activation function \u53ef\u80fd\u5c31\u53ef\u4ee5 handle \u8fd9\u4e2a\u95ee\u9898","title":"Vanishing Gradient Problem"},{"location":"ML/4_Deep%20learning/#relu","text":"\u73b0\u5728\u6bd4\u8f83\u5e38\u7528\u7684 activation function \u53eb\u505a Rectified Linear Unit (\u6574\u6d41\u7ebf\u6027\u5355\u5143\u51fd\u6570\uff0c\u53c8\u79f0\u4fee\u6b63\u7ebf\u6027\u5355\u5143)\uff0c\u5b83\u7684\u7f29\u5199\u662fReLU \u9009\u62e9 ReLU \u7684\u7406\u7531\u5982\u4e0b\uff1a \u8ddf sigmoid function \u6bd4\u8d77\u6765\uff0cReLU \u7684\u8fd0\u7b97\u5feb\u5f88\u591a ReLU \u7684\u60f3\u6cd5\u7ed3\u5408\u4e86\u751f\u7269\u4e0a\u7684\u89c2\u5bdf ( Pengel \u7684 paper ) \u65e0\u7a77\u591a bias \u4e0d\u540c\u7684 sigmoid function \u53e0\u52a0\u7684\u7ed3\u679c\u4f1a\u53d8\u6210 ReLU ReLU \u53ef\u4ee5\u5904\u7406 Vanishing gradient \u7684\u95ee\u9898 ( the most important thing ) \u7528 ReLU \u65f6\uff0coutput \u8981\u4e48 = 0\uff0c \u8981\u4e48 = input\uff0c\u5f53 output = 0\u65f6\uff0c\u90a3\u4e2a neuron \u5bf9\u6574\u4e2a network \u662f\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u4ece network \u4e2d\u62ff\u6389\uff0c\u62ff\u6389\u4e4b\u540e network \u5c31\u53d8\u6210\u4e86\u4e00\u5171\u7626\u957f\u7684 linear network\uff0clinear \u7684\u597d\u5904\u65f6\u4e0d\u4f1a\u6709 Vanishing Gradient Q\uff1alinear function \u4f1a\u4e0d\u4f1a\u5f88\u5f31\uff1f A\uff1a\u4f7f\u7528 ReLU \u540e\u7684 network \u6574\u4f53\u8fd8\u662f non-linear\uff0cinput \u505a\u51fa\u8f83\u5927\u6539\u53d8\u65f6\uff0c\u5c31\u4f1a\u5bfc\u81f4 neuron \u7684 operation region \u7684\u6539\u53d8 Q\uff1aReLU \u662f\u5206\u65ad\u8fd8\u662f\uff0c\u6ca1\u529e\u6cd5\u5fae\u5206 A\uff1a\u5728\u5b9e\u9645\u64cd\u4f5c\u4e0a\uff0c\u5f53 region \u7684\u8303\u56f4\u5904\u4e8e z>0 \u65f6\uff0c\u5fae\u5206\u503c gradient \u5c31\u662f 1\uff1b\u5f53 region \u7684\u8303\u56f4\u5904\u4e8e z<0 \u65f6\uff0c\u5fae\u5206\u503c gradient \u5c31\u662f 0\uff1b\u5f53 z \u4e3a 0 \u65f6\uff0c\u5c31\u4e0d\u8981\u7ba1\u5b83","title":"ReLU"},{"location":"ML/4_Deep%20learning/#relu-variant","text":"ReLU \u5728 update \u53c2\u6570\u65f6\u5728 input<0 \u65f6\u65e0\u6cd5\u66f4\u65b0\u53c2\u6570\uff0c\u5982\u679c\u5728 input<0 \u65f6\uff0c\u5fae\u5206\u8fd8\u80fd\u6709\u4e00\u70b9\u7684\u503c\uff0c\u6bd4\u5982\u4ee4 \\(a=0.01z\\) \u200b\u200b\uff0c\u8fd9\u4e2a\u4e1c\u897f\u5c31\u53eb\u505a Leaky ReLU \u90a3\u4e48 \\(z\\) \u7684\u7cfb\u6570\u53ef\u4e0d\u53ef\u4ee5\u662f\u5176\u4ed6\u7684\u5462\uff1f\u4e8e\u662f\u5c31\u63d0\u51fa\u4e86 Parametric ReLU \uff0c \\(a=\\alpha \\cdot z\\) \uff0c\u5176\u4e2d \\(\\alpha\\) \u200b \u4e0d\u662f\u56fa\u5b9a\u7684\u503c\uff0c\u800c\u662f network \u7684\u4e00\u4e2a\u53c2\u6570\uff0c\u901a\u8fc7 training data \u5b66\u4e60\u51fa\u6765 \u66f4\u8fdb\u4e00\u6b65\uff0c\u4e3a\u4ec0\u4e48\u4e00\u5b9a\u8981\u662f ReLU \u7684\u6837\u5b50\u5462\uff1factivation function \u53ef\u4e0d\u53ef\u4ee5\u6709\u522b\u7684\u6837\u5b50\u5462\uff1f\u6240\u4ee5\u540e\u6765\u6709\u4e86\u4e00\u4e2a\u66f4\u8fdb\u9636\u7684\u60f3\u6cd5\uff0c\u53eb\u505a Maxout network","title":"ReLU-variant"},{"location":"ML/4_Deep%20learning/#maxout","text":"Maxout \u7684\u60f3\u6cd5\u662f\uff0c\u8ba9 network \u81ea\u52a8\u53bb\u5b66\u4e60\u5b83\u7684 activation function\uff0c\u90a3 Maxout network \u5c31\u53ef\u4ee5\u81ea\u52a8\u5b66\u51fa ReLU\uff0c\u4e5f\u53ef\u4ee5\u5b66\u51fa\u5176\u4ed6\u7684 activation function\uff0c\u8fd9\u4e00\u5207\u90fd\u662f\u7531 training data \u6765\u51b3\u5b9a\u7684 \u5047\u8bbe\u73b0\u5728\u6709 input \\(x_1,x_2\\) \uff0c\u5b83\u4eec\u4e58\u4e0a\u51e0\u7ec4\u4e0d\u540c\u7684 weight \u5206\u522b\u5f97\u5230 5,7,-1,1\uff0c\u8fd9\u4e9b\u503c\u672c\u6765\u662f\u4e0d\u540c neuron \u7684 input\uff0c\u5b83\u4eec\u8981\u901a\u8fc7 activation function \u53d8\u4e3a neuron \u7684 output\uff1b\u4f46\u5728Maxout network \u91cc\uff0c\u6211\u4eec\u4e8b\u5148\u51b3\u5b9a\u597d\u5c06\u67d0\u51e0\u4e2a \"neuron\" \u7684 input \u5206\u4e3a\u4e00\u4e2a group\uff0c\u6bd4\u59825,7 \u5206\u4e3a\u4e00\u4e2a group\uff0c\u7136\u540e\u5728\u8fd9\u4e2a group \u91cc\u9009\u53d6\u4e00\u4e2a\u6700\u5927\u503c 7 \u4f5c\u4e3a output \u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u597d\u50cf\u5728\u4e00\u4e2a layer \u4e0a\u505a Max Pooling \u4e00\u6837\uff0c\u5b83\u548c\u539f\u6765\u7684 network \u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u5b83\u628a\u539f\u6765\u51e0\u4e2a \"neuron\" \u7684 input \u6309\u4e00\u5b9a\u89c4\u5219\u7ec4\u6210\u4e86\u4e00\u4e2a group\uff0c\u7136\u540e\u5e76\u6ca1\u6709\u4f7f\u5b83\u4eec\u901a\u8fc7 activation function\uff0c\u800c\u662f\u9009\u53d6\u5176\u4e2d\u7684\u6700\u5927\u503c\u5f53\u505a\u8fd9\u51e0\u4e2a \"neuron\" \u7684 output \u5f53\u7136\uff0c\u5b9e\u9645\u4e0a\u539f\u6765\u7684 \"neuron\" \u65e9\u5c31\u5df2\u7ecf\u4e0d\u5b58\u5728\u4e86\uff0c\u8fd9\u51e0\u4e2a\u88ab\u5408\u5e76\u7684 \"neuron\" \u5e94\u5f53\u88ab\u770b\u505a\u662f\u4e00\u4e2a\u65b0\u7684 neuron\uff0c\u8fd9\u4e2a\u65b0\u7684 neuron \u7684 input \u662f\u539f\u6765\u51e0\u4e2a \"neuron\" \u7684 input \u7ec4\u6210\u7684 vector\uff0coutput \u5219\u53d6 input \u7684\u6700\u5927\u503c\uff0c\u800c\u5e76\u975e\u7531 activation function \u4ea7\u751f group \u7684\u5927\u5c0f\u7531\u81ea\u5df1\u51b3\u5b9a \u90a3\u5982\u679c\u8bf4 Maxout \u53ef\u4ee5\u6a21\u4eff\u51fa\u5176\u4ed6\u7684 activation function\uff0c\u90a3\u662f\u5982\u4f55\u6a21\u4eff\u51fa ReLU \u7684\u5462\uff1f \u5176\u5b9e\u53ea\u8981 \\(z_2\\) \u7684 2 \u4e2a\u53c2\u6570\u90fd\u8bbe\u4e3a 0\uff0c\u7136\u540e\u505a Max Pooling \u5373\u53ef \u90a3\u6a21\u4eff\u51fa\u5176\u4ed6\u7684 activation function \u5462\uff1f \u6bd4\u5982 \\(z_2\\) \u7684\u53c2\u6570 w \u548c b \u4e0d\u662f0\uff0c\u800c\u662f \\(w',b'\\) \u200b\uff0c\u6b64\u65f6\u5982\u4e0b\u56fe\uff0cMax Pooling \u4f7f 2 \u6761\u76f4\u7ebf\u5f62\u6210\u4e00\u4e2a V \u5b57\u578b Maxout \u53ef\u4ee5\u5b9e\u73b0\u4efb\u4f55 piecewise linear convex activation function (\u5206\u6bb5\u7ebf\u6027\u51f8\u6fc0\u6d3b\u51fd\u6570)\uff0c\u5206\u51e0\u6bb5\u53d6\u51b3\u4e8e\u4e00\u4e2a group \u6709\u51e0\u4e2a input","title":"Maxout"},{"location":"ML/4_Deep%20learning/#how-to-train-maxout","text":"\u5176\u5b9e Max operation \u5c31\u662f linear \u7684 operation\uff0c\u5c31\u50cf\u524d\u9762 ReLU \u63d0\u5230\u7684\u4e00\u6837\uff0c\u6574\u4f53\u6765\u8bf4\u4e0d\u662f Linear \u7684\uff0c\u4f46\u662f\u5f53\u628a data \u653e\u8fdb\u53bb\u540e\u4e00\u4e9b neuron \u5c31\u88ab\u6682\u65f6\u9690\u85cf\u4e86\uff0c\u6b64\u65f6\u5c31\u662f linear \u7684\uff1b\u8fd9\u4e9b\u88ab\u9690\u85cf\u7684 neuron \u4f1a\u5728\u4e0d\u540c\u7684 input data \u4e2d\u88ab\u8bad\u7ec3\u5230","title":"How to train Maxout"},{"location":"ML/4_Deep%20learning/#adaptive-learning-rate","text":"\u524d\u9762\u5df2\u7ecf\u8bb2\u8fc7 Adagrad \u7684\u505a\u6cd5\uff0c\u4f46\u5b9e\u9645\u95ee\u9898\u4e2d\u53ef\u80fd\u8fdc\u6bd4 Adagrad \u80fd\u505a\u7684\u95ee\u9898\u8981\u6765\u7684\u590d\u6742","title":"Adaptive Learning Rate"},{"location":"ML/4_Deep%20learning/#rmsprop","text":"loss function \u4e5f\u6709\u53ef\u80fd\u4e00\u4f1a\u513f\u5e73\u5766\u4e00\u4f1a\u513f\u9661\u5ced\uff0c\u6240\u4ee5\u4f60\u8981\u968f\u65f6\u6839\u636e gradient \u7684\u5927\u5c0f\u6765\u5feb\u901f\u5730\u8c03\u6574 learning rate\uff0c\u771f\u6b63\u8981\u5904\u7406 deep learning \u7684\u95ee\u9898\uff0c\u7528 Adagrad \u53ef\u80fd\u662f\u4e0d\u591f\u7684\uff0c\u4f60\u9700\u8981\u66f4 dynamic \u7684\u8c03\u6574 learning rate \u7684\u65b9\u6cd5\uff0c\u6240\u4ee5\u4ea7\u751f \u4e86Adagrad \u7684\u8fdb\u9636\u7248\u2014\u2014 RMSProp learning rate \u4f9d\u65e7\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u56fa\u5b9a\u7684\u503c \\(\\eta\\) \u9664\u6389\u4e00\u4e2a\u53d8\u5316\u7684\u503c \\(\\sigma\\) \uff0c\u8fd9\u4e2a \\(\\sigma\\) \u7b49\u4e8e\u4e0a\u4e00\u4e2a \\(\\sigma\\) \u548c\u5f53\u524d\u68af\u5ea6 \\(g\\) \u7684\u52a0\u6743\u65b9\u5747\u6839\uff08\u7279\u522b\u7684\u662f\uff0c\u5728\u7b2c\u4e00\u4e2a\u65f6\u95f4\u70b9\uff0c \\(\\sigma^0\\) \u5c31\u662f\u7b2c\u4e00\u4e2a\u7b97\u51fa\u6765\u7684gradient\u503c \\(g^0\\) \u200b\uff09\uff0c\u5373\uff1a \\[ \\begin{align} w^{t+1}&=w^t-\\frac{\\eta}{\\sigma^t}g^t \\\\ \\sigma^t&=\\sqrt{\\alpha(\\sigma^{t-1})^2+(1-\\alpha)(g^t)^2} \\end{align} \\] \\(\\alpha\\) \u200b \u503c\u662f\u53ef\u4ee5\u81ea\u7531\u8c03\u6574\u7684\uff0cRMSProp \u8ddf Adagrad \u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0cAdagrad \u7684\u5206\u6bcd\u662f\u5bf9\u8fc7\u7a0b\u4e2d\u6240\u6709\u7684 gradient \u53d6\u5e73\u65b9\u548c\u5f00\u6839\u53f7\uff0c\u4e5f\u5c31\u662f\u8bf4 Adagrad \u8003\u8651\u7684\u662f\u6574\u4e2a\u8fc7\u7a0b\u5e73\u5747\u7684 gradient \u4fe1\u606f\uff1b\u800c RMSProp \u867d\u7136\u4e5f\u662f\u5bf9\u6240\u6709\u7684 gradient \u8fdb\u884c\u5e73\u65b9\u548c\u5f00\u6839\u53f7\uff0c\u4f46\u662f\u5b83 \u7528\u4e00\u4e2a \\(\\alpha\\) \u200b \u6765\u8c03\u6574\u5bf9\u4e0d\u540c gradient \u7684\u4f7f\u7528\u7a0b\u5ea6 \uff0c\u6bd4\u5982\u4f60\u628a \\(\\alpha\\) \u7684\u503c\u8bbe\u7684\u5c0f\u4e00\u70b9\uff0c\u610f\u601d\u5c31\u662f\u4f60\u66f4\u503e\u5411\u4e8e\u76f8\u4fe1\u65b0\u7684 gradient \u6240\u544a\u8bc9\u4f60\u7684 error surface \u7684\u5e73\u6ed1\u6216\u9661\u5ced\u7a0b\u5ea6\uff0c\u800c\u6bd4\u8f83\u65e0\u89c6\u4e8e\u65e7\u7684gradient \u6240\u63d0\u4f9b\u7ed9\u4f60\u7684 information","title":"RMSProp"},{"location":"ML/4_Deep%20learning/#momentum","text":"\u9664\u4e86 learning rate \u7684\u95ee\u9898\u4ee5\u5916\uff0c\u5728\u505a deep learning \u7684\u65f6\u5019\uff0c\u5f88\u591a\u4eba\u62c5\u5fc3\u4f1a\u5361\u5728 local minimum\u3001saddle point \u6216\u662f plateau \u7684\u5730\u65b9\uff1b\u4f46\u5176\u5b9e Yann LeCun \u5728 07 \u5e74\u7684\u65f6\u5019\uff0c\u5c31\u63d0\u51fa\u4e86\u4e00\u4e2a\u86ee\u7279\u522b\u7684\u8bf4\u6cd5\uff0c\u4ed6\u8bf4\u4f60\u4e0d\u8981\u592a\u62c5\u5fc3 local minima \u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u4e00\u65e6\u51fa\u73b0 local minima\uff0c\u5b83\u5c31\u5fc5\u987b\u5728\u6bcf\u4e00\u4e2a dimension \u90fd\u662f\u5c71\u8c37\u7684\u4f4e\u8c37\u5f62\u72b6\uff0c\u53c2\u6570\u975e\u5e38\u591a\u65f6\u8fd9\u79cd\u6982\u7387\u662f\u975e\u5e38\u5c0f\u7684 \u6709\u4e00\u4e2a heuristic(\u542f\u53d1\u6027) \u7684\u65b9\u6cd5\u53ef\u4ee5\u7a0d\u5fae\u5904\u7406\u4e00\u4e0b\u4e0a\u9762\u6240\u8bf4\u7684 \"\u5361\u4f4f\" \u7684\u95ee\u9898\uff0c\u5b83\u7684\u7075\u611f\u6765\u81ea\u4e8e\u771f\u5b9e\u4e16\u754c\uff1a\u628a\u60ef\u6027\u52a0\u5230 gradient descent \u91cc\u9762\uff0c\u8fd9\u4ef6\u4e8b\u60c5\u5c31\u53eb\u505a Momentum how to do Momentum\uff1f \u5f53\u6211\u4eec\u5728 gradient descent \u91cc\u52a0\u4e0a Momentum \u7684\u65f6\u5019\uff0c\u6bcf\u4e00\u6b21 update \u7684\u65b9\u5411\uff0c\u4e0d\u518d\u53ea\u8003\u8651 gradient \u7684\u65b9\u5411\uff0c\u8fd8\u8981\u8003\u8651\u4e0a\u4e00\u6b21 update \u7684\u65b9\u5411\uff0c\u90a3\u8fd9\u91cc\u6211\u4eec\u5c31\u7528\u4e00\u4e2a\u53d8\u91cf \\(v\\) \u53bb\u8bb0\u5f55\u524d\u4e00\u4e2a\u65f6\u95f4\u70b9 update \u7684\u65b9\u5411 \u968f\u673a\u9009\u4e00\u4e2a\u521d\u59cb\u503c \\(\\theta^0\\) \uff0c\u521d\u59cb\u5316 \\(v^0=0\\) \uff0c\u63a5\u4e0b\u6765\u8ba1\u7b97 \\(\\theta^0\\) \u5904\u7684 gradient\uff0c\u7136\u540e\u6211\u4eec\u8981\u79fb\u52a8\u7684\u65b9\u5411\u662f\u7531\u524d\u4e00\u4e2a\u65f6\u95f4\u70b9\u7684\u79fb\u52a8\u65b9\u5411 \\(v^0\\) \u548c gradient \u7684\u53cd\u65b9\u5411 \\(\\nabla L(\\theta^0)\\) \u6765\u51b3\u5b9a\u7684\uff0c\u5373 $$ v^1=\\lambda v^0-\\eta \\nabla L(\\theta^0) $$ \u6ce8\uff1a\u8fd9\u91cc\u7684 \\(\\lambda\\) \u4e5f\u662f\u4e00\u4e2a\u624b\u52a8\u8c03\u6574\u7684\u53c2\u6570\uff0c\u5b83\u8868\u793a\u60ef\u6027\u5bf9\u524d\u8fdb\u65b9\u5411\u7684\u5f71\u54cd\u6709\u591a\u5927 \u5176\u5b9e\u6bcf\u4e00\u4e2a\u65f6\u95f4\u70b9\u8981\u79fb\u52a8\u7684\u6b65\u4f10 \\(v^i\\) \u200b\uff0c\u5305\u62ec\u5927\u5c0f\u548c\u65b9\u5411\uff0c\u90fd\u662f\u524d\u9762\u6240\u6709 gradient \u7684\u52a0\u6743\u548c\uff0c\u4f46\u8d8a\u4e4b\u524d\u7684 gradient \u7684\u6743\u91cd\u8d8a\u5c0f","title":"Momentum"},{"location":"ML/4_Deep%20learning/#adam","text":"\u5176\u5b9e RMSProp \u52a0\u4e0a Momentum\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230 Adam \u6839\u636e\u4e0b\u9762\u7684 paper \u6765\u5feb\u901f\u63cf\u8ff0\u4e00\u4e0b Adam \u7684 algorithm\uff1a \u5148\u521d\u59cb\u5316 \\(m_0=0\\) \u200b\uff0c \\(m_0\\) \u200b\u5c31\u662f Momentum \u4e2d\uff0c\u524d\u4e00\u4e2a\u65f6\u95f4\u70b9\u7684 movement \u518d\u521d\u59cb\u5316 \\(v_0=0\\) \u200b\uff0c \\(v_0\\) \u200b \u5c31\u662f RMSProp \u91cc\u8ba1\u7b97 gradient \u7684 root mean square \u7684 \\(\\sigma\\) \u200b \u6700\u540e\u521d\u59cb\u5316 \\(t=0\\) \u200b\uff0ct \u7528\u6765\u8868\u793a\u65f6\u95f4\u70b9 \u5148\u7b97\u51fa gradient \\(g_t\\) \u200b \\[ g_t=\\nabla _{\\theta}f_t(\\theta_{t-1}) \\] \u518d\u6839\u636e\u8fc7\u53bb\u8981\u8d70\u7684 movement \\(m_{t-1}\\) \u548c gradient \\(g_t\\) \uff0c\u7b97\u51fa\u73b0\u5728\u8981\u8d70\u7684 movement \\(m_t\\) \u2014\u2014Momentum \\[ m_t=\\beta_1 m_{t-1}+(1-\\beta_1) g_t \\] \u7136\u540e\u6839\u636e\u524d\u4e00\u4e2a\u65f6\u95f4\u70b9\u7684 \\(v_{t-1}\\) \u200b\u200b \u548c gradient \\(g_t\\) \u200b\u200b \u7684\u5e73\u65b9\uff0c\u7b97\u4e00\u4e0b\u653e\u5728\u5206\u6bcd\u7684 \\(v_t\\) \u200b\u200b\u2014\u2014RMSProp \\[ v_t=\\beta_2 v_{t-1}+(1-\\beta_2) g_t^2 \\] \u63a5\u4e0b\u6765\u505a\u4e86\u4e00\u4e2a\u539f\u6765 RMSProp \u548c Momentum \u91cc\u6ca1\u6709\u7684\u4e1c\u897f\uff0c\u5c31\u662f bias correction\uff0c\u5b83\u4f7f \\(m_t\\) \u200b\u200b\u200b \u548c \\(v_t\\) \u200b\u200b\u200b\u200b \u90fd\u9664\u4e0a\u4e00\u4e2a\u503c\uff0c\u8fd9\u4e2a\u503c\u672c\u6765\u6bd4\u8f83\u5c0f\uff0c\u540e\u6765\u4f1a\u8d8a\u6765\u8d8a\u63a5\u8fd1\u4e8e1\uff08 \\(\\beta_1^t\\) \u548c \\(\\beta_2^t\\) \u4f1a\u8d8a\u6765\u8d8a\u5c0f\uff09 \\[ \\begin{align} \\hat{m}_t=\\frac{m_t}{1-\\beta_1^t} \\\\ \\hat{v}_t=\\frac{v_t}{1-\\beta_2^t} \\end{align} \\] \u6700\u540e\u505a update\uff0c\u628a Momentum \u5efa\u8bae\u4f60\u7684\u65b9\u5411 \\(\\hat{m_t}\\) \u4e58\u4e0a learning rate \\(\\alpha\\) \uff0c\u518d\u9664\u6389 RMSProp normalize \u540e\u5efa\u8bae\u7684 learning rate \u5206\u6bcd\uff0c\u7136\u540e\u5f97\u5230 update \u7684 movement \\[ \\theta_t=\\theta_{t-1}-\\frac{\\alpha \\cdot \\hat{m}_t}{\\sqrt{\\hat{v}_t}+\\epsilon} \\]","title":"Adam"},{"location":"ML/4_Deep%20learning/#good-results-on-testing-data","text":"\u5982\u679c training data \u4e0a\u5f97\u5230\u4e86\u597d\u7684 performance\uff0c\u4f46\u662f testing set \u4e0a\u6ca1\u6709\uff0c\u90a3\u624d\u662f overfitting \u56de\u53bb\u89e3\u51b3 overfitting \u65f6\u589e\u52a0\u4e86\u65b0\u7684 technique \u540e\u4f1a\u8ba9 training set \u4e0a\u7684\u7ed3\u679c\u53d8\u574f\uff0c\u6240\u4ee5\u9700\u8981\u91cd\u65b0\u68c0\u67e5 model \u5728 training set \u4e0a\u7684\u7ed3\u679c\uff1b\u5982\u679c\u53d8\u574f\u7684\u8bdd\uff0c\u53ef\u80fd\u5c31\u9700\u8981\u4ece\u5934\u5bf9 network training \u7684 process \u505a\u4e00\u4e9b\u8c03\u6574\uff1b\u5982\u679c training set \u548c testing set \u4e0a\u90fd\u6709\u597d\u7684\u7ed3\u679c\uff0c\u90a3\u5c31\u6210\u529f\u4e86 \u5206\u4e3a\u4e09\u4e2a\u6a21\u5757\uff0cEarly Stopping\u3001Regularization \u548c Dropout \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cEarly Stopping \u548c Regularization \u662f\u5f88 typical \u7684\u505a\u6cd5\uff0c\u5b83\u4eec\u4e0d\u662f\u7279\u522b\u4e3adeep learning \u6240\u8bbe\u8ba1\u7684\uff1b\u800c Dropout \u662f\u4e00\u4e2a\u86ee\u6709 deep learning \u7279\u8272\u7684\u505a\u6cd5","title":"Good Results on Testing Data\uff1f"},{"location":"ML/4_Deep%20learning/#early-stopping","text":"\u7406\u60f3\u4e0a\u5047\u5982\u4f60\u77e5\u9053 testing data \u4e0a\u7684 loss \u53d8\u5316\u60c5\u51b5\uff0c\u4f60\u4f1a\u5728 testing set \u7684 loss \u6700\u5c0f\u7684\u65f6\u5019\u505c\u4e0b\u6765\uff0c\u800c\u4e0d\u662f\u5728 training set \u7684 loss \u6700\u5c0f\u7684\u65f6\u5019\u505c\u4e0b\u6765\uff1b\u4f46 testing set \u5b9e\u9645\u4e0a\u662f\u672a\u77e5\u7684\u4e1c\u897f\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u7528 validation set \u6765\u66ff\u4ee3\u5b83\u53bb\u505a\u8fd9\u4ef6\u4e8b\u60c5","title":"Early Stopping"},{"location":"ML/4_Deep%20learning/#regularization","text":"regularization \u5c31\u662f\u5728\u539f\u6765\u7684 loss function \u4e0a\u989d\u5916\u589e\u52a0\u51e0\u4e2a term\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u53c2\u6570\u90fd\u8bbe\u7f6e\u4e00\u4e2a\u60e9\u7f5a\u9879\uff0c\u53ef\u4ee5\u8ba9\u6700\u540e\u7684 model \u53d8\u5e73\u6ed1\u4ee5\u9632\u6b62 overfitting \u4e0b\u9762\u7684\u8303\u6570\u4f3c\u4e4e\u548c\u5176\u4ed6\u5730\u65b9\u4e0d\u592a\u4e00\u6837 L2 regularization\uff1a\u5b9a\u4e49\u65b0\u7684 loss function \\[ \\begin{align} L'(\\theta)&=L(\\theta)+\\frac{1}{2}\\lambda||\\theta||_2 \\\\ ||\\theta||_2&=(w_1)^2+(w_2)^2+... \\end{align} \\] L1 regularization\uff1a\u5b9a\u4e49\u65b0\u7684 loss function \\[ \\begin{align} L'(\\theta)&=L(\\theta)+\\frac{1}{2}\\lambda||\\theta||_1 \\\\ ||\\theta||_2&=|w_1|+|w_2|+... \\end{align} \\] Q\uff1aL1 regularization \u5982\u4f55\u5fae\u5206\uff1f A\uff1aV \u5b57\u5f62\uff0c\u53f3\u8fb9\u662f 1\uff0c\u5de6\u8fb9\u662f -1\uff0c \u4e3a 0 \u968f\u4fbf\u7ed9\u4e00\u4e2a\u503c\u6bd4\u5982 0 L2 regularization \u5f53\u53c2\u6570\u6bd4\u8f83\u5c0f\u7684\u65f6\u5019\u4e0b\u964d\u7684\u4f1a\u5f88\u6162\uff0c\u53c2\u6570\u6bd4\u8f83\u5927\u7684\u65f6\u5019\u4e0b\u964d\u7684\u65f6\u5019\u4f1a\u5f88\u5feb\uff0c\u6240\u4ee5\u6700\u540e train \u51fa\u6765\u7684\u53c2\u6570\u90fd\u662f\u6bd4\u8f83\u5c0f\u7684 L1 regularization \u6bcf\u6b21\u90fd\u4e0b\u964d\u56fa\u5b9a\u7684\u503c\uff0c\u6240\u4ee5 train \u51fa\u6765\u6709\u5f88\u591a\u53c2\u6570\u63a5\u8fd1 0\uff0c\u4e5f\u4f1a\u6709\u5f88\u5927\u7684\u503c \uff08\u8fd9 2 \u79cd loss function \u7ecf\u5e38\u7528\u4e8e\u6570\u636e\u964d\u7ef4\u4e4b\u4e2d\uff0c\u5982 \u5cad\u56de\u5f52 \u548c Lasso\uff09","title":"Regularization"},{"location":"ML/4_Deep%20learning/#dropout","text":"training \u7684\u65f6\u5019\uff0c\u6bcf\u6b21 update \u53c2\u6570\u4e4b\u524d\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2a neuron (\u4e5f\u5305\u62ec input layer \u7684 \"neuron\") \u505asampling (\u62bd\u6837) \uff0c\u6bcf\u4e2a neuron \u90fd\u6709 p% \u7684\u51e0\u7387\u4f1a\u88ab\u4e22\u6389\uff0c\u5982\u679c\u67d0\u4e2a neuron \u88ab\u4e22\u6389\u7684\u8bdd\uff0c\u8ddf\u5b83\u76f8\u8fde\u7684weight\u4e5f\u90fd\u8981\u88ab\u4e22\u6389 \u5b9e\u9645\u4e0a\u5c31\u662f\u6bcf\u6b21 update \u53c2\u6570\u4e4b\u524d\u90fd\u901a\u8fc7\u62bd\u6837\u53ea\u4fdd\u7559 network \u4e2d\u7684\u4e00\u90e8\u5206 neuron \u6765\u505a\u8bad\u7ec3 \u6ce8\uff1a\u6bcf\u6b21 update \u53c2\u6570\u4e4b\u524d\u90fd\u8981\u505a\u4e00\u904d sampling\uff0c\u6240\u4ee5\u6bcf\u6b21 update \u53c2\u6570\u7684\u65f6\u5019\uff0c\u62ff\u6765 training \u7684 network structure \u90fd\u662f\u4e0d\u4e00\u6837\u7684\uff1b\u4f60\u53ef\u80fd\u4f1a\u89c9\u5f97\u8fd9\u4e2a\u65b9\u6cd5\u8ddf\u524d\u9762\u63d0\u5230\u7684 Maxout \u4f1a\u6709\u4e00\u70b9\u50cf\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0cMaxout \u662f\u6bcf\u4e00\u7b14 data \u5bf9\u5e94\u7684 network structure \u4e0d\u540c\uff0c\u800c Dropout \u662f\u6bcf\u4e00\u6b21 update \u7684network structure \u90fd\u662f\u4e0d\u540c\u7684 (\u6bcf\u4e00\u4e2a minibatch \u5bf9\u5e94\u7740\u4e00\u6b21 update\uff0c\u800c\u4e00\u4e2a minibatch \u91cc\u542b\u6709\u5f88\u591a\u7b14 data) \u4f7f\u7528 dropout\uff0c\u5f97\u5230\u7684 train performance \u5176\u5b9e\u662f\u4f1a\u53d8\u5dee\u7684\uff0c\u4f46\u8fd9\u5e76\u4e0d\u662f\u95ee\u9898\uff0c\u56e0\u4e3a\uff1a Dropout \u771f\u6b63\u8981\u505a\u7684\u4e8b\u60c5\uff0c\u5c31\u662f\u8981\u8ba9\u4f60\u5728 training set \u4e0a\u7684\u7ed3\u679c\u53d8\u5dee\uff0c\u4f46\u662f\u5728 testing set \u4e0a\u7684\u7ed3\u679c\u662f\u53d8\u597d\u7684 \u8981\u6ce8\u610f\u7684\u662f Dropout \u662f\u5728 training \u4e0a\u8868\u73b0\u597d\u800c testing \u4e0a\u8868\u73b0\u4e0d\u597d\u624d\u505a\u7684 \u9700\u8981\u6ce8\u610f\u7684\u4e8b\uff1a testing \u7684\u65f6\u5019\u4e0d\u505a dropout\uff0c\u6240\u6709\u7684 neuron \u90fd\u8981\u88ab\u7528\u5230 \u5047\u8bbe\u5728 training \u7684\u65f6\u5019\uff0cdropout rate \u662fp%\uff0c\u4ece training data \u4e2d\u88ab learn \u51fa\u6765\u7684\u6240\u6709 weight \u90fd\u8981\u4e58\u4e0a (1-p%) \u624d\u80fd\u88ab\u5f53\u505a testing \u7684 weight \u4f7f\u7528","title":"Dropout"},{"location":"ML/4_Deep%20learning/#do-not-always-blame-overfitting","text":"\u4e0d\u80fd\u53ea\u770b\u53f3\u8fb9\u7684\u56fe\u5c31\u8bf4\u662f overfitting\uff0c\u56e0\u4e3a\u53ef\u80fd\u672c\u6765 56-layer \u7684 model \u5c31\u6bd4 20-layer \u7684model \u8868\u73b0\u7684\u66f4\u5dee\uff1b\u4e5f\u4e0d\u80fd\u8bf4\u662f underfitting\uff0c\u56e0\u4e3a underfitting \u7684\u672c\u610f\u662f\u6307 model \u7684 complexity \u4e0d\u8db3\uff0c\u6240\u4ee5\u8fd9\u79cd\u60c5\u51b5\u5176\u5b9e\u53ea\u662f\u6ca1\u6709 train \u597d\uff0c\u6bd4\u5982\u6709 local minimum \u7684\u95ee\u9898\uff0c\u6709 saddle point \u7684\u95ee\u9898\uff0c\u6709 plateau \u7684\u95ee\u9898...","title":"Do not always blame overfitting"},{"location":"ML/4_Deep%20learning/#why-deep_1","text":"\u5728\u76f8\u540c\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\uff0cshallow network \u548c deep network \u76f8\u6bd4\u4e00\u822c\u662f deep network \u8868\u73b0\u4f1a\u597d\u4e00\u4e9b deep learning \u4e2d\u7684\u6bcf\u4e00\u5c42\u7684 layer \u90fd\u662f\u4e00\u4e2a\u5b50\u4efb\u52a1\uff0c\u505a\u597d\u540e\u7531\u4e0b\u4e00\u5c42\u53bb\u505a\u8fdb\u4e00\u6b65\u7684\u4efb\u52a1\uff0c\u800c shallow network \u505a\u4e0d\u5230\u8fd9\u6837 \u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u662f\uff0c\u8981\u628a input \u7684\u4eba\u7269\u5206\u4e3a\u56db\u7c7b\uff1a\u957f\u5934\u53d1\u5973\u751f\u3001\u957f\u5934\u53d1\u7537\u751f\u3001\u77ed\u5934\u53d1\u5973\u751f\u3001\u77ed\u5934\u53d1\u7537\u751f \u5982\u679c\u7528 shallow network \u5c31\u662f\u5206\u522b\u72ec\u7acb\u5730 train \u56db\u4e2a classifier (\u5c31\u76f8\u5f53\u4e8e\u8bad\u7ec3\u56db\u4e2a\u72ec\u7acb\u7684 model)\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u5206\u7c7b\u7684\u95ee\u9898\uff1b\u4f46\u662f\u6709\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u957f\u5934\u53d1\u7537\u751f\u7684 data \u662f\u6bd4\u8f83\u5c11\u7684\uff0c\u6ca1\u6709\u592a\u591a\u7684 training data\uff0c\u6240\u4ee5\uff0c\u4f60 train \u51fa\u6765\u7684 classifier \u5c31\u6bd4\u8f83 weak\uff0c\u53bb detect \u957f\u5934\u53d1\u7537\u751f\u7684 performance \u5c31\u6bd4\u8f83\u5dee \u4f46\u662f\u7537\u751f\u4e0e\u5973\u751f\u7684 data\uff0c\u957f\u53d1\u4e0e\u77ed\u53d1\u7684 data \u662f\u5f88\u591a\u7684\uff0c\u6240\u4ee5\u5982\u679c\u7528 deep network \u7684\u8bdd\uff0c\u7ecf\u8fc7\u524d\u9762\u51e0\u5c42 layer \u7684\u7279\u5f81\u62bd\u53d6\uff0c\u5c31\u53ef\u4ee5\u5934\u53d1\u7684 data \u4e22\u7ed9\u4e00\u4e2a Classifier2\uff0c\u628a\u7537\u751f\u6216\u5973\u751f\u7684 data \u4e22\u7ed9\u4e00\u4e2a Classifier1\uff0c\u8fd9\u6837\u5c31\u771f\u6b63\u505a\u5230\u4e86\u5145\u5206\u3001\u9ad8\u6548\u5730\u5229\u7528\u6570\u636e\uff0c\u6700\u7ec8\u7684 Classifier \u518d\u6839\u636e Classifier1 \u548c Classifier2 \u63d0\u4f9b\u7684\u4fe1\u606f\u7ed9\u51fa\u56db\u7c7b\u4eba\u7684\u5206\u7c7b\u7ed3\u679c","title":"Why Deep?"},{"location":"ML/5_Convolutional%20Neural%20Network/","text":"Convolutional Neural Network \u00b6 CNN \u5e38\u5e38\u88ab\u7528\u5728\u5f71\u50cf\u5904\u7406\u4e0a\uff0c\u5b83\u7684 theory base \u5c31\u662f\u4e09\u4e2aproperty\uff0c\u548c\u4e24\u4e2a\u67b6\u6784 convolution \u67b6\u6784\uff1a\u9488\u5bf9property 1\u548cproperty 2 max pooling \u67b6\u6784\uff1a\u9488\u5bf9property 3 Why CNN for Image\uff1f \u00b6 CNN vs DNN \u00b6 \u5728 train neural network \u7684\u65f6\u5019\uff0c\u6bcf\u4e00\u4e2a neuron \u90fd\u4ee3\u8868\u4e86\u4e00\u4e2a\u6700\u57fa\u672c\u7684 classifier \u4e3e\u4f8b\u5b50\u6765\u8bf4\uff0c\u7b2c\u4e00\u5c42 layer \u505a\u7684\u4e8b\u60c5\u5c31\u662f detect \u6709\u6ca1\u6709\u7eff\u8272\uff0c \u9ec4\u8272\uff0c\u659c\u6761\u7eb9\uff1b\u7136\u540e\u7b2c\u4e8c\u5c42\u505a\u66f4\u52a0\u590d\u6742\u7684\u4e8b\u60c5\uff0c\u6bd4\u5982\u770b\u5230\u76f4\u7ebf\u6a2a\u7ebf\u5c31\u662f\u6846\u7a97\u6846\u7684\u4e00\u90e8\u5206\uff0c\u770b\u5230\u68d5\u8272\u76f4\u6761\u7eb9\u5c31\u662f\u6728\u7eb9\uff1b\u7b2c\u4e09\u5c42 layer \u66f4\u590d\u6742... \u73b0\u5728\u7684\u95ee\u9898\u662f\uff0c\u5982\u679c\u6211\u4eec\u76f4\u63a5\u7528\u4e00\u822c\u7684 fully connected \u7684 feedforward network \u6765\u505a\u56fe\u50cf\u5904\u7406\u7684\u65f6\u5019\uff0c\u5f80\u5f80\u4f1a\u9700\u8981\u592a\u591a\u7684\u53c2\u6570 \u4e00\u5f20\u5f88\u5c0f\u7684 100*100 \u7684\u5f69\u56fe\u9700\u8981 100*100*3 \u7684 vector\uff0c\u52a0\u4e0a neuron \u53c2\u6570\u8fc7\u591a CNN \u505a\u7684\u5c31\u662f\u901a\u8fc7\u4e00\u4e9b\u5bf9\u5f71\u50cf\u5904\u7406\u7684\u7406\u89e3\u628a\u4e00\u4e9b\u7528\u4e0d\u5230\u7684\u53c2\u6570\u8fc7\u6ee4\u6389 Three Property for CNN theory base \u00b6 \u80fd\u7528\u8f83\u5c11\u7684\u7684\u53c2\u6570\u6765\u505a\u56fe\u50cf\u5904\u7406\u7684\u539f\u56e0\u662f\u4ee5\u4e0b\u4e09\u4e2a\u5bf9\u5f71\u50cf\u5904\u7406\u7684\u89c2\u5bdf\uff0c\u4e5f\u662f CNN \u67b6\u6784\u63d0\u51fa\u7684\u57fa\u7840 Some patterns are much smaller than the whole image \u00b6 \u5728\u5f71\u50cf\u5904\u7406\u91cc\uff0c\u4e00\u4e9b neuron \u505a\u7684\u4e8b\u60c5\u662f detect \u6709\u6ca1\u6709\u4e00\u79cd\u4e1c\u897f\u6216\u8005 pattern \u7684\u51fa\u73b0\uff0c\u8fd9\u4e2a pattern \u662f\u6bd4\u6574\u5f20 img \u5c0f\u5f88\u591a\u7684\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u770b\u6574\u5f20\u56fe\u7247\uff1b\u6bd4\u5982\u8981\u5224\u65ad\u56fe\u7247\u6709\u6ca1\u6709\u4e00\u5f20\u9e1f\u7684\u56fe\uff0c\u4e00\u4e9b neuron \u770b\u6709\u6ca1\u6709\u9e1f\u5634\uff0c\u4e00\u4e9b\u770b\u6709\u6ca1\u6709\u722a\u5b50\uff0c\u8fd9\u4e9b neuron \u90fd\u53ea\u9700\u8981\u8fde\u63a5\u5230 img \u4e0a\u7684\u4e00\u5c0f\u5757\u533a\u57df\uff0c\u4e0d\u9700\u8981\u5b8c\u6574\u7684\u56fe\uff0c\u6240\u4ee5\u5bf9\u5e94\u7740\u66f4\u5c0f\u7684\u53c2\u6570 The same patterns appear in different regions \u00b6 \u540c\u6837\u7684 pattern \u53ef\u80fd\u51fa\u73b0\u5728 img \u4e2d\u4e0d\u540c\u7684\u90e8\u5206\uff0c\u6bd4\u5982\u9e1f\u5634\u53ef\u80fd\u5728 img \u4e2d\u95f4\uff0c\u4e5f\u53ef\u80fd\u5728\u5de6\u4e0a\u89d2\uff0c\u6240\u4ee5\u53ef\u4ee5 share \u540c\u6837\u7684 neuron\uff0c\u540c\u6837\u7684\u53c2\u6570\u53bb detect\uff0c\u8fd9\u6837\u80fd\u51cf\u5c0f\u53c2\u6570 Subsampling the pixels will not change the object \u00b6 \u5bf9\u4e00\u5f20 image \u505a subsampling (\u4e8c\u6b21\u62bd\u6837)\uff0c\u6bd4\u5982\u628a\u5947\u6570\u884c\uff0c\u5076\u6570\u5217\u7684 pixel \u5220\u53bb\uff0c\u5e76\u4e0d\u5bf9\u5f71\u54cd\u4eba\u5bf9\u4e00\u5f20\u56fe\u7247\u7684\u7406\u89e3\uff0c\u4f9d\u65e7\u53ef\u4ee5\u8bc6\u522b\u56fe\u7247\u4e2d\u51fa\u73b0\u4e86\u4ec0\u4e48\uff0c\u6240\u4ee5\u505a subsampling \u4e5f\u80fd\u51cf\u5c0f\u53c2\u6570 The whole CNN structure \u00b6 CNN \u7684\u6574\u4f53\u67b6\u6784\uff1a\u901a\u8fc7 n \u6b21\u7684 Convolution + Max Pooling\uff0c\u8fd9\u4e2a n \u662f\u5728\u5b9a\u8fd9\u4e2anetwork \u7684\u67b6\u6784\u65f6\u5c31\u8981\u4e8b\u5148\u51b3\u5b9a\u597d\uff0c\u7136\u540e\u505a Flatten\uff0c\u7136\u540e\u662f\u4e00\u822c\u7684 Fully connected network \u91cc\u9762\u53bb\uff0c\u6700\u7ec8\u5f97\u5230\u5f71\u50cf\u8fa8\u8bc6\u7684\u7ed3\u679c Convolution \u7684 layer \u5904\u7406\u4e0a\u9762\u63d0\u5230\u7684\u524d 2 \u4e2a Property\uff0cMax Pooling \u5904\u7406\u7b2c\u4e09\u4e2a Convolution \u00b6 Property1 \u00b6 \u6bcf\u4e2a Filter \u662f\u4e00\u4e2a matrix\uff0c\u5176\u4e2d\u7684\u6bcf\u4e00\u4e2a\u503c\u90fd\u662f train \u51fa\u6765\u7684\uff0c\u800c\u4e0d\u662f\u4eba\u53bb\u8bbe\u8ba1 \u6bcf\u4e00\u4e2a Filter \u7684\u5927\u5c0f\u610f\u5473\u7740\u4ed6\u53ea\u4f1a\u5728\u8fd9\u4e2a\u533a\u57df\u5185 detect Property2 \u00b6 Filter \u4ece\u5de6\u4e0a\u89d2\u5f00\u59cb\u505a silde window\uff0c\u6bcf\u6b21\u79fb\u52a8\u4e00\u5b9a\u7684\u8ddd\u79bb\uff0c\u53eb\u505a stride\uff0c\u4e5f\u662f\u81ea\u5df1\u8bbe\u5b9a\uff0c\u6bcf\u6b21\u505c\u4e0b\u90fd\u505a\u5377\u79ef\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6700\u7ec8\u5f97\u5230\u4e86\u4e00\u4e2a \\(4\\times4\\) \u7684 matrix\uff0c\u5176\u4e2d\u7684\u6700\u5927\u503c 2 \u4e2a 3 \u4ee3\u8868 detect \u7684 pattern \u5728\u5de6\u4e0a\u548c\u5de6\u4e0b Feature Map\uff1a \u4e00\u4e2a convolution \u7684 layer \u91cc\u9762\u4f1a\u6709\u5f88\u591a filter\uff0c\u4e0d\u540c\u7684 filter \u7684\u53c2\u6570\u4e0d\u540c\uff0c\u6bcf\u4e2a filter \u90fd\u4f1a\u5f97\u5230\u4e00\u4e2a matrix\uff0c\u6240\u6709\u7684 matrix \u5408\u8d77\u6765\u5c31\u53eb\u505a Feature Map(\u7279\u5f81\u6620\u5c04) \uff0c\u7531\u591a\u5c11\u4e2a filter\uff0c\u5c31\u6709\u591a\u5c11\u4e2a\u6620\u5c04\u540e\u7684 matrix CNN \u5bf9 \u4e0d\u540c scale \u7684\u76f8\u540c pattern \u7684\u5904\u7406 \u4e0a\u5b58\u5728\u4e00\u5b9a\u7684\u56f0\u96be\uff0c\u5982\u679c\u4f60\u4eca\u5929\u6709\u540c\u4e00\u4e2a pattern\uff0c\u5b83\u6709\u4e0d\u540c\u7684 size\uff0c\u6709\u5927\u7684\u9e1f\u5634\uff0c\u4e5f\u6709\u5c0f\u7684\u9e1f\u5634\uff0cCNN \u5e76\u4e0d\u80fd\u591f\u81ea\u52a8\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\uff1bDeepMind \u66fe\u7ecf\u53d1\u8fc7\u4e00\u7bc7 paper\uff0c\u4e0a\u9762\u63d0\u5230\u4e86\u5f53\u4f60 input \u4e00\u5f20 image \u7684\u65f6\u5019\uff0c\u5b83\u5728 CNN \u524d\u9762\uff0c\u518d\u63a5\u53e6\u5916\u4e00\u4e2a network\uff0c\u8fd9\u4e2a network \u505a\u7684\u4e8b\u60c5\u662f\uff0c\u5b83\u4f1aoutput\u4e00\u4e9bscalar\uff0c\u544a\u8bc9\u4f60\u8bf4\uff0c\u5b83\u8981\u628a\u8fd9\u4e2a image \u7684\u91cc\u9762\u7684\u54ea\u4e9b\u4f4d\u7f6e\u505a\u65cb\u8f6c\u3001\u7f29\u653e\uff0c\u7136\u540e\uff0c\u518d\u4e22\u5230 CNN \u91cc\u9762\uff0c\u8fd9\u6837\u4f60\u5176\u5b9e\u4f1a\u5f97\u5230\u6bd4\u8f83\u597d\u7684 performance Colorful image\uff1a \u5982\u679c\u4e0d\u662f\u9ed1\u767d\u7684\u56fe\u800c\u662f\u5f69\u8272\u7684\u56fe\uff0c\u90a3\u4e48 filter \u5c31\u4e0d\u662f\u4e00\u4e2a matrix\uff0c\u662f\u4e00\u4e2a 3 \u5c42\u7684 \u7acb\u65b9\u4f53\uff08RGB\uff09\uff0c\u505a\u5b8c\u5377\u79ef\u540e\u4e5f\u662f 3 \u5c42\u7684 Convolution vs Fully connected \u00b6 convolution \u5176\u5b9e\u4e5f\u662f\u4e00\u4e2a neural network\uff0cfilter \u53ef\u4ee5\u770b\u6210 fully connected \u7684 layer \u628a\u4e00\u4e9bweight \u62ff\u6389\uff0c\u6bcf\u4e00\u4e2a neuron \u53ea\u68c0\u6d4b img \u4e2d\u7684\u90e8\u5206\u533a\u57df\uff0c\u800c\u4e14\u516c\u7528\u540c\u4e00\u4e2a weight\uff0c\u6240\u4ee5\u51cf\u5c0f\u4e86\u53c2\u6570 CNN \u7684\u672c\u8d28\u662f\u51cf\u5c0f\u4e86\u53c2\u6570 Max Pooling \u00b6 Max Pooling \u5c31\u662f\u505a subsampling\uff0cfilter \u540e\u5f97\u5230\u7684 matrix \u4e2d\u4ee5 4 \u4e2a\u4e3a\u4e00\u7ec4\u53d6\u6700\u5927\u503c\uff0c\u8fd9\u6837 img \u5c31\u4f1a\u7f29\u5c0f \u5982\u4f55\u5fae\u5206\u540e\u9762\u4f1a\u8bb2 Convolution + Max Pooling \u00b6 Convolution + Max Pooling \u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u8f83\u5c0f\u7684 img\uff0c\u53ef\u4ee5\u53cd\u590d\u505a\u5f97\u5230\u4e00\u4e2a \u66f4\u5c0f\u7684 img \u6709\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u4e00\u4e2a Convolution \u6709 25 \u4e2a filter \u5f97\u5230 25 \u4e2a feature map\uff0crepeat \u7b2c\u4e8c\u4e2a Convolution \u4e5f\u6709 25 \u4e2a filter\uff0c\u662f\u4e0d\u662f\u4f1a\u6709 25*25 \u4e2a feature map \u5176\u5b9e\u4e0d\u662f\uff0c\u7b2c\u4e8c\u6b21 feature map \u4f1a\u8003\u8651\u6df1\u5ea6\uff0couyput \u8fd8\u662f 25 \u4e2a Flatten \u00b6 convolution \u548c max pooling \u4e4b\u540e\uff0c\u5c31\u662f FLatten \u548c Fully connected Feedforward network \u7684\u90e8\u5206 Flatten \u5c31\u662f\u628a feature map \u62c9\u76f4\uff0c\u7136\u540e\u4e22\u8fdb Fully connected Feedforward network CNN in Keras \u00b6 \u4e0e DNN \u6ca1\u4ec0\u4e48\u4e0d\u540c\uff0c\u9700\u8981\u6539\u53d8\u7684\u662f network structure\uff0c\u4ee5\u53ca input \u7684 format \u5728 input \u4e2d\uff0c\u5982\u679c\u662f\u4e00\u4e2a\u5f69\u56fe\uff0c\u5c31\u9700\u8981\u8f93\u5165\u4e00\u4e2a\u9ad8\u7ef4\u7684 matrix\uff08RGB\uff09\uff0c\u53eb\u505a tensor model2 . add ( Convolution2D ( 25 , 3 , 3 , input_shape = ( 28 , 28 , 1 )) ) Convolution2D \uff1a\u5206\u522b\u8868\u793a 25 \u4e2a filter\uff0c\u6bcf\u4e2a filter \u90fd\u662f 3*3 input_shape \uff1a\u4ee5\u624b\u5199\u6570\u5b57\u8fa8\u8bc6\u4e3a\u4f8b\u662f\u9ed1\u767d\u7684\uff0c\u6240\u4ee5\u662f\uff0828\uff0c28\uff0c1\uff09\uff0c\u5982\u679c\u662f\u5f69\u8272\u7684\u5c31\u8981 (28\uff0c28\uff0c3) model2 . add ( MaxPooling2D ( 2 , 2 ) ) MaxPooling2D \uff1a\u5206\u6210 2*2 \u7684\u533a\u57df \u4ee5\u4e0b\u56fe\u4e3a\u4f8b\uff0c\u7b2c\u4e00\u6b21 Convolution + Max Pooling \u540e\u5f97\u5230\u4e86 25*13*13 \u7684 feature map\uff0c\u7b2c\u4e8c\u6b21\u7684 Convolution \u7684 filter \u5176\u5b9e\u662f 3*3*25 \u7684 \u90a3\u8fd9\u6837\u4e00\u4e2a 25*13*13 \u548c 25*3*3 \u7684 cubic \u505a\u5185\u79ef\u4e4b\u540e\u4e0d\u5e94\u8be5\u662f 25*11*11 \u7684 cubic \u5417\uff1f\u5176\u5b9e\u8fd8\u4f1a\u5bf9\u6bcf\u4e00\u5c42\u505a\u6c42\u548c\u8fd0\u7b97\uff0c\u8fd9\u6837\u5c31\u662f 11*11 \u4e86\uff0c\u6240\u4ee5\u7b2c\u4e8c\u6b21\u7684 Convolution \u540e \u6bcf\u4e00\u4e2a filter \u90fd\u5f97\u5230\u4e00\u4e2a 11*11 \u7684 matrix Appendix\uff1aCNN in Keras \u00b6 import numpy as np from keras.models import Sequential from keras.layers import Convolution2D , MaxPooling2D , Flatten , Conv2D from keras.layers.core import Dense , Dropout , Activation from keras.optimizers import SGD , Adam from keras.utils import np_utils from keras.datasets import mnist # categorical_crossentropy def load_mnist_data ( number ): # the data, shuffled and split between train and test sets ( x_train , y_train ), ( x_test , y_test ) = mnist . load_data () x_train = x_train [ 0 : number ] y_train = y_train [ 0 : number ] x_train = x_train . reshape ( number , 784 ) x_test = x_test . reshape ( 10000 , 784 ) x_train = x_train . astype ( 'float32' ) x_test = x_test . astype ( 'float32' ) # convert class vectors to binary class matrices y_train = np_utils . to_categorical ( y_train , 10 ) y_test = np_utils . to_categorical ( y_test , 10 ) x_train = x_train / 255 x_test = x_test / 255 return ( x_train , y_train ), ( x_test , y_test ) if __name__ == '__main__' : ( x_train , y_train ), ( x_test , y_test ) = load_mnist_data ( 10000 ) # do DNN model = Sequential () model . add ( Dense ( input_dim = 28 * 28 , units = 500 , activation = 'relu' )) model . add ( Dense ( units = 500 , activation = 'relu' )) model . add ( Dense ( units = 500 , activation = 'relu' )) model . add ( Dense ( units = 10 , activation = 'softmax' )) model . summary () model . compile ( loss = 'categorical_crossentropy' , optimizer = 'adam' , metrics = [ 'accuracy' ]) model . fit ( x_train , y_train , batch_size = 100 , epochs = 20 ) result_train = model . evaluate ( x_train , y_train ) print ( ' \\n Train Acc: \\n ' , result_train [ 1 ]) result_test = model . evaluate ( x_test , y_test ) print ( ' \\n Test Acc: \\n ' , result_test [ 1 ]) # do CNN x_train = x_train . reshape ( x_train . shape [ 0 ], 1 , 28 , 28 ) x_test = x_test . reshape ( x_test . shape [ 0 ], 1 , 28 , 28 ) model2 = Sequential () model2 . add ( Conv2D ( 25 , ( 3 , 3 ), input_shape = ( 1 , 28 , 28 ), data_format = 'channels_first' )) model2 . add ( MaxPooling2D (( 2 , 2 ))) model2 . add ( Conv2D ( 50 , ( 3 , 3 ))) model2 . add ( MaxPooling2D (( 2 , 2 ))) model2 . add ( Flatten ()) model2 . add ( Dense ( units = 100 , activation = 'relu' )) model2 . add ( Dense ( units = 10 , activation = 'softmax' )) model2 . summary () model2 . compile ( loss = 'categorical_crossentropy' , optimizer = 'adam' , metrics = [ 'accuracy' ]) model2 . fit ( x_train , y_train , batch_size = 100 , epochs = 20 ) result_train = model2 . evaluate ( x_train , y_train ) print ( ' \\n Train CNN Acc: \\n ' , result_train [ 1 ]) result_test = model2 . evaluate ( x_test , y_test ) print ( ' \\n Test CNN Acc: \\n ' , result_test [ 1 ]) What does CNN learn\uff1f \u00b6 what does filter do \u00b6 \u5728 CNN \u4e2d\u7b2c\u4e00\u4e2a Convolution \u7684 filter \u662f\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\u7684\uff0c\u770b\u5b83\u6700\u7ec8\u7684\u503c\u662f\u4ec0\u4e48\u5c31\u77e5\u9053\u5b83\u5728 detect \u4ec0\u4e48\u4e1c\u897f\uff0c\u4f46\u662f\u540e\u9762\u7684\u5c31\u4e0d\u597d\u5206\u6790\u4e86\uff0c\u5b83\u8003\u8651\u7684\u8303\u56f4\u4e0d\u4ec5\u662f 3*3 \u7684 pixel\uff0c\u8fd8\u662f\u957f\u5bbd\u4e3a 3*3\uff0c\u9ad8\u4e3a 25 \u7684 cubic\uff08\u4ee5\u4e0a\u9762\u4e3a\u4f8b\u5b50\uff09\uff0c\u90a3\u4e00\u4e2a filter \u5230\u5e95\u5728\u505a\u4ec0\u4e48\u5462\uff1f \u628a\u7b2c\u4e8c\u4e2a Convolution \u7684\u67d0\u4e00\u4e2a filter \u7684 output \u62ff\u51fa\u6765\uff0c\u662f\u4e00\u4e2a 11*11 \u7684 matrix\uff0c\u91cc\u9762\u7684\u6bcf\u4e00\u4e2a element \u8bb0\u4f5c \\(a^k_{ij}\\) \u200b\uff0ck \u8868\u793a\u7b2c k \u4e2a filter \\(a^k\\) \u200b \u53eb\u505a Degree of the activation of the k-th filter \uff0c\u8868\u793a\u73b0\u5728\u7684\u7b2c k \u4e2a filter\uff0c\u5b83\u6709\u591a\u88ab activate\uff0c\u76f4\u89c2\u6765\u8bb2\u5c31\u662f\u63cf\u8ff0\u73b0\u5728 input \u7684\u4e1c\u897f\u8ddf\u7b2c k \u4e2a filter \u6709\u591a\u63a5\u8fd1\uff0c\u5b83\u5bf9 filter \u7684\u6fc0\u6d3b\u7a0b\u5ea6\u6709\u591a\u5c11\uff0c\u662f 11*11 \u7684 matrix \u7684 summation \\[ a^k=\\sum\\limits^{11}_{i=1}\\sum\\limits^{11}_{j=1} a^k_{ij} \\] \u7136\u540e\u627e\u5230\u4e00\u4e2a img \\(x^*\\) \u200b\uff0c\u4f7f\u5f97 \\(a^k\\) \u6700\u5927\uff0c\u90a3\u8fd9\u4e2a \\(x^*\\) \u5c31\u662f filter \u5728\u627e\u7684\u56fe\u5f62 \\[ x^*=\\arg \\max\\limits_x a^k \\] \u4e0a\u56fe\u6311\u9009\u4e86 12 \u4e2a\u4f7f\u5f97\u5176\u4e2d filter \u7684 activation \u6700\u5927\u7684\u56fe\u50cf\u7684\u4f8b\u5b50\uff0c\u90fd\u662f\u4e00\u4e9b texture what does neuron do \u00b6 \u8981\u77e5\u9053 Flatten \u540e\u7684 network \u91cc\u9762\u7684 neuron \u5b66\u5230\u7684\u662f\u4ec0\u4e48\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u5b9a\u4e49\u7b2c j \u4e2a neuron \u7684 output \u662f \\(a_j\\) \u200b\u200b\uff0c\u90a3\u4e48\u4e0b\u9762\u7684 \\(x^*\\) \u5c31\u662f\u5b83\u5b66\u5230\u7684\u56fe\u50cf $$ x^*=\\arg \\max\\limits_x a_j $$ \u76f8\u6bd4\u4e8e filter \u7684\u56fe\u50cf\u4e0d\u518d\u662f texture\uff0c\u800c\u662f\u5b8c\u6574\u7684\u56fe\u50cf what about output \u00b6 \u53ef\u4ee5\u7ee7\u7eed\u7528\u4e0a\u9762\u7684\u65b9\u6cd5\u5f97\u51fa\u4f7f\u5f97\u6bcf\u4e2a output \u7684 activation \u6700\u5927\u7684\u56fe\u50cf\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a \u6240\u4ee5\u8fd9\u4e2a neural network\uff0c\u5b83\u6240\u5b66\u5230\u7684\u4e1c\u897f\u8ddf\u6211\u4eec\u4eba\u7c7b\u4e00\u822c\u7684\u60f3\u8c61\u8ba4\u77e5\u662f\u4e0d\u4e00\u6837\u7684 \u90a3\u6211\u4eec\u6709\u6ca1\u6709\u529e\u6cd5\uff0c\u8ba9\u4e0a\u9762\u8fd9\u4e2a\u56fe\u770b\u8d77\u6765\u66f4\u50cf\u6570\u5b57\u5462\uff1f \u60f3\u6cd5\u662f\u52a0\u4e0a regularization\uff0c\u5982\u679c\u767d\u8272\u7684\u662f\u58a8\u6c34\uff0c\u90a3\u767d\u8272\u7684\u533a\u57df\u5e94\u8be5\u662f\u6709\u9650\u7684\uff0c\u4e0d\u4f1a\u6574\u5f20\u56fe\u90fd\u662f\u767d\u767d\u7684\uff0c\u8fd9\u91cc\u5229\u7528 L1 \u7684 regularization\uff0c\u628a\u6bcf\u4e2a pixel \u7684\u503c\u6c42\u548c $$ x^*=\\arg \\max\\limits_x (y^i-\\sum\\limits_{i,j} |x_{ij}|) $$ \u7ed3\u679c\u5982\u4e0b\uff0c\u5982\u679c\u518d\u52a0\u4e00\u4e9b constraint \u6bd4\u5982 \u76f8\u90bb\u7684\u989c\u8272 pixel \u989c\u8272\u8981\u4e00\u6837\u7ed3\u679c\u4f1a\u66f4\u597d Deep Dream \u00b6 \u7565 Deep Style \u00b6 \u7565 More Application\u2014\u2014Playing Go \u00b6 Why CNN for Playing Go \u00b6 AlphaGo \u7528\u4e86 CNN\uff0c\u90a3\u4ec0\u4e48\u65f6\u5019\u624d\u9002\u5408\u7528 CNN \u5462\uff1f \u8981\u6709image\u8be5\u6709\u7684\u90a3\u4e9b\u7279\u6027\uff0c\u4e5f\u5c31\u5f00\u5934\u6240\u8bf4\u7684\uff0c\u6839\u636e\u89c2\u5bdf\u5230\u7684\u4e09\u4e2a property\uff0c\u6211\u4eec\u624d\u8bbe\u8ba1\u51fa\u4e86 CNN \u8fd9\u6837\u7684network\u67b6\u6784\uff1a Some patterns are much smaller than the whole image The same patterns appear in different regions Subsampling the pixels will not change the object CNN \u80fd\u591f\u5e94\u7528\u5728 Alpha-Go \u4e0a\uff0c\u662f\u56e0\u4e3a\u56f4\u68cb\u6709\u4e00\u4e9b\u7279\u6027\u548c\u56fe\u50cf\u5904\u7406\u662f\u5f88\u76f8\u4f3c\u7684 property 1\uff1a\u56f4\u68cb\u4e2d\u4e00\u4e9b pattern \u6bd4\u5982 \u4e09\u4e2a\u5b50\u56f4\u4e00\u4e2a\u5b50 property 2\uff1a\u540c\u4e00\u4e2a pattern \u53ef\u4ee5\u51fa\u73b0\u5728\u4e0d\u540c\u4f4d\u7f6e \u4f46\u662f\u5176\u5b9e AlphaGo \u5e76\u6ca1\u6709 MaxPooling\uff0c\u56e0\u4e3a\u8fd9\u663e\u7136\u65e0\u6cd5\u5728\u56f4\u68cb\u4e2d\u4f7f\u7528\uff0c\u6240\u4ee5 structure \u9700\u8981\u5177\u4f53\u95ee\u9898\uff0c\u5177\u4f53\u5206\u6790 More Application\u2014\u2014Speech\u3001Text \u00b6 Convolution \u4e2d\u7684 silde window \u4e0d\u662f\u4e00\u5b9a\u8981\u65e2\u6709\u4e0a\u4e0b\u4e5f\u6709\u5de6\u53f3\u7684\uff0c\u6bd4\u5982\u8bed\u97f3\u8fa8\u8bc6\u4e2d\uff0c\u901a\u5e38\u53ea\u5728\u9891\u7387\u65b9\u5411\u4e0a\u79fb\u52a8 filter\uff0c\u800c\u4e0d\u5728\u65f6\u95f4\u4e0a\uff1b\u800c\u5728\u6587\u5b57\u8bc6\u522b\u4e2d\uff0cfilter \u53ea\u5728\u65f6\u95f4\uff08word\uff09\u7684\u987a\u5e8f\u4e0a\u79fb\u52a8 Conclusion \u00b6 \u4e09\u4e2a property \u00b6 Some patterns are much smaller than the whole image The same patterns appear in different regions Subsampling the pixels will not change the object \u4e24\u4e2a\u67b6\u6784 \u00b6 convolution \u67b6\u6784\uff1a\u9488\u5bf9 property 1 \u548c property 2 max pooling \u67b6\u6784\uff1a\u9488\u5bf9 property 3 \u4e00\u4e2a\u7406\u5ff5 \u00b6 \u9488\u5bf9\u4e0d\u540c\u7684 application \u8981\u8bbe\u8ba1\u7b26\u5408\u5b83\u7279\u6027\u7684 network structure\uff0c\u800c\u4e0d\u662f\u751f\u786c\u5957\u7528\uff0c\u8fd9\u5c31\u662f CNN \u67b6\u6784\u7684\u8bbe\u8ba1\u7406\u5ff5","title":"CNN"},{"location":"ML/5_Convolutional%20Neural%20Network/#convolutional-neural-network","text":"CNN \u5e38\u5e38\u88ab\u7528\u5728\u5f71\u50cf\u5904\u7406\u4e0a\uff0c\u5b83\u7684 theory base \u5c31\u662f\u4e09\u4e2aproperty\uff0c\u548c\u4e24\u4e2a\u67b6\u6784 convolution \u67b6\u6784\uff1a\u9488\u5bf9property 1\u548cproperty 2 max pooling \u67b6\u6784\uff1a\u9488\u5bf9property 3","title":"Convolutional Neural Network"},{"location":"ML/5_Convolutional%20Neural%20Network/#why-cnn-for-image","text":"","title":"Why CNN for Image\uff1f"},{"location":"ML/5_Convolutional%20Neural%20Network/#cnn-vs-dnn","text":"\u5728 train neural network \u7684\u65f6\u5019\uff0c\u6bcf\u4e00\u4e2a neuron \u90fd\u4ee3\u8868\u4e86\u4e00\u4e2a\u6700\u57fa\u672c\u7684 classifier \u4e3e\u4f8b\u5b50\u6765\u8bf4\uff0c\u7b2c\u4e00\u5c42 layer \u505a\u7684\u4e8b\u60c5\u5c31\u662f detect \u6709\u6ca1\u6709\u7eff\u8272\uff0c \u9ec4\u8272\uff0c\u659c\u6761\u7eb9\uff1b\u7136\u540e\u7b2c\u4e8c\u5c42\u505a\u66f4\u52a0\u590d\u6742\u7684\u4e8b\u60c5\uff0c\u6bd4\u5982\u770b\u5230\u76f4\u7ebf\u6a2a\u7ebf\u5c31\u662f\u6846\u7a97\u6846\u7684\u4e00\u90e8\u5206\uff0c\u770b\u5230\u68d5\u8272\u76f4\u6761\u7eb9\u5c31\u662f\u6728\u7eb9\uff1b\u7b2c\u4e09\u5c42 layer \u66f4\u590d\u6742... \u73b0\u5728\u7684\u95ee\u9898\u662f\uff0c\u5982\u679c\u6211\u4eec\u76f4\u63a5\u7528\u4e00\u822c\u7684 fully connected \u7684 feedforward network \u6765\u505a\u56fe\u50cf\u5904\u7406\u7684\u65f6\u5019\uff0c\u5f80\u5f80\u4f1a\u9700\u8981\u592a\u591a\u7684\u53c2\u6570 \u4e00\u5f20\u5f88\u5c0f\u7684 100*100 \u7684\u5f69\u56fe\u9700\u8981 100*100*3 \u7684 vector\uff0c\u52a0\u4e0a neuron \u53c2\u6570\u8fc7\u591a CNN \u505a\u7684\u5c31\u662f\u901a\u8fc7\u4e00\u4e9b\u5bf9\u5f71\u50cf\u5904\u7406\u7684\u7406\u89e3\u628a\u4e00\u4e9b\u7528\u4e0d\u5230\u7684\u53c2\u6570\u8fc7\u6ee4\u6389","title":"CNN vs DNN"},{"location":"ML/5_Convolutional%20Neural%20Network/#three-property-for-cnn-theory-base","text":"\u80fd\u7528\u8f83\u5c11\u7684\u7684\u53c2\u6570\u6765\u505a\u56fe\u50cf\u5904\u7406\u7684\u539f\u56e0\u662f\u4ee5\u4e0b\u4e09\u4e2a\u5bf9\u5f71\u50cf\u5904\u7406\u7684\u89c2\u5bdf\uff0c\u4e5f\u662f CNN \u67b6\u6784\u63d0\u51fa\u7684\u57fa\u7840","title":"Three Property for CNN theory base"},{"location":"ML/5_Convolutional%20Neural%20Network/#some-patterns-are-much-smaller-than-the-whole-image","text":"\u5728\u5f71\u50cf\u5904\u7406\u91cc\uff0c\u4e00\u4e9b neuron \u505a\u7684\u4e8b\u60c5\u662f detect \u6709\u6ca1\u6709\u4e00\u79cd\u4e1c\u897f\u6216\u8005 pattern \u7684\u51fa\u73b0\uff0c\u8fd9\u4e2a pattern \u662f\u6bd4\u6574\u5f20 img \u5c0f\u5f88\u591a\u7684\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u770b\u6574\u5f20\u56fe\u7247\uff1b\u6bd4\u5982\u8981\u5224\u65ad\u56fe\u7247\u6709\u6ca1\u6709\u4e00\u5f20\u9e1f\u7684\u56fe\uff0c\u4e00\u4e9b neuron \u770b\u6709\u6ca1\u6709\u9e1f\u5634\uff0c\u4e00\u4e9b\u770b\u6709\u6ca1\u6709\u722a\u5b50\uff0c\u8fd9\u4e9b neuron \u90fd\u53ea\u9700\u8981\u8fde\u63a5\u5230 img \u4e0a\u7684\u4e00\u5c0f\u5757\u533a\u57df\uff0c\u4e0d\u9700\u8981\u5b8c\u6574\u7684\u56fe\uff0c\u6240\u4ee5\u5bf9\u5e94\u7740\u66f4\u5c0f\u7684\u53c2\u6570","title":"Some patterns are much smaller than the whole image"},{"location":"ML/5_Convolutional%20Neural%20Network/#the-same-patterns-appear-in-different-regions","text":"\u540c\u6837\u7684 pattern \u53ef\u80fd\u51fa\u73b0\u5728 img \u4e2d\u4e0d\u540c\u7684\u90e8\u5206\uff0c\u6bd4\u5982\u9e1f\u5634\u53ef\u80fd\u5728 img \u4e2d\u95f4\uff0c\u4e5f\u53ef\u80fd\u5728\u5de6\u4e0a\u89d2\uff0c\u6240\u4ee5\u53ef\u4ee5 share \u540c\u6837\u7684 neuron\uff0c\u540c\u6837\u7684\u53c2\u6570\u53bb detect\uff0c\u8fd9\u6837\u80fd\u51cf\u5c0f\u53c2\u6570","title":"The same patterns appear in different regions"},{"location":"ML/5_Convolutional%20Neural%20Network/#subsampling-the-pixels-will-not-change-the-object","text":"\u5bf9\u4e00\u5f20 image \u505a subsampling (\u4e8c\u6b21\u62bd\u6837)\uff0c\u6bd4\u5982\u628a\u5947\u6570\u884c\uff0c\u5076\u6570\u5217\u7684 pixel \u5220\u53bb\uff0c\u5e76\u4e0d\u5bf9\u5f71\u54cd\u4eba\u5bf9\u4e00\u5f20\u56fe\u7247\u7684\u7406\u89e3\uff0c\u4f9d\u65e7\u53ef\u4ee5\u8bc6\u522b\u56fe\u7247\u4e2d\u51fa\u73b0\u4e86\u4ec0\u4e48\uff0c\u6240\u4ee5\u505a subsampling \u4e5f\u80fd\u51cf\u5c0f\u53c2\u6570","title":"Subsampling the pixels will not change the object"},{"location":"ML/5_Convolutional%20Neural%20Network/#the-whole-cnn-structure","text":"CNN \u7684\u6574\u4f53\u67b6\u6784\uff1a\u901a\u8fc7 n \u6b21\u7684 Convolution + Max Pooling\uff0c\u8fd9\u4e2a n \u662f\u5728\u5b9a\u8fd9\u4e2anetwork \u7684\u67b6\u6784\u65f6\u5c31\u8981\u4e8b\u5148\u51b3\u5b9a\u597d\uff0c\u7136\u540e\u505a Flatten\uff0c\u7136\u540e\u662f\u4e00\u822c\u7684 Fully connected network \u91cc\u9762\u53bb\uff0c\u6700\u7ec8\u5f97\u5230\u5f71\u50cf\u8fa8\u8bc6\u7684\u7ed3\u679c Convolution \u7684 layer \u5904\u7406\u4e0a\u9762\u63d0\u5230\u7684\u524d 2 \u4e2a Property\uff0cMax Pooling \u5904\u7406\u7b2c\u4e09\u4e2a","title":"The whole CNN structure"},{"location":"ML/5_Convolutional%20Neural%20Network/#convolution","text":"","title":"Convolution"},{"location":"ML/5_Convolutional%20Neural%20Network/#property1","text":"\u6bcf\u4e2a Filter \u662f\u4e00\u4e2a matrix\uff0c\u5176\u4e2d\u7684\u6bcf\u4e00\u4e2a\u503c\u90fd\u662f train \u51fa\u6765\u7684\uff0c\u800c\u4e0d\u662f\u4eba\u53bb\u8bbe\u8ba1 \u6bcf\u4e00\u4e2a Filter \u7684\u5927\u5c0f\u610f\u5473\u7740\u4ed6\u53ea\u4f1a\u5728\u8fd9\u4e2a\u533a\u57df\u5185 detect","title":"Property1"},{"location":"ML/5_Convolutional%20Neural%20Network/#property2","text":"Filter \u4ece\u5de6\u4e0a\u89d2\u5f00\u59cb\u505a silde window\uff0c\u6bcf\u6b21\u79fb\u52a8\u4e00\u5b9a\u7684\u8ddd\u79bb\uff0c\u53eb\u505a stride\uff0c\u4e5f\u662f\u81ea\u5df1\u8bbe\u5b9a\uff0c\u6bcf\u6b21\u505c\u4e0b\u90fd\u505a\u5377\u79ef\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6700\u7ec8\u5f97\u5230\u4e86\u4e00\u4e2a \\(4\\times4\\) \u7684 matrix\uff0c\u5176\u4e2d\u7684\u6700\u5927\u503c 2 \u4e2a 3 \u4ee3\u8868 detect \u7684 pattern \u5728\u5de6\u4e0a\u548c\u5de6\u4e0b Feature Map\uff1a \u4e00\u4e2a convolution \u7684 layer \u91cc\u9762\u4f1a\u6709\u5f88\u591a filter\uff0c\u4e0d\u540c\u7684 filter \u7684\u53c2\u6570\u4e0d\u540c\uff0c\u6bcf\u4e2a filter \u90fd\u4f1a\u5f97\u5230\u4e00\u4e2a matrix\uff0c\u6240\u6709\u7684 matrix \u5408\u8d77\u6765\u5c31\u53eb\u505a Feature Map(\u7279\u5f81\u6620\u5c04) \uff0c\u7531\u591a\u5c11\u4e2a filter\uff0c\u5c31\u6709\u591a\u5c11\u4e2a\u6620\u5c04\u540e\u7684 matrix CNN \u5bf9 \u4e0d\u540c scale \u7684\u76f8\u540c pattern \u7684\u5904\u7406 \u4e0a\u5b58\u5728\u4e00\u5b9a\u7684\u56f0\u96be\uff0c\u5982\u679c\u4f60\u4eca\u5929\u6709\u540c\u4e00\u4e2a pattern\uff0c\u5b83\u6709\u4e0d\u540c\u7684 size\uff0c\u6709\u5927\u7684\u9e1f\u5634\uff0c\u4e5f\u6709\u5c0f\u7684\u9e1f\u5634\uff0cCNN \u5e76\u4e0d\u80fd\u591f\u81ea\u52a8\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\uff1bDeepMind \u66fe\u7ecf\u53d1\u8fc7\u4e00\u7bc7 paper\uff0c\u4e0a\u9762\u63d0\u5230\u4e86\u5f53\u4f60 input \u4e00\u5f20 image \u7684\u65f6\u5019\uff0c\u5b83\u5728 CNN \u524d\u9762\uff0c\u518d\u63a5\u53e6\u5916\u4e00\u4e2a network\uff0c\u8fd9\u4e2a network \u505a\u7684\u4e8b\u60c5\u662f\uff0c\u5b83\u4f1aoutput\u4e00\u4e9bscalar\uff0c\u544a\u8bc9\u4f60\u8bf4\uff0c\u5b83\u8981\u628a\u8fd9\u4e2a image \u7684\u91cc\u9762\u7684\u54ea\u4e9b\u4f4d\u7f6e\u505a\u65cb\u8f6c\u3001\u7f29\u653e\uff0c\u7136\u540e\uff0c\u518d\u4e22\u5230 CNN \u91cc\u9762\uff0c\u8fd9\u6837\u4f60\u5176\u5b9e\u4f1a\u5f97\u5230\u6bd4\u8f83\u597d\u7684 performance Colorful image\uff1a \u5982\u679c\u4e0d\u662f\u9ed1\u767d\u7684\u56fe\u800c\u662f\u5f69\u8272\u7684\u56fe\uff0c\u90a3\u4e48 filter \u5c31\u4e0d\u662f\u4e00\u4e2a matrix\uff0c\u662f\u4e00\u4e2a 3 \u5c42\u7684 \u7acb\u65b9\u4f53\uff08RGB\uff09\uff0c\u505a\u5b8c\u5377\u79ef\u540e\u4e5f\u662f 3 \u5c42\u7684","title":"Property2"},{"location":"ML/5_Convolutional%20Neural%20Network/#convolution-vs-fully-connected","text":"convolution \u5176\u5b9e\u4e5f\u662f\u4e00\u4e2a neural network\uff0cfilter \u53ef\u4ee5\u770b\u6210 fully connected \u7684 layer \u628a\u4e00\u4e9bweight \u62ff\u6389\uff0c\u6bcf\u4e00\u4e2a neuron \u53ea\u68c0\u6d4b img \u4e2d\u7684\u90e8\u5206\u533a\u57df\uff0c\u800c\u4e14\u516c\u7528\u540c\u4e00\u4e2a weight\uff0c\u6240\u4ee5\u51cf\u5c0f\u4e86\u53c2\u6570 CNN \u7684\u672c\u8d28\u662f\u51cf\u5c0f\u4e86\u53c2\u6570","title":"Convolution vs Fully connected"},{"location":"ML/5_Convolutional%20Neural%20Network/#max-pooling","text":"Max Pooling \u5c31\u662f\u505a subsampling\uff0cfilter \u540e\u5f97\u5230\u7684 matrix \u4e2d\u4ee5 4 \u4e2a\u4e3a\u4e00\u7ec4\u53d6\u6700\u5927\u503c\uff0c\u8fd9\u6837 img \u5c31\u4f1a\u7f29\u5c0f \u5982\u4f55\u5fae\u5206\u540e\u9762\u4f1a\u8bb2","title":"Max Pooling"},{"location":"ML/5_Convolutional%20Neural%20Network/#convolution-max-pooling","text":"Convolution + Max Pooling \u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u8f83\u5c0f\u7684 img\uff0c\u53ef\u4ee5\u53cd\u590d\u505a\u5f97\u5230\u4e00\u4e2a \u66f4\u5c0f\u7684 img \u6709\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u4e00\u4e2a Convolution \u6709 25 \u4e2a filter \u5f97\u5230 25 \u4e2a feature map\uff0crepeat \u7b2c\u4e8c\u4e2a Convolution \u4e5f\u6709 25 \u4e2a filter\uff0c\u662f\u4e0d\u662f\u4f1a\u6709 25*25 \u4e2a feature map \u5176\u5b9e\u4e0d\u662f\uff0c\u7b2c\u4e8c\u6b21 feature map \u4f1a\u8003\u8651\u6df1\u5ea6\uff0couyput \u8fd8\u662f 25 \u4e2a","title":"Convolution + Max Pooling"},{"location":"ML/5_Convolutional%20Neural%20Network/#flatten","text":"convolution \u548c max pooling \u4e4b\u540e\uff0c\u5c31\u662f FLatten \u548c Fully connected Feedforward network \u7684\u90e8\u5206 Flatten \u5c31\u662f\u628a feature map \u62c9\u76f4\uff0c\u7136\u540e\u4e22\u8fdb Fully connected Feedforward network","title":"Flatten"},{"location":"ML/5_Convolutional%20Neural%20Network/#cnn-in-keras","text":"\u4e0e DNN \u6ca1\u4ec0\u4e48\u4e0d\u540c\uff0c\u9700\u8981\u6539\u53d8\u7684\u662f network structure\uff0c\u4ee5\u53ca input \u7684 format \u5728 input \u4e2d\uff0c\u5982\u679c\u662f\u4e00\u4e2a\u5f69\u56fe\uff0c\u5c31\u9700\u8981\u8f93\u5165\u4e00\u4e2a\u9ad8\u7ef4\u7684 matrix\uff08RGB\uff09\uff0c\u53eb\u505a tensor model2 . add ( Convolution2D ( 25 , 3 , 3 , input_shape = ( 28 , 28 , 1 )) ) Convolution2D \uff1a\u5206\u522b\u8868\u793a 25 \u4e2a filter\uff0c\u6bcf\u4e2a filter \u90fd\u662f 3*3 input_shape \uff1a\u4ee5\u624b\u5199\u6570\u5b57\u8fa8\u8bc6\u4e3a\u4f8b\u662f\u9ed1\u767d\u7684\uff0c\u6240\u4ee5\u662f\uff0828\uff0c28\uff0c1\uff09\uff0c\u5982\u679c\u662f\u5f69\u8272\u7684\u5c31\u8981 (28\uff0c28\uff0c3) model2 . add ( MaxPooling2D ( 2 , 2 ) ) MaxPooling2D \uff1a\u5206\u6210 2*2 \u7684\u533a\u57df \u4ee5\u4e0b\u56fe\u4e3a\u4f8b\uff0c\u7b2c\u4e00\u6b21 Convolution + Max Pooling \u540e\u5f97\u5230\u4e86 25*13*13 \u7684 feature map\uff0c\u7b2c\u4e8c\u6b21\u7684 Convolution \u7684 filter \u5176\u5b9e\u662f 3*3*25 \u7684 \u90a3\u8fd9\u6837\u4e00\u4e2a 25*13*13 \u548c 25*3*3 \u7684 cubic \u505a\u5185\u79ef\u4e4b\u540e\u4e0d\u5e94\u8be5\u662f 25*11*11 \u7684 cubic \u5417\uff1f\u5176\u5b9e\u8fd8\u4f1a\u5bf9\u6bcf\u4e00\u5c42\u505a\u6c42\u548c\u8fd0\u7b97\uff0c\u8fd9\u6837\u5c31\u662f 11*11 \u4e86\uff0c\u6240\u4ee5\u7b2c\u4e8c\u6b21\u7684 Convolution \u540e \u6bcf\u4e00\u4e2a filter \u90fd\u5f97\u5230\u4e00\u4e2a 11*11 \u7684 matrix","title":"CNN in Keras"},{"location":"ML/5_Convolutional%20Neural%20Network/#appendixcnn-in-keras","text":"import numpy as np from keras.models import Sequential from keras.layers import Convolution2D , MaxPooling2D , Flatten , Conv2D from keras.layers.core import Dense , Dropout , Activation from keras.optimizers import SGD , Adam from keras.utils import np_utils from keras.datasets import mnist # categorical_crossentropy def load_mnist_data ( number ): # the data, shuffled and split between train and test sets ( x_train , y_train ), ( x_test , y_test ) = mnist . load_data () x_train = x_train [ 0 : number ] y_train = y_train [ 0 : number ] x_train = x_train . reshape ( number , 784 ) x_test = x_test . reshape ( 10000 , 784 ) x_train = x_train . astype ( 'float32' ) x_test = x_test . astype ( 'float32' ) # convert class vectors to binary class matrices y_train = np_utils . to_categorical ( y_train , 10 ) y_test = np_utils . to_categorical ( y_test , 10 ) x_train = x_train / 255 x_test = x_test / 255 return ( x_train , y_train ), ( x_test , y_test ) if __name__ == '__main__' : ( x_train , y_train ), ( x_test , y_test ) = load_mnist_data ( 10000 ) # do DNN model = Sequential () model . add ( Dense ( input_dim = 28 * 28 , units = 500 , activation = 'relu' )) model . add ( Dense ( units = 500 , activation = 'relu' )) model . add ( Dense ( units = 500 , activation = 'relu' )) model . add ( Dense ( units = 10 , activation = 'softmax' )) model . summary () model . compile ( loss = 'categorical_crossentropy' , optimizer = 'adam' , metrics = [ 'accuracy' ]) model . fit ( x_train , y_train , batch_size = 100 , epochs = 20 ) result_train = model . evaluate ( x_train , y_train ) print ( ' \\n Train Acc: \\n ' , result_train [ 1 ]) result_test = model . evaluate ( x_test , y_test ) print ( ' \\n Test Acc: \\n ' , result_test [ 1 ]) # do CNN x_train = x_train . reshape ( x_train . shape [ 0 ], 1 , 28 , 28 ) x_test = x_test . reshape ( x_test . shape [ 0 ], 1 , 28 , 28 ) model2 = Sequential () model2 . add ( Conv2D ( 25 , ( 3 , 3 ), input_shape = ( 1 , 28 , 28 ), data_format = 'channels_first' )) model2 . add ( MaxPooling2D (( 2 , 2 ))) model2 . add ( Conv2D ( 50 , ( 3 , 3 ))) model2 . add ( MaxPooling2D (( 2 , 2 ))) model2 . add ( Flatten ()) model2 . add ( Dense ( units = 100 , activation = 'relu' )) model2 . add ( Dense ( units = 10 , activation = 'softmax' )) model2 . summary () model2 . compile ( loss = 'categorical_crossentropy' , optimizer = 'adam' , metrics = [ 'accuracy' ]) model2 . fit ( x_train , y_train , batch_size = 100 , epochs = 20 ) result_train = model2 . evaluate ( x_train , y_train ) print ( ' \\n Train CNN Acc: \\n ' , result_train [ 1 ]) result_test = model2 . evaluate ( x_test , y_test ) print ( ' \\n Test CNN Acc: \\n ' , result_test [ 1 ])","title":"Appendix\uff1aCNN in Keras"},{"location":"ML/5_Convolutional%20Neural%20Network/#what-does-cnn-learn","text":"","title":"What does CNN learn\uff1f"},{"location":"ML/5_Convolutional%20Neural%20Network/#what-does-filter-do","text":"\u5728 CNN \u4e2d\u7b2c\u4e00\u4e2a Convolution \u7684 filter \u662f\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\u7684\uff0c\u770b\u5b83\u6700\u7ec8\u7684\u503c\u662f\u4ec0\u4e48\u5c31\u77e5\u9053\u5b83\u5728 detect \u4ec0\u4e48\u4e1c\u897f\uff0c\u4f46\u662f\u540e\u9762\u7684\u5c31\u4e0d\u597d\u5206\u6790\u4e86\uff0c\u5b83\u8003\u8651\u7684\u8303\u56f4\u4e0d\u4ec5\u662f 3*3 \u7684 pixel\uff0c\u8fd8\u662f\u957f\u5bbd\u4e3a 3*3\uff0c\u9ad8\u4e3a 25 \u7684 cubic\uff08\u4ee5\u4e0a\u9762\u4e3a\u4f8b\u5b50\uff09\uff0c\u90a3\u4e00\u4e2a filter \u5230\u5e95\u5728\u505a\u4ec0\u4e48\u5462\uff1f \u628a\u7b2c\u4e8c\u4e2a Convolution \u7684\u67d0\u4e00\u4e2a filter \u7684 output \u62ff\u51fa\u6765\uff0c\u662f\u4e00\u4e2a 11*11 \u7684 matrix\uff0c\u91cc\u9762\u7684\u6bcf\u4e00\u4e2a element \u8bb0\u4f5c \\(a^k_{ij}\\) \u200b\uff0ck \u8868\u793a\u7b2c k \u4e2a filter \\(a^k\\) \u200b \u53eb\u505a Degree of the activation of the k-th filter \uff0c\u8868\u793a\u73b0\u5728\u7684\u7b2c k \u4e2a filter\uff0c\u5b83\u6709\u591a\u88ab activate\uff0c\u76f4\u89c2\u6765\u8bb2\u5c31\u662f\u63cf\u8ff0\u73b0\u5728 input \u7684\u4e1c\u897f\u8ddf\u7b2c k \u4e2a filter \u6709\u591a\u63a5\u8fd1\uff0c\u5b83\u5bf9 filter \u7684\u6fc0\u6d3b\u7a0b\u5ea6\u6709\u591a\u5c11\uff0c\u662f 11*11 \u7684 matrix \u7684 summation \\[ a^k=\\sum\\limits^{11}_{i=1}\\sum\\limits^{11}_{j=1} a^k_{ij} \\] \u7136\u540e\u627e\u5230\u4e00\u4e2a img \\(x^*\\) \u200b\uff0c\u4f7f\u5f97 \\(a^k\\) \u6700\u5927\uff0c\u90a3\u8fd9\u4e2a \\(x^*\\) \u5c31\u662f filter \u5728\u627e\u7684\u56fe\u5f62 \\[ x^*=\\arg \\max\\limits_x a^k \\] \u4e0a\u56fe\u6311\u9009\u4e86 12 \u4e2a\u4f7f\u5f97\u5176\u4e2d filter \u7684 activation \u6700\u5927\u7684\u56fe\u50cf\u7684\u4f8b\u5b50\uff0c\u90fd\u662f\u4e00\u4e9b texture","title":"what does filter do"},{"location":"ML/5_Convolutional%20Neural%20Network/#what-does-neuron-do","text":"\u8981\u77e5\u9053 Flatten \u540e\u7684 network \u91cc\u9762\u7684 neuron \u5b66\u5230\u7684\u662f\u4ec0\u4e48\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u5b9a\u4e49\u7b2c j \u4e2a neuron \u7684 output \u662f \\(a_j\\) \u200b\u200b\uff0c\u90a3\u4e48\u4e0b\u9762\u7684 \\(x^*\\) \u5c31\u662f\u5b83\u5b66\u5230\u7684\u56fe\u50cf $$ x^*=\\arg \\max\\limits_x a_j $$ \u76f8\u6bd4\u4e8e filter \u7684\u56fe\u50cf\u4e0d\u518d\u662f texture\uff0c\u800c\u662f\u5b8c\u6574\u7684\u56fe\u50cf","title":"what does neuron do"},{"location":"ML/5_Convolutional%20Neural%20Network/#what-about-output","text":"\u53ef\u4ee5\u7ee7\u7eed\u7528\u4e0a\u9762\u7684\u65b9\u6cd5\u5f97\u51fa\u4f7f\u5f97\u6bcf\u4e2a output \u7684 activation \u6700\u5927\u7684\u56fe\u50cf\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a \u6240\u4ee5\u8fd9\u4e2a neural network\uff0c\u5b83\u6240\u5b66\u5230\u7684\u4e1c\u897f\u8ddf\u6211\u4eec\u4eba\u7c7b\u4e00\u822c\u7684\u60f3\u8c61\u8ba4\u77e5\u662f\u4e0d\u4e00\u6837\u7684 \u90a3\u6211\u4eec\u6709\u6ca1\u6709\u529e\u6cd5\uff0c\u8ba9\u4e0a\u9762\u8fd9\u4e2a\u56fe\u770b\u8d77\u6765\u66f4\u50cf\u6570\u5b57\u5462\uff1f \u60f3\u6cd5\u662f\u52a0\u4e0a regularization\uff0c\u5982\u679c\u767d\u8272\u7684\u662f\u58a8\u6c34\uff0c\u90a3\u767d\u8272\u7684\u533a\u57df\u5e94\u8be5\u662f\u6709\u9650\u7684\uff0c\u4e0d\u4f1a\u6574\u5f20\u56fe\u90fd\u662f\u767d\u767d\u7684\uff0c\u8fd9\u91cc\u5229\u7528 L1 \u7684 regularization\uff0c\u628a\u6bcf\u4e2a pixel \u7684\u503c\u6c42\u548c $$ x^*=\\arg \\max\\limits_x (y^i-\\sum\\limits_{i,j} |x_{ij}|) $$ \u7ed3\u679c\u5982\u4e0b\uff0c\u5982\u679c\u518d\u52a0\u4e00\u4e9b constraint \u6bd4\u5982 \u76f8\u90bb\u7684\u989c\u8272 pixel \u989c\u8272\u8981\u4e00\u6837\u7ed3\u679c\u4f1a\u66f4\u597d","title":"what about output"},{"location":"ML/5_Convolutional%20Neural%20Network/#deep-dream","text":"\u7565","title":"Deep Dream"},{"location":"ML/5_Convolutional%20Neural%20Network/#deep-style","text":"\u7565","title":"Deep Style"},{"location":"ML/5_Convolutional%20Neural%20Network/#more-applicationplaying-go","text":"","title":"More Application\u2014\u2014Playing Go"},{"location":"ML/5_Convolutional%20Neural%20Network/#why-cnn-for-playing-go","text":"AlphaGo \u7528\u4e86 CNN\uff0c\u90a3\u4ec0\u4e48\u65f6\u5019\u624d\u9002\u5408\u7528 CNN \u5462\uff1f \u8981\u6709image\u8be5\u6709\u7684\u90a3\u4e9b\u7279\u6027\uff0c\u4e5f\u5c31\u5f00\u5934\u6240\u8bf4\u7684\uff0c\u6839\u636e\u89c2\u5bdf\u5230\u7684\u4e09\u4e2a property\uff0c\u6211\u4eec\u624d\u8bbe\u8ba1\u51fa\u4e86 CNN \u8fd9\u6837\u7684network\u67b6\u6784\uff1a Some patterns are much smaller than the whole image The same patterns appear in different regions Subsampling the pixels will not change the object CNN \u80fd\u591f\u5e94\u7528\u5728 Alpha-Go \u4e0a\uff0c\u662f\u56e0\u4e3a\u56f4\u68cb\u6709\u4e00\u4e9b\u7279\u6027\u548c\u56fe\u50cf\u5904\u7406\u662f\u5f88\u76f8\u4f3c\u7684 property 1\uff1a\u56f4\u68cb\u4e2d\u4e00\u4e9b pattern \u6bd4\u5982 \u4e09\u4e2a\u5b50\u56f4\u4e00\u4e2a\u5b50 property 2\uff1a\u540c\u4e00\u4e2a pattern \u53ef\u4ee5\u51fa\u73b0\u5728\u4e0d\u540c\u4f4d\u7f6e \u4f46\u662f\u5176\u5b9e AlphaGo \u5e76\u6ca1\u6709 MaxPooling\uff0c\u56e0\u4e3a\u8fd9\u663e\u7136\u65e0\u6cd5\u5728\u56f4\u68cb\u4e2d\u4f7f\u7528\uff0c\u6240\u4ee5 structure \u9700\u8981\u5177\u4f53\u95ee\u9898\uff0c\u5177\u4f53\u5206\u6790","title":"Why CNN for Playing Go"},{"location":"ML/5_Convolutional%20Neural%20Network/#more-applicationspeechtext","text":"Convolution \u4e2d\u7684 silde window \u4e0d\u662f\u4e00\u5b9a\u8981\u65e2\u6709\u4e0a\u4e0b\u4e5f\u6709\u5de6\u53f3\u7684\uff0c\u6bd4\u5982\u8bed\u97f3\u8fa8\u8bc6\u4e2d\uff0c\u901a\u5e38\u53ea\u5728\u9891\u7387\u65b9\u5411\u4e0a\u79fb\u52a8 filter\uff0c\u800c\u4e0d\u5728\u65f6\u95f4\u4e0a\uff1b\u800c\u5728\u6587\u5b57\u8bc6\u522b\u4e2d\uff0cfilter \u53ea\u5728\u65f6\u95f4\uff08word\uff09\u7684\u987a\u5e8f\u4e0a\u79fb\u52a8","title":"More Application\u2014\u2014Speech\u3001Text"},{"location":"ML/5_Convolutional%20Neural%20Network/#conclusion","text":"","title":"Conclusion"},{"location":"ML/5_Convolutional%20Neural%20Network/#property","text":"Some patterns are much smaller than the whole image The same patterns appear in different regions Subsampling the pixels will not change the object","title":"\u4e09\u4e2a property"},{"location":"ML/5_Convolutional%20Neural%20Network/#_1","text":"convolution \u67b6\u6784\uff1a\u9488\u5bf9 property 1 \u548c property 2 max pooling \u67b6\u6784\uff1a\u9488\u5bf9 property 3","title":"\u4e24\u4e2a\u67b6\u6784"},{"location":"ML/5_Convolutional%20Neural%20Network/#_2","text":"\u9488\u5bf9\u4e0d\u540c\u7684 application \u8981\u8bbe\u8ba1\u7b26\u5408\u5b83\u7279\u6027\u7684 network structure\uff0c\u800c\u4e0d\u662f\u751f\u786c\u5957\u7528\uff0c\u8fd9\u5c31\u662f CNN \u67b6\u6784\u7684\u8bbe\u8ba1\u7406\u5ff5","title":"\u4e00\u4e2a\u7406\u5ff5"},{"location":"ML/6_Recurrent%20Neural%20Network/","text":"Recurrent Neural Network \u00b6 RNN\uff1a\u5faa\u73af\u795e\u7ecf\u7f51\u7edc Basic Concept \u00b6 Slot Filling\uff1aSlot Filling \u5e0c\u671b\u5b9e\u73b0\u7684\u662f\u7ed9\u51fa\u4e00\u4e2a\u53e5\u5b50\uff0c\u5982 I would like to arrive Taipei on November 2nd \u540e\uff0c\u80fd\u591f\u5f97\u5230\u5176\u4e2d 2 \u4e2a\u4e3b\u8981\u5185\u5bb9\uff0cDestination\uff1aTaipei\uff0ctime of arrival\uff1aNovember 2nd\uff0c\u6240\u4ee5\u53eb Slot Filling\uff08\u69fd\u586b\u5145\uff09 input \u56e0\u4e3a\u662f\u5355\u8bcd\u6240\u4ee5\u53ef\u4ee5\u7528 1-of-N encoding\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u8981\u52a0\u4e00\u4e2a dimension for \"Others\"\uff0c\u4e5f\u53ef\u4ee5\u7528 Word hashing 1111 \u4f46\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\uff0c\u5e76\u4e0d\u4e00\u5b9a\u90fd\u662f arrive \u7684\uff0c\u4e5f\u6709\u53ef\u80fd\u662f leave Taipei \u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u7ed9 Neural network \u66f4\u591a\u7684 memory\uff0c\u53bb\u8bb0\u4f4f\u524d\u9762\u7684\u4fe1\u606f \u53ef\u4ee5\u7528 2 \u4e2a\u989d\u5916\u7684 memory \u53bb store \u524d\u9762\u7684\u4fe1\u606f\uff0c\u5e76\u628a\u4ed6\u4eec\u4e5f\u4f5c\u4e3ainput \u4ee5\u4e0b\u56fe\u4e3a\u4f8b\uff0cmemory \u7684\u521d\u59cb\u503c\u8bbe\u4e3a 0\uff0cNeural network \u7684 weight \u90fd\u662f 1\uff0cbias \u90fd\u662f 0\uff0c\u7b2c\u4e00\u5c42 layer \u7684 output \u4f1a\u5b58\u50a8\u5230 memory \u4e2d\u4f5c\u4e3a\u4e0b\u4e00\u6b21\u7684 input 22222 \u5927\u4f53\u7684\u6d41\u7a0b\u5982\u4e0b\uff08\u540c\u4e00\u4e2a network \u4f7f\u7528\u591a\u6b21\uff09 3333 \u5f53\u7136\u4e5f\u53ef\u4ee5\u662f deep \u7684\uff0c\u6bcf\u4e00\u5c42\u7684 layer \u7684 output \u90fd\u5b58\u50a8\u4e0b\u6765 4444 \u4e0a\u9762\u7684\u53eb\u505a Elman Network\uff0c\u8fd8\u6709\u5176\u4ed6\u4e0d\u540c sturcuture \u7684 network \u6bd4\u5982 Jordan Network \u80fd\u5f97\u5230\u66f4\u597d\u7684\u7ed3\u679c\uff0c\u56e0\u4e3a\u5b83\u7684 output \\(y^t\\) \u662f\u6709 target \u7684\u200b 5555 Bidirectional RNN RNN \u4e5f\u53ef\u4ee5\u662f\u53cc\u5411\u7684\uff0c\u6b63\u5411\u505a\u7684\u540c\u65f6\u9006\u5411\u505a\uff0c\u5e76\u5f97\u5230 \\(y^t\\) \u200b\u200b\u200b\uff0c\u8fd9\u6837\u7684\u8bdd Neuron Network \u80fd\u591f\u540c\u65f6\u770b\u4e24\u8fb9 6666 Long Short-term Memory\uff08LSTM\uff09 \u6bcf\u4e2a Memory Cell \u90fd\u6709\u4e00\u4e2a input gate\uff0coutput gate\uff0cforget gate\uff0c\u4ec0\u4e48\u65f6\u5019\u6253\u5f00 input gate\uff0c\u6253\u5f00 output gate\uff0c\u6253\u5f00 forget gate \u90fd\u662f network \u81ea\u5df1\u5b66\u5230\u7684 \u53ef\u4ee5\u770b\u6210\u6709 4 \u4e2a input\uff0c1 \u4e2a output 77777 \\(c^{'}\\) \u200b \u662f\u65b0\u7684\u5b58\u50a8\u5728 memory \u4e2d\u7684\u503c 8888 \u4e0b\u56fe\u662f\u4e2a\u4f8b\u5b50\uff0c \\(x_1\\) \u8868\u793a input data, \\(x_2 = 1\\) \u8868\u793a input gate \u6253\u5f00\uff0c \\(x_2=-1\\) \u8868\u793a forget gate \u6253\u5f00\uff0c \\(x_3=1\\) \u200b\u200b \u8868\u793a output gate \u6253\u5f00\uff0c\u6bcf\u4e00\u4e2a weight \u548c bias \u90fd\u662f train \u51fa\u6765\u7684 LSTM \u76f8\u6bd4\u4e8e\u666e\u901a\u7684 Network \u9700\u8981 4 \u500d\u7684\u53c2\u6570 999 LSTM \u7684\u771f\u6b63\u5f62\u6001\uff1a\u9664\u4e86\u5f53\u524d\u65f6\u95f4\u70b9\u7684 input \u5916\u8fd8\u6709\u4e0a\u4e00\u4e2a\u65f6\u95f4\u70b9\u7684 output \u548c peephole\uff08\u628a\u5b58\u5728 memory \u4e2d\u7684\u503c\u4e5f\u52a0\u8fdb input\uff09 Keras \u4e2d\u652f\u6301\u4e09\u79cd LSTM\uff1aLSTM\uff0cGRU\uff0cSimpleRNN 1010 How to learn? \u00b6 Loss Function \u00b6 \u6bcf\u4e00\u4e2a output \u7684\u4e0e label \u7684 cross entropy \u7684\u548c 1111 update \u7684\u65b9\u6cd5\u4e5f\u662f\u7528 backpropagation\uff0c\u53eb\u505a backpropagation through time\uff08BPTT\uff09\uff0c\u5728 time sequence \u4e0a\u8fd0\u4f5c\uff0c\u8fd9\u91cc\u4e0d\u5c55\u5f00 \u4e0d\u5e78\u7684\u662f\uff0cRNN-based network \u662f\u4e0d\u592a\u5bb9\u6613 train \u7684\uff0ctotal loss \u5e76\u4e0d\u662f\u4e00\u76f4\u4e0b\u964d\u7684\u800c\u4e14\u5728\u4e00\u4e9b\u5730\u65b9\u975e\u5e38\u7684\u5e73\u5766\uff0c\u4e00\u4e9b\u5730\u65b9\u975e\u5e38\u7684\u9661\u5ced 1212 Clipping \u00b6 \u901a\u8fc7 Clipping \u89e3\u51b3 total loss \u7684\u56fe\u50cf\u9661\u5ced\u7684\u95ee\u9898 Clipping \u662f\u5728 update \u7684\u8fc7\u7a0b\u4e2d\u5f53 gradient \u5927\u4e8e\u67d0\u4e2a\u503c\u65f6\uff0c\u8ba9\u5b83\u5c31\u7b49\u4e8e\u67d0\u4e2a\u503c\uff0c\u5373\u8bbe\u5b9a\u4e00\u4e2a threshold \u4f1a\u51fa\u73b0\u8fd9\u6837\u7684\u539f\u56e0\u4e0d\u662f\u56e0\u4e3a activation function\uff0c\u5f53\u628a sigmoid function \u6539\u6210 ReLU \u540e performance \u53cd\u800c\u4f1a\u53d8\u5dee \u4e0b\u9762\u7528\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u89e3\u91ca\u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u79cd\u60c5\u51b5 \u5f53\u9664\u4e86 neuron transition \u4e4b\u95f4\u7684 weight \u90fd\u662f 1 \u65f6\uff0c\u7b2c\u4e00\u4e2a input \u6539\u53d8\u4e00\u70b9\uff0c\u5bf9 ouput \u7684\u5f71\u54cd\u5c31\u4f1a\u975e\u5e38\u5927\uff0clearning rate \u592a\u5927\u592a\u5c0f\u90fd\u4f1a\u6709\u95ee\u9898 1313 \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u88ab\u5e7f\u6cdb\u91c7\u53d6\u7684\u65b9\u6cd5\u5c31\u662f LSTM\uff0c\u5b83\u53ef\u4ee5\u628a loss \u56fe\u50cf\u4e2d\u5e73\u5766\u7684\u5730\u65b9\u62ff\u6389\uff08\u907f\u514d gradient \u7279\u522b\u5c0f\uff09\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u653e\u5fc3\u7684\u628a learning rate \u8bbe\u5c0f\u4e00\u4e9b\uff1b\u56e0\u4e3a \u5982\u679c weight \u7684\u503c\u5bf9 memory \u7684\u4ea7\u751f\u4e86\u5f71\u54cd\uff0c\u8fd9\u4e2a\u5f71\u54cd\u4f1a\u4e00\u76f4\u5b58\u5728\uff08\u9664\u975e forget \u6389\uff09 Gated Recurrent Unit\uff08GRU\uff09simpler than LSTM \u53ea\u6709 2 \u4e2a gate\uff0c\u6240\u4ee5\u53c2\u6570\u6bd4 LSTM \u5c11\uff0c\u5982\u679c overfitting \u4e86\u53ef\u4ee5\u5c1d\u8bd5 More Applications \u00b6 Sentiment Analysis\uff1a\u5224\u65ad\u8bc4\u4ef7\u7684\u6b63\u8d1f\u9762 \u5224\u65ad\u6587\u7ae0\u7684 key term Both input and output are both sequences\uff0cbut the output is shorter\uff0c\u6bd4\u5982 Speech Recognition \u540e\u9762 Applications \u8fd8\u8bb2\u4e86\u5f88\u591a \u3002\u3002\u3002\u3002\u3002\u3002","title":"RNN"},{"location":"ML/6_Recurrent%20Neural%20Network/#recurrent-neural-network","text":"RNN\uff1a\u5faa\u73af\u795e\u7ecf\u7f51\u7edc","title":"Recurrent Neural Network"},{"location":"ML/6_Recurrent%20Neural%20Network/#basic-concept","text":"Slot Filling\uff1aSlot Filling \u5e0c\u671b\u5b9e\u73b0\u7684\u662f\u7ed9\u51fa\u4e00\u4e2a\u53e5\u5b50\uff0c\u5982 I would like to arrive Taipei on November 2nd \u540e\uff0c\u80fd\u591f\u5f97\u5230\u5176\u4e2d 2 \u4e2a\u4e3b\u8981\u5185\u5bb9\uff0cDestination\uff1aTaipei\uff0ctime of arrival\uff1aNovember 2nd\uff0c\u6240\u4ee5\u53eb Slot Filling\uff08\u69fd\u586b\u5145\uff09 input \u56e0\u4e3a\u662f\u5355\u8bcd\u6240\u4ee5\u53ef\u4ee5\u7528 1-of-N encoding\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u8981\u52a0\u4e00\u4e2a dimension for \"Others\"\uff0c\u4e5f\u53ef\u4ee5\u7528 Word hashing 1111 \u4f46\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\uff0c\u5e76\u4e0d\u4e00\u5b9a\u90fd\u662f arrive \u7684\uff0c\u4e5f\u6709\u53ef\u80fd\u662f leave Taipei \u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u7ed9 Neural network \u66f4\u591a\u7684 memory\uff0c\u53bb\u8bb0\u4f4f\u524d\u9762\u7684\u4fe1\u606f \u53ef\u4ee5\u7528 2 \u4e2a\u989d\u5916\u7684 memory \u53bb store \u524d\u9762\u7684\u4fe1\u606f\uff0c\u5e76\u628a\u4ed6\u4eec\u4e5f\u4f5c\u4e3ainput \u4ee5\u4e0b\u56fe\u4e3a\u4f8b\uff0cmemory \u7684\u521d\u59cb\u503c\u8bbe\u4e3a 0\uff0cNeural network \u7684 weight \u90fd\u662f 1\uff0cbias \u90fd\u662f 0\uff0c\u7b2c\u4e00\u5c42 layer \u7684 output \u4f1a\u5b58\u50a8\u5230 memory \u4e2d\u4f5c\u4e3a\u4e0b\u4e00\u6b21\u7684 input 22222 \u5927\u4f53\u7684\u6d41\u7a0b\u5982\u4e0b\uff08\u540c\u4e00\u4e2a network \u4f7f\u7528\u591a\u6b21\uff09 3333 \u5f53\u7136\u4e5f\u53ef\u4ee5\u662f deep \u7684\uff0c\u6bcf\u4e00\u5c42\u7684 layer \u7684 output \u90fd\u5b58\u50a8\u4e0b\u6765 4444 \u4e0a\u9762\u7684\u53eb\u505a Elman Network\uff0c\u8fd8\u6709\u5176\u4ed6\u4e0d\u540c sturcuture \u7684 network \u6bd4\u5982 Jordan Network \u80fd\u5f97\u5230\u66f4\u597d\u7684\u7ed3\u679c\uff0c\u56e0\u4e3a\u5b83\u7684 output \\(y^t\\) \u662f\u6709 target \u7684\u200b 5555 Bidirectional RNN RNN \u4e5f\u53ef\u4ee5\u662f\u53cc\u5411\u7684\uff0c\u6b63\u5411\u505a\u7684\u540c\u65f6\u9006\u5411\u505a\uff0c\u5e76\u5f97\u5230 \\(y^t\\) \u200b\u200b\u200b\uff0c\u8fd9\u6837\u7684\u8bdd Neuron Network \u80fd\u591f\u540c\u65f6\u770b\u4e24\u8fb9 6666 Long Short-term Memory\uff08LSTM\uff09 \u6bcf\u4e2a Memory Cell \u90fd\u6709\u4e00\u4e2a input gate\uff0coutput gate\uff0cforget gate\uff0c\u4ec0\u4e48\u65f6\u5019\u6253\u5f00 input gate\uff0c\u6253\u5f00 output gate\uff0c\u6253\u5f00 forget gate \u90fd\u662f network \u81ea\u5df1\u5b66\u5230\u7684 \u53ef\u4ee5\u770b\u6210\u6709 4 \u4e2a input\uff0c1 \u4e2a output 77777 \\(c^{'}\\) \u200b \u662f\u65b0\u7684\u5b58\u50a8\u5728 memory \u4e2d\u7684\u503c 8888 \u4e0b\u56fe\u662f\u4e2a\u4f8b\u5b50\uff0c \\(x_1\\) \u8868\u793a input data, \\(x_2 = 1\\) \u8868\u793a input gate \u6253\u5f00\uff0c \\(x_2=-1\\) \u8868\u793a forget gate \u6253\u5f00\uff0c \\(x_3=1\\) \u200b\u200b \u8868\u793a output gate \u6253\u5f00\uff0c\u6bcf\u4e00\u4e2a weight \u548c bias \u90fd\u662f train \u51fa\u6765\u7684 LSTM \u76f8\u6bd4\u4e8e\u666e\u901a\u7684 Network \u9700\u8981 4 \u500d\u7684\u53c2\u6570 999 LSTM \u7684\u771f\u6b63\u5f62\u6001\uff1a\u9664\u4e86\u5f53\u524d\u65f6\u95f4\u70b9\u7684 input \u5916\u8fd8\u6709\u4e0a\u4e00\u4e2a\u65f6\u95f4\u70b9\u7684 output \u548c peephole\uff08\u628a\u5b58\u5728 memory \u4e2d\u7684\u503c\u4e5f\u52a0\u8fdb input\uff09 Keras \u4e2d\u652f\u6301\u4e09\u79cd LSTM\uff1aLSTM\uff0cGRU\uff0cSimpleRNN 1010","title":"Basic Concept"},{"location":"ML/6_Recurrent%20Neural%20Network/#how-to-learn","text":"","title":"How to learn?"},{"location":"ML/6_Recurrent%20Neural%20Network/#loss-function","text":"\u6bcf\u4e00\u4e2a output \u7684\u4e0e label \u7684 cross entropy \u7684\u548c 1111 update \u7684\u65b9\u6cd5\u4e5f\u662f\u7528 backpropagation\uff0c\u53eb\u505a backpropagation through time\uff08BPTT\uff09\uff0c\u5728 time sequence \u4e0a\u8fd0\u4f5c\uff0c\u8fd9\u91cc\u4e0d\u5c55\u5f00 \u4e0d\u5e78\u7684\u662f\uff0cRNN-based network \u662f\u4e0d\u592a\u5bb9\u6613 train \u7684\uff0ctotal loss \u5e76\u4e0d\u662f\u4e00\u76f4\u4e0b\u964d\u7684\u800c\u4e14\u5728\u4e00\u4e9b\u5730\u65b9\u975e\u5e38\u7684\u5e73\u5766\uff0c\u4e00\u4e9b\u5730\u65b9\u975e\u5e38\u7684\u9661\u5ced 1212","title":"Loss Function"},{"location":"ML/6_Recurrent%20Neural%20Network/#clipping","text":"\u901a\u8fc7 Clipping \u89e3\u51b3 total loss \u7684\u56fe\u50cf\u9661\u5ced\u7684\u95ee\u9898 Clipping \u662f\u5728 update \u7684\u8fc7\u7a0b\u4e2d\u5f53 gradient \u5927\u4e8e\u67d0\u4e2a\u503c\u65f6\uff0c\u8ba9\u5b83\u5c31\u7b49\u4e8e\u67d0\u4e2a\u503c\uff0c\u5373\u8bbe\u5b9a\u4e00\u4e2a threshold \u4f1a\u51fa\u73b0\u8fd9\u6837\u7684\u539f\u56e0\u4e0d\u662f\u56e0\u4e3a activation function\uff0c\u5f53\u628a sigmoid function \u6539\u6210 ReLU \u540e performance \u53cd\u800c\u4f1a\u53d8\u5dee \u4e0b\u9762\u7528\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u89e3\u91ca\u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u79cd\u60c5\u51b5 \u5f53\u9664\u4e86 neuron transition \u4e4b\u95f4\u7684 weight \u90fd\u662f 1 \u65f6\uff0c\u7b2c\u4e00\u4e2a input \u6539\u53d8\u4e00\u70b9\uff0c\u5bf9 ouput \u7684\u5f71\u54cd\u5c31\u4f1a\u975e\u5e38\u5927\uff0clearning rate \u592a\u5927\u592a\u5c0f\u90fd\u4f1a\u6709\u95ee\u9898 1313 \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u88ab\u5e7f\u6cdb\u91c7\u53d6\u7684\u65b9\u6cd5\u5c31\u662f LSTM\uff0c\u5b83\u53ef\u4ee5\u628a loss \u56fe\u50cf\u4e2d\u5e73\u5766\u7684\u5730\u65b9\u62ff\u6389\uff08\u907f\u514d gradient \u7279\u522b\u5c0f\uff09\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u653e\u5fc3\u7684\u628a learning rate \u8bbe\u5c0f\u4e00\u4e9b\uff1b\u56e0\u4e3a \u5982\u679c weight \u7684\u503c\u5bf9 memory \u7684\u4ea7\u751f\u4e86\u5f71\u54cd\uff0c\u8fd9\u4e2a\u5f71\u54cd\u4f1a\u4e00\u76f4\u5b58\u5728\uff08\u9664\u975e forget \u6389\uff09 Gated Recurrent Unit\uff08GRU\uff09simpler than LSTM \u53ea\u6709 2 \u4e2a gate\uff0c\u6240\u4ee5\u53c2\u6570\u6bd4 LSTM \u5c11\uff0c\u5982\u679c overfitting \u4e86\u53ef\u4ee5\u5c1d\u8bd5","title":"Clipping"},{"location":"ML/6_Recurrent%20Neural%20Network/#more-applications","text":"Sentiment Analysis\uff1a\u5224\u65ad\u8bc4\u4ef7\u7684\u6b63\u8d1f\u9762 \u5224\u65ad\u6587\u7ae0\u7684 key term Both input and output are both sequences\uff0cbut the output is shorter\uff0c\u6bd4\u5982 Speech Recognition \u540e\u9762 Applications \u8fd8\u8bb2\u4e86\u5f88\u591a \u3002\u3002\u3002\u3002\u3002\u3002","title":"More Applications"},{"location":"ML/7_Semi-supervised%20Learning/","text":"Semi-supervised Learning \u00b6 \u534a\u76d1\u7763\u5b66\u4e60\uff1a Semi-supervised Learning for Generative Model Low-density Separation Assumption\uff1a\u975e\u9ed1\u5373\u767d Smoothness Assumption\uff1a\u8fd1\u6731\u8005\u8d64\uff0c\u8fd1\u58a8\u8005\u9ed1 Better Representation\uff1a\u53bb\u829c\u5b58\u83c1\uff0c\u5316\u7e41\u4e3a\u7b80 Introduction \u00b6 \u4e3a\u4ec0\u4e48\u8981\u505a Semi-supervised Learning\uff0c\u56e0\u4e3a data \u7684 input \u5f88\u5bb9\u6613\u5f97\u5230\uff0c\u4f46\u662f\u5f88\u591a\u90fd\u7f3a output\uff08label\uff09 Supervised Learning \u00b6 \\((x^r,\\hat y^r)_{r=1}^R\\) \u200b \u5728 training data \u4e2d\u6bcf\u4e00\u7ec4 data \u7684 input \\(x\\) \u200b \u90fd\u6709 output \\(y\\) \u200b\u200b\u200b\u200b Semi-supervised Learning \u00b6 \\(\\{(x^r,\\hat y^r)\\}_{r=1}^R\\} + \\{x^u\\}_{u=R}^{R+U}\\) \u200b Supervised Learning \u52a0\u4e0a\u6ca1\u6709 output \u7684 data\uff0c\u800c\u4e14\u901a\u5e38 \\(U>>R\\) \u200b\u200b \u200b Semi-supervised learning\u5206\u4e3a\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\uff1a Transductive Learning\uff1aunlabeled data is the testing data \u5373\uff0c\u628a testing data \u5f53\u505a\u65e0\u6807\u7b7e\u7684 training data \u4f7f\u7528\uff0c\u9002\u7528\u4e8e\u4e8b\u5148\u5df2\u7ecf\u77e5\u9053 testing data \u7684\u60c5\u51b5 (\u6bd4\u5982\u4e00\u4e9b\u6bd4\u8d5b\u7684\u65f6\u5019\uff0c\u53ea\u77e5\u9053 data \u7684 feature \u800c\u4e0d\u77e5\u9053 output) Inductive Learning\uff1aunlabeled data is not the testing data \u5373\uff0c\u4e0d\u628a testing data \u7684 feature \u62ff\u53bb\u7ed9\u673a\u5668\u8bad\u7ec3\uff0c\u9002\u7528\u4e8e\u4e8b\u5148\u5e76\u4e0d\u77e5\u9053 testing data \u7684\u60c5\u51b5 (\u66f4\u666e\u904d\u7684\u60c5\u51b5) Why semi-supervised learning help\uff1f \u00b6 unlabelled data \u867d\u7136\u53ea\u6709 input \u4f46\u5b83\u7684\u5206\u5e03\u53ef\u4ee5\u7ed9\u6211\u4eec\u4e00\u4e9b\u4fe1\u606f\uff0c\u4ee5\u4e0b\u4e3a\u4f8b semi-supervised learning \u7684\u4f7f\u7528\u5f80\u5f80\u4f34\u968f\u7740\u5047\u8bbe\uff0c\u800c\u8be5\u5047\u8bbe\u7684\u5408\u7406\u4e0e\u5426\uff0c\u51b3\u5b9a\u4e86\u7ed3\u679c\u7684\u597d\u574f\u7a0b\u5ea6\uff1b\u6bd4\u5982\u4e0a\u56fe\u4e2d\u7684 unlabeled data\uff0c\u5b83\u663e\u7136\u662f\u4e00\u53ea\u72d7\uff0c\u800c\u7279\u5f81\u5206\u5e03\u5374\u4e0e\u732b\u88ab\u5212\u5206\u5728\u4e86\u4e00\u8d77\uff0c\u5f88\u53ef\u80fd\u662f\u7531\u4e8e\u8fd9\u4e24\u5f20\u56fe\u7247\u7684\u80cc\u666f\u90fd\u662f\u7eff\u8272\u5bfc\u81f4\u7684\uff0c\u56e0\u6b64\u5047\u8bbe\u662f\u5426\u5408\u7406\u663e\u5f97\u81f3\u5173\u91cd\u8981 Generative Model \u00b6 \u5728\u76d1\u7763\u5b66\u4e60\u4e2d\u6211\u4eec\u5b66\u4e60\u8fc7\u901a\u8fc7\u540e\u9a8c\u6982\u7387\u5f97\u51fa x \u6240\u5c5e\u7684\u7c7b\u522b \u4e0b\u56fe\u5b9e\u7ebf\u662f Supervised Generative Model \u5f97\u51fa\u7684\u7ed3\u679c\uff0c\u7eff\u8272\u7684\u70b9\u662f\u6ca1\u6709 label \u7684 data\uff0c\u663e\u7136\u539f\u5148\u7684 \\(u,\\Sigma\\) \u662f\u4e0d\u5408\u7406\u7684 \u4ee5\u4e0a\u662f\u76f4\u89c2\u4e0a\u7684\u89e3\u91ca\uff0c\u63a5\u4e0b\u6765\u8fdb\u884c\u5177\u4f53\u63a8\u5bfc (\u5047\u8bbe\u505a\u4e8c\u5143\u5206\u7c7b)\uff1a \u5229\u7528\u6709 label \u7684 data \u521d\u59cb\u5316\u4e00\u7ec4\u53c2\u6570\uff1a \\(\\theta=\\{P(C_1),P(C_2),u^1,u^2,\\Sigma\\}\\) step1\uff1a\u5229\u7528\u4e0a\u9762\u521d\u59cb model \u8ba1\u7b97\u6bcf\u4e00\u7b14 unlabeled data \\(x^u\\) \u5c5e\u4e8e class1 \u7684\u6982\u7387 \\(P_{\\theta}(C_1|x^u)\\) step2\uff1aupdate model \u5982\u679c\u4e0d\u8003\u8651 unlabeled data\uff0c\u5219\u5148\u9a8c\u6982\u7387\u663e\u7136\u4e3a\u5c5e\u4e8e class1 \u7684\u6837\u672c\u70b9\u6570 \\(N_1\\) / \u603b\u7684\u6837\u672c\u70b9\u6570 \\(N\\) \uff0c\u5373 \\(P(C_1)=\\frac{N_1}{N}\\) \u200b \u800c\u8003\u8651 unlabeled data \u65f6\uff0c\u5206\u5b50\u8fd8\u8981\u52a0\u4e0a\u6240\u6709 unlabeled data \u5c5e\u4e8e class1 \u7684\u6982\u7387\u548c\uff0c\u6b64\u65f6\u5b83\u4eec\u88ab\u770b\u4f5c\u5c0f\u6570\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u6309\u7167\u6982\u7387\u4e00\u90e8\u5206\u5c5e\u4e8e \\(C_1\\) \uff0c\u4e00\u90e8\u5206\u5c5e\u4e8e \\(C_2\\) $$ P(C_1)=\\frac{N_1+\\sum_{x^u}P(C_1|x^u)}{N} $$ \u540c\u7406\uff0c\u5bf9\u4e8e\u5747\u503c\uff0c\u539f\u5148\u7684 mean \\(u_1=\\frac{1}{N_1}\\sum\\limits_{x^r\\in C_1} x^r\\) \u52a0\u4e0a\u6839\u636e\u6982\u7387\u5bf9 \\(x^u\\) \u6c42\u548c\u518d\u5f52\u4e00\u5316\u7684\u7ed3\u679c\u5373\u53ef $$ u_1=\\frac{1}{N_1}\\sum\\limits_{x^r\\in C_1} x^r+\\frac{1}{\\sum_{x^u}P(C_1|x^u)}\\sum\\limits_{x^u}P(C_1|x^u)x^u $$ \u5269\u4f59\u7684\u53c2\u6570\u540c\u7406\uff0c\u63a5\u4e0b\u6765\u5c31\u6709\u4e86\u4e00\u7ec4\u65b0\u7684\u53c2\u6570 \\(\\theta'\\) \uff0c\u4e8e\u662f\u56de\u5230 step1->step2->step1\u5faa\u73af \u7406\u8bba\u4e0a\u8be5\u65b9\u6cd5\u4fdd\u8bc1\u662f\u53ef\u4ee5\u6536\u655b\u7684\uff0c\u800c\u4e00\u5f00\u59cb\u7ed9 \\(\\theta\\) \u7684\u521d\u59cb\u503c\u4f1a\u5f71\u54cd\u6536\u655b\u7684\u7ed3\u679c\uff0c\u7c7b\u4f3c gradient descent \u4e0a\u8ff0\u7684 step1 \u5c31\u662f EM algorithm \u91cc\u7684 E\uff0cstep2 \u5219\u662f M \u4ee5\u4e0a\u7684\u63a8\u5bfc\u57fa\u4e8e\u7684\u57fa\u672c\u601d\u60f3\u662f\uff0c\u628a unlabeled data \\(x^u\\) \u770b\u6210\u662f\u53ef\u4ee5\u5212\u5206\u7684\uff0c\u4e00\u90e8\u5206\u5c5e\u4e8e \\(C_1\\) \uff0c\u4e00\u90e8\u5206\u5c5e\u4e8e \\(C_2\\) \uff0c\u6b64\u65f6\u5b83\u7684\u6982\u7387 \\(P_{\\theta}(x^u)=P_{\\theta}(x^u|C_1)P(C_1)+P_{\\theta}(x^u|C_2)P(C_2)\\) \uff0c\u5b9e\u9645\u4e0a\u6211\u4eec\u5728\u5229\u7528\u6781\u5927\u4f3c\u7136\u51fd\u6570\u66f4\u65b0\u53c2\u6570\u7684\u65f6\u5019\uff0c\u5c31\u5229\u7528\u4e86\u8be5\u62c6\u5206\u7684\u7ed3\u679c\uff1a \\[ max:logL(\\theta)=\\sum\\limits_{x^r} logP_{\\theta}(x^r)+\\sum\\limits_{x^u}logP_{\\theta}(x^u) \\] \u4f46\u8fd9\u4e2a\u5f0f\u5b50\u4e0d\u662f convex\uff0c\u6240\u4ee5\u89e3\u7684\u65f6\u5019\u8981\u7528 EM algorithm\uff0c\u5176\u5b9e\u5c31\u662f\u8981 iterative \u7684\u53bb solve\uff0c\u5c31\u662f\u4e0a\u9762\u7684 step EM\u7b97\u6cd5\u8be6\u89e3 - \u77e5\u4e4e Low-density Separation Assumption \u00b6 \u63a5\u4e0b\u6765\u4ecb\u7ecd\u4e00\u79cd\u65b0\u7684\u65b9\u6cd5\uff0c\u5b83\u57fa\u4e8e\u7684\u5047\u8bbe\u662f Low-density separation \u901a\u4fd7\u6765\u8bb2\uff0c\u5c31\u662f\u8fd9\u4e2a\u4e16\u754c\u662f\u975e\u9ed1\u5373\u767d\u7684\uff0c\u5728\u4e24\u4e2a class \u7684\u4ea4\u754c\u5904 data \u7684\u5bc6\u5ea6 (density)\u662f\u5f88\u4f4e\u7684\uff0c\u5b83\u4eec\u4e4b\u95f4\u4f1a\u6709\u4e00\u9053\u660e\u663e\u7684\u9e3f\u6c9f Self Training \u00b6 \u662f low-density separation \u6700\u5177\u4ee3\u8868\u6027\u4e5f\u6700\u7b80\u5355\u7684\u65b9\u6cd5 \u4ece labelled data \u4e2d\u8bad\u7ec3\u4e00\u4e2a model\uff08\u8bad\u7ec3\u65b9\u6cd5\u6ca1\u6709\u9650\u5236\uff09 \u7136\u540e\u7528\u8be5 model \u53bb\u5bf9 unlabelled data \u7b97\u51fa label\uff0c\u4e5f\u53eb\u505a pseudo label \u4ece unlabelled data \u4e2d\u9009\u51fa\u4e00\u4e9b data \u6dfb\u52a0\u5230 labelled data \u4e2d\uff0c\u5982\u4f55\u6311\u9009\u9700\u8981\u81ea\u5df1\u8bbe\u8ba1 \u56de\u5934\u518d\u53bb\u8bad\u7ec3 \u6ce8\uff1a\u8be5\u65b9\u6cd5\u5bf9 Regression \u662f\u4e0d\u9002\u7528\u7684\uff0c\u56e0\u4e3a Regression output \u662f\u4e00\u4e2a\u6570\u91cf \u5b9e\u9645\u4e0a\uff0c\u8be5\u65b9\u6cd5\u4e0e\u4e4b\u524d\u63d0\u5230\u7684 generative model \u8fd8\u662f\u633a\u50cf\u7684\uff0c\u533a\u522b\u5728\u4e8e\uff1a Self Training\u4f7f\u7528\u7684\u662f hard label\uff1a\u5047\u8bbe\u4e00\u7b14data\u5f3a\u5236\u5c5e\u4e8e\u67d0\u4e2a class Generative Model\u4f7f\u7528\u7684\u662f soft label\uff1a\u5047\u8bbe\u4e00\u7b14 data \u53ef\u4ee5\u6309\u7167\u6982\u7387\u5212\u5206\uff0c\u4e0d\u540c\u90e8\u5206\u5c5e\u4e8e\u4e0d\u540c class \u5728 neural network \u91cc\u4f7f\u7528 soft label \u662f\u6ca1\u6709\u7528\u7684\uff0c\u4e22\u8fdb\u53bb\u91cd\u65b0\u8bad\u7ec3\u540e\u4f9d\u65e7\u662f\u540c\u6837\u7684\u53c2\u6570\uff0c\u6240\u4ee5 low density separation \u5c31\u662f\u901a\u8fc7\u5f3a\u5236\u5206\u7c7b\u6765\u63d0\u5347\u5206\u7c7b\u6548\u679c\u7684\u65b9\u6cd5 Entropy-based Regularization \u00b6 hard label \u7684\u65b9\u5f0f\u6709\u4e9b\u592a\u6b66\u65ad\u4e86\uff0c\u800c entropy-based regularization \u5219\u505a\u4e86\u76f8\u5e94\u7684\u6539\u8fdb\uff1a \\(y^u=f^*_{\\theta^*}(x^u)\\) \uff0c\u5176\u4e2d \\(y^u\\) \u200b\u200b \u662f\u4e00\u4e2a \u6982\u7387\u5206\u5e03 (distribution) \uff0c\u5982\u679c\u901a\u8fc7 entropy-based regularization \u5f97\u5230\u7684\u5206\u5e03\u96c6\u4e2d\u5728\u67d0\u4e2a class \u4e0a\u7684\u8bdd\uff0c\u90a3\u8fd9\u4e2a model \u5c31\u662f\u597d\u7684\uff0c\u800c\u5982\u679c\u5206\u5e03\u662f\u6bd4\u8f83\u5206\u6563\u7684\uff0c\u90a3\u8fd9\u4e2a model \u5c31\u662f\u4e0d\u597d\u7684 \u5229\u7528\u4e00\u4e2a output \u7684 distribution \u7684 entropy \u6765\u544a\u8bc9\u4f60\u5b83\u7684\u96c6\u4e2d\u7a0b\u5ea6\uff1a $$ E(y^u)=-\\sum\\limits_{m=1}^5 y_m^u ln(y_m^u) $$ entropy \u8d8a\u5927\uff0cdistribution \u5c31\u8d8a\u5206\u6563\uff0centropy \u8d8a\u5c0f\uff0cdistribution \u5c31\u8d8a\u96c6\u4e2d \u6211\u4eec\u7684\u76ee\u6807\u662f\u5728 labeled data \u4e0a\u5206\u7c7b\u8981\u6b63\u786e\uff0c\u5728 unlabeled data \u4e0a\uff0coutput \u7684 entropy \u8981\u8d8a\u5c0f\u8d8a\u597d\uff0c\u6b64\u65f6\u5c31\u8981\u4fee\u6539 loss function $$ min:L=\\sum\\limits_{x^r} C(y^r,\\hat y^r) + \\lambda \\sum\\limits_{x^u} E(y^u) $$ labeled data \u7684 Cross Entropy \u548c unlabeled data \u7684 entropy \u52a0\u6743\u76f8\u52a0\uff08\u6743\u503c\u9700\u8981\u81ea\u5df1\u5b9a\uff09 \u53ef\u4ee5\u53d1\u73b0\u8be5\u5f0f\u957f\u5f97\u5f88\u50cf regularization\uff0c\u8fd9\u4e5f\u5c31\u662f entropy regularization \u7684\u540d\u79f0\u7531\u6765 Semi-supervised SVM \u00b6 SVM \u8981\u505a\u7684\u662f\uff0c\u7ed9\u4f60\u4e24\u4e2a class \u7684 data\uff0c\u53bb\u627e\u4e00\u4e2a boundary\uff1a \u8981\u6709\u6700\u5927\u7684 margin\uff0c\u8ba9\u8fd9\u4e24\u4e2a class \u5206\u7684\u8d8a\u5f00\u8d8a\u597d \u8981\u6709\u6700\u5c0f\u7684\u5206\u7c7b\u9519\u8bef \u5bf9\u4e8e unlabelled data \u5219\u7a77\u5c3d\u6240\u6709\u53ef\u80fd\u7684 label\uff0c\u7136\u540e\u5bf9\u6bcf\u4e00\u79cd\u53ef\u80fd\u7684\u7ed3\u679c\u90fd\u53bb\u7b97 SVM\uff0c\u518d\u627e\u51fa\u53ef\u4ee5\u8ba9 margin \u6700\u5927\uff0c\u540c\u65f6\u53c8 minimize error \u7684\u90a3\u79cd\u60c5\u51b5 SVM paper\uff1aThorsten Joachims, \u201d Transductive Inference for Text Classification using Support Vector Machines\u201d, ICML, 1999 paper \u4e2d\u7ed9\u51fa\u4e86 n \u5f88\u5927\u7684\u65f6\u5019\u7684\u89e3\u51b3\u65b9\u6cd5\uff0c\u601d\u60f3\u662f\uff1a\u4e00\u5f00\u59cb\u4f60\u5148\u5f97\u5230\u4e00\u4e9b label\uff0c\u7136\u540e\u6bcf\u6b21\u6539\u4e00\u7b14 unlabeled data \u7684 label\uff0c\u770b\u770b\u53ef\u4e0d\u53ef\u4ee5\u8ba9\u4f60\u7684 objective function \u53d8\u5927\uff0c\u5982\u679c\u53d8\u5927\u5c31\u53bb\u6539\u53d8\u8be5 label Smoothness Assumption \u00b6 Concepts \u00b6 smoothness assumption \u7684\u57fa\u672c\u7cbe\u795e\u662f\uff1a\u8fd1\u6731\u8005\u8d64\uff0c\u8fd1\u58a8\u8005\u9ed1 \u7c97\u7cd9\u7684\u5b9a\u4e49\u662f\u76f8\u4f3c\u7684 x \u5177\u6709\u76f8\u540c\u7684 \\(\\hat y\\) \uff0c\u7cbe\u786e\u7684\u5b9a\u4e49\u662f\uff1a x\u7684\u5206\u5e03\u662f\u4e0d\u5e73\u5747\u7684 \u5982\u679c \\(x^1\\) \u200b \u548c \\(x^2\\) \u200b \u5728\u4e00\u4e2a high density region \u4e0a\u5f88\u63a5\u8fd1\u7684\u8bdd\uff0c\u90a3\u4e48 \\(\\hat y^1\\) \u200b\u548c \\(\\hat y^2\\) \u200b\u5c31\u662f\u76f8\u540c\u7684 \u4e5f\u5c31\u662f\u8fd9\u4e24\u4e2a\u70b9\u53ef\u4ee5\u5728\u6837\u672c\u70b9\u9ad8\u5bc6\u5ea6\u96c6\u4e2d\u5206\u5e03\u7684\u533a\u57df\u5757\u4e2d\u6709\u4e00\u6761\u53ef\u8fde\u63a5\u7684\u8def\u5f84\uff0c\u5373 connected by a high density path digits detection \u00b6 \u624b\u5199\u6570\u5b57\u8fa8\u8bc6\u4e3a\u4f8b\uff0c\u663e\u7136\u6700\u53f3\u4fa7\u7684 2 \u548c 3 \u5728 pixel \u4e0a\u4f1a\u66f4\u63a5\u8fd1\u4e00\u4e9b\uff1b\u4f46\u5982\u679c\u628a\u6240\u6709\u8fde\u7eed\u53d8\u5316\u7684 2 \u653e\u8fdb\u6765\uff0c\u90a3\u5b83\u4eec\u5176\u5b9e\u90fd\u662f 2 \u4eba\u8138\u7684\u8fc7\u6e21\u6570\u636e\u4e5f\u540c\u7406 file classification \u00b6 Smoothness Assumption \u5728\u6587\u4ef6\u5206\u7c7b\u4e0a\u662f\u975e\u5e38\u6709\u7528\u7684 \u5047\u8bbe\u5bf9\u5929\u6587\u5b66 (astronomy) \u548c\u65c5\u884c (travel) \u7684\u6587\u7ae0\u8fdb\u884c\u5206\u7c7b\uff0c\u5b83\u4eec\u5404\u81ea\u6709\u4e13\u5c5e\u7684\u8bcd\u6c47\uff0c\u6b64\u65f6\u5982\u679c unlabeled data \u4e0e label data \u7684\u8bcd\u6c47\u662f\u76f8\u540c\u6216\u91cd\u5408 (overlap) \u7684\uff0c\u90a3\u4e48\u5c31\u5f88\u5bb9\u6613\u5206\u7c7b\uff1b\u4f46\u5728\u771f\u5b9e\u7684\u60c5\u51b5\u4e0b\uff0cunlabeled data \u548c labeled data \u4e4b\u95f4\u53ef\u80fd\u6ca1\u6709\u4efb\u4f55\u91cd\u590d\u7684 words\uff0c\u56e0\u4e3a\u4e16\u754c\u4e0a\u7684\u8bcd\u6c47\u592a\u591a\u4e86\uff0csparse \u7684\u5206\u5e03\u5f88\u96be\u4f1a\u4f7f overlap \u53d1\u751f \u4f46\u5982\u679cunlabeled data\u8db3\u591f\u591a\uff0c\u5c31\u4f1a\u4ee5\u4e00\u79cd\u76f8\u4f3c\u4f20\u9012\u7684\u5f62\u5f0f\uff0c\u5efa\u7acb\u8d77\u6587\u6863\u4e4b\u95f4\u76f8\u4f3c\u7684\u6865\u6881 cluster and then label \u00b6 \u5728\u5177\u4f53\u5b9e\u73b0\u4e0a\uff0c\u6709\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u662f cluster and then label\uff0c\u4e5f\u5c31\u662f\u5148\u628a data \u5206\u6210\u51e0\u4e2a cluster \u540e\u518d\u53bb train\uff0c\u4f46\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u4e00\u5b9a\u4f1a\u5f97\u5230\u597d\u7684\u7ed3\u679c\uff0c\u56e0\u4e3a\u5b83\u7684\u5047\u8bbe\u662f\u4f60\u53ef\u4ee5\u628a\u540c\u4e00\u4e2a class \u7684\u6837\u672c\u70b9 cluster \u5728\u4e00\u8d77\uff0c\u800c\u8fd9\u5176\u5b9e\u662f\u6ca1\u90a3\u4e48\u5bb9\u6613\u7684\uff0c\u6bd4\u5982 \u5bf9\u56fe\u50cf\u7684\u5212\u5206 Graph-based Approach \u00b6 \u4e3a\u4e86\u89e3\u51b3\u96be\u4ee5\u5212\u5206\u7684\u95ee\u9898\uff0c\u63a5\u4e0b\u6765\u5f15\u5165 Graph Structure \u6765\u8868\u8fbe connected by a high density path \u8fd9\u4ef6\u4e8b \u628a\u6240\u6709\u7684 data points \u90fd\u5efa\u6210\u4e00\u4e2a graph\uff0c\u6709\u65f6\u5019\u5efa\u7acb vertex \u4e4b\u95f4\u7684\u5173\u7cfb\u662f\u6bd4\u8f83\u5bb9\u6613\u7684\uff0c\u6bd4\u5982\u7f51\u9875\u4e4b\u95f4\u7684\u94fe\u63a5\u5173\u7cfb\u3001\u8bba\u6587\u4e4b\u95f4\u7684\u5f15\u7528\u5173\u7cfb\uff1b\u4f46\u6709\u65f6\u5019\u9700\u8981\u4f60\u81ea\u5df1\u53bb\u5bfb\u627e vertex \u4e4b\u95f4\u7684\u5173\u7cfb graph \u7684\u597d\u574f\uff0c\u5bf9\u7ed3\u679c\u8d77\u7740\u81f3\u5173\u91cd\u8981\u7684\u5f71\u54cd\uff0c\u800c\u5982\u4f55 build graph \u5374\u662f\u4e00\u4ef6 heuristic \u7684\u4e8b\u60c5\uff0c\u9700\u8981\u51ed\u7740\u7ecf\u9a8c\u548c\u76f4\u89c9\u6765\u505a \u9996\u5148\u5b9a\u4e49\u4e24\u4e2aobject \\(x^i,x^j\\) \u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6 \\(s(x^i, x^j)\\) \u7b97\u5b8c\u76f8\u4f3c\u5ea6\u540e\uff0c\u5c31\u53ef\u4ee5\u5efa graph \u4e86\uff0c\u65b9\u5f0f\u6709\u5f88\u591a\u79cd\uff1a k nearest neighbor\uff1ak \u90bb\u8fd1\u6cd5\uff0c\u4e0e\u5468\u56f4\u6700\u63a5\u8fd1\u7684 k \u4e2a\u70b9\u8fde\u63a5 e-neighborhood\uff1a\u6bcf\u4e2a point \u4e0e\u76f8\u4f3c\u5ea6\u8d85\u8fc7\u67d0\u4e2a\u7279\u5b9a threshold e \u7684\u70b9\u76f8\u8fde \u9664\u4e86\u7ed9\u6837\u672c\u70b9\u4e4b\u95f4\u8fde\u63a5\u4e0e\u4e0d\u8fde\u63a5\u7684 binary \u7684\u60c5\u51b5\u5916 \uff0c\u8fd8\u53ef\u4ee5\u7ed9 Edge \u7279\u5b9a\u7684 weight\uff0c\u8ba9\u5b83\u4e0e\u76f8\u4f3c\u5ea6 \\(s(x^i,x^j)\\) \u200b \u6210\u6b63\u6bd4 \u5efa\u8bae\u7528 RBM function \u6765\u786e\u5b9a\u76f8\u4f3c\u5ea6\uff1a \\(s(x^i,x^j)=e^{-\\gamma||x^i-x^j||^2 }\\) \u200b \u8fd9\u91cc \\(x^i,x^j\\) \u200b\u5747\u4e3a vector\uff0c\u8ba1\u7b97\u5b83\u4eec\u7684 Euclidean Distance (\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb)\uff0c\u52a0\u4e0a\u53c2\u6570\u540e\u518d\u53bb exponential \u81f3\u4e8e\u52a0 exponential\uff0c\u7ecf\u9a8c\u4e0a\u6765\u8bf4\u901a\u5e38\u662f\u53ef\u4ee5\u5e2e\u52a9\u63d0\u5347 performance\u7684\uff0c\u5728\u8fd9\u91cc\u53ea\u6709\u5f53 \\(x^i,x^j\\) \u200b \u975e\u5e38\u63a5\u8fd1\u7684\u65f6\u5019\uff0csingularity \u624d\u4f1a\u5927\uff1b\u53ea\u8981\u8ddd\u79bb\u7a0d\u5fae\u8fdc\u4e00\u70b9\uff0csingularity \u5c31\u4f1a\u4e0b\u964d\u5f97\u5f88\u5feb\uff0c\u53d8\u5f97\u5f88\u5c0f \u4f7f\u7528 exponential \u7684 RBM function \u53ef\u4ee5\u505a\u5230\u53ea\u6709\u975e\u5e38\u8fd1\u7684\u4e24\u4e2a\u70b9\u624d\u80fd\u76f8\u8fde\uff0c\u7a0d\u5fae\u8fdc\u4e00\u70b9\u5c31\u65e0\u6cd5\u76f8\u8fde\u7684\u6548\u679c graph-based approach \u9700\u8981\u6536\u96c6\u5230\u7684 data \u8db3\u591f\u591a\uff0c\u5426\u5219\u53ef\u80fd\u4f20\u9012\u5230\u4e00\u534a\uff0cgraph \u5c31\u65ad\u6389\u4e86\uff0cinformation \u7684\u4f20\u9012\u5c31\u5931\u6548\u4e86 \u4ecb\u7ecd\u5b8c\u4e86\u5982\u4f55\u5b9a\u6027\u4f7f\u7528 graph\uff0c\u63a5\u4e0b\u6765\u4ecb\u7ecd\u4e00\u4e0b\u5982\u4f55\u5b9a\u91cf\u4f7f\u7528 graph\uff0c\u5b9a\u4e49\u4e00\u4e2a smoothness \u6765\u8868\u793a\u6709\u591a\u7b26\u5408 Smoothness Assumption \u8fd9\u4e2a\u5047\u8bbe \u5b9a\u91cf\u7684\u4f7f\u7528\u65b9\u5f0f\u662f\u5b9a\u4e49 label \u7684 smoothness\uff0c\u4e0b\u56fe\u4e2d\uff0cedge \u4e0a\u7684\u6570\u5b57\u662f weight\uff0c \\(x^i\\) \u662fdata\uff0c \\(y^i\\) \u662f label\uff0c\u8ba1\u7b97 smoothness \u7684\u65b9\u5f0f\u4e3a\uff1a $$ S=\\frac{1}{2}\\sum\\limits_{i,j} w_{i,j}(y^i-y^j)^2 $$ \u6211\u4eec\u671f\u671b smooth \u7684\u503c \u8d8a\u5c0f\u8d8a\u597d \u5982\u679c\u628a labeled data \u548c unlabeled data \u7684 y \u7ec4\u6210\u4e00\u4e2a (R+U) dim vector\uff0c\u5373 $$ y=\\left [\\begin{matrix} ...y^i...y^j \\end{matrix} \\right ]^T $$ \u4e8e\u662f smooth \u53ef\u4ee5\u6539\u5199\u4e3a\uff1a $$ S=\\frac{1}{2}\\sum\\limits_{i,j} w_{i,j}(y^i-y^j)^2=y^TLy $$ \u5176\u4e2d L \u4e3a (R+U)\u00d7(R+U) matrix\uff0c\u79f0\u4e3a Graph Laplacian \uff0c \u5b9a\u4e49\u4e3a \\(L=D-W\\) W\uff1a\u628a data point \u4e24\u4e24\u4e4b\u95f4 weight \u7684\u5173\u7cfb\u5efa\u6210 matrix\uff0c\u4ee3\u8868\u4e86 \\(x^i\\) \u4e0e \\(x^j\\) \u4e4b\u95f4\u7684weight\u503c D\uff1a\u628a W \u7684\u6bcf\u4e00\u4e2a row \u4e0a\u7684\u503c\u52a0\u8d77\u6765\u653e\u5728\u8be5\u884c\u5bf9\u5e94\u7684 diagonal \u4e0a\u5373\u53ef \u5bf9 \\(S=y^TLy\\) \u6765\u8bf4\uff0cy \u662f label\uff0c\u662f neural network \u7684 output\uff0c\u53d6\u51b3\u4e8e neural network \u7684parameters\uff0c\u56e0\u6b64\u8981\u5728\u539f\u6765\u4ec5\u9488\u5bf9 labeled data \u7684 loss function \u4e2d\u52a0\u4e0a\u8fd9\u4e00\u9879\uff0c\u5f97\u5230\uff1a $$ L=\\sum\\limits_{x^r}C(y^r,\\hat y^r) + \\lambda S $$ \\(\\lambda S\\) \u200b\u200b \u5b9e\u9645\u4e0a\u4e5f\u662f\u4e00\u4e2a regularization \u8bad\u7ec3\u76ee\u6807\uff1a labeled data \u7684 cross entropy \u8d8a\u5c0f\u8d8a\u597d (neural network \u7684 output \u8ddf\u771f\u6b63\u7684 label \u8d8a\u63a5\u8fd1\u8d8a\u597d) smooth S \u8d8a\u5c0f\u8d8a\u597d (neural network \u7684 output\uff0c\u4e0d\u7ba1\u662f labeled \u8fd8\u662f unlabeled\uff0c\u90fd\u8981\u7b26\u5408 Smoothness Assumption \u7684\u5047\u8bbe) \u5177\u4f53\u8bad\u7ec3\u7684\u65f6\u5019\uff0c\u4e0d\u4e00\u5b9a\u53ea\u5c40\u9650\u4e8e neural network \u7684 output \u8981 smooth\uff0c\u53ef\u4ee5\u5bf9\u4e2d\u95f4\u4efb\u610f\u4e00\u4e2a hidden layer \u52a0\u4e0a smooth \u7684\u9650\u5236 Better Representation \u00b6 Better Representation \u7684\u7cbe\u795e\u662f\uff0c\u53bb\u829c\u5b58\u83c1\uff0c\u5316\u7e41\u4e3a\u7b80 \u5c31\u662f\u627e\u5230\u4e00\u4e2a data \u7684 feature \u6838\u5fc3 \u7b97\u6cd5\u5177\u4f53\u601d\u8def\u548c\u5185\u5bb9\u5230 unsupervised learning \u7684\u65f6\u5019\u518d\u4ecb\u7ecd","title":"Semi Supervised Learning"},{"location":"ML/7_Semi-supervised%20Learning/#semi-supervised-learning","text":"\u534a\u76d1\u7763\u5b66\u4e60\uff1a Semi-supervised Learning for Generative Model Low-density Separation Assumption\uff1a\u975e\u9ed1\u5373\u767d Smoothness Assumption\uff1a\u8fd1\u6731\u8005\u8d64\uff0c\u8fd1\u58a8\u8005\u9ed1 Better Representation\uff1a\u53bb\u829c\u5b58\u83c1\uff0c\u5316\u7e41\u4e3a\u7b80","title":"Semi-supervised Learning"},{"location":"ML/7_Semi-supervised%20Learning/#introduction","text":"\u4e3a\u4ec0\u4e48\u8981\u505a Semi-supervised Learning\uff0c\u56e0\u4e3a data \u7684 input \u5f88\u5bb9\u6613\u5f97\u5230\uff0c\u4f46\u662f\u5f88\u591a\u90fd\u7f3a output\uff08label\uff09","title":"Introduction"},{"location":"ML/7_Semi-supervised%20Learning/#supervised-learning","text":"\\((x^r,\\hat y^r)_{r=1}^R\\) \u200b \u5728 training data \u4e2d\u6bcf\u4e00\u7ec4 data \u7684 input \\(x\\) \u200b \u90fd\u6709 output \\(y\\) \u200b\u200b\u200b\u200b","title":"Supervised Learning"},{"location":"ML/7_Semi-supervised%20Learning/#semi-supervised-learning_1","text":"\\(\\{(x^r,\\hat y^r)\\}_{r=1}^R\\} + \\{x^u\\}_{u=R}^{R+U}\\) \u200b Supervised Learning \u52a0\u4e0a\u6ca1\u6709 output \u7684 data\uff0c\u800c\u4e14\u901a\u5e38 \\(U>>R\\) \u200b\u200b \u200b Semi-supervised learning\u5206\u4e3a\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\uff1a Transductive Learning\uff1aunlabeled data is the testing data \u5373\uff0c\u628a testing data \u5f53\u505a\u65e0\u6807\u7b7e\u7684 training data \u4f7f\u7528\uff0c\u9002\u7528\u4e8e\u4e8b\u5148\u5df2\u7ecf\u77e5\u9053 testing data \u7684\u60c5\u51b5 (\u6bd4\u5982\u4e00\u4e9b\u6bd4\u8d5b\u7684\u65f6\u5019\uff0c\u53ea\u77e5\u9053 data \u7684 feature \u800c\u4e0d\u77e5\u9053 output) Inductive Learning\uff1aunlabeled data is not the testing data \u5373\uff0c\u4e0d\u628a testing data \u7684 feature \u62ff\u53bb\u7ed9\u673a\u5668\u8bad\u7ec3\uff0c\u9002\u7528\u4e8e\u4e8b\u5148\u5e76\u4e0d\u77e5\u9053 testing data \u7684\u60c5\u51b5 (\u66f4\u666e\u904d\u7684\u60c5\u51b5)","title":"Semi-supervised Learning"},{"location":"ML/7_Semi-supervised%20Learning/#why-semi-supervised-learning-help","text":"unlabelled data \u867d\u7136\u53ea\u6709 input \u4f46\u5b83\u7684\u5206\u5e03\u53ef\u4ee5\u7ed9\u6211\u4eec\u4e00\u4e9b\u4fe1\u606f\uff0c\u4ee5\u4e0b\u4e3a\u4f8b semi-supervised learning \u7684\u4f7f\u7528\u5f80\u5f80\u4f34\u968f\u7740\u5047\u8bbe\uff0c\u800c\u8be5\u5047\u8bbe\u7684\u5408\u7406\u4e0e\u5426\uff0c\u51b3\u5b9a\u4e86\u7ed3\u679c\u7684\u597d\u574f\u7a0b\u5ea6\uff1b\u6bd4\u5982\u4e0a\u56fe\u4e2d\u7684 unlabeled data\uff0c\u5b83\u663e\u7136\u662f\u4e00\u53ea\u72d7\uff0c\u800c\u7279\u5f81\u5206\u5e03\u5374\u4e0e\u732b\u88ab\u5212\u5206\u5728\u4e86\u4e00\u8d77\uff0c\u5f88\u53ef\u80fd\u662f\u7531\u4e8e\u8fd9\u4e24\u5f20\u56fe\u7247\u7684\u80cc\u666f\u90fd\u662f\u7eff\u8272\u5bfc\u81f4\u7684\uff0c\u56e0\u6b64\u5047\u8bbe\u662f\u5426\u5408\u7406\u663e\u5f97\u81f3\u5173\u91cd\u8981","title":"Why semi-supervised learning help\uff1f"},{"location":"ML/7_Semi-supervised%20Learning/#generative-model","text":"\u5728\u76d1\u7763\u5b66\u4e60\u4e2d\u6211\u4eec\u5b66\u4e60\u8fc7\u901a\u8fc7\u540e\u9a8c\u6982\u7387\u5f97\u51fa x \u6240\u5c5e\u7684\u7c7b\u522b \u4e0b\u56fe\u5b9e\u7ebf\u662f Supervised Generative Model \u5f97\u51fa\u7684\u7ed3\u679c\uff0c\u7eff\u8272\u7684\u70b9\u662f\u6ca1\u6709 label \u7684 data\uff0c\u663e\u7136\u539f\u5148\u7684 \\(u,\\Sigma\\) \u662f\u4e0d\u5408\u7406\u7684 \u4ee5\u4e0a\u662f\u76f4\u89c2\u4e0a\u7684\u89e3\u91ca\uff0c\u63a5\u4e0b\u6765\u8fdb\u884c\u5177\u4f53\u63a8\u5bfc (\u5047\u8bbe\u505a\u4e8c\u5143\u5206\u7c7b)\uff1a \u5229\u7528\u6709 label \u7684 data \u521d\u59cb\u5316\u4e00\u7ec4\u53c2\u6570\uff1a \\(\\theta=\\{P(C_1),P(C_2),u^1,u^2,\\Sigma\\}\\) step1\uff1a\u5229\u7528\u4e0a\u9762\u521d\u59cb model \u8ba1\u7b97\u6bcf\u4e00\u7b14 unlabeled data \\(x^u\\) \u5c5e\u4e8e class1 \u7684\u6982\u7387 \\(P_{\\theta}(C_1|x^u)\\) step2\uff1aupdate model \u5982\u679c\u4e0d\u8003\u8651 unlabeled data\uff0c\u5219\u5148\u9a8c\u6982\u7387\u663e\u7136\u4e3a\u5c5e\u4e8e class1 \u7684\u6837\u672c\u70b9\u6570 \\(N_1\\) / \u603b\u7684\u6837\u672c\u70b9\u6570 \\(N\\) \uff0c\u5373 \\(P(C_1)=\\frac{N_1}{N}\\) \u200b \u800c\u8003\u8651 unlabeled data \u65f6\uff0c\u5206\u5b50\u8fd8\u8981\u52a0\u4e0a\u6240\u6709 unlabeled data \u5c5e\u4e8e class1 \u7684\u6982\u7387\u548c\uff0c\u6b64\u65f6\u5b83\u4eec\u88ab\u770b\u4f5c\u5c0f\u6570\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u6309\u7167\u6982\u7387\u4e00\u90e8\u5206\u5c5e\u4e8e \\(C_1\\) \uff0c\u4e00\u90e8\u5206\u5c5e\u4e8e \\(C_2\\) $$ P(C_1)=\\frac{N_1+\\sum_{x^u}P(C_1|x^u)}{N} $$ \u540c\u7406\uff0c\u5bf9\u4e8e\u5747\u503c\uff0c\u539f\u5148\u7684 mean \\(u_1=\\frac{1}{N_1}\\sum\\limits_{x^r\\in C_1} x^r\\) \u52a0\u4e0a\u6839\u636e\u6982\u7387\u5bf9 \\(x^u\\) \u6c42\u548c\u518d\u5f52\u4e00\u5316\u7684\u7ed3\u679c\u5373\u53ef $$ u_1=\\frac{1}{N_1}\\sum\\limits_{x^r\\in C_1} x^r+\\frac{1}{\\sum_{x^u}P(C_1|x^u)}\\sum\\limits_{x^u}P(C_1|x^u)x^u $$ \u5269\u4f59\u7684\u53c2\u6570\u540c\u7406\uff0c\u63a5\u4e0b\u6765\u5c31\u6709\u4e86\u4e00\u7ec4\u65b0\u7684\u53c2\u6570 \\(\\theta'\\) \uff0c\u4e8e\u662f\u56de\u5230 step1->step2->step1\u5faa\u73af \u7406\u8bba\u4e0a\u8be5\u65b9\u6cd5\u4fdd\u8bc1\u662f\u53ef\u4ee5\u6536\u655b\u7684\uff0c\u800c\u4e00\u5f00\u59cb\u7ed9 \\(\\theta\\) \u7684\u521d\u59cb\u503c\u4f1a\u5f71\u54cd\u6536\u655b\u7684\u7ed3\u679c\uff0c\u7c7b\u4f3c gradient descent \u4e0a\u8ff0\u7684 step1 \u5c31\u662f EM algorithm \u91cc\u7684 E\uff0cstep2 \u5219\u662f M \u4ee5\u4e0a\u7684\u63a8\u5bfc\u57fa\u4e8e\u7684\u57fa\u672c\u601d\u60f3\u662f\uff0c\u628a unlabeled data \\(x^u\\) \u770b\u6210\u662f\u53ef\u4ee5\u5212\u5206\u7684\uff0c\u4e00\u90e8\u5206\u5c5e\u4e8e \\(C_1\\) \uff0c\u4e00\u90e8\u5206\u5c5e\u4e8e \\(C_2\\) \uff0c\u6b64\u65f6\u5b83\u7684\u6982\u7387 \\(P_{\\theta}(x^u)=P_{\\theta}(x^u|C_1)P(C_1)+P_{\\theta}(x^u|C_2)P(C_2)\\) \uff0c\u5b9e\u9645\u4e0a\u6211\u4eec\u5728\u5229\u7528\u6781\u5927\u4f3c\u7136\u51fd\u6570\u66f4\u65b0\u53c2\u6570\u7684\u65f6\u5019\uff0c\u5c31\u5229\u7528\u4e86\u8be5\u62c6\u5206\u7684\u7ed3\u679c\uff1a \\[ max:logL(\\theta)=\\sum\\limits_{x^r} logP_{\\theta}(x^r)+\\sum\\limits_{x^u}logP_{\\theta}(x^u) \\] \u4f46\u8fd9\u4e2a\u5f0f\u5b50\u4e0d\u662f convex\uff0c\u6240\u4ee5\u89e3\u7684\u65f6\u5019\u8981\u7528 EM algorithm\uff0c\u5176\u5b9e\u5c31\u662f\u8981 iterative \u7684\u53bb solve\uff0c\u5c31\u662f\u4e0a\u9762\u7684 step EM\u7b97\u6cd5\u8be6\u89e3 - \u77e5\u4e4e","title":"Generative Model"},{"location":"ML/7_Semi-supervised%20Learning/#low-density-separation-assumption","text":"\u63a5\u4e0b\u6765\u4ecb\u7ecd\u4e00\u79cd\u65b0\u7684\u65b9\u6cd5\uff0c\u5b83\u57fa\u4e8e\u7684\u5047\u8bbe\u662f Low-density separation \u901a\u4fd7\u6765\u8bb2\uff0c\u5c31\u662f\u8fd9\u4e2a\u4e16\u754c\u662f\u975e\u9ed1\u5373\u767d\u7684\uff0c\u5728\u4e24\u4e2a class \u7684\u4ea4\u754c\u5904 data \u7684\u5bc6\u5ea6 (density)\u662f\u5f88\u4f4e\u7684\uff0c\u5b83\u4eec\u4e4b\u95f4\u4f1a\u6709\u4e00\u9053\u660e\u663e\u7684\u9e3f\u6c9f","title":"Low-density Separation Assumption"},{"location":"ML/7_Semi-supervised%20Learning/#self-training","text":"\u662f low-density separation \u6700\u5177\u4ee3\u8868\u6027\u4e5f\u6700\u7b80\u5355\u7684\u65b9\u6cd5 \u4ece labelled data \u4e2d\u8bad\u7ec3\u4e00\u4e2a model\uff08\u8bad\u7ec3\u65b9\u6cd5\u6ca1\u6709\u9650\u5236\uff09 \u7136\u540e\u7528\u8be5 model \u53bb\u5bf9 unlabelled data \u7b97\u51fa label\uff0c\u4e5f\u53eb\u505a pseudo label \u4ece unlabelled data \u4e2d\u9009\u51fa\u4e00\u4e9b data \u6dfb\u52a0\u5230 labelled data \u4e2d\uff0c\u5982\u4f55\u6311\u9009\u9700\u8981\u81ea\u5df1\u8bbe\u8ba1 \u56de\u5934\u518d\u53bb\u8bad\u7ec3 \u6ce8\uff1a\u8be5\u65b9\u6cd5\u5bf9 Regression \u662f\u4e0d\u9002\u7528\u7684\uff0c\u56e0\u4e3a Regression output \u662f\u4e00\u4e2a\u6570\u91cf \u5b9e\u9645\u4e0a\uff0c\u8be5\u65b9\u6cd5\u4e0e\u4e4b\u524d\u63d0\u5230\u7684 generative model \u8fd8\u662f\u633a\u50cf\u7684\uff0c\u533a\u522b\u5728\u4e8e\uff1a Self Training\u4f7f\u7528\u7684\u662f hard label\uff1a\u5047\u8bbe\u4e00\u7b14data\u5f3a\u5236\u5c5e\u4e8e\u67d0\u4e2a class Generative Model\u4f7f\u7528\u7684\u662f soft label\uff1a\u5047\u8bbe\u4e00\u7b14 data \u53ef\u4ee5\u6309\u7167\u6982\u7387\u5212\u5206\uff0c\u4e0d\u540c\u90e8\u5206\u5c5e\u4e8e\u4e0d\u540c class \u5728 neural network \u91cc\u4f7f\u7528 soft label \u662f\u6ca1\u6709\u7528\u7684\uff0c\u4e22\u8fdb\u53bb\u91cd\u65b0\u8bad\u7ec3\u540e\u4f9d\u65e7\u662f\u540c\u6837\u7684\u53c2\u6570\uff0c\u6240\u4ee5 low density separation \u5c31\u662f\u901a\u8fc7\u5f3a\u5236\u5206\u7c7b\u6765\u63d0\u5347\u5206\u7c7b\u6548\u679c\u7684\u65b9\u6cd5","title":"Self Training"},{"location":"ML/7_Semi-supervised%20Learning/#entropy-based-regularization","text":"hard label \u7684\u65b9\u5f0f\u6709\u4e9b\u592a\u6b66\u65ad\u4e86\uff0c\u800c entropy-based regularization \u5219\u505a\u4e86\u76f8\u5e94\u7684\u6539\u8fdb\uff1a \\(y^u=f^*_{\\theta^*}(x^u)\\) \uff0c\u5176\u4e2d \\(y^u\\) \u200b\u200b \u662f\u4e00\u4e2a \u6982\u7387\u5206\u5e03 (distribution) \uff0c\u5982\u679c\u901a\u8fc7 entropy-based regularization \u5f97\u5230\u7684\u5206\u5e03\u96c6\u4e2d\u5728\u67d0\u4e2a class \u4e0a\u7684\u8bdd\uff0c\u90a3\u8fd9\u4e2a model \u5c31\u662f\u597d\u7684\uff0c\u800c\u5982\u679c\u5206\u5e03\u662f\u6bd4\u8f83\u5206\u6563\u7684\uff0c\u90a3\u8fd9\u4e2a model \u5c31\u662f\u4e0d\u597d\u7684 \u5229\u7528\u4e00\u4e2a output \u7684 distribution \u7684 entropy \u6765\u544a\u8bc9\u4f60\u5b83\u7684\u96c6\u4e2d\u7a0b\u5ea6\uff1a $$ E(y^u)=-\\sum\\limits_{m=1}^5 y_m^u ln(y_m^u) $$ entropy \u8d8a\u5927\uff0cdistribution \u5c31\u8d8a\u5206\u6563\uff0centropy \u8d8a\u5c0f\uff0cdistribution \u5c31\u8d8a\u96c6\u4e2d \u6211\u4eec\u7684\u76ee\u6807\u662f\u5728 labeled data \u4e0a\u5206\u7c7b\u8981\u6b63\u786e\uff0c\u5728 unlabeled data \u4e0a\uff0coutput \u7684 entropy \u8981\u8d8a\u5c0f\u8d8a\u597d\uff0c\u6b64\u65f6\u5c31\u8981\u4fee\u6539 loss function $$ min:L=\\sum\\limits_{x^r} C(y^r,\\hat y^r) + \\lambda \\sum\\limits_{x^u} E(y^u) $$ labeled data \u7684 Cross Entropy \u548c unlabeled data \u7684 entropy \u52a0\u6743\u76f8\u52a0\uff08\u6743\u503c\u9700\u8981\u81ea\u5df1\u5b9a\uff09 \u53ef\u4ee5\u53d1\u73b0\u8be5\u5f0f\u957f\u5f97\u5f88\u50cf regularization\uff0c\u8fd9\u4e5f\u5c31\u662f entropy regularization \u7684\u540d\u79f0\u7531\u6765","title":"Entropy-based Regularization"},{"location":"ML/7_Semi-supervised%20Learning/#semi-supervised-svm","text":"SVM \u8981\u505a\u7684\u662f\uff0c\u7ed9\u4f60\u4e24\u4e2a class \u7684 data\uff0c\u53bb\u627e\u4e00\u4e2a boundary\uff1a \u8981\u6709\u6700\u5927\u7684 margin\uff0c\u8ba9\u8fd9\u4e24\u4e2a class \u5206\u7684\u8d8a\u5f00\u8d8a\u597d \u8981\u6709\u6700\u5c0f\u7684\u5206\u7c7b\u9519\u8bef \u5bf9\u4e8e unlabelled data \u5219\u7a77\u5c3d\u6240\u6709\u53ef\u80fd\u7684 label\uff0c\u7136\u540e\u5bf9\u6bcf\u4e00\u79cd\u53ef\u80fd\u7684\u7ed3\u679c\u90fd\u53bb\u7b97 SVM\uff0c\u518d\u627e\u51fa\u53ef\u4ee5\u8ba9 margin \u6700\u5927\uff0c\u540c\u65f6\u53c8 minimize error \u7684\u90a3\u79cd\u60c5\u51b5 SVM paper\uff1aThorsten Joachims, \u201d Transductive Inference for Text Classification using Support Vector Machines\u201d, ICML, 1999 paper \u4e2d\u7ed9\u51fa\u4e86 n \u5f88\u5927\u7684\u65f6\u5019\u7684\u89e3\u51b3\u65b9\u6cd5\uff0c\u601d\u60f3\u662f\uff1a\u4e00\u5f00\u59cb\u4f60\u5148\u5f97\u5230\u4e00\u4e9b label\uff0c\u7136\u540e\u6bcf\u6b21\u6539\u4e00\u7b14 unlabeled data \u7684 label\uff0c\u770b\u770b\u53ef\u4e0d\u53ef\u4ee5\u8ba9\u4f60\u7684 objective function \u53d8\u5927\uff0c\u5982\u679c\u53d8\u5927\u5c31\u53bb\u6539\u53d8\u8be5 label","title":"Semi-supervised SVM"},{"location":"ML/7_Semi-supervised%20Learning/#smoothness-assumption","text":"","title":"Smoothness Assumption"},{"location":"ML/7_Semi-supervised%20Learning/#concepts","text":"smoothness assumption \u7684\u57fa\u672c\u7cbe\u795e\u662f\uff1a\u8fd1\u6731\u8005\u8d64\uff0c\u8fd1\u58a8\u8005\u9ed1 \u7c97\u7cd9\u7684\u5b9a\u4e49\u662f\u76f8\u4f3c\u7684 x \u5177\u6709\u76f8\u540c\u7684 \\(\\hat y\\) \uff0c\u7cbe\u786e\u7684\u5b9a\u4e49\u662f\uff1a x\u7684\u5206\u5e03\u662f\u4e0d\u5e73\u5747\u7684 \u5982\u679c \\(x^1\\) \u200b \u548c \\(x^2\\) \u200b \u5728\u4e00\u4e2a high density region \u4e0a\u5f88\u63a5\u8fd1\u7684\u8bdd\uff0c\u90a3\u4e48 \\(\\hat y^1\\) \u200b\u548c \\(\\hat y^2\\) \u200b\u5c31\u662f\u76f8\u540c\u7684 \u4e5f\u5c31\u662f\u8fd9\u4e24\u4e2a\u70b9\u53ef\u4ee5\u5728\u6837\u672c\u70b9\u9ad8\u5bc6\u5ea6\u96c6\u4e2d\u5206\u5e03\u7684\u533a\u57df\u5757\u4e2d\u6709\u4e00\u6761\u53ef\u8fde\u63a5\u7684\u8def\u5f84\uff0c\u5373 connected by a high density path","title":"Concepts"},{"location":"ML/7_Semi-supervised%20Learning/#digits-detection","text":"\u624b\u5199\u6570\u5b57\u8fa8\u8bc6\u4e3a\u4f8b\uff0c\u663e\u7136\u6700\u53f3\u4fa7\u7684 2 \u548c 3 \u5728 pixel \u4e0a\u4f1a\u66f4\u63a5\u8fd1\u4e00\u4e9b\uff1b\u4f46\u5982\u679c\u628a\u6240\u6709\u8fde\u7eed\u53d8\u5316\u7684 2 \u653e\u8fdb\u6765\uff0c\u90a3\u5b83\u4eec\u5176\u5b9e\u90fd\u662f 2 \u4eba\u8138\u7684\u8fc7\u6e21\u6570\u636e\u4e5f\u540c\u7406","title":"digits detection"},{"location":"ML/7_Semi-supervised%20Learning/#file-classification","text":"Smoothness Assumption \u5728\u6587\u4ef6\u5206\u7c7b\u4e0a\u662f\u975e\u5e38\u6709\u7528\u7684 \u5047\u8bbe\u5bf9\u5929\u6587\u5b66 (astronomy) \u548c\u65c5\u884c (travel) \u7684\u6587\u7ae0\u8fdb\u884c\u5206\u7c7b\uff0c\u5b83\u4eec\u5404\u81ea\u6709\u4e13\u5c5e\u7684\u8bcd\u6c47\uff0c\u6b64\u65f6\u5982\u679c unlabeled data \u4e0e label data \u7684\u8bcd\u6c47\u662f\u76f8\u540c\u6216\u91cd\u5408 (overlap) \u7684\uff0c\u90a3\u4e48\u5c31\u5f88\u5bb9\u6613\u5206\u7c7b\uff1b\u4f46\u5728\u771f\u5b9e\u7684\u60c5\u51b5\u4e0b\uff0cunlabeled data \u548c labeled data \u4e4b\u95f4\u53ef\u80fd\u6ca1\u6709\u4efb\u4f55\u91cd\u590d\u7684 words\uff0c\u56e0\u4e3a\u4e16\u754c\u4e0a\u7684\u8bcd\u6c47\u592a\u591a\u4e86\uff0csparse \u7684\u5206\u5e03\u5f88\u96be\u4f1a\u4f7f overlap \u53d1\u751f \u4f46\u5982\u679cunlabeled data\u8db3\u591f\u591a\uff0c\u5c31\u4f1a\u4ee5\u4e00\u79cd\u76f8\u4f3c\u4f20\u9012\u7684\u5f62\u5f0f\uff0c\u5efa\u7acb\u8d77\u6587\u6863\u4e4b\u95f4\u76f8\u4f3c\u7684\u6865\u6881","title":"file classification"},{"location":"ML/7_Semi-supervised%20Learning/#cluster-and-then-label","text":"\u5728\u5177\u4f53\u5b9e\u73b0\u4e0a\uff0c\u6709\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u662f cluster and then label\uff0c\u4e5f\u5c31\u662f\u5148\u628a data \u5206\u6210\u51e0\u4e2a cluster \u540e\u518d\u53bb train\uff0c\u4f46\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u4e00\u5b9a\u4f1a\u5f97\u5230\u597d\u7684\u7ed3\u679c\uff0c\u56e0\u4e3a\u5b83\u7684\u5047\u8bbe\u662f\u4f60\u53ef\u4ee5\u628a\u540c\u4e00\u4e2a class \u7684\u6837\u672c\u70b9 cluster \u5728\u4e00\u8d77\uff0c\u800c\u8fd9\u5176\u5b9e\u662f\u6ca1\u90a3\u4e48\u5bb9\u6613\u7684\uff0c\u6bd4\u5982 \u5bf9\u56fe\u50cf\u7684\u5212\u5206","title":"cluster and then label"},{"location":"ML/7_Semi-supervised%20Learning/#graph-based-approach","text":"\u4e3a\u4e86\u89e3\u51b3\u96be\u4ee5\u5212\u5206\u7684\u95ee\u9898\uff0c\u63a5\u4e0b\u6765\u5f15\u5165 Graph Structure \u6765\u8868\u8fbe connected by a high density path \u8fd9\u4ef6\u4e8b \u628a\u6240\u6709\u7684 data points \u90fd\u5efa\u6210\u4e00\u4e2a graph\uff0c\u6709\u65f6\u5019\u5efa\u7acb vertex \u4e4b\u95f4\u7684\u5173\u7cfb\u662f\u6bd4\u8f83\u5bb9\u6613\u7684\uff0c\u6bd4\u5982\u7f51\u9875\u4e4b\u95f4\u7684\u94fe\u63a5\u5173\u7cfb\u3001\u8bba\u6587\u4e4b\u95f4\u7684\u5f15\u7528\u5173\u7cfb\uff1b\u4f46\u6709\u65f6\u5019\u9700\u8981\u4f60\u81ea\u5df1\u53bb\u5bfb\u627e vertex \u4e4b\u95f4\u7684\u5173\u7cfb graph \u7684\u597d\u574f\uff0c\u5bf9\u7ed3\u679c\u8d77\u7740\u81f3\u5173\u91cd\u8981\u7684\u5f71\u54cd\uff0c\u800c\u5982\u4f55 build graph \u5374\u662f\u4e00\u4ef6 heuristic \u7684\u4e8b\u60c5\uff0c\u9700\u8981\u51ed\u7740\u7ecf\u9a8c\u548c\u76f4\u89c9\u6765\u505a \u9996\u5148\u5b9a\u4e49\u4e24\u4e2aobject \\(x^i,x^j\\) \u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6 \\(s(x^i, x^j)\\) \u7b97\u5b8c\u76f8\u4f3c\u5ea6\u540e\uff0c\u5c31\u53ef\u4ee5\u5efa graph \u4e86\uff0c\u65b9\u5f0f\u6709\u5f88\u591a\u79cd\uff1a k nearest neighbor\uff1ak \u90bb\u8fd1\u6cd5\uff0c\u4e0e\u5468\u56f4\u6700\u63a5\u8fd1\u7684 k \u4e2a\u70b9\u8fde\u63a5 e-neighborhood\uff1a\u6bcf\u4e2a point \u4e0e\u76f8\u4f3c\u5ea6\u8d85\u8fc7\u67d0\u4e2a\u7279\u5b9a threshold e \u7684\u70b9\u76f8\u8fde \u9664\u4e86\u7ed9\u6837\u672c\u70b9\u4e4b\u95f4\u8fde\u63a5\u4e0e\u4e0d\u8fde\u63a5\u7684 binary \u7684\u60c5\u51b5\u5916 \uff0c\u8fd8\u53ef\u4ee5\u7ed9 Edge \u7279\u5b9a\u7684 weight\uff0c\u8ba9\u5b83\u4e0e\u76f8\u4f3c\u5ea6 \\(s(x^i,x^j)\\) \u200b \u6210\u6b63\u6bd4 \u5efa\u8bae\u7528 RBM function \u6765\u786e\u5b9a\u76f8\u4f3c\u5ea6\uff1a \\(s(x^i,x^j)=e^{-\\gamma||x^i-x^j||^2 }\\) \u200b \u8fd9\u91cc \\(x^i,x^j\\) \u200b\u5747\u4e3a vector\uff0c\u8ba1\u7b97\u5b83\u4eec\u7684 Euclidean Distance (\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb)\uff0c\u52a0\u4e0a\u53c2\u6570\u540e\u518d\u53bb exponential \u81f3\u4e8e\u52a0 exponential\uff0c\u7ecf\u9a8c\u4e0a\u6765\u8bf4\u901a\u5e38\u662f\u53ef\u4ee5\u5e2e\u52a9\u63d0\u5347 performance\u7684\uff0c\u5728\u8fd9\u91cc\u53ea\u6709\u5f53 \\(x^i,x^j\\) \u200b \u975e\u5e38\u63a5\u8fd1\u7684\u65f6\u5019\uff0csingularity \u624d\u4f1a\u5927\uff1b\u53ea\u8981\u8ddd\u79bb\u7a0d\u5fae\u8fdc\u4e00\u70b9\uff0csingularity \u5c31\u4f1a\u4e0b\u964d\u5f97\u5f88\u5feb\uff0c\u53d8\u5f97\u5f88\u5c0f \u4f7f\u7528 exponential \u7684 RBM function \u53ef\u4ee5\u505a\u5230\u53ea\u6709\u975e\u5e38\u8fd1\u7684\u4e24\u4e2a\u70b9\u624d\u80fd\u76f8\u8fde\uff0c\u7a0d\u5fae\u8fdc\u4e00\u70b9\u5c31\u65e0\u6cd5\u76f8\u8fde\u7684\u6548\u679c graph-based approach \u9700\u8981\u6536\u96c6\u5230\u7684 data \u8db3\u591f\u591a\uff0c\u5426\u5219\u53ef\u80fd\u4f20\u9012\u5230\u4e00\u534a\uff0cgraph \u5c31\u65ad\u6389\u4e86\uff0cinformation \u7684\u4f20\u9012\u5c31\u5931\u6548\u4e86 \u4ecb\u7ecd\u5b8c\u4e86\u5982\u4f55\u5b9a\u6027\u4f7f\u7528 graph\uff0c\u63a5\u4e0b\u6765\u4ecb\u7ecd\u4e00\u4e0b\u5982\u4f55\u5b9a\u91cf\u4f7f\u7528 graph\uff0c\u5b9a\u4e49\u4e00\u4e2a smoothness \u6765\u8868\u793a\u6709\u591a\u7b26\u5408 Smoothness Assumption \u8fd9\u4e2a\u5047\u8bbe \u5b9a\u91cf\u7684\u4f7f\u7528\u65b9\u5f0f\u662f\u5b9a\u4e49 label \u7684 smoothness\uff0c\u4e0b\u56fe\u4e2d\uff0cedge \u4e0a\u7684\u6570\u5b57\u662f weight\uff0c \\(x^i\\) \u662fdata\uff0c \\(y^i\\) \u662f label\uff0c\u8ba1\u7b97 smoothness \u7684\u65b9\u5f0f\u4e3a\uff1a $$ S=\\frac{1}{2}\\sum\\limits_{i,j} w_{i,j}(y^i-y^j)^2 $$ \u6211\u4eec\u671f\u671b smooth \u7684\u503c \u8d8a\u5c0f\u8d8a\u597d \u5982\u679c\u628a labeled data \u548c unlabeled data \u7684 y \u7ec4\u6210\u4e00\u4e2a (R+U) dim vector\uff0c\u5373 $$ y=\\left [\\begin{matrix} ...y^i...y^j \\end{matrix} \\right ]^T $$ \u4e8e\u662f smooth \u53ef\u4ee5\u6539\u5199\u4e3a\uff1a $$ S=\\frac{1}{2}\\sum\\limits_{i,j} w_{i,j}(y^i-y^j)^2=y^TLy $$ \u5176\u4e2d L \u4e3a (R+U)\u00d7(R+U) matrix\uff0c\u79f0\u4e3a Graph Laplacian \uff0c \u5b9a\u4e49\u4e3a \\(L=D-W\\) W\uff1a\u628a data point \u4e24\u4e24\u4e4b\u95f4 weight \u7684\u5173\u7cfb\u5efa\u6210 matrix\uff0c\u4ee3\u8868\u4e86 \\(x^i\\) \u4e0e \\(x^j\\) \u4e4b\u95f4\u7684weight\u503c D\uff1a\u628a W \u7684\u6bcf\u4e00\u4e2a row \u4e0a\u7684\u503c\u52a0\u8d77\u6765\u653e\u5728\u8be5\u884c\u5bf9\u5e94\u7684 diagonal \u4e0a\u5373\u53ef \u5bf9 \\(S=y^TLy\\) \u6765\u8bf4\uff0cy \u662f label\uff0c\u662f neural network \u7684 output\uff0c\u53d6\u51b3\u4e8e neural network \u7684parameters\uff0c\u56e0\u6b64\u8981\u5728\u539f\u6765\u4ec5\u9488\u5bf9 labeled data \u7684 loss function \u4e2d\u52a0\u4e0a\u8fd9\u4e00\u9879\uff0c\u5f97\u5230\uff1a $$ L=\\sum\\limits_{x^r}C(y^r,\\hat y^r) + \\lambda S $$ \\(\\lambda S\\) \u200b\u200b \u5b9e\u9645\u4e0a\u4e5f\u662f\u4e00\u4e2a regularization \u8bad\u7ec3\u76ee\u6807\uff1a labeled data \u7684 cross entropy \u8d8a\u5c0f\u8d8a\u597d (neural network \u7684 output \u8ddf\u771f\u6b63\u7684 label \u8d8a\u63a5\u8fd1\u8d8a\u597d) smooth S \u8d8a\u5c0f\u8d8a\u597d (neural network \u7684 output\uff0c\u4e0d\u7ba1\u662f labeled \u8fd8\u662f unlabeled\uff0c\u90fd\u8981\u7b26\u5408 Smoothness Assumption \u7684\u5047\u8bbe) \u5177\u4f53\u8bad\u7ec3\u7684\u65f6\u5019\uff0c\u4e0d\u4e00\u5b9a\u53ea\u5c40\u9650\u4e8e neural network \u7684 output \u8981 smooth\uff0c\u53ef\u4ee5\u5bf9\u4e2d\u95f4\u4efb\u610f\u4e00\u4e2a hidden layer \u52a0\u4e0a smooth \u7684\u9650\u5236","title":"Graph-based Approach"},{"location":"ML/7_Semi-supervised%20Learning/#better-representation","text":"Better Representation \u7684\u7cbe\u795e\u662f\uff0c\u53bb\u829c\u5b58\u83c1\uff0c\u5316\u7e41\u4e3a\u7b80 \u5c31\u662f\u627e\u5230\u4e00\u4e2a data \u7684 feature \u6838\u5fc3 \u7b97\u6cd5\u5177\u4f53\u601d\u8def\u548c\u5185\u5bb9\u5230 unsupervised learning \u7684\u65f6\u5019\u518d\u4ecb\u7ecd","title":"Better Representation"},{"location":"ML/8_Unsupervised%20Learning%20Word%20Embedding/","text":"Unsupervised Learning: Word Embedding \u00b6 Word Embedding\uff1a\u8bcd\u5d4c\u5165 \u57fa\u4e8e\u964d\u7ef4\u601d\u60f3\u63d0\u4f9b\u4e86 count-based \u548c prediction-based \u4e24\u79cd\u65b9\u6cd5\uff0c\u5e76\u4ecb\u7ecd\u4e86\u8be5\u601d\u60f3\u5728\u673a\u5668\u95ee\u7b54\u3001\u673a\u5668\u7ffb\u8bd1\u3001\u56fe\u50cf\u5206\u7c7b\u3001\u6587\u6863\u5d4c\u5165\u7b49\u65b9\u9762\u7684\u5e94\u7528 PCA \u548c Word Embedding \u90fd\u662f\u7ebf\u6027\u964d\u7ef4 Introduction \u00b6 \u8bcd\u5d4c\u5165 (word embedding) \u662f\u964d\u7ef4\u7b97\u6cd5 (Dimension Reduction) \u7684\u5178\u578b\u5e94\u7528 \u90a3\u5982\u4f55\u7528 vector \u6765\u8868\u793a\u4e00\u4e2a word \u5462\uff1f 1-of-N Encoding \u00b6 \u6709 n \u4e2a\u5355\u8bcd\u5c31\u6709 n \u7ef4\uff0c\u6bcf\u4e2a\u5355\u8bcd\u90fd\u662f\u4e00\u4e2a\u5355\u4f4d\u5411\u91cf \u7f3a\u70b9\uff1a\u65e0\u6cd5\u5efa\u7acb\u8d77\u540c\u7c7b word \u7684\u8054\u7cfb Word Class \u00b6 \u5bf9\u540c\u6837\u6027\u8d28\u7684 word \u8fdb\u884c\u805a\u7c7b (clustering)\uff0c\u5212\u5206\u4e3a\u591a\u4e2a class\uff0c\u7528 word \u6240\u5c5e\u7684 class \u6765\u8868\u793a word \u7f3a\u70b9\uff1a\u4e0d\u540c class \u4e4b\u95f4\u7684\u8054\u7cfb\u65e0\u6cd5\u6709\u6548\u7684\u88ab\u8868\u8fbe Word Embedding \u00b6 \u5c06\u6240\u6709 word \u6295\u5f71\u5230\u4f4e\u7ef4\u7a7a\u95f4\uff0c\u8fd9\u4e2a\u7a7a\u95f4\u7684\u7ef4\u6570\u8fdc\u4f4e\u4e8e word \u7684\u4e2a\u6570 n \u7c7b\u4f3c\u8bed\u4e49 (semantic) \u7684\u8bcd\u6c47\uff0c\u5728\u8fd9\u4e2a word embedding \u7684\u6295\u5f71\u7a7a\u95f4\u4e0a\u662f\u6bd4\u8f83\u63a5\u8fd1\u7684\uff0c\u800c\u4e14\u8be5\u7a7a\u95f4\u91cc\u7684\u6bcf\u4e00\u7ef4\u90fd\u53ef\u80fd\u6709\u7279\u6b8a\u7684\u542b\u4e49 \u5047\u8bbe\u8bcd\u5d4c\u5165\u7684\u6295\u5f71\u7a7a\u95f4\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5219\u6a2a\u8f74\u4ee3\u8868\u4e86\u751f\u7269\u4e0e\u5176\u5b83\u4e1c\u897f\u4e4b\u95f4\u7684\u533a\u522b\uff0c\u800c\u7eb5\u8f74\u5219\u4ee3\u8868\u4e86\u4f1a\u52a8\u7684\u4e1c\u897f\u4e0e\u9759\u6b62\u7684\u4e1c\u897f\u4e4b\u95f4\u7684\u5dee\u522b word embedding \u662f\u4e00\u4e2a\u65e0\u76d1\u7763\u7684\u65b9\u6cd5 (unsupervised approach)\uff0c\u53ea\u8981\u8ba9\u673a\u5668\u9605\u8bfb\u5927\u91cf\u7684\u6587\u7ae0\uff0c\u5b83\u5c31\u53ef\u4ee5\u77e5\u9053\u6bcf\u4e00\u4e2a\u8bcd\u6c47 embedding \u4e4b\u540e\u7684\u7279\u5f81\u5411\u91cf\u5e94\u8be5\u957f\u4ec0\u4e48\u6837\u5b50 \u6211\u4eec\u7684\u4efb\u52a1\u5c31\u662f\u8bad\u7ec3\u4e00\u4e2a neural network\uff0cinput \u662f\u8bcd\u6c47\uff0coutput \u5219\u662f\u5b83\u6240\u5bf9\u5e94\u7684 word embedding vector\uff0c\u5b9e\u9645\u8bad\u7ec3\u7684\u65f6\u5019\u6211\u4eec\u53ea\u6709 data \u7684 input\uff0c\u8be5\u5982\u4f55\u89e3\u8fd9\u7c7b\u95ee\u9898\u5462\uff1f \u4e4b\u524d\u63d0\u5230\u8fc7\u4e00\u79cd\u57fa\u4e8e\u795e\u7ecf\u7f51\u7edc\u7684\u964d\u7ef4\u65b9\u6cd5\uff0cAuto-encoder\uff0c\u5c31\u662f\u8bad\u7ec3\u4e00\u4e2a model\uff0c\u8ba9\u5b83\u7684\u8f93\u5165\u7b49\u4e8e\u8f93\u51fa\uff0c\u53d6\u51fa\u4e2d\u95f4\u7684\u67d0\u4e2a\u9690\u85cf\u5c42\u5c31\u662f\u964d\u7ef4\u7684\u7ed3\u679c\uff0c\u81ea\u7f16\u7801\u7684\u672c\u8d28\u5c31\u662f\u901a\u8fc7\u81ea\u6211\u538b\u7f29\u548c\u89e3\u538b\u7684\u8fc7\u7a0b\u6765\u5bfb\u627e\u5404\u4e2a\u7ef4\u5ea6\u4e4b\u95f4\u7684\u76f8\u5173\u4fe1\u606f\uff1b\u4f46 word embedding \u8fd9\u4e2a\u95ee\u9898\u662f\u4e0d\u80fd\u7528 Auto-encoder \u6765\u89e3\u7684\uff0c\u56e0\u4e3a\u8f93\u5165\u7684\u5411\u91cf\u901a\u5e38\u662f 1-of-N \u7f16\u7801\uff0c\u5404\u7ef4\u65e0\u5173\uff0c\u5f88\u96be\u901a\u8fc7\u81ea\u7f16\u7801\u7684\u8fc7\u7a0b\u63d0\u53d6\u51fa\u4ec0\u4e48\u6709\u7528\u4fe1\u606f Word Embedding \u00b6 Basic idea \u00b6 \u601d\u60f3\u662f\u901a\u8fc7\u6bcf\u4e00\u4e2a\u8bcd\u6c47\u7684\u4e0a\u4e0b\u6587\u6765\u5f97\u5230\u5b83\u7684\u542b\u4e49 \u6bd4\u5982\uff1a\u201c\u9a6c\u82f1\u4e5d520\u5ba3\u8a93\u5c31\u804c\u201d\u3001\u201c\u8521\u82f1\u6587520\u5ba3\u8a93\u5c31\u804c\u201d\uff0c\u673a\u5668\u5c31\u53ef\u4ee5\u63a8\u6d4b\u9a6c\u82f1\u4e5d\u548c\u8521\u82f1\u6587\u4ee3\u8868\u7684\u540c\u6837\u7684\u4e1c\u897f \u600e\u4e48\u7528\u8fd9\u4e2a\u601d\u60f3\u6765\u627e\u51fa word embedding \u7684 vector \u5462\uff1f\u6709\u4e24\u79cd\u505a\u6cd5\uff1a Count based Prediction based Count based \u00b6 \u5047\u5982 \\(w_i\\) \u200b\u200b\u200b\u200b \u548c \\(w_j\\) \u200b\u200b\u200b \u200b\u8fd9\u4e24\u4e2a\u8bcd\u6c47\u5e38\u5e38\u5728\u540c\u4e00\u7bc7\u6587\u7ae0\u4e2d\u51fa\u73b0 (co-occur)\uff0c\u5b83\u4eec\u7684 word vector \u5206\u522b\u7528 \\(V(w_i)\\) \u200b\u200b\u200b\u200b \u548c \\(V(w_j)\\) \u200b\u200b\u200b\u200b \u6765\u8868\u793a\uff0c\u5219 \\(V(w_i)\\) \u200b\u200b\u200b\u200b \u548c \\(V(w_j)\\) \u200b\u200b\u200b\u200b\u4f1a\u6bd4\u8f83\u63a5\u8fd1 \u5047\u8bbe \\(N_{i,j}\\) \u662f \\(w_i\\) \u548c \\(w_j\\) \u8fd9\u4e24\u4e2a\u8bcd\u6c47\u5728\u76f8\u540c\u6587\u7ae0\u91cc\u540c\u65f6\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6211\u4eec\u5e0c\u671b\u5b83\u4e0e \\(V(w_i)\\cdot V(w_j)\\) \u200b\u200b \u7684\u5185\u79ef\u8d8a\u63a5\u8fd1\u8d8a\u597d\uff0c\u8fd9\u4e2a\u601d\u60f3\u548c\u4e4b\u524d\u7684\u6587\u7ae0\u4e2d\u63d0\u5230\u7684\u77e9\u9635\u5206\u89e3 (matrix factorization) \u7684\u601d\u60f3\u5176\u5b9e\u662f\u4e00\u6837\u7684 \\[ N_{i,j}\\approx V(w_i)\\cdot V(w_j) \\] \u8fd9\u79cd\u65b9\u6cd5\u6709\u4e00\u4e2a\u5f88\u4ee3\u8868\u6027\u7684\u4f8b\u5b50\u662f Glove Vector (paper) Prediction based \u00b6 how to do perdition \u00b6 \u7ed9\u5b9a\u4e00\u4e2a sentence\uff0c\u6211\u4eec\u8981\u8bad\u7ec3\u4e00\u4e2a\u795e\u7ecf\u7f51\u7edc\uff0c\u6839\u636e\u5f53\u524d\u7684 word \\(w_{i-1}\\) \uff0c\u6765\u9884\u6d4b\u4e0b\u4e00\u4e2a\u53ef\u80fd\u51fa\u73b0\u7684 word \\(w_i\\) \u200b \u662f\u4ec0\u4e48 \u4f7f\u7528 1-of-N encoding \u628a \\(w_{i-1}\\) \u200b \u8868\u793a\u6210 feature vector \u4f5c\u4e3a input\uff0c\u7136\u540e\u8f93\u51fa output \u4e5f\u662f n \u7ef4\u7684 vector\uff0c\u8868\u793a\u6bcf\u4e00\u4e2a\u5355\u8bcd\u7684\u53ef\u80fd\u6027 \u628a\u7b2c\u4e00\u4e2a hidden layer \u7684 input \\(z_1,z_2,...\\) \u200b\u200b \u200b\u62ff\u51fa\u6765\uff0c\u5b83\u4eec\u6240\u7ec4\u6210\u7684 \\(Z\\) \u200b\u200b \u200b\u5c31\u662f word \u7684\u53e6\u4e00\u79cd\u8868\u793a\u65b9\u5f0f\uff0c\u5f53\u6211\u4eec input \u4e0d\u540c\u7684\u8bcd\u6c47\uff0c\u5411\u91cf \\(Z\\) \u200b\u200b\u200b\u200b \u5c31\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u800c\u4e14 \\(Z\\) \u7684\u7ef4\u6570\u662f\u53ef\u4ee5\u81ea\u5df1\u51b3\u5b9a\u7684\uff0c\u56e0\u6b64\u63d0\u53d6\u51fa\u7b2c\u4e00\u5c42 hidden layer \u7684 input\uff0c\u5b9e\u9645\u4e0a\u5c31\u5f97\u5230\u4e86\u4e00\u7ec4\u53ef\u4ee5\u81ea\u5b9a\u4e49\u7ef4\u6570\u7684 Word Embedding \u7684\u5411\u91cf Why prediction works \u00b6 2 \u4e2a \u76f8\u4f3c\u7684 word \u7684 input vector \u7684 1-of-N \u7f16\u7801\u7ecf\u8fc7\u964d\u7ef4\u5230 \\(Z\\) \u200b\u200b \u7684 input \u540e\u7684 vector \u662f\u975e\u5e38\u63a5\u8fd1\u7684 Sharing Parameters \u00b6 \u901a\u8fc7\u5f53\u524d\u8bcd\u6c47\u9884\u6d4b\u4e0b\u4e00\u4e2a\u8bcd\u6c47\u8fd9\u4e2a\u7ea6\u675f\u592a\u5f31\u4e86\uff0c\u56e0\u4e3a\u8bcd\u6c47\u7684\u642d\u914d\u592a\u591a\u4e86 \u53ef\u4ee5\u6269\u5c55\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f7f\u7528 10 \u4e2a\u53ca\u4ee5\u4e0a\u7684\u8bcd\u6c47\u53bb\u9884\u6d4b\u4e0b\u4e00\u4e2a\u8bcd\u6c47\uff1b\u8fd9\u91cc\u4e3e 2 \u4e2a\u8bcd\u6c47\u7684\u4f8b\u5b50 \u76f4\u63a5\u628a \\(w_{i-2}\\) \u548c \\(w_{i-1}\\) \u8fd9\u4e24\u4e2a vector \u62fc\u63a5\u6210\u4e00\u4e2a\u66f4\u957f\u7684 vector \u4f5c\u4e3a input \u5373\u53ef\uff0c\u800c\u4e14\u6211\u4eec\u5e0c\u671b \\(w_{i-2}\\) \u548c \\(w_{i-1}\\) \u7684 weight \u662f tight \u5728\u4e00\u8d77\u7684\uff0c\u5373\u4ed6\u4eec\u6709\u76f8\u540c\u7684 weight\uff08 \\(W_1=W_2\\) \uff09\uff0c\u56e0\u4e3a\u4e0d\u8fd9\u6837\u505a\u5982\u679c \\(w_{i-2}\\) \u548c \\(w_{i-1}\\) \u200b\u200b \u662f\u76f8\u540c\u7684\u90a3\u4ed6\u4eec\u7684 embedding \u7ed3\u679c\u4f1a\u4e0d\u4e00\u6837\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u51cf\u5c11\u53c2\u6570\uff0c\u4e0d\u4f1a\u56e0\u4e3a input word \u7684\u6570\u91cf\u7684\u589e\u52a0\u800c\u5bfc\u81f4\u53c2\u6570\u7684\u66b4\u589e $$ z=W_1 x_{i-2}+W_2 x_{i-1}=W(x_{i-2}+x_{i-1}) $$ \u5728\u5b9e\u9645\u64cd\u4f5c\u65f6\u5982\u4f55\u4fdd\u8bc1 \\(W_1\\) \u548c \\(W_2\\) \u200b \u4e00\u6837\u5462\uff1f \u539f\u672c\u7684 update \u7684\u53c2\u6570\uff1a \\[ \\begin{align} w_i=w_i-\\eta \\frac{\\partial C}{\\partial w_i}\\\\ w_j=w_j-\\eta \\frac{\\partial C}{\\partial w_j} \\end{align} \\] \u4e3a\u4e86\u4fdd\u8bc1 \\(w_i=w_j\\) \uff1a \\[ \\begin{align} w_i=w_i-\\eta \\frac{\\partial C}{\\partial w_i}-\\eta \\frac{\\partial C}{\\partial w_j}\\\\ w_j=w_j-\\eta \\frac{\\partial C}{\\partial w_j}-\\eta \\frac{\\partial C}{\\partial w_i} \\end{align} \\] Training \u00b6 \u8bad\u7ec3\u53ea\u8981\u4e0a\u7f51\u722c\u4e00\u4e0b\u6587\u7ae0\u6570\u636e\u5c31\u884c \u901a\u8fc7\u5e0c\u671b output \u548c target \u7684 cross entropy \u6700\u5c0f\uff0c\u4e5f\u5c31\u662f\u4f7f\u5f97\u8f93\u51fa\u7684\u90a3\u4e2a vector \u5728 target \u6240\u5bf9\u5e94\u7684\u90a3\u4e00\u7ef4\u4e0a\u6982\u7387\u6700\u9ad8 Various Architectures \u00b6 \u9664\u4e86\u4e0a\u9762\u7684\u57fa\u672c\u5f62\u6001\uff0cPrediction-based \u65b9\u6cd5\u8fd8\u53ef\u4ee5\u6709\u591a\u79cd\u53d8\u5f62 CBOW (Continuous bag of word model) \u62ff\u524d\u540e\u7684\u8bcd\u6c47\u53bb\u9884\u6d4b\u4e2d\u95f4\u7684\u8bcd\u6c47 Skip-gram \u62ff\u4e2d\u95f4\u7684\u8bcd\u6c47\u53bb\u9884\u6d4b\u524d\u540e\u7684\u8bcd\u6c47 Others \u00b6 \u5c3d\u7ba1 word vector \u662f deep learning \u7684\u4e00\u4e2a\u5e94\u7528\uff0c\u4f46\u8fd9\u4e2a neural network \u5176\u5b9e\u5e76\u4e0d\u662f deep \u7684\uff0c\u5b83\u5c31\u53ea\u6709\u4e00\u4e2a linear \u7684 hidden layer \u6211\u4eec\u628a 1-of-N \u7f16\u7801\u8f93\u5165\u7ed9\u795e\u7ecf\u7f51\u7edc\uff0c\u7ecf\u8fc7 weight \u7684\u8f6c\u6362\u5f97\u5230 Word Embedding\uff0c\u518d\u901a\u8fc7\u7b2c\u4e00\u5c42 hidden layer \u5c31\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230\u8f93\u51fa\uff0c\u51cf\u5c0f\u8fd0\u7b97\u91cf Application \u00b6 Subtraction \u00b6 \u673a\u5668\u95ee\u7b54 \u4ece\u5f97\u5230\u7684 word vector \u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e9b\u539f\u672c\u5e76\u4e0d\u77e5\u9053\u7684 word \u4e0e word \u4e4b\u95f4\u7684\u5173\u7cfb \u628a word vector \u4e24\u4e24\u76f8\u51cf\uff0c\u518d\u6295\u5f71\u5230\u4e0b\u56fe\u4e2d\u7684\u4e8c\u7ef4\u5e73\u9762\u4e0a\uff0c\u5982\u679c\u67d0\u4e24\u4e2a word \u4e4b\u95f4\u6709\u7c7b\u4f3c\u5305\u542b\u4e8e\u7684\u76f8\u540c\u5173\u7cfb\uff0c\u5b83\u4eec\u5c31\u4f1a\u88ab\u6295\u5f71\u5230\u540c\u4e00\u5757\u533a\u57df \u5229\u7528\u8fd9\u4e2a\u6982\u5ff5\uff0c\u6211\u4eec\u53ef\u4ee5\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u63a8\u8bba\uff1a \u5728 word vector \u7684\u7279\u5f81\u4e0a\uff0c \\(V(Rome)-V(Italy)\u2248V(Berlin)-V(Germany)\\) \u6b64\u65f6\u5982\u679c\u6709\u4eba\u95ee \u201c\u7f57\u9a6c\u4e4b\u4e8e\u610f\u5927\u5229\u7b49\u4e8e\u67cf\u6797\u4e4b\u4e8e\uff1f\u201d\uff0c\u90a3\u673a\u5668\u5c31\u53ef\u4ee5\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898 \u56e0\u4e3a\u5fb7\u56fd\u7684 vector \u4f1a\u5f88\u63a5\u8fd1\u4e8e \u201c\u67cf\u6797\u7684vector - \u7f57\u9a6c\u7684vector + \u610f\u5927\u5229\u7684vector\u201d\uff0c\u56e0\u6b64\u673a\u5668\u53ea\u9700\u8981\u8ba1\u7b97 \\(V(Berlin)-V(Rome)+V(Italy)\\) \u200b\uff0c\u7136\u540e\u9009\u53d6\u4e0e\u8fd9\u4e2a\u7ed3\u679c\u6700\u63a5\u8fd1\u7684 vector \u5373\u53ef Multi-lingual Embedding \u00b6 \u673a\u5668\u7ffb\u8bd1 \u6b64\u5916\uff0cword vector \u8fd8\u53ef\u4ee5\u5efa\u7acb\u8d77\u4e0d\u540c\u8bed\u8a00\u4e4b\u95f4\u7684\u8054\u7cfb \u5982\u679c\u4f60\u8981\u7528\u4e0a\u8ff0\u65b9\u6cd5\u5206\u522b\u8bad\u7ec3\u4e00\u4e2a\u82f1\u6587\u7684\u8bed\u6599\u5e93 (corpus) \u548c\u4e2d\u6587\u7684\u8bed\u6599\u5e93\uff0c\u4f60\u4f1a\u53d1\u73b0\u4e24\u8005\u7684 word vector \u4e4b\u95f4\u662f\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u7684\uff0c\u56e0\u4e3a Word Embedding \u53ea\u4f53\u73b0\u4e86\u4e0a\u4e0b\u6587\u7684\u5173\u7cfb\uff0c\u5982\u679c\u4f60\u7684\u6587\u7ae0\u6ca1\u6709\u628a\u4e2d\u82f1\u6587\u6df7\u5408\u5728\u4e00\u8d77\u4f7f\u7528\uff0c\u673a\u5668\u5c31\u6ca1\u6709\u529e\u6cd5\u5224\u65ad\u4e2d\u82f1\u6587\u8bcd\u6c47\u4e4b\u95f4\u7684\u5173\u7cfb \u4f46\u662f\uff0c\u5982\u679c\u4f60\u77e5\u9053\u67d0\u4e9b\u4e2d\u6587\u8bcd\u6c47\u548c\u82f1\u6587\u8bcd\u6c47\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u4f60\u53ef\u4ee5\u5148\u5206\u522b\u83b7\u53d6\u5b83\u4eec\u7684 word vector\uff0c\u7136\u540e\u518d\u53bb\u8bad\u7ec3\u4e00\u4e2a\u6a21\u578b\uff0c\u628a\u5177\u6709\u76f8\u540c\u542b\u4e49\u7684\u4e2d\u82f1\u6587\u8bcd\u6c47\u6295\u5f71\u5230\u65b0\u7a7a\u95f4\u4e0a\u7684\u540c\u4e00\u4e2a\u70b9 \u63a5\u4e0b\u6765\u9047\u5230\u672a\u77e5\u7684\u65b0\u8bcd\u6c47\uff0c\u65e0\u8bba\u662f\u4e2d\u6587\u8fd8\u662f\u82f1\u6587\uff0c\u4f60\u90fd\u53ef\u4ee5\u91c7\u7528\u540c\u6837\u7684\u65b9\u5f0f\u5c06\u5176\u6295\u5f71\u5230\u65b0\u7a7a\u95f4\uff0c\u5c31\u53ef\u4ee5\u81ea\u52a8\u505a\u5230\u7c7b\u4f3c\u7ffb\u8bd1\u7684\u6548\u679c \u53c2\u8003\u6587\u732e\uff1a Bilingual Word Embeddings for Phrase-Based Machine Translation, Will Zou, Richard Socher, Daniel Cer and Christopher Manning, EMNLP, 2013 Multi-domain Embedding \u00b6 \u56fe\u50cf\u5206\u7c7b \u8fd9\u4e2a\u505a\u6cd5\u4e0d\u53ea\u5c40\u9650\u4e8e\u6587\u5b57\u7684\u5e94\u7528\uff0c\u4e5f\u53ef\u4ee5\u5bf9\u6587\u5b57+\u56fe\u50cf\u505a Embedding \u5047\u8bbe\u4f60\u5df2\u7ecf\u5f97\u5230 horse\u3001cat \u548c dog \u8fd9\u4e9b \u8bcd\u6c47 \u7684 vector \u5728\u7a7a\u95f4\u4e0a\u7684\u5206\u5e03\u60c5\u51b5\uff0c\u4f60\u5c31\u53ef\u4ee5\u53bb\u8bad\u7ec3\u4e00\u4e2a\u6a21\u578b\uff0c\u628a\u4e00\u4e9b\u5df2\u77e5\u7684 horse\u3001cat \u548c dog \u56fe\u7247 \u53bb\u6295\u5f71\u5230\u548c\u5bf9\u5e94\u8bcd\u6c47\u76f8\u540c\u7684\u7a7a\u95f4\u533a\u57df\u4e0a \u6bd4\u5982\u5bf9\u6a21\u578b\u8f93\u5165\u4e00\u5f20\u56fe\u50cf\uff0c\u4f7f\u4e4b\u8f93\u51fa\u4e00\u4e2a\u8ddf word vector \u5177\u6709\u76f8\u540c\u7ef4\u6570\u7684 vector\uff0c\u4f7f dog \u56fe\u50cf\u7684\u6620\u5c04\u5411\u91cf\u5c31\u6563\u5e03\u5728 dog \u8bcd\u6c47\u5411\u91cf\u7684\u5468\u56f4\uff0chorse \u56fe\u50cf\u7684\u6620\u5c04\u5411\u91cf\u5c31\u6563\u5e03\u5728 horse \u8bcd\u6c47\u5411\u91cf\u7684\u5468\u56f4... \u8bad\u7ec3\u597d\u8fd9\u4e2a\u6a21\u578b\u4e4b\u540e\uff0c\u8f93\u5165\u65b0\u7684\u672a\u77e5\u56fe\u50cf\uff08\u6bd4\u5982 cat\uff09\uff0c\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u53d1\u73b0\u5b83\u4f1a\u843d\u5728 cat \u8bcd\u6c47\u5411\u91cf\u7684\u5468\u56f4 \u6211\u4eec\u77e5\u9053\u5728\u505a\u56fe\u50cf\u5206\u7c7b\u7684\u65f6\u5019\uff0c\u5f88\u591a\u60c5\u51b5\u4e0b\u90fd\u662f\u4e8b\u5148\u5b9a\u597d\u8981\u5206\u4e3a\u54ea\u51e0\u4e2a\u5177\u4f53\u7684\u7c7b\u522b\uff0c\u518d\u7528\u8fd9\u51e0\u4e2a\u7c7b\u522b\u7684\u56fe\u50cf\u53bb\u8bad\u7ec3\u6a21\u578b\uff0c\u7531\u4e8e\u6211\u4eec\u65e0\u6cd5\u5728\u8bad\u7ec3\u7684\u65f6\u5019\u7a77\u5c3d\u6240\u6709\u7c7b\u522b\u7684\u56fe\u50cf\uff0c\u56e0\u6b64\u5728\u5b9e\u9645\u5e94\u7528\u7684\u65f6\u5019\u4e00\u65e6\u9047\u5230\u5c5e\u4e8e\u672a\u77e5\u7c7b\u522b\u7684\u56fe\u50cf\uff0c\u8fd9\u4e2a\u6a21\u578b\u5c31\u65e0\u80fd\u4e3a\u529b\u4e86 \u800c\u4f7f\u7528 image+word Embedding \u7684\u65b9\u6cd5\uff0c\u5c31\u7b97\u8f93\u5165\u7684\u56fe\u50cf\u7c7b\u522b\u5728\u8bad\u7ec3\u65f6\u6ca1\u6709\u88ab\u9047\u5230\u8fc7\uff0c\u6bd4\u5982\u4e0a\u56fe\u4e2d\u7684 cat\uff0c\u4f46\u5982\u679c\u8fd9\u5f20\u56fe\u50cf\u80fd\u591f\u6295\u5f71\u5230 cat \u7684 word vector \u7684\u9644\u8fd1\uff0c\u6839\u636e\u8bcd\u6c47\u5411\u91cf\u4e0e\u56fe\u50cf\u5411\u91cf\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u4f60\u81ea\u7136\u5c31\u53ef\u4ee5\u77e5\u9053\u8fd9\u5f20\u56fe\u50cf\u53eb\u505a cat Document Embedding \u00b6 \u6587\u6863\u5d4c\u5165 \u5bf9 Document \u505a Embedding \u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u628a document \u53d8\u6210 bag-of-word\uff0c\u7136\u540e\u7528 Auto-encoder \u5c31\u53ef\u4ee5\u5f97\u5230\u8be5\u6587\u6863\u7684\u8bed\u4e49\u5d4c\u5165 (Semantic Embedding)\uff0c\u4f46\u5149\u8fd9\u4e48\u505a\u662f\u4e0d\u591f\u7684 \u8bcd\u6c47\u7684\u987a\u5e8f\u4ee3\u8868\u4e86\u5f88\u91cd\u8981\u7684\u542b\u4e49\uff0c\u4e24\u53e5\u8bcd\u6c47\u76f8\u540c\u4f46\u8bed\u5e8f\u4e0d\u540c\u7684\u8bdd\u53ef\u80fd\u4f1a\u6709\u5b8c\u5168\u4e0d\u540c\u7684\u542b\u4e49\uff0c\u6bd4\u5982 \u767d\u8840\u7403\u6d88\u706d\u4e86\u4f20\u67d3\u75c5\u2014\u2014\u6b63\u9762\u8bed\u4e49 \u4f20\u67d3\u75c5\u6d88\u706d\u4e86\u767d\u8840\u7403\u2014\u2014\u8d1f\u9762\u8bed\u4e49 \u60f3\u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u7684\u51e0\u79cd\u5904\u7406\u65b9\u6cd5\uff1a Paragraph Vector : Le, Quoc, and Tomas Mikolov. \"Distributed Representations of Sentences and Documents.\u201c ICML, 2014 Seq2seq Auto-encoder : Li, Jiwei, Minh-Thang Luong, and Dan Jurafsky. \"A hierarchical neural autoencoder for paragraphs and documents.\" arXiv preprint, 2015 Skip Thought : Ryan Kiros, Yukun Zhu, Ruslan Salakhutdinov, Richard S. Zemel, Antonio Torralba, Raquel Urtasun, Sanja Fidler, \u201cSkip-Thought Vectors\u201d arXiv preprint, 2015. \u5173\u4e8e word2vec \uff0c\u53ef\u4ee5\u53c2\u8003\u535a\u5ba2\uff1ahttp://blog.csdn.net/itplus/article/details/37969519","title":"Unsupervised Learning:Word Embedding"},{"location":"ML/8_Unsupervised%20Learning%20Word%20Embedding/#unsupervised-learning-word-embedding","text":"Word Embedding\uff1a\u8bcd\u5d4c\u5165 \u57fa\u4e8e\u964d\u7ef4\u601d\u60f3\u63d0\u4f9b\u4e86 count-based \u548c prediction-based \u4e24\u79cd\u65b9\u6cd5\uff0c\u5e76\u4ecb\u7ecd\u4e86\u8be5\u601d\u60f3\u5728\u673a\u5668\u95ee\u7b54\u3001\u673a\u5668\u7ffb\u8bd1\u3001\u56fe\u50cf\u5206\u7c7b\u3001\u6587\u6863\u5d4c\u5165\u7b49\u65b9\u9762\u7684\u5e94\u7528 PCA \u548c Word Embedding \u90fd\u662f\u7ebf\u6027\u964d\u7ef4","title":"Unsupervised Learning: Word Embedding"},{"location":"ML/8_Unsupervised%20Learning%20Word%20Embedding/#introduction","text":"\u8bcd\u5d4c\u5165 (word embedding) \u662f\u964d\u7ef4\u7b97\u6cd5 (Dimension Reduction) \u7684\u5178\u578b\u5e94\u7528 \u90a3\u5982\u4f55\u7528 vector \u6765\u8868\u793a\u4e00\u4e2a word \u5462\uff1f","title":"Introduction"},{"location":"ML/8_Unsupervised%20Learning%20Word%20Embedding/#1-of-n-encoding","text":"\u6709 n \u4e2a\u5355\u8bcd\u5c31\u6709 n \u7ef4\uff0c\u6bcf\u4e2a\u5355\u8bcd\u90fd\u662f\u4e00\u4e2a\u5355\u4f4d\u5411\u91cf \u7f3a\u70b9\uff1a\u65e0\u6cd5\u5efa\u7acb\u8d77\u540c\u7c7b word \u7684\u8054\u7cfb","title":"1-of-N Encoding"},{"location":"ML/8_Unsupervised%20Learning%20Word%20Embedding/#word-class","text":"\u5bf9\u540c\u6837\u6027\u8d28\u7684 word \u8fdb\u884c\u805a\u7c7b (clustering)\uff0c\u5212\u5206\u4e3a\u591a\u4e2a class\uff0c\u7528 word \u6240\u5c5e\u7684 class \u6765\u8868\u793a word \u7f3a\u70b9\uff1a\u4e0d\u540c class \u4e4b\u95f4\u7684\u8054\u7cfb\u65e0\u6cd5\u6709\u6548\u7684\u88ab\u8868\u8fbe","title":"Word Class"},{"location":"ML/8_Unsupervised%20Learning%20Word%20Embedding/#word-embedding","text":"\u5c06\u6240\u6709 word \u6295\u5f71\u5230\u4f4e\u7ef4\u7a7a\u95f4\uff0c\u8fd9\u4e2a\u7a7a\u95f4\u7684\u7ef4\u6570\u8fdc\u4f4e\u4e8e word \u7684\u4e2a\u6570 n \u7c7b\u4f3c\u8bed\u4e49 (semantic) \u7684\u8bcd\u6c47\uff0c\u5728\u8fd9\u4e2a word embedding \u7684\u6295\u5f71\u7a7a\u95f4\u4e0a\u662f\u6bd4\u8f83\u63a5\u8fd1\u7684\uff0c\u800c\u4e14\u8be5\u7a7a\u95f4\u91cc\u7684\u6bcf\u4e00\u7ef4\u90fd\u53ef\u80fd\u6709\u7279\u6b8a\u7684\u542b\u4e49 \u5047\u8bbe\u8bcd\u5d4c\u5165\u7684\u6295\u5f71\u7a7a\u95f4\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5219\u6a2a\u8f74\u4ee3\u8868\u4e86\u751f\u7269\u4e0e\u5176\u5b83\u4e1c\u897f\u4e4b\u95f4\u7684\u533a\u522b\uff0c\u800c\u7eb5\u8f74\u5219\u4ee3\u8868\u4e86\u4f1a\u52a8\u7684\u4e1c\u897f\u4e0e\u9759\u6b62\u7684\u4e1c\u897f\u4e4b\u95f4\u7684\u5dee\u522b word embedding \u662f\u4e00\u4e2a\u65e0\u76d1\u7763\u7684\u65b9\u6cd5 (unsupervised approach)\uff0c\u53ea\u8981\u8ba9\u673a\u5668\u9605\u8bfb\u5927\u91cf\u7684\u6587\u7ae0\uff0c\u5b83\u5c31\u53ef\u4ee5\u77e5\u9053\u6bcf\u4e00\u4e2a\u8bcd\u6c47 embedding \u4e4b\u540e\u7684\u7279\u5f81\u5411\u91cf\u5e94\u8be5\u957f\u4ec0\u4e48\u6837\u5b50 \u6211\u4eec\u7684\u4efb\u52a1\u5c31\u662f\u8bad\u7ec3\u4e00\u4e2a neural network\uff0cinput \u662f\u8bcd\u6c47\uff0coutput \u5219\u662f\u5b83\u6240\u5bf9\u5e94\u7684 word embedding vector\uff0c\u5b9e\u9645\u8bad\u7ec3\u7684\u65f6\u5019\u6211\u4eec\u53ea\u6709 data \u7684 input\uff0c\u8be5\u5982\u4f55\u89e3\u8fd9\u7c7b\u95ee\u9898\u5462\uff1f \u4e4b\u524d\u63d0\u5230\u8fc7\u4e00\u79cd\u57fa\u4e8e\u795e\u7ecf\u7f51\u7edc\u7684\u964d\u7ef4\u65b9\u6cd5\uff0cAuto-encoder\uff0c\u5c31\u662f\u8bad\u7ec3\u4e00\u4e2a model\uff0c\u8ba9\u5b83\u7684\u8f93\u5165\u7b49\u4e8e\u8f93\u51fa\uff0c\u53d6\u51fa\u4e2d\u95f4\u7684\u67d0\u4e2a\u9690\u85cf\u5c42\u5c31\u662f\u964d\u7ef4\u7684\u7ed3\u679c\uff0c\u81ea\u7f16\u7801\u7684\u672c\u8d28\u5c31\u662f\u901a\u8fc7\u81ea\u6211\u538b\u7f29\u548c\u89e3\u538b\u7684\u8fc7\u7a0b\u6765\u5bfb\u627e\u5404\u4e2a\u7ef4\u5ea6\u4e4b\u95f4\u7684\u76f8\u5173\u4fe1\u606f\uff1b\u4f46 word embedding \u8fd9\u4e2a\u95ee\u9898\u662f\u4e0d\u80fd\u7528 Auto-encoder \u6765\u89e3\u7684\uff0c\u56e0\u4e3a\u8f93\u5165\u7684\u5411\u91cf\u901a\u5e38\u662f 1-of-N \u7f16\u7801\uff0c\u5404\u7ef4\u65e0\u5173\uff0c\u5f88\u96be\u901a\u8fc7\u81ea\u7f16\u7801\u7684\u8fc7\u7a0b\u63d0\u53d6\u51fa\u4ec0\u4e48\u6709\u7528\u4fe1\u606f","title":"Word Embedding"},{"location":"ML/8_Unsupervised%20Learning%20Word%20Embedding/#word-embedding_1","text":"","title":"Word Embedding"},{"location":"ML/8_Unsupervised%20Learning%20Word%20Embedding/#basic-idea","text":"\u601d\u60f3\u662f\u901a\u8fc7\u6bcf\u4e00\u4e2a\u8bcd\u6c47\u7684\u4e0a\u4e0b\u6587\u6765\u5f97\u5230\u5b83\u7684\u542b\u4e49 \u6bd4\u5982\uff1a\u201c\u9a6c\u82f1\u4e5d520\u5ba3\u8a93\u5c31\u804c\u201d\u3001\u201c\u8521\u82f1\u6587520\u5ba3\u8a93\u5c31\u804c\u201d\uff0c\u673a\u5668\u5c31\u53ef\u4ee5\u63a8\u6d4b\u9a6c\u82f1\u4e5d\u548c\u8521\u82f1\u6587\u4ee3\u8868\u7684\u540c\u6837\u7684\u4e1c\u897f \u600e\u4e48\u7528\u8fd9\u4e2a\u601d\u60f3\u6765\u627e\u51fa word embedding \u7684 vector \u5462\uff1f\u6709\u4e24\u79cd\u505a\u6cd5\uff1a Count based Prediction based","title":"Basic idea"},{"location":"ML/8_Unsupervised%20Learning%20Word%20Embedding/#count-based","text":"\u5047\u5982 \\(w_i\\) \u200b\u200b\u200b\u200b \u548c \\(w_j\\) \u200b\u200b\u200b \u200b\u8fd9\u4e24\u4e2a\u8bcd\u6c47\u5e38\u5e38\u5728\u540c\u4e00\u7bc7\u6587\u7ae0\u4e2d\u51fa\u73b0 (co-occur)\uff0c\u5b83\u4eec\u7684 word vector \u5206\u522b\u7528 \\(V(w_i)\\) \u200b\u200b\u200b\u200b \u548c \\(V(w_j)\\) \u200b\u200b\u200b\u200b \u6765\u8868\u793a\uff0c\u5219 \\(V(w_i)\\) \u200b\u200b\u200b\u200b \u548c \\(V(w_j)\\) \u200b\u200b\u200b\u200b\u4f1a\u6bd4\u8f83\u63a5\u8fd1 \u5047\u8bbe \\(N_{i,j}\\) \u662f \\(w_i\\) \u548c \\(w_j\\) \u8fd9\u4e24\u4e2a\u8bcd\u6c47\u5728\u76f8\u540c\u6587\u7ae0\u91cc\u540c\u65f6\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6211\u4eec\u5e0c\u671b\u5b83\u4e0e \\(V(w_i)\\cdot V(w_j)\\) \u200b\u200b \u7684\u5185\u79ef\u8d8a\u63a5\u8fd1\u8d8a\u597d\uff0c\u8fd9\u4e2a\u601d\u60f3\u548c\u4e4b\u524d\u7684\u6587\u7ae0\u4e2d\u63d0\u5230\u7684\u77e9\u9635\u5206\u89e3 (matrix factorization) \u7684\u601d\u60f3\u5176\u5b9e\u662f\u4e00\u6837\u7684 \\[ N_{i,j}\\approx V(w_i)\\cdot V(w_j) \\] \u8fd9\u79cd\u65b9\u6cd5\u6709\u4e00\u4e2a\u5f88\u4ee3\u8868\u6027\u7684\u4f8b\u5b50\u662f Glove Vector (paper)","title":"Count based"},{"location":"ML/8_Unsupervised%20Learning%20Word%20Embedding/#prediction-based","text":"","title":"Prediction based"},{"location":"ML/8_Unsupervised%20Learning%20Word%20Embedding/#how-to-do-perdition","text":"\u7ed9\u5b9a\u4e00\u4e2a sentence\uff0c\u6211\u4eec\u8981\u8bad\u7ec3\u4e00\u4e2a\u795e\u7ecf\u7f51\u7edc\uff0c\u6839\u636e\u5f53\u524d\u7684 word \\(w_{i-1}\\) \uff0c\u6765\u9884\u6d4b\u4e0b\u4e00\u4e2a\u53ef\u80fd\u51fa\u73b0\u7684 word \\(w_i\\) \u200b \u662f\u4ec0\u4e48 \u4f7f\u7528 1-of-N encoding \u628a \\(w_{i-1}\\) \u200b \u8868\u793a\u6210 feature vector \u4f5c\u4e3a input\uff0c\u7136\u540e\u8f93\u51fa output \u4e5f\u662f n \u7ef4\u7684 vector\uff0c\u8868\u793a\u6bcf\u4e00\u4e2a\u5355\u8bcd\u7684\u53ef\u80fd\u6027 \u628a\u7b2c\u4e00\u4e2a hidden layer \u7684 input \\(z_1,z_2,...\\) \u200b\u200b \u200b\u62ff\u51fa\u6765\uff0c\u5b83\u4eec\u6240\u7ec4\u6210\u7684 \\(Z\\) \u200b\u200b \u200b\u5c31\u662f word \u7684\u53e6\u4e00\u79cd\u8868\u793a\u65b9\u5f0f\uff0c\u5f53\u6211\u4eec input \u4e0d\u540c\u7684\u8bcd\u6c47\uff0c\u5411\u91cf \\(Z\\) \u200b\u200b\u200b\u200b \u5c31\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u800c\u4e14 \\(Z\\) \u7684\u7ef4\u6570\u662f\u53ef\u4ee5\u81ea\u5df1\u51b3\u5b9a\u7684\uff0c\u56e0\u6b64\u63d0\u53d6\u51fa\u7b2c\u4e00\u5c42 hidden layer \u7684 input\uff0c\u5b9e\u9645\u4e0a\u5c31\u5f97\u5230\u4e86\u4e00\u7ec4\u53ef\u4ee5\u81ea\u5b9a\u4e49\u7ef4\u6570\u7684 Word Embedding \u7684\u5411\u91cf","title":"how to do perdition"},{"location":"ML/8_Unsupervised%20Learning%20Word%20Embedding/#why-prediction-works","text":"2 \u4e2a \u76f8\u4f3c\u7684 word \u7684 input vector \u7684 1-of-N \u7f16\u7801\u7ecf\u8fc7\u964d\u7ef4\u5230 \\(Z\\) \u200b\u200b \u7684 input \u540e\u7684 vector \u662f\u975e\u5e38\u63a5\u8fd1\u7684","title":"Why prediction works"},{"location":"ML/8_Unsupervised%20Learning%20Word%20Embedding/#sharing-parameters","text":"\u901a\u8fc7\u5f53\u524d\u8bcd\u6c47\u9884\u6d4b\u4e0b\u4e00\u4e2a\u8bcd\u6c47\u8fd9\u4e2a\u7ea6\u675f\u592a\u5f31\u4e86\uff0c\u56e0\u4e3a\u8bcd\u6c47\u7684\u642d\u914d\u592a\u591a\u4e86 \u53ef\u4ee5\u6269\u5c55\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f7f\u7528 10 \u4e2a\u53ca\u4ee5\u4e0a\u7684\u8bcd\u6c47\u53bb\u9884\u6d4b\u4e0b\u4e00\u4e2a\u8bcd\u6c47\uff1b\u8fd9\u91cc\u4e3e 2 \u4e2a\u8bcd\u6c47\u7684\u4f8b\u5b50 \u76f4\u63a5\u628a \\(w_{i-2}\\) \u548c \\(w_{i-1}\\) \u8fd9\u4e24\u4e2a vector \u62fc\u63a5\u6210\u4e00\u4e2a\u66f4\u957f\u7684 vector \u4f5c\u4e3a input \u5373\u53ef\uff0c\u800c\u4e14\u6211\u4eec\u5e0c\u671b \\(w_{i-2}\\) \u548c \\(w_{i-1}\\) \u7684 weight \u662f tight \u5728\u4e00\u8d77\u7684\uff0c\u5373\u4ed6\u4eec\u6709\u76f8\u540c\u7684 weight\uff08 \\(W_1=W_2\\) \uff09\uff0c\u56e0\u4e3a\u4e0d\u8fd9\u6837\u505a\u5982\u679c \\(w_{i-2}\\) \u548c \\(w_{i-1}\\) \u200b\u200b \u662f\u76f8\u540c\u7684\u90a3\u4ed6\u4eec\u7684 embedding \u7ed3\u679c\u4f1a\u4e0d\u4e00\u6837\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u51cf\u5c11\u53c2\u6570\uff0c\u4e0d\u4f1a\u56e0\u4e3a input word \u7684\u6570\u91cf\u7684\u589e\u52a0\u800c\u5bfc\u81f4\u53c2\u6570\u7684\u66b4\u589e $$ z=W_1 x_{i-2}+W_2 x_{i-1}=W(x_{i-2}+x_{i-1}) $$ \u5728\u5b9e\u9645\u64cd\u4f5c\u65f6\u5982\u4f55\u4fdd\u8bc1 \\(W_1\\) \u548c \\(W_2\\) \u200b \u4e00\u6837\u5462\uff1f \u539f\u672c\u7684 update \u7684\u53c2\u6570\uff1a \\[ \\begin{align} w_i=w_i-\\eta \\frac{\\partial C}{\\partial w_i}\\\\ w_j=w_j-\\eta \\frac{\\partial C}{\\partial w_j} \\end{align} \\] \u4e3a\u4e86\u4fdd\u8bc1 \\(w_i=w_j\\) \uff1a \\[ \\begin{align} w_i=w_i-\\eta \\frac{\\partial C}{\\partial w_i}-\\eta \\frac{\\partial C}{\\partial w_j}\\\\ w_j=w_j-\\eta \\frac{\\partial C}{\\partial w_j}-\\eta \\frac{\\partial C}{\\partial w_i} \\end{align} \\]","title":"Sharing Parameters"},{"location":"ML/8_Unsupervised%20Learning%20Word%20Embedding/#training","text":"\u8bad\u7ec3\u53ea\u8981\u4e0a\u7f51\u722c\u4e00\u4e0b\u6587\u7ae0\u6570\u636e\u5c31\u884c \u901a\u8fc7\u5e0c\u671b output \u548c target \u7684 cross entropy \u6700\u5c0f\uff0c\u4e5f\u5c31\u662f\u4f7f\u5f97\u8f93\u51fa\u7684\u90a3\u4e2a vector \u5728 target \u6240\u5bf9\u5e94\u7684\u90a3\u4e00\u7ef4\u4e0a\u6982\u7387\u6700\u9ad8","title":"Training"},{"location":"ML/8_Unsupervised%20Learning%20Word%20Embedding/#various-architectures","text":"\u9664\u4e86\u4e0a\u9762\u7684\u57fa\u672c\u5f62\u6001\uff0cPrediction-based \u65b9\u6cd5\u8fd8\u53ef\u4ee5\u6709\u591a\u79cd\u53d8\u5f62 CBOW (Continuous bag of word model) \u62ff\u524d\u540e\u7684\u8bcd\u6c47\u53bb\u9884\u6d4b\u4e2d\u95f4\u7684\u8bcd\u6c47 Skip-gram \u62ff\u4e2d\u95f4\u7684\u8bcd\u6c47\u53bb\u9884\u6d4b\u524d\u540e\u7684\u8bcd\u6c47","title":"Various Architectures"},{"location":"ML/8_Unsupervised%20Learning%20Word%20Embedding/#others","text":"\u5c3d\u7ba1 word vector \u662f deep learning \u7684\u4e00\u4e2a\u5e94\u7528\uff0c\u4f46\u8fd9\u4e2a neural network \u5176\u5b9e\u5e76\u4e0d\u662f deep \u7684\uff0c\u5b83\u5c31\u53ea\u6709\u4e00\u4e2a linear \u7684 hidden layer \u6211\u4eec\u628a 1-of-N \u7f16\u7801\u8f93\u5165\u7ed9\u795e\u7ecf\u7f51\u7edc\uff0c\u7ecf\u8fc7 weight \u7684\u8f6c\u6362\u5f97\u5230 Word Embedding\uff0c\u518d\u901a\u8fc7\u7b2c\u4e00\u5c42 hidden layer \u5c31\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230\u8f93\u51fa\uff0c\u51cf\u5c0f\u8fd0\u7b97\u91cf","title":"Others"},{"location":"ML/8_Unsupervised%20Learning%20Word%20Embedding/#application","text":"","title":"Application"},{"location":"ML/8_Unsupervised%20Learning%20Word%20Embedding/#subtraction","text":"\u673a\u5668\u95ee\u7b54 \u4ece\u5f97\u5230\u7684 word vector \u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e9b\u539f\u672c\u5e76\u4e0d\u77e5\u9053\u7684 word \u4e0e word \u4e4b\u95f4\u7684\u5173\u7cfb \u628a word vector \u4e24\u4e24\u76f8\u51cf\uff0c\u518d\u6295\u5f71\u5230\u4e0b\u56fe\u4e2d\u7684\u4e8c\u7ef4\u5e73\u9762\u4e0a\uff0c\u5982\u679c\u67d0\u4e24\u4e2a word \u4e4b\u95f4\u6709\u7c7b\u4f3c\u5305\u542b\u4e8e\u7684\u76f8\u540c\u5173\u7cfb\uff0c\u5b83\u4eec\u5c31\u4f1a\u88ab\u6295\u5f71\u5230\u540c\u4e00\u5757\u533a\u57df \u5229\u7528\u8fd9\u4e2a\u6982\u5ff5\uff0c\u6211\u4eec\u53ef\u4ee5\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u63a8\u8bba\uff1a \u5728 word vector \u7684\u7279\u5f81\u4e0a\uff0c \\(V(Rome)-V(Italy)\u2248V(Berlin)-V(Germany)\\) \u6b64\u65f6\u5982\u679c\u6709\u4eba\u95ee \u201c\u7f57\u9a6c\u4e4b\u4e8e\u610f\u5927\u5229\u7b49\u4e8e\u67cf\u6797\u4e4b\u4e8e\uff1f\u201d\uff0c\u90a3\u673a\u5668\u5c31\u53ef\u4ee5\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898 \u56e0\u4e3a\u5fb7\u56fd\u7684 vector \u4f1a\u5f88\u63a5\u8fd1\u4e8e \u201c\u67cf\u6797\u7684vector - \u7f57\u9a6c\u7684vector + \u610f\u5927\u5229\u7684vector\u201d\uff0c\u56e0\u6b64\u673a\u5668\u53ea\u9700\u8981\u8ba1\u7b97 \\(V(Berlin)-V(Rome)+V(Italy)\\) \u200b\uff0c\u7136\u540e\u9009\u53d6\u4e0e\u8fd9\u4e2a\u7ed3\u679c\u6700\u63a5\u8fd1\u7684 vector \u5373\u53ef","title":"Subtraction"},{"location":"ML/8_Unsupervised%20Learning%20Word%20Embedding/#multi-lingual-embedding","text":"\u673a\u5668\u7ffb\u8bd1 \u6b64\u5916\uff0cword vector \u8fd8\u53ef\u4ee5\u5efa\u7acb\u8d77\u4e0d\u540c\u8bed\u8a00\u4e4b\u95f4\u7684\u8054\u7cfb \u5982\u679c\u4f60\u8981\u7528\u4e0a\u8ff0\u65b9\u6cd5\u5206\u522b\u8bad\u7ec3\u4e00\u4e2a\u82f1\u6587\u7684\u8bed\u6599\u5e93 (corpus) \u548c\u4e2d\u6587\u7684\u8bed\u6599\u5e93\uff0c\u4f60\u4f1a\u53d1\u73b0\u4e24\u8005\u7684 word vector \u4e4b\u95f4\u662f\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u7684\uff0c\u56e0\u4e3a Word Embedding \u53ea\u4f53\u73b0\u4e86\u4e0a\u4e0b\u6587\u7684\u5173\u7cfb\uff0c\u5982\u679c\u4f60\u7684\u6587\u7ae0\u6ca1\u6709\u628a\u4e2d\u82f1\u6587\u6df7\u5408\u5728\u4e00\u8d77\u4f7f\u7528\uff0c\u673a\u5668\u5c31\u6ca1\u6709\u529e\u6cd5\u5224\u65ad\u4e2d\u82f1\u6587\u8bcd\u6c47\u4e4b\u95f4\u7684\u5173\u7cfb \u4f46\u662f\uff0c\u5982\u679c\u4f60\u77e5\u9053\u67d0\u4e9b\u4e2d\u6587\u8bcd\u6c47\u548c\u82f1\u6587\u8bcd\u6c47\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u4f60\u53ef\u4ee5\u5148\u5206\u522b\u83b7\u53d6\u5b83\u4eec\u7684 word vector\uff0c\u7136\u540e\u518d\u53bb\u8bad\u7ec3\u4e00\u4e2a\u6a21\u578b\uff0c\u628a\u5177\u6709\u76f8\u540c\u542b\u4e49\u7684\u4e2d\u82f1\u6587\u8bcd\u6c47\u6295\u5f71\u5230\u65b0\u7a7a\u95f4\u4e0a\u7684\u540c\u4e00\u4e2a\u70b9 \u63a5\u4e0b\u6765\u9047\u5230\u672a\u77e5\u7684\u65b0\u8bcd\u6c47\uff0c\u65e0\u8bba\u662f\u4e2d\u6587\u8fd8\u662f\u82f1\u6587\uff0c\u4f60\u90fd\u53ef\u4ee5\u91c7\u7528\u540c\u6837\u7684\u65b9\u5f0f\u5c06\u5176\u6295\u5f71\u5230\u65b0\u7a7a\u95f4\uff0c\u5c31\u53ef\u4ee5\u81ea\u52a8\u505a\u5230\u7c7b\u4f3c\u7ffb\u8bd1\u7684\u6548\u679c \u53c2\u8003\u6587\u732e\uff1a Bilingual Word Embeddings for Phrase-Based Machine Translation, Will Zou, Richard Socher, Daniel Cer and Christopher Manning, EMNLP, 2013","title":"Multi-lingual Embedding"},{"location":"ML/8_Unsupervised%20Learning%20Word%20Embedding/#multi-domain-embedding","text":"\u56fe\u50cf\u5206\u7c7b \u8fd9\u4e2a\u505a\u6cd5\u4e0d\u53ea\u5c40\u9650\u4e8e\u6587\u5b57\u7684\u5e94\u7528\uff0c\u4e5f\u53ef\u4ee5\u5bf9\u6587\u5b57+\u56fe\u50cf\u505a Embedding \u5047\u8bbe\u4f60\u5df2\u7ecf\u5f97\u5230 horse\u3001cat \u548c dog \u8fd9\u4e9b \u8bcd\u6c47 \u7684 vector \u5728\u7a7a\u95f4\u4e0a\u7684\u5206\u5e03\u60c5\u51b5\uff0c\u4f60\u5c31\u53ef\u4ee5\u53bb\u8bad\u7ec3\u4e00\u4e2a\u6a21\u578b\uff0c\u628a\u4e00\u4e9b\u5df2\u77e5\u7684 horse\u3001cat \u548c dog \u56fe\u7247 \u53bb\u6295\u5f71\u5230\u548c\u5bf9\u5e94\u8bcd\u6c47\u76f8\u540c\u7684\u7a7a\u95f4\u533a\u57df\u4e0a \u6bd4\u5982\u5bf9\u6a21\u578b\u8f93\u5165\u4e00\u5f20\u56fe\u50cf\uff0c\u4f7f\u4e4b\u8f93\u51fa\u4e00\u4e2a\u8ddf word vector \u5177\u6709\u76f8\u540c\u7ef4\u6570\u7684 vector\uff0c\u4f7f dog \u56fe\u50cf\u7684\u6620\u5c04\u5411\u91cf\u5c31\u6563\u5e03\u5728 dog \u8bcd\u6c47\u5411\u91cf\u7684\u5468\u56f4\uff0chorse \u56fe\u50cf\u7684\u6620\u5c04\u5411\u91cf\u5c31\u6563\u5e03\u5728 horse \u8bcd\u6c47\u5411\u91cf\u7684\u5468\u56f4... \u8bad\u7ec3\u597d\u8fd9\u4e2a\u6a21\u578b\u4e4b\u540e\uff0c\u8f93\u5165\u65b0\u7684\u672a\u77e5\u56fe\u50cf\uff08\u6bd4\u5982 cat\uff09\uff0c\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u53d1\u73b0\u5b83\u4f1a\u843d\u5728 cat \u8bcd\u6c47\u5411\u91cf\u7684\u5468\u56f4 \u6211\u4eec\u77e5\u9053\u5728\u505a\u56fe\u50cf\u5206\u7c7b\u7684\u65f6\u5019\uff0c\u5f88\u591a\u60c5\u51b5\u4e0b\u90fd\u662f\u4e8b\u5148\u5b9a\u597d\u8981\u5206\u4e3a\u54ea\u51e0\u4e2a\u5177\u4f53\u7684\u7c7b\u522b\uff0c\u518d\u7528\u8fd9\u51e0\u4e2a\u7c7b\u522b\u7684\u56fe\u50cf\u53bb\u8bad\u7ec3\u6a21\u578b\uff0c\u7531\u4e8e\u6211\u4eec\u65e0\u6cd5\u5728\u8bad\u7ec3\u7684\u65f6\u5019\u7a77\u5c3d\u6240\u6709\u7c7b\u522b\u7684\u56fe\u50cf\uff0c\u56e0\u6b64\u5728\u5b9e\u9645\u5e94\u7528\u7684\u65f6\u5019\u4e00\u65e6\u9047\u5230\u5c5e\u4e8e\u672a\u77e5\u7c7b\u522b\u7684\u56fe\u50cf\uff0c\u8fd9\u4e2a\u6a21\u578b\u5c31\u65e0\u80fd\u4e3a\u529b\u4e86 \u800c\u4f7f\u7528 image+word Embedding \u7684\u65b9\u6cd5\uff0c\u5c31\u7b97\u8f93\u5165\u7684\u56fe\u50cf\u7c7b\u522b\u5728\u8bad\u7ec3\u65f6\u6ca1\u6709\u88ab\u9047\u5230\u8fc7\uff0c\u6bd4\u5982\u4e0a\u56fe\u4e2d\u7684 cat\uff0c\u4f46\u5982\u679c\u8fd9\u5f20\u56fe\u50cf\u80fd\u591f\u6295\u5f71\u5230 cat \u7684 word vector \u7684\u9644\u8fd1\uff0c\u6839\u636e\u8bcd\u6c47\u5411\u91cf\u4e0e\u56fe\u50cf\u5411\u91cf\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u4f60\u81ea\u7136\u5c31\u53ef\u4ee5\u77e5\u9053\u8fd9\u5f20\u56fe\u50cf\u53eb\u505a cat","title":"Multi-domain Embedding"},{"location":"ML/8_Unsupervised%20Learning%20Word%20Embedding/#document-embedding","text":"\u6587\u6863\u5d4c\u5165 \u5bf9 Document \u505a Embedding \u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u628a document \u53d8\u6210 bag-of-word\uff0c\u7136\u540e\u7528 Auto-encoder \u5c31\u53ef\u4ee5\u5f97\u5230\u8be5\u6587\u6863\u7684\u8bed\u4e49\u5d4c\u5165 (Semantic Embedding)\uff0c\u4f46\u5149\u8fd9\u4e48\u505a\u662f\u4e0d\u591f\u7684 \u8bcd\u6c47\u7684\u987a\u5e8f\u4ee3\u8868\u4e86\u5f88\u91cd\u8981\u7684\u542b\u4e49\uff0c\u4e24\u53e5\u8bcd\u6c47\u76f8\u540c\u4f46\u8bed\u5e8f\u4e0d\u540c\u7684\u8bdd\u53ef\u80fd\u4f1a\u6709\u5b8c\u5168\u4e0d\u540c\u7684\u542b\u4e49\uff0c\u6bd4\u5982 \u767d\u8840\u7403\u6d88\u706d\u4e86\u4f20\u67d3\u75c5\u2014\u2014\u6b63\u9762\u8bed\u4e49 \u4f20\u67d3\u75c5\u6d88\u706d\u4e86\u767d\u8840\u7403\u2014\u2014\u8d1f\u9762\u8bed\u4e49 \u60f3\u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u7684\u51e0\u79cd\u5904\u7406\u65b9\u6cd5\uff1a Paragraph Vector : Le, Quoc, and Tomas Mikolov. \"Distributed Representations of Sentences and Documents.\u201c ICML, 2014 Seq2seq Auto-encoder : Li, Jiwei, Minh-Thang Luong, and Dan Jurafsky. \"A hierarchical neural autoencoder for paragraphs and documents.\" arXiv preprint, 2015 Skip Thought : Ryan Kiros, Yukun Zhu, Ruslan Salakhutdinov, Richard S. Zemel, Antonio Torralba, Raquel Urtasun, Sanja Fidler, \u201cSkip-Thought Vectors\u201d arXiv preprint, 2015. \u5173\u4e8e word2vec \uff0c\u53ef\u4ee5\u53c2\u8003\u535a\u5ba2\uff1ahttp://blog.csdn.net/itplus/article/details/37969519","title":"Document Embedding"},{"location":"ML/9_Explainable%20Machine%20Learning/","text":"Explainable Machine Learning \u00b6 \u7b80\u5355\u6765\u8bf4\u5c31\u662f\u6211\u4eec\u9700\u8981\u77e5\u9053 Machine \u5b66\u5230\u4e86\u4ec0\u4e48\uff0c\u5c06 Machine \u5b66\u5230\u7684\u4e1c\u897f\u53ef\u89c6\u5316\u51fa\u6765 Why\uff1f\u8fdb\u884c\u6a21\u578b\u8bca\u65ad\uff0c\u6709\u7684\u6a21\u578b\u51c6\u786e\u7387\u5f88\u9ad8\u4f46\u662f\u5176\u5b9e\u4ec0\u4e48\u90fd\u6ca1\u5b66\u5230\uff1b\u6a21\u578b\u8bca\u65ad\u540e\u5c31\u53ef\u4ee5\u6839\u636e\u7ed3\u679c\u6765\u8c03\u6574 Local Explanation \u00b6 Basic Idea \u00b6 \u5bf9\u4e8e\u8f93\u5165\u7684 x\uff0c\u5c06\u5176\u5206\u6210 n \u4e2a components \\(\\{x_1,...,x_n,...x_N\\}\\) \uff0c\u6bcf\u4e2a component \u662f\u4e00\u4e2a\u50cf\u7d20\u6216\u8005\u4e00\u4e2a\u5c0f\u5757 \u7136\u540e\u901a\u8fc7 remove \u6216\u8005 modify \u5176\u4e2d\u4e00\u4e2a component \u7684\u503c\uff0c\u6839\u636e\u7ed3\u679c\u7684\u53d8\u5316\u5224\u65ad\u8fd9\u5757\u5bf9 decision \u7684\u91cd\u8981\u6027 \u84dd\u8272\u8868\u793a\u53bb\u6389\u90a3\u5757\u540e\u8bc6\u522b\u4e0d\u51fa True Label \u4e86\uff0c\u5373\u5bf9\u7ed3\u679c\u7684\u5f71\u54cd\u5f88\u5927 Saliency Map \u00b6 \u6216\u8005\u5bf9\u4e8e\u6bcf\u4e2a pixel \\(\\{x_1,...,x_n,..,x_N\\}\\) \u90fd\u52a0\u4e0a \\(\\Delta x\\) \uff0c\u5982\u679c\u5bf9\u7ed3\u679c\u5f71\u54cd\u5f88\u5927\uff0c\u5c31\u4ee3\u8868\u5f88\u91cd\u8981\uff1b\u5176\u5b9e\u53ef\u4ee5\u7528\u5fae\u5206 \\(|\\frac{\\partial y_k}{\\partial x_n}|\\) \u200b\u200b\u200b \u6765\u8868\u793a\u91cd\u8981\u6027\uff0c\u4e0b\u56fe\u4e2d\u8d8a\u4eae\u8868\u793a\u8d8a\u91cd\u8981 Limitation of Gradient based Approaches \u00b6 \u4e0b\u56fe\u7684\u610f\u601d\u662f\u5f53\u5927\u8c61\u9f3b\u5b50\u5927\u5230\u4e00\u5b9a\u7a0b\u5ea6\u65f6\u7684\u5fae\u5206\u4f1a\u5f88\u5c0f \u56fe\u4e2d\u7ed9\u51fa\u4e86\u89e3\u51b3\u6b64\u95ee\u9898\u7684 2 \u7bc7 paper Attack Interpretation \u00b6 Global Explanation \u00b6 Review \u00b6 CNN \u4e2d\u8bb2\u8fc7\uff0c\u5bfb\u627e \\(x^*=arg \\ max \\ y_i\\) \u4e3a\u4e86\u8ba9\u7ed3\u679c\u66f4\u50cf\u4e00\u4e2a digit \u9700\u8981\u52a0\u5165\u4e00\u4e9b Regulization Constraint from Generator \u00b6 \u5982\u4e0b\u56fe\u6240\u793a\uff0c\u8f93\u5165\u4e00\u4e2a\u4f4e\u7ef4\u7684 vector z \u4e22\u8fdb Image Generate \u751f\u6210\u4e00\u4e2a\u56fe\u7247 x\uff0c\u7136\u540e\u518d\u4e22\u8fdb Image classifier\uff0c\u5bfb\u627e \\(x^*=arg \\ max \\ y_i\\) \u4e00\u4e9b\u6548\u679c\u5f88\u597d\u7684\u4f8b\u5b50 Using a model to explain another \u00b6 \u4f7f\u7528\u4e00\u4e2a interpretable model \u6765\u6a21\u4eff\u53e6\u5916\u4e00\u4e2a uninterpretable model \u4e0b\u56fe\u4e2d \u9ed1\u8272 Black Box \u662f uninterpretable model\uff0c\u6bd4\u5982 Neural Network\uff1b\u84dd\u8272\u662f Linear Model\uff0c\u662f interpretable model\uff0c\u4f7f\u4ed6\u4eec\u6709\u76f8\u4f3c\u7684\u8f93\u51fa \u5b9e\u9645\u4e0a\u5e76\u4e0d\u80fd\u4f7f\u7528 linear model \u6765\u6a21\u62df\u6574\u4e2a neural network\uff0c\u4f46\u53ef\u4ee5\u7528\u6765\u6a21\u62df\u5176\u4e2d\u4e00\u4e2a local region Local Interpretable Model-Agnostic Explanations (LIME) \u00b6 General \u00b6 \u9996\u5148\u7ed9\u51fa\u8981 explain \u7684 point\uff0c\u4ee3\u5165 black box \u91cc\u9762 \u5728\u7b2c\u4e09\u4e2a\u84dd\u8272 point\uff08\u6211\u4eec\u60f3\u8981\u6a21\u62df\u7684\u533a\u57df\uff09\u5468\u56f4 sample \u9644\u8fd1\u7684 point\uff0cnearby \u7684\u533a\u57df\u4e0d\u540c\uff0c\u7ed3\u679c\u4e5f\u4f1a\u4e0d\u540c \u4f7f\u7528 linear model \u6765\u6a21\u62df neural network \u5728\u8fd9\u4e2a\u533a\u57df\u7684\u884c\u4e3a \u5f97\u77e5\u4e86\u8be5\u533a\u57df\u7684 linear model \u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\u5728\u8be5\u533a\u57df x \u548c y \u7684\u5173\u7cfb\uff0c\u5373 x \u8d8a\u5927\uff0cy \u8d8a\u5c0f\uff0c\u4e5f\u5c31 interpret \u4e86\u539f\u6765\u7684 neural network \u5728\u8fd9\u90e8\u5206\u533a\u57df\u7684\u884c\u4e3a \u663e\u7136 nearby \u7684\u5927\u5c0f\u5bf9\u7ed3\u679c\u5f71\u54cd\u5f88\u5927 LIME-Image \u00b6 \u628a frog image \u5206\u6210\u591a\u4e2a segment\uff0c\u7136\u540e\u968f\u673a\u53bb\u6389\u4e00\u4e9b segment\uff0c\u628a\u65b0\u56fe\u7247\u4e22\u8fdb black box \u8ba1\u7b97\u51fa\u65b0\u56fe\u7247\u662f frog \u7684\u53ef\u80fd\u6027 \u6bcf\u4e2a segment \u90fd\u662f\u4e00\u4e2a 01\u53d8\u91cf\uff0c\u6ca1\u53bb\u6389\u5c31\u662f 1\uff0c\u53bb\u6389\u5c31\u662f 0\uff0c\u7136\u540e\u7528\u4e00\u4e2a linear model \u53bb fit black box \u7684\u7ed3\u679c\uff0c\u5f97\u5230\uff1a $$ y=w_1x_1+..+w_mx_m+...+w_Mx_M $$ \\(w_i\\) \u8868\u793a\u7b2c i \u4e2a segment \u7684\u6743\u91cd\uff0c\u6b63\u503c\u8868\u793a\u6709\u6b63\u9762\u5f71\u54cd\uff0c\u8d1f\u503c\u8868\u793a\u6709\u8d1f\u9762\u5f71\u54cd Decision Tree \u00b6 \u5982\u679c\u6211\u4eec\u7528\u4e0d\u9650\u5236\u6df1\u5ea6\u7684 decision tree\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 decision tree \u6765\u6a21\u62df black box\uff08neural network\uff09\uff0c\u4f7f\u4e24\u8005\u7684\u8f93\u51fa\u76f8\u8fd1","title":"Explainable Machine Learning"},{"location":"ML/9_Explainable%20Machine%20Learning/#explainable-machine-learning","text":"\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u6211\u4eec\u9700\u8981\u77e5\u9053 Machine \u5b66\u5230\u4e86\u4ec0\u4e48\uff0c\u5c06 Machine \u5b66\u5230\u7684\u4e1c\u897f\u53ef\u89c6\u5316\u51fa\u6765 Why\uff1f\u8fdb\u884c\u6a21\u578b\u8bca\u65ad\uff0c\u6709\u7684\u6a21\u578b\u51c6\u786e\u7387\u5f88\u9ad8\u4f46\u662f\u5176\u5b9e\u4ec0\u4e48\u90fd\u6ca1\u5b66\u5230\uff1b\u6a21\u578b\u8bca\u65ad\u540e\u5c31\u53ef\u4ee5\u6839\u636e\u7ed3\u679c\u6765\u8c03\u6574","title":"Explainable Machine Learning"},{"location":"ML/9_Explainable%20Machine%20Learning/#local-explanation","text":"","title":"Local Explanation"},{"location":"ML/9_Explainable%20Machine%20Learning/#basic-idea","text":"\u5bf9\u4e8e\u8f93\u5165\u7684 x\uff0c\u5c06\u5176\u5206\u6210 n \u4e2a components \\(\\{x_1,...,x_n,...x_N\\}\\) \uff0c\u6bcf\u4e2a component \u662f\u4e00\u4e2a\u50cf\u7d20\u6216\u8005\u4e00\u4e2a\u5c0f\u5757 \u7136\u540e\u901a\u8fc7 remove \u6216\u8005 modify \u5176\u4e2d\u4e00\u4e2a component \u7684\u503c\uff0c\u6839\u636e\u7ed3\u679c\u7684\u53d8\u5316\u5224\u65ad\u8fd9\u5757\u5bf9 decision \u7684\u91cd\u8981\u6027 \u84dd\u8272\u8868\u793a\u53bb\u6389\u90a3\u5757\u540e\u8bc6\u522b\u4e0d\u51fa True Label \u4e86\uff0c\u5373\u5bf9\u7ed3\u679c\u7684\u5f71\u54cd\u5f88\u5927","title":"Basic Idea"},{"location":"ML/9_Explainable%20Machine%20Learning/#saliency-map","text":"\u6216\u8005\u5bf9\u4e8e\u6bcf\u4e2a pixel \\(\\{x_1,...,x_n,..,x_N\\}\\) \u90fd\u52a0\u4e0a \\(\\Delta x\\) \uff0c\u5982\u679c\u5bf9\u7ed3\u679c\u5f71\u54cd\u5f88\u5927\uff0c\u5c31\u4ee3\u8868\u5f88\u91cd\u8981\uff1b\u5176\u5b9e\u53ef\u4ee5\u7528\u5fae\u5206 \\(|\\frac{\\partial y_k}{\\partial x_n}|\\) \u200b\u200b\u200b \u6765\u8868\u793a\u91cd\u8981\u6027\uff0c\u4e0b\u56fe\u4e2d\u8d8a\u4eae\u8868\u793a\u8d8a\u91cd\u8981","title":"Saliency Map"},{"location":"ML/9_Explainable%20Machine%20Learning/#limitation-of-gradient-based-approaches","text":"\u4e0b\u56fe\u7684\u610f\u601d\u662f\u5f53\u5927\u8c61\u9f3b\u5b50\u5927\u5230\u4e00\u5b9a\u7a0b\u5ea6\u65f6\u7684\u5fae\u5206\u4f1a\u5f88\u5c0f \u56fe\u4e2d\u7ed9\u51fa\u4e86\u89e3\u51b3\u6b64\u95ee\u9898\u7684 2 \u7bc7 paper","title":"Limitation of Gradient based Approaches"},{"location":"ML/9_Explainable%20Machine%20Learning/#attack-interpretation","text":"","title":"Attack Interpretation"},{"location":"ML/9_Explainable%20Machine%20Learning/#global-explanation","text":"","title":"Global Explanation"},{"location":"ML/9_Explainable%20Machine%20Learning/#review","text":"CNN \u4e2d\u8bb2\u8fc7\uff0c\u5bfb\u627e \\(x^*=arg \\ max \\ y_i\\) \u4e3a\u4e86\u8ba9\u7ed3\u679c\u66f4\u50cf\u4e00\u4e2a digit \u9700\u8981\u52a0\u5165\u4e00\u4e9b Regulization","title":"Review"},{"location":"ML/9_Explainable%20Machine%20Learning/#constraint-from-generator","text":"\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u8f93\u5165\u4e00\u4e2a\u4f4e\u7ef4\u7684 vector z \u4e22\u8fdb Image Generate \u751f\u6210\u4e00\u4e2a\u56fe\u7247 x\uff0c\u7136\u540e\u518d\u4e22\u8fdb Image classifier\uff0c\u5bfb\u627e \\(x^*=arg \\ max \\ y_i\\) \u4e00\u4e9b\u6548\u679c\u5f88\u597d\u7684\u4f8b\u5b50","title":"Constraint from Generator"},{"location":"ML/9_Explainable%20Machine%20Learning/#using-a-model-to-explain-another","text":"\u4f7f\u7528\u4e00\u4e2a interpretable model \u6765\u6a21\u4eff\u53e6\u5916\u4e00\u4e2a uninterpretable model \u4e0b\u56fe\u4e2d \u9ed1\u8272 Black Box \u662f uninterpretable model\uff0c\u6bd4\u5982 Neural Network\uff1b\u84dd\u8272\u662f Linear Model\uff0c\u662f interpretable model\uff0c\u4f7f\u4ed6\u4eec\u6709\u76f8\u4f3c\u7684\u8f93\u51fa \u5b9e\u9645\u4e0a\u5e76\u4e0d\u80fd\u4f7f\u7528 linear model \u6765\u6a21\u62df\u6574\u4e2a neural network\uff0c\u4f46\u53ef\u4ee5\u7528\u6765\u6a21\u62df\u5176\u4e2d\u4e00\u4e2a local region","title":"Using a model to explain another"},{"location":"ML/9_Explainable%20Machine%20Learning/#local-interpretable-model-agnostic-explanations-lime","text":"","title":"Local Interpretable Model-Agnostic Explanations (LIME)"},{"location":"ML/9_Explainable%20Machine%20Learning/#general","text":"\u9996\u5148\u7ed9\u51fa\u8981 explain \u7684 point\uff0c\u4ee3\u5165 black box \u91cc\u9762 \u5728\u7b2c\u4e09\u4e2a\u84dd\u8272 point\uff08\u6211\u4eec\u60f3\u8981\u6a21\u62df\u7684\u533a\u57df\uff09\u5468\u56f4 sample \u9644\u8fd1\u7684 point\uff0cnearby \u7684\u533a\u57df\u4e0d\u540c\uff0c\u7ed3\u679c\u4e5f\u4f1a\u4e0d\u540c \u4f7f\u7528 linear model \u6765\u6a21\u62df neural network \u5728\u8fd9\u4e2a\u533a\u57df\u7684\u884c\u4e3a \u5f97\u77e5\u4e86\u8be5\u533a\u57df\u7684 linear model \u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\u5728\u8be5\u533a\u57df x \u548c y \u7684\u5173\u7cfb\uff0c\u5373 x \u8d8a\u5927\uff0cy \u8d8a\u5c0f\uff0c\u4e5f\u5c31 interpret \u4e86\u539f\u6765\u7684 neural network \u5728\u8fd9\u90e8\u5206\u533a\u57df\u7684\u884c\u4e3a \u663e\u7136 nearby \u7684\u5927\u5c0f\u5bf9\u7ed3\u679c\u5f71\u54cd\u5f88\u5927","title":"General"},{"location":"ML/9_Explainable%20Machine%20Learning/#lime-image","text":"\u628a frog image \u5206\u6210\u591a\u4e2a segment\uff0c\u7136\u540e\u968f\u673a\u53bb\u6389\u4e00\u4e9b segment\uff0c\u628a\u65b0\u56fe\u7247\u4e22\u8fdb black box \u8ba1\u7b97\u51fa\u65b0\u56fe\u7247\u662f frog \u7684\u53ef\u80fd\u6027 \u6bcf\u4e2a segment \u90fd\u662f\u4e00\u4e2a 01\u53d8\u91cf\uff0c\u6ca1\u53bb\u6389\u5c31\u662f 1\uff0c\u53bb\u6389\u5c31\u662f 0\uff0c\u7136\u540e\u7528\u4e00\u4e2a linear model \u53bb fit black box \u7684\u7ed3\u679c\uff0c\u5f97\u5230\uff1a $$ y=w_1x_1+..+w_mx_m+...+w_Mx_M $$ \\(w_i\\) \u8868\u793a\u7b2c i \u4e2a segment \u7684\u6743\u91cd\uff0c\u6b63\u503c\u8868\u793a\u6709\u6b63\u9762\u5f71\u54cd\uff0c\u8d1f\u503c\u8868\u793a\u6709\u8d1f\u9762\u5f71\u54cd","title":"LIME-Image"},{"location":"ML/9_Explainable%20Machine%20Learning/#decision-tree","text":"\u5982\u679c\u6211\u4eec\u7528\u4e0d\u9650\u5236\u6df1\u5ea6\u7684 decision tree\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 decision tree \u6765\u6a21\u62df black box\uff08neural network\uff09\uff0c\u4f7f\u4e24\u8005\u7684\u8f93\u51fa\u76f8\u8fd1","title":"Decision Tree"},{"location":"ML/Cuda%E5%92%8CCudnn/","text":"Cuda \u548c Cudnn \u00b6 \u5199\u4e8e 2022.4.9 ubuntu \u7248\u672c: 18.04 Desktop \u90e8\u5206\u56fe\u7247\u6765\u81ea\u7f51\u7edc \u51c6\u5907 \u00b6 \u66ff\u6362\u663e\u5361\u9a71\u52a8\uff0cgnome\u684c\u9762\u5728\u8f6f\u4ef6\u548c\u66f4\u65b0\u4e2d\u53ef\u4ee5\u627e\u5230 \u7528\u4e0b\u9762\u7684\u547d\u4ee4\u67e5\u770b\u662f\u5426\u5b89\u88c5\u6210\u529f nvidia-smi cuda \u5b89\u88c5 \u00b6 cuda \u4e0b\u8f7d\u5730\u5740\uff1ahttps://developer.nvidia.com/cuda-downloads\uff0c\u4e0b\u8f7d runfile(local) \u7684\u7248\u672c\uff0c\u542c\u8bf4 bug \u5c11\u4e00\u4e9b \u5b89\u88c5 cuda sudo sh cuda_11.2.0_460.27.04_linux.run \u7ee7\u7eed \u9009\u62e9 accept \u8fd9\u91cc Driver \u4e0d\u8981\u9009\u62e9\uff0c\u9014\u4e2d x \u662f\u8868\u793a\u9009\u62e9\u7684\uff0c\u5176\u4ed6\u7684\u90fd\u9009\u62e9 \u5b89\u88c5\u6210\u529f \u4fee\u6539\u73af\u5883\u53d8\u91cf sudo vim /etc/environment \u5728\u672b\u5c3e\u52a0\u5165 \":/usr/local/cuda:/usr/local/cuda/bin\" PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/local/cuda:/usr/local/cuda/bin\" \u4f7f\u73af\u5883\u53d8\u91cf\u751f\u6548 source /etc/environment \u67e5\u770b cuda \u7248\u672c nvcc -V cuda\u591a\u7248\u672c\u5207\u6362 \u00b6 \u5b89\u88c5\u7b2c\u4e8c\u4e2a cuda \u65f6\u4f1a\u95ee\u4f60\u662f\u5426\u8981\u5efa\u7acb\u8f6f\u94fe\u63a5\uff08symlink\uff0csymbolic link\uff0c\u7b26\u53f7\u94fe\u63a5\uff09\uff0c\u90fd\u53ef\u4ee5\uff0c\u5982\u679c\u9009\u62e9 y\uff0ccuda \u5c31\u4f1a\u6307\u5411\u65b0\u7684 cuda \u7248\u672c \u67e5\u770b\u8f6f\u94fe\u63a5 stat cuda # /usr/local \u76ee\u5f55\u4e0b \u8981\u5207\u6362 cuda \u7248\u672c\u53ea\u9700\u8981\u5207\u6362 cuda \u6587\u4ef6\u7684\u8f6f\u94fe\u63a5\u5c31\u884c sudo rm -rf cuda sudo ln -s /usr/local/cuda-9.1 /usr/local/cuda cudnn \u4e0b\u8f7d \u00b6 \u5b98\u7f51\u767b\u9646\u540e\u5373\u53ef\u4e0b\u8f7d\uff0c https://developer.nvidia.com/rdp/form/cudnn-download-survey # \u89e3\u538b tar -xvf cudnn-10.2-linux-x64-v7.6.5.32.tgz # \u590d\u5236 sudo cp cuda/include/cudnn.h /usr/local/cuda/include/ sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64/ # \u9a8c\u8bc1\u662f\u5426\u6210\u529f cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2 \u53c2\u8003 \u00b6 https://blog.csdn.net/moneymyone/article/details/122711846 https://blog.csdn.net/zhiman_zhong/article/details/91491780 https://blog.csdn.net/ksws0292756/article/details/80120561?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_aa&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_aa&utm_relevant_index=1 https://blog.csdn.net/wohu1104/article/details/107041387/","title":"Cuda \u548c Cudnn"},{"location":"ML/Cuda%E5%92%8CCudnn/#cuda-cudnn","text":"\u5199\u4e8e 2022.4.9 ubuntu \u7248\u672c: 18.04 Desktop \u90e8\u5206\u56fe\u7247\u6765\u81ea\u7f51\u7edc","title":"Cuda \u548c Cudnn"},{"location":"ML/Cuda%E5%92%8CCudnn/#_1","text":"\u66ff\u6362\u663e\u5361\u9a71\u52a8\uff0cgnome\u684c\u9762\u5728\u8f6f\u4ef6\u548c\u66f4\u65b0\u4e2d\u53ef\u4ee5\u627e\u5230 \u7528\u4e0b\u9762\u7684\u547d\u4ee4\u67e5\u770b\u662f\u5426\u5b89\u88c5\u6210\u529f nvidia-smi","title":"\u51c6\u5907"},{"location":"ML/Cuda%E5%92%8CCudnn/#cuda","text":"cuda \u4e0b\u8f7d\u5730\u5740\uff1ahttps://developer.nvidia.com/cuda-downloads\uff0c\u4e0b\u8f7d runfile(local) \u7684\u7248\u672c\uff0c\u542c\u8bf4 bug \u5c11\u4e00\u4e9b \u5b89\u88c5 cuda sudo sh cuda_11.2.0_460.27.04_linux.run \u7ee7\u7eed \u9009\u62e9 accept \u8fd9\u91cc Driver \u4e0d\u8981\u9009\u62e9\uff0c\u9014\u4e2d x \u662f\u8868\u793a\u9009\u62e9\u7684\uff0c\u5176\u4ed6\u7684\u90fd\u9009\u62e9 \u5b89\u88c5\u6210\u529f \u4fee\u6539\u73af\u5883\u53d8\u91cf sudo vim /etc/environment \u5728\u672b\u5c3e\u52a0\u5165 \":/usr/local/cuda:/usr/local/cuda/bin\" PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/local/cuda:/usr/local/cuda/bin\" \u4f7f\u73af\u5883\u53d8\u91cf\u751f\u6548 source /etc/environment \u67e5\u770b cuda \u7248\u672c nvcc -V","title":"cuda \u5b89\u88c5"},{"location":"ML/Cuda%E5%92%8CCudnn/#cuda_1","text":"\u5b89\u88c5\u7b2c\u4e8c\u4e2a cuda \u65f6\u4f1a\u95ee\u4f60\u662f\u5426\u8981\u5efa\u7acb\u8f6f\u94fe\u63a5\uff08symlink\uff0csymbolic link\uff0c\u7b26\u53f7\u94fe\u63a5\uff09\uff0c\u90fd\u53ef\u4ee5\uff0c\u5982\u679c\u9009\u62e9 y\uff0ccuda \u5c31\u4f1a\u6307\u5411\u65b0\u7684 cuda \u7248\u672c \u67e5\u770b\u8f6f\u94fe\u63a5 stat cuda # /usr/local \u76ee\u5f55\u4e0b \u8981\u5207\u6362 cuda \u7248\u672c\u53ea\u9700\u8981\u5207\u6362 cuda \u6587\u4ef6\u7684\u8f6f\u94fe\u63a5\u5c31\u884c sudo rm -rf cuda sudo ln -s /usr/local/cuda-9.1 /usr/local/cuda","title":"cuda\u591a\u7248\u672c\u5207\u6362"},{"location":"ML/Cuda%E5%92%8CCudnn/#cudnn","text":"\u5b98\u7f51\u767b\u9646\u540e\u5373\u53ef\u4e0b\u8f7d\uff0c https://developer.nvidia.com/rdp/form/cudnn-download-survey # \u89e3\u538b tar -xvf cudnn-10.2-linux-x64-v7.6.5.32.tgz # \u590d\u5236 sudo cp cuda/include/cudnn.h /usr/local/cuda/include/ sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64/ # \u9a8c\u8bc1\u662f\u5426\u6210\u529f cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2","title":"cudnn \u4e0b\u8f7d"},{"location":"ML/Cuda%E5%92%8CCudnn/#_2","text":"https://blog.csdn.net/moneymyone/article/details/122711846 https://blog.csdn.net/zhiman_zhong/article/details/91491780 https://blog.csdn.net/ksws0292756/article/details/80120561?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_aa&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_aa&utm_relevant_index=1 https://blog.csdn.net/wohu1104/article/details/107041387/","title":"\u53c2\u8003"},{"location":"ML/Keras/","text":"Keras \u00b6 Why Keras \u00b6 tensorflow \u548c\u53e6\u5916\u4e00\u4e2a\u529f\u80fd\u76f8\u8fd1\u7684 toolkit theano \u5f88\u96be\u5728\u77ed\u65f6\u95f4\u5185\u7cbe\u901a Keras \u662f\u6bd4\u8f83\u5bb9\u6613\u53bb\u5b66\u4e60\u548c\u4f7f\u7528\u7684\uff0c\u5e76\u4e14\u5b83\u4e5f\u6709\u8db3\u591f\u7684\u5f39\u6027\uff0c\u9664\u975e\u4f60\u81ea\u5df1\u60f3\u8981\u505a deep learning \u7684\u7814\u7a76\uff0c\u53bb\u8bbe\u8ba1\u4e00\u4e2a\u81ea\u5df1\u7684 network\uff0c\u5426\u5219\u591a\u6570\u4f60\u53ef\u4ee5\u60f3\u5230\u7684 network\uff0c\u5728 Keras \u91cc\u90fd\u6709\u73b0\u6210\u7684 function \u53ef\u4ee5\u62ff\u6765\u4f7f\u7528\uff1b\u56e0\u4e3a\u5b83\u80cc\u540e\u5c31\u662f tensorflow or theano\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u60f3\u8981\u7cbe\u8fdb\u81ea\u5df1\u7684\u80fd\u529b\u7684\u8bdd\uff0c\u4f60\u6c38\u8fdc\u53ef\u4ee5\u53bb\u6539 Keras \u80cc\u540e\u7684tensorflow \u7684 code\uff0c\u7136\u540e\u505a\u66f4\u5389\u5bb3\u7684\u4e8b\u60c5 \u800c\u4e14\uff0c\u73b0\u5728 Keras \u5df2\u7ecf\u6210\u4e3a\u4e86 Tensorflow \u5b98\u65b9\u7684 API\uff0c\u5b83\u50cf\u642d\u79ef\u6728\u4e00\u6837\u7b80\u5355 prepare data \u00b6 \u4f7f\u7528\u7684data\u662fMNIST\u7684Data\uff1ahttp://yann.lecun.com/exdb/mnist/ Keras\u63d0\u4f9b\u4e86\u81ea\u52a8\u4e0b\u8f7dMNIST data\u7684function\uff1ahttp://keras.io/datasets/ MNIST \u662f\u624b\u5199\u6570\u5b57\u7684\u6570\u636e\u96c6 process \u00b6 DOC\uff1a Keras API reference \u9996\u5148\u8981\u5148\u5bfc\u5165keras\u5305\uff1a from keras.models import Sequential step 1\uff1adefine a set of function\u2014\u2014neural network \u00b6 \u5148\u7528 Sequential() \u5ba3\u544a\u5efa\u7acb\u4e00\u4e2amodel model = Sequential () \u7136\u540e\u5f00\u59cb\u53e0 layer \u4ee5\u6784\u6210\u4e00\u4e2a neural network\uff0c\u8fd9\u91cc\u7684\u4f8b\u5b50\u4e00\u5171\u67092\u5c42\uff0c\u6bcf\u5c42 500 \u4e2a nuits\uff08units\uff09 model . add ( Dense ( input_dim = 28 * 28 , units = 500 , activation = 'sigmoid' )) model . add ( Dense ( units = 500 , activation = 'sigmoid' )) model . add ( Dense ( units = 10 , activation = 'softmax' )) add \uff1a\u52a0\u4e00\u5c42 hidden layer Dense \uff1a\u52a0\u4e00\u4e2a Fully connected \u7684 layer input_dim \uff1a\u53ea\u5728\u7b2c\u4e00\u5c42 layer \u524d\u9762\u52a0\u4e00\u4e2a input\uff0c\u8fd9\u91cc\u662f\u4e00\u4e2a 28*28=784 \u7684 vector\uff0c\u4ee3\u8868 img units \uff1a\u4e00\u5c42 layer \u4e2d units(neuron) \u7684\u6570\u91cf activation \uff1a\u6fc0\u6d3b\u51fd\u6570\uff0c\u4e00\u4e9b\u53ef\u9009\u7684\u4f8b\u5b50\uff1asoftplus, softsign, relu, tanh, hard_sigmoid, linear \u6700\u540e\u4e00\u5c42 output \u662f 10 \u7ef4\uff0c\u5206\u522b\u8868\u793a\u6570\u5b57 1~10\uff0c\u7528 softmax \u4f7f\u5f97\u51e0\u7387\u4e4b\u548c\u53d8\u6210\u4e00\u4e2a\u6982\u7387\u5206\u5e03 Step 2\uff1agoodness of function\u2014\u2014cross entropy \u00b6 \u5229\u7528 model.compile \u53bb\u5b9a\u4e49 loss function model . compile ( loss = 'categorical_crossentropy' , optimizer = 'adam' , metrics = [ 'accuracy' ]) loss : \u4f7f\u7528\u7684 loss function optimizer : \u7cfb\u6570\u7684\u66f4\u65b0\u65b9\u5f0f\uff0c\u4e00\u4e9b\u53ef\u9009\u7684\u4f8b\u5b50\uff1aAdagrad, Nadam Step 3\uff1apick the best function \u00b6 \u7528 model.fit \u53bb training model . fit ( x_train , y_train , batcha_size = 100 , nb_epoch = 20 ) x_train \uff1a\u524d 2 \u4e2a\u53c2\u6570\u662f train_data\uff0c\u4ee5\u624b\u5199\u6570\u5b57\u8fa8\u8bc6\u4e3a\u4f8b\uff0c\u4e00\u5f20\u56fe\u7247\u662f 28*28=784 \u7684 vector\uff0c\u6837\u672c\u91cf\u4e3a 10000\uff0c\u90a3\u4e48 x_train \u5c31\u4e00\u4e2a 10000*784 \u7684 numpy array\uff1by_train \u662f\u4e00\u4e2a 10000*10 \u7684 numpy array batch_size \uff1abatch \u7684\u5927\u5c0f\uff0c\u5373\u6bcf\u4e2a\u968f\u673a\u9009\u62e9\u591a\u5c11\u4e2a\u6837\u672c\u6765 update \u53c2\u6570 nb_epoch \uff1a\u5bf9\u6bcf\u4e2a batch update \u53c2\u6570\u7684\u6b21\u6570\uff0c\u4ee5\u4e0a\u9762\u7684\u53c2\u6570\u4e3a\u4f8b\uff0c10000 \u4e2a data\uff0c100 \u4e2a\u4e3a\u4e00\u4e2a batch\uff0c\u5219\u6709 100 \u4e2a batch\uff0c\u6240\u4ee5\u4e00\u5171 update 2000 \u6b21\uff08\u4e00\u4e2a epoch \u4e2d\u6bcf\u4e2a batch \u53ea update \u4e00\u6b21\u53c2\u6570\uff09 \u5982\u679c batch_size=0 \u5c31\u662f Stochastic Gradient Descent (\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6cd5) \u8fd0\u7528\u4e86 GPU \u7684\u5e73\u884c\u8fd0\u7b97\u540e\uff0cbatch_size=10 \u548c batch_size=1 \u5728 update \u4e00\u6b21\u53c2\u6570\u4e0a\u7684\u901f\u5ea6\u57fa\u672c\u662f\u4e00\u6837\u7684\uff0c\u4f46 batch_size \u4e5f\u4e0d\u80fd\u5f00\u592a\u5927\uff0cGPU \u662f\u6709\u6781\u9650\u7684\u3002\u800c\u4e14\u5728 gradient descent \u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u5361\u5728 local minima Save and Load Models \u00b6 Keras \u53ef\u4ee5\u628a train \u597d\u7684 model \u4fdd\u5b58\u8d77\u6765\u5e76\u76f4\u63a5\u4f7f\u7528\u4fdd\u5b58\u597d\u7684 model\uff0c\u53c2\u8003\uff1a Keras FAQ Testing and Predict \u00b6 \u7528 model.evaluate \u8ba1\u7b97\u6b63\u786e\u7387 score = model . evaluate ( x_test , y_test ) print ( 'Total loss on Testing Set:' , score [ 0 ]) print ( 'Accuracy of Testing Set:' , score [ 1 ]) \u7528 model.predict \u6765\u505a predict result = model . predict ( x_test ) Appendix\uff1a\u624b\u5199\u6570\u5b57\u8bc6\u522b\u5b8c\u6574\u4ee3\u7801 \u00b6 import numpy as np from keras.models import Sequential from keras.layers.core import Dense , Dropout , Activation from keras.layers import Conv2D , MaxPooling2D , Flatten from keras.optimizers import SGD , Adam from keras.utils import np_utils from keras.datasets import mnist # categorical_crossentropy def load_data (): ( x_train , y_train ), ( x_test , y_test ) = mnist . load_data () number = 10000 x_train = x_train [ 0 : number ] y_train = y_train [ 0 : number ] x_train = x_train . reshape ( number , 28 * 28 ) x_test = x_test . reshape ( x_test . shape [ 0 ], 28 * 28 ) x_train = x_train . astype ( 'float32' ) x_test = x_test . astype ( 'float32' ) # convert class vectors to binary class matrices y_train = np_utils . to_categorical ( y_train , 10 ) y_test = np_utils . to_categorical ( y_test , 10 ) x_train = x_train x_test = x_test # x_test=np.random.normal(x_test) x_train = x_train / 255 x_test = x_test / 255 return ( x_train , y_train ), ( x_test , y_test ) if __name__ == '__main__' : # load training data and testing data ( x_train , y_train ), ( x_test , y_test ) = load_data () # define network structure model = Sequential () model . add ( Dense ( input_dim = 28 * 28 , units = 500 , activation = 'sigmoid' )) model . add ( Dense ( units = 500 , activation = 'sigmoid' )) model . add ( Dense ( units = 10 , activation = 'softmax' )) # set configurations model . compile ( loss = 'categorical_crossentropy' , optimizer = 'adam' , metrics = [ 'accuracy' ]) # train model model . fit ( x_train , y_train , batch_size = 100 , epochs = 20 ) # evaluate the model and output the accuracy result = model . evaluate ( x_test , y_test ) print ( 'Test Acc:' , result [ 1 ]) Test Acc: 0.9439","title":"Keras"},{"location":"ML/Keras/#keras","text":"","title":"Keras"},{"location":"ML/Keras/#why-keras","text":"tensorflow \u548c\u53e6\u5916\u4e00\u4e2a\u529f\u80fd\u76f8\u8fd1\u7684 toolkit theano \u5f88\u96be\u5728\u77ed\u65f6\u95f4\u5185\u7cbe\u901a Keras \u662f\u6bd4\u8f83\u5bb9\u6613\u53bb\u5b66\u4e60\u548c\u4f7f\u7528\u7684\uff0c\u5e76\u4e14\u5b83\u4e5f\u6709\u8db3\u591f\u7684\u5f39\u6027\uff0c\u9664\u975e\u4f60\u81ea\u5df1\u60f3\u8981\u505a deep learning \u7684\u7814\u7a76\uff0c\u53bb\u8bbe\u8ba1\u4e00\u4e2a\u81ea\u5df1\u7684 network\uff0c\u5426\u5219\u591a\u6570\u4f60\u53ef\u4ee5\u60f3\u5230\u7684 network\uff0c\u5728 Keras \u91cc\u90fd\u6709\u73b0\u6210\u7684 function \u53ef\u4ee5\u62ff\u6765\u4f7f\u7528\uff1b\u56e0\u4e3a\u5b83\u80cc\u540e\u5c31\u662f tensorflow or theano\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u60f3\u8981\u7cbe\u8fdb\u81ea\u5df1\u7684\u80fd\u529b\u7684\u8bdd\uff0c\u4f60\u6c38\u8fdc\u53ef\u4ee5\u53bb\u6539 Keras \u80cc\u540e\u7684tensorflow \u7684 code\uff0c\u7136\u540e\u505a\u66f4\u5389\u5bb3\u7684\u4e8b\u60c5 \u800c\u4e14\uff0c\u73b0\u5728 Keras \u5df2\u7ecf\u6210\u4e3a\u4e86 Tensorflow \u5b98\u65b9\u7684 API\uff0c\u5b83\u50cf\u642d\u79ef\u6728\u4e00\u6837\u7b80\u5355","title":"Why Keras"},{"location":"ML/Keras/#prepare-data","text":"\u4f7f\u7528\u7684data\u662fMNIST\u7684Data\uff1ahttp://yann.lecun.com/exdb/mnist/ Keras\u63d0\u4f9b\u4e86\u81ea\u52a8\u4e0b\u8f7dMNIST data\u7684function\uff1ahttp://keras.io/datasets/ MNIST \u662f\u624b\u5199\u6570\u5b57\u7684\u6570\u636e\u96c6","title":"prepare data"},{"location":"ML/Keras/#process","text":"DOC\uff1a Keras API reference \u9996\u5148\u8981\u5148\u5bfc\u5165keras\u5305\uff1a from keras.models import Sequential","title":"process"},{"location":"ML/Keras/#step-1define-a-set-of-functionneural-network","text":"\u5148\u7528 Sequential() \u5ba3\u544a\u5efa\u7acb\u4e00\u4e2amodel model = Sequential () \u7136\u540e\u5f00\u59cb\u53e0 layer \u4ee5\u6784\u6210\u4e00\u4e2a neural network\uff0c\u8fd9\u91cc\u7684\u4f8b\u5b50\u4e00\u5171\u67092\u5c42\uff0c\u6bcf\u5c42 500 \u4e2a nuits\uff08units\uff09 model . add ( Dense ( input_dim = 28 * 28 , units = 500 , activation = 'sigmoid' )) model . add ( Dense ( units = 500 , activation = 'sigmoid' )) model . add ( Dense ( units = 10 , activation = 'softmax' )) add \uff1a\u52a0\u4e00\u5c42 hidden layer Dense \uff1a\u52a0\u4e00\u4e2a Fully connected \u7684 layer input_dim \uff1a\u53ea\u5728\u7b2c\u4e00\u5c42 layer \u524d\u9762\u52a0\u4e00\u4e2a input\uff0c\u8fd9\u91cc\u662f\u4e00\u4e2a 28*28=784 \u7684 vector\uff0c\u4ee3\u8868 img units \uff1a\u4e00\u5c42 layer \u4e2d units(neuron) \u7684\u6570\u91cf activation \uff1a\u6fc0\u6d3b\u51fd\u6570\uff0c\u4e00\u4e9b\u53ef\u9009\u7684\u4f8b\u5b50\uff1asoftplus, softsign, relu, tanh, hard_sigmoid, linear \u6700\u540e\u4e00\u5c42 output \u662f 10 \u7ef4\uff0c\u5206\u522b\u8868\u793a\u6570\u5b57 1~10\uff0c\u7528 softmax \u4f7f\u5f97\u51e0\u7387\u4e4b\u548c\u53d8\u6210\u4e00\u4e2a\u6982\u7387\u5206\u5e03","title":"step 1\uff1adefine a set of function\u2014\u2014neural network"},{"location":"ML/Keras/#step-2goodness-of-functioncross-entropy","text":"\u5229\u7528 model.compile \u53bb\u5b9a\u4e49 loss function model . compile ( loss = 'categorical_crossentropy' , optimizer = 'adam' , metrics = [ 'accuracy' ]) loss : \u4f7f\u7528\u7684 loss function optimizer : \u7cfb\u6570\u7684\u66f4\u65b0\u65b9\u5f0f\uff0c\u4e00\u4e9b\u53ef\u9009\u7684\u4f8b\u5b50\uff1aAdagrad, Nadam","title":"Step 2\uff1agoodness of function\u2014\u2014cross entropy"},{"location":"ML/Keras/#step-3pick-the-best-function","text":"\u7528 model.fit \u53bb training model . fit ( x_train , y_train , batcha_size = 100 , nb_epoch = 20 ) x_train \uff1a\u524d 2 \u4e2a\u53c2\u6570\u662f train_data\uff0c\u4ee5\u624b\u5199\u6570\u5b57\u8fa8\u8bc6\u4e3a\u4f8b\uff0c\u4e00\u5f20\u56fe\u7247\u662f 28*28=784 \u7684 vector\uff0c\u6837\u672c\u91cf\u4e3a 10000\uff0c\u90a3\u4e48 x_train \u5c31\u4e00\u4e2a 10000*784 \u7684 numpy array\uff1by_train \u662f\u4e00\u4e2a 10000*10 \u7684 numpy array batch_size \uff1abatch \u7684\u5927\u5c0f\uff0c\u5373\u6bcf\u4e2a\u968f\u673a\u9009\u62e9\u591a\u5c11\u4e2a\u6837\u672c\u6765 update \u53c2\u6570 nb_epoch \uff1a\u5bf9\u6bcf\u4e2a batch update \u53c2\u6570\u7684\u6b21\u6570\uff0c\u4ee5\u4e0a\u9762\u7684\u53c2\u6570\u4e3a\u4f8b\uff0c10000 \u4e2a data\uff0c100 \u4e2a\u4e3a\u4e00\u4e2a batch\uff0c\u5219\u6709 100 \u4e2a batch\uff0c\u6240\u4ee5\u4e00\u5171 update 2000 \u6b21\uff08\u4e00\u4e2a epoch \u4e2d\u6bcf\u4e2a batch \u53ea update \u4e00\u6b21\u53c2\u6570\uff09 \u5982\u679c batch_size=0 \u5c31\u662f Stochastic Gradient Descent (\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6cd5) \u8fd0\u7528\u4e86 GPU \u7684\u5e73\u884c\u8fd0\u7b97\u540e\uff0cbatch_size=10 \u548c batch_size=1 \u5728 update \u4e00\u6b21\u53c2\u6570\u4e0a\u7684\u901f\u5ea6\u57fa\u672c\u662f\u4e00\u6837\u7684\uff0c\u4f46 batch_size \u4e5f\u4e0d\u80fd\u5f00\u592a\u5927\uff0cGPU \u662f\u6709\u6781\u9650\u7684\u3002\u800c\u4e14\u5728 gradient descent \u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u5361\u5728 local minima","title":"Step 3\uff1apick the best function"},{"location":"ML/Keras/#save-and-load-models","text":"Keras \u53ef\u4ee5\u628a train \u597d\u7684 model \u4fdd\u5b58\u8d77\u6765\u5e76\u76f4\u63a5\u4f7f\u7528\u4fdd\u5b58\u597d\u7684 model\uff0c\u53c2\u8003\uff1a Keras FAQ","title":"Save and Load Models"},{"location":"ML/Keras/#testing-and-predict","text":"\u7528 model.evaluate \u8ba1\u7b97\u6b63\u786e\u7387 score = model . evaluate ( x_test , y_test ) print ( 'Total loss on Testing Set:' , score [ 0 ]) print ( 'Accuracy of Testing Set:' , score [ 1 ]) \u7528 model.predict \u6765\u505a predict result = model . predict ( x_test )","title":"Testing and Predict"},{"location":"ML/Keras/#appendix","text":"import numpy as np from keras.models import Sequential from keras.layers.core import Dense , Dropout , Activation from keras.layers import Conv2D , MaxPooling2D , Flatten from keras.optimizers import SGD , Adam from keras.utils import np_utils from keras.datasets import mnist # categorical_crossentropy def load_data (): ( x_train , y_train ), ( x_test , y_test ) = mnist . load_data () number = 10000 x_train = x_train [ 0 : number ] y_train = y_train [ 0 : number ] x_train = x_train . reshape ( number , 28 * 28 ) x_test = x_test . reshape ( x_test . shape [ 0 ], 28 * 28 ) x_train = x_train . astype ( 'float32' ) x_test = x_test . astype ( 'float32' ) # convert class vectors to binary class matrices y_train = np_utils . to_categorical ( y_train , 10 ) y_test = np_utils . to_categorical ( y_test , 10 ) x_train = x_train x_test = x_test # x_test=np.random.normal(x_test) x_train = x_train / 255 x_test = x_test / 255 return ( x_train , y_train ), ( x_test , y_test ) if __name__ == '__main__' : # load training data and testing data ( x_train , y_train ), ( x_test , y_test ) = load_data () # define network structure model = Sequential () model . add ( Dense ( input_dim = 28 * 28 , units = 500 , activation = 'sigmoid' )) model . add ( Dense ( units = 500 , activation = 'sigmoid' )) model . add ( Dense ( units = 10 , activation = 'softmax' )) # set configurations model . compile ( loss = 'categorical_crossentropy' , optimizer = 'adam' , metrics = [ 'accuracy' ]) # train model model . fit ( x_train , y_train , batch_size = 100 , epochs = 20 ) # evaluate the model and output the accuracy result = model . evaluate ( x_test , y_test ) print ( 'Test Acc:' , result [ 1 ]) Test Acc: 0.9439","title":"Appendix\uff1a\u624b\u5199\u6570\u5b57\u8bc6\u522b\u5b8c\u6574\u4ee3\u7801"},{"location":"ML/Pytorch/","text":"Pytorch \u00b6 Pytorch Introduction \u00b6 \u674e\u5b8f\u6bc5\u8001\u5e0820\u5e74ML\u7684PyTorch Tutorial\uff1a PyTorch_Introduction.ipynb - Colaboratory (google.com) \u53c2\u8003\uff1a PyTorch\u7b80\u6613\u5165\u95e8 doc\uff1a PyTorch documentation \u2014 PyTorch master documentation \u5176\u4e2d\u52a0\u4e86\u4e00\u4e9b\u81ea\u5df1\u5b66\u4e60\u4e2d\u7684\u8865\u5145\u5185\u5bb9 import torch import torch.nn as nn import torch.nn.functional as F from mpl_toolkits.mplot3d import Axes3D import matplotlib.pyplot as plt import numpy as np torch . manual_seed ( 446 ) np . random . seed ( 446 ) Tensors && numpy \u00b6 the tensor is similar to numpy's ndarray # \u521d\u59cb\u5316 x_numpy = np . array ([ 0.1 , 0.2 , 0.3 ]) x_torch = torch . tensor ([ 0.1 , 0.2 , 0.3 ]) y_numpy = np . array ([ 3 , 4 , 5. ]) y_torch = torch . tensor ([ 3 , 4 , 5. ]) # tensor \u548c array \u7684\u8f6c\u6362 >>> torch . from_numpy ( x_numpy ) tensor ([ 0.1000 , 0.2000 , 0.3000 ], dtype = torch . float64 ) >>> x_torch . numpy () [ 0.1 0.2 0.3 ] # \u52a0\u51cf\u64cd\u4f5c >>> x_torch + y_torch tensor ([ 3.1000 , 4.2000 , 5.3000 ]) >>> x_torch - y_torch tensor ([ - 2.9000 , - 3.8000 , - 4.7000 ]) # \u6c42norm >>> np . linalg . norm ( x_numpy ) 0.37416573867739417 >>> torch . norm ( x_torch ) tensor ( 0.3742 ) # \u6c42\u5747\u503cmean >>> np . mean ( x_numpy ) 0.20000000000000004 >>> torch . mean ( x_torch ) tensor ( 0.2000 ) torch.view \u00b6 similarly to numpy.reshape() >>> N , C , W , H = 10000 , 3 , 28 , 28 >>> X = torch . randn (( N , C , W , H )) >>> X . shape torch . Size ([ 10000 , 3 , 28 , 28 ]) >>> X . view ( N , C , 784 ) . shape torch . Size ([ 10000 , 3 , 784 ]) >>> X . view ( - 1 , C , 784 ) . shape # -1\u7684\u53ef\u4ee5\u81ea\u52a8\u8ba1\u7b97X.shape\u4e2d\u5bf9\u5e94\u7ef4\u7684\u503c torch . Size ([ 10000 , 3 , 784 ]) broadcasting semantics \u00b6 \u5904\u7406\u7ef4\u6570\u4e0d\u540c\u7684 tensors \u65f6\u4f1a\u8fdb\u884c\u5e7f\u64ad\uff0c\u7c7b\u4f3c np.matmul() >>> x = torch . empty ( 5 , 1 , 4 , 1 ) >>> y = torch . empty ( 3 , 1 , 1 ) >>> ( x + y ) . size () torch . Size ([ 5 , 3 , 4 , 1 ]) \u6309\u7167\u5c3e\u90e8\u7ef4\u5ea6\u5bf9\u9f50\uff0c\u4e14\u5bf9\u5e94\u7ef4\u5ea6\u8981\u4e48\u76f8\u540c\uff0c\u8981\u4e48\u6709\u4e00\u4e2a\u4e3a 1 Computation graphs \u00b6 \u505a\u52a0\u51cf\u4e58\u9664\u8fd0\u7b97\u65f6\uff0c\u53ea\u8981\u5176\u4e2d\u4e00\u9879\u9700\u8981\u505a gradient \uff0c pytorch \u5c31\u4f1a\u81ea\u52a8\u5efa\u7acb\u4e00\u5f20\u8ba1\u7b97\u56fe # \u6211\u4eec\u9700\u8981\u8bbe\u7f6erequires_grad=True\u4f7fpytorch\u77e5\u9053\u8981\u4fdd\u5b58\u8ba1\u7b97\u56fe\u7684\u5b58\u5728 >>> a = torch . tensor ( 2.0 , requires_grad = True ) >>> b = torch . tensor ( 1.0 , requires_grad = True ) >>> c = a + b >>> d = b + 1 >>> e = c * d >>> c tensor ( 3. , grad_fn =< AddBackward0 > ) >>> d tensor ( 2. , grad_fn =< AddBackward0 > ) >>> e tensor ( 6. , grad_fn =< MulBackward0 > ) CUDA semantics \u00b6 \u4f7f\u7528 torch.device(\"cpu\") \u548c torch.device(\"cuda\") \uff0c\u5e76\u4f7f\u7528 data.to() \u5c06\u6570\u636e\u5728 cpu \u548c gpu \u4e0a\u5207\u6362 cpu = torch . device ( 'cpu' ) gpu = torch . device ( 'cuda' ) x = torch . rand ( 10 ) x = x . to ( gpu ) # x\u5207\u6362\u5230gpu\u4e0a x = x . to ( cpu ) # x\u5207\u6362\u5230cpu\u4e0a PyTorch as an auto grad framework \u00b6 y.backward() \u8ba1\u7b97\u51fa\u8ba1\u7b97\u56fe\u4e2d \\(y\\) \u5bf9\u4ee5 \\(y\\) \u4e3a\u7ec8\u70b9\u7684\u8def\u5f84\u4e0a\u6240\u6709\u53d8\u91cf \\(x^i\\) \u7684 gradient \\(\\frac{\\partial y}{\\partial x^i}\\) \u4f8b1\uff1a \\(f(x)=(x-2)^2,f'(x)=2(x-2)\\) >>> def f ( x ): ... return ( x - 2 ) ** 2 >>> x = torch . tensor ([ 1.0 ], requires_grad = True ) # \u9700\u8981\u5148\u5efa\u7acb\u8ba1\u7b97\u56fe\u540e\u7eed\u624d\u80fd\u5fae\u5206 >>> y = f ( x ) >>> y . backward () # \u8ba1\u7b97\u56fe\u4e0a\u4ee5y\u4e3a\u7ec8\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u53d8\u91cf\u90fd\u81ea\u52a8\u5fae\u5206 >>> x . grad tensor ([ - 2. ]) \u4f8b2\uff1a \\(w=[w_1,w_2]^T,g(w)=2w_1w_2+w_2cos(w_1)\\) >>> def g ( w ): ... return 2 * w [ 0 ] * w [ 1 ] + w [ 1 ] * torch . cos ( w [ 0 ]) >>> w = torch . tensor ([ np . pi , 1 ], requires_grad = True ) >>> z = g ( w ) >>> z . backward () >>> w . grad tensor ([ 2.0000 , 5.2832 ]) # z\u5bf9w[0]\u548cw[1]\u7684\u5fae\u5206 Using the gradients \u00b6 \u4ee5 \\(f(x)=(x-2)^2,f'(x)=2(x-2)\\) \u4e3a\u4f8b\u505a gradient descent >>> def f ( x ): ... return ( x - 2 ) ** 2 >>> x = torch . tensor ([ 5.0 ], requires_grad = True ) # \u968f\u673a\u5b9a\u4e49x\u7684\u521d\u503c\u503c >>> lr = 0.25 # learning rate >>> for i in range ( 15 ): # \u505agd ... y = f ( x ) ... y . backward () ... print ( \"x= %f \\t f(x)= %f \\t f'(x)= %f \" % ( x . item (), y . item (), x . grad . item ())) ... x . data = x . data - lr * x . grad # \u4e0d\u7528x.data\u4f1a\u51fa\u95ee\u9898 ... x . grad . detach_ () # The detach_() is for efficiency. You do not need to worry too much about it. ... x . grad . zero_ () ... x = 5.000000 f ( x ) = 9.000000 f '(x)=6.000000 x = 3.500000 f ( x ) = 2.250000 f '(x)=3.000000 x = 2.750000 f ( x ) = 0.562500 f '(x)=1.500000 x = 2.375000 f ( x ) = 0.140625 f '(x)=0.750000 x = 2.187500 f ( x ) = 0.035156 f '(x)=0.375000 x = 2.093750 f ( x ) = 0.008789 f '(x)=0.187500 x = 2.046875 f ( x ) = 0.002197 f '(x)=0.093750 x = 2.023438 f ( x ) = 0.000549 f '(x)=0.046875 x = 2.011719 f ( x ) = 0.000137 f '(x)=0.023438 x = 2.005859 f ( x ) = 0.000034 f '(x)=0.011719 x = 2.002930 f ( x ) = 0.000009 f '(x)=0.005859 x = 2.001465 f ( x ) = 0.000002 f '(x)=0.002930 x = 2.000732 f ( x ) = 0.000001 f '(x)=0.001465 x = 2.000366 f ( x ) = 0.000000 f '(x)=0.000732 x = 2.000183 f ( x ) = 0.000000 f '(x)=0.000366 tensor.grad.zero_() \uff1agradient \u6e05\u96f6\uff0c\u5426\u5219\u4f1a\u7d2f\u52a0 tensor.item() \uff1a\u7528\u4e8e\u53d6\u51fa tensor \u4e2d\u7684\u7eaf\u6570\u503c\uff0c\u4e00\u822c\u9002\u7528\u4e8e tensor \u53ea\u5305\u542b\u4e00\u4e2a\u5143\u7d20\u7684\u60c5\u51b5\uff0c\u591a\u4e2a\u5143\u7d20\u53ef\u91c7\u7528 tensor.tolist() \u8f6c\u5316\u4e3a\u5217\u8868 tensor.detach_() \uff1a\u5207\u65ad\u8ba1\u7b97\u56fe\uff0c\u6bd4\u5982\u6211\u4eec\u5bf9 y \u8fdb\u884c detach_()\uff0c\u5c31\u628a x->y->z \u5207\u6210\u4e24\u90e8\u5206\uff1ax \u548c y->z\uff0cx \u5c31\u65e0\u6cd5\u63a5\u53d7\u5230\u540e\u9762\u4f20\u8fc7\u6765\u7684\u68af\u5ea6\uff0c\u5bf9 z \u8fdb\u884c backward() \u65f6\u4e5f\u4e0d\u4f1a\u5bf9\u6c42 y \u7684\u68af\u5ea6 tensor.detach() && tensor.data \uff1a\u83b7\u53d6 x \u8fd9\u4e2a tensor \u7684\u503c\uff08\u521b\u5efa x \u7684\u526f\u672c\uff09\uff0c\u4e14\u5185\u5b58\u90fd\u662f\u4e0e x \u5171\u4eab\uff0c\u5373\u4fee\u6539\u540e\u4e5f\u4f1a\u5f71\u54cd x \u7684\u503c\uff0c\u4f46\u4e0d\u4f1a\u81ea\u52a8\u5fae\u5206\uff0c require s_grad = False \uff1b\u4e24\u8005\u533a\u522b\u5728\u4e8e\u5728\u540e\u7eed\u7684\u53cd\u5411\u4f20\u64ad\u4e2d\uff0ctensor.data \u4e0d\u4f1a\u62a5\u9519\uff0c\u6240\u4ee5 detach() \u4f1a\u66f4\u52a0\u5b89\u5168 pytorch .detach() .detach_() \u548c .data\u7528\u4e8e\u5207\u65ad\u53cd\u5411\u4f20\u64ad - \u6162\u884c\u539a\u79ef Linear Regression \u00b6 Example \u00b6 \u635f\u5931\u51fd\u6570\uff1aRSS\uff0c\u6b8b\u5dee\u5e73\u65b9\u548c \u6570\u636e\u51c6\u5907 true_w \u662f\u771f\u5b9e\u53c2\u6570\uff0cy \u901a\u8fc7 \\(x@w\\) \u200b\u200b \u52a0\u4e0a\u4e00\u4e2a\u504f\u5dee\u83b7\u5f97 d = 2 n = 50 x = torch . randn ( n , d ) true_w = torch . tensor ([[ - 1.0 ],[ 2.0 ]]) y = x @true_w + torch . randn ( n , 1 ) * 0.1 \u521b\u5efa\u7ebf\u6027\u56de\u5f52\u6a21\u578b\u548c\u635f\u5931\u51fd\u6570 def model ( x , w ): return x @w def rss ( y , h_hat ): return torch . norm ( y - h_hat ) ** 2 / n \u4f7f\u7528\u68af\u5ea6\u8fdb\u884c\u68af\u5ea6\u4e0b\u964d\u6cd5\u7ebf\u6027\u56de\u5f52 w = torch . tensor ([[ 1. ],[ 0 ]], requires_grad = True ) for i in range ( 20 ): y_hat = model ( x , w ) loss = rss ( y , y_hat ) loss . backward () print ( 'loss = %f ' % loss . item (), \\\\ \" \\t w =\" , w . tolist ()) w . data = w . data - lr * w . grad w . grad . detach_ () w . grad . zero_ () loss = 6.877078 w = [[ 1.0 ], [ 0.0 ]] loss = 4.700166 w = [[ 0.6123040914535522 ], [ 0.29769018292427063 ]] loss = 3.225300 w = [[ 0.3017166256904602 ], [ 0.5531282424926758 ]] loss = 2.221793 w = [[ 0.052597105503082275 ], [ 0.7719148397445679 ]] loss = 1.536276 w = [[ - 0.1474691480398178 ], [ 0.9590051174163818 ]] loss = 1.066256 w = [[ - 0.3083454966545105 ], [ 1.1187583208084106 ]] loss = 0.742897 w = [[ - 0.4378759264945984 ], [ 1.2549899816513062 ]] loss = 0.519751 w = [[ - 0.5423045754432678 ], [ 1.371025800704956 ]] loss = 0.365329 w = [[ - 0.6266074180603027 ], [ 1.4697538614273071 ]] loss = 0.258197 w = [[ - 0.694753885269165 ], [ 1.5536739826202393 ]] loss = 0.183704 w = [[ - 0.7499141693115234 ], [ 1.6249440908432007 ]] loss = 0.131802 w = [[ - 0.7946230173110962 ], [ 1.6854223012924194 ]] loss = 0.095576 w = [[ - 0.8309094309806824 ], [ 1.7367050647735596 ]] loss = 0.070251 w = [[ - 0.8603994846343994 ], [ 1.7801612615585327 ]] loss = 0.052521 w = [[ - 0.8843981027603149 ], [ 1.8169628381729126 ]] loss = 0.040094 w = [[ - 0.9039536118507385 ], [ 1.8481112718582153 ]] loss = 0.031374 w = [[ - 0.9199094772338867 ], [ 1.8744614124298096 ]] loss = 0.025249 w = [[ - 0.9329451322555542 ], [ 1.8967417478561401 ]] loss = 0.020944 w = [[ - 0.9436085224151611 ], [ 1.9155727624893188 ]] loss = 0.017916 w = [[ - 0.9523422122001648 ], [ 1.931482195854187 ]] torch.nn.Module \u00b6 Linear Module \u00b6 d_in = 3 d_out = 4 linear_module = nn . Linear ( d_in , d_out ) example_tensor = torch . tensor ([[ 1. , 2 , 3 ],[ 4 , 5 , 6 ]]) transformed = linear_module ( example_tensor ) print ( 'example_tensor' , example_tensor . shape ) print ( 'transormed' , transformed . shape ) print () print ( 'We can see that the weights exist in the background \\n ' ) print ( 'W:' , linear_module . weight ) print ( 'b:' , linear_module . bias ) ''' example_tensor torch.Size([2, 3]) transormed torch.Size([2, 4]) We can see that the weights exist in the background W: Parameter containing: tensor([[ 0.5260, 0.4925, -0.0887], [ 0.3944, 0.4080, 0.2182], [-0.1409, 0.0518, 0.3034], [ 0.0913, 0.2452, -0.2616]], requires_grad=True) b: Parameter containing: tensor([0.5021, 0.0118, 0.1383, 0.4757], requires_grad=True) ''' Activation functions \u00b6 activation_fn = nn . ReLU () # we instantiate an instance of the ReLU module example_tensor = torch . tensor ([ - 1.0 , 1.0 , 0.0 ]) activated = activation_fn ( example_tensor ) print ( 'example_tensor' , example_tensor ) print ( 'activated' , activated ) ''' example_tensor tensor([-1., 1., 0.]) activated tensor([0., 1., 0.]) ''' Sequential \u00b6 d_in = 3 d_hidden = 4 d_out = 1 model = torch . nn . Sequential ( nn . Linear ( d_in , d_hidden ), nn . Tanh (), nn . Linear ( d_hidden , d_out ), nn . Sigmoid () ) example_tensor = torch . tensor ([[ 1. , 2 , 3 ],[ 4 , 5 , 6 ]]) transformed = model ( example_tensor ) print ( 'transformed' , transformed . shape ) ''' transformed torch.Size([2, 1]) ''' \u4e0a\u9762\u7684\u5f0f\u5b50\u7b49\u4ef7\u4e8e d_in = 3 d_hidden = 4 d_out = 1 linear = nn . Linear ( d_in , d_hidden ) tanh = nn . Tanh () linear2 = nn . Linear ( d_hidden , d_out ) sigmoid = nn . Sigmoid () tensor_input = torch . tensor ([[ 1. , 2 , 3 ],[ 4 , 5 , 6 ]]) tensor_input = linear ( tensor_input ) tensor_input = tanh ( tensor_input ) tensor_input = linear2 ( tensor_input ) transformed = sigmoid ( tensor_input ) print ( transformed ) \u83b7\u53d6\u53c2\u6570 params = model . parameters () for param in params : print ( param ) ''' Parameter containing: tensor([[-0.5607, 0.4221, -0.0254], [-0.3630, 0.4541, 0.0275], [-0.0703, -0.1463, 0.3065], [ 0.0065, -0.2664, 0.0267]], requires_grad=True) Parameter containing: tensor([-0.3196, 0.2911, 0.1999, -0.3758], requires_grad=True) Parameter containing: tensor([[-0.0289, 0.1544, 0.3992, -0.3301]], requires_grad=True) Parameter containing: tensor([-0.1438], requires_grad=True) ''' Loss functions \u00b6 mse_loss_fn = nn . MSELoss () input = torch . tensor ([[ 0. , 0 , 0 ]]) target = torch . tensor ([[ 1. , 0 , - 1 ]]) loss = mse_loss_fn ( input , target ) print ( loss ) ''' tensor(0.6667) ''' torch.optim \u00b6 \u4f7f\u7528\u4f18\u5316\u5668 Optimizer \u642d\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u795e\u7ecf\u7f51\u7edc \u4e0b\u9762\u7684\u4f8b\u5b50 GD \u4e86\u4e00\u6b21 # create a simple model model = nn . Linear ( 1 , 1 ) # create a simple dataset X_simple = torch . tensor ([[ 1. ]]) y_simple = torch . tensor ([[ 2. ]]) # create our optimizer # \u5fc5\u987b\u8981\u628amodel\u7684\u53c2\u6570\u5582\u7ed9optim\uff0clr\u53ef\u4ee5\u4e0d\u5199\uff0c\u4f1a\u6709\u9ed8\u8ba4\u53c2\u6570\u503c optim = torch . optim . SGD ( model . parameters (), lr = 1e-2 ) mse_loss_fn = nn . MSELoss () y_hat = model ( X_simple ) print ( 'model params before:' , model . weight ) loss = mse_loss_fn ( y_hat , y_simple ) # \u68af\u5ea6\u6e05\u96f6->\u8ba1\u7b97\u68af\u5ea6->\u68af\u5ea6\u4e0b\u964d # \u505aBackpropagation\u4e4b\u524d\u5148\u5c06\u68af\u5ea6\u6e05\u96f6\uff0c\u9632\u6b62\u4e0e\u65e7\u503c\u53e0\u52a0 optim . zero_grad () loss . backward () optim . step () print ( 'model params after:' , model . weight ) ''' model params before: Parameter containing: tensor([[-0.9604]], requires_grad=True) model params after: Parameter containing: tensor([[-0.9060]], requires_grad=True) ''' Linear regression using GD \u00b6 step_size = 0.1 linear_module = nn . Linear ( d , 1 , bias = False ) loss_func = nn . MSELoss () optim = torch . optim . SGD ( linear_module . parameters (), lr = step_size ) print ( 'iter, \\t loss, \\t w' ) for i in range ( 20 ): y_hat = linear_module ( X ) loss = loss_func ( y_hat , y ) optim . zero_grad () loss . backward () optim . step () print ( ' {} , \\t {:.2f} , \\t {} ' . format ( i , loss . item (), linear_module . weight . view ( 2 ) . detach () . numpy ())) print ( ' \\n true w \\t\\t ' , true_w . view ( 2 ) . numpy ()) print ( 'estimated w \\t ' , linear_module . weight . view ( 2 ) . detach () . numpy ()) ''' iter, loss, w 0, 6.14, [-0.4951109 -0.20055914] 1, 4.19, [-0.64017504 0.1509075 ] 2, 2.87, [-0.7496651 0.4441856] 3, 1.98, [-0.8317375 0.689143 ] 4, 1.37, [-0.8927491 0.89393103] 5, 0.95, [-0.93764454 1.0652909 ] 6, 0.67, [-0.9702622 1.208804 ] 7, 0.47, [-0.99357456 1.3290964 ] 8, 0.33, [-1.0098771 1.4300069] 9, 0.23, [-1.0209374 1.5147243] 10, 0.17, [-1.028112 1.5859002] 11, 0.12, [-1.0324373 1.6457422] 12, 0.09, [-1.0347017 1.6960896] 13, 0.06, [-1.035502 1.7384766] 14, 0.05, [-1.0352864 1.7741843] 15, 0.04, [-1.0343897 1.8042834] 16, 0.03, [-1.033059 1.829669] 17, 0.02, [-1.031475 1.8510911] 18, 0.02, [-1.0297676 1.8691778] 19, 0.01, [-1.0280287 1.8844559] true w [-1. 2.] estimated w [-1.0280287 1.8844559] ''' Linear regression using SGD \u00b6 step_size = 0.01 linear_module = nn . Linear ( d , 1 ) loss_func = nn . MSELoss () optim = torch . optim . SGD ( linear_module . parameters (), lr = step_size ) print ( 'iter, \\t loss, \\t w' ) for i in range ( 200 ): rand_idx = np . random . choice ( n ) # take a random point from the dataset x = X [ rand_idx ] y_hat = linear_module ( x ) loss = loss_func ( y_hat , y [ rand_idx ]) # only compute the loss on the single point optim . zero_grad () loss . backward () optim . step () if i % 20 == 0 : print ( ' {} , \\t {:.2f} , \\t {} ' . format ( i , loss . item (), linear_module . weight . view ( 2 ) . detach () . numpy ())) print ( ' \\n true w \\t\\t ' , true_w . view ( 2 ) . numpy ()) print ( 'estimated w \\t ' , linear_module . weight . view ( 2 ) . detach () . numpy ()) ''' iter, loss, w 0, 5.33, [-0.52818084 0.2690754 ] 20, 1.33, [-0.5849738 0.54701847] 40, 0.21, [-0.68336743 0.93094164] 60, 0.41, [-0.76554966 1.3865377 ] 80, 0.22, [-0.8548197 1.528812 ] 100, 0.45, [-0.9011376 1.679943 ] 120, 0.04, [-0.9418524 1.7858417] 140, 0.00, [-0.97288156 1.857902 ] 160, 0.00, [-0.98335326 1.893024 ] 180, 0.01, [-0.9927237 1.904962 ] true w [-1. 2.] estimated w [-0.99158174 1.9331173 ] ''' Neural Network Basics in PyTorch \u00b6 We will try and fit a simple neural network to the data. d = 1 n = 200 X = torch . rand ( n , d ) # rand \u751f\u6210\u7684\u968f\u673a\u6570\u5728 [0,1] # \u4e00\u4e2a\u7531 sin \u548c cos \u7684\u5408\u6210\u51fd\u6570 y = 4 * torch . sin ( np . pi * X ) * torch . cos ( 6 * np . pi * X ** 2 ) plt . scatter ( X . numpy (), y . numpy ()) plt . title ( 'plot of $f(x)$' ) plt . xlabel ( '$x$' ) plt . ylabel ( '$y$' ) plt . show () \u7528 pytorch \u642d\u5efa\u795e\u7ecf\u7f51\u7edc\u62df\u5408\u6570\u636e\u96c6\u7684\u66f2\u7ebf\uff0cactivation function \u7528 Tanh step_size = 0.05 n_epochs = 6000 n_hidden_1 = 32 n_hidden_2 = 32 d_out = 1 neural_network = nn . Sequential ( nn . Linear ( d , n_hidden_1 ), nn . Tanh (), nn . Linear ( n_hidden_1 , n_hidden_2 ), nn . Tanh (), nn . Linear ( n_hidden_2 , d_out ) ) loss_func = nn . MSELoss () optim = torch . optim . SGD ( neural_network . parameters (), lr = step_size ) print ( 'iter, \\t loss' ) for i in range ( n_epochs ): y_hat = neural_network ( X ) loss = loss_func ( y_hat , y ) optim . zero_grad () loss . backward () optim . step () if i % ( n_epochs // 10 ) == 0 : print ( ' {} , \\t {:.2f} ' . format ( i , loss . item ())) ''' iter, loss 0, 4.33 600, 4.27 1200, 3.87 1800, 1.54 2400, 0.71 3000, 0.78 3600, 0.24 4200, 0.10 4800, 0.08 5400, 0.08 ''' \u753b\u51fa\u62df\u5408\u540e\u7684\u66f2\u7ebf X_grid = torch . from_numpy ( np . linspace ( 0 , 1 , 50 )) . float () . view ( - 1 , d ) y_hat = neural_network ( X_grid ) plt . scatter ( X . numpy (), y . numpy ()) plt . plot ( X_grid . detach () . numpy (), y_hat . detach () . numpy (), 'r' ) plt . title ( 'plot of $f(x)$ and $\\hat {f} (x)$' ) plt . xlabel ( '$x$' ) plt . ylabel ( '$y$' ) plt . show () Things that may help \u00b6 Momentum \u00b6 doc\uff1a Why Momentum Really Works (distill.pub) optim = torch . optim . SGD ( neural_network . parameters (), lr = step_size , momentum = momentum ) CrossEntropyLoss \u00b6 loss = nn . CrossEntropyLoss () Learning rate schedulers \u00b6 doc\uff1a torch.optim \u2014 PyTorch 1.9.0 documentation Convolutions \u00b6 nn.Conv2d \u00b6 \u7528 CNN \u5904\u7406\u56fe\u50cf torch.nn.Conv2d doc\uff1a Conv2d \u2014 PyTorch 1.9.0 documentation torch.nn.Conv2d() \u7528\u6cd5\u8bb2\u89e3_\u5047\u88c5\u5f88\u574f\u7684\u8c26\u8c26\u541b torch . nn . Conv2d ( in_channels , out_channels , kernel_size , stride = 1 , padding = 0 , dilation = 1 , groups = 1 , bias = True , padding_mode = \u2018 zeros \u2019 ) in_channels \uff1a\u8f93\u5165\u7684\u901a\u9053\u6570\u76ee\uff0c\u6bd4\u5982 RGB \u5c31\u662f 3 \u901a\u9053 out_channels \uff1a\u8f93\u51fa\u7684\u901a\u9053\u6570\u76ee\uff0c\u5377\u79ef\u6838\u7684\u6570\u91cf kernel_size \uff1a\u5377\u79ef\u6838 (filter) \u5927\u5c0f\uff0cint \u6216\u8005 \u5143\u7ec4\uff0cint \u8868\u793a\u6b63\u65b9\u5f62\u7684\u5bbd\u5ea6 stride \uff1a\u6b65\u957f\uff0c\u9ed8\u8ba4 1 padding \uff1a\u5728\u8fb9\u754c\u589e\u52a0 \u503c\u4e3a0 \u7684\u8fb9\u8ddd\u7684\u957f\u5ea6\uff0c\u6216\u8005\u8bf4\u52a0\u51e0\u5708 0\uff0c\u9ed8\u8ba4\u4e3a 0 dilation \uff1a\u63a7\u5236\u5377\u79ef\u6838\u4e4b\u95f4\u7684\u95f4\u8ddd nn.BatchNorm2d \u00b6 \u5728\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u8bad\u7ec3\u65f6\u901a\u5e38\u4e00\u6b21\u8bad\u7ec3\u4e00\u4e2a batch\uff0c\u4f46\u662f\u6bcf\u4e2a batch \u7684\u5206\u5e03\u4e0d\u540c\uff0c\u6240\u4ee5\u4f1a\u5bf9\u4e0b\u4e00\u5c42\u7f51\u7edc\u7684\u5b66\u4e60\u5e26\u6765\u56f0\u96be\uff0cBatchNorm \u5c31\u662f\u628a\u6570\u636e\u6807\u51c6\u5316\uff08\u5747\u503c\u4e3a 0\uff0c \u65b9\u5dee\u4e3a 1\uff09\uff0c\u907f\u514d\u68af\u5ea6\u6d88\u5931\u548c\u68af\u5ea6\u7206\u70b8 torch . nn . BatchNorm2d ( num_features , eps = 1e-05 , momentum = 0.1 , affine = True ) num_features \uff1achannel \u6570 eps \uff1a\u4e3a\u4fdd\u8bc1\u6570\u503c\u7a33\u5b9a\u6027\uff08\u5206\u6bcd\u4e0d\u80fd\u8d8b\u8fd1\u6216\u53d60\uff09,\u7ed9\u5206\u6bcd\u52a0\u4e0a\u7684\u503c\u3002\u9ed8\u8ba4\u4e3a 1e-5 momentum \uff1a\u52a8\u6001\u5747\u503c\u548c\u52a8\u6001\u65b9\u5dee\u6240\u4f7f\u7528\u7684\u52a8\u91cf affine \uff1a \u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u5f53\u8bbe\u4e3atrue\uff0c\u7ed9\u8be5\u5c42\u6dfb\u52a0\u53ef\u5b66\u4e60\u7684\u4eff\u5c04\u53d8\u6362\u53c2\u6570 nn.MaxPool2d \u00b6 torch . nn . MaxPool2d ( kernel_size , stride = None , padding = 0 , dilation = 1 , return_indices = False , ceil_mode = False ) kernel_size \uff1amax pooling \u7a97\u53e3\u5927\u5c0f stride \uff1a\u7a97\u53e3\u79fb\u52a8\u6b65\u957f\uff0c\u9ed8\u8ba4\u4e3a kernel_size padding \uff1a\u5728\u8fb9\u754c\u589e\u52a0 \u503c\u4e3a0 \u7684\u8fb9\u8ddd\u7684\u957f\u5ea6\uff0c\u6216\u8005\u8bf4\u52a0\u51e0\u5708 0\uff0c\u9ed8\u8ba4\u4e3a 0 Custom Datasets, DataLoaders \u00b6 torch.utils.data.Dataset \u662f\u8868\u793a\u6570\u636e\u96c6\u7684\u62bd\u8c61\u7c7b\uff0c\u4f60\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u5e94\u7ee7\u627f Dataset \u5e76\u8986\u76d6\u4ee5\u4e0b\u65b9\u6cd5\uff1a __len__ so that len(dataset) returns the size of the dataset. __getitem__ to support the indexing such that dataset[i] can be used to get i-th sample from torch.utils.data import Dataset , DataLoader class MyDataset ( Dataset ): def __init__ ( self ): # \u53ef\u4ee5\u5728\u8fd9\u91cc\u8bfb\u53d6\u6570\u636e x , y = ... self . x = x self . y = y def __len__ ( self ): return len ( self . x ) def __getitem__ ( self , idx ): return self . x [ idx ], self . y [ idx ] myDataset = MyDataset () torch.utils.data.DataLoader train_loader = DataLoader ( dataset = myDataset , # \u4f20\u9012\u6570\u636e\u96c6 batch_size = 32 , # \u5c0f\u6279\u91cf\u7684\u6570\u636e\u5927\u5c0f\uff0c\u6bcf\u6b21\u52a0\u8f7d\u4e00batch\u6570\u636e shuffle = True , # \u6253\u4e71\u6570\u636e\u4e4b\u95f4\u7684\u987a\u5e8f num_workers = 2 ) # \u4f7f\u7528\u591a\u5c11\u4e2a\u5b50\u8fdb\u7a0b\u6765\u52a0\u8f7d\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a0, \u4ee3\u8868\u4f7f\u7528\u4e3b\u7ebf\u7a0b\u52a0\u8f7dbatch\u6570\u636e Transforms \u00b6 \u53c2\u8003\uff1a PyTorch \u5b66\u4e60\u7b14\u8bb0:transforms\u7684\u4e8c\u5341\u4e8c\u4e2a\u65b9\u6cd5 \u521d\u8bc6-CV\u7684\u535a\u5ba2 \u56fe\u50cf\u53d8\u6362\uff0c\u53ef\u4ee5\u5229\u7528 Compose \u628a\u53d8\u6362\u8fde\u63a5\u8d77\u6765 eg\uff1a import torchvision.transforms as transforms train_transform = transforms . Compose ([ transforms . CenterCrop ( 10 ), transforms . ToTensor (), ]) \u88c1\u526a Crop \u00b6 \u968f\u673a\u88c1\u526a \u00b6 torchvision . transforms . RandomCrop \uff08 size \uff0c padding = None \uff0c pad_if_needed = False \uff0c fill = 0 \uff0c padding_mode = 'constant' \uff09 \u4e2d\u5fc3\u88c1\u526a \u00b6 torchvision . transforms . CenterCrop ( size ) \u968f\u673a\u957f\u5bbd\u6bd4\u88c1\u526a \u00b6 torchvision . transforms . RandomResizedCrop ( size , scale = ( 0.08 , 1.0 ), ratio = ( 0.75 , 1.3333333333333333 ), interpolation = 2 ) \u4e0a\u4e0b\u5de6\u53f3\u4e2d\u5fc3\u88c1\u526a \u00b6 torchvision . transforms . FiveCrop ( size ) \u4e0a\u4e0b\u5de6\u53f3\u4e2d\u5fc3\u88c1\u526a\u540e\u7ffb\u8f6c \u00b6 torchvision . transforms . TenCrop ( size , vertical_flip = False ) \u7ffb\u8f6c\u548c\u65cb\u8f6c Flip and Rotation \u00b6 \u4f9d\u6982\u7387 p \u6c34\u5e73\u7ffb\u8f6c \u00b6 torchvision . transforms . RandomHorizontalFlip ( p = 0.5 ) # p \u9ed8\u8ba4\u4e3a 0.5 \u4f9d\u6982\u7387 p \u5782\u76f4\u7ffb\u8f6c \u00b6 torchvision . transforms . RandomVerticalFlip ( p = 0.5 ) \u968f\u673a\u65cb\u8f6c \u00b6 torchvision . transforms . RandomRotation ( degrees , resample = False , expand = False , center = None ) degree \uff1a\u5982\u679c\u4e0d\u662f\u4e00\u4e2a\u8303\u56f4\u800c\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u90a3\u8303\u56f4\u662f \\((-degree,degree)\\) \u56fe\u50cf\u53d8\u6362 Resize \u00b6 Resize \u00b6 torchvision . transforms . Resize ( size , interpolation = 2 ) \u6807\u51c6\u5316 \u00b6 torchvision . transforms . Normalize ( mean , std ) \u8f6c\u4e3a Tensor \u00b6 \u5c06 PIL Image \u6216\u8005 ndarray \u8f6c\u6362\u4e3a tensor\uff0c\u5e76\u4e14\u5f52\u4e00\u5316\u81f3 [0-1] \u6ce8\u610f\u4e8b\u9879\uff1a\u5f52\u4e00\u5316\u81f3 [0, 1] \u662f\u76f4\u63a5\u9664\u4ee5255\uff0c\u82e5\u81ea\u5df1\u7684 ndarray \u6570\u636e\u5c3a\u5ea6\u6709\u53d8\u5316\uff0c\u5219\u9700\u8981\u81ea\u884c\u4fee\u6539 torchvision . transforms . ToTensor \u586b\u5145 \u00b6 torchvision . transforms . Pad ( padding , fill = 0 , padding_mode = 'constant' ) \u4fee\u6539\u4eae\u5ea6\u3001\u5bf9\u6bd4\u5ea6\u548c\u9971\u548c\u5ea6 \u00b6 torchvision . transforms . ColorJitter ( brightness = 0 , contrast = 0 , saturation = 0 , hue = 0 ) \u8f6c\u7070\u5ea6\u56fe \u00b6 torchvision . transforms . Grayscale ( num_output_channels = 1 ) \u7ebf\u6027\u53d8\u6362 \u00b6 torchvision . transforms . LinearTransformation ( transformation_matrix ) \u4eff\u5c04\u53d8\u6362 \u00b6 torchvision . transforms . RandomAffine ( degrees , translate = None , scale = None , shear = None , resample = False , fillcolor = 0 ) \u4f9d\u6982\u7387 p \u8f6c\u4e3a\u7070\u5ea6\u56fe \u00b6 torchvision . transforms . RandomGrayscale ( p = 0.1 ) \u8f6c\u6362\u4e3a PILImage \u00b6 \u5c06 tensor \u6216\u8005 ndarray \u7684\u6570\u636e\u8f6c\u6362\u4e3a PIL Image \u7c7b\u578b\u6570\u636e \u53c2\u6570\uff1a mode \u4e3a None \u65f6\uff0c\u4e3a1\u901a\u9053\uff0c mode=3 \u901a\u9053\u9ed8\u8ba4\u8f6c\u6362\u4e3a RGB\uff0c4 \u901a\u9053\u9ed8\u8ba4\u8f6c\u6362\u4e3aRGBA torchvision . transforms . ToPILImage ( mode = None ) Lambda \u00b6 torchvision . transforms . Lambda \uff08 lambd \uff09 \u5bf9 transforms \u64cd\u4f5c \u00b6 RandomChoice \u00b6 torchvision . transforms . RandomChoice ( transforms ) RandomApply \u00b6 torchvision . transforms . RandomApply ( transforms , p = 0.5 ) RandomOrder \u00b6 torchvision . transforms . RandomOrder ( transforms ) \u5176\u4ed6 \u00b6 model.train() && model.eval() && torch.no_grad() \u00b6 Pytorch\uff1amodel.train()\u548cmodel.eval()\u7528\u6cd5\u548c\u533a\u522b\uff0c\u4ee5\u53camodel.eval()\u548ctorch.no_grad()\u7684\u533a\u522b model.train() \u5728\u8bad\u7ec3\u524d\u9700\u8981\u5199 model.train() \uff0c\u4f7f Batch Normalization \u5c42\u7528\u7684\u662f\u6bcf\u4e00\u6279\u6570\u636e\u7684\u5747\u503c\u548c\u65b9\u5dee\uff0c\u4f7f Dropout \u968f\u673a\u53d6\u4e00\u90e8\u5206\u7f51\u7edc\u6765\u8bad\u7ec3\u66f4\u65b0\u53c2\u6570 model . train model.eval() \u5728\u6d4b\u8bd5\u524d\u9700\u8981\u5199 model.eval() \uff0c\u4f7f Batch Normalization \u5c42\u7528\u7684\u662f\u5168\u90e8\u8bad\u7ec3\u6570\u636e\u7684\u5747\u503c\u548c\u65b9\u5dee\uff0c\u4f7f Dropout \u4e0d\u8fdb\u884c\u968f\u673a\u820d\u5f03\u795e\u7ecf\u5143 model . eval () torch.no_grad() \u5728 eval() \u6a21\u5f0f\u4e0b\u4ecd\u7136\u4f1a\u8fdb\u884c gradient \u7684\u8ba1\u7b97\u884c\u4e3a\uff0c\u53ea\u662f\u4e0d\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\uff0c with torch.no_grad() \u7528\u4ee5\u505c\u6b62 autograd \u6a21\u5757\u7684\u5de5\u4f5c\uff0c\u4ee5\u8d77\u5230\u52a0\u901f\u548c\u8282\u7701\u663e\u5b58\u7684\u4f5c\u7528 with torch . no_grad (): ... stack() && cat() \u00b6 torch.stack()\u7684\u5b98\u65b9\u89e3\u91ca\uff0c\u8be6\u89e3\u4ee5\u53ca\u4f8b\u5b50_xinjieyuan\u7684\u535a\u5ba2-CSDN\u535a\u5ba2","title":"Pytorch"},{"location":"ML/Pytorch/#pytorch","text":"","title":"Pytorch"},{"location":"ML/Pytorch/#pytorch-introduction","text":"\u674e\u5b8f\u6bc5\u8001\u5e0820\u5e74ML\u7684PyTorch Tutorial\uff1a PyTorch_Introduction.ipynb - Colaboratory (google.com) \u53c2\u8003\uff1a PyTorch\u7b80\u6613\u5165\u95e8 doc\uff1a PyTorch documentation \u2014 PyTorch master documentation \u5176\u4e2d\u52a0\u4e86\u4e00\u4e9b\u81ea\u5df1\u5b66\u4e60\u4e2d\u7684\u8865\u5145\u5185\u5bb9 import torch import torch.nn as nn import torch.nn.functional as F from mpl_toolkits.mplot3d import Axes3D import matplotlib.pyplot as plt import numpy as np torch . manual_seed ( 446 ) np . random . seed ( 446 )","title":"Pytorch Introduction"},{"location":"ML/Pytorch/#tensors-numpy","text":"the tensor is similar to numpy's ndarray # \u521d\u59cb\u5316 x_numpy = np . array ([ 0.1 , 0.2 , 0.3 ]) x_torch = torch . tensor ([ 0.1 , 0.2 , 0.3 ]) y_numpy = np . array ([ 3 , 4 , 5. ]) y_torch = torch . tensor ([ 3 , 4 , 5. ]) # tensor \u548c array \u7684\u8f6c\u6362 >>> torch . from_numpy ( x_numpy ) tensor ([ 0.1000 , 0.2000 , 0.3000 ], dtype = torch . float64 ) >>> x_torch . numpy () [ 0.1 0.2 0.3 ] # \u52a0\u51cf\u64cd\u4f5c >>> x_torch + y_torch tensor ([ 3.1000 , 4.2000 , 5.3000 ]) >>> x_torch - y_torch tensor ([ - 2.9000 , - 3.8000 , - 4.7000 ]) # \u6c42norm >>> np . linalg . norm ( x_numpy ) 0.37416573867739417 >>> torch . norm ( x_torch ) tensor ( 0.3742 ) # \u6c42\u5747\u503cmean >>> np . mean ( x_numpy ) 0.20000000000000004 >>> torch . mean ( x_torch ) tensor ( 0.2000 )","title":"Tensors &amp;&amp; numpy"},{"location":"ML/Pytorch/#torchview","text":"similarly to numpy.reshape() >>> N , C , W , H = 10000 , 3 , 28 , 28 >>> X = torch . randn (( N , C , W , H )) >>> X . shape torch . Size ([ 10000 , 3 , 28 , 28 ]) >>> X . view ( N , C , 784 ) . shape torch . Size ([ 10000 , 3 , 784 ]) >>> X . view ( - 1 , C , 784 ) . shape # -1\u7684\u53ef\u4ee5\u81ea\u52a8\u8ba1\u7b97X.shape\u4e2d\u5bf9\u5e94\u7ef4\u7684\u503c torch . Size ([ 10000 , 3 , 784 ])","title":"torch.view"},{"location":"ML/Pytorch/#broadcasting-semantics","text":"\u5904\u7406\u7ef4\u6570\u4e0d\u540c\u7684 tensors \u65f6\u4f1a\u8fdb\u884c\u5e7f\u64ad\uff0c\u7c7b\u4f3c np.matmul() >>> x = torch . empty ( 5 , 1 , 4 , 1 ) >>> y = torch . empty ( 3 , 1 , 1 ) >>> ( x + y ) . size () torch . Size ([ 5 , 3 , 4 , 1 ]) \u6309\u7167\u5c3e\u90e8\u7ef4\u5ea6\u5bf9\u9f50\uff0c\u4e14\u5bf9\u5e94\u7ef4\u5ea6\u8981\u4e48\u76f8\u540c\uff0c\u8981\u4e48\u6709\u4e00\u4e2a\u4e3a 1","title":"broadcasting semantics"},{"location":"ML/Pytorch/#computation-graphs","text":"\u505a\u52a0\u51cf\u4e58\u9664\u8fd0\u7b97\u65f6\uff0c\u53ea\u8981\u5176\u4e2d\u4e00\u9879\u9700\u8981\u505a gradient \uff0c pytorch \u5c31\u4f1a\u81ea\u52a8\u5efa\u7acb\u4e00\u5f20\u8ba1\u7b97\u56fe # \u6211\u4eec\u9700\u8981\u8bbe\u7f6erequires_grad=True\u4f7fpytorch\u77e5\u9053\u8981\u4fdd\u5b58\u8ba1\u7b97\u56fe\u7684\u5b58\u5728 >>> a = torch . tensor ( 2.0 , requires_grad = True ) >>> b = torch . tensor ( 1.0 , requires_grad = True ) >>> c = a + b >>> d = b + 1 >>> e = c * d >>> c tensor ( 3. , grad_fn =< AddBackward0 > ) >>> d tensor ( 2. , grad_fn =< AddBackward0 > ) >>> e tensor ( 6. , grad_fn =< MulBackward0 > )","title":"Computation graphs"},{"location":"ML/Pytorch/#cuda-semantics","text":"\u4f7f\u7528 torch.device(\"cpu\") \u548c torch.device(\"cuda\") \uff0c\u5e76\u4f7f\u7528 data.to() \u5c06\u6570\u636e\u5728 cpu \u548c gpu \u4e0a\u5207\u6362 cpu = torch . device ( 'cpu' ) gpu = torch . device ( 'cuda' ) x = torch . rand ( 10 ) x = x . to ( gpu ) # x\u5207\u6362\u5230gpu\u4e0a x = x . to ( cpu ) # x\u5207\u6362\u5230cpu\u4e0a","title":"CUDA semantics"},{"location":"ML/Pytorch/#pytorch-as-an-auto-grad-framework","text":"y.backward() \u8ba1\u7b97\u51fa\u8ba1\u7b97\u56fe\u4e2d \\(y\\) \u5bf9\u4ee5 \\(y\\) \u4e3a\u7ec8\u70b9\u7684\u8def\u5f84\u4e0a\u6240\u6709\u53d8\u91cf \\(x^i\\) \u7684 gradient \\(\\frac{\\partial y}{\\partial x^i}\\) \u4f8b1\uff1a \\(f(x)=(x-2)^2,f'(x)=2(x-2)\\) >>> def f ( x ): ... return ( x - 2 ) ** 2 >>> x = torch . tensor ([ 1.0 ], requires_grad = True ) # \u9700\u8981\u5148\u5efa\u7acb\u8ba1\u7b97\u56fe\u540e\u7eed\u624d\u80fd\u5fae\u5206 >>> y = f ( x ) >>> y . backward () # \u8ba1\u7b97\u56fe\u4e0a\u4ee5y\u4e3a\u7ec8\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u53d8\u91cf\u90fd\u81ea\u52a8\u5fae\u5206 >>> x . grad tensor ([ - 2. ]) \u4f8b2\uff1a \\(w=[w_1,w_2]^T,g(w)=2w_1w_2+w_2cos(w_1)\\) >>> def g ( w ): ... return 2 * w [ 0 ] * w [ 1 ] + w [ 1 ] * torch . cos ( w [ 0 ]) >>> w = torch . tensor ([ np . pi , 1 ], requires_grad = True ) >>> z = g ( w ) >>> z . backward () >>> w . grad tensor ([ 2.0000 , 5.2832 ]) # z\u5bf9w[0]\u548cw[1]\u7684\u5fae\u5206","title":"PyTorch as an auto grad framework"},{"location":"ML/Pytorch/#using-the-gradients","text":"\u4ee5 \\(f(x)=(x-2)^2,f'(x)=2(x-2)\\) \u4e3a\u4f8b\u505a gradient descent >>> def f ( x ): ... return ( x - 2 ) ** 2 >>> x = torch . tensor ([ 5.0 ], requires_grad = True ) # \u968f\u673a\u5b9a\u4e49x\u7684\u521d\u503c\u503c >>> lr = 0.25 # learning rate >>> for i in range ( 15 ): # \u505agd ... y = f ( x ) ... y . backward () ... print ( \"x= %f \\t f(x)= %f \\t f'(x)= %f \" % ( x . item (), y . item (), x . grad . item ())) ... x . data = x . data - lr * x . grad # \u4e0d\u7528x.data\u4f1a\u51fa\u95ee\u9898 ... x . grad . detach_ () # The detach_() is for efficiency. You do not need to worry too much about it. ... x . grad . zero_ () ... x = 5.000000 f ( x ) = 9.000000 f '(x)=6.000000 x = 3.500000 f ( x ) = 2.250000 f '(x)=3.000000 x = 2.750000 f ( x ) = 0.562500 f '(x)=1.500000 x = 2.375000 f ( x ) = 0.140625 f '(x)=0.750000 x = 2.187500 f ( x ) = 0.035156 f '(x)=0.375000 x = 2.093750 f ( x ) = 0.008789 f '(x)=0.187500 x = 2.046875 f ( x ) = 0.002197 f '(x)=0.093750 x = 2.023438 f ( x ) = 0.000549 f '(x)=0.046875 x = 2.011719 f ( x ) = 0.000137 f '(x)=0.023438 x = 2.005859 f ( x ) = 0.000034 f '(x)=0.011719 x = 2.002930 f ( x ) = 0.000009 f '(x)=0.005859 x = 2.001465 f ( x ) = 0.000002 f '(x)=0.002930 x = 2.000732 f ( x ) = 0.000001 f '(x)=0.001465 x = 2.000366 f ( x ) = 0.000000 f '(x)=0.000732 x = 2.000183 f ( x ) = 0.000000 f '(x)=0.000366 tensor.grad.zero_() \uff1agradient \u6e05\u96f6\uff0c\u5426\u5219\u4f1a\u7d2f\u52a0 tensor.item() \uff1a\u7528\u4e8e\u53d6\u51fa tensor \u4e2d\u7684\u7eaf\u6570\u503c\uff0c\u4e00\u822c\u9002\u7528\u4e8e tensor \u53ea\u5305\u542b\u4e00\u4e2a\u5143\u7d20\u7684\u60c5\u51b5\uff0c\u591a\u4e2a\u5143\u7d20\u53ef\u91c7\u7528 tensor.tolist() \u8f6c\u5316\u4e3a\u5217\u8868 tensor.detach_() \uff1a\u5207\u65ad\u8ba1\u7b97\u56fe\uff0c\u6bd4\u5982\u6211\u4eec\u5bf9 y \u8fdb\u884c detach_()\uff0c\u5c31\u628a x->y->z \u5207\u6210\u4e24\u90e8\u5206\uff1ax \u548c y->z\uff0cx \u5c31\u65e0\u6cd5\u63a5\u53d7\u5230\u540e\u9762\u4f20\u8fc7\u6765\u7684\u68af\u5ea6\uff0c\u5bf9 z \u8fdb\u884c backward() \u65f6\u4e5f\u4e0d\u4f1a\u5bf9\u6c42 y \u7684\u68af\u5ea6 tensor.detach() && tensor.data \uff1a\u83b7\u53d6 x \u8fd9\u4e2a tensor \u7684\u503c\uff08\u521b\u5efa x \u7684\u526f\u672c\uff09\uff0c\u4e14\u5185\u5b58\u90fd\u662f\u4e0e x \u5171\u4eab\uff0c\u5373\u4fee\u6539\u540e\u4e5f\u4f1a\u5f71\u54cd x \u7684\u503c\uff0c\u4f46\u4e0d\u4f1a\u81ea\u52a8\u5fae\u5206\uff0c require s_grad = False \uff1b\u4e24\u8005\u533a\u522b\u5728\u4e8e\u5728\u540e\u7eed\u7684\u53cd\u5411\u4f20\u64ad\u4e2d\uff0ctensor.data \u4e0d\u4f1a\u62a5\u9519\uff0c\u6240\u4ee5 detach() \u4f1a\u66f4\u52a0\u5b89\u5168 pytorch .detach() .detach_() \u548c .data\u7528\u4e8e\u5207\u65ad\u53cd\u5411\u4f20\u64ad - \u6162\u884c\u539a\u79ef","title":"Using the gradients"},{"location":"ML/Pytorch/#linear-regression","text":"","title":"Linear Regression"},{"location":"ML/Pytorch/#example","text":"\u635f\u5931\u51fd\u6570\uff1aRSS\uff0c\u6b8b\u5dee\u5e73\u65b9\u548c \u6570\u636e\u51c6\u5907 true_w \u662f\u771f\u5b9e\u53c2\u6570\uff0cy \u901a\u8fc7 \\(x@w\\) \u200b\u200b \u52a0\u4e0a\u4e00\u4e2a\u504f\u5dee\u83b7\u5f97 d = 2 n = 50 x = torch . randn ( n , d ) true_w = torch . tensor ([[ - 1.0 ],[ 2.0 ]]) y = x @true_w + torch . randn ( n , 1 ) * 0.1 \u521b\u5efa\u7ebf\u6027\u56de\u5f52\u6a21\u578b\u548c\u635f\u5931\u51fd\u6570 def model ( x , w ): return x @w def rss ( y , h_hat ): return torch . norm ( y - h_hat ) ** 2 / n \u4f7f\u7528\u68af\u5ea6\u8fdb\u884c\u68af\u5ea6\u4e0b\u964d\u6cd5\u7ebf\u6027\u56de\u5f52 w = torch . tensor ([[ 1. ],[ 0 ]], requires_grad = True ) for i in range ( 20 ): y_hat = model ( x , w ) loss = rss ( y , y_hat ) loss . backward () print ( 'loss = %f ' % loss . item (), \\\\ \" \\t w =\" , w . tolist ()) w . data = w . data - lr * w . grad w . grad . detach_ () w . grad . zero_ () loss = 6.877078 w = [[ 1.0 ], [ 0.0 ]] loss = 4.700166 w = [[ 0.6123040914535522 ], [ 0.29769018292427063 ]] loss = 3.225300 w = [[ 0.3017166256904602 ], [ 0.5531282424926758 ]] loss = 2.221793 w = [[ 0.052597105503082275 ], [ 0.7719148397445679 ]] loss = 1.536276 w = [[ - 0.1474691480398178 ], [ 0.9590051174163818 ]] loss = 1.066256 w = [[ - 0.3083454966545105 ], [ 1.1187583208084106 ]] loss = 0.742897 w = [[ - 0.4378759264945984 ], [ 1.2549899816513062 ]] loss = 0.519751 w = [[ - 0.5423045754432678 ], [ 1.371025800704956 ]] loss = 0.365329 w = [[ - 0.6266074180603027 ], [ 1.4697538614273071 ]] loss = 0.258197 w = [[ - 0.694753885269165 ], [ 1.5536739826202393 ]] loss = 0.183704 w = [[ - 0.7499141693115234 ], [ 1.6249440908432007 ]] loss = 0.131802 w = [[ - 0.7946230173110962 ], [ 1.6854223012924194 ]] loss = 0.095576 w = [[ - 0.8309094309806824 ], [ 1.7367050647735596 ]] loss = 0.070251 w = [[ - 0.8603994846343994 ], [ 1.7801612615585327 ]] loss = 0.052521 w = [[ - 0.8843981027603149 ], [ 1.8169628381729126 ]] loss = 0.040094 w = [[ - 0.9039536118507385 ], [ 1.8481112718582153 ]] loss = 0.031374 w = [[ - 0.9199094772338867 ], [ 1.8744614124298096 ]] loss = 0.025249 w = [[ - 0.9329451322555542 ], [ 1.8967417478561401 ]] loss = 0.020944 w = [[ - 0.9436085224151611 ], [ 1.9155727624893188 ]] loss = 0.017916 w = [[ - 0.9523422122001648 ], [ 1.931482195854187 ]]","title":"Example"},{"location":"ML/Pytorch/#torchnnmodule","text":"","title":"torch.nn.Module"},{"location":"ML/Pytorch/#linear-module","text":"d_in = 3 d_out = 4 linear_module = nn . Linear ( d_in , d_out ) example_tensor = torch . tensor ([[ 1. , 2 , 3 ],[ 4 , 5 , 6 ]]) transformed = linear_module ( example_tensor ) print ( 'example_tensor' , example_tensor . shape ) print ( 'transormed' , transformed . shape ) print () print ( 'We can see that the weights exist in the background \\n ' ) print ( 'W:' , linear_module . weight ) print ( 'b:' , linear_module . bias ) ''' example_tensor torch.Size([2, 3]) transormed torch.Size([2, 4]) We can see that the weights exist in the background W: Parameter containing: tensor([[ 0.5260, 0.4925, -0.0887], [ 0.3944, 0.4080, 0.2182], [-0.1409, 0.0518, 0.3034], [ 0.0913, 0.2452, -0.2616]], requires_grad=True) b: Parameter containing: tensor([0.5021, 0.0118, 0.1383, 0.4757], requires_grad=True) '''","title":"Linear Module"},{"location":"ML/Pytorch/#activation-functions","text":"activation_fn = nn . ReLU () # we instantiate an instance of the ReLU module example_tensor = torch . tensor ([ - 1.0 , 1.0 , 0.0 ]) activated = activation_fn ( example_tensor ) print ( 'example_tensor' , example_tensor ) print ( 'activated' , activated ) ''' example_tensor tensor([-1., 1., 0.]) activated tensor([0., 1., 0.]) '''","title":"Activation functions"},{"location":"ML/Pytorch/#sequential","text":"d_in = 3 d_hidden = 4 d_out = 1 model = torch . nn . Sequential ( nn . Linear ( d_in , d_hidden ), nn . Tanh (), nn . Linear ( d_hidden , d_out ), nn . Sigmoid () ) example_tensor = torch . tensor ([[ 1. , 2 , 3 ],[ 4 , 5 , 6 ]]) transformed = model ( example_tensor ) print ( 'transformed' , transformed . shape ) ''' transformed torch.Size([2, 1]) ''' \u4e0a\u9762\u7684\u5f0f\u5b50\u7b49\u4ef7\u4e8e d_in = 3 d_hidden = 4 d_out = 1 linear = nn . Linear ( d_in , d_hidden ) tanh = nn . Tanh () linear2 = nn . Linear ( d_hidden , d_out ) sigmoid = nn . Sigmoid () tensor_input = torch . tensor ([[ 1. , 2 , 3 ],[ 4 , 5 , 6 ]]) tensor_input = linear ( tensor_input ) tensor_input = tanh ( tensor_input ) tensor_input = linear2 ( tensor_input ) transformed = sigmoid ( tensor_input ) print ( transformed ) \u83b7\u53d6\u53c2\u6570 params = model . parameters () for param in params : print ( param ) ''' Parameter containing: tensor([[-0.5607, 0.4221, -0.0254], [-0.3630, 0.4541, 0.0275], [-0.0703, -0.1463, 0.3065], [ 0.0065, -0.2664, 0.0267]], requires_grad=True) Parameter containing: tensor([-0.3196, 0.2911, 0.1999, -0.3758], requires_grad=True) Parameter containing: tensor([[-0.0289, 0.1544, 0.3992, -0.3301]], requires_grad=True) Parameter containing: tensor([-0.1438], requires_grad=True) '''","title":"Sequential"},{"location":"ML/Pytorch/#loss-functions","text":"mse_loss_fn = nn . MSELoss () input = torch . tensor ([[ 0. , 0 , 0 ]]) target = torch . tensor ([[ 1. , 0 , - 1 ]]) loss = mse_loss_fn ( input , target ) print ( loss ) ''' tensor(0.6667) '''","title":"Loss functions"},{"location":"ML/Pytorch/#torchoptim","text":"\u4f7f\u7528\u4f18\u5316\u5668 Optimizer \u642d\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u795e\u7ecf\u7f51\u7edc \u4e0b\u9762\u7684\u4f8b\u5b50 GD \u4e86\u4e00\u6b21 # create a simple model model = nn . Linear ( 1 , 1 ) # create a simple dataset X_simple = torch . tensor ([[ 1. ]]) y_simple = torch . tensor ([[ 2. ]]) # create our optimizer # \u5fc5\u987b\u8981\u628amodel\u7684\u53c2\u6570\u5582\u7ed9optim\uff0clr\u53ef\u4ee5\u4e0d\u5199\uff0c\u4f1a\u6709\u9ed8\u8ba4\u53c2\u6570\u503c optim = torch . optim . SGD ( model . parameters (), lr = 1e-2 ) mse_loss_fn = nn . MSELoss () y_hat = model ( X_simple ) print ( 'model params before:' , model . weight ) loss = mse_loss_fn ( y_hat , y_simple ) # \u68af\u5ea6\u6e05\u96f6->\u8ba1\u7b97\u68af\u5ea6->\u68af\u5ea6\u4e0b\u964d # \u505aBackpropagation\u4e4b\u524d\u5148\u5c06\u68af\u5ea6\u6e05\u96f6\uff0c\u9632\u6b62\u4e0e\u65e7\u503c\u53e0\u52a0 optim . zero_grad () loss . backward () optim . step () print ( 'model params after:' , model . weight ) ''' model params before: Parameter containing: tensor([[-0.9604]], requires_grad=True) model params after: Parameter containing: tensor([[-0.9060]], requires_grad=True) '''","title":"torch.optim"},{"location":"ML/Pytorch/#linear-regression-using-gd","text":"step_size = 0.1 linear_module = nn . Linear ( d , 1 , bias = False ) loss_func = nn . MSELoss () optim = torch . optim . SGD ( linear_module . parameters (), lr = step_size ) print ( 'iter, \\t loss, \\t w' ) for i in range ( 20 ): y_hat = linear_module ( X ) loss = loss_func ( y_hat , y ) optim . zero_grad () loss . backward () optim . step () print ( ' {} , \\t {:.2f} , \\t {} ' . format ( i , loss . item (), linear_module . weight . view ( 2 ) . detach () . numpy ())) print ( ' \\n true w \\t\\t ' , true_w . view ( 2 ) . numpy ()) print ( 'estimated w \\t ' , linear_module . weight . view ( 2 ) . detach () . numpy ()) ''' iter, loss, w 0, 6.14, [-0.4951109 -0.20055914] 1, 4.19, [-0.64017504 0.1509075 ] 2, 2.87, [-0.7496651 0.4441856] 3, 1.98, [-0.8317375 0.689143 ] 4, 1.37, [-0.8927491 0.89393103] 5, 0.95, [-0.93764454 1.0652909 ] 6, 0.67, [-0.9702622 1.208804 ] 7, 0.47, [-0.99357456 1.3290964 ] 8, 0.33, [-1.0098771 1.4300069] 9, 0.23, [-1.0209374 1.5147243] 10, 0.17, [-1.028112 1.5859002] 11, 0.12, [-1.0324373 1.6457422] 12, 0.09, [-1.0347017 1.6960896] 13, 0.06, [-1.035502 1.7384766] 14, 0.05, [-1.0352864 1.7741843] 15, 0.04, [-1.0343897 1.8042834] 16, 0.03, [-1.033059 1.829669] 17, 0.02, [-1.031475 1.8510911] 18, 0.02, [-1.0297676 1.8691778] 19, 0.01, [-1.0280287 1.8844559] true w [-1. 2.] estimated w [-1.0280287 1.8844559] '''","title":"Linear regression using GD"},{"location":"ML/Pytorch/#linear-regression-using-sgd","text":"step_size = 0.01 linear_module = nn . Linear ( d , 1 ) loss_func = nn . MSELoss () optim = torch . optim . SGD ( linear_module . parameters (), lr = step_size ) print ( 'iter, \\t loss, \\t w' ) for i in range ( 200 ): rand_idx = np . random . choice ( n ) # take a random point from the dataset x = X [ rand_idx ] y_hat = linear_module ( x ) loss = loss_func ( y_hat , y [ rand_idx ]) # only compute the loss on the single point optim . zero_grad () loss . backward () optim . step () if i % 20 == 0 : print ( ' {} , \\t {:.2f} , \\t {} ' . format ( i , loss . item (), linear_module . weight . view ( 2 ) . detach () . numpy ())) print ( ' \\n true w \\t\\t ' , true_w . view ( 2 ) . numpy ()) print ( 'estimated w \\t ' , linear_module . weight . view ( 2 ) . detach () . numpy ()) ''' iter, loss, w 0, 5.33, [-0.52818084 0.2690754 ] 20, 1.33, [-0.5849738 0.54701847] 40, 0.21, [-0.68336743 0.93094164] 60, 0.41, [-0.76554966 1.3865377 ] 80, 0.22, [-0.8548197 1.528812 ] 100, 0.45, [-0.9011376 1.679943 ] 120, 0.04, [-0.9418524 1.7858417] 140, 0.00, [-0.97288156 1.857902 ] 160, 0.00, [-0.98335326 1.893024 ] 180, 0.01, [-0.9927237 1.904962 ] true w [-1. 2.] estimated w [-0.99158174 1.9331173 ] '''","title":"Linear regression using SGD"},{"location":"ML/Pytorch/#neural-network-basics-in-pytorch","text":"We will try and fit a simple neural network to the data. d = 1 n = 200 X = torch . rand ( n , d ) # rand \u751f\u6210\u7684\u968f\u673a\u6570\u5728 [0,1] # \u4e00\u4e2a\u7531 sin \u548c cos \u7684\u5408\u6210\u51fd\u6570 y = 4 * torch . sin ( np . pi * X ) * torch . cos ( 6 * np . pi * X ** 2 ) plt . scatter ( X . numpy (), y . numpy ()) plt . title ( 'plot of $f(x)$' ) plt . xlabel ( '$x$' ) plt . ylabel ( '$y$' ) plt . show () \u7528 pytorch \u642d\u5efa\u795e\u7ecf\u7f51\u7edc\u62df\u5408\u6570\u636e\u96c6\u7684\u66f2\u7ebf\uff0cactivation function \u7528 Tanh step_size = 0.05 n_epochs = 6000 n_hidden_1 = 32 n_hidden_2 = 32 d_out = 1 neural_network = nn . Sequential ( nn . Linear ( d , n_hidden_1 ), nn . Tanh (), nn . Linear ( n_hidden_1 , n_hidden_2 ), nn . Tanh (), nn . Linear ( n_hidden_2 , d_out ) ) loss_func = nn . MSELoss () optim = torch . optim . SGD ( neural_network . parameters (), lr = step_size ) print ( 'iter, \\t loss' ) for i in range ( n_epochs ): y_hat = neural_network ( X ) loss = loss_func ( y_hat , y ) optim . zero_grad () loss . backward () optim . step () if i % ( n_epochs // 10 ) == 0 : print ( ' {} , \\t {:.2f} ' . format ( i , loss . item ())) ''' iter, loss 0, 4.33 600, 4.27 1200, 3.87 1800, 1.54 2400, 0.71 3000, 0.78 3600, 0.24 4200, 0.10 4800, 0.08 5400, 0.08 ''' \u753b\u51fa\u62df\u5408\u540e\u7684\u66f2\u7ebf X_grid = torch . from_numpy ( np . linspace ( 0 , 1 , 50 )) . float () . view ( - 1 , d ) y_hat = neural_network ( X_grid ) plt . scatter ( X . numpy (), y . numpy ()) plt . plot ( X_grid . detach () . numpy (), y_hat . detach () . numpy (), 'r' ) plt . title ( 'plot of $f(x)$ and $\\hat {f} (x)$' ) plt . xlabel ( '$x$' ) plt . ylabel ( '$y$' ) plt . show ()","title":"Neural Network Basics in PyTorch"},{"location":"ML/Pytorch/#things-that-may-help","text":"","title":"Things that may help"},{"location":"ML/Pytorch/#momentum","text":"doc\uff1a Why Momentum Really Works (distill.pub) optim = torch . optim . SGD ( neural_network . parameters (), lr = step_size , momentum = momentum )","title":"Momentum"},{"location":"ML/Pytorch/#crossentropyloss","text":"loss = nn . CrossEntropyLoss ()","title":"CrossEntropyLoss"},{"location":"ML/Pytorch/#learning-rate-schedulers","text":"doc\uff1a torch.optim \u2014 PyTorch 1.9.0 documentation","title":"Learning rate schedulers"},{"location":"ML/Pytorch/#convolutions","text":"","title":"Convolutions"},{"location":"ML/Pytorch/#nnconv2d","text":"\u7528 CNN \u5904\u7406\u56fe\u50cf torch.nn.Conv2d doc\uff1a Conv2d \u2014 PyTorch 1.9.0 documentation torch.nn.Conv2d() \u7528\u6cd5\u8bb2\u89e3_\u5047\u88c5\u5f88\u574f\u7684\u8c26\u8c26\u541b torch . nn . Conv2d ( in_channels , out_channels , kernel_size , stride = 1 , padding = 0 , dilation = 1 , groups = 1 , bias = True , padding_mode = \u2018 zeros \u2019 ) in_channels \uff1a\u8f93\u5165\u7684\u901a\u9053\u6570\u76ee\uff0c\u6bd4\u5982 RGB \u5c31\u662f 3 \u901a\u9053 out_channels \uff1a\u8f93\u51fa\u7684\u901a\u9053\u6570\u76ee\uff0c\u5377\u79ef\u6838\u7684\u6570\u91cf kernel_size \uff1a\u5377\u79ef\u6838 (filter) \u5927\u5c0f\uff0cint \u6216\u8005 \u5143\u7ec4\uff0cint \u8868\u793a\u6b63\u65b9\u5f62\u7684\u5bbd\u5ea6 stride \uff1a\u6b65\u957f\uff0c\u9ed8\u8ba4 1 padding \uff1a\u5728\u8fb9\u754c\u589e\u52a0 \u503c\u4e3a0 \u7684\u8fb9\u8ddd\u7684\u957f\u5ea6\uff0c\u6216\u8005\u8bf4\u52a0\u51e0\u5708 0\uff0c\u9ed8\u8ba4\u4e3a 0 dilation \uff1a\u63a7\u5236\u5377\u79ef\u6838\u4e4b\u95f4\u7684\u95f4\u8ddd","title":"nn.Conv2d"},{"location":"ML/Pytorch/#nnbatchnorm2d","text":"\u5728\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u8bad\u7ec3\u65f6\u901a\u5e38\u4e00\u6b21\u8bad\u7ec3\u4e00\u4e2a batch\uff0c\u4f46\u662f\u6bcf\u4e2a batch \u7684\u5206\u5e03\u4e0d\u540c\uff0c\u6240\u4ee5\u4f1a\u5bf9\u4e0b\u4e00\u5c42\u7f51\u7edc\u7684\u5b66\u4e60\u5e26\u6765\u56f0\u96be\uff0cBatchNorm \u5c31\u662f\u628a\u6570\u636e\u6807\u51c6\u5316\uff08\u5747\u503c\u4e3a 0\uff0c \u65b9\u5dee\u4e3a 1\uff09\uff0c\u907f\u514d\u68af\u5ea6\u6d88\u5931\u548c\u68af\u5ea6\u7206\u70b8 torch . nn . BatchNorm2d ( num_features , eps = 1e-05 , momentum = 0.1 , affine = True ) num_features \uff1achannel \u6570 eps \uff1a\u4e3a\u4fdd\u8bc1\u6570\u503c\u7a33\u5b9a\u6027\uff08\u5206\u6bcd\u4e0d\u80fd\u8d8b\u8fd1\u6216\u53d60\uff09,\u7ed9\u5206\u6bcd\u52a0\u4e0a\u7684\u503c\u3002\u9ed8\u8ba4\u4e3a 1e-5 momentum \uff1a\u52a8\u6001\u5747\u503c\u548c\u52a8\u6001\u65b9\u5dee\u6240\u4f7f\u7528\u7684\u52a8\u91cf affine \uff1a \u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u5f53\u8bbe\u4e3atrue\uff0c\u7ed9\u8be5\u5c42\u6dfb\u52a0\u53ef\u5b66\u4e60\u7684\u4eff\u5c04\u53d8\u6362\u53c2\u6570","title":"nn.BatchNorm2d"},{"location":"ML/Pytorch/#nnmaxpool2d","text":"torch . nn . MaxPool2d ( kernel_size , stride = None , padding = 0 , dilation = 1 , return_indices = False , ceil_mode = False ) kernel_size \uff1amax pooling \u7a97\u53e3\u5927\u5c0f stride \uff1a\u7a97\u53e3\u79fb\u52a8\u6b65\u957f\uff0c\u9ed8\u8ba4\u4e3a kernel_size padding \uff1a\u5728\u8fb9\u754c\u589e\u52a0 \u503c\u4e3a0 \u7684\u8fb9\u8ddd\u7684\u957f\u5ea6\uff0c\u6216\u8005\u8bf4\u52a0\u51e0\u5708 0\uff0c\u9ed8\u8ba4\u4e3a 0","title":"nn.MaxPool2d"},{"location":"ML/Pytorch/#custom-datasets-dataloaders","text":"torch.utils.data.Dataset \u662f\u8868\u793a\u6570\u636e\u96c6\u7684\u62bd\u8c61\u7c7b\uff0c\u4f60\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u5e94\u7ee7\u627f Dataset \u5e76\u8986\u76d6\u4ee5\u4e0b\u65b9\u6cd5\uff1a __len__ so that len(dataset) returns the size of the dataset. __getitem__ to support the indexing such that dataset[i] can be used to get i-th sample from torch.utils.data import Dataset , DataLoader class MyDataset ( Dataset ): def __init__ ( self ): # \u53ef\u4ee5\u5728\u8fd9\u91cc\u8bfb\u53d6\u6570\u636e x , y = ... self . x = x self . y = y def __len__ ( self ): return len ( self . x ) def __getitem__ ( self , idx ): return self . x [ idx ], self . y [ idx ] myDataset = MyDataset () torch.utils.data.DataLoader train_loader = DataLoader ( dataset = myDataset , # \u4f20\u9012\u6570\u636e\u96c6 batch_size = 32 , # \u5c0f\u6279\u91cf\u7684\u6570\u636e\u5927\u5c0f\uff0c\u6bcf\u6b21\u52a0\u8f7d\u4e00batch\u6570\u636e shuffle = True , # \u6253\u4e71\u6570\u636e\u4e4b\u95f4\u7684\u987a\u5e8f num_workers = 2 ) # \u4f7f\u7528\u591a\u5c11\u4e2a\u5b50\u8fdb\u7a0b\u6765\u52a0\u8f7d\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a0, \u4ee3\u8868\u4f7f\u7528\u4e3b\u7ebf\u7a0b\u52a0\u8f7dbatch\u6570\u636e","title":"Custom Datasets, DataLoaders"},{"location":"ML/Pytorch/#transforms","text":"\u53c2\u8003\uff1a PyTorch \u5b66\u4e60\u7b14\u8bb0:transforms\u7684\u4e8c\u5341\u4e8c\u4e2a\u65b9\u6cd5 \u521d\u8bc6-CV\u7684\u535a\u5ba2 \u56fe\u50cf\u53d8\u6362\uff0c\u53ef\u4ee5\u5229\u7528 Compose \u628a\u53d8\u6362\u8fde\u63a5\u8d77\u6765 eg\uff1a import torchvision.transforms as transforms train_transform = transforms . Compose ([ transforms . CenterCrop ( 10 ), transforms . ToTensor (), ])","title":"Transforms"},{"location":"ML/Pytorch/#crop","text":"","title":"\u88c1\u526a Crop"},{"location":"ML/Pytorch/#_1","text":"torchvision . transforms . RandomCrop \uff08 size \uff0c padding = None \uff0c pad_if_needed = False \uff0c fill = 0 \uff0c padding_mode = 'constant' \uff09","title":"\u968f\u673a\u88c1\u526a"},{"location":"ML/Pytorch/#_2","text":"torchvision . transforms . CenterCrop ( size )","title":"\u4e2d\u5fc3\u88c1\u526a"},{"location":"ML/Pytorch/#_3","text":"torchvision . transforms . RandomResizedCrop ( size , scale = ( 0.08 , 1.0 ), ratio = ( 0.75 , 1.3333333333333333 ), interpolation = 2 )","title":"\u968f\u673a\u957f\u5bbd\u6bd4\u88c1\u526a"},{"location":"ML/Pytorch/#_4","text":"torchvision . transforms . FiveCrop ( size )","title":"\u4e0a\u4e0b\u5de6\u53f3\u4e2d\u5fc3\u88c1\u526a"},{"location":"ML/Pytorch/#_5","text":"torchvision . transforms . TenCrop ( size , vertical_flip = False )","title":"\u4e0a\u4e0b\u5de6\u53f3\u4e2d\u5fc3\u88c1\u526a\u540e\u7ffb\u8f6c"},{"location":"ML/Pytorch/#flip-and-rotation","text":"","title":"\u7ffb\u8f6c\u548c\u65cb\u8f6c Flip and Rotation"},{"location":"ML/Pytorch/#p","text":"torchvision . transforms . RandomHorizontalFlip ( p = 0.5 ) # p \u9ed8\u8ba4\u4e3a 0.5","title":"\u4f9d\u6982\u7387 p \u6c34\u5e73\u7ffb\u8f6c"},{"location":"ML/Pytorch/#p_1","text":"torchvision . transforms . RandomVerticalFlip ( p = 0.5 )","title":"\u4f9d\u6982\u7387 p \u5782\u76f4\u7ffb\u8f6c"},{"location":"ML/Pytorch/#_6","text":"torchvision . transforms . RandomRotation ( degrees , resample = False , expand = False , center = None ) degree \uff1a\u5982\u679c\u4e0d\u662f\u4e00\u4e2a\u8303\u56f4\u800c\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u90a3\u8303\u56f4\u662f \\((-degree,degree)\\)","title":"\u968f\u673a\u65cb\u8f6c"},{"location":"ML/Pytorch/#resize","text":"","title":"\u56fe\u50cf\u53d8\u6362 Resize"},{"location":"ML/Pytorch/#resize_1","text":"torchvision . transforms . Resize ( size , interpolation = 2 )","title":"Resize"},{"location":"ML/Pytorch/#_7","text":"torchvision . transforms . Normalize ( mean , std )","title":"\u6807\u51c6\u5316"},{"location":"ML/Pytorch/#tensor","text":"\u5c06 PIL Image \u6216\u8005 ndarray \u8f6c\u6362\u4e3a tensor\uff0c\u5e76\u4e14\u5f52\u4e00\u5316\u81f3 [0-1] \u6ce8\u610f\u4e8b\u9879\uff1a\u5f52\u4e00\u5316\u81f3 [0, 1] \u662f\u76f4\u63a5\u9664\u4ee5255\uff0c\u82e5\u81ea\u5df1\u7684 ndarray \u6570\u636e\u5c3a\u5ea6\u6709\u53d8\u5316\uff0c\u5219\u9700\u8981\u81ea\u884c\u4fee\u6539 torchvision . transforms . ToTensor","title":"\u8f6c\u4e3a Tensor"},{"location":"ML/Pytorch/#_8","text":"torchvision . transforms . Pad ( padding , fill = 0 , padding_mode = 'constant' )","title":"\u586b\u5145"},{"location":"ML/Pytorch/#_9","text":"torchvision . transforms . ColorJitter ( brightness = 0 , contrast = 0 , saturation = 0 , hue = 0 )","title":"\u4fee\u6539\u4eae\u5ea6\u3001\u5bf9\u6bd4\u5ea6\u548c\u9971\u548c\u5ea6"},{"location":"ML/Pytorch/#_10","text":"torchvision . transforms . Grayscale ( num_output_channels = 1 )","title":"\u8f6c\u7070\u5ea6\u56fe"},{"location":"ML/Pytorch/#_11","text":"torchvision . transforms . LinearTransformation ( transformation_matrix )","title":"\u7ebf\u6027\u53d8\u6362"},{"location":"ML/Pytorch/#_12","text":"torchvision . transforms . RandomAffine ( degrees , translate = None , scale = None , shear = None , resample = False , fillcolor = 0 )","title":"\u4eff\u5c04\u53d8\u6362"},{"location":"ML/Pytorch/#p_2","text":"torchvision . transforms . RandomGrayscale ( p = 0.1 )","title":"\u4f9d\u6982\u7387 p \u8f6c\u4e3a\u7070\u5ea6\u56fe"},{"location":"ML/Pytorch/#pilimage","text":"\u5c06 tensor \u6216\u8005 ndarray \u7684\u6570\u636e\u8f6c\u6362\u4e3a PIL Image \u7c7b\u578b\u6570\u636e \u53c2\u6570\uff1a mode \u4e3a None \u65f6\uff0c\u4e3a1\u901a\u9053\uff0c mode=3 \u901a\u9053\u9ed8\u8ba4\u8f6c\u6362\u4e3a RGB\uff0c4 \u901a\u9053\u9ed8\u8ba4\u8f6c\u6362\u4e3aRGBA torchvision . transforms . ToPILImage ( mode = None )","title":"\u8f6c\u6362\u4e3a PILImage"},{"location":"ML/Pytorch/#lambda","text":"torchvision . transforms . Lambda \uff08 lambd \uff09","title":"Lambda"},{"location":"ML/Pytorch/#transforms_1","text":"","title":"\u5bf9 transforms \u64cd\u4f5c"},{"location":"ML/Pytorch/#randomchoice","text":"torchvision . transforms . RandomChoice ( transforms )","title":"RandomChoice"},{"location":"ML/Pytorch/#randomapply","text":"torchvision . transforms . RandomApply ( transforms , p = 0.5 )","title":"RandomApply"},{"location":"ML/Pytorch/#randomorder","text":"torchvision . transforms . RandomOrder ( transforms )","title":"RandomOrder"},{"location":"ML/Pytorch/#_13","text":"","title":"\u5176\u4ed6"},{"location":"ML/Pytorch/#modeltrain-modeleval-torchno_grad","text":"Pytorch\uff1amodel.train()\u548cmodel.eval()\u7528\u6cd5\u548c\u533a\u522b\uff0c\u4ee5\u53camodel.eval()\u548ctorch.no_grad()\u7684\u533a\u522b model.train() \u5728\u8bad\u7ec3\u524d\u9700\u8981\u5199 model.train() \uff0c\u4f7f Batch Normalization \u5c42\u7528\u7684\u662f\u6bcf\u4e00\u6279\u6570\u636e\u7684\u5747\u503c\u548c\u65b9\u5dee\uff0c\u4f7f Dropout \u968f\u673a\u53d6\u4e00\u90e8\u5206\u7f51\u7edc\u6765\u8bad\u7ec3\u66f4\u65b0\u53c2\u6570 model . train model.eval() \u5728\u6d4b\u8bd5\u524d\u9700\u8981\u5199 model.eval() \uff0c\u4f7f Batch Normalization \u5c42\u7528\u7684\u662f\u5168\u90e8\u8bad\u7ec3\u6570\u636e\u7684\u5747\u503c\u548c\u65b9\u5dee\uff0c\u4f7f Dropout \u4e0d\u8fdb\u884c\u968f\u673a\u820d\u5f03\u795e\u7ecf\u5143 model . eval () torch.no_grad() \u5728 eval() \u6a21\u5f0f\u4e0b\u4ecd\u7136\u4f1a\u8fdb\u884c gradient \u7684\u8ba1\u7b97\u884c\u4e3a\uff0c\u53ea\u662f\u4e0d\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\uff0c with torch.no_grad() \u7528\u4ee5\u505c\u6b62 autograd \u6a21\u5757\u7684\u5de5\u4f5c\uff0c\u4ee5\u8d77\u5230\u52a0\u901f\u548c\u8282\u7701\u663e\u5b58\u7684\u4f5c\u7528 with torch . no_grad (): ...","title":"model.train() &amp;&amp; model.eval() &amp;&amp; torch.no_grad()"},{"location":"ML/Pytorch/#stack-cat","text":"torch.stack()\u7684\u5b98\u65b9\u89e3\u91ca\uff0c\u8be6\u89e3\u4ee5\u53ca\u4f8b\u5b50_xinjieyuan\u7684\u535a\u5ba2-CSDN\u535a\u5ba2","title":"stack() &amp;&amp; cat()"},{"location":"ML/Unsupervised%20Learning%20Deep%20Auto-encoder/","text":"Unsupervised Learning: Deep Auto-encoder \u00b6 Deep Auto-encoder\uff1a\u81ea\u7f16\u7801\u5668 Introduction \u00b6 Auto-encoder \u5176\u5b9e\u662f\u4e00\u4e2a\u81ea\u6211\u538b\u7f29\u548c\u89e3\u538b\u7684\u8fc7\u7a0b \uff0c\u60f3\u8981\u83b7\u53d6\u538b\u7f29\u540e\u7684code\uff08\u964d\u7ef4\uff09\uff0c\u56e0\u4e3a\u662f Unsupervised \u7684\uff0c\u6240\u4ee5\u5355\u7528\u4e00\u4e2a Encoder \u662f\u6ca1\u529e\u6cd5 train \u7684\uff08\u6ca1\u6709 output\uff09\uff0c\u4e00\u4e2a\u5355\u72ec\u7684 Decoder \u4e5f\u6ca1\u6709\u529e\u6cd5 train\uff08\u6ca1\u6709 input\uff09\uff0c\u4f46\u5982\u679c\u628a\u4ed6\u4eec\u63a5\u5728\u4e00\u8d77\uff0ctarget \u662f minimize inoput \u4e0e output \u7684\u5dee\u8ddd\u5c31\u53ef\u4ee5 train \u4e86 Encoder(\u7f16\u7801\u5668)\uff0c\u5b83\u53ef\u4ee5\u628a\u539f\u5148\u7684\u56fe\u50cf\u538b\u7f29\u6210\u66f4\u4f4e\u7ef4\u5ea6\u7684\u5411\u91cf Decoder(\u89e3\u7801\u5668)\uff0c\u5b83\u53ef\u4ee5\u628a\u538b\u7f29\u540e\u7684\u5411\u91cf\u8fd8\u539f\u6210\u56fe\u50cf Compare with PCA \u00b6 \u5b9e\u9645\u4e0a PCA \u964d\u7ef4\u65f6\u7528\u5230\u7684\u601d\u60f3\u4e0e\u4e4b\u975e\u5e38\u7c7b\u4f3c \u5728 PCA \u4e2d\uff0c\u6211\u4eec\u5148\u628a\u5747\u4e00\u5316\u540e\u7684 \\(x\\) \u6839\u636e\u7ec4\u4ef6 \\(W\\) \u5206\u89e3\u5230\u66f4\u4f4e\u7ef4\u5ea6\u7684 \\(c\\) \uff0c\u7136\u540e\u518d\u5c06\u7ec4\u4ef6\u6743\u91cd \\(c\\) \u4e58\u4e0a\u7ec4\u4ef6\u7684\u53cd\u7f6e \\(W^T\\) \u5f97\u5230\u91cd\u7ec4\u540e\u7684 \\(\\hat x\\) \uff0c\u540c\u6837\u6211\u4eec\u671f\u671b\u91cd\u6784\u540e\u7684 \\(\\hat x\\) \u4e0e\u539f\u59cb\u7684 \\(x\\) \u8d8a\u63a5\u8fd1\u8d8a\u597d\uff0c\u5373 minimize \\((x-\\hat{x})^2\\) \u5982\u679c\u628a\u8fd9\u4e2a\u8fc7\u7a0b\u770b\u4f5c\u662f\u795e\u7ecf\u7f51\u7edc\uff0c\u90a3\u4e48\u539f\u59cb\u7684 \\(x\\) \u5c31\u662f input layer\uff0c\u91cd\u6784 \\(\\hat x\\) \u5c31\u662f output layer\uff0c\u4e2d\u95f4\u7ec4\u4ef6\u5206\u89e3\u6743\u91cd \\(c\\) \u5c31\u662f hidden layer\uff0c\u5728 PCA \u4e2d\u5b83\u662f linear \u7684\uff0c\u6211\u4eec\u901a\u5e38\u53c8\u53eb\u5b83\u74f6\u9888\u5c42 (Bottleneck layer\uff0c\u662f\u4e00\u4e2a\u4f4e\u7ef4\u7684 vector\uff0c\u964d\u7ef4\u7684\u7ed3\u679c) \u56fe\u4e2d\u5e76\u6ca1\u6709\u51cf\u53bb \\(\\bar{x}\\) \uff0c\u56e0\u4e3a\u4e00\u822c\u5728\u62ff\u5230 data \u8d77\u624b\u90fd\u4f1a\u505a normalization \u800c\u4e14\u8fd9\u4e2a network \u662f\u53ef\u4ee5 deep \u7684 Deep Auto-encoder \u00b6 Multi Layer \u00b6 \u5bf9 deep \u7684\u81ea\u7f16\u7801\u5668\u6765\u8bf4\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u901a\u8fc7\u591a\u7ea7\u7f16\u7801\u964d\u7ef4\uff0c\u518d\u7ecf\u8fc7\u591a\u7ea7\u89e3\u7801\u8fd8\u539f\u7684\u8fc7\u7a0b \u5982\u679c\u6309\u7167 PCA \u7684\u601d\u8def\uff0c\u5219 Encoder \u7684\u53c2\u6570 \\(W_i\\) \u9700\u8981\u548c Decoder \u7684\u53c2\u6570 \\(W_i^T\\) \u4fdd\u6301\u4e00\u81f4\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7\u7ed9\u4e24\u8005\u76f8\u540c\u7684\u521d\u59cb\u503c\u5e76\u8bbe\u7f6e\u540c\u6837\u7684\u66f4\u65b0\u8fc7\u7a0b\u5f97\u5230\uff0c\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff0c\u53ef\u4ee5\u8282\u7701\u4e00\u534a\u7684\u53c2\u6570\uff0c\u964d\u4f4e overfitting \u7684\u6982\u7387 \u4f46\u8fd9\u4ef6\u4e8b\u60c5\u5e76\u4e0d\u662f\u5fc5\u8981\u7684\uff0c\u5b9e\u9645\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u5b8c\u5168\u53ef\u4ee5\u5bf9\u795e\u7ecf\u7f51\u7edc\u8fdb\u884c\u76f4\u63a5\u8bad\u7ec3\u800c\u4e0d\u7528\u4fdd\u6301\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u7684\u53c2\u6570\u4e00\u81f4 Visualize \u00b6 \u4e0b\u56fe\u7ed9\u51fa\u4e86 Hinton \u5206\u522b\u91c7\u7528 PCA \u548c Deep Auto-encoder \u5bf9\u624b\u5199\u6570\u5b57\u8fdb\u884c\u7f16\u7801\u89e3\u7801\u540e\u7684\u7ed3\u679c\uff0c\u4ece 784 \u7ef4\u964d\u523030 \u7ef4\uff0c\u53ef\u4ee5\u770b\u51fa\uff0cDeep \u7684\u81ea\u7f16\u7801\u5668\u8fd8\u539f\u6548\u679c\u6bd4 PCA \u8981\u66f4\u597d \u5982\u679c\u5c06\u5176\u964d\u5230\u4e8c\u7ef4\u5e73\u9762\u505a\u53ef\u89c6\u5316\uff0c\u4e0d\u540c\u989c\u8272\u4ee3\u8868\u4e0d\u540c\u7684\u6570\u5b57\uff0c\u660e\u663e Deep Auto-Encoding \u7684\u6548\u679c\u66f4\u597d Text Retrieval \u00b6 Auto-encoder \u4e5f\u53ef\u4ee5\u88ab\u7528\u5728\u6587\u5b57\u5904\u7406\u4e0a \u6bd4\u5982\u6211\u4eec\u8981\u505a\u6587\u5b57\u68c0\u7d22\uff0c\u5f88\u7b80\u5355\u7684\u4e00\u4e2a\u505a\u6cd5\u662f Vector Space Model\uff0c\u628a\u6bcf\u4e00\u7bc7\u6587\u7ae0\u90fd\u8868\u793a\u6210\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a vector \u5047\u8bbe\u67e5\u8be2\u8005\u8f93\u5165\u4e86\u67d0\u4e2a\u8bcd\u6c47\uff0c\u90a3\u6211\u4eec\u5c31\u628a\u8be5\u67e5\u8be2\u8bcd\u6c47\u4e5f\u53d8\u6210\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u70b9\uff0c\u5e76\u8ba1\u7b97 query \u548c\u6bcf\u4e00\u7bc7 document \u4e4b\u95f4\u7684\u5185\u79ef (inner product) \u6216\u4f59\u5f26\u76f8\u4f3c\u5ea6 (cos-similarity) \u6ce8\uff1a\u4f59\u5f26\u76f8\u4f3c\u5ea6\u6709\u5747\u4e00\u5316\u7684\u6548\u679c\uff0c\u53ef\u80fd\u4f1a\u5f97\u5230\u66f4\u597d\u7684\u7ed3\u679c \u4e0b\u56fe\u4e2d\u8ddfquery\u5411\u91cf\u6700\u63a5\u8fd1\u7684\u51e0\u4e2a\u5411\u91cf\u7684cosine-similarity\u662f\u6700\u5927\u7684\uff0c\u4e8e\u662f\u53ef\u4ee5\u4ece\u8fd9\u51e0\u7bc7\u6587\u7ae0\u4e2d\u53bb\u68c0\u7d22 \u8fd9\u4e2a\u6a21\u578b\u7684\u597d\u574f\uff0c\u5c31\u53d6\u51b3\u4e8e\u4ece document \u8f6c\u5316\u800c\u6765\u7684 vector \u7684\u597d\u574f\uff0c\u5b83\u662f\u5426\u80fd\u591f\u5145\u5206\u8868\u8fbe\u6587\u7ae0\u4fe1\u606f Bag-of-word \u00b6 \u6700\u7b80\u5355\u7684 vector \u8868\u793a\u65b9\u6cd5\u662f Bag-of-word\uff0c\u7ef4\u6570\u7b49\u4e8e\u6240\u6709\u8bcd\u6c47\u7684\u603b\u6570\uff0c\u67d0\u4e00\u7ef4\u7b49\u8868\u793a\u8be5\u8bcd\u6c47\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6b64\u5916\u8fd8\u53ef\u4ee5\u6839\u636e\u8bcd\u6c47\u7684\u91cd\u8981\u6027\u5c06\u5176\u52a0\u6743\uff1b\u4f46\u8fd9\u4e2a\u6a21\u578b\u662f\u975e\u5e38\u8106\u5f31\u7684\uff0c\u5bf9\u5b83\u6765\u8bf4\u6bcf\u4e2a\u8bcd\u6c47\u90fd\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u65e0\u6cd5\u4f53\u73b0\u51fa\u8bcd\u6c47\u4e4b\u95f4\u7684\u8bed\u4e49 (semantic) Auto-encoder \u00b6 \u867d\u7136 Bag-of-word \u4e0d\u80fd\u76f4\u63a5\u7528\u4e8e\u8868\u793a\u6587\u7ae0\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u4f5c\u4e3a Auto-encoder \u7684 input\uff0c\u901a\u8fc7\u964d\u7ef4\u6765\u62bd\u53d6\u6709\u6548\u4fe1\u606f\uff0c\u4ee5\u83b7\u53d6\u6240\u9700\u7684 vector \u540c\u6837\u4e3a\u4e86\u53ef\u89c6\u5316\uff0c\u8fd9\u91cc\u5c06Bag-of-word\u964d\u7ef4\u5230\u4e8c\u7ef4\u5e73\u9762\u4e0a\uff0c\u4e0b\u56fe\u4e2d\u6bcf\u4e2a\u70b9\u90fd\u4ee3\u8868\u4e00\u7bc7\u6587\u7ae0\uff0c\u4e0d\u540c\u989c\u8272\u5219\u4ee3\u8868\u4e0d\u540c\u7684\u6587\u7ae0\u7c7b\u578b \u5982\u679c\u7528\u6237\u505a\u67e5\u8be2\uff0c\u5c31\u628a\u67e5\u8be2\u7684\u8bed\u53e5\u7528\u76f8\u540c\u7684\u65b9\u5f0f\u6620\u5c04\u5230\u8be5\u4e8c\u7ef4\u5e73\u9762\u4e0a\uff0c\u5e76\u627e\u51fa\u5c5e\u4e8e\u540c\u4e00\u7c7b\u522b\u7684\u6240\u6709\u6587\u7ae0\u5373\u53ef \u5728\u77e9\u9635\u5206\u89e3 (Matrix Factorization) \u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86 LSA \u7b97\u6cd5\uff0c\u5b83\u53ef\u4ee5\u7528\u6765\u5bfb\u627e\u6bcf\u4e2a\u8bcd\u6c47\u548c\u6bcf\u7bc7\u6587\u7ae0\u80cc\u540e\u7684\u9690\u85cf\u5173\u7cfb (vector)\uff0c\u5982\u679c\u5728\u8fd9\u91cc\u6211\u4eec\u91c7\u7528 LSA\uff0c\u5e76\u4f7f\u7528\u4e8c\u7ef4 latent vector \u6765\u8868\u793a\u6bcf\u7bc7\u6587\u7ae0\uff0c\u5f97\u5230\u7684\u53ef\u89c6\u5316\u7ed3\u679c\u5982\u4e0a\u56fe\u53f3\u4e0b\u89d2\u6240\u793a\uff0c\u53ef\u89c1\u6548\u679c\u5e76\u6ca1\u6709 Auto-encoder \u597d Similar Image Search \u00b6 Auto-encoder \u540c\u6837\u53ef\u4ee5\u88ab\u7528\u5728\u56fe\u50cf\u68c0\u7d22\u4e0a\uff0c\u6bd4\u5982\u4ee5\u56fe\u641c\u56fe \u6700\u7b80\u5355\u7684\u505a\u6cd5\u5c31\u662f\u76f4\u63a5\u5bf9\u8f93\u5165\u7684\u56fe\u7247\u4e0e\u6570\u636e\u5e93\u4e2d\u7684\u56fe\u7247\u8ba1\u7b97 pixel \u7684\u76f8\u4f3c\u5ea6\uff0c\u5e76\u6311\u51fa\u6700\u50cf\u7684\u56fe\u7247\uff0c\u4f46\u8fd9\u79cd\u65b9\u6cd5\u7684\u6548\u679c\u5f88\u5dee\uff0c\u56e0\u4e3a\u5355\u7eaf\u7684 pixel \u6240\u80fd\u591f\u8868\u8fbe\u7684\u4fe1\u606f\u592a\u5c11\u4e86 \u6211\u4eec\u9700\u8981\u4f7f\u7528 Auto-encoder \u5bf9\u56fe\u50cf\u8fdb\u884c\u964d\u7ef4\u548c\u7279\u5f81\u63d0\u53d6\uff0c\u5e76\u5728\u7f16\u7801\u5f97\u5230\u7684 code \u6240\u5728\u7a7a\u95f4\u505a\u76f8\u4f3c\u5ea6\u7684\u68c0\u7d22 \u8fd9\u4e48\u505a\u7684\u597d\u5904\u5982\u4e0b\uff1a Auto-encoder \u53ef\u4ee5\u901a\u8fc7\u964d\u7ef4\u63d0\u53d6\u51fa\u4e00\u5f20\u56fe\u50cf\u4e2d\u6700\u6709\u7528\u7684\u7279\u5f81\u4fe1\u606f\uff0c\u5305\u62ec pixel \u4e0e pixel \u4e4b\u95f4\u7684\u5173\u7cfb \u964d\u7ef4\u4e4b\u540e\u6570\u636e\u7684 size \u53d8\u5c0f\u4e86\uff0c\u8fd9\u610f\u5473\u7740\u6a21\u578b\u6240\u9700\u7684\u53c2\u6570\u4e5f\u53d8\u5c11\u4e86\uff0c\u540c\u6837\u7684\u6570\u636e\u91cf\u5bf9\u53c2\u6570\u66f4\u5c11\u7684\u6a21\u578b\u6765\u8bf4\uff0c\u53ef\u4ee5\u8bad\u7ec3\u51fa\u66f4\u7cbe\u786e\u7684\u7ed3\u679c\uff0c\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u907f\u514d\u4e86\u8fc7\u62df\u5408\u7684\u53d1\u751f Auto-encoder \u662f\u4e00\u4e2a\u65e0\u76d1\u7763\u5b66\u4e60\u7684\u65b9\u6cd5\uff0c\u6570\u636e\u4e0d\u9700\u8981\u4eba\u5de5\u6253\u4e0a\u6807\u7b7e\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ea\u9700\u7b80\u5355\u5904\u7406\u5c31\u53ef\u4ee5\u83b7\u5f97\u5927\u91cf\u7684\u53ef\u7528\u6570\u636e \u4e0b\u56fe\u7ed9\u51fa\u4e86\u5206\u522b\u4ee5\u539f\u56fe\u7684 pixel \u8ba1\u7b97\u76f8\u4f3c\u5ea6\u548c\u4ee5 auto-encoder \u540e\u7684 code \u8ba1\u7b97\u76f8\u4f3c\u5ea6\u7684\u4e24\u79cd\u65b9\u6cd5\u5728\u56fe\u50cf\u68c0\u7d22\u4e0a\u7684\u7ed3\u679c \u53ef\u80fd\u6709\u4e9b\u4eba\u8138\u5728\u539f\u56fe\u7684 pixel \u4e0a\u770b\u8d77\u6765\u5e76\u4e0d\u50cf\uff0c\u4f46\u628a\u5b83\u4eec\u6295\u5f71\u5230 256 \u7ef4\u7684\u7a7a\u95f4\u4e2d\u5374\u662f\u76f8\u50cf\u7684\uff0c\u53ef\u80fd\u5728\u6295\u5f71\u7a7a\u95f4\u4e2d\u67d0\u4e00\u7ef4\u5c31\u4ee3\u8868\u4e86\u4eba\u8138\u7684\u7279\u5f81\uff0c\u56e0\u6b64\u80fd\u591f\u88ab\u68c0\u7d22\u51fa\u6765 Pre-training DNN \u00b6 \u5728\u8bad\u7ec3\u795e\u7ecf\u7f51\u7edc\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4e00\u822c\u90fd\u4f1a\u5bf9\u5982\u4f55\u521d\u59cb\u5316\u53c2\u6570\u6bd4\u8f83\u56f0\u6270\uff0c\u9884\u8bad\u7ec3 (pre-training) \u662f\u4e00\u79cd\u5bfb\u627e\u6bd4\u8f83\u597d\u7684\u53c2\u6570\u521d\u59cb\u5316\u503c\u7684\u65b9\u6cd5\uff0c\u800c\u6211\u4eec\u53ef\u4ee5\u7528Auto-encoder\u6765\u505apre-training \u4ee5MNIST\u6570\u636e\u96c6\u4e3a\u4f8b\uff0c\u6211\u4eec\u5bf9\u6bcf\u5c42hidden layer\u90fd\u505a\u4e00\u6b21auto-encoder\uff0c \u4f7f\u6bcf\u4e00\u5c42\u90fd\u80fd\u591f\u63d0\u53d6\u5230\u4e0a\u4e00\u5c42\u6700\u4f73\u7684\u7279\u5f81\u5411\u91cf \u4e3a\u4e86\u65b9\u4fbf\u8868\u8ff0\uff0c\u8fd9\u91cc\u7528 \\(x-z-x\\) \u6765\u8868\u793a\u4e00\u4e2a\u81ea\u7f16\u7801\u5668\uff0c\u5176\u4e2d \\(x\\) \u8868\u8ff0\u8f93\u5165\u8f93\u51fa\u5c42\u7684\u7ef4\u6570\uff0c \\(z\\) \u8868\u793a\u9690\u85cf\u5c42\u7684\u7ef4\u6570 \u9996\u5148\u4f7finput\u901a\u8fc7\u4e00\u4e2a \\(784-1000-784\\) \u7684\u81ea\u7f16\u7801\u5668\uff0c\u5f53\u8be5\u81ea\u7f16\u7801\u5668\u8bad\u7ec3\u7a33\u5b9a\u540e\uff0c\u5c31\u628a\u53c2\u6570 \\(W^1\\) \u56fa\u5b9a\u4f4f\uff0c\u7136\u540e\u5c06\u6570\u636e\u96c6\u4e2d\u6240\u6709784\u7ef4\u7684\u56fe\u50cf\u90fd\u8f6c\u5316\u4e3a1000\u7ef4\u7684vector \u6ce8\u610f\uff1a\u8fd9\u91cc\u505a\u7684\u4e0d\u662f\u964d\u7ef4\u800c\u662f\u5347\u7ef4\uff0c\u5f53\u7f16\u7801\u540e\u7684\u7ef4\u6570\u6bd4\u8f93\u5165\u7ef4\u6570\u8981\u9ad8\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u53ef\u80fd\u4f1a\u51fa\u73b0\u7f16\u7801\u524d\u540e\u539f\u5c01\u4e0d\u52a8\u7684\u60c5\u51b5\uff0c\u4e3a\u6b64\u9700\u8981\u989d\u5916\u52a0\u4e00\u4e2a\u6b63\u5219\u9879\uff0c\u6bd4\u5982L1 regularization\uff0c\u5f3a\u8feb\u4f7fcode\u7684\u5206\u5e03\u662f\u5206\u6563\u7684 \u63a5\u4e0b\u6765\u518d\u8ba9\u8fd9\u4e9b1000\u7ef4\u7684vector\u901a\u8fc7\u4e00\u4e2a \\(1000-1000-1000\\) \u7684\u7f16\u7801\u5668\uff0c\u5f53\u5176\u8bad\u7ec3\u7a33\u5b9a\u540e\uff0c\u518d\u628a\u53c2\u6570 \\(W^2\\) \u56fa\u5b9a\u4f4f\uff0c\u5bf9\u6570\u636e\u96c6\u518d\u505a\u4e00\u6b21\u8f6c\u6362 \u63a5\u4e0b\u6765\u518d\u7528\u8f6c\u6362\u540e\u7684\u6570\u636e\u96c6\u53bb\u8bad\u7ec3\u7b2c\u4e09\u4e2a \\(1000-500-1000\\) \u7684\u81ea\u7f16\u7801\u5668\uff0c\u8bad\u7ec3\u7a33\u5b9a\u540e\u56fa\u5b9a \\(W^3\\) \uff0c\u6570\u636e\u96c6\u518d\u6b21\u66f4\u65b0\u8f6c\u5316\u4e3a500\u7ef4 \u6b64\u65f6\u4e09\u4e2a\u9690\u85cf\u5c42\u7684\u53c2\u6570 \\(W^1\\) \u3001 \\(W^2\\) \u3001 \\(W^3\\) \u5c31\u662f\u8bad\u7ec3\u6574\u4e2a\u795e\u7ecf\u7f51\u7edc\u65f6\u7684\u53c2\u6570\u521d\u59cb\u503c \u7136\u540e\u968f\u673a\u521d\u59cb\u5316\u6700\u540e\u4e00\u4e2a\u9690\u85cf\u5c42\u5230\u8f93\u51fa\u5c42\u4e4b\u95f4\u7684\u53c2\u6570 \\(W^4\\) \u518d\u7528\u53cd\u5411\u4f20\u64ad\u53bb\u8c03\u6574\u4e00\u904d\u53c2\u6570\uff0c\u56e0\u4e3a \\(W^1\\) \u3001 \\(W^2\\) \u3001 \\(W^3\\) \u90fd\u5df2\u7ecf\u662f\u5f88\u597d\u7684\u53c2\u6570\u503c\u4e86\uff0c\u8fd9\u91cc\u53ea\u662f\u505a\u5fae\u8c03\uff0c\u8fd9\u4e2a\u6b65\u9aa4\u4e5f\u56e0\u6b64\u5f97\u540d\u4e3a Find-tune \u7531\u4e8e\u73b0\u5728\u8bad\u7ec3\u673a\u5668\u7684\u6761\u4ef6\u6bd4\u4ee5\u5f80\u66f4\u597d\uff0c\u56e0\u6b64pre-training\u5e76\u4e0d\u662f\u5fc5\u8981\u7684\uff0c\u4f46\u5b83\u4e5f\u6709\u81ea\u5df1\u7684\u4f18\u52bf \u5982\u679c\u4f60\u53ea\u6709\u5927\u91cf\u7684unlabeled data\u548c\u5c11\u91cf\u7684labeled data\uff0c\u90a3\u4f60\u53ef\u4ee5\u5148\u7528\u8fd9\u4e9bunlabeled data\u628a \\(W^1\\) \u3001 \\(W^2\\) \u3001 \\(W^3\\) \u5148\u521d\u59cb\u5316\u597d\uff0c\u6700\u540e\u518d\u7528labeled data\u53bb\u5fae\u8c03 \\(W^1\\) ~ \\(W^4\\) \u5373\u53ef \u56e0\u6b64pre-training\u5728\u6709\u5927\u91cfunlabeled data\u7684\u573a\u666f\u4e0b(\u5982\u534a\u76d1\u7763\u5b66\u4e60)\u662f\u6bd4\u8f83\u6709\u7528\u7684 CNN \u00b6 CNN as Encoder \u00b6 \u5904\u7406\u56fe\u50cf\u901a\u5e38\u90fd\u4f1a\u7528\u5377\u79ef\u795e\u7ecf\u7f51\u7edcCNN\uff0c\u5b83\u7684\u57fa\u672c\u601d\u60f3\u662f\u4ea4\u66ff\u4f7f\u7528\u5377\u79ef\u5c42\u548c\u6c60\u5316\u5c42\uff0c\u8ba9\u56fe\u50cf\u8d8a\u6765\u8d8a\u5c0f\uff0c\u6700\u7ec8\u5c55\u5e73\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u8ddfEncoder\u7f16\u7801\u7684\u8fc7\u7a0b\u5176\u5b9e\u662f\u7c7b\u4f3c\u7684 \u7406\u8bba\u4e0a\u8981\u5b9e\u73b0\u81ea\u7f16\u7801\u5668\uff0cDecoder\u53ea\u9700\u8981\u505a\u8ddfEncoder\u76f8\u53cd\u7684\u4e8b\u5373\u53ef\uff0c\u90a3\u5bf9CNN\u6765\u8bf4\uff0c\u89e3\u7801\u7684\u8fc7\u7a0b\u4e5f\u5c31\u53d8\u6210\u4e86\u4ea4\u66ff\u4f7f\u7528\u53bb\u5377\u79ef\u5c42\u548c\u53bb\u6c60\u5316\u5c42\u5373\u53ef \u90a3\u4ec0\u4e48\u662f\u53bb\u5377\u79ef\u5c42(Deconvolution)\u548c\u53bb\u6c60\u5316\u5c42(Unpooling)\u5462\uff1f Unpooling \u00b6 \u505apooling\u7684\u65f6\u5019\uff0c\u5047\u5982\u5f97\u5230\u4e00\u4e2a4\u00d74\u7684matrix\uff0c\u5c31\u628a\u6bcf4\u4e2apixel\u5206\u4e3a\u4e00\u7ec4\uff0c\u4ece\u6bcf\u7ec4\u4e2d\u6311\u4e00\u4e2a\u6700\u5927\u7684\u7559\u4e0b\uff0c\u6b64\u65f6\u56fe\u50cf\u5c31\u53d8\u6210\u4e86\u539f\u6765\u7684\u56db\u5206\u4e4b\u4e00\u5927\u5c0f \u5982\u679c\u8fd8\u8981\u505aUnpooling\uff0c\u5c31\u9700\u8981\u63d0\u524d\u8bb0\u5f55pooling\u6240\u6311\u9009\u7684pixel\u5728\u539f\u56fe\u4e2d\u7684\u4f4d\u7f6e\uff0c\u4e0b\u56fe\u4e2d\u7528\u7070\u8272\u65b9\u6846\u6807\u6ce8 \u7136\u540e\u505aUnpooling\uff0c\u5c31\u8981\u628a\u5f53\u524d\u7684matrix\u653e\u5927\u5230\u539f\u6765\u7684\u56db\u500d\uff0c\u4e5f\u5c31\u662f\u628a2\u00d72 matrix\u91cc\u7684pixel\u6309\u7167\u539f\u5148\u8bb0\u5f55\u7684\u4f4d\u7f6e\u63d2\u5165\u653e\u5927\u540e\u76844\u00d74 matrix\u4e2d\uff0c\u5176\u4f59\u9879\u88650\u5373\u53ef \u5f53\u7136\u8fd9\u4e0d\u662f\u552f\u4e00\u7684\u505a\u6cd5\uff0c\u5728Keras\u4e2d\uff0cpooling\u5e76\u6ca1\u6709\u8bb0\u5f55\u539f\u5148\u7684\u4f4d\u7f6e\uff0c\u505aUnpooling\u7684\u65f6\u5019\u5c31\u662f\u76f4\u63a5\u628apixel\u7684\u503c\u590d\u5236\u56db\u4efd\u586b\u5145\u5230\u6269\u5927\u540e\u7684matrix\u91cc\u5373\u53ef Deconvolution \u00b6 \u5b9e\u9645\u4e0a\uff0cDeconvolution\u5c31\u662fconvolution \u8fd9\u91cc\u4ee5\u4e00\u7ef4\u7684\u5377\u79ef\u4e3a\u4f8b\uff0c\u5047\u8bbe\u8f93\u5165\u662f5\u7ef4\uff0c\u8fc7\u6ee4\u5668(filter)\u7684\u5927\u5c0f\u662f3 \u5377\u79ef\u7684\u8fc7\u7a0b\u5c31\u662f\u6bcf\u4e09\u4e2a\u76f8\u90bb\u7684\u70b9\u901a\u8fc7\u8fc7\u6ee4\u5668\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u70b9\uff0c\u5982\u4e0b\u56fe\u5de6\u4fa7\u6240\u793a \u5728\u4f60\u7684\u60f3\u8c61\u4e2d\uff0c\u53bb\u5377\u79ef\u7684\u8fc7\u7a0b\u5e94\u8be5\u662f\u6bcf\u4e2a\u70b9\u90fd\u751f\u6210\u4e09\u4e2a\u70b9\uff0c\u4e0d\u540c\u7684\u70b9\u5bf9\u751f\u6210\u540c\u4e00\u4e2a\u70b9\u7684\u8d21\u732e\u503c\u76f8\u52a0\uff1b\u4f46\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u76f8\u5f53\u4e8e\u5728\u5468\u56f4\u88650\u4e4b\u540e\u518d\u6b21\u505a\u5377\u79ef\uff0c\u5982\u4e0b\u56fe\u53f3\u4fa7\u6240\u793a\uff0c\u4e24\u4e2a\u8fc7\u7a0b\u662f\u7b49\u4ef7\u7684 \u5377\u79ef\u548c\u53bb\u5377\u79ef\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u540c\u70b9\u5728\u4e8e\uff0c\u53bb\u5377\u79ef\u9700\u8981\u8865\u96f6\u4e14\u8fc7\u6ee4\u5668\u7684weight\u4e0e\u5377\u79ef\u662f\u76f8\u53cd\u7684\uff1a \u5728\u5377\u79ef\u8fc7\u7a0b\u4e2d\uff0c\u4f9d\u6b21\u662f\u6a59\u7ebf\u3001\u84dd\u7ebf\u3001\u7eff\u7ebf \u5728\u53bb\u5377\u79ef\u8fc7\u7a0b\u4e2d\uff0c\u4f9d\u6b21\u662f\u7eff\u7ebf\u3001\u84dd\u7ebf\u3001\u6a59\u7ebf \u56e0\u6b64\u5728\u5b9e\u8df5\u4e2d\uff0c\u505a\u53bb\u5377\u79ef\u7684\u65f6\u5019\u76f4\u63a5\u5bf9\u6a21\u578b\u52a0\u5377\u79ef\u5c42\u5373\u53ef Other Auto-encoder \u00b6 De-noising Auto-encoder \u00b6 \u53bb\u566a\u81ea\u7f16\u7801\u5668\u7684\u57fa\u672c\u601d\u60f3\u662f\uff0c\u628a\u8f93\u5165\u7684 \\(x\\) \u52a0\u4e0a\u4e00\u4e9b\u566a\u58f0(noise)\u53d8\u6210 \\(x'\\) \uff0c\u518d\u5bf9 \\(x'\\) \u4f9d\u6b21\u505a\u7f16\u7801(encode)\u548c\u89e3\u7801(decode)\uff0c\u5f97\u5230\u8fd8\u539f\u540e\u7684 \\(y\\) \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4e00\u822c\u7684\u81ea\u7f16\u7801\u5668\u90fd\u662f\u8ba9\u8f93\u5165\u8f93\u51fa\u5c3d\u53ef\u80fd\u63a5\u8fd1\uff0c\u4f46\u5728\u53bb\u566a\u81ea\u7f16\u7801\u5668\u4e2d\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u8ba9\u89e3\u7801\u540e\u7684 \\(y\\) \u4e0e\u52a0\u566a\u58f0\u4e4b\u524d\u7684 \\(x\\) \u8d8a\u63a5\u8fd1\u8d8a\u597d \u8fd9\u79cd\u65b9\u6cd5\u53ef\u4ee5\u589e\u52a0\u7cfb\u7edf\u7684\u9c81\u68d2\u6027\uff0c\u56e0\u4e3a\u6b64\u65f6\u7684\u7f16\u7801\u5668Encoder\u4e0d\u4ec5\u4ec5\u662f\u5728\u5b66\u4e60\u5982\u4f55\u505a\u7f16\u7801\uff0c\u5b83\u8fd8\u5b66\u4e60\u5230\u4e86\u5982\u4f55\u8fc7\u6ee4\u6389\u566a\u58f0\u8fd9\u4ef6\u4e8b\u60c5 \u53c2\u8003\u6587\u732e\uff1a Vincent, Pascal, et al. \"Extracting and composing robust features with denoising autoencoders.\" ICML, 2008. Contractive Auto-encoder \u00b6 \u6536\u7f29\u81ea\u52a8\u7f16\u7801\u5668\u7684\u57fa\u672c\u601d\u60f3\u662f\uff0c\u5728\u505aencode\u7f16\u7801\u7684\u65f6\u5019\uff0c\u8981\u52a0\u4e0a\u4e00\u4e2a\u7ea6\u675f\uff0c\u5b83\u53ef\u4ee5\u4f7f\u5f97\uff1ainput\u7684\u53d8\u5316\u5bf9\u7f16\u7801\u540e\u5f97\u5230\u7684code\u7684\u5f71\u54cd\u6700\u5c0f\u5316 \u8fd9\u4e2a\u63cf\u8ff0\u8ddf\u53bb\u566a\u81ea\u7f16\u7801\u5668\u5f88\u50cf\uff0c\u53ea\u4e0d\u8fc7\u53bb\u566a\u81ea\u7f16\u7801\u5668\u7684\u91cd\u70b9\u5728\u4e8e\u52a0\u4e86\u566a\u58f0\u4e4b\u540e\u4f9d\u65e7\u53ef\u4ee5\u8fd8\u539f\u56de\u539f\u5148\u7684\u8f93\u5165\uff0c\u800c\u6536\u7f29\u81ea\u52a8\u7f16\u7801\u5668\u7684\u91cd\u70b9\u5728\u4e8e\u52a0\u4e86\u566a\u58f0\u4e4b\u540e\u80fd\u591f\u4fdd\u6301\u7f16\u7801\u7ed3\u679c\u4e0d\u53d8 \u53c2\u8003\u6587\u732e\uff1a Rifai, Salah, et al. \"Contractive auto-encoders: Explicit invariance during feature extraction.\u201c Proceedings of the 28th International Conference on Machine Learning (ICML-11). 2011. Seq2Seq Auto-encoder \u00b6 \u5728\u4e4b\u524d\u4ecb\u7ecd\u7684\u81ea\u7f16\u7801\u5668\u4e2d\uff0c\u8f93\u5165\u90fd\u662f\u4e00\u4e2a\u56fa\u5b9a\u957f\u5ea6\u7684vector\uff0c\u4f46\u7c7b\u4f3c\u6587\u7ae0\u3001\u8bed\u97f3\u7b49\u4fe1\u606f\u5b9e\u9645\u4e0a\u4e0d\u5e94\u8be5\u5355\u7eaf\u88ab\u8868\u793a\u4e3avector\uff0c\u90a3\u4f1a\u4e22\u5931\u5f88\u591a\u524d\u540e\u8054\u7cfb\u7684\u4fe1\u606f Seq2Seq\u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u63d0\u51fa\u7684\uff0c\u5177\u4f53\u5185\u5bb9\u5c06\u5728RNN\u90e8\u5206\u4ecb\u7ecd Generate \u00b6 \u5728\u7528\u81ea\u7f16\u7801\u5668\u7684\u65f6\u5019\uff0c\u901a\u5e38\u662f\u83b7\u53d6Encoder\u4e4b\u540e\u7684code\u4f5c\u4e3a\u964d\u7ef4\u7ed3\u679c\uff0c\u4f46\u5b9e\u9645\u4e0aDecoder\u4e5f\u662f\u6709\u4f5c\u7528\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u62ff\u5b83\u6765\u751f\u6210\u65b0\u7684\u4e1c\u897f \u4ee5MNIST\u4e3a\u4f8b\uff0c\u8bad\u7ec3\u597d\u7f16\u7801\u5668\u4e4b\u540e\uff0c\u53d6\u51fa\u5176\u4e2d\u7684Decoder\uff0c\u8f93\u5165\u4e00\u4e2a\u968f\u673a\u7684code\uff0c\u5c31\u53ef\u4ee5\u751f\u6210\u4e00\u5f20\u56fe\u50cf \u5047\u8bbe\u5c0628\u00d728\u7ef4\u7684\u56fe\u50cf\u901a\u8fc7\u4e00\u5c422\u7ef4\u7684hidden layer\u6295\u5f71\u5230\u4e8c\u7ef4\u5e73\u9762\u4e0a\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff0c\u4e0d\u540c\u989c\u8272\u7684\u70b9\u4ee3\u8868\u4e0d\u540c\u7684\u6570\u5b57\uff0c\u7136\u540e\u5728\u7ea2\u8272\u65b9\u6846\u4e2d\uff0c\u7b49\u95f4\u9694\u7684\u6311\u9009\u4e8c\u7ef4\u5411\u91cf\u4e22\u8fdbDecoder\u4e2d\uff0c\u5c31\u4f1a\u751f\u6210\u8bb8\u591a\u6570\u5b57\u7684\u56fe\u50cf \u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5bf9code\u52a0L2 regularization\uff0c\u4ee5\u9650\u5236code\u5206\u5e03\u7684\u8303\u56f4\u96c6\u4e2d\u57280\u9644\u8fd1\uff0c\u6b64\u65f6\u5c31\u53ef\u4ee5\u76f4\u63a5\u4ee50\u4e3a\u4e2d\u5fc3\u53bb\u968f\u673a\u91c7\u53d6\u6837\u672c\u70b9\uff0c\u518d\u901a\u8fc7Decoder\u751f\u6210\u56fe\u50cf \u89c2\u5bdf\u751f\u6210\u7684\u6570\u5b57\u56fe\u50cf\uff0c\u53ef\u4ee5\u53d1\u73b0\u6a2a\u8f74\u7684\u7ef4\u5ea6\u8868\u793a\u662f\u5426\u542b\u6709\u5706\u5708\uff0c\u7eb5\u8f74\u7684\u7ef4\u5ea6\u8868\u793a\u662f\u5426\u503e\u659c","title":"Unsupervised Learning: Deep Auto-encoder"},{"location":"ML/Unsupervised%20Learning%20Deep%20Auto-encoder/#unsupervised-learning-deep-auto-encoder","text":"Deep Auto-encoder\uff1a\u81ea\u7f16\u7801\u5668","title":"Unsupervised Learning: Deep Auto-encoder"},{"location":"ML/Unsupervised%20Learning%20Deep%20Auto-encoder/#introduction","text":"Auto-encoder \u5176\u5b9e\u662f\u4e00\u4e2a\u81ea\u6211\u538b\u7f29\u548c\u89e3\u538b\u7684\u8fc7\u7a0b \uff0c\u60f3\u8981\u83b7\u53d6\u538b\u7f29\u540e\u7684code\uff08\u964d\u7ef4\uff09\uff0c\u56e0\u4e3a\u662f Unsupervised \u7684\uff0c\u6240\u4ee5\u5355\u7528\u4e00\u4e2a Encoder \u662f\u6ca1\u529e\u6cd5 train \u7684\uff08\u6ca1\u6709 output\uff09\uff0c\u4e00\u4e2a\u5355\u72ec\u7684 Decoder \u4e5f\u6ca1\u6709\u529e\u6cd5 train\uff08\u6ca1\u6709 input\uff09\uff0c\u4f46\u5982\u679c\u628a\u4ed6\u4eec\u63a5\u5728\u4e00\u8d77\uff0ctarget \u662f minimize inoput \u4e0e output \u7684\u5dee\u8ddd\u5c31\u53ef\u4ee5 train \u4e86 Encoder(\u7f16\u7801\u5668)\uff0c\u5b83\u53ef\u4ee5\u628a\u539f\u5148\u7684\u56fe\u50cf\u538b\u7f29\u6210\u66f4\u4f4e\u7ef4\u5ea6\u7684\u5411\u91cf Decoder(\u89e3\u7801\u5668)\uff0c\u5b83\u53ef\u4ee5\u628a\u538b\u7f29\u540e\u7684\u5411\u91cf\u8fd8\u539f\u6210\u56fe\u50cf","title":"Introduction"},{"location":"ML/Unsupervised%20Learning%20Deep%20Auto-encoder/#compare-with-pca","text":"\u5b9e\u9645\u4e0a PCA \u964d\u7ef4\u65f6\u7528\u5230\u7684\u601d\u60f3\u4e0e\u4e4b\u975e\u5e38\u7c7b\u4f3c \u5728 PCA \u4e2d\uff0c\u6211\u4eec\u5148\u628a\u5747\u4e00\u5316\u540e\u7684 \\(x\\) \u6839\u636e\u7ec4\u4ef6 \\(W\\) \u5206\u89e3\u5230\u66f4\u4f4e\u7ef4\u5ea6\u7684 \\(c\\) \uff0c\u7136\u540e\u518d\u5c06\u7ec4\u4ef6\u6743\u91cd \\(c\\) \u4e58\u4e0a\u7ec4\u4ef6\u7684\u53cd\u7f6e \\(W^T\\) \u5f97\u5230\u91cd\u7ec4\u540e\u7684 \\(\\hat x\\) \uff0c\u540c\u6837\u6211\u4eec\u671f\u671b\u91cd\u6784\u540e\u7684 \\(\\hat x\\) \u4e0e\u539f\u59cb\u7684 \\(x\\) \u8d8a\u63a5\u8fd1\u8d8a\u597d\uff0c\u5373 minimize \\((x-\\hat{x})^2\\) \u5982\u679c\u628a\u8fd9\u4e2a\u8fc7\u7a0b\u770b\u4f5c\u662f\u795e\u7ecf\u7f51\u7edc\uff0c\u90a3\u4e48\u539f\u59cb\u7684 \\(x\\) \u5c31\u662f input layer\uff0c\u91cd\u6784 \\(\\hat x\\) \u5c31\u662f output layer\uff0c\u4e2d\u95f4\u7ec4\u4ef6\u5206\u89e3\u6743\u91cd \\(c\\) \u5c31\u662f hidden layer\uff0c\u5728 PCA \u4e2d\u5b83\u662f linear \u7684\uff0c\u6211\u4eec\u901a\u5e38\u53c8\u53eb\u5b83\u74f6\u9888\u5c42 (Bottleneck layer\uff0c\u662f\u4e00\u4e2a\u4f4e\u7ef4\u7684 vector\uff0c\u964d\u7ef4\u7684\u7ed3\u679c) \u56fe\u4e2d\u5e76\u6ca1\u6709\u51cf\u53bb \\(\\bar{x}\\) \uff0c\u56e0\u4e3a\u4e00\u822c\u5728\u62ff\u5230 data \u8d77\u624b\u90fd\u4f1a\u505a normalization \u800c\u4e14\u8fd9\u4e2a network \u662f\u53ef\u4ee5 deep \u7684","title":"Compare with PCA"},{"location":"ML/Unsupervised%20Learning%20Deep%20Auto-encoder/#deep-auto-encoder","text":"","title":"Deep Auto-encoder"},{"location":"ML/Unsupervised%20Learning%20Deep%20Auto-encoder/#multi-layer","text":"\u5bf9 deep \u7684\u81ea\u7f16\u7801\u5668\u6765\u8bf4\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u901a\u8fc7\u591a\u7ea7\u7f16\u7801\u964d\u7ef4\uff0c\u518d\u7ecf\u8fc7\u591a\u7ea7\u89e3\u7801\u8fd8\u539f\u7684\u8fc7\u7a0b \u5982\u679c\u6309\u7167 PCA \u7684\u601d\u8def\uff0c\u5219 Encoder \u7684\u53c2\u6570 \\(W_i\\) \u9700\u8981\u548c Decoder \u7684\u53c2\u6570 \\(W_i^T\\) \u4fdd\u6301\u4e00\u81f4\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7\u7ed9\u4e24\u8005\u76f8\u540c\u7684\u521d\u59cb\u503c\u5e76\u8bbe\u7f6e\u540c\u6837\u7684\u66f4\u65b0\u8fc7\u7a0b\u5f97\u5230\uff0c\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff0c\u53ef\u4ee5\u8282\u7701\u4e00\u534a\u7684\u53c2\u6570\uff0c\u964d\u4f4e overfitting \u7684\u6982\u7387 \u4f46\u8fd9\u4ef6\u4e8b\u60c5\u5e76\u4e0d\u662f\u5fc5\u8981\u7684\uff0c\u5b9e\u9645\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u5b8c\u5168\u53ef\u4ee5\u5bf9\u795e\u7ecf\u7f51\u7edc\u8fdb\u884c\u76f4\u63a5\u8bad\u7ec3\u800c\u4e0d\u7528\u4fdd\u6301\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u7684\u53c2\u6570\u4e00\u81f4","title":"Multi Layer"},{"location":"ML/Unsupervised%20Learning%20Deep%20Auto-encoder/#visualize","text":"\u4e0b\u56fe\u7ed9\u51fa\u4e86 Hinton \u5206\u522b\u91c7\u7528 PCA \u548c Deep Auto-encoder \u5bf9\u624b\u5199\u6570\u5b57\u8fdb\u884c\u7f16\u7801\u89e3\u7801\u540e\u7684\u7ed3\u679c\uff0c\u4ece 784 \u7ef4\u964d\u523030 \u7ef4\uff0c\u53ef\u4ee5\u770b\u51fa\uff0cDeep \u7684\u81ea\u7f16\u7801\u5668\u8fd8\u539f\u6548\u679c\u6bd4 PCA \u8981\u66f4\u597d \u5982\u679c\u5c06\u5176\u964d\u5230\u4e8c\u7ef4\u5e73\u9762\u505a\u53ef\u89c6\u5316\uff0c\u4e0d\u540c\u989c\u8272\u4ee3\u8868\u4e0d\u540c\u7684\u6570\u5b57\uff0c\u660e\u663e Deep Auto-Encoding \u7684\u6548\u679c\u66f4\u597d","title":"Visualize"},{"location":"ML/Unsupervised%20Learning%20Deep%20Auto-encoder/#text-retrieval","text":"Auto-encoder \u4e5f\u53ef\u4ee5\u88ab\u7528\u5728\u6587\u5b57\u5904\u7406\u4e0a \u6bd4\u5982\u6211\u4eec\u8981\u505a\u6587\u5b57\u68c0\u7d22\uff0c\u5f88\u7b80\u5355\u7684\u4e00\u4e2a\u505a\u6cd5\u662f Vector Space Model\uff0c\u628a\u6bcf\u4e00\u7bc7\u6587\u7ae0\u90fd\u8868\u793a\u6210\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a vector \u5047\u8bbe\u67e5\u8be2\u8005\u8f93\u5165\u4e86\u67d0\u4e2a\u8bcd\u6c47\uff0c\u90a3\u6211\u4eec\u5c31\u628a\u8be5\u67e5\u8be2\u8bcd\u6c47\u4e5f\u53d8\u6210\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u70b9\uff0c\u5e76\u8ba1\u7b97 query \u548c\u6bcf\u4e00\u7bc7 document \u4e4b\u95f4\u7684\u5185\u79ef (inner product) \u6216\u4f59\u5f26\u76f8\u4f3c\u5ea6 (cos-similarity) \u6ce8\uff1a\u4f59\u5f26\u76f8\u4f3c\u5ea6\u6709\u5747\u4e00\u5316\u7684\u6548\u679c\uff0c\u53ef\u80fd\u4f1a\u5f97\u5230\u66f4\u597d\u7684\u7ed3\u679c \u4e0b\u56fe\u4e2d\u8ddfquery\u5411\u91cf\u6700\u63a5\u8fd1\u7684\u51e0\u4e2a\u5411\u91cf\u7684cosine-similarity\u662f\u6700\u5927\u7684\uff0c\u4e8e\u662f\u53ef\u4ee5\u4ece\u8fd9\u51e0\u7bc7\u6587\u7ae0\u4e2d\u53bb\u68c0\u7d22 \u8fd9\u4e2a\u6a21\u578b\u7684\u597d\u574f\uff0c\u5c31\u53d6\u51b3\u4e8e\u4ece document \u8f6c\u5316\u800c\u6765\u7684 vector \u7684\u597d\u574f\uff0c\u5b83\u662f\u5426\u80fd\u591f\u5145\u5206\u8868\u8fbe\u6587\u7ae0\u4fe1\u606f","title":"Text Retrieval"},{"location":"ML/Unsupervised%20Learning%20Deep%20Auto-encoder/#bag-of-word","text":"\u6700\u7b80\u5355\u7684 vector \u8868\u793a\u65b9\u6cd5\u662f Bag-of-word\uff0c\u7ef4\u6570\u7b49\u4e8e\u6240\u6709\u8bcd\u6c47\u7684\u603b\u6570\uff0c\u67d0\u4e00\u7ef4\u7b49\u8868\u793a\u8be5\u8bcd\u6c47\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6b64\u5916\u8fd8\u53ef\u4ee5\u6839\u636e\u8bcd\u6c47\u7684\u91cd\u8981\u6027\u5c06\u5176\u52a0\u6743\uff1b\u4f46\u8fd9\u4e2a\u6a21\u578b\u662f\u975e\u5e38\u8106\u5f31\u7684\uff0c\u5bf9\u5b83\u6765\u8bf4\u6bcf\u4e2a\u8bcd\u6c47\u90fd\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u65e0\u6cd5\u4f53\u73b0\u51fa\u8bcd\u6c47\u4e4b\u95f4\u7684\u8bed\u4e49 (semantic)","title":"Bag-of-word"},{"location":"ML/Unsupervised%20Learning%20Deep%20Auto-encoder/#auto-encoder","text":"\u867d\u7136 Bag-of-word \u4e0d\u80fd\u76f4\u63a5\u7528\u4e8e\u8868\u793a\u6587\u7ae0\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u4f5c\u4e3a Auto-encoder \u7684 input\uff0c\u901a\u8fc7\u964d\u7ef4\u6765\u62bd\u53d6\u6709\u6548\u4fe1\u606f\uff0c\u4ee5\u83b7\u53d6\u6240\u9700\u7684 vector \u540c\u6837\u4e3a\u4e86\u53ef\u89c6\u5316\uff0c\u8fd9\u91cc\u5c06Bag-of-word\u964d\u7ef4\u5230\u4e8c\u7ef4\u5e73\u9762\u4e0a\uff0c\u4e0b\u56fe\u4e2d\u6bcf\u4e2a\u70b9\u90fd\u4ee3\u8868\u4e00\u7bc7\u6587\u7ae0\uff0c\u4e0d\u540c\u989c\u8272\u5219\u4ee3\u8868\u4e0d\u540c\u7684\u6587\u7ae0\u7c7b\u578b \u5982\u679c\u7528\u6237\u505a\u67e5\u8be2\uff0c\u5c31\u628a\u67e5\u8be2\u7684\u8bed\u53e5\u7528\u76f8\u540c\u7684\u65b9\u5f0f\u6620\u5c04\u5230\u8be5\u4e8c\u7ef4\u5e73\u9762\u4e0a\uff0c\u5e76\u627e\u51fa\u5c5e\u4e8e\u540c\u4e00\u7c7b\u522b\u7684\u6240\u6709\u6587\u7ae0\u5373\u53ef \u5728\u77e9\u9635\u5206\u89e3 (Matrix Factorization) \u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86 LSA \u7b97\u6cd5\uff0c\u5b83\u53ef\u4ee5\u7528\u6765\u5bfb\u627e\u6bcf\u4e2a\u8bcd\u6c47\u548c\u6bcf\u7bc7\u6587\u7ae0\u80cc\u540e\u7684\u9690\u85cf\u5173\u7cfb (vector)\uff0c\u5982\u679c\u5728\u8fd9\u91cc\u6211\u4eec\u91c7\u7528 LSA\uff0c\u5e76\u4f7f\u7528\u4e8c\u7ef4 latent vector \u6765\u8868\u793a\u6bcf\u7bc7\u6587\u7ae0\uff0c\u5f97\u5230\u7684\u53ef\u89c6\u5316\u7ed3\u679c\u5982\u4e0a\u56fe\u53f3\u4e0b\u89d2\u6240\u793a\uff0c\u53ef\u89c1\u6548\u679c\u5e76\u6ca1\u6709 Auto-encoder \u597d","title":"Auto-encoder"},{"location":"ML/Unsupervised%20Learning%20Deep%20Auto-encoder/#similar-image-search","text":"Auto-encoder \u540c\u6837\u53ef\u4ee5\u88ab\u7528\u5728\u56fe\u50cf\u68c0\u7d22\u4e0a\uff0c\u6bd4\u5982\u4ee5\u56fe\u641c\u56fe \u6700\u7b80\u5355\u7684\u505a\u6cd5\u5c31\u662f\u76f4\u63a5\u5bf9\u8f93\u5165\u7684\u56fe\u7247\u4e0e\u6570\u636e\u5e93\u4e2d\u7684\u56fe\u7247\u8ba1\u7b97 pixel \u7684\u76f8\u4f3c\u5ea6\uff0c\u5e76\u6311\u51fa\u6700\u50cf\u7684\u56fe\u7247\uff0c\u4f46\u8fd9\u79cd\u65b9\u6cd5\u7684\u6548\u679c\u5f88\u5dee\uff0c\u56e0\u4e3a\u5355\u7eaf\u7684 pixel \u6240\u80fd\u591f\u8868\u8fbe\u7684\u4fe1\u606f\u592a\u5c11\u4e86 \u6211\u4eec\u9700\u8981\u4f7f\u7528 Auto-encoder \u5bf9\u56fe\u50cf\u8fdb\u884c\u964d\u7ef4\u548c\u7279\u5f81\u63d0\u53d6\uff0c\u5e76\u5728\u7f16\u7801\u5f97\u5230\u7684 code \u6240\u5728\u7a7a\u95f4\u505a\u76f8\u4f3c\u5ea6\u7684\u68c0\u7d22 \u8fd9\u4e48\u505a\u7684\u597d\u5904\u5982\u4e0b\uff1a Auto-encoder \u53ef\u4ee5\u901a\u8fc7\u964d\u7ef4\u63d0\u53d6\u51fa\u4e00\u5f20\u56fe\u50cf\u4e2d\u6700\u6709\u7528\u7684\u7279\u5f81\u4fe1\u606f\uff0c\u5305\u62ec pixel \u4e0e pixel \u4e4b\u95f4\u7684\u5173\u7cfb \u964d\u7ef4\u4e4b\u540e\u6570\u636e\u7684 size \u53d8\u5c0f\u4e86\uff0c\u8fd9\u610f\u5473\u7740\u6a21\u578b\u6240\u9700\u7684\u53c2\u6570\u4e5f\u53d8\u5c11\u4e86\uff0c\u540c\u6837\u7684\u6570\u636e\u91cf\u5bf9\u53c2\u6570\u66f4\u5c11\u7684\u6a21\u578b\u6765\u8bf4\uff0c\u53ef\u4ee5\u8bad\u7ec3\u51fa\u66f4\u7cbe\u786e\u7684\u7ed3\u679c\uff0c\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u907f\u514d\u4e86\u8fc7\u62df\u5408\u7684\u53d1\u751f Auto-encoder \u662f\u4e00\u4e2a\u65e0\u76d1\u7763\u5b66\u4e60\u7684\u65b9\u6cd5\uff0c\u6570\u636e\u4e0d\u9700\u8981\u4eba\u5de5\u6253\u4e0a\u6807\u7b7e\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ea\u9700\u7b80\u5355\u5904\u7406\u5c31\u53ef\u4ee5\u83b7\u5f97\u5927\u91cf\u7684\u53ef\u7528\u6570\u636e \u4e0b\u56fe\u7ed9\u51fa\u4e86\u5206\u522b\u4ee5\u539f\u56fe\u7684 pixel \u8ba1\u7b97\u76f8\u4f3c\u5ea6\u548c\u4ee5 auto-encoder \u540e\u7684 code \u8ba1\u7b97\u76f8\u4f3c\u5ea6\u7684\u4e24\u79cd\u65b9\u6cd5\u5728\u56fe\u50cf\u68c0\u7d22\u4e0a\u7684\u7ed3\u679c \u53ef\u80fd\u6709\u4e9b\u4eba\u8138\u5728\u539f\u56fe\u7684 pixel \u4e0a\u770b\u8d77\u6765\u5e76\u4e0d\u50cf\uff0c\u4f46\u628a\u5b83\u4eec\u6295\u5f71\u5230 256 \u7ef4\u7684\u7a7a\u95f4\u4e2d\u5374\u662f\u76f8\u50cf\u7684\uff0c\u53ef\u80fd\u5728\u6295\u5f71\u7a7a\u95f4\u4e2d\u67d0\u4e00\u7ef4\u5c31\u4ee3\u8868\u4e86\u4eba\u8138\u7684\u7279\u5f81\uff0c\u56e0\u6b64\u80fd\u591f\u88ab\u68c0\u7d22\u51fa\u6765","title":"Similar Image Search"},{"location":"ML/Unsupervised%20Learning%20Deep%20Auto-encoder/#pre-training-dnn","text":"\u5728\u8bad\u7ec3\u795e\u7ecf\u7f51\u7edc\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4e00\u822c\u90fd\u4f1a\u5bf9\u5982\u4f55\u521d\u59cb\u5316\u53c2\u6570\u6bd4\u8f83\u56f0\u6270\uff0c\u9884\u8bad\u7ec3 (pre-training) \u662f\u4e00\u79cd\u5bfb\u627e\u6bd4\u8f83\u597d\u7684\u53c2\u6570\u521d\u59cb\u5316\u503c\u7684\u65b9\u6cd5\uff0c\u800c\u6211\u4eec\u53ef\u4ee5\u7528Auto-encoder\u6765\u505apre-training \u4ee5MNIST\u6570\u636e\u96c6\u4e3a\u4f8b\uff0c\u6211\u4eec\u5bf9\u6bcf\u5c42hidden layer\u90fd\u505a\u4e00\u6b21auto-encoder\uff0c \u4f7f\u6bcf\u4e00\u5c42\u90fd\u80fd\u591f\u63d0\u53d6\u5230\u4e0a\u4e00\u5c42\u6700\u4f73\u7684\u7279\u5f81\u5411\u91cf \u4e3a\u4e86\u65b9\u4fbf\u8868\u8ff0\uff0c\u8fd9\u91cc\u7528 \\(x-z-x\\) \u6765\u8868\u793a\u4e00\u4e2a\u81ea\u7f16\u7801\u5668\uff0c\u5176\u4e2d \\(x\\) \u8868\u8ff0\u8f93\u5165\u8f93\u51fa\u5c42\u7684\u7ef4\u6570\uff0c \\(z\\) \u8868\u793a\u9690\u85cf\u5c42\u7684\u7ef4\u6570 \u9996\u5148\u4f7finput\u901a\u8fc7\u4e00\u4e2a \\(784-1000-784\\) \u7684\u81ea\u7f16\u7801\u5668\uff0c\u5f53\u8be5\u81ea\u7f16\u7801\u5668\u8bad\u7ec3\u7a33\u5b9a\u540e\uff0c\u5c31\u628a\u53c2\u6570 \\(W^1\\) \u56fa\u5b9a\u4f4f\uff0c\u7136\u540e\u5c06\u6570\u636e\u96c6\u4e2d\u6240\u6709784\u7ef4\u7684\u56fe\u50cf\u90fd\u8f6c\u5316\u4e3a1000\u7ef4\u7684vector \u6ce8\u610f\uff1a\u8fd9\u91cc\u505a\u7684\u4e0d\u662f\u964d\u7ef4\u800c\u662f\u5347\u7ef4\uff0c\u5f53\u7f16\u7801\u540e\u7684\u7ef4\u6570\u6bd4\u8f93\u5165\u7ef4\u6570\u8981\u9ad8\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u53ef\u80fd\u4f1a\u51fa\u73b0\u7f16\u7801\u524d\u540e\u539f\u5c01\u4e0d\u52a8\u7684\u60c5\u51b5\uff0c\u4e3a\u6b64\u9700\u8981\u989d\u5916\u52a0\u4e00\u4e2a\u6b63\u5219\u9879\uff0c\u6bd4\u5982L1 regularization\uff0c\u5f3a\u8feb\u4f7fcode\u7684\u5206\u5e03\u662f\u5206\u6563\u7684 \u63a5\u4e0b\u6765\u518d\u8ba9\u8fd9\u4e9b1000\u7ef4\u7684vector\u901a\u8fc7\u4e00\u4e2a \\(1000-1000-1000\\) \u7684\u7f16\u7801\u5668\uff0c\u5f53\u5176\u8bad\u7ec3\u7a33\u5b9a\u540e\uff0c\u518d\u628a\u53c2\u6570 \\(W^2\\) \u56fa\u5b9a\u4f4f\uff0c\u5bf9\u6570\u636e\u96c6\u518d\u505a\u4e00\u6b21\u8f6c\u6362 \u63a5\u4e0b\u6765\u518d\u7528\u8f6c\u6362\u540e\u7684\u6570\u636e\u96c6\u53bb\u8bad\u7ec3\u7b2c\u4e09\u4e2a \\(1000-500-1000\\) \u7684\u81ea\u7f16\u7801\u5668\uff0c\u8bad\u7ec3\u7a33\u5b9a\u540e\u56fa\u5b9a \\(W^3\\) \uff0c\u6570\u636e\u96c6\u518d\u6b21\u66f4\u65b0\u8f6c\u5316\u4e3a500\u7ef4 \u6b64\u65f6\u4e09\u4e2a\u9690\u85cf\u5c42\u7684\u53c2\u6570 \\(W^1\\) \u3001 \\(W^2\\) \u3001 \\(W^3\\) \u5c31\u662f\u8bad\u7ec3\u6574\u4e2a\u795e\u7ecf\u7f51\u7edc\u65f6\u7684\u53c2\u6570\u521d\u59cb\u503c \u7136\u540e\u968f\u673a\u521d\u59cb\u5316\u6700\u540e\u4e00\u4e2a\u9690\u85cf\u5c42\u5230\u8f93\u51fa\u5c42\u4e4b\u95f4\u7684\u53c2\u6570 \\(W^4\\) \u518d\u7528\u53cd\u5411\u4f20\u64ad\u53bb\u8c03\u6574\u4e00\u904d\u53c2\u6570\uff0c\u56e0\u4e3a \\(W^1\\) \u3001 \\(W^2\\) \u3001 \\(W^3\\) \u90fd\u5df2\u7ecf\u662f\u5f88\u597d\u7684\u53c2\u6570\u503c\u4e86\uff0c\u8fd9\u91cc\u53ea\u662f\u505a\u5fae\u8c03\uff0c\u8fd9\u4e2a\u6b65\u9aa4\u4e5f\u56e0\u6b64\u5f97\u540d\u4e3a Find-tune \u7531\u4e8e\u73b0\u5728\u8bad\u7ec3\u673a\u5668\u7684\u6761\u4ef6\u6bd4\u4ee5\u5f80\u66f4\u597d\uff0c\u56e0\u6b64pre-training\u5e76\u4e0d\u662f\u5fc5\u8981\u7684\uff0c\u4f46\u5b83\u4e5f\u6709\u81ea\u5df1\u7684\u4f18\u52bf \u5982\u679c\u4f60\u53ea\u6709\u5927\u91cf\u7684unlabeled data\u548c\u5c11\u91cf\u7684labeled data\uff0c\u90a3\u4f60\u53ef\u4ee5\u5148\u7528\u8fd9\u4e9bunlabeled data\u628a \\(W^1\\) \u3001 \\(W^2\\) \u3001 \\(W^3\\) \u5148\u521d\u59cb\u5316\u597d\uff0c\u6700\u540e\u518d\u7528labeled data\u53bb\u5fae\u8c03 \\(W^1\\) ~ \\(W^4\\) \u5373\u53ef \u56e0\u6b64pre-training\u5728\u6709\u5927\u91cfunlabeled data\u7684\u573a\u666f\u4e0b(\u5982\u534a\u76d1\u7763\u5b66\u4e60)\u662f\u6bd4\u8f83\u6709\u7528\u7684","title":"Pre-training DNN"},{"location":"ML/Unsupervised%20Learning%20Deep%20Auto-encoder/#cnn","text":"","title":"CNN"},{"location":"ML/Unsupervised%20Learning%20Deep%20Auto-encoder/#cnn-as-encoder","text":"\u5904\u7406\u56fe\u50cf\u901a\u5e38\u90fd\u4f1a\u7528\u5377\u79ef\u795e\u7ecf\u7f51\u7edcCNN\uff0c\u5b83\u7684\u57fa\u672c\u601d\u60f3\u662f\u4ea4\u66ff\u4f7f\u7528\u5377\u79ef\u5c42\u548c\u6c60\u5316\u5c42\uff0c\u8ba9\u56fe\u50cf\u8d8a\u6765\u8d8a\u5c0f\uff0c\u6700\u7ec8\u5c55\u5e73\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u8ddfEncoder\u7f16\u7801\u7684\u8fc7\u7a0b\u5176\u5b9e\u662f\u7c7b\u4f3c\u7684 \u7406\u8bba\u4e0a\u8981\u5b9e\u73b0\u81ea\u7f16\u7801\u5668\uff0cDecoder\u53ea\u9700\u8981\u505a\u8ddfEncoder\u76f8\u53cd\u7684\u4e8b\u5373\u53ef\uff0c\u90a3\u5bf9CNN\u6765\u8bf4\uff0c\u89e3\u7801\u7684\u8fc7\u7a0b\u4e5f\u5c31\u53d8\u6210\u4e86\u4ea4\u66ff\u4f7f\u7528\u53bb\u5377\u79ef\u5c42\u548c\u53bb\u6c60\u5316\u5c42\u5373\u53ef \u90a3\u4ec0\u4e48\u662f\u53bb\u5377\u79ef\u5c42(Deconvolution)\u548c\u53bb\u6c60\u5316\u5c42(Unpooling)\u5462\uff1f","title":"CNN as Encoder"},{"location":"ML/Unsupervised%20Learning%20Deep%20Auto-encoder/#unpooling","text":"\u505apooling\u7684\u65f6\u5019\uff0c\u5047\u5982\u5f97\u5230\u4e00\u4e2a4\u00d74\u7684matrix\uff0c\u5c31\u628a\u6bcf4\u4e2apixel\u5206\u4e3a\u4e00\u7ec4\uff0c\u4ece\u6bcf\u7ec4\u4e2d\u6311\u4e00\u4e2a\u6700\u5927\u7684\u7559\u4e0b\uff0c\u6b64\u65f6\u56fe\u50cf\u5c31\u53d8\u6210\u4e86\u539f\u6765\u7684\u56db\u5206\u4e4b\u4e00\u5927\u5c0f \u5982\u679c\u8fd8\u8981\u505aUnpooling\uff0c\u5c31\u9700\u8981\u63d0\u524d\u8bb0\u5f55pooling\u6240\u6311\u9009\u7684pixel\u5728\u539f\u56fe\u4e2d\u7684\u4f4d\u7f6e\uff0c\u4e0b\u56fe\u4e2d\u7528\u7070\u8272\u65b9\u6846\u6807\u6ce8 \u7136\u540e\u505aUnpooling\uff0c\u5c31\u8981\u628a\u5f53\u524d\u7684matrix\u653e\u5927\u5230\u539f\u6765\u7684\u56db\u500d\uff0c\u4e5f\u5c31\u662f\u628a2\u00d72 matrix\u91cc\u7684pixel\u6309\u7167\u539f\u5148\u8bb0\u5f55\u7684\u4f4d\u7f6e\u63d2\u5165\u653e\u5927\u540e\u76844\u00d74 matrix\u4e2d\uff0c\u5176\u4f59\u9879\u88650\u5373\u53ef \u5f53\u7136\u8fd9\u4e0d\u662f\u552f\u4e00\u7684\u505a\u6cd5\uff0c\u5728Keras\u4e2d\uff0cpooling\u5e76\u6ca1\u6709\u8bb0\u5f55\u539f\u5148\u7684\u4f4d\u7f6e\uff0c\u505aUnpooling\u7684\u65f6\u5019\u5c31\u662f\u76f4\u63a5\u628apixel\u7684\u503c\u590d\u5236\u56db\u4efd\u586b\u5145\u5230\u6269\u5927\u540e\u7684matrix\u91cc\u5373\u53ef","title":"Unpooling"},{"location":"ML/Unsupervised%20Learning%20Deep%20Auto-encoder/#deconvolution","text":"\u5b9e\u9645\u4e0a\uff0cDeconvolution\u5c31\u662fconvolution \u8fd9\u91cc\u4ee5\u4e00\u7ef4\u7684\u5377\u79ef\u4e3a\u4f8b\uff0c\u5047\u8bbe\u8f93\u5165\u662f5\u7ef4\uff0c\u8fc7\u6ee4\u5668(filter)\u7684\u5927\u5c0f\u662f3 \u5377\u79ef\u7684\u8fc7\u7a0b\u5c31\u662f\u6bcf\u4e09\u4e2a\u76f8\u90bb\u7684\u70b9\u901a\u8fc7\u8fc7\u6ee4\u5668\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u70b9\uff0c\u5982\u4e0b\u56fe\u5de6\u4fa7\u6240\u793a \u5728\u4f60\u7684\u60f3\u8c61\u4e2d\uff0c\u53bb\u5377\u79ef\u7684\u8fc7\u7a0b\u5e94\u8be5\u662f\u6bcf\u4e2a\u70b9\u90fd\u751f\u6210\u4e09\u4e2a\u70b9\uff0c\u4e0d\u540c\u7684\u70b9\u5bf9\u751f\u6210\u540c\u4e00\u4e2a\u70b9\u7684\u8d21\u732e\u503c\u76f8\u52a0\uff1b\u4f46\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u76f8\u5f53\u4e8e\u5728\u5468\u56f4\u88650\u4e4b\u540e\u518d\u6b21\u505a\u5377\u79ef\uff0c\u5982\u4e0b\u56fe\u53f3\u4fa7\u6240\u793a\uff0c\u4e24\u4e2a\u8fc7\u7a0b\u662f\u7b49\u4ef7\u7684 \u5377\u79ef\u548c\u53bb\u5377\u79ef\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u540c\u70b9\u5728\u4e8e\uff0c\u53bb\u5377\u79ef\u9700\u8981\u8865\u96f6\u4e14\u8fc7\u6ee4\u5668\u7684weight\u4e0e\u5377\u79ef\u662f\u76f8\u53cd\u7684\uff1a \u5728\u5377\u79ef\u8fc7\u7a0b\u4e2d\uff0c\u4f9d\u6b21\u662f\u6a59\u7ebf\u3001\u84dd\u7ebf\u3001\u7eff\u7ebf \u5728\u53bb\u5377\u79ef\u8fc7\u7a0b\u4e2d\uff0c\u4f9d\u6b21\u662f\u7eff\u7ebf\u3001\u84dd\u7ebf\u3001\u6a59\u7ebf \u56e0\u6b64\u5728\u5b9e\u8df5\u4e2d\uff0c\u505a\u53bb\u5377\u79ef\u7684\u65f6\u5019\u76f4\u63a5\u5bf9\u6a21\u578b\u52a0\u5377\u79ef\u5c42\u5373\u53ef","title":"Deconvolution"},{"location":"ML/Unsupervised%20Learning%20Deep%20Auto-encoder/#other-auto-encoder","text":"","title":"Other Auto-encoder"},{"location":"ML/Unsupervised%20Learning%20Deep%20Auto-encoder/#de-noising-auto-encoder","text":"\u53bb\u566a\u81ea\u7f16\u7801\u5668\u7684\u57fa\u672c\u601d\u60f3\u662f\uff0c\u628a\u8f93\u5165\u7684 \\(x\\) \u52a0\u4e0a\u4e00\u4e9b\u566a\u58f0(noise)\u53d8\u6210 \\(x'\\) \uff0c\u518d\u5bf9 \\(x'\\) \u4f9d\u6b21\u505a\u7f16\u7801(encode)\u548c\u89e3\u7801(decode)\uff0c\u5f97\u5230\u8fd8\u539f\u540e\u7684 \\(y\\) \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4e00\u822c\u7684\u81ea\u7f16\u7801\u5668\u90fd\u662f\u8ba9\u8f93\u5165\u8f93\u51fa\u5c3d\u53ef\u80fd\u63a5\u8fd1\uff0c\u4f46\u5728\u53bb\u566a\u81ea\u7f16\u7801\u5668\u4e2d\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u8ba9\u89e3\u7801\u540e\u7684 \\(y\\) \u4e0e\u52a0\u566a\u58f0\u4e4b\u524d\u7684 \\(x\\) \u8d8a\u63a5\u8fd1\u8d8a\u597d \u8fd9\u79cd\u65b9\u6cd5\u53ef\u4ee5\u589e\u52a0\u7cfb\u7edf\u7684\u9c81\u68d2\u6027\uff0c\u56e0\u4e3a\u6b64\u65f6\u7684\u7f16\u7801\u5668Encoder\u4e0d\u4ec5\u4ec5\u662f\u5728\u5b66\u4e60\u5982\u4f55\u505a\u7f16\u7801\uff0c\u5b83\u8fd8\u5b66\u4e60\u5230\u4e86\u5982\u4f55\u8fc7\u6ee4\u6389\u566a\u58f0\u8fd9\u4ef6\u4e8b\u60c5 \u53c2\u8003\u6587\u732e\uff1a Vincent, Pascal, et al. \"Extracting and composing robust features with denoising autoencoders.\" ICML, 2008.","title":"De-noising Auto-encoder"},{"location":"ML/Unsupervised%20Learning%20Deep%20Auto-encoder/#contractive-auto-encoder","text":"\u6536\u7f29\u81ea\u52a8\u7f16\u7801\u5668\u7684\u57fa\u672c\u601d\u60f3\u662f\uff0c\u5728\u505aencode\u7f16\u7801\u7684\u65f6\u5019\uff0c\u8981\u52a0\u4e0a\u4e00\u4e2a\u7ea6\u675f\uff0c\u5b83\u53ef\u4ee5\u4f7f\u5f97\uff1ainput\u7684\u53d8\u5316\u5bf9\u7f16\u7801\u540e\u5f97\u5230\u7684code\u7684\u5f71\u54cd\u6700\u5c0f\u5316 \u8fd9\u4e2a\u63cf\u8ff0\u8ddf\u53bb\u566a\u81ea\u7f16\u7801\u5668\u5f88\u50cf\uff0c\u53ea\u4e0d\u8fc7\u53bb\u566a\u81ea\u7f16\u7801\u5668\u7684\u91cd\u70b9\u5728\u4e8e\u52a0\u4e86\u566a\u58f0\u4e4b\u540e\u4f9d\u65e7\u53ef\u4ee5\u8fd8\u539f\u56de\u539f\u5148\u7684\u8f93\u5165\uff0c\u800c\u6536\u7f29\u81ea\u52a8\u7f16\u7801\u5668\u7684\u91cd\u70b9\u5728\u4e8e\u52a0\u4e86\u566a\u58f0\u4e4b\u540e\u80fd\u591f\u4fdd\u6301\u7f16\u7801\u7ed3\u679c\u4e0d\u53d8 \u53c2\u8003\u6587\u732e\uff1a Rifai, Salah, et al. \"Contractive auto-encoders: Explicit invariance during feature extraction.\u201c Proceedings of the 28th International Conference on Machine Learning (ICML-11). 2011.","title":"Contractive Auto-encoder"},{"location":"ML/Unsupervised%20Learning%20Deep%20Auto-encoder/#seq2seq-auto-encoder","text":"\u5728\u4e4b\u524d\u4ecb\u7ecd\u7684\u81ea\u7f16\u7801\u5668\u4e2d\uff0c\u8f93\u5165\u90fd\u662f\u4e00\u4e2a\u56fa\u5b9a\u957f\u5ea6\u7684vector\uff0c\u4f46\u7c7b\u4f3c\u6587\u7ae0\u3001\u8bed\u97f3\u7b49\u4fe1\u606f\u5b9e\u9645\u4e0a\u4e0d\u5e94\u8be5\u5355\u7eaf\u88ab\u8868\u793a\u4e3avector\uff0c\u90a3\u4f1a\u4e22\u5931\u5f88\u591a\u524d\u540e\u8054\u7cfb\u7684\u4fe1\u606f Seq2Seq\u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u63d0\u51fa\u7684\uff0c\u5177\u4f53\u5185\u5bb9\u5c06\u5728RNN\u90e8\u5206\u4ecb\u7ecd","title":"Seq2Seq Auto-encoder"},{"location":"ML/Unsupervised%20Learning%20Deep%20Auto-encoder/#generate","text":"\u5728\u7528\u81ea\u7f16\u7801\u5668\u7684\u65f6\u5019\uff0c\u901a\u5e38\u662f\u83b7\u53d6Encoder\u4e4b\u540e\u7684code\u4f5c\u4e3a\u964d\u7ef4\u7ed3\u679c\uff0c\u4f46\u5b9e\u9645\u4e0aDecoder\u4e5f\u662f\u6709\u4f5c\u7528\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u62ff\u5b83\u6765\u751f\u6210\u65b0\u7684\u4e1c\u897f \u4ee5MNIST\u4e3a\u4f8b\uff0c\u8bad\u7ec3\u597d\u7f16\u7801\u5668\u4e4b\u540e\uff0c\u53d6\u51fa\u5176\u4e2d\u7684Decoder\uff0c\u8f93\u5165\u4e00\u4e2a\u968f\u673a\u7684code\uff0c\u5c31\u53ef\u4ee5\u751f\u6210\u4e00\u5f20\u56fe\u50cf \u5047\u8bbe\u5c0628\u00d728\u7ef4\u7684\u56fe\u50cf\u901a\u8fc7\u4e00\u5c422\u7ef4\u7684hidden layer\u6295\u5f71\u5230\u4e8c\u7ef4\u5e73\u9762\u4e0a\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff0c\u4e0d\u540c\u989c\u8272\u7684\u70b9\u4ee3\u8868\u4e0d\u540c\u7684\u6570\u5b57\uff0c\u7136\u540e\u5728\u7ea2\u8272\u65b9\u6846\u4e2d\uff0c\u7b49\u95f4\u9694\u7684\u6311\u9009\u4e8c\u7ef4\u5411\u91cf\u4e22\u8fdbDecoder\u4e2d\uff0c\u5c31\u4f1a\u751f\u6210\u8bb8\u591a\u6570\u5b57\u7684\u56fe\u50cf \u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5bf9code\u52a0L2 regularization\uff0c\u4ee5\u9650\u5236code\u5206\u5e03\u7684\u8303\u56f4\u96c6\u4e2d\u57280\u9644\u8fd1\uff0c\u6b64\u65f6\u5c31\u53ef\u4ee5\u76f4\u63a5\u4ee50\u4e3a\u4e2d\u5fc3\u53bb\u968f\u673a\u91c7\u53d6\u6837\u672c\u70b9\uff0c\u518d\u901a\u8fc7Decoder\u751f\u6210\u56fe\u50cf \u89c2\u5bdf\u751f\u6210\u7684\u6570\u5b57\u56fe\u50cf\uff0c\u53ef\u4ee5\u53d1\u73b0\u6a2a\u8f74\u7684\u7ef4\u5ea6\u8868\u793a\u662f\u5426\u542b\u6709\u5706\u5708\uff0c\u7eb5\u8f74\u7684\u7ef4\u5ea6\u8868\u793a\u662f\u5426\u503e\u659c","title":"Generate"},{"location":"ML/Unsupervised%20Learning%20Linear%20Dimension%20Reduction/","text":"Unsupervised Learning \u00b6 Introduction \u00b6 \u5bf9\u4e8e\u65e0\u76d1\u7763\u5b66\u4e60(Unsupervised Learning)\u6765\u8bf4\uff0c\u6211\u4eec\u901a\u5e38\u53ea\u4f1a\u62e5\u6709 \\((x,\\hat y)\\) \u4e2d\u7684 \\(x\\) \u6216 \\(\\hat y\\) \u65e0\u76d1\u7763\u5b66\u4e60 (Unsupervised Learning) \u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd\uff1a \u5316\u7e41\u4e3a\u7b80\uff1a\u6ca1\u6709 output \u805a\u7c7b(Clustering) \u964d\u7ef4(Dimension Reduction) \u65e0\u4e2d\u751f\u6709(Generation)\uff1a\u6ca1\u6709 input Clustering \u00b6 \u805a\u7c7b\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u628a\u76f8\u8fd1\u7684\u6837\u672c\u5212\u5206\u4e3a\u540c\u4e00\u7c7b \u95ee\u9898\u662f\uff1a\u6211\u4eec\u5230\u5e95\u8981\u5206\u51e0\u4e2a cluster\uff1f K-means \u00b6 \u6700\u5e38\u7528\u7684\u65b9\u6cd5\u662f K-means \uff1a\u9700\u8981\u4e8b\u5148\u786e\u5b9a cluster \u7684\u4e2a\u6570 \u6211\u4eec\u6709\u4e00\u5927\u5806\u7684 unlabeled data \\(\\{x^1,...,x^n,...,x^N\\}\\) \uff0c\u6211\u4eec\u8981\u628a\u5b83\u5212\u5206\u4e3a K \u4e2a cluster \u5bf9\u6bcf\u4e2a cluster \u90fd\u8981\u627e\u4e00\u4e2a center \\(c^i,i\\in \\{1,2,...,K\\}\\) \u200b\uff08\u7ef4\u5ea6\u4e0e \\(x\\) \u76f8\u540c\uff09\uff0cinitial \u7684\u65f6\u5019\u53ef\u4ee5\u4ece training data \u91cc\u968f\u673a\u6311 K \u4e2aobject \\(x^n\\) \u51fa\u6765\u4f5c\u4e3a K \u4e2a center \\(c^i\\) \u200b \u7684\u521d\u59cb\u503c \u904d\u5386\u6240\u6709\u7684 object \\(x^n\\) \u200b\u200b\uff0c\u5e76\u5224\u65ad\u5b83\u5c5e\u4e8e\u54ea\u4e00\u4e2a cluster\uff0c\u5982\u679c \\(x^n\\) \u200b\u200b \u4e0e\u7b2c i \u4e2a cluster \u7684 center \\(c^i\\) \u200b \u200b\u6700\u63a5\u8fd1\uff0c\u90a3\u5b83\u5c31\u5c5e\u4e8e\u8be5 cluster\uff0c\u6211\u4eec\u7528 \\(b_i^n=1\\) \u200b\u200b \u6765\u8868\u793a\u7b2c n \u4e2a object \u5c5e\u4e8e\u7b2c i \u4e2a cluster\uff0c \\(b_i^n=0\\) \u200b\u200b \u8868\u793a\u4e0d\u5c5e\u4e8e \u66f4\u65b0\u6240\u6709 center\uff1a\u628a\u6bcf\u4e2a cluster \u91cc\u7684\u6240\u6709 object \u53d6\u5e73\u5747\u503c\u4f5c\u4e3a\u65b0\u7684 center \u503c\uff0c\u5373 \\(c^i=\\sum\\limits_{x^n}b_i^n x^n/\\sum\\limits_{x^n} b_i^n\\) \u200b\u200b \u53cd\u590d\u8fdb\u884c\u4ee5\u4e0a\u7684\u64cd\u4f5c \u6ce8\uff1a\u5982\u679c\u4e0d\u662f\u4ece\u539f\u5148\u7684 data set \u91cc\u53d6 center \u7684\u521d\u59cb\u503c\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u90e8\u5206 cluster \u6ca1\u6709\u6837\u672c\u70b9 HAC \u00b6 HAC\uff08Hierarchical Agglomerative Clustering\uff09\uff0c\u5c42\u6b21\u805a\u7c7b \u5047\u8bbe\u73b0\u5728\u6709 5 \u4e2a\u6837\u672c\u70b9\uff1a build a tree\uff1a \u8fc7\u7a0b\u7c7b\u4f3c\u5efa Huffman Tree\uff0c\u8fd9\u91cc\u6bcf\u6b21\u9009\u53d6\u6700\u76f8\u4f3c\u7684 2 \u4e2a\u6837\u672c\u70b9 merge\uff08\u6bd4\u5982\u53d6 vector \u7684\u5e73\u5747\uff09\u5f62\u6210\u65b0\u7684\u6837\u672c\u70b9\uff0c\u76f4\u81f3\u5269\u4e00\u4e2a\u6837\u672c\u70b9 pick a threshold\uff1a \u9009\u53d6\u9608\u503c\uff0c\u5f62\u8c61\u6765\u8bf4\u5c31\u662f\u5728\u6784\u9020\u597d\u7684 tree \u4e0a\u6a2a\u7740\u5207\u4e00\u5200\uff0c\u76f8\u8fde\u7684\u53f6\u7ed3\u70b9\u5c5e\u4e8e\u540c\u4e00\u4e2a cluster \u4e0b\u56fe\u4e2d\uff0c\u4e0d\u540c\u989c\u8272\u7684\u6a2a\u7ebf\u548c\u53f6\u7ed3\u70b9\u4e0a\u4e0d\u540c\u989c\u8272\u7684\u65b9\u6846\u5bf9\u5e94\u7740\u5207\u6cd5\u4e0e cluster \u7684\u5206\u6cd5 HAC \u4e2d cluster \u7684\u6570\u91cf\u53d6\u51b3\u4e8e\u5207\u7684\u5730\u65b9\uff0c\u800c K-means \u662f\u8981\u4e8b\u5148\u786e\u5b9a\u7684 Dimension Reduction \u00b6 Introduction \u00b6 clustering \u7684\u7f3a\u70b9\u662f\u4ee5\u504f\u6982\u5168\uff0c\u6bcf\u4e2a object \u90fd\u8981\u5c5e\u4e8e\u4e00\u4e2a cluster\uff0c\u800c\u5b9e\u9645\u4e0a\u67d0\u4e2a object \u53ef\u80fd\u62e5\u6709\u591a\u79cd\u5c5e\u6027\uff0ccluster \u4f1a\u5931\u53bb\u5f88\u591a\u4fe1\u606f\uff1b\u7528 vector \u6765\u8868\u793a\u6bcf\u4e00\u79cd\u5c5e\u6027\u6765\u4ee3\u8868\u4e00\u4e2a object\uff0c\u8fd9\u79cd\u505a\u6cd5\u5c31\u53eb\u505a Distributed Representation\uff0c\u6216\u8005\u8bf4 Dimension Reduction\uff08\u9ad8\u7ef4 object \u7528 \u4f4e\u7ef4 vector \u6765\u8868\u793a\uff09 Why Dimension Reduction Help? \u00b6 \u4ee5\u4e0b\u56fe\u4e3a\u4f8b\uff0c\u7528 3D \u7a7a\u95f4\u6765\u8868\u793a\u8fd9\u4e2a data \u662f\u5f88\u6d6a\u8d39\u7684\uff0c\u5b8c\u5168\u53ef\u4ee5\u628a\u5b83\u644a\u5e73\u4e86\u8868\u793a \u4ee5\u624b\u5199\u6570\u5b57 MNIST \u4e3a\u4f8b\uff0c\u5728 28*28 \u7684 dimension \u4e2d\u7684\u5927\u90e8\u5206\u56fe\u7247\u90fd\u4e0d\u662f\u6570\u5b57\uff0c\u6240\u4ee5\u5176\u5b9e\u7528\u6765\u8868\u793a\u6570\u5b57\u6240\u9700\u8981\u7684 dim \u8fdc\u6bd4 28*28 \u5c0f \u6211\u4eec\u53ea\u8981\u6293\u4f4f data \u7684\u5173\u952e\u7684\u70b9\u5c31\u53ef\u4ee5\u505a\u5230 \u53bb\u829c\u5b58\u83c1\uff0c\u5316\u7e41\u4e3a\u7b80 How to do Dimension Reduction\uff1f \u00b6 \u5728 Dimension Reduction \u91cc\u5c31\u662f\u8981\u627e\u4e00\u4e2a function\uff0cinput \u662f\u9ad8\u7ef4\u7684 x\uff0coutput \u662f\u4f4e\u7ef4\u7684 z \u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f Feature Selection \uff0c\u5373\u4ece\u539f\u6709\u7684 dimension \u4e2d\u76f4\u63a5\u53bb\u6389\u4e00\u4e9b\u5bf9\u7ed3\u679c\u6ca1\u6709\u5f71\u54cd\u7684 dim\uff0c\u4f46\u8fd9\u4e2a\u65b9\u6cd5\u5e76\u4e0d\u666e\u9002\uff0c\u6bd4\u5982\u4e0a\u9762\u7684\u87ba\u65cb\u56fe \u53e6\u4e00\u4e2a\u5e38\u89c1\u7684\u65b9\u6cd5\u53eb\u505a PCA (Principe Component Analysis)\uff0c\u5373\u4e3b\u6210\u5206\u5206\u6790 PCA \u7684 input x \u548c output z \u4e4b\u95f4\u662f linear transform\uff0c\u5373 \\(z=Wx\\) \u200b\u200b\u200b\uff1bPCA \u8981\u505a\u7684\uff0c\u5c31\u662f\u6839\u636e\u4e00\u5927\u5806\u7684 x \u628a W \u7ed9\u627e\u51fa\u6765 ( \\(z\\) \u672a\u77e5) PCA \u00b6 PCA\uff1a\u4e3b\u6210\u5206\u5206\u6790 PCA \u7684 input x \u548c output z \u4e4b\u95f4\u662f linear transform\uff0c\u5373 \\(z=Wx\\) \u200b\uff1bPCA \u8981\u505a\u7684\uff0c\u5c31\u662f\u6839\u636e\u4e00\u5927\u5806\u7684 x \u628a W \u7ed9\u627e\u51fa\u6765 ( \\(z\\) \u200b \u672a\u77e5) \u5047\u8bbe \\(W\\) \u200b\u200b \u662f \\(k*m\\) \u200b\u200b \u7684\uff0c \\(x\\) \u200b\u200b \u662f \\(m*n\\) \u200b\u200b \u7684\uff0c\u90a3 \\(k\\) \u200b\u200b \u8868\u793a\u964d\u7ef4\u540e\u7684\u8868\u793a\u4e00\u4e2a\u6837\u672c\u70b9\u7684\u7ef4\u6570\uff0c \\(m\\) \u200b\u200b \u8868\u793a\u964d\u7ef4\u524d\u8868\u793a\u4e00\u4e2a\u6837\u672c\u70b9\u7684\u7ef4\u6570\uff0c \\(n\\) \u200b\u200b \u8868\u793a\u6837\u672c\u91cf Reduce to 1-D \u00b6 \u4e3a\u4e86\u7b80\u5316\u95ee\u9898\uff0c\u5148\u53ea\u770b\u628a x \u6295\u5f71\u5230\u4e00\u7ef4\u7684\u60c5\u51b5 \\(z_1=w^1\\cdot x\\) \u200b\u200b\u200b\u200b\u200b\uff0c\u5176\u4e2d \\(w^1\\) \u200b\u200b\u200b\u200b\u200b \u8868\u793a \\(w\\) \u200b\u200b\u200b\u200b\u200b \u7684\u7b2c\u4e00\u4e2a row vector\uff0c\u5148\u5047\u8bbe \\(w^1\\) \u200b\u200b\u200b\u200b\u200b \u7684\u957f\u5ea6\u4e3a 1\uff0c\u5373 \\(||w^1||_2=1\\) \u200b\u200b\u200b\u200b\u200b\uff0c\u6b64\u65f6 \\(z_1\\) \u200b\u200b\u200b\u200b\u200b \u5c31\u662f \\(x\\) \u200b\u200b\u200b \u200b\u200b\u5728 \\(w^1\\) \u200b\u200b\u200b\u200b \u200b\u200b\u65b9\u5411\u4e0a\u7684\u6295\u5f71\uff0c\u5176\u4e2d \\(w^i\\) \u200b \u548c \\(x\\) \u200b \u90fd\u662f\u5217\u5411\u91cf \u90a3\u6211\u4eec\u5230\u5e95\u8981\u627e\u4ec0\u4e48\u6837\u7684 \\(w^1\\) \u200b \u5462\uff1f \u4e0b\u9762\u7684\u56fe\u662f\u5b9d\u53ef\u68a6\u7684\u6837\u672c\u70b9\uff0c\u6a2a\u5750\u6807\u4ee3\u8868\u653b\u51fb\u529b\uff0c\u7eb5\u5750\u6807\u4ee3\u8868\u9632\u5fa1\u529b\uff0c\u6211\u4eec\u5e0c\u671b\u9009\u8fd9\u6837\u4e00\u4e2a \\(w^1\\) \uff0c\u5b83\u4f7f\u5f97 \\(x\\) \u7ecf\u8fc7\u6295\u5f71\u4e4b\u540e\u5f97\u5230\u7684 \\(z_1\\) \uff08variance\uff09\u5206\u5e03\u8d8a\u5927\u8d8a\u597d\uff0c\u6211\u4eec\u4e0d\u5e0c\u671b projection \u4f7f\u8fd9\u4e9b data point \u901a\u901a\u6324\u5728\u4e00\u8d77\uff0c\u5bfc\u81f4\u70b9\u4e0e\u70b9\u4e4b\u95f4\u7684\u5947\u5f02\u5ea6\u6d88\u5931\uff0c\u5c31\u662f\u8981 maximize \\(Var(z_1)=\\frac{1}{N}\\sum\\limits_{z_1}(z_1-\\bar{z_1})^2, ||w^1||_2=1\\) \uff0c \\(\\bar {z_1}\\) \u662f \\(z_1\\) \u7684\u5e73\u5747\u503c Reduce to n-D \u00b6 \u5f53\u7136\u6211\u4eec\u4e0d\u53ef\u80fd\u53ea\u6295\u5f71\u5230\u4e00\u7ef4\u7a7a\u95f4\uff0c\u66f4\u7ecf\u5e38\u7684\u662f\u6295\u5f71\u5230\u66f4\u9ad8\u7ef4\u7684\u7a7a\u95f4 \u5bf9 \\(z=Wx\\) \u6765\u8bf4\uff1a\u5176\u4e2d \\(w^i\\) \u548c \\(x\\) \u90fd\u662f\u5217\u5411\u91cf \\(z_1=w^1\\cdot x\\) \u200b\uff0c\u8868\u793a \\(x\\) \u200b \u5728 \\(w^1\\) \u200b\u200b \u65b9\u5411\u4e0a\u7684\u6295\u5f71\uff08\u7b2c\u4e00\u4e2a\u65b0\u7ef4\u5ea6\uff09 \\(z_2=w^2\\cdot x\\) \u200b\uff0c\u8868\u793a \\(x\\) \u200b \u5728 \\(w^2\\) \u200b \u65b9\u5411\u4e0a\u7684\u6295\u5f71\uff08\u7b2c\u4e8c\u4e2a\u65b0\u7ef4\u5ea6\uff09 ... \\[ \\begin{align} z&=[z_1,z_2,...] \\\\ W&= \\begin{bmatrix} (w^1)^T \\\\ (w^2)^T \\\\ ... \\end{bmatrix} \\end{align} \\] \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u7684 \\(w^i\\) \u200b\u200b\u200b\u200b \u5fc5\u987b\u76f8\u4e92\u6b63\u4ea4\uff0c\u6b64\u65f6 \\(W\\) \u200b\u200b\u200b\u200b \u662f\u6b63\u4ea4\u77e9\u9635 (orthogonal matrix)\uff0c\u5982\u679c\u4e0d\u52a0\u8fd9\u4e2a constraint\uff0c\u5219\u627e\u5230\u7684 \\(w^1,w^2,...\\) \u200b\u200b\u200b\u200b \u90fd\u662f \\(w^1\\) \uff0c\u800c\u4e14 \\(||w^i||_2=1\\) Lagrange multiplier \u00b6 \u6c42\u89e3 PCA\uff0c\u5b9e\u9645\u4e0a\u5df2\u7ecf\u6709\u73b0\u6210\u7684\u51fd\u6570\u53ef\u4ee5\u8c03\u7528\uff0c\u6b64\u5916\u4e5f\u53ef\u4ee5\u628a PCA \u63cf\u8ff0\u6210 neural network\uff0c\u7136\u540e\u7528 gradient descent \u7684\u65b9\u6cd5\u6765\u6c42\u89e3 \u4e0b\u9762\u662f PCA \u7684\u63a8\u5bfc\u8fc7\u7a0b\uff08warning of math\uff09 calculate \\(w^1\\) \u200b \u00b6 \u76ee\u6807\uff1amaximize \\(Var(z_1)\\) \uff0c\u6761\u4ef6\uff1a \\((w^1)^Tw^1=1\\) \u9996\u5148\u8ba1\u7b97\u51fa \\(\\bar{z_1}\\) \u200b\uff1a $$ \\begin{split} &z_1=w^1\\cdot x\\ &\\bar{z_1}=\\frac{1}{N}\\sum z_1=\\frac{1}{N}\\sum w^1\\cdot x=w^1\\cdot \\frac{1}{N}\\sum x=w^1\\cdot \\bar x \\end{split} $$ \u7136\u540e\u8ba1\u7b97 maximize \u7684\u5bf9\u8c61 \\(Var(z_1)\\) \u200b\uff1a $$ \\begin{split} Var(z_1)&=\\frac{1}{N}\\sum\\limits_{z_1} (z_1-\\bar{z_1})^2\\ &=\\frac{1}{N}\\sum\\limits_{x} (w^1\\cdot x-w^1\\cdot \\bar x)^2\\ &=\\frac{1}{N}\\sum (w^1\\cdot (x-\\bar x))^2 \\end{split} $$ \u56e0\u4e3a $$ (a\u00b7b)^2=(a^Tb)^2=a^Tba^Tb=a^Tb(a^Tb)^T=a^Tbb^Ta $$ \u6ce8\u610f\u8fd9\u91cc \\(a\u00b7b\\) \u662f\u5411\u91cf\u5185\u79ef\uff0c \\(a^Tb\\) \u662f\u77e9\u9635\u76f8\u4e58\uff0c \\(a^Tb\\) \u662f scale \u6240\u4ee5 $$ \\begin{split} Var(z_1)&=\\frac{1}{N}\\sum (w^1\\cdot (x-\\bar x))^2\\ &=\\frac{1}{N}\\sum(w^1)^T(x-\\bar x)(x-\\bar x)^T w^1\\ &=(w^1)^T\\frac{1}{N}\\ [\\sum(x-\\bar x)(x-\\bar x)^T]\\ w^1\\ &=(w^1)^T Cov(x)w^1 \\end{split} $$ \u8981 maximize \\(Var(z_1)=(w^1)^TCov(x)w^1\\) \u200b\u200b\uff0c\u9700\u8981\u52a0\u4e0a \\(||w^1||_2=(w^1)^Tw^1=1\\) \u200b\u200b \u7684\u7ea6\u675f\u6761\u4ef6\uff0c\u5426\u5219\u663e\u7136 \\(w^1\\) \u200b\u200b\u53ef\u4ee5\u53d6\u65e0\u7a77\u5927 \u4ee4 \\(S=Cov(x)\\) \u200b\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u6c42 maximize \\(Var(z_1)=(w^1)^TSw^1\\) \u200b\uff0c\u4e14 \\((w^1)^Tw^1=1\\) \u5bf9 \\(S=Cov(x)\\) \u200b\u200b\uff0c\u5b83\u662f\uff1a \u5bf9\u79f0\u7684 (symmetric) \u534a\u6b63\u5b9a\u7684 (positive-semidefine) \u6240\u6709\u7279\u5f81\u503c (eigenvalues) \u975e\u8d1f\u7684 (non-negative) \u4f7f\u7528\u62c9\u683c\u6717\u65e5\u4e58\u6570\u6cd5\uff08Lagrange multiplier\uff09\uff0c\u5229\u7528\u76ee\u6807\u548c\u7ea6\u675f\u6761\u4ef6\u6784\u9020\u51fd\u6570\uff1a $$ g(w^1)=(w^1)^TSw^1-\\alpha((w^1)^Tw^1-1) $$ \u7136\u540e\u5bf9 \\(w^1\\) \u8fd9\u4e2a vector \u91cc\u7684\u6bcf\u4e00\u4e2a element \u505a\u504f\u5fae\u5206\uff1a $$ \\partial g(w^1)/\\partial w_1^1=0\\ \\partial g(w^1)/\\partial w_2^1=0\\ \\partial g(w^1)/\\partial w_3^1=0\\ ... $$ \u6574\u7406\u4e0a\u8ff0\u63a8\u5bfc\u5f0f\uff0c\u53ef\u4ee5\u5f97\u5230\uff1a \\(Sw^1=\\alpha w^1\\) \u6ce8\u610f\u5230\u6ee1\u8db3 \\((w^1)^Tw^1=1\\) \u200b\u200b \u7684\u7279\u5f81\u5411\u91cf \\(w^1\\) \u200b\u200b \u6709\u5f88\u591a\uff0c\u6211\u4eec\u8981\u627e\u7684\u662f\u53ef\u4ee5 maximize \\((w^1)^TSw^1\\) \u200b\u200b \u7684\u90a3\u4e00\u4e2a\uff0c\u4e8e\u662f\u5229\u7528\u4e0a\u4e00\u4e2a\u5f0f\u5b50\uff1a $$ (w^1)^TSw^1=(w^1)^T \\alpha w^1=\\alpha (w^1)^T w^1=\\alpha $$ \u6b64\u65f6 maximize \\((w^1)^TSw^1\\) \u200b \u5c31\u53d8\u6210\u4e86 maximize \\(\\alpha\\) \u200b\uff0c\u4e5f\u5c31\u662f\u5f53 \\(S\\) \u200b \u7684\u7279\u5f81\u503c \\(\\alpha\\) \u200b \u6700\u5927\u65f6\u5bf9\u5e94\u7684\u90a3\u4e2a\u7279\u5f81\u5411\u91cf \\(w^1\\) \u200b \u5c31\u662f\u6211\u4eec\u8981\u627e\u7684\u76ee\u6807 \u7ed3\u8bba\uff1a \\(w^1\\) \u200b\u200b\u662f \\(S=Cov(x)\\) \u200b\u200b \u8fd9\u4e2a matrix \u4e2d\u7684\u7279\u5f81\u5411\u91cf\uff0c\u5bf9\u5e94\u6700\u5927\u7684\u7279\u5f81\u503c \\(\\lambda_1\\) \u200b\u200b calculate \\(w^2\\) \u00b6 \u5728\u63a8\u5bfc \\(w^2\\) \u200b \u200b\u65f6\uff0c\u76f8\u8f83\u4e8e \\(w^1\\) \u200b\u200b\uff0c\u591a\u4e86\u4e00\u4e2a\u9650\u5236\u6761\u4ef6\uff1a \\(w^2\\) \u200b\u200b \u5fc5\u987b\u4e0e \\(w^1\\) \u200b\u200b \u6b63\u4ea4 (orthogonal) \u76ee\u6807\uff1amaximize \\(Var(z_2)\\) \uff0c\u6761\u4ef6\uff1a \\((w^2)^Tw^2=1,(w^2)^Tw^1=0\\) \u7ed3\u8bba\uff1a \\(w^2\\) \u200b\u200b \u4e5f\u662f \\(S=Cov(x)\\) \u200b\u200b\u8fd9\u4e2amatrix\u4e2d\u7684\u7279\u5f81\u5411\u91cf\uff0c\u5bf9\u5e94\u7b2c\u4e8c\u5927\u7684\u7279\u5f81\u503c \\(\\lambda_2\\) \u200b\u200b \u540c\u6837\u662f\u7528\u62c9\u683c\u6717\u65e5\u4e58\u6570\u6cd5\u6c42\u89e3\uff0c\u5148\u5199\u4e00\u4e2a\u5173\u4e8e \\(w^2\\) \u200b \u7684 function\uff0c\u5305\u542b\u8981 maximize \u7684\u5bf9\u8c61\uff0c\u4ee5\u53ca\u4e24\u4e2a\u7ea6\u675f\u6761\u4ef6 $$ g(w^2)=(w^2)^TSw^2-\\alpha((w^2)^Tw^2-1)-\\beta((w^2)^Tw^1-0) $$ \u5bf9 \\(w^2\\) \u200b \u7684\u6bcf\u4e2a element \u505a\u504f\u5fae\u5206\uff1a $$ \\partial g(w^2)/\\partial w_1^2=0\\ \\partial g(w^2)/\\partial w_2^2=0\\ \\partial g(w^2)/\\partial w_3^2=0\\ ... $$ \u6574\u7406\u540e\u5f97\u5230\uff1a $$ Sw^2-\\alpha w^2-\\beta w^1=0 $$ \u4e0a\u5f0f\u4e24\u4fa7\u540c\u4e58 \\((w^1)^T\\) \u200b\uff0c\u5f97\u5230\uff1a $$ (w^1)^TSw^2-\\alpha (w^1)^Tw^2-\\beta (w^1)^Tw^1=0 $$ \u5176\u4e2d \\(\\alpha (w^1)^Tw^2=0,\\beta (w^1)^Tw^1=\\beta\\) \u200b\uff0c \u800c\u7531\u4e8e \\((w^1)^TSw^2\\) \u200b \u662f vector\u00d7matrix\u00d7vector=scalar\uff0c\u56e0\u6b64\u5728\u5916\u9762\u5957\u4e00\u4e2atranspose\u4e0d\u4f1a\u6539\u53d8\u5176\u503c\uff0c\u56e0\u6b64\u8be5\u90e8\u5206\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff1a \u6ce8\uff1aS\u662fsymmetric\u7684\uff0c\u56e0\u6b64 \\(S^T=S\\) $$ \\begin{split} (w^1)^TSw^2&=((w^1)^TSw^2)^T\\ &=(w^2)^TS^Tw^1\\ &=(w^2)^TSw^1 \\end{split} $$ \u6211\u4eec\u5df2\u7ecf\u77e5\u9053 \\(w^1\\) \u6ee1\u8db3 \\(Sw^1=\\lambda_1 w^1\\) \uff0c\u4ee3\u5165\u4e0a\u5f0f\uff1a $$ \\begin{split} (w^1)^TSw^2&=(w^2)^TSw^1\\ &=\\lambda_1(w^2)^Tw^1\\ &=0 \\end{split} $$ \u56e0\u6b64\u6709 \\((w^1)^TSw^2=0\\) \uff0c \\(\\alpha (w^1)^Tw^2=0\\) \uff0c \\(\\beta (w^1)^Tw^1=\\beta\\) \uff0c\u53c8\u6839\u636e $$ (w^1)^TSw^2-\\alpha (w^1)^Tw^2-\\beta (w^1)^Tw^1=0 $$ \u53ef\u4ee5\u63a8\u5f97 \\(\\beta=0\\) \u6b64\u65f6 \\(Sw^2-\\alpha w^2-\\beta w^1=0\\) \u5c31\u8f6c\u53d8\u6210\u4e86 \\(Sw^2-\\alpha w^2=0\\) \uff0c\u5373 $$ Sw^2=\\alpha w^2 $$ \u7531\u4e8e \\(S\\) \u662fsymmetric\u7684\uff0c\u56e0\u6b64\u5728\u4e0d\u4e0e \\(w_1\\) \u51b2\u7a81\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u91cc \\(\\alpha\\) \u9009\u53d6\u7b2c\u4e8c\u5927\u7684\u7279\u5f81\u503c \\(\\lambda_2\\) \u65f6\uff0c\u53ef\u4ee5\u4f7f \\((w^2)^TSw^2\\) \u6700\u5927 \u7ed3\u8bba\uff1a \\(w^2\\) \u4e5f\u662f \\(S=Cov(x)\\) \u8fd9\u4e2amatrix\u4e2d\u7684\u7279\u5f81\u5411\u91cf\uff0c\u5bf9\u5e94\u7b2c\u4e8c\u5927\u7684\u7279\u5f81\u503c \\(\\lambda_2\\) PCA-decorrelation \u00b6 \\(z=W\\cdot x\\) \u795e\u5947\u4e4b\u5904\u5728\u4e8e \\(Cov(z)=D\\) \uff0c\u5373z\u7684covariance\u662f\u4e00\u4e2adiagonal matrix\uff0c\u63a8\u5bfc\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a PCA\u53ef\u4ee5\u8ba9\u4e0d\u540cdimension\u4e4b\u95f4\u7684covariance\u53d8\u4e3a0\uff0c\u5373\u4e0d\u540cnew feature\u4e4b\u95f4\u662f\u6ca1\u6709correlation\u7684\uff0c\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff0c \u51cf\u5c11feature\u4e4b\u95f4\u7684\u8054\u7cfb\u4ece\u800c\u51cf\u5c11model\u6240\u9700\u7684\u53c2\u6570\u91cf \u5982\u679c\u4f60\u628a\u539f\u6765\u7684input data\u901a\u8fc7PCA\u4e4b\u540e\u518d\u7ed9\u5176\u4ed6model\u4f7f\u7528\uff0c\u90a3\u8fd9\u4e9bmodel\u5c31\u53ef\u4ee5\u4f7f\u7528\u7b80\u5355\u7684\u5f62\u5f0f\uff0c\u800c\u65e0\u9700\u8003\u8651\u4e0d\u540cdimension\u4e4b\u95f4\u7c7b\u4f3c \\(x_1\\cdot x_2,x_3\\cdot x_5^3,...\\) \u8fd9\u4e9b\u4ea4\u53c9\u9879\uff0c\u6b64\u65f6model\u5f97\u5230\u7b80\u5316\uff0c\u53c2\u6570\u91cf\u5927\u5927\u964d\u4f4e\uff0c\u76f8\u540c\u7684data\u91cf\u53ef\u4ee5\u5f97\u5230\u66f4\u597d\u7684\u8bad\u7ec3\u7ed3\u679c\uff0c\u4ece\u800c\u53ef\u4ee5\u907f\u514doverfitting\u7684\u53d1\u751f Reconstruction Component \u00b6 \u5047\u8bbe\u6211\u4eec\u73b0\u5728\u8003\u8651\u7684\u662f\u624b\u5199\u6570\u5b57\u8bc6\u522b\uff0c\u8fd9\u4e9b\u6570\u5b57\u662f\u7531\u4e00\u4e9b\u7c7b\u4f3c\u4e8e\u7b14\u753b\u7684basic component\u7ec4\u6210\u7684\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2avector\uff0c\u8bb0\u505a \\(u_1,u_2,u_3,...\\) \uff0c\u4ee5MNIST\u4e3a\u4f8b\uff0c\u4e0d\u540c\u7684\u7b14\u753b\u90fd\u662f\u4e00\u4e2a28\u00d728\u7684vector\uff0c\u628a\u67d0\u51e0\u4e2avector\u52a0\u8d77\u6765\uff0c\u5c31\u7ec4\u6210\u4e86\u4e00\u4e2a28\u00d728\u7684digit \u5199\u6210\u8868\u8fbe\u5f0f\u5c31\u662f\uff1a \\(x\u2248c_1u^1+c_2u^2+...+c_ku^k+\\bar x\\) \u5176\u4e2d \\(x\\) \u4ee3\u8868\u67d0\u5f20digit image\u4e2d\u7684pixel\uff0c\u5b83\u7b49\u4e8ek\u4e2acomponent\u7684\u52a0\u6743\u548c \\(\\sum c_iu^i\\) \u52a0\u4e0a\u6240\u6709image\u7684\u5e73\u5747\u503c \\(\\bar x\\) \u6bd4\u59827\u5c31\u662f \\(x=u^1+u^3+u^5\\) \uff0c\u6211\u4eec\u53ef\u4ee5\u7528 \\(\\left [\\begin{matrix}c_1\\ c_2\\ c_3...c_k \\end{matrix} \\right]^T\\) \u6765\u8868\u793a\u4e00\u5f20digit image\uff0c\u5982\u679ccomponent\u7684\u6570\u76eek\u8fdc\u6bd4pixel\u7684\u6570\u76ee\u8981\u5c0f\uff0c\u90a3\u8fd9\u4e2a\u63cf\u8ff0\u5c31\u662f\u6bd4\u8f83\u6709\u6548\u7684 \u5b9e\u9645\u4e0a\u76ee\u524d\u6211\u4eec\u5e76\u4e0d\u77e5\u9053 \\(u^1\\) ~ \\(u^k\\) \u5177\u4f53\u7684\u503c\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u627e\u8fd9\u6837k\u4e2avector\uff0c\u4f7f\u5f97 \\(x-\\bar x\\) \u4e0e \\(\\hat x\\) \u8d8a\u63a5\u8fd1\u8d8a\u597d\uff1a $$ x-\\bar x\u2248c_1u^1+c_2u^2+...+c_ku^k=\\hat x $$ \u800c\u7528\u672a\u77e5component\u6765\u63cf\u8ff0\u7684\u8fd9\u90e8\u5206\u5185\u5bb9\uff0c\u53eb\u505aReconstruction error\uff0c\u5373 \\(||(x-\\bar x)-\\hat x||\\) \u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u8981\u53bb\u627ek\u4e2avector \\(u^i\\) \u53bbminimize\u8fd9\u4e2aerror\uff1a $$ L=\\min\\limits_{u^1,...,u^k}\\sum||(x-\\bar x)-(\\sum\\limits_{i=1}^k c_i u^i) ||_2 $$ \u56de\u987ePCA\uff0c \\(z=W\\cdot x\\) \uff0c\u5b9e\u9645\u4e0a\u6211\u4eec\u901a\u8fc7PCA\u6700\u7ec8\u89e3\u5f97\u7684 \\(\\{w^1,w^2,...,w^k\\}\\) \u5c31\u662f\u4f7freconstruction error\u6700\u5c0f\u5316\u7684 \\(\\{u^1,u^2,...,u^k\\}\\) \uff0c\u7b80\u5355\u8bc1\u660e\u5982\u4e0b\uff1a \u6211\u4eec\u5c06\u6240\u6709\u7684 \\(x^i-\\bar x\u2248c_1^i u^1+c_2^i u^2+...\\) \u90fd\u7528\u4e0b\u56fe\u4e2d\u7684\u77e9\u9635\u76f8\u4e58\u6765\u8868\u793a\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u4f7f\u7b49\u53f7\u4e24\u4fa7\u77e9\u9635\u4e4b\u95f4\u7684\u5dee\u8ddd\u8d8a\u5c0f\u8d8a\u597d \u53ef\u4ee5\u4f7f\u7528SVD\u5c06\u6bcf\u4e2amatrix \\(X_{m\u00d7n}\\) \u90fd\u62c6\u6210matrix \\(U_{m\u00d7k}\\) \u3001 \\(\\Sigma_{k\u00d7k}\\) \u3001 \\(V_{k\u00d7n}\\) \u7684\u4e58\u79ef\uff0c\u5176\u4e2dk\u4e3acomponent\u7684\u6570\u76ee \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4f7f\u7528SVD\u62c6\u89e3\u540e\u7684\u4e09\u4e2a\u77e9\u9635\u76f8\u4e58\uff0c\u662f\u8ddf\u7b49\u53f7\u5de6\u8fb9\u7684\u77e9\u9635 \\(X\\) \u6700\u63a5\u8fd1\u7684\uff0c\u6b64\u65f6 \\(U\\) \u5c31\u5bf9\u5e94\u7740 \\(u^i\\) \u90a3\u90e8\u5206\u7684\u77e9\u9635\uff0c \\(\\Sigma\\cdot V\\) \u5c31\u5bf9\u5e94\u7740 \\(c_k^i\\) \u90a3\u90e8\u5206\u7684\u77e9\u9635 \u6839\u636eSVD\u7684\u7ed3\u8bba\uff0c\u7ec4\u6210\u77e9\u9635 \\(U\\) \u7684k\u4e2a\u5217\u5411\u91cf(\u6807\u51c6\u6b63\u4ea4\u5411\u91cf, orthonormal vector)\u5c31\u662f \\(XX^T\\) \u6700\u5927\u7684k\u4e2a\u7279\u5f81\u503c(eignvalue)\u6240\u5bf9\u5e94\u7684\u7279\u5f81\u5411\u91cf(eigenvector)\uff0c\u800c \\(XX^T\\) \u5b9e\u9645\u4e0a\u5c31\u662f \\(x\\) \u7684covariance matrix\uff0c\u56e0\u6b64 \\(U\\) \u5c31\u662fPCA\u7684k\u4e2a\u89e3 \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u901a\u8fc7PCA\u627e\u51fa\u6765\u7684Dimension Reduction\u7684transform\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u628a \\(X\\) \u62c6\u89e3\u6210\u80fd\u591f\u6700\u5c0f\u5316Reconstruction error\u7684component\u7684\u8fc7\u7a0b\uff0c\u901a\u8fc7PCA\u6240\u5f97\u5230\u7684 \\(w^i\\) \u5c31\u662fcomponent \\(u^i\\) \uff0c\u800cDimension Reduction\u7684\u7ed3\u679c\u5c31\u662f\u53c2\u6570 \\(c_i\\) \u7b80\u5355\u6765\u8bf4\u5c31\u662f\uff0c\u7528PCA\u5bf9 \\(x\\) \u8fdb\u884c\u964d\u7ef4\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u8981\u627e\u7684\u6295\u5f71\u65b9\u5f0f \\(w^i\\) \u5c31\u76f8\u5f53\u4e8e\u6070\u5f53\u7684\u7ec4\u4ef6 \\(u^i\\) \uff0c\u6295\u5f71\u7ed3\u679c \\(z^i\\) \u5c31\u76f8\u5f53\u4e8e\u8fd9\u4e9b\u7ec4\u4ef6\u5404\u81ea\u6240\u5360\u7684\u6bd4\u4f8b \\(c_i\\) \u4e0b\u9762\u7684\u5f0f\u5b50\u7b80\u5355\u6f14\u793a\u4e86\u5c06\u4e00\u4e2a\u6837\u672c\u70b9 \\(x\\) \u5212\u5206\u4e3ak\u4e2a\u7ec4\u4ef6\u7684\u8fc7\u7a0b\uff0c\u5176\u4e2d \\(\\left [\\begin{matrix}c_1 \\ c_2\\ ... c_k \\end{matrix} \\right ]^T\\) \u662f\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u6bd4\u4f8b\uff1b\u628a \\(x\\) \u5212\u5206\u4e3ak\u4e2a\u7ec4\u4ef6\u5373\u4ecen\u7ef4\u6295\u5f71\u5230k\u7ef4\u7a7a\u95f4\uff0c \\(\\left [\\begin{matrix}c_1 \\ c_2\\ ... c_k \\end{matrix} \\right ]^T\\) \u4e5f\u662f\u6295\u5f71\u7ed3\u679c \u6ce8\uff1a \\(x\\) \u548c \\(u_i\\) \u5747\u4e3an\u7ef4\u5217\u5411\u91cf $$ \\begin{split} &x= \\left [ \\begin{matrix} u_1\\ u_2\\ ...\\ u_k \\end{matrix} \\right ]\\cdot \\left [ \\begin{matrix} c_1\\ c_2\\ ...\\ c_k \\end{matrix} \\right ]\\ \\ &\\left [ \\begin{matrix} x_1\\ x_2\\ ...\\ x_n \\end{matrix} \\right ]=\\left [ \\begin{matrix} u_1^1\\ u_2^1\\ ... u_k^1 \\ u_1^2\\ u_2^2\\ ... u_k^2 \\ ...\\ u_1^n\\ u_2^n\\ ... u_k^n \\end{matrix} \\right ]\\cdot \\left [ \\begin{matrix} c_1\\ c_2\\ ...\\ c_k \\end{matrix} \\right ]\\ \\end{split} $$ NN for PCA \u00b6","title":"Unsupervised Learning"},{"location":"ML/Unsupervised%20Learning%20Linear%20Dimension%20Reduction/#unsupervised-learning","text":"","title":"Unsupervised Learning"},{"location":"ML/Unsupervised%20Learning%20Linear%20Dimension%20Reduction/#introduction","text":"\u5bf9\u4e8e\u65e0\u76d1\u7763\u5b66\u4e60(Unsupervised Learning)\u6765\u8bf4\uff0c\u6211\u4eec\u901a\u5e38\u53ea\u4f1a\u62e5\u6709 \\((x,\\hat y)\\) \u4e2d\u7684 \\(x\\) \u6216 \\(\\hat y\\) \u65e0\u76d1\u7763\u5b66\u4e60 (Unsupervised Learning) \u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd\uff1a \u5316\u7e41\u4e3a\u7b80\uff1a\u6ca1\u6709 output \u805a\u7c7b(Clustering) \u964d\u7ef4(Dimension Reduction) \u65e0\u4e2d\u751f\u6709(Generation)\uff1a\u6ca1\u6709 input","title":"Introduction"},{"location":"ML/Unsupervised%20Learning%20Linear%20Dimension%20Reduction/#clustering","text":"\u805a\u7c7b\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u628a\u76f8\u8fd1\u7684\u6837\u672c\u5212\u5206\u4e3a\u540c\u4e00\u7c7b \u95ee\u9898\u662f\uff1a\u6211\u4eec\u5230\u5e95\u8981\u5206\u51e0\u4e2a cluster\uff1f","title":"Clustering"},{"location":"ML/Unsupervised%20Learning%20Linear%20Dimension%20Reduction/#k-means","text":"\u6700\u5e38\u7528\u7684\u65b9\u6cd5\u662f K-means \uff1a\u9700\u8981\u4e8b\u5148\u786e\u5b9a cluster \u7684\u4e2a\u6570 \u6211\u4eec\u6709\u4e00\u5927\u5806\u7684 unlabeled data \\(\\{x^1,...,x^n,...,x^N\\}\\) \uff0c\u6211\u4eec\u8981\u628a\u5b83\u5212\u5206\u4e3a K \u4e2a cluster \u5bf9\u6bcf\u4e2a cluster \u90fd\u8981\u627e\u4e00\u4e2a center \\(c^i,i\\in \\{1,2,...,K\\}\\) \u200b\uff08\u7ef4\u5ea6\u4e0e \\(x\\) \u76f8\u540c\uff09\uff0cinitial \u7684\u65f6\u5019\u53ef\u4ee5\u4ece training data \u91cc\u968f\u673a\u6311 K \u4e2aobject \\(x^n\\) \u51fa\u6765\u4f5c\u4e3a K \u4e2a center \\(c^i\\) \u200b \u7684\u521d\u59cb\u503c \u904d\u5386\u6240\u6709\u7684 object \\(x^n\\) \u200b\u200b\uff0c\u5e76\u5224\u65ad\u5b83\u5c5e\u4e8e\u54ea\u4e00\u4e2a cluster\uff0c\u5982\u679c \\(x^n\\) \u200b\u200b \u4e0e\u7b2c i \u4e2a cluster \u7684 center \\(c^i\\) \u200b \u200b\u6700\u63a5\u8fd1\uff0c\u90a3\u5b83\u5c31\u5c5e\u4e8e\u8be5 cluster\uff0c\u6211\u4eec\u7528 \\(b_i^n=1\\) \u200b\u200b \u6765\u8868\u793a\u7b2c n \u4e2a object \u5c5e\u4e8e\u7b2c i \u4e2a cluster\uff0c \\(b_i^n=0\\) \u200b\u200b \u8868\u793a\u4e0d\u5c5e\u4e8e \u66f4\u65b0\u6240\u6709 center\uff1a\u628a\u6bcf\u4e2a cluster \u91cc\u7684\u6240\u6709 object \u53d6\u5e73\u5747\u503c\u4f5c\u4e3a\u65b0\u7684 center \u503c\uff0c\u5373 \\(c^i=\\sum\\limits_{x^n}b_i^n x^n/\\sum\\limits_{x^n} b_i^n\\) \u200b\u200b \u53cd\u590d\u8fdb\u884c\u4ee5\u4e0a\u7684\u64cd\u4f5c \u6ce8\uff1a\u5982\u679c\u4e0d\u662f\u4ece\u539f\u5148\u7684 data set \u91cc\u53d6 center \u7684\u521d\u59cb\u503c\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u90e8\u5206 cluster \u6ca1\u6709\u6837\u672c\u70b9","title":"K-means"},{"location":"ML/Unsupervised%20Learning%20Linear%20Dimension%20Reduction/#hac","text":"HAC\uff08Hierarchical Agglomerative Clustering\uff09\uff0c\u5c42\u6b21\u805a\u7c7b \u5047\u8bbe\u73b0\u5728\u6709 5 \u4e2a\u6837\u672c\u70b9\uff1a build a tree\uff1a \u8fc7\u7a0b\u7c7b\u4f3c\u5efa Huffman Tree\uff0c\u8fd9\u91cc\u6bcf\u6b21\u9009\u53d6\u6700\u76f8\u4f3c\u7684 2 \u4e2a\u6837\u672c\u70b9 merge\uff08\u6bd4\u5982\u53d6 vector \u7684\u5e73\u5747\uff09\u5f62\u6210\u65b0\u7684\u6837\u672c\u70b9\uff0c\u76f4\u81f3\u5269\u4e00\u4e2a\u6837\u672c\u70b9 pick a threshold\uff1a \u9009\u53d6\u9608\u503c\uff0c\u5f62\u8c61\u6765\u8bf4\u5c31\u662f\u5728\u6784\u9020\u597d\u7684 tree \u4e0a\u6a2a\u7740\u5207\u4e00\u5200\uff0c\u76f8\u8fde\u7684\u53f6\u7ed3\u70b9\u5c5e\u4e8e\u540c\u4e00\u4e2a cluster \u4e0b\u56fe\u4e2d\uff0c\u4e0d\u540c\u989c\u8272\u7684\u6a2a\u7ebf\u548c\u53f6\u7ed3\u70b9\u4e0a\u4e0d\u540c\u989c\u8272\u7684\u65b9\u6846\u5bf9\u5e94\u7740\u5207\u6cd5\u4e0e cluster \u7684\u5206\u6cd5 HAC \u4e2d cluster \u7684\u6570\u91cf\u53d6\u51b3\u4e8e\u5207\u7684\u5730\u65b9\uff0c\u800c K-means \u662f\u8981\u4e8b\u5148\u786e\u5b9a\u7684","title":"HAC"},{"location":"ML/Unsupervised%20Learning%20Linear%20Dimension%20Reduction/#dimension-reduction","text":"","title":"Dimension Reduction"},{"location":"ML/Unsupervised%20Learning%20Linear%20Dimension%20Reduction/#introduction_1","text":"clustering \u7684\u7f3a\u70b9\u662f\u4ee5\u504f\u6982\u5168\uff0c\u6bcf\u4e2a object \u90fd\u8981\u5c5e\u4e8e\u4e00\u4e2a cluster\uff0c\u800c\u5b9e\u9645\u4e0a\u67d0\u4e2a object \u53ef\u80fd\u62e5\u6709\u591a\u79cd\u5c5e\u6027\uff0ccluster \u4f1a\u5931\u53bb\u5f88\u591a\u4fe1\u606f\uff1b\u7528 vector \u6765\u8868\u793a\u6bcf\u4e00\u79cd\u5c5e\u6027\u6765\u4ee3\u8868\u4e00\u4e2a object\uff0c\u8fd9\u79cd\u505a\u6cd5\u5c31\u53eb\u505a Distributed Representation\uff0c\u6216\u8005\u8bf4 Dimension Reduction\uff08\u9ad8\u7ef4 object \u7528 \u4f4e\u7ef4 vector \u6765\u8868\u793a\uff09","title":"Introduction"},{"location":"ML/Unsupervised%20Learning%20Linear%20Dimension%20Reduction/#why-dimension-reduction-help","text":"\u4ee5\u4e0b\u56fe\u4e3a\u4f8b\uff0c\u7528 3D \u7a7a\u95f4\u6765\u8868\u793a\u8fd9\u4e2a data \u662f\u5f88\u6d6a\u8d39\u7684\uff0c\u5b8c\u5168\u53ef\u4ee5\u628a\u5b83\u644a\u5e73\u4e86\u8868\u793a \u4ee5\u624b\u5199\u6570\u5b57 MNIST \u4e3a\u4f8b\uff0c\u5728 28*28 \u7684 dimension \u4e2d\u7684\u5927\u90e8\u5206\u56fe\u7247\u90fd\u4e0d\u662f\u6570\u5b57\uff0c\u6240\u4ee5\u5176\u5b9e\u7528\u6765\u8868\u793a\u6570\u5b57\u6240\u9700\u8981\u7684 dim \u8fdc\u6bd4 28*28 \u5c0f \u6211\u4eec\u53ea\u8981\u6293\u4f4f data \u7684\u5173\u952e\u7684\u70b9\u5c31\u53ef\u4ee5\u505a\u5230 \u53bb\u829c\u5b58\u83c1\uff0c\u5316\u7e41\u4e3a\u7b80","title":"Why Dimension Reduction Help?"},{"location":"ML/Unsupervised%20Learning%20Linear%20Dimension%20Reduction/#how-to-do-dimension-reduction","text":"\u5728 Dimension Reduction \u91cc\u5c31\u662f\u8981\u627e\u4e00\u4e2a function\uff0cinput \u662f\u9ad8\u7ef4\u7684 x\uff0coutput \u662f\u4f4e\u7ef4\u7684 z \u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f Feature Selection \uff0c\u5373\u4ece\u539f\u6709\u7684 dimension \u4e2d\u76f4\u63a5\u53bb\u6389\u4e00\u4e9b\u5bf9\u7ed3\u679c\u6ca1\u6709\u5f71\u54cd\u7684 dim\uff0c\u4f46\u8fd9\u4e2a\u65b9\u6cd5\u5e76\u4e0d\u666e\u9002\uff0c\u6bd4\u5982\u4e0a\u9762\u7684\u87ba\u65cb\u56fe \u53e6\u4e00\u4e2a\u5e38\u89c1\u7684\u65b9\u6cd5\u53eb\u505a PCA (Principe Component Analysis)\uff0c\u5373\u4e3b\u6210\u5206\u5206\u6790 PCA \u7684 input x \u548c output z \u4e4b\u95f4\u662f linear transform\uff0c\u5373 \\(z=Wx\\) \u200b\u200b\u200b\uff1bPCA \u8981\u505a\u7684\uff0c\u5c31\u662f\u6839\u636e\u4e00\u5927\u5806\u7684 x \u628a W \u7ed9\u627e\u51fa\u6765 ( \\(z\\) \u672a\u77e5)","title":"How to do Dimension Reduction\uff1f"},{"location":"ML/Unsupervised%20Learning%20Linear%20Dimension%20Reduction/#pca","text":"PCA\uff1a\u4e3b\u6210\u5206\u5206\u6790 PCA \u7684 input x \u548c output z \u4e4b\u95f4\u662f linear transform\uff0c\u5373 \\(z=Wx\\) \u200b\uff1bPCA \u8981\u505a\u7684\uff0c\u5c31\u662f\u6839\u636e\u4e00\u5927\u5806\u7684 x \u628a W \u7ed9\u627e\u51fa\u6765 ( \\(z\\) \u200b \u672a\u77e5) \u5047\u8bbe \\(W\\) \u200b\u200b \u662f \\(k*m\\) \u200b\u200b \u7684\uff0c \\(x\\) \u200b\u200b \u662f \\(m*n\\) \u200b\u200b \u7684\uff0c\u90a3 \\(k\\) \u200b\u200b \u8868\u793a\u964d\u7ef4\u540e\u7684\u8868\u793a\u4e00\u4e2a\u6837\u672c\u70b9\u7684\u7ef4\u6570\uff0c \\(m\\) \u200b\u200b \u8868\u793a\u964d\u7ef4\u524d\u8868\u793a\u4e00\u4e2a\u6837\u672c\u70b9\u7684\u7ef4\u6570\uff0c \\(n\\) \u200b\u200b \u8868\u793a\u6837\u672c\u91cf","title":"PCA"},{"location":"ML/Unsupervised%20Learning%20Linear%20Dimension%20Reduction/#reduce-to-1-d","text":"\u4e3a\u4e86\u7b80\u5316\u95ee\u9898\uff0c\u5148\u53ea\u770b\u628a x \u6295\u5f71\u5230\u4e00\u7ef4\u7684\u60c5\u51b5 \\(z_1=w^1\\cdot x\\) \u200b\u200b\u200b\u200b\u200b\uff0c\u5176\u4e2d \\(w^1\\) \u200b\u200b\u200b\u200b\u200b \u8868\u793a \\(w\\) \u200b\u200b\u200b\u200b\u200b \u7684\u7b2c\u4e00\u4e2a row vector\uff0c\u5148\u5047\u8bbe \\(w^1\\) \u200b\u200b\u200b\u200b\u200b \u7684\u957f\u5ea6\u4e3a 1\uff0c\u5373 \\(||w^1||_2=1\\) \u200b\u200b\u200b\u200b\u200b\uff0c\u6b64\u65f6 \\(z_1\\) \u200b\u200b\u200b\u200b\u200b \u5c31\u662f \\(x\\) \u200b\u200b\u200b \u200b\u200b\u5728 \\(w^1\\) \u200b\u200b\u200b\u200b \u200b\u200b\u65b9\u5411\u4e0a\u7684\u6295\u5f71\uff0c\u5176\u4e2d \\(w^i\\) \u200b \u548c \\(x\\) \u200b \u90fd\u662f\u5217\u5411\u91cf \u90a3\u6211\u4eec\u5230\u5e95\u8981\u627e\u4ec0\u4e48\u6837\u7684 \\(w^1\\) \u200b \u5462\uff1f \u4e0b\u9762\u7684\u56fe\u662f\u5b9d\u53ef\u68a6\u7684\u6837\u672c\u70b9\uff0c\u6a2a\u5750\u6807\u4ee3\u8868\u653b\u51fb\u529b\uff0c\u7eb5\u5750\u6807\u4ee3\u8868\u9632\u5fa1\u529b\uff0c\u6211\u4eec\u5e0c\u671b\u9009\u8fd9\u6837\u4e00\u4e2a \\(w^1\\) \uff0c\u5b83\u4f7f\u5f97 \\(x\\) \u7ecf\u8fc7\u6295\u5f71\u4e4b\u540e\u5f97\u5230\u7684 \\(z_1\\) \uff08variance\uff09\u5206\u5e03\u8d8a\u5927\u8d8a\u597d\uff0c\u6211\u4eec\u4e0d\u5e0c\u671b projection \u4f7f\u8fd9\u4e9b data point \u901a\u901a\u6324\u5728\u4e00\u8d77\uff0c\u5bfc\u81f4\u70b9\u4e0e\u70b9\u4e4b\u95f4\u7684\u5947\u5f02\u5ea6\u6d88\u5931\uff0c\u5c31\u662f\u8981 maximize \\(Var(z_1)=\\frac{1}{N}\\sum\\limits_{z_1}(z_1-\\bar{z_1})^2, ||w^1||_2=1\\) \uff0c \\(\\bar {z_1}\\) \u662f \\(z_1\\) \u7684\u5e73\u5747\u503c","title":"Reduce to 1-D"},{"location":"ML/Unsupervised%20Learning%20Linear%20Dimension%20Reduction/#reduce-to-n-d","text":"\u5f53\u7136\u6211\u4eec\u4e0d\u53ef\u80fd\u53ea\u6295\u5f71\u5230\u4e00\u7ef4\u7a7a\u95f4\uff0c\u66f4\u7ecf\u5e38\u7684\u662f\u6295\u5f71\u5230\u66f4\u9ad8\u7ef4\u7684\u7a7a\u95f4 \u5bf9 \\(z=Wx\\) \u6765\u8bf4\uff1a\u5176\u4e2d \\(w^i\\) \u548c \\(x\\) \u90fd\u662f\u5217\u5411\u91cf \\(z_1=w^1\\cdot x\\) \u200b\uff0c\u8868\u793a \\(x\\) \u200b \u5728 \\(w^1\\) \u200b\u200b \u65b9\u5411\u4e0a\u7684\u6295\u5f71\uff08\u7b2c\u4e00\u4e2a\u65b0\u7ef4\u5ea6\uff09 \\(z_2=w^2\\cdot x\\) \u200b\uff0c\u8868\u793a \\(x\\) \u200b \u5728 \\(w^2\\) \u200b \u65b9\u5411\u4e0a\u7684\u6295\u5f71\uff08\u7b2c\u4e8c\u4e2a\u65b0\u7ef4\u5ea6\uff09 ... \\[ \\begin{align} z&=[z_1,z_2,...] \\\\ W&= \\begin{bmatrix} (w^1)^T \\\\ (w^2)^T \\\\ ... \\end{bmatrix} \\end{align} \\] \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u7684 \\(w^i\\) \u200b\u200b\u200b\u200b \u5fc5\u987b\u76f8\u4e92\u6b63\u4ea4\uff0c\u6b64\u65f6 \\(W\\) \u200b\u200b\u200b\u200b \u662f\u6b63\u4ea4\u77e9\u9635 (orthogonal matrix)\uff0c\u5982\u679c\u4e0d\u52a0\u8fd9\u4e2a constraint\uff0c\u5219\u627e\u5230\u7684 \\(w^1,w^2,...\\) \u200b\u200b\u200b\u200b \u90fd\u662f \\(w^1\\) \uff0c\u800c\u4e14 \\(||w^i||_2=1\\)","title":"Reduce to n-D"},{"location":"ML/Unsupervised%20Learning%20Linear%20Dimension%20Reduction/#lagrange-multiplier","text":"\u6c42\u89e3 PCA\uff0c\u5b9e\u9645\u4e0a\u5df2\u7ecf\u6709\u73b0\u6210\u7684\u51fd\u6570\u53ef\u4ee5\u8c03\u7528\uff0c\u6b64\u5916\u4e5f\u53ef\u4ee5\u628a PCA \u63cf\u8ff0\u6210 neural network\uff0c\u7136\u540e\u7528 gradient descent \u7684\u65b9\u6cd5\u6765\u6c42\u89e3 \u4e0b\u9762\u662f PCA \u7684\u63a8\u5bfc\u8fc7\u7a0b\uff08warning of math\uff09","title":"Lagrange multiplier"},{"location":"ML/Unsupervised%20Learning%20Linear%20Dimension%20Reduction/#calculate-w1","text":"\u76ee\u6807\uff1amaximize \\(Var(z_1)\\) \uff0c\u6761\u4ef6\uff1a \\((w^1)^Tw^1=1\\) \u9996\u5148\u8ba1\u7b97\u51fa \\(\\bar{z_1}\\) \u200b\uff1a $$ \\begin{split} &z_1=w^1\\cdot x\\ &\\bar{z_1}=\\frac{1}{N}\\sum z_1=\\frac{1}{N}\\sum w^1\\cdot x=w^1\\cdot \\frac{1}{N}\\sum x=w^1\\cdot \\bar x \\end{split} $$ \u7136\u540e\u8ba1\u7b97 maximize \u7684\u5bf9\u8c61 \\(Var(z_1)\\) \u200b\uff1a $$ \\begin{split} Var(z_1)&=\\frac{1}{N}\\sum\\limits_{z_1} (z_1-\\bar{z_1})^2\\ &=\\frac{1}{N}\\sum\\limits_{x} (w^1\\cdot x-w^1\\cdot \\bar x)^2\\ &=\\frac{1}{N}\\sum (w^1\\cdot (x-\\bar x))^2 \\end{split} $$ \u56e0\u4e3a $$ (a\u00b7b)^2=(a^Tb)^2=a^Tba^Tb=a^Tb(a^Tb)^T=a^Tbb^Ta $$ \u6ce8\u610f\u8fd9\u91cc \\(a\u00b7b\\) \u662f\u5411\u91cf\u5185\u79ef\uff0c \\(a^Tb\\) \u662f\u77e9\u9635\u76f8\u4e58\uff0c \\(a^Tb\\) \u662f scale \u6240\u4ee5 $$ \\begin{split} Var(z_1)&=\\frac{1}{N}\\sum (w^1\\cdot (x-\\bar x))^2\\ &=\\frac{1}{N}\\sum(w^1)^T(x-\\bar x)(x-\\bar x)^T w^1\\ &=(w^1)^T\\frac{1}{N}\\ [\\sum(x-\\bar x)(x-\\bar x)^T]\\ w^1\\ &=(w^1)^T Cov(x)w^1 \\end{split} $$ \u8981 maximize \\(Var(z_1)=(w^1)^TCov(x)w^1\\) \u200b\u200b\uff0c\u9700\u8981\u52a0\u4e0a \\(||w^1||_2=(w^1)^Tw^1=1\\) \u200b\u200b \u7684\u7ea6\u675f\u6761\u4ef6\uff0c\u5426\u5219\u663e\u7136 \\(w^1\\) \u200b\u200b\u53ef\u4ee5\u53d6\u65e0\u7a77\u5927 \u4ee4 \\(S=Cov(x)\\) \u200b\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u6c42 maximize \\(Var(z_1)=(w^1)^TSw^1\\) \u200b\uff0c\u4e14 \\((w^1)^Tw^1=1\\) \u5bf9 \\(S=Cov(x)\\) \u200b\u200b\uff0c\u5b83\u662f\uff1a \u5bf9\u79f0\u7684 (symmetric) \u534a\u6b63\u5b9a\u7684 (positive-semidefine) \u6240\u6709\u7279\u5f81\u503c (eigenvalues) \u975e\u8d1f\u7684 (non-negative) \u4f7f\u7528\u62c9\u683c\u6717\u65e5\u4e58\u6570\u6cd5\uff08Lagrange multiplier\uff09\uff0c\u5229\u7528\u76ee\u6807\u548c\u7ea6\u675f\u6761\u4ef6\u6784\u9020\u51fd\u6570\uff1a $$ g(w^1)=(w^1)^TSw^1-\\alpha((w^1)^Tw^1-1) $$ \u7136\u540e\u5bf9 \\(w^1\\) \u8fd9\u4e2a vector \u91cc\u7684\u6bcf\u4e00\u4e2a element \u505a\u504f\u5fae\u5206\uff1a $$ \\partial g(w^1)/\\partial w_1^1=0\\ \\partial g(w^1)/\\partial w_2^1=0\\ \\partial g(w^1)/\\partial w_3^1=0\\ ... $$ \u6574\u7406\u4e0a\u8ff0\u63a8\u5bfc\u5f0f\uff0c\u53ef\u4ee5\u5f97\u5230\uff1a \\(Sw^1=\\alpha w^1\\) \u6ce8\u610f\u5230\u6ee1\u8db3 \\((w^1)^Tw^1=1\\) \u200b\u200b \u7684\u7279\u5f81\u5411\u91cf \\(w^1\\) \u200b\u200b \u6709\u5f88\u591a\uff0c\u6211\u4eec\u8981\u627e\u7684\u662f\u53ef\u4ee5 maximize \\((w^1)^TSw^1\\) \u200b\u200b \u7684\u90a3\u4e00\u4e2a\uff0c\u4e8e\u662f\u5229\u7528\u4e0a\u4e00\u4e2a\u5f0f\u5b50\uff1a $$ (w^1)^TSw^1=(w^1)^T \\alpha w^1=\\alpha (w^1)^T w^1=\\alpha $$ \u6b64\u65f6 maximize \\((w^1)^TSw^1\\) \u200b \u5c31\u53d8\u6210\u4e86 maximize \\(\\alpha\\) \u200b\uff0c\u4e5f\u5c31\u662f\u5f53 \\(S\\) \u200b \u7684\u7279\u5f81\u503c \\(\\alpha\\) \u200b \u6700\u5927\u65f6\u5bf9\u5e94\u7684\u90a3\u4e2a\u7279\u5f81\u5411\u91cf \\(w^1\\) \u200b \u5c31\u662f\u6211\u4eec\u8981\u627e\u7684\u76ee\u6807 \u7ed3\u8bba\uff1a \\(w^1\\) \u200b\u200b\u662f \\(S=Cov(x)\\) \u200b\u200b \u8fd9\u4e2a matrix \u4e2d\u7684\u7279\u5f81\u5411\u91cf\uff0c\u5bf9\u5e94\u6700\u5927\u7684\u7279\u5f81\u503c \\(\\lambda_1\\) \u200b\u200b","title":"calculate \\(w^1\\)\u200b"},{"location":"ML/Unsupervised%20Learning%20Linear%20Dimension%20Reduction/#calculate-w2","text":"\u5728\u63a8\u5bfc \\(w^2\\) \u200b \u200b\u65f6\uff0c\u76f8\u8f83\u4e8e \\(w^1\\) \u200b\u200b\uff0c\u591a\u4e86\u4e00\u4e2a\u9650\u5236\u6761\u4ef6\uff1a \\(w^2\\) \u200b\u200b \u5fc5\u987b\u4e0e \\(w^1\\) \u200b\u200b \u6b63\u4ea4 (orthogonal) \u76ee\u6807\uff1amaximize \\(Var(z_2)\\) \uff0c\u6761\u4ef6\uff1a \\((w^2)^Tw^2=1,(w^2)^Tw^1=0\\) \u7ed3\u8bba\uff1a \\(w^2\\) \u200b\u200b \u4e5f\u662f \\(S=Cov(x)\\) \u200b\u200b\u8fd9\u4e2amatrix\u4e2d\u7684\u7279\u5f81\u5411\u91cf\uff0c\u5bf9\u5e94\u7b2c\u4e8c\u5927\u7684\u7279\u5f81\u503c \\(\\lambda_2\\) \u200b\u200b \u540c\u6837\u662f\u7528\u62c9\u683c\u6717\u65e5\u4e58\u6570\u6cd5\u6c42\u89e3\uff0c\u5148\u5199\u4e00\u4e2a\u5173\u4e8e \\(w^2\\) \u200b \u7684 function\uff0c\u5305\u542b\u8981 maximize \u7684\u5bf9\u8c61\uff0c\u4ee5\u53ca\u4e24\u4e2a\u7ea6\u675f\u6761\u4ef6 $$ g(w^2)=(w^2)^TSw^2-\\alpha((w^2)^Tw^2-1)-\\beta((w^2)^Tw^1-0) $$ \u5bf9 \\(w^2\\) \u200b \u7684\u6bcf\u4e2a element \u505a\u504f\u5fae\u5206\uff1a $$ \\partial g(w^2)/\\partial w_1^2=0\\ \\partial g(w^2)/\\partial w_2^2=0\\ \\partial g(w^2)/\\partial w_3^2=0\\ ... $$ \u6574\u7406\u540e\u5f97\u5230\uff1a $$ Sw^2-\\alpha w^2-\\beta w^1=0 $$ \u4e0a\u5f0f\u4e24\u4fa7\u540c\u4e58 \\((w^1)^T\\) \u200b\uff0c\u5f97\u5230\uff1a $$ (w^1)^TSw^2-\\alpha (w^1)^Tw^2-\\beta (w^1)^Tw^1=0 $$ \u5176\u4e2d \\(\\alpha (w^1)^Tw^2=0,\\beta (w^1)^Tw^1=\\beta\\) \u200b\uff0c \u800c\u7531\u4e8e \\((w^1)^TSw^2\\) \u200b \u662f vector\u00d7matrix\u00d7vector=scalar\uff0c\u56e0\u6b64\u5728\u5916\u9762\u5957\u4e00\u4e2atranspose\u4e0d\u4f1a\u6539\u53d8\u5176\u503c\uff0c\u56e0\u6b64\u8be5\u90e8\u5206\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff1a \u6ce8\uff1aS\u662fsymmetric\u7684\uff0c\u56e0\u6b64 \\(S^T=S\\) $$ \\begin{split} (w^1)^TSw^2&=((w^1)^TSw^2)^T\\ &=(w^2)^TS^Tw^1\\ &=(w^2)^TSw^1 \\end{split} $$ \u6211\u4eec\u5df2\u7ecf\u77e5\u9053 \\(w^1\\) \u6ee1\u8db3 \\(Sw^1=\\lambda_1 w^1\\) \uff0c\u4ee3\u5165\u4e0a\u5f0f\uff1a $$ \\begin{split} (w^1)^TSw^2&=(w^2)^TSw^1\\ &=\\lambda_1(w^2)^Tw^1\\ &=0 \\end{split} $$ \u56e0\u6b64\u6709 \\((w^1)^TSw^2=0\\) \uff0c \\(\\alpha (w^1)^Tw^2=0\\) \uff0c \\(\\beta (w^1)^Tw^1=\\beta\\) \uff0c\u53c8\u6839\u636e $$ (w^1)^TSw^2-\\alpha (w^1)^Tw^2-\\beta (w^1)^Tw^1=0 $$ \u53ef\u4ee5\u63a8\u5f97 \\(\\beta=0\\) \u6b64\u65f6 \\(Sw^2-\\alpha w^2-\\beta w^1=0\\) \u5c31\u8f6c\u53d8\u6210\u4e86 \\(Sw^2-\\alpha w^2=0\\) \uff0c\u5373 $$ Sw^2=\\alpha w^2 $$ \u7531\u4e8e \\(S\\) \u662fsymmetric\u7684\uff0c\u56e0\u6b64\u5728\u4e0d\u4e0e \\(w_1\\) \u51b2\u7a81\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u91cc \\(\\alpha\\) \u9009\u53d6\u7b2c\u4e8c\u5927\u7684\u7279\u5f81\u503c \\(\\lambda_2\\) \u65f6\uff0c\u53ef\u4ee5\u4f7f \\((w^2)^TSw^2\\) \u6700\u5927 \u7ed3\u8bba\uff1a \\(w^2\\) \u4e5f\u662f \\(S=Cov(x)\\) \u8fd9\u4e2amatrix\u4e2d\u7684\u7279\u5f81\u5411\u91cf\uff0c\u5bf9\u5e94\u7b2c\u4e8c\u5927\u7684\u7279\u5f81\u503c \\(\\lambda_2\\)","title":"calculate \\(w^2\\)"},{"location":"ML/Unsupervised%20Learning%20Linear%20Dimension%20Reduction/#pca-decorrelation","text":"\\(z=W\\cdot x\\) \u795e\u5947\u4e4b\u5904\u5728\u4e8e \\(Cov(z)=D\\) \uff0c\u5373z\u7684covariance\u662f\u4e00\u4e2adiagonal matrix\uff0c\u63a8\u5bfc\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a PCA\u53ef\u4ee5\u8ba9\u4e0d\u540cdimension\u4e4b\u95f4\u7684covariance\u53d8\u4e3a0\uff0c\u5373\u4e0d\u540cnew feature\u4e4b\u95f4\u662f\u6ca1\u6709correlation\u7684\uff0c\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff0c \u51cf\u5c11feature\u4e4b\u95f4\u7684\u8054\u7cfb\u4ece\u800c\u51cf\u5c11model\u6240\u9700\u7684\u53c2\u6570\u91cf \u5982\u679c\u4f60\u628a\u539f\u6765\u7684input data\u901a\u8fc7PCA\u4e4b\u540e\u518d\u7ed9\u5176\u4ed6model\u4f7f\u7528\uff0c\u90a3\u8fd9\u4e9bmodel\u5c31\u53ef\u4ee5\u4f7f\u7528\u7b80\u5355\u7684\u5f62\u5f0f\uff0c\u800c\u65e0\u9700\u8003\u8651\u4e0d\u540cdimension\u4e4b\u95f4\u7c7b\u4f3c \\(x_1\\cdot x_2,x_3\\cdot x_5^3,...\\) \u8fd9\u4e9b\u4ea4\u53c9\u9879\uff0c\u6b64\u65f6model\u5f97\u5230\u7b80\u5316\uff0c\u53c2\u6570\u91cf\u5927\u5927\u964d\u4f4e\uff0c\u76f8\u540c\u7684data\u91cf\u53ef\u4ee5\u5f97\u5230\u66f4\u597d\u7684\u8bad\u7ec3\u7ed3\u679c\uff0c\u4ece\u800c\u53ef\u4ee5\u907f\u514doverfitting\u7684\u53d1\u751f","title":"PCA-decorrelation"},{"location":"ML/Unsupervised%20Learning%20Linear%20Dimension%20Reduction/#reconstruction-component","text":"\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u8003\u8651\u7684\u662f\u624b\u5199\u6570\u5b57\u8bc6\u522b\uff0c\u8fd9\u4e9b\u6570\u5b57\u662f\u7531\u4e00\u4e9b\u7c7b\u4f3c\u4e8e\u7b14\u753b\u7684basic component\u7ec4\u6210\u7684\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2avector\uff0c\u8bb0\u505a \\(u_1,u_2,u_3,...\\) \uff0c\u4ee5MNIST\u4e3a\u4f8b\uff0c\u4e0d\u540c\u7684\u7b14\u753b\u90fd\u662f\u4e00\u4e2a28\u00d728\u7684vector\uff0c\u628a\u67d0\u51e0\u4e2avector\u52a0\u8d77\u6765\uff0c\u5c31\u7ec4\u6210\u4e86\u4e00\u4e2a28\u00d728\u7684digit \u5199\u6210\u8868\u8fbe\u5f0f\u5c31\u662f\uff1a \\(x\u2248c_1u^1+c_2u^2+...+c_ku^k+\\bar x\\) \u5176\u4e2d \\(x\\) \u4ee3\u8868\u67d0\u5f20digit image\u4e2d\u7684pixel\uff0c\u5b83\u7b49\u4e8ek\u4e2acomponent\u7684\u52a0\u6743\u548c \\(\\sum c_iu^i\\) \u52a0\u4e0a\u6240\u6709image\u7684\u5e73\u5747\u503c \\(\\bar x\\) \u6bd4\u59827\u5c31\u662f \\(x=u^1+u^3+u^5\\) \uff0c\u6211\u4eec\u53ef\u4ee5\u7528 \\(\\left [\\begin{matrix}c_1\\ c_2\\ c_3...c_k \\end{matrix} \\right]^T\\) \u6765\u8868\u793a\u4e00\u5f20digit image\uff0c\u5982\u679ccomponent\u7684\u6570\u76eek\u8fdc\u6bd4pixel\u7684\u6570\u76ee\u8981\u5c0f\uff0c\u90a3\u8fd9\u4e2a\u63cf\u8ff0\u5c31\u662f\u6bd4\u8f83\u6709\u6548\u7684 \u5b9e\u9645\u4e0a\u76ee\u524d\u6211\u4eec\u5e76\u4e0d\u77e5\u9053 \\(u^1\\) ~ \\(u^k\\) \u5177\u4f53\u7684\u503c\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u627e\u8fd9\u6837k\u4e2avector\uff0c\u4f7f\u5f97 \\(x-\\bar x\\) \u4e0e \\(\\hat x\\) \u8d8a\u63a5\u8fd1\u8d8a\u597d\uff1a $$ x-\\bar x\u2248c_1u^1+c_2u^2+...+c_ku^k=\\hat x $$ \u800c\u7528\u672a\u77e5component\u6765\u63cf\u8ff0\u7684\u8fd9\u90e8\u5206\u5185\u5bb9\uff0c\u53eb\u505aReconstruction error\uff0c\u5373 \\(||(x-\\bar x)-\\hat x||\\) \u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u8981\u53bb\u627ek\u4e2avector \\(u^i\\) \u53bbminimize\u8fd9\u4e2aerror\uff1a $$ L=\\min\\limits_{u^1,...,u^k}\\sum||(x-\\bar x)-(\\sum\\limits_{i=1}^k c_i u^i) ||_2 $$ \u56de\u987ePCA\uff0c \\(z=W\\cdot x\\) \uff0c\u5b9e\u9645\u4e0a\u6211\u4eec\u901a\u8fc7PCA\u6700\u7ec8\u89e3\u5f97\u7684 \\(\\{w^1,w^2,...,w^k\\}\\) \u5c31\u662f\u4f7freconstruction error\u6700\u5c0f\u5316\u7684 \\(\\{u^1,u^2,...,u^k\\}\\) \uff0c\u7b80\u5355\u8bc1\u660e\u5982\u4e0b\uff1a \u6211\u4eec\u5c06\u6240\u6709\u7684 \\(x^i-\\bar x\u2248c_1^i u^1+c_2^i u^2+...\\) \u90fd\u7528\u4e0b\u56fe\u4e2d\u7684\u77e9\u9635\u76f8\u4e58\u6765\u8868\u793a\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u4f7f\u7b49\u53f7\u4e24\u4fa7\u77e9\u9635\u4e4b\u95f4\u7684\u5dee\u8ddd\u8d8a\u5c0f\u8d8a\u597d \u53ef\u4ee5\u4f7f\u7528SVD\u5c06\u6bcf\u4e2amatrix \\(X_{m\u00d7n}\\) \u90fd\u62c6\u6210matrix \\(U_{m\u00d7k}\\) \u3001 \\(\\Sigma_{k\u00d7k}\\) \u3001 \\(V_{k\u00d7n}\\) \u7684\u4e58\u79ef\uff0c\u5176\u4e2dk\u4e3acomponent\u7684\u6570\u76ee \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4f7f\u7528SVD\u62c6\u89e3\u540e\u7684\u4e09\u4e2a\u77e9\u9635\u76f8\u4e58\uff0c\u662f\u8ddf\u7b49\u53f7\u5de6\u8fb9\u7684\u77e9\u9635 \\(X\\) \u6700\u63a5\u8fd1\u7684\uff0c\u6b64\u65f6 \\(U\\) \u5c31\u5bf9\u5e94\u7740 \\(u^i\\) \u90a3\u90e8\u5206\u7684\u77e9\u9635\uff0c \\(\\Sigma\\cdot V\\) \u5c31\u5bf9\u5e94\u7740 \\(c_k^i\\) \u90a3\u90e8\u5206\u7684\u77e9\u9635 \u6839\u636eSVD\u7684\u7ed3\u8bba\uff0c\u7ec4\u6210\u77e9\u9635 \\(U\\) \u7684k\u4e2a\u5217\u5411\u91cf(\u6807\u51c6\u6b63\u4ea4\u5411\u91cf, orthonormal vector)\u5c31\u662f \\(XX^T\\) \u6700\u5927\u7684k\u4e2a\u7279\u5f81\u503c(eignvalue)\u6240\u5bf9\u5e94\u7684\u7279\u5f81\u5411\u91cf(eigenvector)\uff0c\u800c \\(XX^T\\) \u5b9e\u9645\u4e0a\u5c31\u662f \\(x\\) \u7684covariance matrix\uff0c\u56e0\u6b64 \\(U\\) \u5c31\u662fPCA\u7684k\u4e2a\u89e3 \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u901a\u8fc7PCA\u627e\u51fa\u6765\u7684Dimension Reduction\u7684transform\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u628a \\(X\\) \u62c6\u89e3\u6210\u80fd\u591f\u6700\u5c0f\u5316Reconstruction error\u7684component\u7684\u8fc7\u7a0b\uff0c\u901a\u8fc7PCA\u6240\u5f97\u5230\u7684 \\(w^i\\) \u5c31\u662fcomponent \\(u^i\\) \uff0c\u800cDimension Reduction\u7684\u7ed3\u679c\u5c31\u662f\u53c2\u6570 \\(c_i\\) \u7b80\u5355\u6765\u8bf4\u5c31\u662f\uff0c\u7528PCA\u5bf9 \\(x\\) \u8fdb\u884c\u964d\u7ef4\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u8981\u627e\u7684\u6295\u5f71\u65b9\u5f0f \\(w^i\\) \u5c31\u76f8\u5f53\u4e8e\u6070\u5f53\u7684\u7ec4\u4ef6 \\(u^i\\) \uff0c\u6295\u5f71\u7ed3\u679c \\(z^i\\) \u5c31\u76f8\u5f53\u4e8e\u8fd9\u4e9b\u7ec4\u4ef6\u5404\u81ea\u6240\u5360\u7684\u6bd4\u4f8b \\(c_i\\) \u4e0b\u9762\u7684\u5f0f\u5b50\u7b80\u5355\u6f14\u793a\u4e86\u5c06\u4e00\u4e2a\u6837\u672c\u70b9 \\(x\\) \u5212\u5206\u4e3ak\u4e2a\u7ec4\u4ef6\u7684\u8fc7\u7a0b\uff0c\u5176\u4e2d \\(\\left [\\begin{matrix}c_1 \\ c_2\\ ... c_k \\end{matrix} \\right ]^T\\) \u662f\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u6bd4\u4f8b\uff1b\u628a \\(x\\) \u5212\u5206\u4e3ak\u4e2a\u7ec4\u4ef6\u5373\u4ecen\u7ef4\u6295\u5f71\u5230k\u7ef4\u7a7a\u95f4\uff0c \\(\\left [\\begin{matrix}c_1 \\ c_2\\ ... c_k \\end{matrix} \\right ]^T\\) \u4e5f\u662f\u6295\u5f71\u7ed3\u679c \u6ce8\uff1a \\(x\\) \u548c \\(u_i\\) \u5747\u4e3an\u7ef4\u5217\u5411\u91cf $$ \\begin{split} &x= \\left [ \\begin{matrix} u_1\\ u_2\\ ...\\ u_k \\end{matrix} \\right ]\\cdot \\left [ \\begin{matrix} c_1\\ c_2\\ ...\\ c_k \\end{matrix} \\right ]\\ \\ &\\left [ \\begin{matrix} x_1\\ x_2\\ ...\\ x_n \\end{matrix} \\right ]=\\left [ \\begin{matrix} u_1^1\\ u_2^1\\ ... u_k^1 \\ u_1^2\\ u_2^2\\ ... u_k^2 \\ ...\\ u_1^n\\ u_2^n\\ ... u_k^n \\end{matrix} \\right ]\\cdot \\left [ \\begin{matrix} c_1\\ c_2\\ ...\\ c_k \\end{matrix} \\right ]\\ \\end{split} $$","title":"Reconstruction Component"},{"location":"ML/Unsupervised%20Learning%20Linear%20Dimension%20Reduction/#nn-for-pca","text":"","title":"NN for PCA"},{"location":"ML/Unsupervised%20Learning%20Neighbor%20Embedding/","text":"Unsupervised Learning Neighbor Embedding \u00b6 PCA \u548c Word Embedding \u90fd\u662f\u7ebf\u6027\u7684\uff0c\u672c\u7ae0\u4e3b\u8981\u8bb2\u975e\u7ebf\u6027\u7684\u964d\u7ef4\u65b9\u6cd5 \u975e\u7ebf\u6027\u964d\u7ef4\u7684\u4e00\u4e9b\u7b97\u6cd5\uff1aLLE\u3001t-SNE Manifold Learning \u00b6 \u6837\u672c\u70b9\u7684\u5206\u5e03\u53ef\u80fd\u662f\u5728\u9ad8\u7ef4\u7a7a\u95f4\u91cc\u7684\u4e00\u4e2a\u6d41\u884c (Manifold)\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6837\u672c\u70b9\u5176\u5b9e\u662f\u4f4e\u7ef4\u7a7a\u95f4\u7684\u56fe\u50cf\u88ab\u626d\u66f2\u7684\u585e\u5728\u4e86\u9ad8\u7ef4\u7a7a\u95f4\u91cc \u663e\u7136\u9ad8\u7ef4\u7a7a\u95f4\u4e2d\u53ea\u6709\u5f53 2 \u4e2a\u70b9\u5728\u5f88\u8fd1\u7684\u8ddd\u79bb\u65f6\u7528\u6b27\u6c0f\u8ddd\u79bb\u6765\u8868\u793a\u76f8\u4f3c\u7a0b\u5ea6\u624d\u662f\u53ef\u9760\u7684 Manifold Learning \u505a\u7684\u5c31\u662f\u628a\u9ad8\u7ef4\u56fe\u50cf\u5411\u4f4e\u7ef4\u644a\u5e73\u7136\u540e\u7528\u6b27\u5f0f\u8ddd\u79bb\u6765\u8868\u793a\u6837\u672c\u95f4\u7684\u76f8\u4f3c\u7a0b\u5ea6 Locally Linear Embedding \u00b6 \u5c40\u90e8\u7ebf\u6027\u5d4c\u5165\uff0clocally linear embedding\uff0c\u7b80\u79f0 LLE \u5982\u4e0b\u56fe\u6240\u793a\uff0c\u7528 \\(w_{ij}\\) \u200b\u200b\u200b \u6765\u63cf\u8ff0 \\(x_i\\) \u200b\u200b \u200b\u548c \\(x_j\\) \u200b\u200b \u200b\u200b\u7684\u5173\u7cfb \u5047\u8bbe\u6bcf\u4e00\u4e2a\u6837\u672c\u70b9\u90fd\u53ef\u4ee5\u7528\u5468\u56f4 K \u4e2a\u70b9\u7684\u7ebf\u6027\u7ec4\u5408\uff08linear combination\uff09\u6765\u8868\u793a\uff0c\u90a3\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\u627e\u80fd\u591f\u4f7f\u5f97\u6240\u6709\u6837\u672c\u70b9\u4e0e\u5468\u56f4\u70b9\u7ebf\u6027\u7ec4\u5408\u7684\u5dee\u8ddd\u6700\u5c0f\u7684\u53c2\u6570 \\(w_{ij}\\) \u200b $$ min\\sum\\limits_i||x^i-\\sum\\limits_j w_{ij}x^j ||_2 $$ \u63a5\u4e0b\u6765\u5c31\u8981\u505a Dimension Reduction\uff0c\u628a \\(w_{ij}\\) fix \u4f4f\uff0c\u7136\u540e\u53bb\u627e \\(z_i,z_j\\) \\(min\\sum\\limits_i||z^i-\\sum\\limits_j w_{ij}z^j ||_2\\) \u200b\uff0c\u8fd9\u65f6 \\(w_{ij}\\) \u662f\u5df2\u77e5\u7684\uff0c\u800c\u4e14 \\(z\\) \u7684\u7ef4\u5ea6\u6bd4 \\(x\\) \u5c0f\u5f97\u591a\uff0c\u4f46 \\(x_i,z_i\\) \u53ef\u4ee5\u7528\u76f8\u540c\u7684 linear combination \u6765\u8868\u793a\uff0c\u5373\u4e0e\u5176\u4ed6\u70b9\u7684\u5173\u7cfb\u662f\u4e0d\u53d8\u7684 LLE\u7684\u5177\u4f53\u505a\u6cd5\u5982\u4e0b\uff1a \u5728\u539f\u5148\u7684\u9ad8\u7ef4\u7a7a\u95f4\u4e2d\u627e\u5230 \\(x^i\\) \u548c \\(x^j\\) \u4e4b\u95f4\u7684\u5173\u7cfb \\(w_{ij}\\) \u4ee5\u540e\u5c31\u628a\u5b83\u56fa\u5b9a\u4f4f \u4f7f \\(x^i\\) \u548c \\(x^j\\) \u964d\u7ef4\u5230\u65b0\u7684\u4f4e\u7ef4\u7a7a\u95f4\u4e0a\u7684 \\(z^i\\) \u548c \\(z^j\\) \uff0c\u4e14\u6ee1\u8db3 $$ min\\sum\\limits_i||z^i-\\sum\\limits_j w_{ij}z^j ||_2 $$ \u5373\u8981\u6c42\u964d\u7ef4\u540e\u7684 \\(w_{ij}\\) \u540c\u6837\u80fd\u591f\u6ee1\u8db3\u539f\u6765\u7684\u8981\u6c42 \u5b9e\u9645\u4e0a\uff0cLLE\u5e76\u6ca1\u6709\u7ed9\u51fa\u660e\u786e\u7684\u964d\u7ef4\u51fd\u6570\uff0c\u53ea\u662f\u7ed9\u51fa\u4e86\u964d\u7ef4\u524d\u540e\u7684\u7ea6\u675f\u6761\u4ef6 \u6211\u4eec\u9700\u8981\u6311\u9009\u5408\u9002\u7684 K\uff0c\u4e0b\u56fe\u7ed9\u51fa\u4e86\u539f\u59cbpaper\u4e2d\u7684\u5b9e\u9a8c\u7ed3\u679c\uff0cK \u592a\u5c0f\u6216\u592a\u5927\u5f97\u5230\u7684\u7ed3\u679c\u90fd\u4e0d\u592a\u597d K \u5982\u679c\u5f88\u5927\u5c31\u4f1a\u9009\u4e2d\u4e00\u4e9b\u56e0\u4e3a\u7a7a\u95f4\u626d\u66f2\u624d\u5f88\u63a5\u8fd1\u7684\u70b9 Laplacian Eigenmaps \u00b6 \u62c9\u666e\u62c9\u65af\u7279\u5f81\u6620\u5c04\uff0cLaplacian Eigenmaps Review of Smoothness Assumption \u00b6 \u5728 semi-supervised learning \u63d0\u5230\u7684 smoothness assumption \u4e2d\u4ec5\u77e5\u9053\u4e24\u70b9\u4e4b\u95f4\u7684\u6b27\u6c0f\u8ddd\u79bb\u662f\u4e0d\u591f\u7684\uff0c\u8fd8\u9700\u8981\u89c2\u5bdf\u4e24\u4e2a\u70b9\u5728 high density \u533a\u57df\u4e0b\u7684\u8ddd\u79bb\uff0c\u5982\u679c\u4e24\u4e2a\u70b9\u5728high density\u7684\u533a\u57df\u91cc\u6bd4\u8f83\u8fd1\uff0c\u90a3\u624d\u7b97\u662f\u771f\u6b63\u7684\u63a5\u8fd1 \\[ L=\\sum\\limits_{x^r} C(y^r,\\hat y^r) + \\lambda S\\\\ S=\\frac{1}{2}\\sum\\limits_{i,j} w_{i,j}(y^i-y^j)^2=y^TLy \\] \u5176\u4e2d \\(C(y^r,\\hat y^r)\\) \u8868\u793alabeled data\u9879\uff0c \\(\\lambda S\\) \u8868\u793aunlabeled data\u9879\uff0c\u5982\u679c\u70b9 \\(x^i\\) \u4e0e \\(x^j\\) \u662f\u76f8\u8fde\u7684\uff0c\u5219 \\(w_{i,j}\\) \u7b49\u4e8e\u76f8\u4f3c\u5ea6\uff0c\u5426\u5219\u4e3a 0 Application in Unsupervised Task \u00b6 \u964d\u7ef4\u8981\u505a\u5230\u7684\u662f\u5982\u679c\u5728\u9ad8\u7ef4\u4e2d \\(x_i\\) \u548c \\(x_j\\) \u8ddd\u79bb\u5f88\u8fd1\uff0c\u90a3\u4e48\u5728\u4f4e\u7ef4\u7a7a\u95f4\u4e2d\u4e5f\u8981\u5f88\u8fd1\uff0c\u5373\u76f8\u4f3c\u5ea6 \\(x_{ij}\\) \u5f88\u5927\uff0c\u603b\u7684\u6765\u8bf4\u5c31\u662f\u8981 minimize \u4e0b\u5f0f\uff1a $$ minimize:S=\\frac{1}{2}\\sum\\limits_{i,j} w_{i,j}||z^i-z^j||_2 $$ \u4e0e semi \u4e0d\u540c\u7684\u662f\u8fd9\u91cc\u6ca1\u6709 label \u7684\u9879\uff0c\u6240\u4ee5\u4e0d\u52a0\u7ea6\u675f\u7684\u8bdd\u6240\u6709\u7684 \\(z\\) \u90fd\u662f 0 \u5c31\u80fd\u5230\u8fbe\u6700\u5c0f\uff1b\u5728 semi-supervised\u4e2d\uff0c\u5982\u679c\u6240\u6709 label \\(z^i\\) \u90fd\u8bbe\u6210\u4e00\u6837\uff0c\u4f1a\u4f7f\u5f97 supervised \u90e8\u5206\u7684 \\(\\sum\\limits_{x^r} C(y^r,\\hat y^r)\\) \u53d8\u5f97\u5f88\u5927 \u5728 unsupervised \u4e2d\uff0c\u9700\u8981\u52a0\u4e00\u4e9b\u7ea6\u675f\uff1a \u5047\u8bbe\u964d\u7ef4\u540e \\(z\\) \u6240\u5904\u7684\u7a7a\u95f4\u4e3a \\(M\\) \u7ef4\uff0c\u5219 \\(\\{z^1,z^2,...,z^N\\}=R^M\\) \uff0c\u6211\u4eec\u5e0c\u671b\u964d\u7ef4\u540e\u7684 \\(z\\) \u5360\u636e\u6574\u4e2a \\(M\\) \u7ef4\u7684\u7a7a\u95f4\uff0c\u800c\u4e0d\u5e0c\u671b\u5b83\u5728\u4e00\u4e2a\u6bd4 \\(M\\) \u66f4\u4f4e\u7ef4\u7684\u7a7a\u95f4\u91cc \u6700\u7ec8\u89e3\u51fa\u6765\u7684 \\(z\\) \u5176\u5b9e\u5c31\u662f Graph Laplacian \\(L\\) \u6bd4\u8f83\u5c0f\u7684\u7279\u5f81\u503c\u6240\u5bf9\u5e94\u7684\u7279\u5f81\u5411\u91cf \u8fd9\u4e5f\u662f Laplacian Eigenmaps \u540d\u79f0\u7684\u7531\u6765\uff0c\u6211\u4eec\u627e\u7684 \\(z\\) \u5c31\u662f Laplacian matrix \u7684\u7279\u5f81\u5411\u91cf \u5982\u679c\u901a\u8fc7\u62c9\u666e\u62c9\u65af\u7279\u5f81\u6620\u5c04\u627e\u5230 \\(z\\) \u4e4b\u540e\u518d\u5bf9\u5176\u5229\u7528 K-means \u505a\u805a\u7c7b\uff0c\u5c31\u53eb\u505a\u8c31\u805a\u7c7b (spectral clustering) \u76f8\u5173 paper\uff1a Belkin, M., Niyogi, P. Laplacian eigenmaps and spectral techniques for embedding and clustering. Advances in neural information processing systems . 2002 t-SNE \u00b6 t-SNE\uff0c\u5168\u79f0\u4e3a T-distributed Stochastic Neighbor Embedding\uff0ct \u5206\u5e03\u968f\u673a\u90bb\u5c45\u5d4c\u5165 \u524d\u9762\u7684\u65b9\u6cd5\u53ea\u8981\u6c42\u76f8\u90bb\u7684\u70b9\u8981\u63a5\u8fd1\uff0c\u4f46\u6ca1\u6709\u5047\u8bbe\u4e0d\u76f8\u90bb\u7684\u70b9\u8981\u5206\u5f00 COIL-20 \u6570\u636e\u96c6\u5305\u542b\u4e86\u540c\u4e00\u5f20\u56fe\u7247\u8fdb\u884c\u65cb\u8f6c\u4e4b\u540e\u7684\u4e0d\u540c\u5f62\u6001\uff0c\u5bf9\u5176\u4f7f\u7528 LLE \u964d\u7ef4\u540e\u5f97\u5230\u7684\u7ed3\u679c\u662f\uff0c\u540c\u4e00\u4e2a\u5706\u5708\u4ee3\u8868\u540c\u5f20\u56fe\u50cf\u65cb\u8f6c\u7684\u4e0d\u540c\u59ff\u6001\uff0c\u4f46\u8bb8\u591a\u5706\u5708\u4e4b\u95f4\u5b58\u5728\u91cd\u53e0 \u5982\u4e0b\u56fe\uff1a How t-SNE works \u00b6 \u505a t-SNE \u540c\u6837\u8981\u964d\u7ef4\uff0c\u5728\u539f\u6765 \\(x\\) \u7684\u5206\u5e03\u7a7a\u95f4\u4e0a\u8ba1\u7b97\u6240\u6709 \\(x^i\\) \u4e0e \\(x^j\\) \u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6 \\(S(x^i,x^j)\\) \u7136\u540e\u9700\u8981\u5c06\u5176\u505a\u5f52\u4e00\u5316\uff1a \\(P(x^j|x^i)=\\frac{S(x^i,x^j)}{\\sum_{k\\ne i}S(x^i,x^k)}\\) \uff0c\u5373 \\(x^j\\) \u4e0e \\(x^i\\) \u7684\u76f8\u4f3c\u5ea6\u5360\u6240\u6709\u4e0e \\(x^i\\) \u76f8\u5173\u7684\u76f8\u4f3c\u5ea6\u7684\u6bd4\u4f8b \u5c06 \\(x\\) \u200b \u964d\u7ef4\u5230 \\(z\\) \u200b\uff0c\u540c\u6837\u53ef\u4ee5\u8ba1\u7b97\u76f8\u4f3c\u5ea6 \\(S'(z^i,z^j)\\) \u200b\uff0c\u5e76\u505a\u5f52\u4e00\u5316\uff1a \\(Q(z^j|z^i)=\\frac{S'(z^i,z^j)}{\\sum_{k\\ne i}S'(z^i,z^k)}\\) \u200b \u5f52\u4e00\u5316\u7684\u76ee\u7684\u662f\u5c06\u5176\u6620\u5c04\u5230\u4e00\u4e2a\u7edf\u4e00\u7684\u6982\u7387\u533a\u95f4 \u6211\u4eec\u5e0c\u671b\u627e\u5230\u7684\u6295\u5f71\u7a7a\u95f4 \\(z\\) \u200b\uff0c\u53ef\u4ee5\u8ba9 \\(P(x^j|x^i)\\) \u200b \u548c \\(Q(z^j|z^i)\\) \u200b \u7684\u5206\u5e03\u8d8a\u63a5\u8fd1\u8d8a\u597d \u7528\u4e8e\u8861\u91cf\u4e24\u4e2a\u5206\u5e03\u4e4b\u95f4\u76f8\u4f3c\u5ea6\u7684\u65b9\u6cd5\u5c31\u662f KL\u6563\u5ea6 (KL divergence) \uff0c\u6211\u4eec\u7684\u76ee\u6807\u5c31\u662f\u8ba9 \\(L\\) \u200b \u8d8a\u5c0f\u8d8a\u597d\uff1a $$ L=\\sum\\limits_i KL(P( |x^i)||Q( |z^i))\\ =\\sum\\limits_i \\sum\\limits_jP(x^j|x^i)log \\frac{P(x^j|x^i)}{Q(z^j|z^i)} $$ KL Divergence \u00b6 \u4fe1\u606f\u71b5\uff1a $$ H=-\\sum\\limits_{i=1}^N p(x_i)\\cdot log\\ p(x_i) $$ \u5176\u4e2d \\(p(x_i)\\) \u8868\u793a\u4e8b\u4ef6 \\(x_i\\) \u53d1\u751f\u7684\u6982\u7387\uff0c\u53cd\u6620\u7684\u5c31\u662f\u8981\u8868\u793a\u4e00\u4e2a\u6982\u7387\u5206\u5e03\u6240\u9700\u8981\u7684\u5e73\u5747\u4fe1\u606f\u91cf \u5728\u4fe1\u606f\u71b5\u7684\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u5b9a\u4e49 KL\u6563\u5ea6 \u4e3a\uff1a $$ D_{KL}(p||q)=\\sum\\limits_{i=1}^N p(x_i)\\cdot (log\\ p(x_i)-log\\ q(x_i))\\ =\\sum\\limits_{i=1}^N p(x_i)\\cdot log\\frac{p(x_i)}{q(x_i)} $$ \\(D_{KL}(p||q)\\) \u200b \u8868\u793a\u7684\u5c31\u662f\u6982\u7387 \\(q\\) \u200b \u4e0e\u6982\u7387 \\(p\\) \u200b \u4e4b\u95f4\u7684\u5dee\u5f02\uff0c\u5f88\u663e\u7136\uff0cKL\u6563\u5ea6\u8d8a\u5c0f\uff0c\u8bf4\u660e\u6982\u7387 \\(q\\) \u200b\u4e0e\u6982\u7387 \\(p\\) \u200b\u4e4b\u95f4\u8d8a\u63a5\u8fd1\uff0c\u90a3\u4e48\u9884\u6d4b\u7684\u6982\u7387\u5206\u5e03\u4e0e\u771f\u5b9e\u7684\u6982\u7387\u5206\u5e03\u4e5f\u5c31\u8d8a\u63a5\u8fd1 How to use \u00b6 \u56e0\u4e3a\u8981\u8ba1\u7b97\u6240\u6709\u6837\u672c\u70b9\u95f4\u7684\u8ddd\u79bb\uff0c\u8fd0\u7b97\u91cf\u5f88\u5927 \u5e38\u89c1\u7684\u4f5c\u6cd5\u662f\u5148\u7528 PCA \u4e4b\u7c7b\u7684\u505a\u6cd5\u964d\u7ef4\uff0c\u7136\u540e\u7528t-SNE\u5bf9\u8fd9\u4e2a\u7b80\u5355\u964d\u7ef4\u7a7a\u95f4\u518d\u505a\u4e00\u6b21\u66f4\u6df1\u5c42\u6b21\u7684\u964d\u7ef4\uff0c\u4ee5\u671f\u51cf\u5c11\u8fd0\u7b97\u91cf \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0ct-SNE\u7684\u5f0f\u5b50\u65e0\u6cd5\u5bf9\u65b0\u7684\u6837\u672c\u70b9\u8fdb\u884c\u5904\u7406\uff0c\u4e00\u65e6\u51fa\u73b0\u65b0\u7684 \\(x^i\\) \uff0c\u5c31\u9700\u8981\u91cd\u65b0\u8dd1\u4e00\u904d\u8be5\u7b97\u6cd5\uff0c\u6240\u4ee5 t-SNE\u901a\u5e38\u4e0d\u662f\u7528\u6765\u8bad\u7ec3\u6a21\u578b\u7684\uff0c\u5b83\u66f4\u9002\u5408\u7528\u4e8e\u505a\u57fa\u4e8e\u56fa\u5b9a\u6570\u636e\u7684\u53ef\u89c6\u5316 t-SNE\u5e38\u7528\u4e8e\u5c06\u56fa\u5b9a\u7684\u9ad8\u7ef4\u6570\u636e\u53ef\u89c6\u5316\u5230\u4e8c\u7ef4\u5e73\u9762\u4e0a Similarity Measure \u00b6 \u5982\u679c\u6839\u636e\u6b27\u6c0f\u8ddd\u79bb\u8ba1\u7b97\u964d\u7ef4\u524d\u7684\u76f8\u4f3c\u5ea6\uff0c\u5f80\u5f80\u91c7\u7528 RBF function \\(S(x^i,x^j)=e^{-||x^i-x^j||_2}\\) \uff0c\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u7684\u597d\u5904\u662f\uff0c\u53ea\u8981\u4e24\u4e2a\u6837\u672c\u70b9\u7684\u6b27\u6c0f\u8ddd\u79bb\u7a0d\u5fae\u5927\u4e00\u4e9b\uff0c\u76f8\u4f3c\u5ea6\u5c31\u4f1a\u4e0b\u964d\u5f97\u5f88\u5feb \u8fd8\u6709\u4e00\u79cd\u53eb\u505aSNE\u7684\u65b9\u6cd5\uff0c\u5b83\u5728\u964d\u7ef4\u540e\u7684\u65b0\u7a7a\u95f4\u91c7\u7528\u4e0e\u4e0a\u8ff0\u76f8\u540c\u7684\u76f8\u4f3c\u5ea6\u7b97\u6cd5 \\(S'(z^i,z^j)=e^{-||z^i-z^j||_2}\\) \u5bf9t-SNE\u6765\u8bf4\uff0c\u5b83\u5728\u964d\u7ef4\u540e\u7684\u65b0\u7a7a\u95f4\u6240\u91c7\u53d6\u7684\u76f8\u4f3c\u5ea6\u7b97\u6cd5\u662f\u4e0e\u4e4b\u524d\u4e0d\u540c\u7684\uff0c\u5b83\u9009\u53d6\u4e86 t-distribution \u4e2d\u7684\u4e00\u79cd\uff0c\u5373 \\(S'(z^i,z^j)=\\frac{1}{1+||z^i-z^j||_2}\\) \u4ee5\u4e0b\u56fe\u4e3a\u4f8b\uff0c\u5047\u8bbe\u6a2a\u8f74\u4ee3\u8868\u4e86\u5728\u539f\u5148 \\(x\\) \u7a7a\u95f4\u4e0a\u7684\u6b27\u6c0f\u8ddd\u79bb\u6216\u8005\u505a\u964d\u7ef4\u4e4b\u540e\u5728 \\(z\\) \u7a7a\u95f4\u4e0a\u7684\u6b27\u6c0f\u8ddd\u79bb\uff0c\u7ea2\u7ebf\u4ee3\u8868RBF function\uff0c\u662f\u964d\u7ef4\u524d\u7684\u5206\u5e03\uff1b\u84dd\u7ebf\u4ee3\u8868\u4e86t-distribution\uff0c\u662f\u964d\u7ef4\u540e\u7684\u5206\u5e03 \u4f60\u4f1a\u53d1\u73b0\uff0c\u964d\u7ef4\u524d\u540e\u76f8\u4f3c\u5ea6\u4eceRBF function\u5230t-distribution\uff1a \u5982\u679c\u539f\u5148\u4e24\u4e2a\u70b9\u8ddd\u79bb( \\(\\Delta x\\) )\u6bd4\u8f83\u8fd1\uff0c\u5219\u964d\u7ef4\u8f6c\u6362\u4e4b\u540e\uff0c\u5b83\u4eec\u7684\u76f8\u4f3c\u5ea6( \\(\\Delta y\\) )\u4f9d\u65e7\u662f\u6bd4\u8f83\u63a5\u8fd1\u7684 \u5982\u679c\u539f\u5148\u4e24\u4e2a\u70b9\u8ddd\u79bb( \\(\\Delta x\\) )\u6bd4\u8f83\u8fdc\uff0c\u5219\u964d\u7ef4\u8f6c\u6362\u4e4b\u540e\uff0c\u5b83\u4eec\u7684\u76f8\u4f3c\u5ea6( \\(\\Delta y\\) )\u4f1a\u88ab\u62c9\u5f97\u66f4\u8fdc \u4e5f\u5c31\u662f\u8bf4t-SNE\u53ef\u4ee5\u805a\u96c6\u76f8\u4f3c\u7684\u6837\u672c\u70b9\uff0c\u540c\u65f6\u8fd8\u4f1a\u653e\u5927\u4e0d\u540c\u7c7b\u522b\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u4ece\u800c\u4f7f\u5f97\u4e0d\u540c\u7c7b\u522b\u4e4b\u95f4\u7684\u5206\u754c\u7ebf\u975e\u5e38\u660e\u663e\uff0c\u7279\u522b\u9002\u7528\u4e8e\u53ef\u89c6\u5316\uff0c\u4e0b\u56fe\u5219\u662f\u5bf9MNIST\u548cCOIL-20\u5148\u505aPCA\u964d\u7ef4\uff0c\u518d\u505at-SNE\u964d\u7ef4\u53ef\u89c6\u5316\u7684\u7ed3\u679c\uff1a Conclusion \u00b6 \u5c0f\u7ed3\u4e00\u4e0b\uff0c\u672c\u6587\u4e3b\u8981\u4ecb\u7ecd\u4e86\u4e09\u79cd\u975e\u7ebf\u6027\u964d\u7ef4\u7684\u7b97\u6cd5\uff1a LLE(Locally Linear Embedding)\uff0c\u5c40\u90e8\u7ebf\u6027\u5d4c\u5165\u7b97\u6cd5\uff0c\u4e3b\u8981\u601d\u60f3\u662f\u964d\u7ef4\u524d\u540e\uff0c\u6bcf\u4e2a\u70b9\u4e0e\u5468\u56f4\u90bb\u5c45\u7684\u7ebf\u6027\u7ec4\u5408\u5173\u7cfb\u4e0d\u53d8\uff0c \\(x^i=\\sum\\limits_j w_{ij}x^j\\) \u3001 \\(z^i=\\sum\\limits_j w_{ij}z^j\\) Laplacian Eigenmaps\uff0c\u62c9\u666e\u62c9\u65af\u7279\u5f81\u6620\u5c04\uff0c\u4e3b\u8981\u601d\u60f3\u662f\u5728high density\u7684\u533a\u57df\uff0c\u5982\u679c \\(x^i\\) \u3001 \\(x^j\\) \u8fd9\u4e24\u4e2a\u70b9\u76f8\u4f3c\u5ea6 \\(w_{i,j}\\) \u9ad8\uff0c\u5219\u6295\u5f71\u540e\u7684\u8ddd\u79bb \\(||z^i-z^j||_2\\) \u8981\u5c0f t-SNE(t-distribution Stochastic Neighbor Embedding)\uff0ct\u5206\u5e03\u968f\u673a\u90bb\u5c45\u5d4c\u5165\uff0c\u4e3b\u8981\u601d\u60f3\u662f\uff0c\u901a\u8fc7\u964d\u7ef4\u524d\u540e\u8ba1\u7b97\u76f8\u4f3c\u5ea6\u7531RBF function\u8f6c\u6362\u4e3at-distribution\uff0c\u5728\u805a\u96c6\u76f8\u4f3c\u70b9\u7684\u540c\u65f6\uff0c\u62c9\u5f00\u4e0d\u76f8\u4f3c\u70b9\u7684\u8ddd\u79bb\uff0c\u6bd4\u8f83\u9002\u5408\u7528\u5728\u6570\u636e\u56fa\u5b9a\u7684\u53ef\u89c6\u5316\u9886\u57df","title":"Unsupervised Learning Neighbor Embedding"},{"location":"ML/Unsupervised%20Learning%20Neighbor%20Embedding/#unsupervised-learning-neighbor-embedding","text":"PCA \u548c Word Embedding \u90fd\u662f\u7ebf\u6027\u7684\uff0c\u672c\u7ae0\u4e3b\u8981\u8bb2\u975e\u7ebf\u6027\u7684\u964d\u7ef4\u65b9\u6cd5 \u975e\u7ebf\u6027\u964d\u7ef4\u7684\u4e00\u4e9b\u7b97\u6cd5\uff1aLLE\u3001t-SNE","title":"Unsupervised Learning Neighbor Embedding"},{"location":"ML/Unsupervised%20Learning%20Neighbor%20Embedding/#manifold-learning","text":"\u6837\u672c\u70b9\u7684\u5206\u5e03\u53ef\u80fd\u662f\u5728\u9ad8\u7ef4\u7a7a\u95f4\u91cc\u7684\u4e00\u4e2a\u6d41\u884c (Manifold)\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6837\u672c\u70b9\u5176\u5b9e\u662f\u4f4e\u7ef4\u7a7a\u95f4\u7684\u56fe\u50cf\u88ab\u626d\u66f2\u7684\u585e\u5728\u4e86\u9ad8\u7ef4\u7a7a\u95f4\u91cc \u663e\u7136\u9ad8\u7ef4\u7a7a\u95f4\u4e2d\u53ea\u6709\u5f53 2 \u4e2a\u70b9\u5728\u5f88\u8fd1\u7684\u8ddd\u79bb\u65f6\u7528\u6b27\u6c0f\u8ddd\u79bb\u6765\u8868\u793a\u76f8\u4f3c\u7a0b\u5ea6\u624d\u662f\u53ef\u9760\u7684 Manifold Learning \u505a\u7684\u5c31\u662f\u628a\u9ad8\u7ef4\u56fe\u50cf\u5411\u4f4e\u7ef4\u644a\u5e73\u7136\u540e\u7528\u6b27\u5f0f\u8ddd\u79bb\u6765\u8868\u793a\u6837\u672c\u95f4\u7684\u76f8\u4f3c\u7a0b\u5ea6","title":"Manifold Learning"},{"location":"ML/Unsupervised%20Learning%20Neighbor%20Embedding/#locally-linear-embedding","text":"\u5c40\u90e8\u7ebf\u6027\u5d4c\u5165\uff0clocally linear embedding\uff0c\u7b80\u79f0 LLE \u5982\u4e0b\u56fe\u6240\u793a\uff0c\u7528 \\(w_{ij}\\) \u200b\u200b\u200b \u6765\u63cf\u8ff0 \\(x_i\\) \u200b\u200b \u200b\u548c \\(x_j\\) \u200b\u200b \u200b\u200b\u7684\u5173\u7cfb \u5047\u8bbe\u6bcf\u4e00\u4e2a\u6837\u672c\u70b9\u90fd\u53ef\u4ee5\u7528\u5468\u56f4 K \u4e2a\u70b9\u7684\u7ebf\u6027\u7ec4\u5408\uff08linear combination\uff09\u6765\u8868\u793a\uff0c\u90a3\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\u627e\u80fd\u591f\u4f7f\u5f97\u6240\u6709\u6837\u672c\u70b9\u4e0e\u5468\u56f4\u70b9\u7ebf\u6027\u7ec4\u5408\u7684\u5dee\u8ddd\u6700\u5c0f\u7684\u53c2\u6570 \\(w_{ij}\\) \u200b $$ min\\sum\\limits_i||x^i-\\sum\\limits_j w_{ij}x^j ||_2 $$ \u63a5\u4e0b\u6765\u5c31\u8981\u505a Dimension Reduction\uff0c\u628a \\(w_{ij}\\) fix \u4f4f\uff0c\u7136\u540e\u53bb\u627e \\(z_i,z_j\\) \\(min\\sum\\limits_i||z^i-\\sum\\limits_j w_{ij}z^j ||_2\\) \u200b\uff0c\u8fd9\u65f6 \\(w_{ij}\\) \u662f\u5df2\u77e5\u7684\uff0c\u800c\u4e14 \\(z\\) \u7684\u7ef4\u5ea6\u6bd4 \\(x\\) \u5c0f\u5f97\u591a\uff0c\u4f46 \\(x_i,z_i\\) \u53ef\u4ee5\u7528\u76f8\u540c\u7684 linear combination \u6765\u8868\u793a\uff0c\u5373\u4e0e\u5176\u4ed6\u70b9\u7684\u5173\u7cfb\u662f\u4e0d\u53d8\u7684 LLE\u7684\u5177\u4f53\u505a\u6cd5\u5982\u4e0b\uff1a \u5728\u539f\u5148\u7684\u9ad8\u7ef4\u7a7a\u95f4\u4e2d\u627e\u5230 \\(x^i\\) \u548c \\(x^j\\) \u4e4b\u95f4\u7684\u5173\u7cfb \\(w_{ij}\\) \u4ee5\u540e\u5c31\u628a\u5b83\u56fa\u5b9a\u4f4f \u4f7f \\(x^i\\) \u548c \\(x^j\\) \u964d\u7ef4\u5230\u65b0\u7684\u4f4e\u7ef4\u7a7a\u95f4\u4e0a\u7684 \\(z^i\\) \u548c \\(z^j\\) \uff0c\u4e14\u6ee1\u8db3 $$ min\\sum\\limits_i||z^i-\\sum\\limits_j w_{ij}z^j ||_2 $$ \u5373\u8981\u6c42\u964d\u7ef4\u540e\u7684 \\(w_{ij}\\) \u540c\u6837\u80fd\u591f\u6ee1\u8db3\u539f\u6765\u7684\u8981\u6c42 \u5b9e\u9645\u4e0a\uff0cLLE\u5e76\u6ca1\u6709\u7ed9\u51fa\u660e\u786e\u7684\u964d\u7ef4\u51fd\u6570\uff0c\u53ea\u662f\u7ed9\u51fa\u4e86\u964d\u7ef4\u524d\u540e\u7684\u7ea6\u675f\u6761\u4ef6 \u6211\u4eec\u9700\u8981\u6311\u9009\u5408\u9002\u7684 K\uff0c\u4e0b\u56fe\u7ed9\u51fa\u4e86\u539f\u59cbpaper\u4e2d\u7684\u5b9e\u9a8c\u7ed3\u679c\uff0cK \u592a\u5c0f\u6216\u592a\u5927\u5f97\u5230\u7684\u7ed3\u679c\u90fd\u4e0d\u592a\u597d K \u5982\u679c\u5f88\u5927\u5c31\u4f1a\u9009\u4e2d\u4e00\u4e9b\u56e0\u4e3a\u7a7a\u95f4\u626d\u66f2\u624d\u5f88\u63a5\u8fd1\u7684\u70b9","title":"Locally Linear Embedding"},{"location":"ML/Unsupervised%20Learning%20Neighbor%20Embedding/#laplacian-eigenmaps","text":"\u62c9\u666e\u62c9\u65af\u7279\u5f81\u6620\u5c04\uff0cLaplacian Eigenmaps","title":"Laplacian Eigenmaps"},{"location":"ML/Unsupervised%20Learning%20Neighbor%20Embedding/#review-of-smoothness-assumption","text":"\u5728 semi-supervised learning \u63d0\u5230\u7684 smoothness assumption \u4e2d\u4ec5\u77e5\u9053\u4e24\u70b9\u4e4b\u95f4\u7684\u6b27\u6c0f\u8ddd\u79bb\u662f\u4e0d\u591f\u7684\uff0c\u8fd8\u9700\u8981\u89c2\u5bdf\u4e24\u4e2a\u70b9\u5728 high density \u533a\u57df\u4e0b\u7684\u8ddd\u79bb\uff0c\u5982\u679c\u4e24\u4e2a\u70b9\u5728high density\u7684\u533a\u57df\u91cc\u6bd4\u8f83\u8fd1\uff0c\u90a3\u624d\u7b97\u662f\u771f\u6b63\u7684\u63a5\u8fd1 \\[ L=\\sum\\limits_{x^r} C(y^r,\\hat y^r) + \\lambda S\\\\ S=\\frac{1}{2}\\sum\\limits_{i,j} w_{i,j}(y^i-y^j)^2=y^TLy \\] \u5176\u4e2d \\(C(y^r,\\hat y^r)\\) \u8868\u793alabeled data\u9879\uff0c \\(\\lambda S\\) \u8868\u793aunlabeled data\u9879\uff0c\u5982\u679c\u70b9 \\(x^i\\) \u4e0e \\(x^j\\) \u662f\u76f8\u8fde\u7684\uff0c\u5219 \\(w_{i,j}\\) \u7b49\u4e8e\u76f8\u4f3c\u5ea6\uff0c\u5426\u5219\u4e3a 0","title":"Review of Smoothness Assumption"},{"location":"ML/Unsupervised%20Learning%20Neighbor%20Embedding/#application-in-unsupervised-task","text":"\u964d\u7ef4\u8981\u505a\u5230\u7684\u662f\u5982\u679c\u5728\u9ad8\u7ef4\u4e2d \\(x_i\\) \u548c \\(x_j\\) \u8ddd\u79bb\u5f88\u8fd1\uff0c\u90a3\u4e48\u5728\u4f4e\u7ef4\u7a7a\u95f4\u4e2d\u4e5f\u8981\u5f88\u8fd1\uff0c\u5373\u76f8\u4f3c\u5ea6 \\(x_{ij}\\) \u5f88\u5927\uff0c\u603b\u7684\u6765\u8bf4\u5c31\u662f\u8981 minimize \u4e0b\u5f0f\uff1a $$ minimize:S=\\frac{1}{2}\\sum\\limits_{i,j} w_{i,j}||z^i-z^j||_2 $$ \u4e0e semi \u4e0d\u540c\u7684\u662f\u8fd9\u91cc\u6ca1\u6709 label \u7684\u9879\uff0c\u6240\u4ee5\u4e0d\u52a0\u7ea6\u675f\u7684\u8bdd\u6240\u6709\u7684 \\(z\\) \u90fd\u662f 0 \u5c31\u80fd\u5230\u8fbe\u6700\u5c0f\uff1b\u5728 semi-supervised\u4e2d\uff0c\u5982\u679c\u6240\u6709 label \\(z^i\\) \u90fd\u8bbe\u6210\u4e00\u6837\uff0c\u4f1a\u4f7f\u5f97 supervised \u90e8\u5206\u7684 \\(\\sum\\limits_{x^r} C(y^r,\\hat y^r)\\) \u53d8\u5f97\u5f88\u5927 \u5728 unsupervised \u4e2d\uff0c\u9700\u8981\u52a0\u4e00\u4e9b\u7ea6\u675f\uff1a \u5047\u8bbe\u964d\u7ef4\u540e \\(z\\) \u6240\u5904\u7684\u7a7a\u95f4\u4e3a \\(M\\) \u7ef4\uff0c\u5219 \\(\\{z^1,z^2,...,z^N\\}=R^M\\) \uff0c\u6211\u4eec\u5e0c\u671b\u964d\u7ef4\u540e\u7684 \\(z\\) \u5360\u636e\u6574\u4e2a \\(M\\) \u7ef4\u7684\u7a7a\u95f4\uff0c\u800c\u4e0d\u5e0c\u671b\u5b83\u5728\u4e00\u4e2a\u6bd4 \\(M\\) \u66f4\u4f4e\u7ef4\u7684\u7a7a\u95f4\u91cc \u6700\u7ec8\u89e3\u51fa\u6765\u7684 \\(z\\) \u5176\u5b9e\u5c31\u662f Graph Laplacian \\(L\\) \u6bd4\u8f83\u5c0f\u7684\u7279\u5f81\u503c\u6240\u5bf9\u5e94\u7684\u7279\u5f81\u5411\u91cf \u8fd9\u4e5f\u662f Laplacian Eigenmaps \u540d\u79f0\u7684\u7531\u6765\uff0c\u6211\u4eec\u627e\u7684 \\(z\\) \u5c31\u662f Laplacian matrix \u7684\u7279\u5f81\u5411\u91cf \u5982\u679c\u901a\u8fc7\u62c9\u666e\u62c9\u65af\u7279\u5f81\u6620\u5c04\u627e\u5230 \\(z\\) \u4e4b\u540e\u518d\u5bf9\u5176\u5229\u7528 K-means \u505a\u805a\u7c7b\uff0c\u5c31\u53eb\u505a\u8c31\u805a\u7c7b (spectral clustering) \u76f8\u5173 paper\uff1a Belkin, M., Niyogi, P. Laplacian eigenmaps and spectral techniques for embedding and clustering. Advances in neural information processing systems . 2002","title":"Application in Unsupervised Task"},{"location":"ML/Unsupervised%20Learning%20Neighbor%20Embedding/#t-sne","text":"t-SNE\uff0c\u5168\u79f0\u4e3a T-distributed Stochastic Neighbor Embedding\uff0ct \u5206\u5e03\u968f\u673a\u90bb\u5c45\u5d4c\u5165 \u524d\u9762\u7684\u65b9\u6cd5\u53ea\u8981\u6c42\u76f8\u90bb\u7684\u70b9\u8981\u63a5\u8fd1\uff0c\u4f46\u6ca1\u6709\u5047\u8bbe\u4e0d\u76f8\u90bb\u7684\u70b9\u8981\u5206\u5f00 COIL-20 \u6570\u636e\u96c6\u5305\u542b\u4e86\u540c\u4e00\u5f20\u56fe\u7247\u8fdb\u884c\u65cb\u8f6c\u4e4b\u540e\u7684\u4e0d\u540c\u5f62\u6001\uff0c\u5bf9\u5176\u4f7f\u7528 LLE \u964d\u7ef4\u540e\u5f97\u5230\u7684\u7ed3\u679c\u662f\uff0c\u540c\u4e00\u4e2a\u5706\u5708\u4ee3\u8868\u540c\u5f20\u56fe\u50cf\u65cb\u8f6c\u7684\u4e0d\u540c\u59ff\u6001\uff0c\u4f46\u8bb8\u591a\u5706\u5708\u4e4b\u95f4\u5b58\u5728\u91cd\u53e0 \u5982\u4e0b\u56fe\uff1a","title":"t-SNE"},{"location":"ML/Unsupervised%20Learning%20Neighbor%20Embedding/#how-t-sne-works","text":"\u505a t-SNE \u540c\u6837\u8981\u964d\u7ef4\uff0c\u5728\u539f\u6765 \\(x\\) \u7684\u5206\u5e03\u7a7a\u95f4\u4e0a\u8ba1\u7b97\u6240\u6709 \\(x^i\\) \u4e0e \\(x^j\\) \u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6 \\(S(x^i,x^j)\\) \u7136\u540e\u9700\u8981\u5c06\u5176\u505a\u5f52\u4e00\u5316\uff1a \\(P(x^j|x^i)=\\frac{S(x^i,x^j)}{\\sum_{k\\ne i}S(x^i,x^k)}\\) \uff0c\u5373 \\(x^j\\) \u4e0e \\(x^i\\) \u7684\u76f8\u4f3c\u5ea6\u5360\u6240\u6709\u4e0e \\(x^i\\) \u76f8\u5173\u7684\u76f8\u4f3c\u5ea6\u7684\u6bd4\u4f8b \u5c06 \\(x\\) \u200b \u964d\u7ef4\u5230 \\(z\\) \u200b\uff0c\u540c\u6837\u53ef\u4ee5\u8ba1\u7b97\u76f8\u4f3c\u5ea6 \\(S'(z^i,z^j)\\) \u200b\uff0c\u5e76\u505a\u5f52\u4e00\u5316\uff1a \\(Q(z^j|z^i)=\\frac{S'(z^i,z^j)}{\\sum_{k\\ne i}S'(z^i,z^k)}\\) \u200b \u5f52\u4e00\u5316\u7684\u76ee\u7684\u662f\u5c06\u5176\u6620\u5c04\u5230\u4e00\u4e2a\u7edf\u4e00\u7684\u6982\u7387\u533a\u95f4 \u6211\u4eec\u5e0c\u671b\u627e\u5230\u7684\u6295\u5f71\u7a7a\u95f4 \\(z\\) \u200b\uff0c\u53ef\u4ee5\u8ba9 \\(P(x^j|x^i)\\) \u200b \u548c \\(Q(z^j|z^i)\\) \u200b \u7684\u5206\u5e03\u8d8a\u63a5\u8fd1\u8d8a\u597d \u7528\u4e8e\u8861\u91cf\u4e24\u4e2a\u5206\u5e03\u4e4b\u95f4\u76f8\u4f3c\u5ea6\u7684\u65b9\u6cd5\u5c31\u662f KL\u6563\u5ea6 (KL divergence) \uff0c\u6211\u4eec\u7684\u76ee\u6807\u5c31\u662f\u8ba9 \\(L\\) \u200b \u8d8a\u5c0f\u8d8a\u597d\uff1a $$ L=\\sum\\limits_i KL(P( |x^i)||Q( |z^i))\\ =\\sum\\limits_i \\sum\\limits_jP(x^j|x^i)log \\frac{P(x^j|x^i)}{Q(z^j|z^i)} $$","title":"How t-SNE works"},{"location":"ML/Unsupervised%20Learning%20Neighbor%20Embedding/#kl-divergence","text":"\u4fe1\u606f\u71b5\uff1a $$ H=-\\sum\\limits_{i=1}^N p(x_i)\\cdot log\\ p(x_i) $$ \u5176\u4e2d \\(p(x_i)\\) \u8868\u793a\u4e8b\u4ef6 \\(x_i\\) \u53d1\u751f\u7684\u6982\u7387\uff0c\u53cd\u6620\u7684\u5c31\u662f\u8981\u8868\u793a\u4e00\u4e2a\u6982\u7387\u5206\u5e03\u6240\u9700\u8981\u7684\u5e73\u5747\u4fe1\u606f\u91cf \u5728\u4fe1\u606f\u71b5\u7684\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u5b9a\u4e49 KL\u6563\u5ea6 \u4e3a\uff1a $$ D_{KL}(p||q)=\\sum\\limits_{i=1}^N p(x_i)\\cdot (log\\ p(x_i)-log\\ q(x_i))\\ =\\sum\\limits_{i=1}^N p(x_i)\\cdot log\\frac{p(x_i)}{q(x_i)} $$ \\(D_{KL}(p||q)\\) \u200b \u8868\u793a\u7684\u5c31\u662f\u6982\u7387 \\(q\\) \u200b \u4e0e\u6982\u7387 \\(p\\) \u200b \u4e4b\u95f4\u7684\u5dee\u5f02\uff0c\u5f88\u663e\u7136\uff0cKL\u6563\u5ea6\u8d8a\u5c0f\uff0c\u8bf4\u660e\u6982\u7387 \\(q\\) \u200b\u4e0e\u6982\u7387 \\(p\\) \u200b\u4e4b\u95f4\u8d8a\u63a5\u8fd1\uff0c\u90a3\u4e48\u9884\u6d4b\u7684\u6982\u7387\u5206\u5e03\u4e0e\u771f\u5b9e\u7684\u6982\u7387\u5206\u5e03\u4e5f\u5c31\u8d8a\u63a5\u8fd1","title":"KL Divergence"},{"location":"ML/Unsupervised%20Learning%20Neighbor%20Embedding/#how-to-use","text":"\u56e0\u4e3a\u8981\u8ba1\u7b97\u6240\u6709\u6837\u672c\u70b9\u95f4\u7684\u8ddd\u79bb\uff0c\u8fd0\u7b97\u91cf\u5f88\u5927 \u5e38\u89c1\u7684\u4f5c\u6cd5\u662f\u5148\u7528 PCA \u4e4b\u7c7b\u7684\u505a\u6cd5\u964d\u7ef4\uff0c\u7136\u540e\u7528t-SNE\u5bf9\u8fd9\u4e2a\u7b80\u5355\u964d\u7ef4\u7a7a\u95f4\u518d\u505a\u4e00\u6b21\u66f4\u6df1\u5c42\u6b21\u7684\u964d\u7ef4\uff0c\u4ee5\u671f\u51cf\u5c11\u8fd0\u7b97\u91cf \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0ct-SNE\u7684\u5f0f\u5b50\u65e0\u6cd5\u5bf9\u65b0\u7684\u6837\u672c\u70b9\u8fdb\u884c\u5904\u7406\uff0c\u4e00\u65e6\u51fa\u73b0\u65b0\u7684 \\(x^i\\) \uff0c\u5c31\u9700\u8981\u91cd\u65b0\u8dd1\u4e00\u904d\u8be5\u7b97\u6cd5\uff0c\u6240\u4ee5 t-SNE\u901a\u5e38\u4e0d\u662f\u7528\u6765\u8bad\u7ec3\u6a21\u578b\u7684\uff0c\u5b83\u66f4\u9002\u5408\u7528\u4e8e\u505a\u57fa\u4e8e\u56fa\u5b9a\u6570\u636e\u7684\u53ef\u89c6\u5316 t-SNE\u5e38\u7528\u4e8e\u5c06\u56fa\u5b9a\u7684\u9ad8\u7ef4\u6570\u636e\u53ef\u89c6\u5316\u5230\u4e8c\u7ef4\u5e73\u9762\u4e0a","title":"How to use"},{"location":"ML/Unsupervised%20Learning%20Neighbor%20Embedding/#similarity-measure","text":"\u5982\u679c\u6839\u636e\u6b27\u6c0f\u8ddd\u79bb\u8ba1\u7b97\u964d\u7ef4\u524d\u7684\u76f8\u4f3c\u5ea6\uff0c\u5f80\u5f80\u91c7\u7528 RBF function \\(S(x^i,x^j)=e^{-||x^i-x^j||_2}\\) \uff0c\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u7684\u597d\u5904\u662f\uff0c\u53ea\u8981\u4e24\u4e2a\u6837\u672c\u70b9\u7684\u6b27\u6c0f\u8ddd\u79bb\u7a0d\u5fae\u5927\u4e00\u4e9b\uff0c\u76f8\u4f3c\u5ea6\u5c31\u4f1a\u4e0b\u964d\u5f97\u5f88\u5feb \u8fd8\u6709\u4e00\u79cd\u53eb\u505aSNE\u7684\u65b9\u6cd5\uff0c\u5b83\u5728\u964d\u7ef4\u540e\u7684\u65b0\u7a7a\u95f4\u91c7\u7528\u4e0e\u4e0a\u8ff0\u76f8\u540c\u7684\u76f8\u4f3c\u5ea6\u7b97\u6cd5 \\(S'(z^i,z^j)=e^{-||z^i-z^j||_2}\\) \u5bf9t-SNE\u6765\u8bf4\uff0c\u5b83\u5728\u964d\u7ef4\u540e\u7684\u65b0\u7a7a\u95f4\u6240\u91c7\u53d6\u7684\u76f8\u4f3c\u5ea6\u7b97\u6cd5\u662f\u4e0e\u4e4b\u524d\u4e0d\u540c\u7684\uff0c\u5b83\u9009\u53d6\u4e86 t-distribution \u4e2d\u7684\u4e00\u79cd\uff0c\u5373 \\(S'(z^i,z^j)=\\frac{1}{1+||z^i-z^j||_2}\\) \u4ee5\u4e0b\u56fe\u4e3a\u4f8b\uff0c\u5047\u8bbe\u6a2a\u8f74\u4ee3\u8868\u4e86\u5728\u539f\u5148 \\(x\\) \u7a7a\u95f4\u4e0a\u7684\u6b27\u6c0f\u8ddd\u79bb\u6216\u8005\u505a\u964d\u7ef4\u4e4b\u540e\u5728 \\(z\\) \u7a7a\u95f4\u4e0a\u7684\u6b27\u6c0f\u8ddd\u79bb\uff0c\u7ea2\u7ebf\u4ee3\u8868RBF function\uff0c\u662f\u964d\u7ef4\u524d\u7684\u5206\u5e03\uff1b\u84dd\u7ebf\u4ee3\u8868\u4e86t-distribution\uff0c\u662f\u964d\u7ef4\u540e\u7684\u5206\u5e03 \u4f60\u4f1a\u53d1\u73b0\uff0c\u964d\u7ef4\u524d\u540e\u76f8\u4f3c\u5ea6\u4eceRBF function\u5230t-distribution\uff1a \u5982\u679c\u539f\u5148\u4e24\u4e2a\u70b9\u8ddd\u79bb( \\(\\Delta x\\) )\u6bd4\u8f83\u8fd1\uff0c\u5219\u964d\u7ef4\u8f6c\u6362\u4e4b\u540e\uff0c\u5b83\u4eec\u7684\u76f8\u4f3c\u5ea6( \\(\\Delta y\\) )\u4f9d\u65e7\u662f\u6bd4\u8f83\u63a5\u8fd1\u7684 \u5982\u679c\u539f\u5148\u4e24\u4e2a\u70b9\u8ddd\u79bb( \\(\\Delta x\\) )\u6bd4\u8f83\u8fdc\uff0c\u5219\u964d\u7ef4\u8f6c\u6362\u4e4b\u540e\uff0c\u5b83\u4eec\u7684\u76f8\u4f3c\u5ea6( \\(\\Delta y\\) )\u4f1a\u88ab\u62c9\u5f97\u66f4\u8fdc \u4e5f\u5c31\u662f\u8bf4t-SNE\u53ef\u4ee5\u805a\u96c6\u76f8\u4f3c\u7684\u6837\u672c\u70b9\uff0c\u540c\u65f6\u8fd8\u4f1a\u653e\u5927\u4e0d\u540c\u7c7b\u522b\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u4ece\u800c\u4f7f\u5f97\u4e0d\u540c\u7c7b\u522b\u4e4b\u95f4\u7684\u5206\u754c\u7ebf\u975e\u5e38\u660e\u663e\uff0c\u7279\u522b\u9002\u7528\u4e8e\u53ef\u89c6\u5316\uff0c\u4e0b\u56fe\u5219\u662f\u5bf9MNIST\u548cCOIL-20\u5148\u505aPCA\u964d\u7ef4\uff0c\u518d\u505at-SNE\u964d\u7ef4\u53ef\u89c6\u5316\u7684\u7ed3\u679c\uff1a","title":"Similarity Measure"},{"location":"ML/Unsupervised%20Learning%20Neighbor%20Embedding/#conclusion","text":"\u5c0f\u7ed3\u4e00\u4e0b\uff0c\u672c\u6587\u4e3b\u8981\u4ecb\u7ecd\u4e86\u4e09\u79cd\u975e\u7ebf\u6027\u964d\u7ef4\u7684\u7b97\u6cd5\uff1a LLE(Locally Linear Embedding)\uff0c\u5c40\u90e8\u7ebf\u6027\u5d4c\u5165\u7b97\u6cd5\uff0c\u4e3b\u8981\u601d\u60f3\u662f\u964d\u7ef4\u524d\u540e\uff0c\u6bcf\u4e2a\u70b9\u4e0e\u5468\u56f4\u90bb\u5c45\u7684\u7ebf\u6027\u7ec4\u5408\u5173\u7cfb\u4e0d\u53d8\uff0c \\(x^i=\\sum\\limits_j w_{ij}x^j\\) \u3001 \\(z^i=\\sum\\limits_j w_{ij}z^j\\) Laplacian Eigenmaps\uff0c\u62c9\u666e\u62c9\u65af\u7279\u5f81\u6620\u5c04\uff0c\u4e3b\u8981\u601d\u60f3\u662f\u5728high density\u7684\u533a\u57df\uff0c\u5982\u679c \\(x^i\\) \u3001 \\(x^j\\) \u8fd9\u4e24\u4e2a\u70b9\u76f8\u4f3c\u5ea6 \\(w_{i,j}\\) \u9ad8\uff0c\u5219\u6295\u5f71\u540e\u7684\u8ddd\u79bb \\(||z^i-z^j||_2\\) \u8981\u5c0f t-SNE(t-distribution Stochastic Neighbor Embedding)\uff0ct\u5206\u5e03\u968f\u673a\u90bb\u5c45\u5d4c\u5165\uff0c\u4e3b\u8981\u601d\u60f3\u662f\uff0c\u901a\u8fc7\u964d\u7ef4\u524d\u540e\u8ba1\u7b97\u76f8\u4f3c\u5ea6\u7531RBF function\u8f6c\u6362\u4e3at-distribution\uff0c\u5728\u805a\u96c6\u76f8\u4f3c\u70b9\u7684\u540c\u65f6\uff0c\u62c9\u5f00\u4e0d\u76f8\u4f3c\u70b9\u7684\u8ddd\u79bb\uff0c\u6bd4\u8f83\u9002\u5408\u7528\u5728\u6570\u636e\u56fa\u5b9a\u7684\u53ef\u89c6\u5316\u9886\u57df","title":"Conclusion"},{"location":"ML/%E5%85%B6%E4%BB%96/","text":"Xavier\u968f\u673a\u521d\u59cb\u5316","title":"\u5176\u4ed6"},{"location":"ML/%E8%AF%B4%E6%98%8E/","text":"\u8bf4\u660e \u00b6 \u674e\u5b8f\u6bc5\u8001\u5e08\u673a\u5668\u5b66\u4e60\u7684\u7b14\u8bb0 \u53c2\u8003\uff1a \u8bfe\u7a0b\u89c6\u9891\uff1a \u674e\u5b8f\u6bc5\u6559\u6388\u7684\u673a\u5668\u5b66\u4e60\u8bfe\u7a0b(2020\u7248\u5168\u96c6) \u54d4\u54e9\u54d4\u54e9 \u674e\u5b8f\u6bc5\u8001\u5e08\u7684\u4e2a\u4eba\u7f51\u7ad9\uff1a ML 2020 Spring (ntu.edu.tw) Youtube\uff1a Hung-yi Lee - YouTube \u7b14\u8bb0\u642c\u8fd0\u81ea\uff1a Sakura-gh/ML-notes: notes about machine learning (github.com) Scarleatt \u6211\u7684 homework \u8bb0\u5f55\uff1a \u5206\u7c7b: ML | hucorz","title":"\u8bf4\u660e"},{"location":"ML/%E8%AF%B4%E6%98%8E/#_1","text":"\u674e\u5b8f\u6bc5\u8001\u5e08\u673a\u5668\u5b66\u4e60\u7684\u7b14\u8bb0 \u53c2\u8003\uff1a \u8bfe\u7a0b\u89c6\u9891\uff1a \u674e\u5b8f\u6bc5\u6559\u6388\u7684\u673a\u5668\u5b66\u4e60\u8bfe\u7a0b(2020\u7248\u5168\u96c6) \u54d4\u54e9\u54d4\u54e9 \u674e\u5b8f\u6bc5\u8001\u5e08\u7684\u4e2a\u4eba\u7f51\u7ad9\uff1a ML 2020 Spring (ntu.edu.tw) Youtube\uff1a Hung-yi Lee - YouTube \u7b14\u8bb0\u642c\u8fd0\u81ea\uff1a Sakura-gh/ML-notes: notes about machine learning (github.com) Scarleatt \u6211\u7684 homework \u8bb0\u5f55\uff1a \u5206\u7c7b: ML | hucorz","title":"\u8bf4\u660e"},{"location":"OI/STL/","text":"STL \u00b6 string \u00b6 \u5b57\u7b26\u4e32 \u6784\u9020\u51fd\u6570 string s = \"\" s1 = s2 \u589e\u52a0\u5143\u7d20 s += s2 //\u76f4\u63a5\u7528 + \u5373\u53ef s += \"new string\" \u5220\u9664\u5143\u7d20 string & erase ( size_t pos = 0 , size_t n ) //\u5220\u9664\u4ecepos\u5f00\u59cb\u7684n\u4e2a\u5b57\u7b26 iterator erase ( iterator ) //\u5220\u9664\u4e00\u4e2a iterator erase ( iterator first , iterator last ) //\u5220\u9664\u8303\u56f4 iterator erase ( remove ( str . begin (), str . end (), 'a' ), str . end ()) //\u5220\u9664\u7279\u5b9a\u5b57\u7b26 \u8fed\u4ee3\u5668 iterator begin (); //\u5934\u8fed\u4ee3\u5668 iterator end (); //\u5c3e\u8fed\u4ee3\u5668 \u5176\u4ed6 sort ( string , iterator l , iterator r ) //\u6392\u5e8f [l, r) string substr ( int pos , int n ) //\u83b7\u53d6\u8fde\u7eed\u5b50\u4e32\uff0c\u4ece pos \u5f00\u59cb\u7684 n \u4e2a\u5b57\u7b26\uff0c-1\u8868\u793a\u5230\u6700\u540e bool empty () //\u5224\u65ad\u662f\u5426\u4e3a\u7a7a int size () //\u5b57\u7b26\u4e2a\u6570 bool isalnum ( char ) //\u5982\u679cc\u662f\u5b57\u6bcd\u6216\u6570\u5b57\uff0c\u8fd4\u56de true bool isalpha ( char ) //\u5982\u679cc\u662f\u5b57\u6bcd\uff0c\u8fd4\u56detrue bool iscntrl ( char ) //\u5982\u679cc\u662f\u63a7\u5236\u7b26\uff0c\u8fd4\u56detrue bool isdigit ( char ) //\u5982\u679cc\u662f\u6570\u5b57\uff0c\u8fd4\u56detrue bool isgraph ( char ) //\u5982\u679cc\u4e0d\u662f\u7a7a\u683c\uff0c\u8fd4\u56de\u4e3atrue bool islower ( char ) //\u5982\u679cc\u662f\u5c0f\u5199\u5b57\u6bcd\uff0c\u8fd4\u56de\u4e3atrue bool isupper ( char ) //\u5982\u679cc\u662f\u5927\u5199\u5b57\u7b26\uff0c\u8fd4\u56de\u4e3atrue bool isprint ( char ) //\u5982\u679cc\u662f\u53ef\u6253\u5370\u7684\u5b57\u7b26\uff0c\u8fd4\u56de\u4e3atrue bool ispunct ( char ) //\u5982\u679cc\u662f\u6807\u70b9\u7b26\u53f7\uff0c\u8fd4\u56de\u4e3atrue bool isspace ( char ) //\u5982\u679cc\u662f\u7a7a\u767d\u5b57\u7b26\uff0c\u8fd4\u56de\u4e3atrue bool isxdigit ( char ) //\u5982\u679cc\u662f\u5341\u516d\u8fdb\u5236\u6570\uff0c\u8fd4\u56de\u4e3atrue vector \u00b6 \\(include<vector>\\) \u6784\u9020\u51fd\u6570 vector () //\u521b\u5efa\u4e00\u4e2a\u7a7avector vector ( int nSize ) //\u521b\u5efa\u4e00\u4e2avector,\u5143\u7d20\u4e2a\u6570\u4e3anSize vector ( int nSize , const T & t ) //\u521b\u5efa\u4e00\u4e2avector\uff0c\u5143\u7d20\u4e2a\u6570\u4e3anSize,\u4e14\u503c\u5747\u4e3at vector ( const vector & ) //\u590d\u5236\u6784\u9020\u51fd\u6570 vector ( begin , end ) //\u590d\u5236[begin,end)\u533a\u95f4\u5185\u53e6\u4e00\u4e2a\u6570\u7ec4\u7684\u5143\u7d20\u5230vector\u4e2d \u589e\u52a0\u5143\u7d20 void push_back ( const T & x ) //\u5411\u91cf\u5c3e\u90e8\u589e\u52a0\u4e00\u4e2a\u5143\u7d20X iterator insert ( iterator it , const T & x ) //\u8fed\u4ee3\u5668\u6307\u5411\u5143\u7d20\u524d\u589e\u52a0\u4e00\u4e2a\u5143\u7d20x iterator insert ( iterator it , int n , const T & x ) //\u8fed\u4ee3\u5668\u6307\u5411\u5143\u7d20\u524d\u589e\u52a0n\u4e2a\u76f8\u540c\u7684\u5143\u7d20x iterator insert ( iterator it , iterator first , iterator last ) //\u8fed\u4ee3\u5668\u6307\u5411\u5143\u7d20\u524d\u63d2\u5165\u53e6\u4e00\u4e2a\u5411\u91cf\u7684[first,last)\u7684\u6570\u636e \u5220\u9664\u5143\u7d20 iterator erase ( iterator it ) //\u5220\u9664\u8fed\u4ee3\u5668\u6307\u5411\u5143\u7d20 iterator erase ( iterator first , iterator last ) //\u5220\u9664[first,last)\u4e2d\u5143\u7d20 void pop_back () //\u5220\u9664\u5411\u91cf\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20 void clear () //\u6e05\u7a7a\u5411\u91cf\u4e2d\u6240\u6709\u5143\u7d20 \u8fed\u4ee3\u5668 reference at ( int pos ) //\u8fd4\u56depos\u4f4d\u7f6e\u5143\u7d20\u7684\u5f15\u7528 reference front () //\u8fd4\u56de\u9996\u5143\u7d20\u7684\u5f15\u7528 reference back () //\u8fd4\u56de\u5c3e\u5143\u7d20\u7684\u5f15\u7528 iterator begin () //\u8fd4\u56de\u5411\u91cf\u5934\u6307\u9488\uff0c\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20 iterator end () //\u8fd4\u56de\u5411\u91cf\u5c3e\u6307\u9488\uff0c\u6307\u5411\u5411\u91cf\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e reverse_iterator rbegin () //\u53cd\u5411\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20 reverse_iterator rend () //\u53cd\u5411\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e4b\u524d\u7684\u4f4d\u7f6e \u5176\u4ed6 int size () const //\u8fd4\u56de\u5411\u91cf\u4e2d\u5143\u7d20\u7684\u4e2a\u6570 int capacity () const //\u8fd4\u56de\u5f53\u524d\u5411\u91cf\u6240\u80fd\u5bb9\u7eb3\u7684\u6700\u5927\u5143\u7d20\u503c int max_size () const //\u8fd4\u56de\u6700\u5927\u53ef\u5141\u8bb8\u7684vector\u5143\u7d20\u6570\u91cf\u503c bool empty () const //\u5224\u65ad\u5411\u91cf\u662f\u5426\u4e3a\u7a7a\uff0c\u82e5\u4e3a\u7a7a\uff0c\u5219\u5411\u91cf\u4e2d\u65e0\u5143\u7d20 void swap ( vector & ) //\u4ea4\u6362\u4e24\u4e2a\u540c\u7c7b\u578b\u5411\u91cf\u7684\u6570\u636e void assign ( int n , const T & x ) //\u8bbe\u7f6e\u5411\u91cf\u4e2d\u524dn\u4e2a\u5143\u7d20\u7684\u503c\u4e3ax void assign ( const_iterator first , const_iterator last ) //\u5411\u91cf\u4e2d[first,last)\u4e2d\u5143\u7d20\u8bbe\u7f6e\u6210\u5f53\u524d\u5411\u91cf\u5143\u7d20 stack \u00b6 \\(include<stack>\\) \u6784\u9020\u51fd\u6570 list < int > c0 //\u7a7a\u94fe\u8868 list < int > c1 ( 3 ) //\u5efa\u4e00\u4e2a\u542b3\u4e2a\u9ed8\u8ba4\u503c\u662f0\u7684\u5143\u7d20\u7684\u94fe\u8868 list < int > c2 ( 5 , 2 ) //\u5efa\u4e00\u4e2a\u542b5\u4e2a\u5143\u7d20\u7684\u94fe\u8868\uff0c\u503c\u90fd\u662f2 list < int > c4 ( c2 ) //\u590d\u5236 list < int > c5 ( iterator beg , iterator end ) //\u533a\u95f4[beg, end)\u505a\u4e3a\u5143\u7d20\u521d\u503c push ( const T & x ) //\u5165\u6808 T pop () //\u51fa\u6808 T top () //\u83b7\u53d6\u6808\u9876 bool empty () //\u5224\u65ad\u7a7a\u6808 int size () //\u8fd4\u56de\u6808\u5143\u7d20\u4e2a\u6570 list \u00b6 \\(include <list>\\) \u6784\u9020\u51fd\u6570 c1 = c2 //\u590d\u5236 assign ( n , elem ) //\u8d4b\u503cn\u4e2aelem assign ( beg , end ) //\u533a\u95f4[beg,end\uff09\u5185\u7684\u5143\u7d20\u8d4b\u503c\u7ed9c swap ( c1 , c2 ) //\u4ea4\u6362 \u589e\u52a0\u5143\u7d20 push_front () //\u9996\u52a0 push_back () //\u5c3e\u52a0 insert ( pos , num ) //\u5728pos\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20num\uff0c\u8fd4\u56de\u65b0\u5143\u7d20\u4f4d\u7f6e insert ( pos , n , elem ) //\u5728pos\u4f4d\u7f6e\u4e0a\u63d2\u5165n\u4e2aelem\u526f\u672c\uff0c\u65e0\u8fd4\u56de\u503c insert ( pos , beg , end ) //\u5728pos\u4f4d\u7f6e\u4e0a\u63d2\u5165\u533a\u95f4[beg,end)\u5185\u7684\u6240\u6709\u5143\u7d20\u7684\u526f\u672c\uff0c\u6ca1\u6709\u8fd4\u56de\u503c \u5220\u9664\u5143\u7d20 pop_front () //\u9996\u5220 pop_back () //\u5c3e\u5220 erase ( pos ) \u3000\u3000\u3000\u3000 //\u5220\u9664pos\u4f4d\u7f6e\u7684\u5143\u7d20\uff0c\u8fd4\u56de\u4e0b\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e erase ( beg , end ) //\u79fb\u9664[beg, end)\u533a\u95f4\u5185\u7684\u6240\u6709\u5143\u7d20\uff0c\u8fd4\u56de\u4e0b\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e remove ( num ) //\u5220\u9664\u94fe\u8868\u4e2d\u5339\u914dnum\u7684\u5143\u7d20 remove_if ( cmp ) //\u5220\u9664\u6761\u4ef6\u6ee1\u8db3\u7684\u5143\u7d20,\u53c2\u6570\u4e3a\u81ea\u5b9a\u4e49\u7684\u56de\u8c03\u51fd\u6570 clear () //\u6e05\u7a7a \u8fed\u4ee3\u5668 list < T >:: iterator it c . begin () c . end () c . rbegin () //\u9006\u5411\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20,\u5373c\u94fe\u8868\u7684\u6700\u540e\u4e00\u4e2a\u6570\u636e\u3002 c . rend () //\u8fd4\u56de\u9006\u5411\u94fe\u8868\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e,\u5373c\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u6570\u636e\u518d\u5f80\u524d\u7684\u4f4d\u7f6e\u3002it++ \u5176\u4ed6 T front () //\u9996\u5143\u7d20 T back () //\u5c3e\u5143 bool empty () //\u5224\u65ad\u662f\u5426\u4e3a\u7a7a int size () //\u6709\u6548\u5143\u7d20\u4e2a\u6570 int max_size () //\u8fd4\u56de\u5bb9\u5668\u6700\u5927\u7684\u53ef\u4ee5\u5b58\u50a8\u7684\u5143\u7d20 bool c1 == c2 //\u6bd4\u8f83 sort () //\u5355\u94fe\u8868\u6392\u5e8f unique () //\u53bb\u91cd\uff0c\u8981\u5148\u6392\u5e8f c1 . merge ( c2 ) //\u5408\u5e762\u4e2a\u6709\u5e8f\u7684\u94fe\u8868\u5e76\u4f7f\u4e4b\u6709\u5e8f,\u4ece\u65b0\u653e\u5230c1\u91cc,\u91ca\u653ec2 c1 . merge ( c2 , cmp ) //\u5408\u5e762\u4e2a\u6709\u5e8f\u7684\u94fe\u8868\u5e76\u4f7f\u4e4b\u6309\u7167\u81ea\u5b9a\u4e49\u89c4\u5219\u6392\u5e8f\u4e4b\u540e\u4ece\u65b0\u653e\u5230c1\u4e2d,\u91ca\u653ec2 reverse () //\u53cd\u8f6c resize ( int ) //\u91cd\u7f6e\u6709\u6548\u5143\u7d20\u4e2a\u6570 set \u00b6 \\(include<set>\\) \u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4e0d\u4f1a\u5b58\u50a8\u91cd\u590d\u7684\u5143\u7d20 \u6784\u9020\u51fd\u6570 swap ( set , set ) // \u4ea4\u6362\u4e24\u4e2a\u96c6\u5408\u53d8\u91cf s1 = s2 \u589e\u52a0\u5143\u7d20 insert ( T ) // \u5728\u96c6\u5408\u4e2d\u63d2\u5165\u5143\u7d20 \u5220\u9664\u5143\u7d20 clear () // \u6e05\u9664\u6240\u6709\u5143\u7d20 erase ( T ) // \u5220\u9664\u96c6\u5408\u4e2d\u7684\u5143\u7d20 \u8fed\u4ee3\u5668 set < T >:: iterator it begin () // \u8fd4\u56de\u6307\u5411\u9996\u5143\u7d20\u7684\u8fed\u4ee3\u5668 end () // \u8fd4\u56de\u6307\u5411\u5c3e\u5143\u7d20\u7684\u540e\u4e00\u4f4d\u7684\u8fed\u4ee3\u5668 rbegin () // \u53cd\u5411\u8fed\u4ee3\u5668 rend () // \u5176\u4ed6 int count ( T ) // \u8fd4\u56de\u67d0\u4e2a\u5143\u7d20\u7684\u4e2a\u6570,0\u62161\uff0c\u53ea\u80fd\u5224\u65ad\u662f\u5426\u5b58\u5728 bool empty () // \u5224\u65ad\u96c6\u5408\u4e3a\u7a7a int size () // \u96c6\u5408\u4e2d\u5143\u7d20\u7684\u6570\u76ee max_size () // \u8fd4\u56de\u96c6\u5408\u80fd\u5bb9\u7eb3\u7684\u5143\u7d20\u7684\u6700\u5927\u9650\u503c iterator find ( T ) // \u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u88ab\u67e5\u627e\u5230\u5143\u7d20\u7684\u8fed\u4ee3\u5668,\u65e0\u5219\u8fd4\u56deend() iterator lower_bound ( T ) // \u8fd4\u56de\u6307\u5411\u5927\u4e8e\u6216\u7b49\u4e8e\u67d0\u503c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 iterator upper_bound ( T ) // \u8fd4\u56de\u5927\u4e8e\u67d0\u4e2a\u503c\u5143\u7d20\u7684\u8fed\u4ee3\u5668 pair \u00b6 \\(include<utility>\\) \u4e24\u4efb\u610f\u7c7b\u578b\u5143\u7d20\u7684\u7ed3\u6784\u4f53 pair < int , double > p1 ; //\u9ed8\u8ba4\u6784\u9020\u51fd\u6570 pair < int , double > p1 ( 1 , 1.1 ); //\u542b\u53c2\u6784\u9020\u51fd\u6570 pair < int , double > p1 ( p2 ); //\u62f7\u8d1d\u6784\u9020\u51fd\u6570 p1 = p2 p1 . first //\u83b7\u53d6 \u7b2c\u4e00\u4e2a\u5143\u7d20 p1 . second //\u83b7\u53d6 \u7b2c\u4e8c\u4e2a\u5143\u7d20 p1 < p2 //\u53ef\u4ee5\u76f4\u63a5\u6bd4\u8f83,\u5148\u6bd4\u8f83first\uff0c\u518d\u6bd4\u8f83second map \u00b6 \\(include<map>\\) \u5efa\u7acbKey\uff0dvalue\u7684\u5bf9\u5e94\uff0ckey \u548c value \u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\u3002 \u6784\u9020\u51fd\u6570 map < int , string > m1 ; //\u7d22\u5f15\u4e3a int\u578b map < string , int > m2 ; //\u7d22\u5f15\u4e3a string \u589e\u52a0\u5143\u7d20 insert ( pair < int , string > ( 1 , \"string1\" )) //\u8fd9\u91cc\u7684\u5143\u7d20\u53ef\u4ee5\u662f\u5143\u7d20\u7c7b\u578b\u4e0e\u58f0\u660e\u5339\u914d\u76842\u5143\u7d20\u7ed3\u6784\u4f53\u6216\u8005pair\uff0cinsert\u4e0d\u80fd\u8986\u76d6\u539f\u503c map < int , string > m1 //\u6570\u7ec4\u53ef\u4ee5\u8986\u76d6\u539f\u503c m1 [ 1 ] = \"string1\" //\u5982\u679c\u6ca1\u6709\u5bf9\u5e94 key \u503c\u4f1a\u81ea\u52a8\u6dfb\u52a0 m1 [ 2 ] = \"string2\" map < string , int > m2 m2 [ \"string1\" ] = 1 m2 [ \"string2\" ] = 2 \u5220\u9664\u5143\u7d20 erase ( iter ) erase ( iterator first , iterator second ) //\u5220\u9664\u8303\u56f4 clear ( \uff09 //\u5220\u9664\u6240\u6709\u5143\u7d20 \u8fed\u4ee3\u5668 iterator begin () iterator end () iterator rbegin () //\u8fd4\u56de\u4e00\u4e2a\u6307\u5411map\u5c3e\u90e8\u7684\u9006\u5411\u8fed\u4ee3\u5668 iterator rend () //\u8fd4\u56de\u4e00\u4e2a\u6307\u5411map\u5934\u90e8\u7684\u9006\u5411\u8fed\u4ee3\u5668 map < int , string >:: iterator iter ; for ( iter = m1 . begin (); iter != m1 . end (); iter ++ ) //\u904d\u5386 cout << iter -> first << ' ' << iter -> second << endl ; \u5176\u4ed6 int size () // \u83b7\u53d6\u5927\u5c0f iterator find ( T ) // T \u662f value \u7c7b\u578b\uff0c\u6ca1\u627e\u5230\u8fd4\u56de end() swap ( m1 [ key1 ], m1 [ key2 ]) //\u4ea4\u6362 value bool empty () //\u5982\u679cmap\u4e3a\u7a7a\u5219\u8fd4\u56detrue int count () //\u8fd4\u56de\u6307\u5b9a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570 queue \u00b6 \\(include<queue>\\) \u5148\u8fdb\u5148\u51fa\uff08FIFO\uff09\uff0c\u53ea\u80fd\u5c3e\u52a0\u548c\u9996\u5220\uff0c\u53ea\u80fd\u8bbf\u95ee\u961f\u9996\u548c\u961f\u5c3e\u5143\u7d20\uff0c bool empty () //\u961f\u5217\u4e3a\u7a7a\u8fd4\u56de\u771f T front () //\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7d20 T back () //\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20 int size () //\u8fd4\u56de\u5143\u7d20\u4e2a\u6570 push () //\u961f\u5c3e\u52a0\u5165\u5143\u7d20 pop () //\u5220\u9664\u961f\u9996\u5143\u7d20 swap () //\u4ea4\u6362\u5185\u5bb9 \u6e05\u7a7a\u961f\u5217\u7684\u4e09\u79cd\u65b9\u6cd5\uff08\u6ca1\u6709clear\u64cd\u4f5c\uff09 //\u7528\u7a7a\u961f\u5217\u8d4b\u503c q1 = queue < T > (); //\u4e0d\u65ad\u9996\u5220 while ( ! q . empty ()) q . pop (); //\u81ea\u5df1\u5b9a\u4e49clear void clear ( queue < T >& q ){ queue < T > empty ; swap ( empty , q ); } priority_queue \u00b6 \\(include<queue>\\) \u9ed8\u8ba4\u5927\u6839\u5806 priority_queue \u6570\u636e\u7c7b\u578b \u5bb9\u5668 \u6bd4\u8f83\u65b9\u5f0f \u5176\u4e2d Container\u9700\u8981\u7528\u6570\u7ec4\u5b9e\u73b0\u7684\u5bb9\u5668 \u58f0\u660e priority_queue < T > p ; priority_queue < int , vector < int > , greater < int > > p ; //\u5c0f\u6839\u5806 \u5728sort\u91ccgreater\u662f\u4ece\u5927\u5230\u5c0f priority_queue < int , vector < int > , less < int > > p ; //\u5927\u6839\u5806 /*\u81ea\u5b9a\u4e49\u4f18\u5148\u7ea7\u76842\u79cd\u65b9\u5f0f*/ // struct node { \u3000\u3000 int x ; \u3000\u3000 bool operator < ( const node & a ) const { \u3000\u3000\u3000\u3000 return a . x < x ; //\u5c0f\u6839\u5806 \u3000\u3000 } }; priority_queue < node > p ; // struct cmp { \u3000\u3000 bool operator ()( int x , int y ) { \u3000\u3000\u3000\u3000 return \u3000 x > y ; //\u5c0f\u6839\u5806 \u3000\u3000 } }; priority_queue < int , vector < int > , cmp > q ; \u6210\u5458\u51fd\u6570 top () //\u8bbf\u95ee\u961f\u5934\u5143\u7d20 empty () //\u961f\u5217\u662f\u5426\u4e3a\u7a7a size () //\u8fd4\u56de\u961f\u5217\u5185\u5143\u7d20\u4e2a\u6570 push () //\u961f\u5c3e\u52a0\u5165\u5143\u7d20\uff08\u5e76\u6392\u5e8f\uff09 pop () //\u5f39\u51fa\u961f\u9876\u5143\u7d20 swap () //\u4ea4\u6362\u5185\u5bb9 deque \u00b6 \\(include<queue>\\) \u6784\u9020\u51fd\u6570 deque < T > deq ; //\u7a7adeque deque ( n ) //\u5143\u7d20\u4e2a\u6570\u4e3an deque ( n , elem ) //\u5143\u7d20\u4e2a\u6570\u4e3an,\u4e14\u503c\u5747\u4e3aelem deque ( beg , end ) //[beg, end) deque ( const deque & deq ) //\u590d\u5236\u6784\u9020\u51fd\u6570 \u589e\u52a0\u51fd\u6570 void push_front ( elem ) //\u5934\u63d2 void push_back ( elem ) //\u5c3e\u63d2 ? insert ( pos , elem ) //\u67d0\u4e00\u5143\u7d20\u524d\u589e\u52a0\u4e00\u4e2a\u5143\u7d20x void insert ( pos , n , elem ) //\u67d0\u4e00\u5143\u7d20\u524d\u589e\u52a0n\u4e2a\u76f8\u540c\u7684\u5143\u7d20x void insert ( pos , beg , endt ) //\u67d0\u4e00\u5143\u7d20\u524d\u63d2\u5165\u53e6\u4e00\u4e2a\u76f8\u540c\u7c7b\u578b\u5411\u91cf\u7684[forst,last)\u95f4\u7684\u6570\u636e \u5220\u9664\u51fd\u6570 ? erase ( pos ) //\u5220\u9664\u67d0\u4e00\u4e2a\u5143\u7d20,\u8fd4\u56de\u4e0b\u4e00\u4e2a\u5143\u7d20\u4f4d\u7f6e ? erase ( beg , end ) //\u5220\u9664[first,last\uff09\u4e2d\u7684\u5143\u7d20,\u8fd4\u56de\u4e0b\u4e00\u4e2a\u5143\u7d20\u4f4d\u7f6e void pop_front () //\u5934\u5220 void pop_back () //\u5c3e\u5220 void clear () \u904d\u5386\u51fd\u6570 reference at ( pos ) //\u8fd4\u56depos\u4f4d\u7f6e\u5143\u7d20\u7684\u5f15\u7528 reference front () //\u8fd4\u56de\u9996\u5143\u7d20\u7684\u5f15\u7528 reference back () //\u8fd4\u56de\u5c3e\u5143\u7d20\u7684\u5f15\u7528 iterator begin () //\u8fd4\u56de\u5934\u8fed\u4ee3\u5668 iterator end () //\u8fd4\u56de\u5c3e\u8fed\u4ee3\u5668\uff08\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a reverse_iterator rbegin () //\u53cd\u5411\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20 reverse_iterator rend () //\u53cd\u5411\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u524d\u4e00\u4e2a\u5143\u7d20 \u5176\u4ed6\u51fd\u6570 bool empty () //\u5411\u91cf\u662f\u5426\u4e3a\u7a7a int size () //\u8fd4\u56de\u5143\u7d20\u7684\u4e2a\u6570 int max_size () //\u8fd4\u56de\u6700\u5927\u53ef\u5141\u8bb8\u7684\u5143\u7d20\u6570\u91cf void swap ( deque & ) //\u4ea4\u6362\u4e24\u4e2a\u540c\u7c7b\u578bdeque\u7684\u6570\u636e void assign ( beg , end ) //\u5c06[beg, end)\u533a\u95f4\u4e2d\u7684\u6570\u636e\u62f7\u8d1d\u8d4b\u503c\u7ed9\u672c\u8eab\u3002 void assign ( n , elem ) //\u5c06n\u4e2aelem\u62f7\u8d1d\u8d4b\u503c\u7ed9\u672c\u8eab\u3002 algorithm \u00b6 lower_bound() \u00b6 \u4e8c\u5206\u67e5\u627e \u5bf9\u4e8e\u5347\u5e8f\u6570\u7ec4\uff1a lower_bound( begin, end, num)\uff1a\u67e5\u627e\u7b2c\u4e00\u4e2a \u5927\u4e8e\u7b49\u4e8e num \u7684\u6570\u5e76\u8fd4\u56de\u5176\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u8fd4\u56deend\u3002\u8fd4\u56de\u503c\u51cf\u53bbbegine\u5373\u7d22\u5f15\u4e0b\u6807 upper_bound( begin, end, num)\uff1a \u5927\u4e8e \u5bf9\u4e8e\u964d\u5e8f\u6570\u7ec4\uff1a\u9700\u8981\u91cd\u8f7d //\u5347\u5e8f a\u6570\u7ec4\u4e2d k \u7684\u4e2a\u6570 upper_bound ( a , a + n , k ) - lower_bound ( a , a + n , k ); next_permutation \u00b6 //\u6c42\u6309\u7167\u5b57\u5178\u5e8f\u7684\u5168\u6392\u5217 int a [ 4 ] = { 1 , 2 , 3 , 4 }; while ( next_permutation ( a , a + 4 )) { for ( int i = 0 ; i < 4 ; i ++ ) cout << a [ i ] << \" \" ; cout << endl ; } min_element/max_element \u00b6 int maxx = * max_element ( a , a + n );","title":"STL"},{"location":"OI/STL/#stl","text":"","title":"STL"},{"location":"OI/STL/#string","text":"\u5b57\u7b26\u4e32 \u6784\u9020\u51fd\u6570 string s = \"\" s1 = s2 \u589e\u52a0\u5143\u7d20 s += s2 //\u76f4\u63a5\u7528 + \u5373\u53ef s += \"new string\" \u5220\u9664\u5143\u7d20 string & erase ( size_t pos = 0 , size_t n ) //\u5220\u9664\u4ecepos\u5f00\u59cb\u7684n\u4e2a\u5b57\u7b26 iterator erase ( iterator ) //\u5220\u9664\u4e00\u4e2a iterator erase ( iterator first , iterator last ) //\u5220\u9664\u8303\u56f4 iterator erase ( remove ( str . begin (), str . end (), 'a' ), str . end ()) //\u5220\u9664\u7279\u5b9a\u5b57\u7b26 \u8fed\u4ee3\u5668 iterator begin (); //\u5934\u8fed\u4ee3\u5668 iterator end (); //\u5c3e\u8fed\u4ee3\u5668 \u5176\u4ed6 sort ( string , iterator l , iterator r ) //\u6392\u5e8f [l, r) string substr ( int pos , int n ) //\u83b7\u53d6\u8fde\u7eed\u5b50\u4e32\uff0c\u4ece pos \u5f00\u59cb\u7684 n \u4e2a\u5b57\u7b26\uff0c-1\u8868\u793a\u5230\u6700\u540e bool empty () //\u5224\u65ad\u662f\u5426\u4e3a\u7a7a int size () //\u5b57\u7b26\u4e2a\u6570 bool isalnum ( char ) //\u5982\u679cc\u662f\u5b57\u6bcd\u6216\u6570\u5b57\uff0c\u8fd4\u56de true bool isalpha ( char ) //\u5982\u679cc\u662f\u5b57\u6bcd\uff0c\u8fd4\u56detrue bool iscntrl ( char ) //\u5982\u679cc\u662f\u63a7\u5236\u7b26\uff0c\u8fd4\u56detrue bool isdigit ( char ) //\u5982\u679cc\u662f\u6570\u5b57\uff0c\u8fd4\u56detrue bool isgraph ( char ) //\u5982\u679cc\u4e0d\u662f\u7a7a\u683c\uff0c\u8fd4\u56de\u4e3atrue bool islower ( char ) //\u5982\u679cc\u662f\u5c0f\u5199\u5b57\u6bcd\uff0c\u8fd4\u56de\u4e3atrue bool isupper ( char ) //\u5982\u679cc\u662f\u5927\u5199\u5b57\u7b26\uff0c\u8fd4\u56de\u4e3atrue bool isprint ( char ) //\u5982\u679cc\u662f\u53ef\u6253\u5370\u7684\u5b57\u7b26\uff0c\u8fd4\u56de\u4e3atrue bool ispunct ( char ) //\u5982\u679cc\u662f\u6807\u70b9\u7b26\u53f7\uff0c\u8fd4\u56de\u4e3atrue bool isspace ( char ) //\u5982\u679cc\u662f\u7a7a\u767d\u5b57\u7b26\uff0c\u8fd4\u56de\u4e3atrue bool isxdigit ( char ) //\u5982\u679cc\u662f\u5341\u516d\u8fdb\u5236\u6570\uff0c\u8fd4\u56de\u4e3atrue","title":"string"},{"location":"OI/STL/#vector","text":"\\(include<vector>\\) \u6784\u9020\u51fd\u6570 vector () //\u521b\u5efa\u4e00\u4e2a\u7a7avector vector ( int nSize ) //\u521b\u5efa\u4e00\u4e2avector,\u5143\u7d20\u4e2a\u6570\u4e3anSize vector ( int nSize , const T & t ) //\u521b\u5efa\u4e00\u4e2avector\uff0c\u5143\u7d20\u4e2a\u6570\u4e3anSize,\u4e14\u503c\u5747\u4e3at vector ( const vector & ) //\u590d\u5236\u6784\u9020\u51fd\u6570 vector ( begin , end ) //\u590d\u5236[begin,end)\u533a\u95f4\u5185\u53e6\u4e00\u4e2a\u6570\u7ec4\u7684\u5143\u7d20\u5230vector\u4e2d \u589e\u52a0\u5143\u7d20 void push_back ( const T & x ) //\u5411\u91cf\u5c3e\u90e8\u589e\u52a0\u4e00\u4e2a\u5143\u7d20X iterator insert ( iterator it , const T & x ) //\u8fed\u4ee3\u5668\u6307\u5411\u5143\u7d20\u524d\u589e\u52a0\u4e00\u4e2a\u5143\u7d20x iterator insert ( iterator it , int n , const T & x ) //\u8fed\u4ee3\u5668\u6307\u5411\u5143\u7d20\u524d\u589e\u52a0n\u4e2a\u76f8\u540c\u7684\u5143\u7d20x iterator insert ( iterator it , iterator first , iterator last ) //\u8fed\u4ee3\u5668\u6307\u5411\u5143\u7d20\u524d\u63d2\u5165\u53e6\u4e00\u4e2a\u5411\u91cf\u7684[first,last)\u7684\u6570\u636e \u5220\u9664\u5143\u7d20 iterator erase ( iterator it ) //\u5220\u9664\u8fed\u4ee3\u5668\u6307\u5411\u5143\u7d20 iterator erase ( iterator first , iterator last ) //\u5220\u9664[first,last)\u4e2d\u5143\u7d20 void pop_back () //\u5220\u9664\u5411\u91cf\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20 void clear () //\u6e05\u7a7a\u5411\u91cf\u4e2d\u6240\u6709\u5143\u7d20 \u8fed\u4ee3\u5668 reference at ( int pos ) //\u8fd4\u56depos\u4f4d\u7f6e\u5143\u7d20\u7684\u5f15\u7528 reference front () //\u8fd4\u56de\u9996\u5143\u7d20\u7684\u5f15\u7528 reference back () //\u8fd4\u56de\u5c3e\u5143\u7d20\u7684\u5f15\u7528 iterator begin () //\u8fd4\u56de\u5411\u91cf\u5934\u6307\u9488\uff0c\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20 iterator end () //\u8fd4\u56de\u5411\u91cf\u5c3e\u6307\u9488\uff0c\u6307\u5411\u5411\u91cf\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e reverse_iterator rbegin () //\u53cd\u5411\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20 reverse_iterator rend () //\u53cd\u5411\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e4b\u524d\u7684\u4f4d\u7f6e \u5176\u4ed6 int size () const //\u8fd4\u56de\u5411\u91cf\u4e2d\u5143\u7d20\u7684\u4e2a\u6570 int capacity () const //\u8fd4\u56de\u5f53\u524d\u5411\u91cf\u6240\u80fd\u5bb9\u7eb3\u7684\u6700\u5927\u5143\u7d20\u503c int max_size () const //\u8fd4\u56de\u6700\u5927\u53ef\u5141\u8bb8\u7684vector\u5143\u7d20\u6570\u91cf\u503c bool empty () const //\u5224\u65ad\u5411\u91cf\u662f\u5426\u4e3a\u7a7a\uff0c\u82e5\u4e3a\u7a7a\uff0c\u5219\u5411\u91cf\u4e2d\u65e0\u5143\u7d20 void swap ( vector & ) //\u4ea4\u6362\u4e24\u4e2a\u540c\u7c7b\u578b\u5411\u91cf\u7684\u6570\u636e void assign ( int n , const T & x ) //\u8bbe\u7f6e\u5411\u91cf\u4e2d\u524dn\u4e2a\u5143\u7d20\u7684\u503c\u4e3ax void assign ( const_iterator first , const_iterator last ) //\u5411\u91cf\u4e2d[first,last)\u4e2d\u5143\u7d20\u8bbe\u7f6e\u6210\u5f53\u524d\u5411\u91cf\u5143\u7d20","title":"vector"},{"location":"OI/STL/#stack","text":"\\(include<stack>\\) \u6784\u9020\u51fd\u6570 list < int > c0 //\u7a7a\u94fe\u8868 list < int > c1 ( 3 ) //\u5efa\u4e00\u4e2a\u542b3\u4e2a\u9ed8\u8ba4\u503c\u662f0\u7684\u5143\u7d20\u7684\u94fe\u8868 list < int > c2 ( 5 , 2 ) //\u5efa\u4e00\u4e2a\u542b5\u4e2a\u5143\u7d20\u7684\u94fe\u8868\uff0c\u503c\u90fd\u662f2 list < int > c4 ( c2 ) //\u590d\u5236 list < int > c5 ( iterator beg , iterator end ) //\u533a\u95f4[beg, end)\u505a\u4e3a\u5143\u7d20\u521d\u503c push ( const T & x ) //\u5165\u6808 T pop () //\u51fa\u6808 T top () //\u83b7\u53d6\u6808\u9876 bool empty () //\u5224\u65ad\u7a7a\u6808 int size () //\u8fd4\u56de\u6808\u5143\u7d20\u4e2a\u6570","title":"stack"},{"location":"OI/STL/#list","text":"\\(include <list>\\) \u6784\u9020\u51fd\u6570 c1 = c2 //\u590d\u5236 assign ( n , elem ) //\u8d4b\u503cn\u4e2aelem assign ( beg , end ) //\u533a\u95f4[beg,end\uff09\u5185\u7684\u5143\u7d20\u8d4b\u503c\u7ed9c swap ( c1 , c2 ) //\u4ea4\u6362 \u589e\u52a0\u5143\u7d20 push_front () //\u9996\u52a0 push_back () //\u5c3e\u52a0 insert ( pos , num ) //\u5728pos\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20num\uff0c\u8fd4\u56de\u65b0\u5143\u7d20\u4f4d\u7f6e insert ( pos , n , elem ) //\u5728pos\u4f4d\u7f6e\u4e0a\u63d2\u5165n\u4e2aelem\u526f\u672c\uff0c\u65e0\u8fd4\u56de\u503c insert ( pos , beg , end ) //\u5728pos\u4f4d\u7f6e\u4e0a\u63d2\u5165\u533a\u95f4[beg,end)\u5185\u7684\u6240\u6709\u5143\u7d20\u7684\u526f\u672c\uff0c\u6ca1\u6709\u8fd4\u56de\u503c \u5220\u9664\u5143\u7d20 pop_front () //\u9996\u5220 pop_back () //\u5c3e\u5220 erase ( pos ) \u3000\u3000\u3000\u3000 //\u5220\u9664pos\u4f4d\u7f6e\u7684\u5143\u7d20\uff0c\u8fd4\u56de\u4e0b\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e erase ( beg , end ) //\u79fb\u9664[beg, end)\u533a\u95f4\u5185\u7684\u6240\u6709\u5143\u7d20\uff0c\u8fd4\u56de\u4e0b\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e remove ( num ) //\u5220\u9664\u94fe\u8868\u4e2d\u5339\u914dnum\u7684\u5143\u7d20 remove_if ( cmp ) //\u5220\u9664\u6761\u4ef6\u6ee1\u8db3\u7684\u5143\u7d20,\u53c2\u6570\u4e3a\u81ea\u5b9a\u4e49\u7684\u56de\u8c03\u51fd\u6570 clear () //\u6e05\u7a7a \u8fed\u4ee3\u5668 list < T >:: iterator it c . begin () c . end () c . rbegin () //\u9006\u5411\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20,\u5373c\u94fe\u8868\u7684\u6700\u540e\u4e00\u4e2a\u6570\u636e\u3002 c . rend () //\u8fd4\u56de\u9006\u5411\u94fe\u8868\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e,\u5373c\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u6570\u636e\u518d\u5f80\u524d\u7684\u4f4d\u7f6e\u3002it++ \u5176\u4ed6 T front () //\u9996\u5143\u7d20 T back () //\u5c3e\u5143 bool empty () //\u5224\u65ad\u662f\u5426\u4e3a\u7a7a int size () //\u6709\u6548\u5143\u7d20\u4e2a\u6570 int max_size () //\u8fd4\u56de\u5bb9\u5668\u6700\u5927\u7684\u53ef\u4ee5\u5b58\u50a8\u7684\u5143\u7d20 bool c1 == c2 //\u6bd4\u8f83 sort () //\u5355\u94fe\u8868\u6392\u5e8f unique () //\u53bb\u91cd\uff0c\u8981\u5148\u6392\u5e8f c1 . merge ( c2 ) //\u5408\u5e762\u4e2a\u6709\u5e8f\u7684\u94fe\u8868\u5e76\u4f7f\u4e4b\u6709\u5e8f,\u4ece\u65b0\u653e\u5230c1\u91cc,\u91ca\u653ec2 c1 . merge ( c2 , cmp ) //\u5408\u5e762\u4e2a\u6709\u5e8f\u7684\u94fe\u8868\u5e76\u4f7f\u4e4b\u6309\u7167\u81ea\u5b9a\u4e49\u89c4\u5219\u6392\u5e8f\u4e4b\u540e\u4ece\u65b0\u653e\u5230c1\u4e2d,\u91ca\u653ec2 reverse () //\u53cd\u8f6c resize ( int ) //\u91cd\u7f6e\u6709\u6548\u5143\u7d20\u4e2a\u6570","title":"list"},{"location":"OI/STL/#set","text":"\\(include<set>\\) \u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4e0d\u4f1a\u5b58\u50a8\u91cd\u590d\u7684\u5143\u7d20 \u6784\u9020\u51fd\u6570 swap ( set , set ) // \u4ea4\u6362\u4e24\u4e2a\u96c6\u5408\u53d8\u91cf s1 = s2 \u589e\u52a0\u5143\u7d20 insert ( T ) // \u5728\u96c6\u5408\u4e2d\u63d2\u5165\u5143\u7d20 \u5220\u9664\u5143\u7d20 clear () // \u6e05\u9664\u6240\u6709\u5143\u7d20 erase ( T ) // \u5220\u9664\u96c6\u5408\u4e2d\u7684\u5143\u7d20 \u8fed\u4ee3\u5668 set < T >:: iterator it begin () // \u8fd4\u56de\u6307\u5411\u9996\u5143\u7d20\u7684\u8fed\u4ee3\u5668 end () // \u8fd4\u56de\u6307\u5411\u5c3e\u5143\u7d20\u7684\u540e\u4e00\u4f4d\u7684\u8fed\u4ee3\u5668 rbegin () // \u53cd\u5411\u8fed\u4ee3\u5668 rend () // \u5176\u4ed6 int count ( T ) // \u8fd4\u56de\u67d0\u4e2a\u5143\u7d20\u7684\u4e2a\u6570,0\u62161\uff0c\u53ea\u80fd\u5224\u65ad\u662f\u5426\u5b58\u5728 bool empty () // \u5224\u65ad\u96c6\u5408\u4e3a\u7a7a int size () // \u96c6\u5408\u4e2d\u5143\u7d20\u7684\u6570\u76ee max_size () // \u8fd4\u56de\u96c6\u5408\u80fd\u5bb9\u7eb3\u7684\u5143\u7d20\u7684\u6700\u5927\u9650\u503c iterator find ( T ) // \u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u88ab\u67e5\u627e\u5230\u5143\u7d20\u7684\u8fed\u4ee3\u5668,\u65e0\u5219\u8fd4\u56deend() iterator lower_bound ( T ) // \u8fd4\u56de\u6307\u5411\u5927\u4e8e\u6216\u7b49\u4e8e\u67d0\u503c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 iterator upper_bound ( T ) // \u8fd4\u56de\u5927\u4e8e\u67d0\u4e2a\u503c\u5143\u7d20\u7684\u8fed\u4ee3\u5668","title":"set"},{"location":"OI/STL/#pair","text":"\\(include<utility>\\) \u4e24\u4efb\u610f\u7c7b\u578b\u5143\u7d20\u7684\u7ed3\u6784\u4f53 pair < int , double > p1 ; //\u9ed8\u8ba4\u6784\u9020\u51fd\u6570 pair < int , double > p1 ( 1 , 1.1 ); //\u542b\u53c2\u6784\u9020\u51fd\u6570 pair < int , double > p1 ( p2 ); //\u62f7\u8d1d\u6784\u9020\u51fd\u6570 p1 = p2 p1 . first //\u83b7\u53d6 \u7b2c\u4e00\u4e2a\u5143\u7d20 p1 . second //\u83b7\u53d6 \u7b2c\u4e8c\u4e2a\u5143\u7d20 p1 < p2 //\u53ef\u4ee5\u76f4\u63a5\u6bd4\u8f83,\u5148\u6bd4\u8f83first\uff0c\u518d\u6bd4\u8f83second","title":"pair"},{"location":"OI/STL/#map","text":"\\(include<map>\\) \u5efa\u7acbKey\uff0dvalue\u7684\u5bf9\u5e94\uff0ckey \u548c value \u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\u3002 \u6784\u9020\u51fd\u6570 map < int , string > m1 ; //\u7d22\u5f15\u4e3a int\u578b map < string , int > m2 ; //\u7d22\u5f15\u4e3a string \u589e\u52a0\u5143\u7d20 insert ( pair < int , string > ( 1 , \"string1\" )) //\u8fd9\u91cc\u7684\u5143\u7d20\u53ef\u4ee5\u662f\u5143\u7d20\u7c7b\u578b\u4e0e\u58f0\u660e\u5339\u914d\u76842\u5143\u7d20\u7ed3\u6784\u4f53\u6216\u8005pair\uff0cinsert\u4e0d\u80fd\u8986\u76d6\u539f\u503c map < int , string > m1 //\u6570\u7ec4\u53ef\u4ee5\u8986\u76d6\u539f\u503c m1 [ 1 ] = \"string1\" //\u5982\u679c\u6ca1\u6709\u5bf9\u5e94 key \u503c\u4f1a\u81ea\u52a8\u6dfb\u52a0 m1 [ 2 ] = \"string2\" map < string , int > m2 m2 [ \"string1\" ] = 1 m2 [ \"string2\" ] = 2 \u5220\u9664\u5143\u7d20 erase ( iter ) erase ( iterator first , iterator second ) //\u5220\u9664\u8303\u56f4 clear ( \uff09 //\u5220\u9664\u6240\u6709\u5143\u7d20 \u8fed\u4ee3\u5668 iterator begin () iterator end () iterator rbegin () //\u8fd4\u56de\u4e00\u4e2a\u6307\u5411map\u5c3e\u90e8\u7684\u9006\u5411\u8fed\u4ee3\u5668 iterator rend () //\u8fd4\u56de\u4e00\u4e2a\u6307\u5411map\u5934\u90e8\u7684\u9006\u5411\u8fed\u4ee3\u5668 map < int , string >:: iterator iter ; for ( iter = m1 . begin (); iter != m1 . end (); iter ++ ) //\u904d\u5386 cout << iter -> first << ' ' << iter -> second << endl ; \u5176\u4ed6 int size () // \u83b7\u53d6\u5927\u5c0f iterator find ( T ) // T \u662f value \u7c7b\u578b\uff0c\u6ca1\u627e\u5230\u8fd4\u56de end() swap ( m1 [ key1 ], m1 [ key2 ]) //\u4ea4\u6362 value bool empty () //\u5982\u679cmap\u4e3a\u7a7a\u5219\u8fd4\u56detrue int count () //\u8fd4\u56de\u6307\u5b9a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570","title":"map"},{"location":"OI/STL/#queue","text":"\\(include<queue>\\) \u5148\u8fdb\u5148\u51fa\uff08FIFO\uff09\uff0c\u53ea\u80fd\u5c3e\u52a0\u548c\u9996\u5220\uff0c\u53ea\u80fd\u8bbf\u95ee\u961f\u9996\u548c\u961f\u5c3e\u5143\u7d20\uff0c bool empty () //\u961f\u5217\u4e3a\u7a7a\u8fd4\u56de\u771f T front () //\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7d20 T back () //\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20 int size () //\u8fd4\u56de\u5143\u7d20\u4e2a\u6570 push () //\u961f\u5c3e\u52a0\u5165\u5143\u7d20 pop () //\u5220\u9664\u961f\u9996\u5143\u7d20 swap () //\u4ea4\u6362\u5185\u5bb9 \u6e05\u7a7a\u961f\u5217\u7684\u4e09\u79cd\u65b9\u6cd5\uff08\u6ca1\u6709clear\u64cd\u4f5c\uff09 //\u7528\u7a7a\u961f\u5217\u8d4b\u503c q1 = queue < T > (); //\u4e0d\u65ad\u9996\u5220 while ( ! q . empty ()) q . pop (); //\u81ea\u5df1\u5b9a\u4e49clear void clear ( queue < T >& q ){ queue < T > empty ; swap ( empty , q ); }","title":"queue"},{"location":"OI/STL/#priority_queue","text":"\\(include<queue>\\) \u9ed8\u8ba4\u5927\u6839\u5806 priority_queue \u6570\u636e\u7c7b\u578b \u5bb9\u5668 \u6bd4\u8f83\u65b9\u5f0f \u5176\u4e2d Container\u9700\u8981\u7528\u6570\u7ec4\u5b9e\u73b0\u7684\u5bb9\u5668 \u58f0\u660e priority_queue < T > p ; priority_queue < int , vector < int > , greater < int > > p ; //\u5c0f\u6839\u5806 \u5728sort\u91ccgreater\u662f\u4ece\u5927\u5230\u5c0f priority_queue < int , vector < int > , less < int > > p ; //\u5927\u6839\u5806 /*\u81ea\u5b9a\u4e49\u4f18\u5148\u7ea7\u76842\u79cd\u65b9\u5f0f*/ // struct node { \u3000\u3000 int x ; \u3000\u3000 bool operator < ( const node & a ) const { \u3000\u3000\u3000\u3000 return a . x < x ; //\u5c0f\u6839\u5806 \u3000\u3000 } }; priority_queue < node > p ; // struct cmp { \u3000\u3000 bool operator ()( int x , int y ) { \u3000\u3000\u3000\u3000 return \u3000 x > y ; //\u5c0f\u6839\u5806 \u3000\u3000 } }; priority_queue < int , vector < int > , cmp > q ; \u6210\u5458\u51fd\u6570 top () //\u8bbf\u95ee\u961f\u5934\u5143\u7d20 empty () //\u961f\u5217\u662f\u5426\u4e3a\u7a7a size () //\u8fd4\u56de\u961f\u5217\u5185\u5143\u7d20\u4e2a\u6570 push () //\u961f\u5c3e\u52a0\u5165\u5143\u7d20\uff08\u5e76\u6392\u5e8f\uff09 pop () //\u5f39\u51fa\u961f\u9876\u5143\u7d20 swap () //\u4ea4\u6362\u5185\u5bb9","title":"priority_queue"},{"location":"OI/STL/#deque","text":"\\(include<queue>\\) \u6784\u9020\u51fd\u6570 deque < T > deq ; //\u7a7adeque deque ( n ) //\u5143\u7d20\u4e2a\u6570\u4e3an deque ( n , elem ) //\u5143\u7d20\u4e2a\u6570\u4e3an,\u4e14\u503c\u5747\u4e3aelem deque ( beg , end ) //[beg, end) deque ( const deque & deq ) //\u590d\u5236\u6784\u9020\u51fd\u6570 \u589e\u52a0\u51fd\u6570 void push_front ( elem ) //\u5934\u63d2 void push_back ( elem ) //\u5c3e\u63d2 ? insert ( pos , elem ) //\u67d0\u4e00\u5143\u7d20\u524d\u589e\u52a0\u4e00\u4e2a\u5143\u7d20x void insert ( pos , n , elem ) //\u67d0\u4e00\u5143\u7d20\u524d\u589e\u52a0n\u4e2a\u76f8\u540c\u7684\u5143\u7d20x void insert ( pos , beg , endt ) //\u67d0\u4e00\u5143\u7d20\u524d\u63d2\u5165\u53e6\u4e00\u4e2a\u76f8\u540c\u7c7b\u578b\u5411\u91cf\u7684[forst,last)\u95f4\u7684\u6570\u636e \u5220\u9664\u51fd\u6570 ? erase ( pos ) //\u5220\u9664\u67d0\u4e00\u4e2a\u5143\u7d20,\u8fd4\u56de\u4e0b\u4e00\u4e2a\u5143\u7d20\u4f4d\u7f6e ? erase ( beg , end ) //\u5220\u9664[first,last\uff09\u4e2d\u7684\u5143\u7d20,\u8fd4\u56de\u4e0b\u4e00\u4e2a\u5143\u7d20\u4f4d\u7f6e void pop_front () //\u5934\u5220 void pop_back () //\u5c3e\u5220 void clear () \u904d\u5386\u51fd\u6570 reference at ( pos ) //\u8fd4\u56depos\u4f4d\u7f6e\u5143\u7d20\u7684\u5f15\u7528 reference front () //\u8fd4\u56de\u9996\u5143\u7d20\u7684\u5f15\u7528 reference back () //\u8fd4\u56de\u5c3e\u5143\u7d20\u7684\u5f15\u7528 iterator begin () //\u8fd4\u56de\u5934\u8fed\u4ee3\u5668 iterator end () //\u8fd4\u56de\u5c3e\u8fed\u4ee3\u5668\uff08\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a reverse_iterator rbegin () //\u53cd\u5411\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20 reverse_iterator rend () //\u53cd\u5411\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u524d\u4e00\u4e2a\u5143\u7d20 \u5176\u4ed6\u51fd\u6570 bool empty () //\u5411\u91cf\u662f\u5426\u4e3a\u7a7a int size () //\u8fd4\u56de\u5143\u7d20\u7684\u4e2a\u6570 int max_size () //\u8fd4\u56de\u6700\u5927\u53ef\u5141\u8bb8\u7684\u5143\u7d20\u6570\u91cf void swap ( deque & ) //\u4ea4\u6362\u4e24\u4e2a\u540c\u7c7b\u578bdeque\u7684\u6570\u636e void assign ( beg , end ) //\u5c06[beg, end)\u533a\u95f4\u4e2d\u7684\u6570\u636e\u62f7\u8d1d\u8d4b\u503c\u7ed9\u672c\u8eab\u3002 void assign ( n , elem ) //\u5c06n\u4e2aelem\u62f7\u8d1d\u8d4b\u503c\u7ed9\u672c\u8eab\u3002","title":"deque"},{"location":"OI/STL/#algorithm","text":"","title":"algorithm"},{"location":"OI/STL/#lower_bound","text":"\u4e8c\u5206\u67e5\u627e \u5bf9\u4e8e\u5347\u5e8f\u6570\u7ec4\uff1a lower_bound( begin, end, num)\uff1a\u67e5\u627e\u7b2c\u4e00\u4e2a \u5927\u4e8e\u7b49\u4e8e num \u7684\u6570\u5e76\u8fd4\u56de\u5176\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u8fd4\u56deend\u3002\u8fd4\u56de\u503c\u51cf\u53bbbegine\u5373\u7d22\u5f15\u4e0b\u6807 upper_bound( begin, end, num)\uff1a \u5927\u4e8e \u5bf9\u4e8e\u964d\u5e8f\u6570\u7ec4\uff1a\u9700\u8981\u91cd\u8f7d //\u5347\u5e8f a\u6570\u7ec4\u4e2d k \u7684\u4e2a\u6570 upper_bound ( a , a + n , k ) - lower_bound ( a , a + n , k );","title":"lower_bound()"},{"location":"OI/STL/#next_permutation","text":"//\u6c42\u6309\u7167\u5b57\u5178\u5e8f\u7684\u5168\u6392\u5217 int a [ 4 ] = { 1 , 2 , 3 , 4 }; while ( next_permutation ( a , a + 4 )) { for ( int i = 0 ; i < 4 ; i ++ ) cout << a [ i ] << \" \" ; cout << endl ; }","title":"next_permutation"},{"location":"OI/STL/#min_elementmax_element","text":"int maxx = * max_element ( a , a + n );","title":"min_element/max_element"},{"location":"OI/%E5%85%B6%E4%BB%96/","text":"\u5176\u4ed6 \u00b6 \u535a\u5f08\u8bba \u00b6 NIM \u00b6 \u5fc5\u80dc\u6001\uff1a \\(a_1XORa_2XOR\\dots XORa_n \\neq 0\\) \u200b \u5fc5\u8d25\u6001\uff1a \\(a_1XORa_2XOR\\dots XORa_n = 0\\) \u200b \u5176\u4ed6\uff1a Staircase Nim\uff1aPOJ 1704 Grundy\u503c \u00b6 void grundy () { grundy [ 0 ] = 0 ; //\u5fc5\u8d25\uff0c\u5176\u5b9e\u4e5f\u53ef\u4ee5\u4e0d\u5199\u8ba9j\u4ece0\u5f00\u59cb int maxa = * max_element ( a , a + n ); for ( int j = 1 ; j <= maxa ; j ++ ){ set < int > s ; for ( int i = 0 ; i < k ; i ++ ) if ( a [ i ] <= j ) s . insert ( grundy ( j - a [ i ])); int g = 0 ; while ( s . count ( g ) != 0 ) g ++ ; grundy [ j ] = g ; } } \u79bb\u6563\u5316 \u00b6 //\u767d\u4e66P164\uff0c\u4e8c\u7ef4\u5750\u6807\u79bb\u6563\u5316 typedef long long ll ; const int maxn = 600 ; int x1 [ maxn ], x2 [ maxn ], y1 [ maxn ], y2 [ maxn ]; int n ; int compress ( int * x1 , int * x2 , int w ) { vector < int > vec ; for ( int i = 0 ; i < n ; i ++ ) { for ( int d = -1 ; d <= 1 ; d ++ ) { int tx1 = x1 [ i ] + d , tx2 = x2 [ i ] + d ; if ( tx1 >= 1 && tx1 <= w ) vec . push_back ( tx1 ); if ( tx2 >= 1 && tx2 <= w ) vec . push_back ( tx2 ); } } sort ( vec . begin (), vec . end ()); vec . erase ( unique ( vec . begin (), vec . end ()), vec . end ()); for ( int i = 0 ; i < n ; i ++ ) { x1 [ i ] = find ( vec . begin (), vec . end (), x1 [ i ]) - vec . begin (); x2 [ i ] = find ( vec . begin (), vec . end (), x2 [ i ]) - vec . begin (); } return vec . size (); }","title":"\u5176\u4ed6"},{"location":"OI/%E5%85%B6%E4%BB%96/#_1","text":"","title":"\u5176\u4ed6"},{"location":"OI/%E5%85%B6%E4%BB%96/#_2","text":"","title":"\u535a\u5f08\u8bba"},{"location":"OI/%E5%85%B6%E4%BB%96/#nim","text":"\u5fc5\u80dc\u6001\uff1a \\(a_1XORa_2XOR\\dots XORa_n \\neq 0\\) \u200b \u5fc5\u8d25\u6001\uff1a \\(a_1XORa_2XOR\\dots XORa_n = 0\\) \u200b \u5176\u4ed6\uff1a Staircase Nim\uff1aPOJ 1704","title":"NIM"},{"location":"OI/%E5%85%B6%E4%BB%96/#grundy","text":"void grundy () { grundy [ 0 ] = 0 ; //\u5fc5\u8d25\uff0c\u5176\u5b9e\u4e5f\u53ef\u4ee5\u4e0d\u5199\u8ba9j\u4ece0\u5f00\u59cb int maxa = * max_element ( a , a + n ); for ( int j = 1 ; j <= maxa ; j ++ ){ set < int > s ; for ( int i = 0 ; i < k ; i ++ ) if ( a [ i ] <= j ) s . insert ( grundy ( j - a [ i ])); int g = 0 ; while ( s . count ( g ) != 0 ) g ++ ; grundy [ j ] = g ; } }","title":"Grundy\u503c"},{"location":"OI/%E5%85%B6%E4%BB%96/#_3","text":"//\u767d\u4e66P164\uff0c\u4e8c\u7ef4\u5750\u6807\u79bb\u6563\u5316 typedef long long ll ; const int maxn = 600 ; int x1 [ maxn ], x2 [ maxn ], y1 [ maxn ], y2 [ maxn ]; int n ; int compress ( int * x1 , int * x2 , int w ) { vector < int > vec ; for ( int i = 0 ; i < n ; i ++ ) { for ( int d = -1 ; d <= 1 ; d ++ ) { int tx1 = x1 [ i ] + d , tx2 = x2 [ i ] + d ; if ( tx1 >= 1 && tx1 <= w ) vec . push_back ( tx1 ); if ( tx2 >= 1 && tx2 <= w ) vec . push_back ( tx2 ); } } sort ( vec . begin (), vec . end ()); vec . erase ( unique ( vec . begin (), vec . end ()), vec . end ()); for ( int i = 0 ; i < n ; i ++ ) { x1 [ i ] = find ( vec . begin (), vec . end (), x1 [ i ]) - vec . begin (); x2 [ i ] = find ( vec . begin (), vec . end (), x2 [ i ]) - vec . begin (); } return vec . size (); }","title":"\u79bb\u6563\u5316"},{"location":"OI/%E5%8F%82%E8%80%83/","text":"\u53c2\u8003\uff1a OI Wiki (oi-wiki.org) \u6b64\u6587\u6863\u4ec5\u4f5c\u4e3a\u5b66\u4e60\u8bb0\u5f55","title":"\u53c2\u8003"},{"location":"OI/%E5%9B%BE%E8%AE%BA/","text":"\u56fe\u8bba \u00b6 \u56fe\u7684\u5b58\u50a8 \u00b6 \u90bb\u63a5\u77e9\u9635 \u00b6 \\(G[i][j]=1\\) \u8868\u793a\u6709\u4e00\u6761\u8fb9\u4ece \\(i\\) \u5230 \\(j\\) \u90bb\u63a5\u8868 \u00b6 vector < int > es [ MAXN ]; /* \u5e26\u6743\u8fb9 struct edge{ int to, w; }; vector<edge> es[MAXN]; */ \u94fe\u5f0f\u524d\u5411\u661f \u00b6 struct edge { int to , w , next ; } es [ MAX_E ]; int cnt = 0 ; void init () { memset ( head , -1 , sizeof head ); } void add_edge ( int u , int v , int w ) { //\u52a0\u8fb9 es [ cnt ]. to = v ; es [ cnt ]. w = w ; es [ cnt ]. next = head [ u ]; head [ u ] = cnt ++ ; } /*\u904d\u5386 for(int i = 1; i <= n; i++) for(int j = head[i]; i != -1; j = es[j].next) */ \u6700\u77ed\u8def \u00b6 Bellman-Ford \u00b6 \u5355\u6e90\u6700\u77ed\u8def\u95ee\u9898 \\(O(VE)\\) \u652f\u6301\u8d1f\u6743 struct edge { int from , to , w ; }; edge es [ MAX_E ]; int d [ MAX_V ]; int V , E ; void BF ( int s ){ memset ( d , INF , sizeof d ); d [ s ] = 0 ; for ( int k = 0 ; k < V ; k ++ ){ for ( int i = 0 ; i < E ; i ++ ){ edge e = es [ i ]; if ( d [ e . from ] != INF && d [ e . to ] > d [ e . from ] + e . w ){ d [ e . to ] = d [ e . from ] + w ; //\u677e\u5f1b\u64cd\u4f5c } } } } //\u5faa\u73af\u81f3\u591a\u6267\u884c V-1 \u6b21\uff0c\u4e00\u6b21\u677e\u5f1b\u64cd\u4f5c\u81f3\u5c11\u8ba9\u786e\u5b9a\u7684\u6700\u77ed\u8def+1\uff0c\u6240\u4ee5O(VE)\uff0c\u5982\u679c\u7b2c n \u6b21\u4efb\u7136\u66f4\u65b0\u4e86d\uff0c\u8868\u793a\u6709\u8d1f\u73af //\u628a\u6240\u6709d[i]\u521d\u59cb\u5316\u4e3a0\uff0c\u5c31\u53ef\u4ee5\u627e\u5230\u6240\u6709\u7684\u8d1f\u5708 bool find_negative_loop (){ memset ( d , 0 , sizeof d ); for ( int i = 0 ; i < V ; i ++ ){ for ( int j = 0 ; j < E ; j ++ ){ edge e = es [ j ]; if ( d [ e . to ] > d [ e . from ] + e . w ){ d [ e . to ] = d [ e . from ] + e . w ; if ( i == V -1 ) return true ; } } } return false ; } Dijkstra \u00b6 \u5355\u6e90\u6700\u77ed\u8def\u95ee\u9898 \u4e0d\u652f\u6301\u8d1f\u6743\u8fb9 \u68c0\u67e5\u5b58\u5728 \\(d[i][i]\\) \u4e3a\u8d1f\u6570\u6765\u5224\u65ad\u662f\u5426\u6709\u8d1f\u73af \\(O(ElogV)\\) \u7528\u4f18\u5148\u961f\u5217 typedef pair < int , int > P ; vector < P > es [ MAX_V ]; //\u90bb\u63a5\u8868\u4e2dfirst\u8868\u793a\u7aef\u70b9\uff0csecond\u8868\u793a\u6743\u503c int d [ MAX_V ]; void dijkstra ( int s ) { priority_queue < P , vector < P > , greater < P > > que ; //\u961f\u5217\u4e2dfirst\u8868\u793a\u6700\u77ed\u8def\uff0c second\u8868\u793a\u7aef\u70b9 memset ( d , INF , sizeof d ); d [ s ] = 0 ; que . push ( P ( 0 , s )); while ( ! que . empty ()) { P p = que . top (); que . pop (); int u = p . second ; if ( d [ u ] < p . first ) continue ; for ( int i = 0 ; i < es [ u ]. size (); i ++ ) { int v = es [ u ][ i ]. first , w = es [ u ][ i ]. second ; if ( d [ v ] > d [ u ] + w ) { //\u677e\u5f1b\u64cd\u4f5c d [ v ] = d [ u ] + w ; que . push ( P ( d [ v ], v )); } } } } Floyd-Warshall \u00b6 \\(O(V^3)\\) dp:\u72b6\u6001\u8f6c\u79fb\u65b9\u65b9\u7a0b \\(d[k][i][j]=min(d[k-1][i][j],d[k-1][i][k]+d[k-1][k][i])\\) , \u5373 \\(d[i][j] = min(d[i][j], d[i][k]+d[k][j])\\) int d [ MAX_V [ MAX_V ]; void floyd () { for ( int k = 0 ; k < V ; k ++ ) for ( int i = 0 ; i < V ; i ++ ) for ( int j = 0 ; j < V ; j ++ ) d [ i ][ j ] = min ( d [ i ][ j ], d [ i ][ k ] + d [ k ][ j ]); } \u8def\u5f84\u8fd8\u539f \u00b6 \u5728\u677e\u5f1b\u64cd\u4f5c\u65f6\u8bb0\u5f55\u6bcf\u4e2a\u7ed3\u70b9\u7684\u524d\u8d8b\u7ed3\u70b9 \\(path[i]\\) \u5373\u53ef, \u67e5\u8be2\u65f6\u4ece\u540e\u5f80\u524d\u904d\u5386 \u6b21\u77ed\u8def \u00b6 //\u6bcf\u6b21\u66f4\u65b0\u6700\u77ed\u8def\u65f6\u770b\u770b\u88ab\u629b\u5f03\u7684\u503c\u80fd\u4e0d\u80fd\u66f4\u65b0\u6b21\u77ed\u8def typedef pair < int , int > P ; const int inf = 0x3f3f3f3f ; vector < P > es [ max_v ]; int n , r , a , b , c ; int d1 [ max_v ], d2 [ max_v ]; //d2 \u6b21\u77ed\u8def void dijkstra ( int s ){ memset ( d1 , inf , sizeof d1 ); memset ( d2 , inf , sizeof d2 ); priority_queue < P , vector < P > , greater < P > > que ; d1 [ s ] = 0 ; que . push ( P ( 0 , s )); while ( ! que . empty ()){ P p = que . top (); que . pop (); int u = p . second ; if ( d2 [ u ] < p . first ) continue ; for ( int i = 0 ; i < es [ u ]. size (); i ++ ){ int v = es [ u ][ i ]. first , w = es [ u ][ i ]. second ; int tmp = p . first + w ; if ( d1 [ v ] > tmp ){ swap ( tmp , d1 [ v ]); que . push ( P ( d1 [ v ], v )); } if ( tmp < d2 [ v ] && tmp > d1 [ v ]){ d2 [ v ] = tmp ; que . push ( P ( d2 [ v ], v )); } } } } \u6700\u5c0f\u751f\u6210\u6811 \u00b6 \u524d\u63d0\uff1a\u56fe\u662f\u8fde\u901a\u7684 Prim \u00b6 \\(O(V^2)\\) vector < edge > es [ max_v ]; int dis [ MAX_V ]; bool vis [ MAX_V ]; int prime (){ memset ( dis , inf , sizeof dis ); memset ( vis , false , vis ); dis [ 0 ] = 0 ; //s int res = 0 ; while ( true ){ int v = -1 , mn = inf ; for ( int i = 0 ; i < V ; i ++ ) if ( ! visited [ i ] && dis [ i ] < mn ) mn = dis [ i ], v = i ; if ( v == -1 ) break ; vis [ v ] = true ; res += mn ; for ( int i = 0 ; i < es [ v ]. size (); i ++ ){ edge e = es [ v ][ i ]; dis [ e . to ] = min ( dis [ e . to ], e . w ); } } return res ; } Kruskal \u00b6 \u6309\u7167\u8fb9\u7684\u6743\u503c\u4ece\u5c0f\u5230\u8fbe\uff0c\u5229\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u662f\u5426\u4f1a\u4ea7\u51fa\u5708\uff0c\u4e0d\u4f1a\u5c31\u52a0\u5165 \\(O(ElogE)\\) \u6392\u5e8f\u7684\u590d\u6742\u5ea6 struct edge { int from , to , w ; }; edge es [ MAX_E ]; bool cmp ( edge a , edge b ){ return a . w < b . w ; } int kruskal (){ sort ( es , es + E , cmp ); init ( MAX_V ); //\u5e76\u67e5\u96c6\u7684\u521d\u59cb\u5316 int res = 0 ; for ( int i = 0 ; i < E ; i ++ ){ edge e = es [ i ]; if ( ! same ( e . from , e . to )){ unite ( e . from , e . to ); res += e . w ; } } return res ; } \u7f51\u7edc\u6d41 \u00b6 \u6700\u5927\u6d41 Dinic \u00b6 struct edge { int to , cap , rev ; } //rev\u8bb0\u5f55\u53cd\u5411\u8fb9\u5728 es[to] \u4e2d\u7684\u7d22\u5f15 vector < edge > es [ max_v ]; //\u90bb\u63a5\u8868 int level [ max_v ]; //\u5206\u5c42\u56fe int iter [ max_v ]; //\u5f27\u4f18\u5316\uff0c\u8bb0\u5f55\u7ed3\u70b9\u589e\u5e7f\u8fc7\u54ea\u4e9b\u8fb9\u4e86\uff0c\u4e0b\u6b21\u5c31\u4e0d\u589e\u5e7f\u4e86 void add_edge ( int from , int to , int cap ) { //\u52a0\u8fb9 es [ from ]. push_back ( edge { to , cap , es [ to ]. size ()}); es [ to ]. push_back ( edge { from , 0 , es [ from ]. size () -1 }); } void bfs ( int s ) { //\u5206\u5c42\u56fe memset ( level , -1 , sizeof level ); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()){ int v = que . front (), que . pop (); for ( int i = 0 ; i < es [ i ]. size (); i ++ ){ edge & e = es [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ){ level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } int dfs ( int cur , int t , int f ) { //\u589e\u5e7f\u8def if ( cur == t ) return f ; for ( int & i = iter [ cur ]; i < es [ cur ]. size (); i ++ ){ edge & e = es [ cur ][ i ]; if ( e . cap > 0 && level [ cur ] < level [ e . to ]){ int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; es [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } int max_flow ( int s , int t ){ int flow = 0 ; while ( 1 ){ bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof iter ); int f ; while ( f = dfs ( s , t , inf ) > 0 ) flow += f ; } } \u6700\u5c0f\u8d39\u7528\u6d41 \u00b6 \u8d1f\u6743\u8fb9\uff0c\u7528 BF \u7b97\u6cd5 const int inf = 0x3f3f3f3f ; struct edge { int to , cap , cost , rev ; } vector < edge > es [ max_v ]; int dist [ max_v ]; int pree [ max_e ], prev [ max_v ]; //\u524d\u5bfc\u9876\u70b9\u7684\u5bf9\u5e94\u7684\u8fb9\u7684\u7d22\u5f15 void add_edge ( int from , int to , int cap , int cost ){ es [ from ]. push_back ( edge { to , cap , cost , es [ to ]. size ()}); es [ to ]. push_back ( edge { from , 0 , - cost , es [ from ]. size () -1 }); } int min_cost_flow ( int s , int t , int f ) { //\u8d77\u70b9 \u7ec8\u70b9 \u6d41\u91cf int res = 0 ; while ( f > 0 ){ memset ( dist , inf , sizeof dist ); dist [ s ] = 0 ; while ( true ) bool update = false ; for ( int i = 0 ; i < V ; i ++ ) { if ( dist [ i ] == inf ) continue ; for ( int j = 0 ; j < es [ i ]. size (); j ++ ) { edge & e = es [ i ][ j ]; if ( e . cap > 0 && dist [ e . to ] > dist [ e . from ] + e . cost ) { dist [ to ] = dist [ from ] + e . cost ; prev [ e . to ] = i ; pree [ e . to ] = j ; update = true ; } } } if ( ! update ) break ; } if ( dist [ t ] == inf ) return -1 ; //\u6cbfs\u5230t\u7684\u6700\u77ed\u8def\u5c3d\u91cf\u589e\u5e7f int d = f ; for ( int i = t ; i != s ; i = prev [ i ]) d = min ( d , es [ prev [ i ]][ pree [ i ]]. cap ); f -= d ; res += d * dist [ t ]; for ( int i = t ; i != s ; i = prev [ i ]) { edge & e = es [ prev [ i ][ pree [ i ]]]; e . cap -= d ; es [ i ][ e . rev ]. cap += d ; } } return res ; } \u4e8c\u5206\u56fe\u5339\u914d \u00b6 \u6700\u5927\u6d41 \u00b6 \u6dfb\u52a0\u539f\u70b9\u548c\u6c47\u70b9\uff0c\u8ba1\u7b97\u6700\u5927\u6d41 //\u8ba1\u7b97\u673a\u5904\u7406\u4efb\u52a1 bool can [ max_n ][ max_m ]; // can[i][j] : \u8ba1\u7b97\u673a i \u80fd\u5904\u7406\u4efb\u52a1 j void MaxMatch (){ //\u8ba1\u7b97\u673a\u5bf9\u5e94\u7684\u9876\u70b9\uff1a0 ~ n-1 //\u4efb\u52a1\u5bf9\u5e94\u7684\u9876\u70b9\uff1an ~ n+m-1 int s = n + m , t = n + m + 1 ; for ( int i = 0 ; i < n ; i ++ ){ add_edge ( s , i , 1 ); } for ( int i = 0 ; i < m ; i ++ ){ add_edge ( n + i , t , 1 ); } for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < m ; j ++ ) add_edge ( i , n + j , 1 ); cout << max_flow ( s , t ) << endl ; } \u5308\u7259\u5229\u7b97\u6cd5 \u00b6 \\(O(VE)\\) bool vis [ max_v ]; int match [ max_v ]; vector < int > es [ max_v ]; void add_edge ( int u , int v ){ es [ u ]. push_back ( v ); es [ v ]. push_back ( u ); } bool dfs ( int cur ){ for ( int i = 0 ; i < es [ cur ]. size (); i ++ ){ int v = es [ cur ][ i ]; if ( vis [ v ]) continue ; vis [ v ] = true ; if ( ! match [ v ] || dfs ( match [ v ])){ match [ v ] = cur ; match [ cur ] = v ; return true ; } } return false ; } int MaxMatch (){ int res = 0 ; for ( int i = 1 ; i <= n ; i ++ ){ //\u5bfb\u627e\u589e\u5e7f\u8def\u5f84 memset ( vis , 0 , sizeof vis ); if ( ! match [ i ] && dfs ( i )) res ++ ; } return res ; } Hopcroft-Karp \u00b6 \\(O(E\\sqrt{V})\\) HDU 2389 int match [ max_v ], dep [ max_v ]; vector < int > es [ max_v ]; bool bfs () { memset ( dep , 0 , sizeof dep ); queue < int > q ; for ( int i = 1 ; i <= n ; i ++ ) if ( ! match [ i ]) q . push ( i ); bool flag = false ; while ( ! q . empty ()) { int u = q . front (); q . pop (); for ( int i = 0 ; i < es [ u ]. size (); i ++ ) { int v = es [ u ][ i ]; if ( dep [ v ]) continue ; dep [ v ] = dep [ u ] + 1 ; if ( ! match [ v ]) flag = true ; else dep [ match [ v ]] = dep [ v ] + 1 , q . push ( match [ v ]); } } return flag ; } bool dfs ( int u ) { for ( int i = 0 ; i < es [ u ]. size (); i ++ ) { int v = es [ u ][ i ]; if ( dep [ v ] != dep [ u ] + 1 ) continue ; dep [ v ] = 0 ; if ( ! match [ v ] || dfs ( match [ v ])) { match [ v ] = u ; match [ u ] = v ; return true ; } } return false ; } int MaxMatch () { int res = 0 ; while ( bfs ()) { for ( int i = 1 ; i <= n ; i ++ ) if ( ! match [ i ] && dfs ( i )) res ++ ; } return res ; } \u8fde\u901a\u6027\u76f8\u5173 \u00b6 \u5f3a\u8fde\u901a\u5206\u91cf\u5206\u89e3 \u00b6 \\(O(V+E)\\) \u4e24\u6b21DFS\uff0c\u7b2c\u4e00\u904d\u540e\u5e8f\u904d\u5386\u5e76\u7ed9\u9876\u70b9\u6807\u53f7\uff0c\u7b2c\u4e8c\u904d\u5bf9\u53cd\u5411\u56fe\u904d\u5386 vector < int > G [ max_v ]; vector < int > rG [ max_v ]; //\u53cd\u5411\u56fe vector < int > vs ; //vertex sequence bool vis [ max_v ]; int cmp [ max_v ]; //\u6240\u5c5e\u5f3a\u8fde\u901a\u56fe\u7684\u62d3\u6251\u5e8f void add_edge ( int u , int v ){ G [ u ]. push_back ( v ); rG [ v ]. push_back ( u ); } void dfs ( int v ){ vis [ v ] = true ; for ( int i = 0 ; i < G [ v ]. size (); i ++ ) if ( ! vis [ G [ v ][ i ]]) dfs ( G [ v ][ i ]); vs . push_back ( v ); } void rdfs ( int v , int k ){ vis [ v ] = true ; cmp [ v ] = k ; for ( int i = 0 ; i < rG [ v ]. size (); i ++ ) if ( ! vis [ rG [ v ][ i ]]) rdfs ( rG [ v ][ i ], k ); } int scc () { //strongly connected component memset ( vis , false , sizeof vis ); vs . clear (); for ( int v = 0 ; v < V ; v ++ ) if ( ! vis [ v ]) dfs ( v ); memset ( vis , false , sizeof vis ); int k = 0 ; for ( int i = vs . size () -1 ; i >= 0 ; i -- ) if ( ! vis [ vs [ i ]]) rdfs ( vs [ i ], k ++ ); return k ; } \u8fde\u901a\u5206\u652f\u4e2a\u6570 \u00b6 \u5e76\u67e5\u96c6 \u6811\u4e0a\u95ee\u9898 \u00b6 \u6700\u8fd1\u516c\u5171\u7956\u5148(LCA) \u00b6 \\(O(n)\\) vector < int > G [ maxn_v ]; int root , parent [ max_v ], depth [ max_v ]; void dfs ( int v , int p , int d ){ parent [ v ] = p , depth [ v ] = d ; for ( int i = 0 ; i < G [ v ]. size (); i ++ ) if ( G [ v ][ i ] != p ) dfs ( G [ v ][ i ], v , d + 1 ); } void init (){ dfs ( root , -1 , 0 ); } int lca ( int u , int v ){ //\u5148\u628au,v\u8d70\u5230\u540c\u4e00\u6df1\u5ea6 while ( depth [ u ] > depth [ v ]) u = parent [ u ]; while ( depth [ v ] > depth [ u ]) v = parent [ v ]; //\u4e00\u8d77\u5411\u4e0a\u8d70 while ( u != v ){ u = parent [ u ], v = parent [ v ]; } return u ; } \u57fa\u4e8e\u4e8c\u5206\u641c\u7d22\u7684\u7b97\u6cd5 \u5bf9\u4e8e\u4efb\u610f\u7ed3\u70b9v\uff0c\u53ef\u4ee5\u901a\u8fc7 parent2[v] = parent[parent[v]] parent4[v] = parent2[parent2[v]] ... \u5f97\u5230\u5176\u5411\u4e0a\u8d70 \\(2^k\\) \u200b \u6b65\u5230\u8fbe\u7684\u9876\u70b9 \u6bcf\u6b21\u641c\u7d22\u7684\u590d\u6742\u5ea6\uff1a \\(O(logn)\\) \uff0c\u9884\u5904\u7406\u7684\u590d\u6742\u5ea6\uff1a \\(O(nlogn)\\) vector < int > G [ max_v ]; int root , parent [ max_k ][ max_v ], depth [ max_v ]; void dfs ( int v , int p , int d ){ depth [ v ] = d , parent [ v ] = p ; for ( int i = 0 ; i < G [ v ]. size (); i ++ ) if ( G [ v ][ i ] != p ) dfs ( G [ v ][ i ], v , d + 1 ); } void init ( int V ){ //\u9884\u5904\u7406parent[0]\u548cdepth dfs ( root , -1 , 0 ); //\u9884\u5904\u7406parent for ( int k = 0 ; k + 1 < max_k ; k ++ ) for ( int i = 0 ; i < V ; i ++ ) { //parent[k][v] \u8868\u793a\u4ece v \u7ed3\u70b9\u5411\u4e0a\u8d70 2^k \u6b21\u7684\u7ed3\u70b9\uff0c \u8d85\u8fc7\u6839\u65f6\u8bb0\u4f5c-1 if ( parent [ k ][ i ] < 0 ) parent [ k + 1 ][ i ] = -1 ; else parent [ k + 1 ][ i ] = parent [ k ][ parent [ k ][ i ]]; } } int lca ( int u , int v ){ //\u8ba9u\u548cv\u8d70\u5230\u540c\u4e00\u6df1\u5ea6 if ( depth [ u ] > depth [ v ]) swap ( u , v ); //\u8ba9v\u7684\u6df1\u5ea6\u6df1\u4e00\u4e9b for ( int k = 0 ; k < max_k ; k ++ ) { if (( depth [ v ] - depth [ u ]) >> k & 1 ) v = parent [ k ][ v ]; } if ( u == v ) return u ; //\u4e8c\u5206\u641c\u7d22\u8ba1\u7b97LCA for ( int k = max_k -1 ; k >= 0 ; k -- ) { if ( parent [ k ][ v ] != parent [ k ][ u ]) { //\u5982\u679c\u8d85\u8fc7\u4e86\u4ed6\u4eec\u7684LCA\u4e5f\u4e00\u5b9a\u662f\u4e00\u6837\u7684,\u4e0d\u4e00\u6837\u4e00\u5b9a\u8fd8\u6ca1\u5230LCA v = parent [ k ][ v ], u = parent [ k ][ u ]; } } return parnet [ 0 ][ u ]; //?\u8fd9\u91cc\u597d\u50cf\u4e0d\u592a\u5bf9?// } \u70b9\u5206\u6cbb \u00b6 \u6d1b\u8c37 P3806 POJ 1741 \u5176\u4ed6 \u00b6 \u4e8c\u5206\u56fe\u76f8\u5173\u7ed3\u8bba \u00b6 \u5b9a\u4e49\uff1a \u5339\u914d\uff1a\u5728G\u4e2d\u4e24\u4e24\u6ca1\u6709\u516c\u5171\u70b9\u7684\u8fb9\u96c6\u5408M \u8fb9\u8986\u76d6\uff1aG\u4e2d\u4efb\u610f\u9876\u70b9\u90fd\u81f3\u5c11\u662fF\u4e2d\u67d0\u6761\u8fb9\u7684\u7aef\u70b9\u7684\u8fb9\u96c6\u5408F \u72ec\u7acb\u96c6\uff1a\u5728G\u4e2d\u4e24\u4e24\u4e92\u4e0d\u76f8\u8fde\u7684\u9876\u70b9\u96c6\u5408S \u9876\u70b9\u8986\u76d6\uff1aG\u4e2d\u7684\u4efb\u610f\u8fb9\u90fd\u81f3\u5c11\u6709\u4e00\u4e2a\u7aef\u70b9\u5c5e\u4e8eS\u7684\u9876\u70b9\u96c6\u5408S \u7ed3\u8bba\uff1a \u5bf9\u4e8e\u65e0\u5b64\u7acb\u70b9\u7684\u56fe\uff0c|\u6700\u5927\u5339\u914d|+|\u6700\u5c0f\u8fb9\u8986\u76d6| = |V| |\u6700\u5927\u72ec\u7acb\u96c6|+|\u6700\u5c0f\u9876\u70b9\u8986\u76d6| = |V| \u5bf9\u4e8e\u4e8c\u5206\u56fe\uff0c|\u6700\u5927\u5339\u914d| = |\u6700\u5c0f\u9876\u70b9\u8986\u76d6| \u7b80\u5355\u8bc1\u660e\uff1a\u6700\u5927\u5339\u914d\u65f6\u662f\u6bcf\u4e00\u5bf9\u5339\u914d\u4e2d\uff0c\u4e0d\u53ef\u80fd2\u4e2a\u70b9\u90fd\u8fde\u63a5\u7740\u672a\u5339\u914d\u7684\u70b9\uff08\u4e0d\u7136\u7684\u8bdd\u5c31\u4f1a\u6709\u589e\u5e7f\u8def\u5f84\uff0c\u6700\u5927\u5339\u914d\u8fd8\u53ef\u4ee5\u66f4\u5927), \u6240\u4ee52\u4e2a\u70b9\u4e2d\u6700\u591a\u4e00\u4e2a\u70b9\u8fde\u63a5\u7740\u672a\u5339\u914d\u7684\u70b9\uff0c\u9009\u62e9\u90a3\u4e2a\u70b9\u4f5c\u4e3a\u6700\u5c0f\u5b9a\u70b9\u8986\u76d6\u5373\u53ef 2-SAT \u00b6 \u5e03\u5c14\u65b9\u7a0b\u7684\u53ef\u6ee1\u8db3\u6027\u95ee\u9898 \u5408\u53d6\u8303\u5f0f\uff1a \\((a\\vee b\\vee\\dots)\\wedge(c\\vee d\\vee\\dots)\\) 2-SAT\u95ee\u9898\uff1a\u5408\u53d6\u8303\u5f0f\u7684\u6bcf\u4e2a\u5b50\u53e5\u7684\u6587\u5b57\u4e0d\u8d85\u8fc72\u7684\u5e03\u5c14\u65b9\u7a0b\u7684\u53ef\u6ee1\u8db3\u6027\u95ee\u9898 \u5c06\u6bcf\u4e2a \\(a\\vee b\\) \u6539\u5199\u6210 \\((\\urcorner a \\Rightarrow b \\wedge \\urcorner b \\Rightarrow a)\\) \uff0c\u4ee5 \\(\\Rightarrow\\) \u200b \u5173\u7cfb\u4e3a\u8fb9\u5efa\u6709\u5411\u56fe\uff0c\u5229\u7528\u5f3a\u8fde\u901a\u5206\u91cf\u5206\u89e3 \u5982\u679c\u5b58\u5728 \\(x\\) \u548c \\(\\urcorner x\\) \u200b\u200b\u5b58\u5728\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u65e0\u89e3 \u5426\u5219\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5e03\u5c14\u53d8\u91cf \\(x\\) \uff0c\u5982\u679c \\(x\\) \u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u62d3\u6251\u5e8f\u5728 \\(\\urcorner x\\) \u4e4b\u540e\uff0c \\(x\\) \u200b\u200b \u4e3atrue \u56e0\u4e3a\u62d3\u6251\u5e8f\u5728\u524d\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u53ef\u80fd\u5b58\u5728\u901a\u8def\u5230\u8fbe\u5728\u540e\u7684\uff0c\u6240\u4ee5\u5728\u540e\u7684\u4e00\u5b9a\u4e3a true DFS\u5e8f \u00b6 \u5f53\u524d\u7ed3\u70b9\u7684 in \u548c out \u5305\u542b\u4e86\u5b50\u6811\u7684\u6240\u6709\u7ed3\u70b9 int in [ N ], out [ N ], tot = 0 ; void dfs ( int x , int dep ) { in [ x ] = ++ tot ; for ( int i = 0 ; i < es [ x ]. size (); i ++ ) dfs ( es [ x ][ i ], dep + 1 ); out [ x ] = tot ; }","title":"\u56fe\u8bba"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_1","text":"","title":"\u56fe\u8bba"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_2","text":"","title":"\u56fe\u7684\u5b58\u50a8"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_3","text":"\\(G[i][j]=1\\) \u8868\u793a\u6709\u4e00\u6761\u8fb9\u4ece \\(i\\) \u5230 \\(j\\)","title":"\u90bb\u63a5\u77e9\u9635"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_4","text":"vector < int > es [ MAXN ]; /* \u5e26\u6743\u8fb9 struct edge{ int to, w; }; vector<edge> es[MAXN]; */","title":"\u90bb\u63a5\u8868"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_5","text":"struct edge { int to , w , next ; } es [ MAX_E ]; int cnt = 0 ; void init () { memset ( head , -1 , sizeof head ); } void add_edge ( int u , int v , int w ) { //\u52a0\u8fb9 es [ cnt ]. to = v ; es [ cnt ]. w = w ; es [ cnt ]. next = head [ u ]; head [ u ] = cnt ++ ; } /*\u904d\u5386 for(int i = 1; i <= n; i++) for(int j = head[i]; i != -1; j = es[j].next) */","title":"\u94fe\u5f0f\u524d\u5411\u661f"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_6","text":"","title":"\u6700\u77ed\u8def"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#bellman-ford","text":"\u5355\u6e90\u6700\u77ed\u8def\u95ee\u9898 \\(O(VE)\\) \u652f\u6301\u8d1f\u6743 struct edge { int from , to , w ; }; edge es [ MAX_E ]; int d [ MAX_V ]; int V , E ; void BF ( int s ){ memset ( d , INF , sizeof d ); d [ s ] = 0 ; for ( int k = 0 ; k < V ; k ++ ){ for ( int i = 0 ; i < E ; i ++ ){ edge e = es [ i ]; if ( d [ e . from ] != INF && d [ e . to ] > d [ e . from ] + e . w ){ d [ e . to ] = d [ e . from ] + w ; //\u677e\u5f1b\u64cd\u4f5c } } } } //\u5faa\u73af\u81f3\u591a\u6267\u884c V-1 \u6b21\uff0c\u4e00\u6b21\u677e\u5f1b\u64cd\u4f5c\u81f3\u5c11\u8ba9\u786e\u5b9a\u7684\u6700\u77ed\u8def+1\uff0c\u6240\u4ee5O(VE)\uff0c\u5982\u679c\u7b2c n \u6b21\u4efb\u7136\u66f4\u65b0\u4e86d\uff0c\u8868\u793a\u6709\u8d1f\u73af //\u628a\u6240\u6709d[i]\u521d\u59cb\u5316\u4e3a0\uff0c\u5c31\u53ef\u4ee5\u627e\u5230\u6240\u6709\u7684\u8d1f\u5708 bool find_negative_loop (){ memset ( d , 0 , sizeof d ); for ( int i = 0 ; i < V ; i ++ ){ for ( int j = 0 ; j < E ; j ++ ){ edge e = es [ j ]; if ( d [ e . to ] > d [ e . from ] + e . w ){ d [ e . to ] = d [ e . from ] + e . w ; if ( i == V -1 ) return true ; } } } return false ; }","title":"Bellman-Ford"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#dijkstra","text":"\u5355\u6e90\u6700\u77ed\u8def\u95ee\u9898 \u4e0d\u652f\u6301\u8d1f\u6743\u8fb9 \u68c0\u67e5\u5b58\u5728 \\(d[i][i]\\) \u4e3a\u8d1f\u6570\u6765\u5224\u65ad\u662f\u5426\u6709\u8d1f\u73af \\(O(ElogV)\\) \u7528\u4f18\u5148\u961f\u5217 typedef pair < int , int > P ; vector < P > es [ MAX_V ]; //\u90bb\u63a5\u8868\u4e2dfirst\u8868\u793a\u7aef\u70b9\uff0csecond\u8868\u793a\u6743\u503c int d [ MAX_V ]; void dijkstra ( int s ) { priority_queue < P , vector < P > , greater < P > > que ; //\u961f\u5217\u4e2dfirst\u8868\u793a\u6700\u77ed\u8def\uff0c second\u8868\u793a\u7aef\u70b9 memset ( d , INF , sizeof d ); d [ s ] = 0 ; que . push ( P ( 0 , s )); while ( ! que . empty ()) { P p = que . top (); que . pop (); int u = p . second ; if ( d [ u ] < p . first ) continue ; for ( int i = 0 ; i < es [ u ]. size (); i ++ ) { int v = es [ u ][ i ]. first , w = es [ u ][ i ]. second ; if ( d [ v ] > d [ u ] + w ) { //\u677e\u5f1b\u64cd\u4f5c d [ v ] = d [ u ] + w ; que . push ( P ( d [ v ], v )); } } } }","title":"Dijkstra"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#floyd-warshall","text":"\\(O(V^3)\\) dp:\u72b6\u6001\u8f6c\u79fb\u65b9\u65b9\u7a0b \\(d[k][i][j]=min(d[k-1][i][j],d[k-1][i][k]+d[k-1][k][i])\\) , \u5373 \\(d[i][j] = min(d[i][j], d[i][k]+d[k][j])\\) int d [ MAX_V [ MAX_V ]; void floyd () { for ( int k = 0 ; k < V ; k ++ ) for ( int i = 0 ; i < V ; i ++ ) for ( int j = 0 ; j < V ; j ++ ) d [ i ][ j ] = min ( d [ i ][ j ], d [ i ][ k ] + d [ k ][ j ]); }","title":"Floyd-Warshall"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_7","text":"\u5728\u677e\u5f1b\u64cd\u4f5c\u65f6\u8bb0\u5f55\u6bcf\u4e2a\u7ed3\u70b9\u7684\u524d\u8d8b\u7ed3\u70b9 \\(path[i]\\) \u5373\u53ef, \u67e5\u8be2\u65f6\u4ece\u540e\u5f80\u524d\u904d\u5386","title":"\u8def\u5f84\u8fd8\u539f"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_8","text":"//\u6bcf\u6b21\u66f4\u65b0\u6700\u77ed\u8def\u65f6\u770b\u770b\u88ab\u629b\u5f03\u7684\u503c\u80fd\u4e0d\u80fd\u66f4\u65b0\u6b21\u77ed\u8def typedef pair < int , int > P ; const int inf = 0x3f3f3f3f ; vector < P > es [ max_v ]; int n , r , a , b , c ; int d1 [ max_v ], d2 [ max_v ]; //d2 \u6b21\u77ed\u8def void dijkstra ( int s ){ memset ( d1 , inf , sizeof d1 ); memset ( d2 , inf , sizeof d2 ); priority_queue < P , vector < P > , greater < P > > que ; d1 [ s ] = 0 ; que . push ( P ( 0 , s )); while ( ! que . empty ()){ P p = que . top (); que . pop (); int u = p . second ; if ( d2 [ u ] < p . first ) continue ; for ( int i = 0 ; i < es [ u ]. size (); i ++ ){ int v = es [ u ][ i ]. first , w = es [ u ][ i ]. second ; int tmp = p . first + w ; if ( d1 [ v ] > tmp ){ swap ( tmp , d1 [ v ]); que . push ( P ( d1 [ v ], v )); } if ( tmp < d2 [ v ] && tmp > d1 [ v ]){ d2 [ v ] = tmp ; que . push ( P ( d2 [ v ], v )); } } } }","title":"\u6b21\u77ed\u8def"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_9","text":"\u524d\u63d0\uff1a\u56fe\u662f\u8fde\u901a\u7684","title":"\u6700\u5c0f\u751f\u6210\u6811"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#prim","text":"\\(O(V^2)\\) vector < edge > es [ max_v ]; int dis [ MAX_V ]; bool vis [ MAX_V ]; int prime (){ memset ( dis , inf , sizeof dis ); memset ( vis , false , vis ); dis [ 0 ] = 0 ; //s int res = 0 ; while ( true ){ int v = -1 , mn = inf ; for ( int i = 0 ; i < V ; i ++ ) if ( ! visited [ i ] && dis [ i ] < mn ) mn = dis [ i ], v = i ; if ( v == -1 ) break ; vis [ v ] = true ; res += mn ; for ( int i = 0 ; i < es [ v ]. size (); i ++ ){ edge e = es [ v ][ i ]; dis [ e . to ] = min ( dis [ e . to ], e . w ); } } return res ; }","title":"Prim"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#kruskal","text":"\u6309\u7167\u8fb9\u7684\u6743\u503c\u4ece\u5c0f\u5230\u8fbe\uff0c\u5229\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u662f\u5426\u4f1a\u4ea7\u51fa\u5708\uff0c\u4e0d\u4f1a\u5c31\u52a0\u5165 \\(O(ElogE)\\) \u6392\u5e8f\u7684\u590d\u6742\u5ea6 struct edge { int from , to , w ; }; edge es [ MAX_E ]; bool cmp ( edge a , edge b ){ return a . w < b . w ; } int kruskal (){ sort ( es , es + E , cmp ); init ( MAX_V ); //\u5e76\u67e5\u96c6\u7684\u521d\u59cb\u5316 int res = 0 ; for ( int i = 0 ; i < E ; i ++ ){ edge e = es [ i ]; if ( ! same ( e . from , e . to )){ unite ( e . from , e . to ); res += e . w ; } } return res ; }","title":"Kruskal"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_10","text":"","title":"\u7f51\u7edc\u6d41"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#dinic","text":"struct edge { int to , cap , rev ; } //rev\u8bb0\u5f55\u53cd\u5411\u8fb9\u5728 es[to] \u4e2d\u7684\u7d22\u5f15 vector < edge > es [ max_v ]; //\u90bb\u63a5\u8868 int level [ max_v ]; //\u5206\u5c42\u56fe int iter [ max_v ]; //\u5f27\u4f18\u5316\uff0c\u8bb0\u5f55\u7ed3\u70b9\u589e\u5e7f\u8fc7\u54ea\u4e9b\u8fb9\u4e86\uff0c\u4e0b\u6b21\u5c31\u4e0d\u589e\u5e7f\u4e86 void add_edge ( int from , int to , int cap ) { //\u52a0\u8fb9 es [ from ]. push_back ( edge { to , cap , es [ to ]. size ()}); es [ to ]. push_back ( edge { from , 0 , es [ from ]. size () -1 }); } void bfs ( int s ) { //\u5206\u5c42\u56fe memset ( level , -1 , sizeof level ); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()){ int v = que . front (), que . pop (); for ( int i = 0 ; i < es [ i ]. size (); i ++ ){ edge & e = es [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ){ level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } int dfs ( int cur , int t , int f ) { //\u589e\u5e7f\u8def if ( cur == t ) return f ; for ( int & i = iter [ cur ]; i < es [ cur ]. size (); i ++ ){ edge & e = es [ cur ][ i ]; if ( e . cap > 0 && level [ cur ] < level [ e . to ]){ int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; es [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } int max_flow ( int s , int t ){ int flow = 0 ; while ( 1 ){ bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof iter ); int f ; while ( f = dfs ( s , t , inf ) > 0 ) flow += f ; } }","title":"\u6700\u5927\u6d41 Dinic"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_11","text":"\u8d1f\u6743\u8fb9\uff0c\u7528 BF \u7b97\u6cd5 const int inf = 0x3f3f3f3f ; struct edge { int to , cap , cost , rev ; } vector < edge > es [ max_v ]; int dist [ max_v ]; int pree [ max_e ], prev [ max_v ]; //\u524d\u5bfc\u9876\u70b9\u7684\u5bf9\u5e94\u7684\u8fb9\u7684\u7d22\u5f15 void add_edge ( int from , int to , int cap , int cost ){ es [ from ]. push_back ( edge { to , cap , cost , es [ to ]. size ()}); es [ to ]. push_back ( edge { from , 0 , - cost , es [ from ]. size () -1 }); } int min_cost_flow ( int s , int t , int f ) { //\u8d77\u70b9 \u7ec8\u70b9 \u6d41\u91cf int res = 0 ; while ( f > 0 ){ memset ( dist , inf , sizeof dist ); dist [ s ] = 0 ; while ( true ) bool update = false ; for ( int i = 0 ; i < V ; i ++ ) { if ( dist [ i ] == inf ) continue ; for ( int j = 0 ; j < es [ i ]. size (); j ++ ) { edge & e = es [ i ][ j ]; if ( e . cap > 0 && dist [ e . to ] > dist [ e . from ] + e . cost ) { dist [ to ] = dist [ from ] + e . cost ; prev [ e . to ] = i ; pree [ e . to ] = j ; update = true ; } } } if ( ! update ) break ; } if ( dist [ t ] == inf ) return -1 ; //\u6cbfs\u5230t\u7684\u6700\u77ed\u8def\u5c3d\u91cf\u589e\u5e7f int d = f ; for ( int i = t ; i != s ; i = prev [ i ]) d = min ( d , es [ prev [ i ]][ pree [ i ]]. cap ); f -= d ; res += d * dist [ t ]; for ( int i = t ; i != s ; i = prev [ i ]) { edge & e = es [ prev [ i ][ pree [ i ]]]; e . cap -= d ; es [ i ][ e . rev ]. cap += d ; } } return res ; }","title":"\u6700\u5c0f\u8d39\u7528\u6d41"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_12","text":"","title":"\u4e8c\u5206\u56fe\u5339\u914d"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_13","text":"\u6dfb\u52a0\u539f\u70b9\u548c\u6c47\u70b9\uff0c\u8ba1\u7b97\u6700\u5927\u6d41 //\u8ba1\u7b97\u673a\u5904\u7406\u4efb\u52a1 bool can [ max_n ][ max_m ]; // can[i][j] : \u8ba1\u7b97\u673a i \u80fd\u5904\u7406\u4efb\u52a1 j void MaxMatch (){ //\u8ba1\u7b97\u673a\u5bf9\u5e94\u7684\u9876\u70b9\uff1a0 ~ n-1 //\u4efb\u52a1\u5bf9\u5e94\u7684\u9876\u70b9\uff1an ~ n+m-1 int s = n + m , t = n + m + 1 ; for ( int i = 0 ; i < n ; i ++ ){ add_edge ( s , i , 1 ); } for ( int i = 0 ; i < m ; i ++ ){ add_edge ( n + i , t , 1 ); } for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < m ; j ++ ) add_edge ( i , n + j , 1 ); cout << max_flow ( s , t ) << endl ; }","title":"\u6700\u5927\u6d41"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_14","text":"\\(O(VE)\\) bool vis [ max_v ]; int match [ max_v ]; vector < int > es [ max_v ]; void add_edge ( int u , int v ){ es [ u ]. push_back ( v ); es [ v ]. push_back ( u ); } bool dfs ( int cur ){ for ( int i = 0 ; i < es [ cur ]. size (); i ++ ){ int v = es [ cur ][ i ]; if ( vis [ v ]) continue ; vis [ v ] = true ; if ( ! match [ v ] || dfs ( match [ v ])){ match [ v ] = cur ; match [ cur ] = v ; return true ; } } return false ; } int MaxMatch (){ int res = 0 ; for ( int i = 1 ; i <= n ; i ++ ){ //\u5bfb\u627e\u589e\u5e7f\u8def\u5f84 memset ( vis , 0 , sizeof vis ); if ( ! match [ i ] && dfs ( i )) res ++ ; } return res ; }","title":"\u5308\u7259\u5229\u7b97\u6cd5"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#hopcroft-karp","text":"\\(O(E\\sqrt{V})\\) HDU 2389 int match [ max_v ], dep [ max_v ]; vector < int > es [ max_v ]; bool bfs () { memset ( dep , 0 , sizeof dep ); queue < int > q ; for ( int i = 1 ; i <= n ; i ++ ) if ( ! match [ i ]) q . push ( i ); bool flag = false ; while ( ! q . empty ()) { int u = q . front (); q . pop (); for ( int i = 0 ; i < es [ u ]. size (); i ++ ) { int v = es [ u ][ i ]; if ( dep [ v ]) continue ; dep [ v ] = dep [ u ] + 1 ; if ( ! match [ v ]) flag = true ; else dep [ match [ v ]] = dep [ v ] + 1 , q . push ( match [ v ]); } } return flag ; } bool dfs ( int u ) { for ( int i = 0 ; i < es [ u ]. size (); i ++ ) { int v = es [ u ][ i ]; if ( dep [ v ] != dep [ u ] + 1 ) continue ; dep [ v ] = 0 ; if ( ! match [ v ] || dfs ( match [ v ])) { match [ v ] = u ; match [ u ] = v ; return true ; } } return false ; } int MaxMatch () { int res = 0 ; while ( bfs ()) { for ( int i = 1 ; i <= n ; i ++ ) if ( ! match [ i ] && dfs ( i )) res ++ ; } return res ; }","title":"Hopcroft-Karp"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_15","text":"","title":"\u8fde\u901a\u6027\u76f8\u5173"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_16","text":"\\(O(V+E)\\) \u4e24\u6b21DFS\uff0c\u7b2c\u4e00\u904d\u540e\u5e8f\u904d\u5386\u5e76\u7ed9\u9876\u70b9\u6807\u53f7\uff0c\u7b2c\u4e8c\u904d\u5bf9\u53cd\u5411\u56fe\u904d\u5386 vector < int > G [ max_v ]; vector < int > rG [ max_v ]; //\u53cd\u5411\u56fe vector < int > vs ; //vertex sequence bool vis [ max_v ]; int cmp [ max_v ]; //\u6240\u5c5e\u5f3a\u8fde\u901a\u56fe\u7684\u62d3\u6251\u5e8f void add_edge ( int u , int v ){ G [ u ]. push_back ( v ); rG [ v ]. push_back ( u ); } void dfs ( int v ){ vis [ v ] = true ; for ( int i = 0 ; i < G [ v ]. size (); i ++ ) if ( ! vis [ G [ v ][ i ]]) dfs ( G [ v ][ i ]); vs . push_back ( v ); } void rdfs ( int v , int k ){ vis [ v ] = true ; cmp [ v ] = k ; for ( int i = 0 ; i < rG [ v ]. size (); i ++ ) if ( ! vis [ rG [ v ][ i ]]) rdfs ( rG [ v ][ i ], k ); } int scc () { //strongly connected component memset ( vis , false , sizeof vis ); vs . clear (); for ( int v = 0 ; v < V ; v ++ ) if ( ! vis [ v ]) dfs ( v ); memset ( vis , false , sizeof vis ); int k = 0 ; for ( int i = vs . size () -1 ; i >= 0 ; i -- ) if ( ! vis [ vs [ i ]]) rdfs ( vs [ i ], k ++ ); return k ; }","title":"\u5f3a\u8fde\u901a\u5206\u91cf\u5206\u89e3"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_17","text":"\u5e76\u67e5\u96c6","title":"\u8fde\u901a\u5206\u652f\u4e2a\u6570"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_18","text":"","title":"\u6811\u4e0a\u95ee\u9898"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#lca","text":"\\(O(n)\\) vector < int > G [ maxn_v ]; int root , parent [ max_v ], depth [ max_v ]; void dfs ( int v , int p , int d ){ parent [ v ] = p , depth [ v ] = d ; for ( int i = 0 ; i < G [ v ]. size (); i ++ ) if ( G [ v ][ i ] != p ) dfs ( G [ v ][ i ], v , d + 1 ); } void init (){ dfs ( root , -1 , 0 ); } int lca ( int u , int v ){ //\u5148\u628au,v\u8d70\u5230\u540c\u4e00\u6df1\u5ea6 while ( depth [ u ] > depth [ v ]) u = parent [ u ]; while ( depth [ v ] > depth [ u ]) v = parent [ v ]; //\u4e00\u8d77\u5411\u4e0a\u8d70 while ( u != v ){ u = parent [ u ], v = parent [ v ]; } return u ; } \u57fa\u4e8e\u4e8c\u5206\u641c\u7d22\u7684\u7b97\u6cd5 \u5bf9\u4e8e\u4efb\u610f\u7ed3\u70b9v\uff0c\u53ef\u4ee5\u901a\u8fc7 parent2[v] = parent[parent[v]] parent4[v] = parent2[parent2[v]] ... \u5f97\u5230\u5176\u5411\u4e0a\u8d70 \\(2^k\\) \u200b \u6b65\u5230\u8fbe\u7684\u9876\u70b9 \u6bcf\u6b21\u641c\u7d22\u7684\u590d\u6742\u5ea6\uff1a \\(O(logn)\\) \uff0c\u9884\u5904\u7406\u7684\u590d\u6742\u5ea6\uff1a \\(O(nlogn)\\) vector < int > G [ max_v ]; int root , parent [ max_k ][ max_v ], depth [ max_v ]; void dfs ( int v , int p , int d ){ depth [ v ] = d , parent [ v ] = p ; for ( int i = 0 ; i < G [ v ]. size (); i ++ ) if ( G [ v ][ i ] != p ) dfs ( G [ v ][ i ], v , d + 1 ); } void init ( int V ){ //\u9884\u5904\u7406parent[0]\u548cdepth dfs ( root , -1 , 0 ); //\u9884\u5904\u7406parent for ( int k = 0 ; k + 1 < max_k ; k ++ ) for ( int i = 0 ; i < V ; i ++ ) { //parent[k][v] \u8868\u793a\u4ece v \u7ed3\u70b9\u5411\u4e0a\u8d70 2^k \u6b21\u7684\u7ed3\u70b9\uff0c \u8d85\u8fc7\u6839\u65f6\u8bb0\u4f5c-1 if ( parent [ k ][ i ] < 0 ) parent [ k + 1 ][ i ] = -1 ; else parent [ k + 1 ][ i ] = parent [ k ][ parent [ k ][ i ]]; } } int lca ( int u , int v ){ //\u8ba9u\u548cv\u8d70\u5230\u540c\u4e00\u6df1\u5ea6 if ( depth [ u ] > depth [ v ]) swap ( u , v ); //\u8ba9v\u7684\u6df1\u5ea6\u6df1\u4e00\u4e9b for ( int k = 0 ; k < max_k ; k ++ ) { if (( depth [ v ] - depth [ u ]) >> k & 1 ) v = parent [ k ][ v ]; } if ( u == v ) return u ; //\u4e8c\u5206\u641c\u7d22\u8ba1\u7b97LCA for ( int k = max_k -1 ; k >= 0 ; k -- ) { if ( parent [ k ][ v ] != parent [ k ][ u ]) { //\u5982\u679c\u8d85\u8fc7\u4e86\u4ed6\u4eec\u7684LCA\u4e5f\u4e00\u5b9a\u662f\u4e00\u6837\u7684,\u4e0d\u4e00\u6837\u4e00\u5b9a\u8fd8\u6ca1\u5230LCA v = parent [ k ][ v ], u = parent [ k ][ u ]; } } return parnet [ 0 ][ u ]; //?\u8fd9\u91cc\u597d\u50cf\u4e0d\u592a\u5bf9?// }","title":"\u6700\u8fd1\u516c\u5171\u7956\u5148(LCA)"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_19","text":"\u6d1b\u8c37 P3806 POJ 1741","title":"\u70b9\u5206\u6cbb"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_20","text":"","title":"\u5176\u4ed6"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_21","text":"\u5b9a\u4e49\uff1a \u5339\u914d\uff1a\u5728G\u4e2d\u4e24\u4e24\u6ca1\u6709\u516c\u5171\u70b9\u7684\u8fb9\u96c6\u5408M \u8fb9\u8986\u76d6\uff1aG\u4e2d\u4efb\u610f\u9876\u70b9\u90fd\u81f3\u5c11\u662fF\u4e2d\u67d0\u6761\u8fb9\u7684\u7aef\u70b9\u7684\u8fb9\u96c6\u5408F \u72ec\u7acb\u96c6\uff1a\u5728G\u4e2d\u4e24\u4e24\u4e92\u4e0d\u76f8\u8fde\u7684\u9876\u70b9\u96c6\u5408S \u9876\u70b9\u8986\u76d6\uff1aG\u4e2d\u7684\u4efb\u610f\u8fb9\u90fd\u81f3\u5c11\u6709\u4e00\u4e2a\u7aef\u70b9\u5c5e\u4e8eS\u7684\u9876\u70b9\u96c6\u5408S \u7ed3\u8bba\uff1a \u5bf9\u4e8e\u65e0\u5b64\u7acb\u70b9\u7684\u56fe\uff0c|\u6700\u5927\u5339\u914d|+|\u6700\u5c0f\u8fb9\u8986\u76d6| = |V| |\u6700\u5927\u72ec\u7acb\u96c6|+|\u6700\u5c0f\u9876\u70b9\u8986\u76d6| = |V| \u5bf9\u4e8e\u4e8c\u5206\u56fe\uff0c|\u6700\u5927\u5339\u914d| = |\u6700\u5c0f\u9876\u70b9\u8986\u76d6| \u7b80\u5355\u8bc1\u660e\uff1a\u6700\u5927\u5339\u914d\u65f6\u662f\u6bcf\u4e00\u5bf9\u5339\u914d\u4e2d\uff0c\u4e0d\u53ef\u80fd2\u4e2a\u70b9\u90fd\u8fde\u63a5\u7740\u672a\u5339\u914d\u7684\u70b9\uff08\u4e0d\u7136\u7684\u8bdd\u5c31\u4f1a\u6709\u589e\u5e7f\u8def\u5f84\uff0c\u6700\u5927\u5339\u914d\u8fd8\u53ef\u4ee5\u66f4\u5927), \u6240\u4ee52\u4e2a\u70b9\u4e2d\u6700\u591a\u4e00\u4e2a\u70b9\u8fde\u63a5\u7740\u672a\u5339\u914d\u7684\u70b9\uff0c\u9009\u62e9\u90a3\u4e2a\u70b9\u4f5c\u4e3a\u6700\u5c0f\u5b9a\u70b9\u8986\u76d6\u5373\u53ef","title":"\u4e8c\u5206\u56fe\u76f8\u5173\u7ed3\u8bba"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#2-sat","text":"\u5e03\u5c14\u65b9\u7a0b\u7684\u53ef\u6ee1\u8db3\u6027\u95ee\u9898 \u5408\u53d6\u8303\u5f0f\uff1a \\((a\\vee b\\vee\\dots)\\wedge(c\\vee d\\vee\\dots)\\) 2-SAT\u95ee\u9898\uff1a\u5408\u53d6\u8303\u5f0f\u7684\u6bcf\u4e2a\u5b50\u53e5\u7684\u6587\u5b57\u4e0d\u8d85\u8fc72\u7684\u5e03\u5c14\u65b9\u7a0b\u7684\u53ef\u6ee1\u8db3\u6027\u95ee\u9898 \u5c06\u6bcf\u4e2a \\(a\\vee b\\) \u6539\u5199\u6210 \\((\\urcorner a \\Rightarrow b \\wedge \\urcorner b \\Rightarrow a)\\) \uff0c\u4ee5 \\(\\Rightarrow\\) \u200b \u5173\u7cfb\u4e3a\u8fb9\u5efa\u6709\u5411\u56fe\uff0c\u5229\u7528\u5f3a\u8fde\u901a\u5206\u91cf\u5206\u89e3 \u5982\u679c\u5b58\u5728 \\(x\\) \u548c \\(\\urcorner x\\) \u200b\u200b\u5b58\u5728\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u65e0\u89e3 \u5426\u5219\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5e03\u5c14\u53d8\u91cf \\(x\\) \uff0c\u5982\u679c \\(x\\) \u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u62d3\u6251\u5e8f\u5728 \\(\\urcorner x\\) \u4e4b\u540e\uff0c \\(x\\) \u200b\u200b \u4e3atrue \u56e0\u4e3a\u62d3\u6251\u5e8f\u5728\u524d\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u53ef\u80fd\u5b58\u5728\u901a\u8def\u5230\u8fbe\u5728\u540e\u7684\uff0c\u6240\u4ee5\u5728\u540e\u7684\u4e00\u5b9a\u4e3a true","title":"2-SAT"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#dfs","text":"\u5f53\u524d\u7ed3\u70b9\u7684 in \u548c out \u5305\u542b\u4e86\u5b50\u6811\u7684\u6240\u6709\u7ed3\u70b9 int in [ N ], out [ N ], tot = 0 ; void dfs ( int x , int dep ) { in [ x ] = ++ tot ; for ( int i = 0 ; i < es [ x ]. size (); i ++ ) dfs ( es [ x ][ i ], dep + 1 ); out [ x ] = tot ; }","title":"DFS\u5e8f"},{"location":"OI/%E5%AD%97%E7%AC%A6%E4%B8%B2/","text":"\u5b57\u7b26\u4e32 \u00b6 next\u6570\u7ec4 \u4e0e KMP \u00b6 \\(O(n+m)\\) //next void getNext ( char * p , int * next ) { next [ 0 ] = -1 ; int i = 0 , j = -1 ; while ( i < strlen ( p )) if ( j == -1 || p [ i ] == p [ j ]){ i ++ , j ++ ; next [ i ] = j ; } else j = next [ j ]; } //KMP //\u4e3b\u4f53\u5b57\u7b26\u4e32 \u5339\u914d\u5b57\u7b26\u4e32 int KMP ( char * s , char * p ){ int i = 0 ; int j = 0 ; while ( i < strlen ( s ) && j < strlen ( p )) if ( j == -1 || s [ i ] == p [ j ]) i ++ , j ++ ; else j = next [ j ]; //\u8fd4\u56de\u5b58\u5728\u4e0e p \u76f8\u540c\u7684\u5b57\u4e32\u7684\u4f4d\u7f6e if ( j == strlen ( p )) return i - j ; else return -1 ; } Manacher \u00b6 \\(O(n)\\) //Manacher int Manacher ( string s ){ if ( s . length () == 0 ) return 0 ; int len = ( int )( s . length () * 2-1 ); char * cArry = new char [ len ]; int * pArry = new int [ len ]; //\u9884\u5904\u7406\uff1a\u5168\u90fd\u53d8\u6210\u5947\u6570\u56de\u6587\u4e32 for ( int i = 0 ; i < len ; i ++ ) cArry [ i ] = i & 1 ? s [( i -1 ) / 2 ] : '#' ; //R:\u6700\u53f3\u53f3\u8fb9\u754c C\uff1a\u4e0eR\u5bf9\u5e94\u7684\u56de\u6587\u4e2d\u5fc3 maxn\uff1a\u6700\u5927\u56de\u6587\u534a\u5f84\uff0c\u8fd4\u56de\u503c\u4e3amaxn-1 //R\u5b9e\u9645\u4e0a\u662f\u6700\u53f3\u8fb9\u754c\u7684\u53f3\u8fb9\u4e00\u4f4d int R = -1 ; int C = -1 ; int maxn = 0 ; for ( int i = 0 ; i < len ; i ++ ){ pArry [ i ] = i >= R ? 1 : min ( R - i , pArry [ 2 * C - i ]); //\u53d6\u5f97\u53ef\u80fd\u7684\u6700\u77ed\u7684\u56de\u6587\u534a\u5f84 *R\u662f\u6700\u53f3\u8fb9\u754c\u7684\u53f3\u8fb9\u4e00\u4f4d //\u66b4\u529b\u8ba1\u7b97 while ( i + pArry [ i ] < len && i - pArry [ i ] > -1 ){ if ( cArry [ i + pArry [ i ]] == cArry [ i - pArry [ i ]]) pArry [ i ] ++ ; else break ; } //\u66f4\u65b0 if ( i + pArry [ i ] > R ){ R = i + pArry [ i ]; C = i ; } maxn = maxn ( pArry [ i ], maxn ); } //\u6e05\u7a7a\u52a8\u6001\u6570\u7ec4 delete [] cArry ; delete [] pArry ; return maxn -1 ; } \u6700\u5c0f\u8868\u793a\u6cd5 \u00b6 \\(O(n)\\) //\u6700\u5c0f\u8868\u793a\u6cd5 int min_ ( char * s ){ int k = 0 , i = 0 , j = 1 , len = strlen ( s ); // k:\u5339\u914d\u957f\u5ea6 while ( k < len && i < len && j < len ){ if ( s [( s + k ) % len ] == s [( j + k ) % len ]) k ++ ; else { s [( s + k ) % len ] > s [( j + k ) % len ] ? i = i + k + 1 : j = j + k + 1 ; //\u4e0d\u540c\u5219\u8df3\u8f6c if ( i == j ) i ++ ; //\u82e5\u8df3\u8f6c\u540e\u4e0d\u540c\uff0c\u8981\u4fdd\u8bc1\u6bd4\u8f83\u7684\u53cc\u65b9\u4e0d\u540c k = 0 ; } } return min ( i , j ); }","title":"\u5b57\u7b26\u4e32"},{"location":"OI/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_1","text":"","title":"\u5b57\u7b26\u4e32"},{"location":"OI/%E5%AD%97%E7%AC%A6%E4%B8%B2/#next-kmp","text":"\\(O(n+m)\\) //next void getNext ( char * p , int * next ) { next [ 0 ] = -1 ; int i = 0 , j = -1 ; while ( i < strlen ( p )) if ( j == -1 || p [ i ] == p [ j ]){ i ++ , j ++ ; next [ i ] = j ; } else j = next [ j ]; } //KMP //\u4e3b\u4f53\u5b57\u7b26\u4e32 \u5339\u914d\u5b57\u7b26\u4e32 int KMP ( char * s , char * p ){ int i = 0 ; int j = 0 ; while ( i < strlen ( s ) && j < strlen ( p )) if ( j == -1 || s [ i ] == p [ j ]) i ++ , j ++ ; else j = next [ j ]; //\u8fd4\u56de\u5b58\u5728\u4e0e p \u76f8\u540c\u7684\u5b57\u4e32\u7684\u4f4d\u7f6e if ( j == strlen ( p )) return i - j ; else return -1 ; }","title":"next\u6570\u7ec4 \u4e0e KMP"},{"location":"OI/%E5%AD%97%E7%AC%A6%E4%B8%B2/#manacher","text":"\\(O(n)\\) //Manacher int Manacher ( string s ){ if ( s . length () == 0 ) return 0 ; int len = ( int )( s . length () * 2-1 ); char * cArry = new char [ len ]; int * pArry = new int [ len ]; //\u9884\u5904\u7406\uff1a\u5168\u90fd\u53d8\u6210\u5947\u6570\u56de\u6587\u4e32 for ( int i = 0 ; i < len ; i ++ ) cArry [ i ] = i & 1 ? s [( i -1 ) / 2 ] : '#' ; //R:\u6700\u53f3\u53f3\u8fb9\u754c C\uff1a\u4e0eR\u5bf9\u5e94\u7684\u56de\u6587\u4e2d\u5fc3 maxn\uff1a\u6700\u5927\u56de\u6587\u534a\u5f84\uff0c\u8fd4\u56de\u503c\u4e3amaxn-1 //R\u5b9e\u9645\u4e0a\u662f\u6700\u53f3\u8fb9\u754c\u7684\u53f3\u8fb9\u4e00\u4f4d int R = -1 ; int C = -1 ; int maxn = 0 ; for ( int i = 0 ; i < len ; i ++ ){ pArry [ i ] = i >= R ? 1 : min ( R - i , pArry [ 2 * C - i ]); //\u53d6\u5f97\u53ef\u80fd\u7684\u6700\u77ed\u7684\u56de\u6587\u534a\u5f84 *R\u662f\u6700\u53f3\u8fb9\u754c\u7684\u53f3\u8fb9\u4e00\u4f4d //\u66b4\u529b\u8ba1\u7b97 while ( i + pArry [ i ] < len && i - pArry [ i ] > -1 ){ if ( cArry [ i + pArry [ i ]] == cArry [ i - pArry [ i ]]) pArry [ i ] ++ ; else break ; } //\u66f4\u65b0 if ( i + pArry [ i ] > R ){ R = i + pArry [ i ]; C = i ; } maxn = maxn ( pArry [ i ], maxn ); } //\u6e05\u7a7a\u52a8\u6001\u6570\u7ec4 delete [] cArry ; delete [] pArry ; return maxn -1 ; }","title":"Manacher"},{"location":"OI/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_2","text":"\\(O(n)\\) //\u6700\u5c0f\u8868\u793a\u6cd5 int min_ ( char * s ){ int k = 0 , i = 0 , j = 1 , len = strlen ( s ); // k:\u5339\u914d\u957f\u5ea6 while ( k < len && i < len && j < len ){ if ( s [( s + k ) % len ] == s [( j + k ) % len ]) k ++ ; else { s [( s + k ) % len ] > s [( j + k ) % len ] ? i = i + k + 1 : j = j + k + 1 ; //\u4e0d\u540c\u5219\u8df3\u8f6c if ( i == j ) i ++ ; //\u82e5\u8df3\u8f6c\u540e\u4e0d\u540c\uff0c\u8981\u4fdd\u8bc1\u6bd4\u8f83\u7684\u53cc\u65b9\u4e0d\u540c k = 0 ; } } return min ( i , j ); }","title":"\u6700\u5c0f\u8868\u793a\u6cd5"},{"location":"OI/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","text":"\u6570\u636e\u7ed3\u6784 \u00b6 \u6811\u72b6\u6570\u7ec4 \u00b6 \u5355\u70b9\u66f4\u65b0 \u533a\u95f4\u67e5\u8be2 int a [ maxn ], c [ maxn ]; //\u539f\u6570\u7ec4\u548c\u6811\u72b6\u6570\u7ec4 int lowbit ( int x ){ return x & ( - x ); } void updata ( int i , int k ) //\u7b2c i \u4e2a\u5143\u7d20\u52a0 k { while ( i <= n ) { c [ i ] += k ; i += lowbit ( i ); } } int getsum ( int i ) //\u524di\u4e2a\u548c { int res = 0 ; while ( i > 0 ) { res += c [ i ]; i -= lowbit ( i ); } return res ; } \u533a\u95f4\u66f4\u65b0 \u5355\u70b9\u67e5\u8be2 //\u5229\u7528\u539f\u6570\u7ec4\u7684\u5dee\u5206\u6570\u7ec4\u5efa\u6811 int a [ maxn ] = { 0 }, c [ maxn ]; //\u539f\u6570\u7ec4\u548c\u6811\u72b6\u6570\u7ec4 int lowbit ( int x ){ return x & ( - x ); } void updata ( int i , int k ) //\u7b2c i \u4e2a\u5143\u7d20\u52a0 k { while ( i <= n ) { c [ i ] += k ; i += lowbit ( i ); } } int getsum ( int i ) //\u524di\u4e2a { int res = 0 ; while ( i > 0 ) { res += c [ i ]; i -= lowbit ( i ); } return res ; } /* updata(i,a[i] - a[i-1]); //\u5dee\u5206\u5efa\u6811 //[x,y]\u533a\u95f4\u5185\u52a0\u4e0ak updata(x,k); //A[x] - A[x-1]\u589e\u52a0k updata(y+1,-k); //A[y+1] - A[y]\u51cf\u5c11k //\u5355\u70b9\u67e5\u8be2 \u5dee\u5206\u5efa\u6811\u6240\u4ee5\u5355\u70b9\u67e5\u8be2\u53d8\u6210\u4e86\u6c42\u548c int sum = getsum(i); */ \u533a\u95f4\u66f4\u65b0 \u533a\u95f4\u67e5\u8be2 d \u662f a \u7684\u5dee\u5206\u6570\u7ec4 \u6709 \\(a_i = \\sum_{j=1}^{i}{d_j}\\) $\\therefore\\sum_{i=1}^{r}{a_i} = \\sum_{i=1}^{r}{\\sum_{j=1}^{i}{d_j}} $ \u200b \\(= \\sum_{i=1}^{r}{d_i \\times(r-i+1)}\\) \u200b $ = \\sum_{i=1}^{r}{d_i \\times(r+1)}-\\sum_{i=1}^{r}{d_i \\times i}$ \u6240\u4ee5\u7ef4\u62a42\u4e2a\u6811\u72b6\u6570\u7ec4 sum1[i] = d[i]\uff0csum2[i] = d[i]*(i-1) \u7ebf\u6bb5\u6811 \u00b6 /*\u533a\u95f4\u548c\u7684\u7ebf\u6bb5\u6811*/ //\u5efa\u6811 void build ( ll x , ll l , ll r ) { if ( l == r ) { scanf ( \"%lld\" , & sum [ x ]); return ; } ll mid = ( l + r ) >> 1 ; build ( x << 1 , l , mid ); build ( x << 1 | 1 , mid + 1 , r ); sum [ x ] = sum [ x << 1 ] + sum [ x << 1 | 1 ]; } //\u4e0b\u653e\u61d2\u6807\u8bb0 void pushdown ( ll x , ll l , ll r ) { ll mid = ( l + r ) / 2 ; lz [ x << 1 ] += lz [ x ], lz [ x << 1 | 1 ] += lz [ x ]; sum [ x << 1 ] += lz [ x ] * ( mid - l + 1 ), sum [ x << 1 | 1 ] += lz [ x ] * ( r - mid ); lz [ x ] = 0 ; } //\u533a\u95f4\u66f4\u65b0 void update ( ll x , ll l , ll r , ll gl , ll gr , ll k ) { if ( l >= gl && r <= gr ) { lz [ x ] += k ; sum [ x ] += ( r - l + 1 ) * k ; return ; } pushdown ( x , l , r ); ll mid = ( l + r ) / 2 ; if ( gl <= mid ) update ( x << 1 , l , mid , gl , gr , k ); if ( gr > mid ) update ( x << 1 | 1 , mid + 1 , r , gl , gr , k ); sum [ x ] = sum [ x << 1 ] + sum [ x << 1 | 1 ]; } //\u533a\u95f4\u548c ll get_sum ( ll x , ll l , ll r , ll gl , ll gr ) { if ( l >= gl && r <= gr ) return sum [ x ]; pushdown ( x , l , r ); ll res = 0 ; ll mid = ( l + r ) / 2 ; if ( gl <= mid ) res += get_sum ( x << 1 , l , mid , gl , gr ); if ( gr > mid ) res += get_sum ( x << 1 | 1 , mid + 1 , r , gl , gr ); return res ; } \u5e76\u67e5\u96c6 \u00b6 int fa [ MAXN ]; //\u521d\u59cb\u5316 void init ( int n ){ for ( int i = 0 ; i < n ; i ++ ) fa [ i ] = i ; //\u7236\u7ed3\u70b9\u662f\u81ea\u5df1 } //\u67e5\u8be2\u5e76\u8def\u5f84\u538b\u7f29 int find ( int x ){ if ( fa [ x ] != x ) fa [ x ] = find ( fa [ x ]); return fa [ x ]; } //\u5408\u5e76 void unite ( int x , int y ){ int fx = find ( x ); int fy = find ( y ); fa [ fx ] = fy ; } //\u67e5\u8be2\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u96c6\u5408 bool same ( int x , int y ){ return find ( x ) == find ( y ); } \u5e26\u6743\u5e76\u67e5\u96c6 int fa [ MAXN ], value [ MAXN ]; //\u7236\u7ed3\u70b9 \u6743\u503c //\u67e5\u8be2 int find ( int x ){ if ( x != fa [ x ]){ int t = fa [ x ]; fa [ x ] = find ( fa [ x ]); value [ x ] += value [ t ]; //\u8fd9\u65f6\u7684\u7236\u4eb2\u7ed3\u70b9\u7684\u6743\u503c\u662f\u7236\u7ed3\u70b9\u5230\u6839\u7ed3\u70b9\u7684\u6743\u503c //\u6240\u4ee5\u52a0\u4e0a\u539f\u672c\u81ea\u5df1\u5230\u7236\u7ed3\u70b9\u7684\u6743\u503c\u5c31\u662f\u81ea\u5df1\u5230\u6839\u7ed3\u70b9\u7684\u6743\u503c } return fa [ x ]; } //\u5408\u5e76, s\u662fx->y\u7684\u6743\u503c void unite ( int x , int y , int s ){ int px = find ( x ); int py = find ( y ); if ( px != py ){ fa [ px ] = py ; value [ px ] = s + value [ y ] - value [ x ]; //x->y->py\u7684\u6743\u503c = x->px->py\u7684\u6743\u503c\uff0c\u6240\u4ee5\u5f97px->py\u7684\u6743\u503c\u4e3a\u4e0a\u5f0f } } \u6808 \u00b6 \u5355\u8c03\u6808 \u00b6 //\u6c42\u51fa\u6bcf\u4e2a\u5143\u7d20\u5de6\u53f3\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u5b83\u7684\u5143\u7d20\u7684\u4e0b\u6807 for ( int i = 1 ; i <= n ; i ++ ) { while ( ! st . empty () && num [ st . top ()] > num [ i ]) { r [ st . top ()] = i ; st . pop (); } if ( st . empty ()) l [ i ] = -1 ; else if ( num [ st . top ()] == num [ i ]) l [ i ] = l [ st . top ()]; else l [ i ] = st . top (); st . push ( i ); } while ( ! st . empty ()) { r [ st . top ()] = n + 1 ; st . pop (); } \u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784 \u00b6 \u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811(\u4e3b\u5e2d\u6811) \u00b6 \u6d1b\u8c37 P3834 //\u4e00\u822c\u5f0032\u500d\u7a7a\u95f4 const int maxn = 2e5 + 5 ; int a [ maxn ], b [ maxn ], n , m , tot , q ; int lc [ maxn << 5 ], rc [ maxn << 5 ], sum [ maxn << 5 ], rt [ maxn << 5 ]; void build ( int & rt , int l , int r ) { rt = ++ tot , sum [ rt ] = 0 ; if ( l == r ) return ; int mid = ( l + r ) >> 1 ; build ( lc [ rt ], l , mid ), build ( rc [ rt ], mid + 1 , r ); } int update ( int x , int l , int r , int t ) { int xx = ++ tot ; lc [ xx ] = lc [ x ], rc [ xx ] = rc [ x ], sum [ xx ] = sum [ x ] + 1 ; if ( l == r ) return xx ; int mid = ( l + r ) >> 1 ; if ( t <= mid ) lc [ xx ] = update ( lc [ xx ], l , mid , t ); else rc [ xx ] = update ( rc [ xx ], mid + 1 , r , t ); return xx ; } int query ( int u , int v , int l , int r , int k ) { int mid = ( l + r ) >> 1 , t = sum [ lc [ v ]] - sum [ lc [ u ]]; if ( l == r ) return l ; if ( k <= t ) return query ( lc [ u ], lc [ v ], l , mid , k ); else return query ( rc [ u ], rc [ v ], mid + 1 , r , k - t ); } int main () { cin >> n >> m ; for ( int i = 1 ; i <= m ; i ++ ) scanf ( \"%d\" , a + i ), b [ i ] = a [ i ]; sort ( b + 1 , b + 1 + n ); q = unique ( b + 1 , b + 1 + n ) - b - 1 ; build ( rt [ 0 ], 1 , q ); for ( int i = 1 ; i <= n ; i ++ ) { int t = lower_bound ( b + 1 , b + 1 + q , a [ i ]) - b ; rt [ i ] = update ( rt [ i - 1 ], 1 , q , t ); } int l , r , k ; for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%d %d %d\" , & l , & r , & k ); printf ( \"%d \\n \" , b [ query ( rt [ l - 1 ], rt [ r ], 1 , q , k )]); } return 0 ; } \u4e8c\u4f4d\u524d\u7f00\u548c \u00b6 //\u9884\u5904\u7406 for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) dp [ i ][ j ] = dp [ i -1 ][ j ] + dp [ i ][ j -1 ] - dp [ i -1 ][ j -1 ] + matrix [ i ][ j ]; //x1, y1, x2, y2 (\u67e5\u8be2\u533a\u95f4) int res = dp [ x2 ][ y2 ] - dp [ x2 ][ y1 -1 ] - dp [ x1 -1 ][ y2 ] + dp [ x1 -1 ][ y1 -1 ];","title":"\u6570\u636e\u7ed3\u6784"},{"location":"OI/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_1","text":"","title":"\u6570\u636e\u7ed3\u6784"},{"location":"OI/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_2","text":"\u5355\u70b9\u66f4\u65b0 \u533a\u95f4\u67e5\u8be2 int a [ maxn ], c [ maxn ]; //\u539f\u6570\u7ec4\u548c\u6811\u72b6\u6570\u7ec4 int lowbit ( int x ){ return x & ( - x ); } void updata ( int i , int k ) //\u7b2c i \u4e2a\u5143\u7d20\u52a0 k { while ( i <= n ) { c [ i ] += k ; i += lowbit ( i ); } } int getsum ( int i ) //\u524di\u4e2a\u548c { int res = 0 ; while ( i > 0 ) { res += c [ i ]; i -= lowbit ( i ); } return res ; } \u533a\u95f4\u66f4\u65b0 \u5355\u70b9\u67e5\u8be2 //\u5229\u7528\u539f\u6570\u7ec4\u7684\u5dee\u5206\u6570\u7ec4\u5efa\u6811 int a [ maxn ] = { 0 }, c [ maxn ]; //\u539f\u6570\u7ec4\u548c\u6811\u72b6\u6570\u7ec4 int lowbit ( int x ){ return x & ( - x ); } void updata ( int i , int k ) //\u7b2c i \u4e2a\u5143\u7d20\u52a0 k { while ( i <= n ) { c [ i ] += k ; i += lowbit ( i ); } } int getsum ( int i ) //\u524di\u4e2a { int res = 0 ; while ( i > 0 ) { res += c [ i ]; i -= lowbit ( i ); } return res ; } /* updata(i,a[i] - a[i-1]); //\u5dee\u5206\u5efa\u6811 //[x,y]\u533a\u95f4\u5185\u52a0\u4e0ak updata(x,k); //A[x] - A[x-1]\u589e\u52a0k updata(y+1,-k); //A[y+1] - A[y]\u51cf\u5c11k //\u5355\u70b9\u67e5\u8be2 \u5dee\u5206\u5efa\u6811\u6240\u4ee5\u5355\u70b9\u67e5\u8be2\u53d8\u6210\u4e86\u6c42\u548c int sum = getsum(i); */ \u533a\u95f4\u66f4\u65b0 \u533a\u95f4\u67e5\u8be2 d \u662f a \u7684\u5dee\u5206\u6570\u7ec4 \u6709 \\(a_i = \\sum_{j=1}^{i}{d_j}\\) $\\therefore\\sum_{i=1}^{r}{a_i} = \\sum_{i=1}^{r}{\\sum_{j=1}^{i}{d_j}} $ \u200b \\(= \\sum_{i=1}^{r}{d_i \\times(r-i+1)}\\) \u200b $ = \\sum_{i=1}^{r}{d_i \\times(r+1)}-\\sum_{i=1}^{r}{d_i \\times i}$ \u6240\u4ee5\u7ef4\u62a42\u4e2a\u6811\u72b6\u6570\u7ec4 sum1[i] = d[i]\uff0csum2[i] = d[i]*(i-1)","title":"\u6811\u72b6\u6570\u7ec4"},{"location":"OI/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_3","text":"/*\u533a\u95f4\u548c\u7684\u7ebf\u6bb5\u6811*/ //\u5efa\u6811 void build ( ll x , ll l , ll r ) { if ( l == r ) { scanf ( \"%lld\" , & sum [ x ]); return ; } ll mid = ( l + r ) >> 1 ; build ( x << 1 , l , mid ); build ( x << 1 | 1 , mid + 1 , r ); sum [ x ] = sum [ x << 1 ] + sum [ x << 1 | 1 ]; } //\u4e0b\u653e\u61d2\u6807\u8bb0 void pushdown ( ll x , ll l , ll r ) { ll mid = ( l + r ) / 2 ; lz [ x << 1 ] += lz [ x ], lz [ x << 1 | 1 ] += lz [ x ]; sum [ x << 1 ] += lz [ x ] * ( mid - l + 1 ), sum [ x << 1 | 1 ] += lz [ x ] * ( r - mid ); lz [ x ] = 0 ; } //\u533a\u95f4\u66f4\u65b0 void update ( ll x , ll l , ll r , ll gl , ll gr , ll k ) { if ( l >= gl && r <= gr ) { lz [ x ] += k ; sum [ x ] += ( r - l + 1 ) * k ; return ; } pushdown ( x , l , r ); ll mid = ( l + r ) / 2 ; if ( gl <= mid ) update ( x << 1 , l , mid , gl , gr , k ); if ( gr > mid ) update ( x << 1 | 1 , mid + 1 , r , gl , gr , k ); sum [ x ] = sum [ x << 1 ] + sum [ x << 1 | 1 ]; } //\u533a\u95f4\u548c ll get_sum ( ll x , ll l , ll r , ll gl , ll gr ) { if ( l >= gl && r <= gr ) return sum [ x ]; pushdown ( x , l , r ); ll res = 0 ; ll mid = ( l + r ) / 2 ; if ( gl <= mid ) res += get_sum ( x << 1 , l , mid , gl , gr ); if ( gr > mid ) res += get_sum ( x << 1 | 1 , mid + 1 , r , gl , gr ); return res ; }","title":"\u7ebf\u6bb5\u6811"},{"location":"OI/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_4","text":"int fa [ MAXN ]; //\u521d\u59cb\u5316 void init ( int n ){ for ( int i = 0 ; i < n ; i ++ ) fa [ i ] = i ; //\u7236\u7ed3\u70b9\u662f\u81ea\u5df1 } //\u67e5\u8be2\u5e76\u8def\u5f84\u538b\u7f29 int find ( int x ){ if ( fa [ x ] != x ) fa [ x ] = find ( fa [ x ]); return fa [ x ]; } //\u5408\u5e76 void unite ( int x , int y ){ int fx = find ( x ); int fy = find ( y ); fa [ fx ] = fy ; } //\u67e5\u8be2\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u96c6\u5408 bool same ( int x , int y ){ return find ( x ) == find ( y ); } \u5e26\u6743\u5e76\u67e5\u96c6 int fa [ MAXN ], value [ MAXN ]; //\u7236\u7ed3\u70b9 \u6743\u503c //\u67e5\u8be2 int find ( int x ){ if ( x != fa [ x ]){ int t = fa [ x ]; fa [ x ] = find ( fa [ x ]); value [ x ] += value [ t ]; //\u8fd9\u65f6\u7684\u7236\u4eb2\u7ed3\u70b9\u7684\u6743\u503c\u662f\u7236\u7ed3\u70b9\u5230\u6839\u7ed3\u70b9\u7684\u6743\u503c //\u6240\u4ee5\u52a0\u4e0a\u539f\u672c\u81ea\u5df1\u5230\u7236\u7ed3\u70b9\u7684\u6743\u503c\u5c31\u662f\u81ea\u5df1\u5230\u6839\u7ed3\u70b9\u7684\u6743\u503c } return fa [ x ]; } //\u5408\u5e76, s\u662fx->y\u7684\u6743\u503c void unite ( int x , int y , int s ){ int px = find ( x ); int py = find ( y ); if ( px != py ){ fa [ px ] = py ; value [ px ] = s + value [ y ] - value [ x ]; //x->y->py\u7684\u6743\u503c = x->px->py\u7684\u6743\u503c\uff0c\u6240\u4ee5\u5f97px->py\u7684\u6743\u503c\u4e3a\u4e0a\u5f0f } }","title":"\u5e76\u67e5\u96c6"},{"location":"OI/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_5","text":"","title":"\u6808"},{"location":"OI/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_6","text":"//\u6c42\u51fa\u6bcf\u4e2a\u5143\u7d20\u5de6\u53f3\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u5b83\u7684\u5143\u7d20\u7684\u4e0b\u6807 for ( int i = 1 ; i <= n ; i ++ ) { while ( ! st . empty () && num [ st . top ()] > num [ i ]) { r [ st . top ()] = i ; st . pop (); } if ( st . empty ()) l [ i ] = -1 ; else if ( num [ st . top ()] == num [ i ]) l [ i ] = l [ st . top ()]; else l [ i ] = st . top (); st . push ( i ); } while ( ! st . empty ()) { r [ st . top ()] = n + 1 ; st . pop (); }","title":"\u5355\u8c03\u6808"},{"location":"OI/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_7","text":"","title":"\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784"},{"location":"OI/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_8","text":"\u6d1b\u8c37 P3834 //\u4e00\u822c\u5f0032\u500d\u7a7a\u95f4 const int maxn = 2e5 + 5 ; int a [ maxn ], b [ maxn ], n , m , tot , q ; int lc [ maxn << 5 ], rc [ maxn << 5 ], sum [ maxn << 5 ], rt [ maxn << 5 ]; void build ( int & rt , int l , int r ) { rt = ++ tot , sum [ rt ] = 0 ; if ( l == r ) return ; int mid = ( l + r ) >> 1 ; build ( lc [ rt ], l , mid ), build ( rc [ rt ], mid + 1 , r ); } int update ( int x , int l , int r , int t ) { int xx = ++ tot ; lc [ xx ] = lc [ x ], rc [ xx ] = rc [ x ], sum [ xx ] = sum [ x ] + 1 ; if ( l == r ) return xx ; int mid = ( l + r ) >> 1 ; if ( t <= mid ) lc [ xx ] = update ( lc [ xx ], l , mid , t ); else rc [ xx ] = update ( rc [ xx ], mid + 1 , r , t ); return xx ; } int query ( int u , int v , int l , int r , int k ) { int mid = ( l + r ) >> 1 , t = sum [ lc [ v ]] - sum [ lc [ u ]]; if ( l == r ) return l ; if ( k <= t ) return query ( lc [ u ], lc [ v ], l , mid , k ); else return query ( rc [ u ], rc [ v ], mid + 1 , r , k - t ); } int main () { cin >> n >> m ; for ( int i = 1 ; i <= m ; i ++ ) scanf ( \"%d\" , a + i ), b [ i ] = a [ i ]; sort ( b + 1 , b + 1 + n ); q = unique ( b + 1 , b + 1 + n ) - b - 1 ; build ( rt [ 0 ], 1 , q ); for ( int i = 1 ; i <= n ; i ++ ) { int t = lower_bound ( b + 1 , b + 1 + q , a [ i ]) - b ; rt [ i ] = update ( rt [ i - 1 ], 1 , q , t ); } int l , r , k ; for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%d %d %d\" , & l , & r , & k ); printf ( \"%d \\n \" , b [ query ( rt [ l - 1 ], rt [ r ], 1 , q , k )]); } return 0 ; }","title":"\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811(\u4e3b\u5e2d\u6811)"},{"location":"OI/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_9","text":"//\u9884\u5904\u7406 for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) dp [ i ][ j ] = dp [ i -1 ][ j ] + dp [ i ][ j -1 ] - dp [ i -1 ][ j -1 ] + matrix [ i ][ j ]; //x1, y1, x2, y2 (\u67e5\u8be2\u533a\u95f4) int res = dp [ x2 ][ y2 ] - dp [ x2 ][ y1 -1 ] - dp [ x1 -1 ][ y2 ] + dp [ x1 -1 ][ y1 -1 ];","title":"\u4e8c\u4f4d\u524d\u7f00\u548c"},{"location":"OI/%E6%95%B0%E8%AE%BA/","text":"\u6570\u8bba \u00b6 \u57fa\u7840\u51fd\u6570 \u00b6 gcd \u00b6 \u8bbe \\(a/b=d, a\\%b=r\\) \u5373 \\(a=b\\times d+r\\) \uff0c\u6240\u4ee5 \\(gcd(b, r) | a\\) \uff0c\u53c8 \\(gcd(b, r) | b\\) \uff0c\u6240\u4ee5 \\(gcd(b, r) | gcd(a, b)\\) \u53c8 \\(r=a-b\\times d\\) \uff0c\u6240\u4ee5 \\(gcd(a, b) | r\\) \uff0c\u53c8 \\(gcd(a, b) | b\\) \uff0c\u6240\u4ee5 \\(gcd(a, b) | gcd(b, r)\\) \u6240\u4ee5 \\(gcd(a, b) = gcd(b, r)\\) , \u5373 \\(gcd(a, b) = gcd(b, a\\%b)\\) \u4e00\u4e9b\u6027\u8d28 \\(gcd(a,b)=gcd(a,a+b)=gcd(a,ka+b)\\) \\(gcd(ka,kb)=k*gcd(a,b)\\) \\(gcd(a,b,c)=gcd(gcd(a,b),c)\\) int gcd ( int a , int b ){ return b ? gcd ( b , a % b ) : a ; } lcm \u00b6 int lcm ( int a , int b ){ return a * b / gcd ( a , b ); } exgcd \u00b6 \u6c42 \\(ax + by = gcd(a, b)\\) \u7684\u4e00\u7ec4\u6574\u6570\u89e3 x\uff0cy b = 0\u65f6\uff0c \\(gcd(a, b) = a\\) , x=1\u200b, y=0 \u4e3a\u4e00\u7ec4\u89e3 b != 0 \u65f6 \u8bbe \\(ax_{1} + by_{1} = gcd(a, b)\\) \u200b \\(bx_{2}+ (a\\%b)y_{2} = gcd(b, a\\%b)\\) \u56e0\u4e3a \\(gcd(a, b) = gcd(b, a\\%b)\\) \u6240\u4ee5 \\(bx_{2} + (a\\%b)y_{2} = ax_{1} + by_{1}\\) \u200b \\(a\\%b = a-(a/b)*b\\) , \u4ee3\u5165\u4e0a\u5f0f\u5f97 \u200b \\(bx_{2}+ ( a - (a/b) * b)*y_{2} = ax_{1} + by_{1}\\) \u200b \\(ay_{2} + bx_{2~}- (a/b)*by_{2} = ax_{1} + by_{1}\\) \u200b \\(ay_{2} + b[x_{2}-(a/b)*y_{2}] = ax_{1} + by_{1}\\) \u6240\u4ee5 \\(x_{1} = y_{2}\\) \u200b \\(y_{1} = x_{2} - (a/b)*y_{2}\\) ll exgcd ( ll a , ll b , ll & x , ll & y ) { //\u8fd4\u56de gcd(a, b) if ( ! b ){ x = 1 , y = 0 ; return a ; } ll d = exgcd ( b , a % b , x , y ); ll t = x ; x = y ; y = t - ( a / b ) * y ; return d ; } \u5feb\u901f\u5e42 \u00b6 typedef long long ll ; ll pow ( ll a , ll b , ll p ) { // a^b (mod p) ll res = 1 ; while ( b ){ if ( b & 1 ) res = res * a % p ; a = a * a % p ; b >>= 1 ; } return res ; } \u5feb\u901f\u4e58 \u00b6 //\u9632\u6b62\u4e58\u6cd5\u7206ll ll mul ( ll a , ll b , ll p ){ ll res = 0 ; while ( b ){ if ( b & 1 ) res = ( res + a ) % p ; a = ( a + a ) % p ; b >>= 1 ; } return res ; } \u7d20\u6570 \u00b6 bool isprime ( int x ){ if ( x <= 1 ) return false ; for ( int i = 2 ; i <= x / i ; i ++ ) if ( x % i == 0 ) return false ; return true ; } \u57c3\u6c0f\u7b5b\u7d20\u6570 \u00b6 bool isprime [ N + 1 ]; //0 1 \u662f\u975e\u7d20\u6570 void getPrime (){ for ( int i = 2 , i <= N ; i ++ ) isprime [ i ] = true ; for ( int i = 2 ; i <= N / i ; i ++ ) //\u5982\u679c x>sqrt(N) \u662f\u5408\u6570\uff0c \u5728\u524d\u9762\u5c31\u4f1a\u88ab\u7b5b\u6389 if ( isprime [ i ]) for ( int j = i * i ; j <= N ; j += i ) //2i, 3i, 5i \u90fd\u5df2\u7ecf\u7b5b\u8fc7\uff0c\u53ef\u4ee5\u4ecei*i\u5f00\u59cb isprime [ i ] = false ; } \u6b27\u62c9\u7b5b\u7d20\u6570(\u7ebf\u6027\u7b5b) \u00b6 \\(O(n)\\) int cnt = 0 ; int prime [ N + 1 ]; //\u8bb0\u5f55\u7d20\u6570 bool isprime [ N + 1 ]; void euler (){ for ( int i = 2 ; i <= N ; i ++ ) isprime [ i ] = true ; for ( int i = 2 ; i <= N ; i ++ ){ if ( isprime [ i ]) prime [ cnt ++ ] = i ; //\u8bb0\u5f55 for ( int j = 0 ; j < cnt && i * prime [ j ] <= N ; j ++ ){ isprime [ i * prime [ j ]] = false ; if ( i % prime [ j ] == 0 ) break ; //\u4fdd\u8bc1\u5408\u6570\u88ab\u6700\u5c0f\u7684\u8d28\u56e0\u5b50\u7b5b\u53bb } } } \u7b5b\u533a\u95f4\u5185\u7d20\u6570 \u00b6 //\u7b5b[l, r)\u4e4b\u95f4\u7684\u7d20\u6570 //\u6ce8\u610f\u533a\u95f4\u5f00\u95ed //\u5982\u679cl==1,l++\uff0c\u5426\u5219\u4f1a\u8ba4\u4e3a1\u662f\u7d20\u6570 bool isprime_small [ MAXN ]; //\u8bb0\u5f55\u524d sqrt(r) \u7684\u7d20\u6570 bool isprime [ MAXN ]; //\u5982\u679ci\u662f\u7d20\u6570\uff0c\u8bb0isprime[i-l] = true void segement_prime ( ll l , ll r ){ for ( ll i = 0 ; i * i < r ; i ++ ) isprime_small [ i ] = true ; for ( ll i = 0 ; i < r - l ; i ++ ) isprime [ i ] = true ; for ( ll i = 2 ; i * i < r ; i ++ ) if ( isprime_small [ i ]) { //\u5982\u679c\u662f\u7d20\u6570 for ( ll j = i * i ; j * j < r ; j += i ) //\u7b5b[2, sqrt(b)] isprime_small [ j ] = false ; for ( ll j = max ( 2L L , ( l + i -1 ) / i ) * i ; j < r ; j += i ) //\u7b5b[a, b] isprime [ j - l ] = false ; } } Miller-Rabin \u7d20\u6027\u6d4b\u8bd5 \u00b6 bool check ( ll a , ll r , ll t , ll n ) { ll ret = pow ( a , r , n ), last = ret ; for ( int i = 0 ; i < t ; i ++ ) { ret = mul ( ret , ret , n ); if ( ret == 1 && last != 1 && last != n - 1 ) return true ; last = ret ; } return ret != 1 ; } bool Miller_Rabin ( ll n ) { if ( n == 2 ) return true ; if ( n < 2 || ! ( n & 1 )) return false ; ll r = n - 1 , t = 0 ; while ( ! ( r & 1 )) r >>= 1 , t ++ ; for ( int i = 1 , j ; i <= 8 ; i ++ ) { ll a = rand () % ( n - 2 ) + 2 ; if ( check ( a , r , t , n )) return false ; } return true ; } Pollard-Rho\u5927\u6570\u5206\u89e3 \u00b6 ll pollard ( ll n ) { if ( ! ( n & 1 )) return 2 ; ll c = rand () % ( n - 1 ) + 1 ; ll x = rand () % ( n - 1 ) + 1 , y = x , i = 1 , k = 2 ; while ( true ) { i ++ ; x = ( mul ( x , x , n ) + c ) % n ; ll d = gcd ( y - x + n , n ); if ( d != 1 && d != n ) return d ; if ( y == x ) return n ; if ( i == k ) { y = x ; k <<= 1 ; } } } /* \u500d\u589e\u4f18\u5316 ll pr(ll n) { ll x = 0, y = 0; ll c = 1ll * rand() % (n - 1) + 1; int step = 0, goal = 1; ll val = 1; for (goal = 1;; goal <<= 1, y = x, val = 1) { for (step = 1; step <= goal; ++step) { x = (mul(x, x, n) + c) % n; val = mul(val, abs(y - x), n); if ((step % 127) == 0) { ll d = gcd(val, n); if (d > 1) return d; } } ll d = gcd(val, n); if (d > 1) return d; } } */ ll fac [ 10000 ]; ll tot = 0 ; void find_fac ( ll n ) { if ( Miller_Rabin ( n )) { fac [ tot ++ ] = n ; return ; } ll p = n ; while ( p >= n ) p = pollard ( p ); find_fac ( p ), find_fac ( n / p ); } \u6b27\u62c9\u51fd\u6570 \u00b6 \u5b9a\u4e49: \\(\\varphi(n)\\) \u8868\u793a\u5c0f\u4e8e\u7b49\u4e8e \\(n\\) \u4e14\u4e0e \\(n\\) \u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570\uff0c\u6bd4\u5982 \\(\\varphi(1)=1\\) \u901a\u5f0f\uff1a \\(\\varphi(x)=x\\prod_{i=1}^n{(1-\\frac{1}{p_i})}\\) \uff0c\u5176\u4e2d \\(p_i\\) \u662f \\(x\\) \u7684\u6240\u6709\u8d28\u56e0\u6570 \u57fa\u672c\u6027\u8d28 \u00b6 \\(n\\) \u662f\u8d28\u6570\u65f6\uff0c \\(\\varphi(n)=n-1\\) \\(p\\) \u662f\u8d28\u6570\u65f6\uff0c \\(\\varphi(p^k)=(p-1)\\times p^{k-1}\\) \u79ef\u6027\u6027\u8d28\uff0c\u5982\u679c \\(gcd(a,b)=1\\) \uff0c\u5219 \\(\\varphi(a\\times b)=\\varphi(a)\\times \\varphi(b)\\) \u7279\u522b\u7684\uff0c \\(n\\) \u662f\u5947\u6570\u65f6\uff0c \\(\\varphi(2n)=\\varphi(n)\\) \\(n > 2\\) \u65f6\uff0c \\(\\varphi(n)\\) \u4e3a\u5076\u6570 \\(n=\\sum_{d|n}\\varphi(d)\\) \u6b27\u62c9\u5b9a\u7406\uff0c\u82e5 \\(gcd(a,m)=1\\) \uff0c\u5219 \\(a^{\\varphi(m)}\\equiv 1(mod \\quad m)\\) \u6269\u5c55\u6b27\u62c9\u5b9a\u7406 \\[ a^b\\equiv \\begin{cases} a^{b \\% \\varphi(p)}&gcd(a,p)=1 \\\\ a^b&gcd(a,p)\\neq1,b<\\varphi(p) \\\\ a^{b \\% \\varphi(p)+\\varphi(p)}&gcd(a,p)\\neq1,b\\geq\\varphi(p) \\end{cases} (mod\\ p) \\] \u6c42\u5355\u4e2a\u6570\u7684\u6b27\u62c9\u51fd\u6570 \u00b6 \\(O(\\sqrt{n})\\) ll phi ( ll n ){ ll res = n ; for ( ll i = 2 ; i * i <= n ; i ++ ){ if ( n % i == 0 ){ res -= res / i ; while ( n % i == 0 ) n /= i ; } } if ( n > 1 ) res -= res / n ; return res ; } \u57c3\u6c0f\u6c42\u6b27\u62c9\u51fd\u6570 \u00b6 \\(\\varphi(x)=x\\prod_{i=1}^n{(1-\\frac{1}{p_i})}\\) void euler ( int n ){ for ( int i = 1 ; i <= n ; i ++ ) phi [ i ] = i ; for ( int i = 2 ; i <= n ; i ++ ) if ( phi [ i ] == i ) //\u8fd9\u4ee3\u8868i\u662f\u8d28\u6570 for ( int j = i ; j <= n ; j += i ) phi [ j ] = phi [ j ] / i * ( i -1 ); //\u628ai\u7684\u500d\u6570\u66f4\u65b0\u6389 } \u6b27\u62c9\u7b5b\u6c42\u6b27\u62c9\u51fd\u6570 \u00b6 \\(if(i\\%prime[j] != 0)\\) \uff0c\u5219 \\(i\\) \u4e0e \\(prime[j]\\) \u4e92\u8d28 \u7531\u79ef\u6027\u6027\u8d28\u53ef\u5f97\uff0c \\(phi[i*prime[j]] = phi[i]*phi[prime[j]]\\) \\(if(i\\%prime[j] == 0)\\) \uff0c\u5219 \\(i\\) \u4e2d\u6709 \\(i*prime[j]\\) \u7684\u6240\u6709\u8d28\u56e0\u5b50\uff0c\u6709 \\(\\varphi(i*prime[j])=prime[j]*i*\\prod_{k=1}^n{(1-\\frac{1}{k_i})}=\\varphi(i)*prime[j]\\) int prime [ maxn ], cnt = 0 ; bool vis [ maxn ]; void euler ( int n ){ phi [ 1 ] = 1 ; //1\u8981\u7279\u5224 for ( int i = 2 ; i < = n ; i ++ ){ if ( vis [ i ] == 0 ){ //i\u662f\u8d28\u6570 prime [ cnt ++ ] = i ; phi [ i ] = i -1 ; } for ( int j = 1 ; j < cnt && prime [ j ] * i <= n ; j ++ ){ vis [ i * prime [ j ]] = 1 ; if ( i % prime [ j ] == 0 ){ phi [ i * prime [ j ]] = phi [ i ] * prime [ j ]; //\u82e5prime[j]\u662fi\u7684\u8d28\u56e0\u5b50\uff0c\u5219\u6839\u636e\u8ba1\u7b97\u516c\u5f0f\uff0ci\u5df2\u7ecf\u5305\u62eci*prime[j]\u7684\u6240\u6709\u8d28\u56e0\u5b50 break ; //\u4fdd\u8bc1\u6bcf\u4e2a\u6570\u53ea\u4f1a\u88ab\u81ea\u5df1\u6700\u5c0f\u7684\u56e0\u5b50\u7b5b\u6389\u4e00\u6b21 } else phi [ i * prime [ j ]] = phi [ i ] * phi [ prime [ j ]]; //\u79ef\u6027\u51fd\u6570\u7684\u6027\u8d28 } } } \u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 \u00b6 CRT \u00b6 \u6d1b\u8c37 P3868 \\(X \u2261 r_{i} ( mod\\quad m_{i} )\\) \u8981\u6c42\uff1a \\(m_i\\) \u4e24\u4e24\u4e92\u8d28 ll CRT ( ll n , ll * r , ll * m ){ ll res = 0 , M = 1 ; for ( int i = 0 ; i < n ; i ++ ) M *= m [ i ]; for ( int i = 0 ; i < n ; i ++ ) { ll x , y ; ll tmp = M / m [ i ]; ll d = exgcd ( tmp , m [ i ], x , y ); //gcd(tmp, m[i]) = 1 x = ( x % m [ i ] + m [ i ]) % m [ i ]; res = ( res + tmp * x * r [ i ]) % M ; //\u53ef\u80fd\u9700\u8981\u7528\u5230\u5feb\u901f\u4e58\u9632\u6b62\u6ea2\u51fa } return ( res + M ) % M ; } EXCRT \u00b6 \u6d1b\u8c37 P4777 \\(X \u2261 r_{i} ( mod\\quad m_{i} )\\) \u4e0d\u8981\u6c42 \\(m_i\\) \u4e24\u4e24\u4e92\u8d28 \u6ee1\u8db3\u7b2c\u4e00\u4e2a\u6761\u4ef6\u7684\u89e3\u4e3a \\(r_1\\) \u5047\u8bbe\u6ee1\u8db3\u524d \\(k-1\\) \u4e2a\u6761\u4ef6\u7684\u4e00\u4e2a\u7279\u89e3\u4e3a \\(res\\) \uff0c \\(M_{k-1}\\) \u4e3a\u524d \\(k-1\\) \u4e2a \\(m\\) \u7684 lcm \u5219\u524d \\(k-1\\) \u4e2a\u65b9\u7a0b\u7684\u901a\u89e3\u4e3a $$ res+x\\times M_{k-1} $$ \u90a3\u4e48\u5bf9\u4e8e\u524d \\(k\\) \u4e2a\u65b9\u7a0b,\u5982\u679c\u6709\u89e3\uff0c\u5219 \u5b58\u5728\u6574\u6570 \\(x\\) \uff0c\u4f7f $$ res+x\\times M_{k-1}\\equiv r_k\\quad (mod\\quad m_k) $$ \u5373 $$ x\\times M_{k-1}\\equiv r_k-res\\quad (mod\\quad m_k) $$ \u5229\u7528\u62d3\u6b27\u6c42\u89e3\u5f97 \\(x\\) \uff0c\u5219\u524d \\(k\\) \u4e2a\u65b9\u7a0b\u7684\u4e00\u4e2a\u7279\u89e3\u4e3a $$ res+x\\times M_{k-1} $$ \u901a\u89e3\u4e3a \\(\u7279\u89e3 + x^{'}M_k\\) ll EXCRT ( ll n , ll * r , ll * m ){ ll res = r [ 0 ], M = m [ 0 ]; ll x , y ; for ( int i = 1 ; i < n ; i ++ ) { ll c = ( r [ i ] - res % m [ i ] + m [ i ]) % m [ i ]; ll d = exgcd ( M , m [ i ], x , y ), bg = m [ i ] / d ; x = ( x % bg + bg ) % bg ; if ( c % d != 0 ) return -1 ; //\u65e0\u89e3,\u56e0\u4e3a\u65e0\u6cd5\u8ba9\u4f59\u6570\u6269\u5927\u6210c x = mul ( x , c / d , bg ); //\u5feb\u901f\u4e58 res += x * M ; M *= bg ; //lcm res = ( res % M + M ) % M ; } return res ; } \u540c\u4f59\u95ee\u9898 \u00b6 \u9006\u5143 \u00b6 \u540c\u4f59\u4e0d\u6ee1\u8db3\u9664\u6cd5\uff0c \\(a/b\\quad mod \\quad p\\quad != (a\\quad mod\\quad p)/(b\\quad mod\\quad p)\\) \u5f15\u5165 \\(b\\) \u7684\u9006\u5143 \\(x\\) , \u5373 \\(b*x = 1 (mod\\quad p)\\) \uff0cb \u4e0e p \u4e92\u8d28 \u5047\u8bbe \\(a/b = k (mod\\quad p)\\) \u540c\u4e58 \\(bx\\) \u5f97 $ a/b * bx = k * 1\uff08mod\\quad p)$ \u200b \\(a*x = k (mod\\quad p)\\) \u6ce8\u610f\uff1a b \u548c p \u4e92\u8d28\uff0cb \u624d\u6709\u5173\u4e8e p \u7684\u9006\u5143 \u8d39\u9a6c\u5c0f\u5b9a\u7406\u6c42\u9006\u5143 \u00b6 \u8d39\u9a6c\u5c0f\u5b9a\u7406 \uff1a\u5982\u679c \\(p\\) \u4e3a\u8d28\u6570\uff0c\u4e14 \\(a\\) \u4e0e \\(p\\) \u4e92\u8d28(\u5373 \\(a\\) \u4e0d\u662f \\(p\\) \u7684\u500d\u6570)\uff0c\u5219 \\(a^{p-1} \\equiv 1 \uff08mod\\quad p)\\) \u6240\u4ee5\u6709 \\(a * a^{p-2} \\equiv 1 (mod\\quad p)\\) , \u5373 \\(a^{p-2} (mod\\quad p)\\) \u662f a \u7684\u9006\u5143 //\u7528\u5feb\u901f\u5e42 ll pow ( ll a , ll p ){ int res = 1 ; int d = p -2 ; while ( d ) { if ( d & 1 ) res = res * a % p ; a = a * a % p ; d >>= 1 ; } return res ; } \u62d3\u5c55\u6b27\u51e0\u91cc\u5f97\u6c42\u9006\u5143 \u00b6 \u5982\u679c \\(b\\) \u4e0e \\(p\\) \u4e92\u8d28\uff0c\u5373 \\(gcd(b, p) = 1\\) \u8981\u89e3 \\(b*x = 1 (mod\\quad p)\\) , \u5373\u6c42 \\(bx + yp = 1 = gcd(b, p)\\) \u7684\u89e3 \\(x\\) ll inv ( ll b , ll p ) { ll x , y ; ll d = exgcd ( b , p , x , y ); return d == 1 ? ( x + p ) % p : -1 ; //\u8fd4\u56de -1 \u8bf4\u660e b,p \u4e0d\u4e92\u8d28 } \u6b27\u62c9\u51fd\u6570\u6c42\u9006\u5143 \u00b6 \u6d1b\u8c37 P3811 \u662f\u8d39\u5c0f\u7684\u63a8\u5e7f\uff0c\u4e0d\u8981\u6c42 \\(p\\) \u4e3a\u8d28\u6570\uff0c\u4f46 \\(gcd(a,p)=1\\) \\(a^{\\varphi(p)}\\equiv1(mod\\quad p)\\) \uff0c\u6240\u4ee5\u5176\u9006\u5143\u4e3a \\(a^{\\varphi(n)-1}\\) ll phi ( ll n ){ ll res = n ; for ( ll i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { res -= res / i ; while ( n % i == 0 ) n /= i ; } } if ( n > 1 ) res -= res / n ; return res ; } ans = pow ( a , phi ( p ) -1 , p ); \u9636\u4e58\u9006\u5143 \u00b6 \u6c42\u9636\u4e58\u7684\u9006\u5143\uff0c\u5148\u7528\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6c42\u51fa n! \u5728 p \u4e0b\u7684\u9006\u5143\uff0c\u518d\u5f80\u524d\u63a8 \u5047\u8bbe n! \u7684\u9006\u5143\u4e3a \\([n!]^{-1}\\) , \u8981\u6c42 \\((n-1)!\\) \u7684\u9006\u5143 $$ (n-1)! \\times n[n!]^{-1} \u2261 1 (mod\\quad p) $$ \u6240\u4ee5\uff0c \\((n-1)!\\) \u7684\u9006\u5143\u5c31\u662f \\(n[n!]^{-1}\\) void fa_inv ( ll n , ll p ){ fact [ 0 ] = 1 ; //factorial for ( int i = 1 ; i <= n ; i ++ ) fact [ i ] = fact [ i -1 ] * i % p ; finv [ N ] = pow ( fact [ n ], p -2 , p ); for ( int i = n -1 ; i >= 0 ; i -- ) finv [ i ] = ( i + 1 ) * finv [ i + 1 ] % p ; } \u7ebf\u6027\u6c42\u9006\u5143(\u6253\u8868) \u00b6 \u6d1b\u8c37 P3811 \u8981\u6c42\u51fa 1~n \u4e2d\u6240\u6709\u6570\u5bf9 \\(p\\) \u7684\u9006\u5143\uff0c\u9009\u62e9\u6253\u8868 \u200b \\(1^{\u22121} \u2261 1 (mod\\quad p)\\) \u8bbe \\(p = k * i + r\\) \u5176\u4e2d 1 < r < i < p, \u5373 \\(k = p/i, r = p\\quad mod\\quad i\\) \u6240\u4ee5\u6709 \\(k * i + r \u2261 0 ( mod\\quad p )\\) \u4e24\u8fb9\u540c\u65f6\u4e58\u4e0a \\(i^{\u22121} * r^{\u22121}\\) \u5f97 \\(k * r^{\u22121} + i^{\u22121} \u2261 0 ( mod\\quad p )\\) \u200b \\(i^{\u22121} \u2261 \u2212k * r^{\u22121} ( mod\\quad p )\\) \u5f97\u9012\u63a8\u516c\u5f0f \\(i^{-1} \u2261 -\uff08p/i) * (p\\quad mod\\quad i)^{-1} (mod\\quad p)\\) \u6574\u7406\u5f97 \\(inv[i] = (p - p/i) * inv[p\\%i] \\% p\\) \u5176\u4e2d p % i \u6bd4 i \u5c0f void inverse =- ( int n , int p ) { inv [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) inv [ i ] = ( ll )( p - p / i ) * inv [ p % i ] % p ; } Lucas\u5b9a\u7406 \u00b6 \u6d1b\u8c37 P3807 HDU 3037 \u89e3\u51b3\u7ec4\u5408\u6570\u53d6\u4f59\u7684\u95ee\u9898\uff1a (p\u5fc5\u987b\u662f\u7d20\u6570,\u4e0d\u7136\u4e0d\u80fd\u7528\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6c42\u9006\u5143) $$ C(n,m) = \\prod_{i=0}^{k}{C(n_i, m_i)}(mod\\quad p) $$ \\[ n = n_k p^k+n_{k-1} p^{k-1}+\\cdots+n_1p+n_0 \\] \\[ m=m_k p^k+m_{k-1} p^{k-1}+\\cdots+m_1p+m_0 \\] //\u9884\u5904\u7406\u9636\u4e58 void getFact ( ll p ) { fact [ 0 ] = 1 ; for ( ll i = 1 ; i <= p ; i ++ ) f [ i ] = f [ i -1 ] * i % p ; } //\u8ba1\u7b97\u7ec4\u5408\u6570 ll comb ( ll n , ll m , ll p ) { if ( m > n ) return 0 ; return fact [ n ] * pow ( f [ m ], p -2 , p ) % p * pow ( f [ n - m ], p -2 , p ) % p ; //\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6c42\u9006\u5143 } ll lucas ( ll n , ll m , ll p ) { if ( ! m ) return 1 ; return lucas ( n / p , m / p , p ) % p * comb ( n % p , m % p , p ) % p ; } BSGS \u00b6 \u6c42 \\(a^x=b(mod\\ \\ p)\\) \u7684 \\(x\\) \u6700\u5c0f\u7684\u89e3 ll bsgs ( ll a , ll b , ll p ) { map < ll , ll > hash ; hash . clear (); b %= p ; ll t = sqrt ( p ) + 1 ; for ( ll i = 0 ; i < t ; i ++ ) hash [ b * ksm ( a , i , p ) % p ] = i ; a = ksm ( a , t , p ); if ( ! a ) return b == 0 ? 1 : -1 ; for ( ll i = 1 ; i <= t ; i ++ ) { ll val = ksm ( a , i , p ); int j = hash . find ( val ) == hash . end () ? -1 : hash [ val ]; if ( j >= 0 && i * t - j >= 0 ) return i * t - j ; } return -1 ; //\u65e0\u89e3 } \u6570\u503c\u5206\u6790 \u00b6 Simpson \u516c\u5f0f \u00b6 \u5982\u679c\u539f\u51fd\u6570\u662f\u6b21\u6570\u4e0d\u8d85\u8fc7\u4e8c\u6b21\u7684\u591a\u9879\u5f0f\uff0c\u53ef\u4ee5\u7cbe\u786e\u8ba1\u7b97\u79ef\u5206\u503c\uff0c\u53ea\u9700\u8981\u77e5\u9053\u7aef\u70b9\u548c\u4e2d\u70b9\u7684\u503c $$ \\int_{a}^{b}{f(x)}dx \\approx \\frac{b-a}{6}(\\quad f(a)+4f(\\frac{a+b}{2})+f(b)\\quad) $$ \u9ad8\u65af\u7ea6\u65e6\u6d88\u5143 \u00b6 \u6d1b\u8c37 P3389 \\(O(n^3)\\) \uff0c\u65b9\u7a0b\u6570\u548c\u672a\u77e5\u6570\u90fd\u8981\u6c42\u662fn\uff0c\u7ed3\u679c\u5728 \\(a[i][n+1]\\) \u4e2d\uff0c\u8fd4\u56de\u503c1\u8868\u793a\u6709\u552f\u4e00\u89e3\uff0c0\u8868\u793a\u65e0\u89e3 const double eps = 1e-8 ; int guass_jordan ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) { int r = i ; for ( int j = i ; j <= n ; j ++ ) //\u628a\u6b63\u5728\u5904\u7406\u7684\u672a\u77e5\u6570\u7cfb\u6570\u7edd\u5bf9\u503c\u6700\u5927\u7684\u653e\u4e0a\u6765 if ( fabs ( a [ r ][ i ]) < fabs ( a [ j ][ i ])) r = j ; if ( r != i ) //\u4ea4\u6362 for ( int j = 1 ; j <= n + 1 ; j ++ ) swap ( a [ i ][ j ], a [ r ][ j ]); if ( fabs ( a [ i ][ i ]) < eps ) return 0 ; //\u65e0\u89e3 for ( int j = i + 1 ; j <= n + 1 ; j ++ ) a [ i ][ j ] /= a [ i ][ i ]; //\u7cfb\u6570\u5316\u4e3a1,\u6ce8\u610fi+1\uff0c\u5982\u679c\u4ecei\u5f00\u59cb\u4f1a\u5f71\u54cd\u5230\u540e\u9762 for ( int j = 1 ; j <= n ; j ++ ) if ( j != i ) for ( int k = i + 1 ; k <= n + 1 ; k ++ ) //\u6ce8\u610fi+1\uff0c\u5982\u679c\u4ecei\u5f00\u59cb\u4f1a\u5f71\u54cd\u5230\u540e\u9762 a [ j ][ k ] -= a [ i ][ k ] * a [ j ][ i ]; } return 1 ; } \u5176\u4ed6 \u00b6 \u88f4\u8700\u5b9a\u7406 \u00b6 \u82e5 \\(a,b\\) \u662f\u6574\u6570,\u4e14 \\(gcd(a,b)=d\\) \uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u7684\u6574\u6570 \\(x,y\\) , \\(ax+by\\) \u90fd\u4e00\u5b9a\u662f \\(d\\) \u7684\u500d\u6570\uff0c\u5373 \\(d|(ax+by)\\) \u7279\u522b\u5730\uff0c\u4e00\u5b9a\u5b58\u5728\u6574\u6570 \\(x,y\\) \uff0c\u4f7f \\(ax+by=d\\) \u6210\u7acb\u3002 \u91cd\u8981\u63a8\u8bba\uff1a \\(a,b\\) \u4e92\u8d28\u7684\u5145\u8981\u6761\u4ef6\u662f\u5b58\u5728\u6574\u6570 \\(x,y\\) \u4f7f \\(ax+by=1\\) \u552f\u4e00\u5206\u89e3\u5b9a\u7406 \u00b6 \u6b63\u6574\u6570 \\(N\\) \u7684\u6807\u51c6\u5206\u89e3\u5f0f\uff1a \\(N=p_1^{a_1}p_2^{a_2}...p_n^{a_n}\\) \u90a3 \\(N\\) \u7684\u6b63\u56e0\u6570\u4e2a\u6570\u4e3a \\(\\sigma_0(N)=(1+a_1)(1+a_2)...(1+a_n)\\) \u6240\u6709\u6b63\u56e0\u6570\u7684\u548c\u4e3a \\(\\sigma_1(N)=(1+p_1+p_1^2+...+p_1^{a_1})...(1+p_n+p_n^2+...+p_n^{a_n})\\) \u6574\u6570\u5206\u5757 \u00b6 \\(\\frac{n}{1}+\\frac{n}{2}+\\frac{n}{3}+..+\\frac{n}{n}\\) \u7684\u548c ll ans = 0 ; for ( int l = 1 , r ; l <= n ; l = r + 1 ) { r = n / ( n / l ); //\u6bcf\u6bb5\u533a\u95f4\u7684\u53f3\u7aef\u70b9 ans += ( ll )( n / l ) * ( r - l + 1 ); } \u65af\u7279\u6797\u516c\u5f0f \u00b6 \\[ n! \\approx \\sqrt{2 \\pi n}(\\frac{n}{e})^n \\] \u7528 \\(log10\\) \u5feb\u901f\u8ba1\u7b97\u5927\u6570\u7684\u4f4d\u6570 \u9519\u6392\u516c\u5f0f \u00b6 \\[ f(n) = (n-1)(f(n-1)f(n-2)) \\] \u5bb9\u65a5\u539f\u7406 \u00b6 HDU 4135 $$ |U(A_i)|=\\sum_{1\\leq i\\leq m}{|A_i|}-\\sum_{i\\leq i<j\\leq m}{|A_i\\bigcap A_j|}+ \\dots+(-1)^{m+1}\\sum|A_1\\bigcap A_2\\bigcap \\dots\\bigcap A_m| $$ void solve () { int res = 0 ; for ( int i = 1 ; i < ( 1 << m ); i ++ ) { int cnt = 0 ; for ( int j = i ; j != 0 ; j >>= 1 ) cnt += j & 1 ; ll lcm = 1 ; for ( int j = 0 ; j < m ; j ++ ) { if ( ( i >> j ) & 1 ) { lcm = lcm / gcd ( lcm , num [ j ]) * num [ j ]; //eg,\u662f2\u7684\u500d\u6570\u4e0d\u4e00\u5b9a\u662f4\u7684\u500d\u6570 if ( lcm > n ) break ; } } if ( cnt % 2 == 0 ) res -= n / lcm ; else res += n / lcm ; } cout << res ; } Catalan\u6570 \u00b6 \u8bbe h(n) \u8868\u793a Catalan\u6570\u7684\u7b2cn\u9879\uff0c \\(h(0) = 1, h(1) = 1\\) \u9012\u63a8\u5f0f\uff1a \\(h(n)=h(0)*h(n-1)+h(1)*h(n-2)+...+h(n-1)*h(0)(n\\geq2)\\) \u53e6\u7c7b\u9012\u63a8\u5f0f\uff1a \\(h(n)=h(n-1)*(4*n-2)/(n+1)\\) \u9012\u63a8\u5173\u7cfb\u7684\u89e3\uff1a \\(h(n)=C(2n,n)/(n+1)(n=0,1,2,...)\\) \u9012\u63a8\u5173\u7cfb\u7684\u53e6\u7c7b\u89e3\uff1a \\(h(n)=C(2n,n)-C(2n,n-1)(n=0,1,2,...)\\) eg\uff1a\u8fdb\u51fa\u6808\uff0c\u7535\u5f71\u8d2d\u7968\uff0c\u5706\u5185\u8fde\u5f26\uff0c\u51f8\u591a\u8fb9\u5f62\u7684\u5256\u5206\uff0cn\u5bf9\u62ec\u53f7\u5f62\u6210\u7684\u5408\u6cd5\u62ec\u53f7\u8868\u8fbe\u5f0f\u7684\u4e2a\u6570\uff0c n+1\u4e2a\u6570\u8fde\u4e58\u4e0d\u540c\u7684\u4e58\u6cd5\u987a\u5e8f\u6570\u3001 Bell\u6570\u548cStirling\u6570 \u00b6 \u7b2c\u4e00\u7c7b Stirling\u6570\u9012\u63a8\u5f0f\uff1a \\(S(i,j)=(i-1)*S(i-1,j)+S(i-1,j-1)\\) eg\uff1ai \u4e2a\u4e0d\u540c\u5143\u7d20\u6784\u6210 j \u4e2a\u5706\u6392\u5217\u7684\u6570\u76ee \u7b2c\u4e8c\u7c7b Stirling\u6570\u9012\u63a8\u5f0f\uff1a \\(S(i,j)=j*S(i-1,j)+S(i-1,j-1)\\) eg\uff1ai \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u5212\u5206\u4e3a j \u4e2a\u975e\u7a7a\u96c6\u7684\u65b9\u6cd5\u7684\u6570\u76ee Bell\u6570\u548c\u7b2c\u4e8c\u7c7bStirling\u6570\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a \\(B_n=\\sum_{k=1}^n{S(n,k)}\\) eg\uff1an \u4e2a\u4e0d\u540c\u7684\u6570\u7684\u5212\u5206\u65b9\u6848\u6570","title":"\u6570\u8bba"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_1","text":"","title":"\u6570\u8bba"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_2","text":"","title":"\u57fa\u7840\u51fd\u6570"},{"location":"OI/%E6%95%B0%E8%AE%BA/#gcd","text":"\u8bbe \\(a/b=d, a\\%b=r\\) \u5373 \\(a=b\\times d+r\\) \uff0c\u6240\u4ee5 \\(gcd(b, r) | a\\) \uff0c\u53c8 \\(gcd(b, r) | b\\) \uff0c\u6240\u4ee5 \\(gcd(b, r) | gcd(a, b)\\) \u53c8 \\(r=a-b\\times d\\) \uff0c\u6240\u4ee5 \\(gcd(a, b) | r\\) \uff0c\u53c8 \\(gcd(a, b) | b\\) \uff0c\u6240\u4ee5 \\(gcd(a, b) | gcd(b, r)\\) \u6240\u4ee5 \\(gcd(a, b) = gcd(b, r)\\) , \u5373 \\(gcd(a, b) = gcd(b, a\\%b)\\) \u4e00\u4e9b\u6027\u8d28 \\(gcd(a,b)=gcd(a,a+b)=gcd(a,ka+b)\\) \\(gcd(ka,kb)=k*gcd(a,b)\\) \\(gcd(a,b,c)=gcd(gcd(a,b),c)\\) int gcd ( int a , int b ){ return b ? gcd ( b , a % b ) : a ; }","title":"gcd"},{"location":"OI/%E6%95%B0%E8%AE%BA/#lcm","text":"int lcm ( int a , int b ){ return a * b / gcd ( a , b ); }","title":"lcm"},{"location":"OI/%E6%95%B0%E8%AE%BA/#exgcd","text":"\u6c42 \\(ax + by = gcd(a, b)\\) \u7684\u4e00\u7ec4\u6574\u6570\u89e3 x\uff0cy b = 0\u65f6\uff0c \\(gcd(a, b) = a\\) , x=1\u200b, y=0 \u4e3a\u4e00\u7ec4\u89e3 b != 0 \u65f6 \u8bbe \\(ax_{1} + by_{1} = gcd(a, b)\\) \u200b \\(bx_{2}+ (a\\%b)y_{2} = gcd(b, a\\%b)\\) \u56e0\u4e3a \\(gcd(a, b) = gcd(b, a\\%b)\\) \u6240\u4ee5 \\(bx_{2} + (a\\%b)y_{2} = ax_{1} + by_{1}\\) \u200b \\(a\\%b = a-(a/b)*b\\) , \u4ee3\u5165\u4e0a\u5f0f\u5f97 \u200b \\(bx_{2}+ ( a - (a/b) * b)*y_{2} = ax_{1} + by_{1}\\) \u200b \\(ay_{2} + bx_{2~}- (a/b)*by_{2} = ax_{1} + by_{1}\\) \u200b \\(ay_{2} + b[x_{2}-(a/b)*y_{2}] = ax_{1} + by_{1}\\) \u6240\u4ee5 \\(x_{1} = y_{2}\\) \u200b \\(y_{1} = x_{2} - (a/b)*y_{2}\\) ll exgcd ( ll a , ll b , ll & x , ll & y ) { //\u8fd4\u56de gcd(a, b) if ( ! b ){ x = 1 , y = 0 ; return a ; } ll d = exgcd ( b , a % b , x , y ); ll t = x ; x = y ; y = t - ( a / b ) * y ; return d ; }","title":"exgcd"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_3","text":"typedef long long ll ; ll pow ( ll a , ll b , ll p ) { // a^b (mod p) ll res = 1 ; while ( b ){ if ( b & 1 ) res = res * a % p ; a = a * a % p ; b >>= 1 ; } return res ; }","title":"\u5feb\u901f\u5e42"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_4","text":"//\u9632\u6b62\u4e58\u6cd5\u7206ll ll mul ( ll a , ll b , ll p ){ ll res = 0 ; while ( b ){ if ( b & 1 ) res = ( res + a ) % p ; a = ( a + a ) % p ; b >>= 1 ; } return res ; }","title":"\u5feb\u901f\u4e58"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_5","text":"bool isprime ( int x ){ if ( x <= 1 ) return false ; for ( int i = 2 ; i <= x / i ; i ++ ) if ( x % i == 0 ) return false ; return true ; }","title":"\u7d20\u6570"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_6","text":"bool isprime [ N + 1 ]; //0 1 \u662f\u975e\u7d20\u6570 void getPrime (){ for ( int i = 2 , i <= N ; i ++ ) isprime [ i ] = true ; for ( int i = 2 ; i <= N / i ; i ++ ) //\u5982\u679c x>sqrt(N) \u662f\u5408\u6570\uff0c \u5728\u524d\u9762\u5c31\u4f1a\u88ab\u7b5b\u6389 if ( isprime [ i ]) for ( int j = i * i ; j <= N ; j += i ) //2i, 3i, 5i \u90fd\u5df2\u7ecf\u7b5b\u8fc7\uff0c\u53ef\u4ee5\u4ecei*i\u5f00\u59cb isprime [ i ] = false ; }","title":"\u57c3\u6c0f\u7b5b\u7d20\u6570"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_7","text":"\\(O(n)\\) int cnt = 0 ; int prime [ N + 1 ]; //\u8bb0\u5f55\u7d20\u6570 bool isprime [ N + 1 ]; void euler (){ for ( int i = 2 ; i <= N ; i ++ ) isprime [ i ] = true ; for ( int i = 2 ; i <= N ; i ++ ){ if ( isprime [ i ]) prime [ cnt ++ ] = i ; //\u8bb0\u5f55 for ( int j = 0 ; j < cnt && i * prime [ j ] <= N ; j ++ ){ isprime [ i * prime [ j ]] = false ; if ( i % prime [ j ] == 0 ) break ; //\u4fdd\u8bc1\u5408\u6570\u88ab\u6700\u5c0f\u7684\u8d28\u56e0\u5b50\u7b5b\u53bb } } }","title":"\u6b27\u62c9\u7b5b\u7d20\u6570(\u7ebf\u6027\u7b5b)"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_8","text":"//\u7b5b[l, r)\u4e4b\u95f4\u7684\u7d20\u6570 //\u6ce8\u610f\u533a\u95f4\u5f00\u95ed //\u5982\u679cl==1,l++\uff0c\u5426\u5219\u4f1a\u8ba4\u4e3a1\u662f\u7d20\u6570 bool isprime_small [ MAXN ]; //\u8bb0\u5f55\u524d sqrt(r) \u7684\u7d20\u6570 bool isprime [ MAXN ]; //\u5982\u679ci\u662f\u7d20\u6570\uff0c\u8bb0isprime[i-l] = true void segement_prime ( ll l , ll r ){ for ( ll i = 0 ; i * i < r ; i ++ ) isprime_small [ i ] = true ; for ( ll i = 0 ; i < r - l ; i ++ ) isprime [ i ] = true ; for ( ll i = 2 ; i * i < r ; i ++ ) if ( isprime_small [ i ]) { //\u5982\u679c\u662f\u7d20\u6570 for ( ll j = i * i ; j * j < r ; j += i ) //\u7b5b[2, sqrt(b)] isprime_small [ j ] = false ; for ( ll j = max ( 2L L , ( l + i -1 ) / i ) * i ; j < r ; j += i ) //\u7b5b[a, b] isprime [ j - l ] = false ; } }","title":"\u7b5b\u533a\u95f4\u5185\u7d20\u6570"},{"location":"OI/%E6%95%B0%E8%AE%BA/#miller-rabin","text":"bool check ( ll a , ll r , ll t , ll n ) { ll ret = pow ( a , r , n ), last = ret ; for ( int i = 0 ; i < t ; i ++ ) { ret = mul ( ret , ret , n ); if ( ret == 1 && last != 1 && last != n - 1 ) return true ; last = ret ; } return ret != 1 ; } bool Miller_Rabin ( ll n ) { if ( n == 2 ) return true ; if ( n < 2 || ! ( n & 1 )) return false ; ll r = n - 1 , t = 0 ; while ( ! ( r & 1 )) r >>= 1 , t ++ ; for ( int i = 1 , j ; i <= 8 ; i ++ ) { ll a = rand () % ( n - 2 ) + 2 ; if ( check ( a , r , t , n )) return false ; } return true ; }","title":"Miller-Rabin \u7d20\u6027\u6d4b\u8bd5"},{"location":"OI/%E6%95%B0%E8%AE%BA/#pollard-rho","text":"ll pollard ( ll n ) { if ( ! ( n & 1 )) return 2 ; ll c = rand () % ( n - 1 ) + 1 ; ll x = rand () % ( n - 1 ) + 1 , y = x , i = 1 , k = 2 ; while ( true ) { i ++ ; x = ( mul ( x , x , n ) + c ) % n ; ll d = gcd ( y - x + n , n ); if ( d != 1 && d != n ) return d ; if ( y == x ) return n ; if ( i == k ) { y = x ; k <<= 1 ; } } } /* \u500d\u589e\u4f18\u5316 ll pr(ll n) { ll x = 0, y = 0; ll c = 1ll * rand() % (n - 1) + 1; int step = 0, goal = 1; ll val = 1; for (goal = 1;; goal <<= 1, y = x, val = 1) { for (step = 1; step <= goal; ++step) { x = (mul(x, x, n) + c) % n; val = mul(val, abs(y - x), n); if ((step % 127) == 0) { ll d = gcd(val, n); if (d > 1) return d; } } ll d = gcd(val, n); if (d > 1) return d; } } */ ll fac [ 10000 ]; ll tot = 0 ; void find_fac ( ll n ) { if ( Miller_Rabin ( n )) { fac [ tot ++ ] = n ; return ; } ll p = n ; while ( p >= n ) p = pollard ( p ); find_fac ( p ), find_fac ( n / p ); }","title":"Pollard-Rho\u5927\u6570\u5206\u89e3"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_9","text":"\u5b9a\u4e49: \\(\\varphi(n)\\) \u8868\u793a\u5c0f\u4e8e\u7b49\u4e8e \\(n\\) \u4e14\u4e0e \\(n\\) \u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570\uff0c\u6bd4\u5982 \\(\\varphi(1)=1\\) \u901a\u5f0f\uff1a \\(\\varphi(x)=x\\prod_{i=1}^n{(1-\\frac{1}{p_i})}\\) \uff0c\u5176\u4e2d \\(p_i\\) \u662f \\(x\\) \u7684\u6240\u6709\u8d28\u56e0\u6570","title":"\u6b27\u62c9\u51fd\u6570"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_10","text":"\\(n\\) \u662f\u8d28\u6570\u65f6\uff0c \\(\\varphi(n)=n-1\\) \\(p\\) \u662f\u8d28\u6570\u65f6\uff0c \\(\\varphi(p^k)=(p-1)\\times p^{k-1}\\) \u79ef\u6027\u6027\u8d28\uff0c\u5982\u679c \\(gcd(a,b)=1\\) \uff0c\u5219 \\(\\varphi(a\\times b)=\\varphi(a)\\times \\varphi(b)\\) \u7279\u522b\u7684\uff0c \\(n\\) \u662f\u5947\u6570\u65f6\uff0c \\(\\varphi(2n)=\\varphi(n)\\) \\(n > 2\\) \u65f6\uff0c \\(\\varphi(n)\\) \u4e3a\u5076\u6570 \\(n=\\sum_{d|n}\\varphi(d)\\) \u6b27\u62c9\u5b9a\u7406\uff0c\u82e5 \\(gcd(a,m)=1\\) \uff0c\u5219 \\(a^{\\varphi(m)}\\equiv 1(mod \\quad m)\\) \u6269\u5c55\u6b27\u62c9\u5b9a\u7406 \\[ a^b\\equiv \\begin{cases} a^{b \\% \\varphi(p)}&gcd(a,p)=1 \\\\ a^b&gcd(a,p)\\neq1,b<\\varphi(p) \\\\ a^{b \\% \\varphi(p)+\\varphi(p)}&gcd(a,p)\\neq1,b\\geq\\varphi(p) \\end{cases} (mod\\ p) \\]","title":"\u57fa\u672c\u6027\u8d28"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_11","text":"\\(O(\\sqrt{n})\\) ll phi ( ll n ){ ll res = n ; for ( ll i = 2 ; i * i <= n ; i ++ ){ if ( n % i == 0 ){ res -= res / i ; while ( n % i == 0 ) n /= i ; } } if ( n > 1 ) res -= res / n ; return res ; }","title":"\u6c42\u5355\u4e2a\u6570\u7684\u6b27\u62c9\u51fd\u6570"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_12","text":"\\(\\varphi(x)=x\\prod_{i=1}^n{(1-\\frac{1}{p_i})}\\) void euler ( int n ){ for ( int i = 1 ; i <= n ; i ++ ) phi [ i ] = i ; for ( int i = 2 ; i <= n ; i ++ ) if ( phi [ i ] == i ) //\u8fd9\u4ee3\u8868i\u662f\u8d28\u6570 for ( int j = i ; j <= n ; j += i ) phi [ j ] = phi [ j ] / i * ( i -1 ); //\u628ai\u7684\u500d\u6570\u66f4\u65b0\u6389 }","title":"\u57c3\u6c0f\u6c42\u6b27\u62c9\u51fd\u6570"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_13","text":"\\(if(i\\%prime[j] != 0)\\) \uff0c\u5219 \\(i\\) \u4e0e \\(prime[j]\\) \u4e92\u8d28 \u7531\u79ef\u6027\u6027\u8d28\u53ef\u5f97\uff0c \\(phi[i*prime[j]] = phi[i]*phi[prime[j]]\\) \\(if(i\\%prime[j] == 0)\\) \uff0c\u5219 \\(i\\) \u4e2d\u6709 \\(i*prime[j]\\) \u7684\u6240\u6709\u8d28\u56e0\u5b50\uff0c\u6709 \\(\\varphi(i*prime[j])=prime[j]*i*\\prod_{k=1}^n{(1-\\frac{1}{k_i})}=\\varphi(i)*prime[j]\\) int prime [ maxn ], cnt = 0 ; bool vis [ maxn ]; void euler ( int n ){ phi [ 1 ] = 1 ; //1\u8981\u7279\u5224 for ( int i = 2 ; i < = n ; i ++ ){ if ( vis [ i ] == 0 ){ //i\u662f\u8d28\u6570 prime [ cnt ++ ] = i ; phi [ i ] = i -1 ; } for ( int j = 1 ; j < cnt && prime [ j ] * i <= n ; j ++ ){ vis [ i * prime [ j ]] = 1 ; if ( i % prime [ j ] == 0 ){ phi [ i * prime [ j ]] = phi [ i ] * prime [ j ]; //\u82e5prime[j]\u662fi\u7684\u8d28\u56e0\u5b50\uff0c\u5219\u6839\u636e\u8ba1\u7b97\u516c\u5f0f\uff0ci\u5df2\u7ecf\u5305\u62eci*prime[j]\u7684\u6240\u6709\u8d28\u56e0\u5b50 break ; //\u4fdd\u8bc1\u6bcf\u4e2a\u6570\u53ea\u4f1a\u88ab\u81ea\u5df1\u6700\u5c0f\u7684\u56e0\u5b50\u7b5b\u6389\u4e00\u6b21 } else phi [ i * prime [ j ]] = phi [ i ] * phi [ prime [ j ]]; //\u79ef\u6027\u51fd\u6570\u7684\u6027\u8d28 } } }","title":"\u6b27\u62c9\u7b5b\u6c42\u6b27\u62c9\u51fd\u6570"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_14","text":"","title":"\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406"},{"location":"OI/%E6%95%B0%E8%AE%BA/#crt","text":"\u6d1b\u8c37 P3868 \\(X \u2261 r_{i} ( mod\\quad m_{i} )\\) \u8981\u6c42\uff1a \\(m_i\\) \u4e24\u4e24\u4e92\u8d28 ll CRT ( ll n , ll * r , ll * m ){ ll res = 0 , M = 1 ; for ( int i = 0 ; i < n ; i ++ ) M *= m [ i ]; for ( int i = 0 ; i < n ; i ++ ) { ll x , y ; ll tmp = M / m [ i ]; ll d = exgcd ( tmp , m [ i ], x , y ); //gcd(tmp, m[i]) = 1 x = ( x % m [ i ] + m [ i ]) % m [ i ]; res = ( res + tmp * x * r [ i ]) % M ; //\u53ef\u80fd\u9700\u8981\u7528\u5230\u5feb\u901f\u4e58\u9632\u6b62\u6ea2\u51fa } return ( res + M ) % M ; }","title":"CRT"},{"location":"OI/%E6%95%B0%E8%AE%BA/#excrt","text":"\u6d1b\u8c37 P4777 \\(X \u2261 r_{i} ( mod\\quad m_{i} )\\) \u4e0d\u8981\u6c42 \\(m_i\\) \u4e24\u4e24\u4e92\u8d28 \u6ee1\u8db3\u7b2c\u4e00\u4e2a\u6761\u4ef6\u7684\u89e3\u4e3a \\(r_1\\) \u5047\u8bbe\u6ee1\u8db3\u524d \\(k-1\\) \u4e2a\u6761\u4ef6\u7684\u4e00\u4e2a\u7279\u89e3\u4e3a \\(res\\) \uff0c \\(M_{k-1}\\) \u4e3a\u524d \\(k-1\\) \u4e2a \\(m\\) \u7684 lcm \u5219\u524d \\(k-1\\) \u4e2a\u65b9\u7a0b\u7684\u901a\u89e3\u4e3a $$ res+x\\times M_{k-1} $$ \u90a3\u4e48\u5bf9\u4e8e\u524d \\(k\\) \u4e2a\u65b9\u7a0b,\u5982\u679c\u6709\u89e3\uff0c\u5219 \u5b58\u5728\u6574\u6570 \\(x\\) \uff0c\u4f7f $$ res+x\\times M_{k-1}\\equiv r_k\\quad (mod\\quad m_k) $$ \u5373 $$ x\\times M_{k-1}\\equiv r_k-res\\quad (mod\\quad m_k) $$ \u5229\u7528\u62d3\u6b27\u6c42\u89e3\u5f97 \\(x\\) \uff0c\u5219\u524d \\(k\\) \u4e2a\u65b9\u7a0b\u7684\u4e00\u4e2a\u7279\u89e3\u4e3a $$ res+x\\times M_{k-1} $$ \u901a\u89e3\u4e3a \\(\u7279\u89e3 + x^{'}M_k\\) ll EXCRT ( ll n , ll * r , ll * m ){ ll res = r [ 0 ], M = m [ 0 ]; ll x , y ; for ( int i = 1 ; i < n ; i ++ ) { ll c = ( r [ i ] - res % m [ i ] + m [ i ]) % m [ i ]; ll d = exgcd ( M , m [ i ], x , y ), bg = m [ i ] / d ; x = ( x % bg + bg ) % bg ; if ( c % d != 0 ) return -1 ; //\u65e0\u89e3,\u56e0\u4e3a\u65e0\u6cd5\u8ba9\u4f59\u6570\u6269\u5927\u6210c x = mul ( x , c / d , bg ); //\u5feb\u901f\u4e58 res += x * M ; M *= bg ; //lcm res = ( res % M + M ) % M ; } return res ; }","title":"EXCRT"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_15","text":"","title":"\u540c\u4f59\u95ee\u9898"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_16","text":"\u540c\u4f59\u4e0d\u6ee1\u8db3\u9664\u6cd5\uff0c \\(a/b\\quad mod \\quad p\\quad != (a\\quad mod\\quad p)/(b\\quad mod\\quad p)\\) \u5f15\u5165 \\(b\\) \u7684\u9006\u5143 \\(x\\) , \u5373 \\(b*x = 1 (mod\\quad p)\\) \uff0cb \u4e0e p \u4e92\u8d28 \u5047\u8bbe \\(a/b = k (mod\\quad p)\\) \u540c\u4e58 \\(bx\\) \u5f97 $ a/b * bx = k * 1\uff08mod\\quad p)$ \u200b \\(a*x = k (mod\\quad p)\\) \u6ce8\u610f\uff1a b \u548c p \u4e92\u8d28\uff0cb \u624d\u6709\u5173\u4e8e p \u7684\u9006\u5143","title":"\u9006\u5143"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_17","text":"\u8d39\u9a6c\u5c0f\u5b9a\u7406 \uff1a\u5982\u679c \\(p\\) \u4e3a\u8d28\u6570\uff0c\u4e14 \\(a\\) \u4e0e \\(p\\) \u4e92\u8d28(\u5373 \\(a\\) \u4e0d\u662f \\(p\\) \u7684\u500d\u6570)\uff0c\u5219 \\(a^{p-1} \\equiv 1 \uff08mod\\quad p)\\) \u6240\u4ee5\u6709 \\(a * a^{p-2} \\equiv 1 (mod\\quad p)\\) , \u5373 \\(a^{p-2} (mod\\quad p)\\) \u662f a \u7684\u9006\u5143 //\u7528\u5feb\u901f\u5e42 ll pow ( ll a , ll p ){ int res = 1 ; int d = p -2 ; while ( d ) { if ( d & 1 ) res = res * a % p ; a = a * a % p ; d >>= 1 ; } return res ; }","title":"\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6c42\u9006\u5143"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_18","text":"\u5982\u679c \\(b\\) \u4e0e \\(p\\) \u4e92\u8d28\uff0c\u5373 \\(gcd(b, p) = 1\\) \u8981\u89e3 \\(b*x = 1 (mod\\quad p)\\) , \u5373\u6c42 \\(bx + yp = 1 = gcd(b, p)\\) \u7684\u89e3 \\(x\\) ll inv ( ll b , ll p ) { ll x , y ; ll d = exgcd ( b , p , x , y ); return d == 1 ? ( x + p ) % p : -1 ; //\u8fd4\u56de -1 \u8bf4\u660e b,p \u4e0d\u4e92\u8d28 }","title":"\u62d3\u5c55\u6b27\u51e0\u91cc\u5f97\u6c42\u9006\u5143"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_19","text":"\u6d1b\u8c37 P3811 \u662f\u8d39\u5c0f\u7684\u63a8\u5e7f\uff0c\u4e0d\u8981\u6c42 \\(p\\) \u4e3a\u8d28\u6570\uff0c\u4f46 \\(gcd(a,p)=1\\) \\(a^{\\varphi(p)}\\equiv1(mod\\quad p)\\) \uff0c\u6240\u4ee5\u5176\u9006\u5143\u4e3a \\(a^{\\varphi(n)-1}\\) ll phi ( ll n ){ ll res = n ; for ( ll i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { res -= res / i ; while ( n % i == 0 ) n /= i ; } } if ( n > 1 ) res -= res / n ; return res ; } ans = pow ( a , phi ( p ) -1 , p );","title":"\u6b27\u62c9\u51fd\u6570\u6c42\u9006\u5143"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_20","text":"\u6c42\u9636\u4e58\u7684\u9006\u5143\uff0c\u5148\u7528\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6c42\u51fa n! \u5728 p \u4e0b\u7684\u9006\u5143\uff0c\u518d\u5f80\u524d\u63a8 \u5047\u8bbe n! \u7684\u9006\u5143\u4e3a \\([n!]^{-1}\\) , \u8981\u6c42 \\((n-1)!\\) \u7684\u9006\u5143 $$ (n-1)! \\times n[n!]^{-1} \u2261 1 (mod\\quad p) $$ \u6240\u4ee5\uff0c \\((n-1)!\\) \u7684\u9006\u5143\u5c31\u662f \\(n[n!]^{-1}\\) void fa_inv ( ll n , ll p ){ fact [ 0 ] = 1 ; //factorial for ( int i = 1 ; i <= n ; i ++ ) fact [ i ] = fact [ i -1 ] * i % p ; finv [ N ] = pow ( fact [ n ], p -2 , p ); for ( int i = n -1 ; i >= 0 ; i -- ) finv [ i ] = ( i + 1 ) * finv [ i + 1 ] % p ; }","title":"\u9636\u4e58\u9006\u5143"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_21","text":"\u6d1b\u8c37 P3811 \u8981\u6c42\u51fa 1~n \u4e2d\u6240\u6709\u6570\u5bf9 \\(p\\) \u7684\u9006\u5143\uff0c\u9009\u62e9\u6253\u8868 \u200b \\(1^{\u22121} \u2261 1 (mod\\quad p)\\) \u8bbe \\(p = k * i + r\\) \u5176\u4e2d 1 < r < i < p, \u5373 \\(k = p/i, r = p\\quad mod\\quad i\\) \u6240\u4ee5\u6709 \\(k * i + r \u2261 0 ( mod\\quad p )\\) \u4e24\u8fb9\u540c\u65f6\u4e58\u4e0a \\(i^{\u22121} * r^{\u22121}\\) \u5f97 \\(k * r^{\u22121} + i^{\u22121} \u2261 0 ( mod\\quad p )\\) \u200b \\(i^{\u22121} \u2261 \u2212k * r^{\u22121} ( mod\\quad p )\\) \u5f97\u9012\u63a8\u516c\u5f0f \\(i^{-1} \u2261 -\uff08p/i) * (p\\quad mod\\quad i)^{-1} (mod\\quad p)\\) \u6574\u7406\u5f97 \\(inv[i] = (p - p/i) * inv[p\\%i] \\% p\\) \u5176\u4e2d p % i \u6bd4 i \u5c0f void inverse =- ( int n , int p ) { inv [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) inv [ i ] = ( ll )( p - p / i ) * inv [ p % i ] % p ; }","title":"\u7ebf\u6027\u6c42\u9006\u5143(\u6253\u8868)"},{"location":"OI/%E6%95%B0%E8%AE%BA/#lucas","text":"\u6d1b\u8c37 P3807 HDU 3037 \u89e3\u51b3\u7ec4\u5408\u6570\u53d6\u4f59\u7684\u95ee\u9898\uff1a (p\u5fc5\u987b\u662f\u7d20\u6570,\u4e0d\u7136\u4e0d\u80fd\u7528\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6c42\u9006\u5143) $$ C(n,m) = \\prod_{i=0}^{k}{C(n_i, m_i)}(mod\\quad p) $$ \\[ n = n_k p^k+n_{k-1} p^{k-1}+\\cdots+n_1p+n_0 \\] \\[ m=m_k p^k+m_{k-1} p^{k-1}+\\cdots+m_1p+m_0 \\] //\u9884\u5904\u7406\u9636\u4e58 void getFact ( ll p ) { fact [ 0 ] = 1 ; for ( ll i = 1 ; i <= p ; i ++ ) f [ i ] = f [ i -1 ] * i % p ; } //\u8ba1\u7b97\u7ec4\u5408\u6570 ll comb ( ll n , ll m , ll p ) { if ( m > n ) return 0 ; return fact [ n ] * pow ( f [ m ], p -2 , p ) % p * pow ( f [ n - m ], p -2 , p ) % p ; //\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6c42\u9006\u5143 } ll lucas ( ll n , ll m , ll p ) { if ( ! m ) return 1 ; return lucas ( n / p , m / p , p ) % p * comb ( n % p , m % p , p ) % p ; }","title":"Lucas\u5b9a\u7406"},{"location":"OI/%E6%95%B0%E8%AE%BA/#bsgs","text":"\u6c42 \\(a^x=b(mod\\ \\ p)\\) \u7684 \\(x\\) \u6700\u5c0f\u7684\u89e3 ll bsgs ( ll a , ll b , ll p ) { map < ll , ll > hash ; hash . clear (); b %= p ; ll t = sqrt ( p ) + 1 ; for ( ll i = 0 ; i < t ; i ++ ) hash [ b * ksm ( a , i , p ) % p ] = i ; a = ksm ( a , t , p ); if ( ! a ) return b == 0 ? 1 : -1 ; for ( ll i = 1 ; i <= t ; i ++ ) { ll val = ksm ( a , i , p ); int j = hash . find ( val ) == hash . end () ? -1 : hash [ val ]; if ( j >= 0 && i * t - j >= 0 ) return i * t - j ; } return -1 ; //\u65e0\u89e3 }","title":"BSGS"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_22","text":"","title":"\u6570\u503c\u5206\u6790"},{"location":"OI/%E6%95%B0%E8%AE%BA/#simpson","text":"\u5982\u679c\u539f\u51fd\u6570\u662f\u6b21\u6570\u4e0d\u8d85\u8fc7\u4e8c\u6b21\u7684\u591a\u9879\u5f0f\uff0c\u53ef\u4ee5\u7cbe\u786e\u8ba1\u7b97\u79ef\u5206\u503c\uff0c\u53ea\u9700\u8981\u77e5\u9053\u7aef\u70b9\u548c\u4e2d\u70b9\u7684\u503c $$ \\int_{a}^{b}{f(x)}dx \\approx \\frac{b-a}{6}(\\quad f(a)+4f(\\frac{a+b}{2})+f(b)\\quad) $$","title":"Simpson \u516c\u5f0f"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_23","text":"\u6d1b\u8c37 P3389 \\(O(n^3)\\) \uff0c\u65b9\u7a0b\u6570\u548c\u672a\u77e5\u6570\u90fd\u8981\u6c42\u662fn\uff0c\u7ed3\u679c\u5728 \\(a[i][n+1]\\) \u4e2d\uff0c\u8fd4\u56de\u503c1\u8868\u793a\u6709\u552f\u4e00\u89e3\uff0c0\u8868\u793a\u65e0\u89e3 const double eps = 1e-8 ; int guass_jordan ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) { int r = i ; for ( int j = i ; j <= n ; j ++ ) //\u628a\u6b63\u5728\u5904\u7406\u7684\u672a\u77e5\u6570\u7cfb\u6570\u7edd\u5bf9\u503c\u6700\u5927\u7684\u653e\u4e0a\u6765 if ( fabs ( a [ r ][ i ]) < fabs ( a [ j ][ i ])) r = j ; if ( r != i ) //\u4ea4\u6362 for ( int j = 1 ; j <= n + 1 ; j ++ ) swap ( a [ i ][ j ], a [ r ][ j ]); if ( fabs ( a [ i ][ i ]) < eps ) return 0 ; //\u65e0\u89e3 for ( int j = i + 1 ; j <= n + 1 ; j ++ ) a [ i ][ j ] /= a [ i ][ i ]; //\u7cfb\u6570\u5316\u4e3a1,\u6ce8\u610fi+1\uff0c\u5982\u679c\u4ecei\u5f00\u59cb\u4f1a\u5f71\u54cd\u5230\u540e\u9762 for ( int j = 1 ; j <= n ; j ++ ) if ( j != i ) for ( int k = i + 1 ; k <= n + 1 ; k ++ ) //\u6ce8\u610fi+1\uff0c\u5982\u679c\u4ecei\u5f00\u59cb\u4f1a\u5f71\u54cd\u5230\u540e\u9762 a [ j ][ k ] -= a [ i ][ k ] * a [ j ][ i ]; } return 1 ; }","title":"\u9ad8\u65af\u7ea6\u65e6\u6d88\u5143"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_24","text":"","title":"\u5176\u4ed6"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_25","text":"\u82e5 \\(a,b\\) \u662f\u6574\u6570,\u4e14 \\(gcd(a,b)=d\\) \uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u7684\u6574\u6570 \\(x,y\\) , \\(ax+by\\) \u90fd\u4e00\u5b9a\u662f \\(d\\) \u7684\u500d\u6570\uff0c\u5373 \\(d|(ax+by)\\) \u7279\u522b\u5730\uff0c\u4e00\u5b9a\u5b58\u5728\u6574\u6570 \\(x,y\\) \uff0c\u4f7f \\(ax+by=d\\) \u6210\u7acb\u3002 \u91cd\u8981\u63a8\u8bba\uff1a \\(a,b\\) \u4e92\u8d28\u7684\u5145\u8981\u6761\u4ef6\u662f\u5b58\u5728\u6574\u6570 \\(x,y\\) \u4f7f \\(ax+by=1\\)","title":"\u88f4\u8700\u5b9a\u7406"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_26","text":"\u6b63\u6574\u6570 \\(N\\) \u7684\u6807\u51c6\u5206\u89e3\u5f0f\uff1a \\(N=p_1^{a_1}p_2^{a_2}...p_n^{a_n}\\) \u90a3 \\(N\\) \u7684\u6b63\u56e0\u6570\u4e2a\u6570\u4e3a \\(\\sigma_0(N)=(1+a_1)(1+a_2)...(1+a_n)\\) \u6240\u6709\u6b63\u56e0\u6570\u7684\u548c\u4e3a \\(\\sigma_1(N)=(1+p_1+p_1^2+...+p_1^{a_1})...(1+p_n+p_n^2+...+p_n^{a_n})\\)","title":"\u552f\u4e00\u5206\u89e3\u5b9a\u7406"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_27","text":"\\(\\frac{n}{1}+\\frac{n}{2}+\\frac{n}{3}+..+\\frac{n}{n}\\) \u7684\u548c ll ans = 0 ; for ( int l = 1 , r ; l <= n ; l = r + 1 ) { r = n / ( n / l ); //\u6bcf\u6bb5\u533a\u95f4\u7684\u53f3\u7aef\u70b9 ans += ( ll )( n / l ) * ( r - l + 1 ); }","title":"\u6574\u6570\u5206\u5757"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_28","text":"\\[ n! \\approx \\sqrt{2 \\pi n}(\\frac{n}{e})^n \\] \u7528 \\(log10\\) \u5feb\u901f\u8ba1\u7b97\u5927\u6570\u7684\u4f4d\u6570","title":"\u65af\u7279\u6797\u516c\u5f0f"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_29","text":"\\[ f(n) = (n-1)(f(n-1)f(n-2)) \\]","title":"\u9519\u6392\u516c\u5f0f"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_30","text":"HDU 4135 $$ |U(A_i)|=\\sum_{1\\leq i\\leq m}{|A_i|}-\\sum_{i\\leq i<j\\leq m}{|A_i\\bigcap A_j|}+ \\dots+(-1)^{m+1}\\sum|A_1\\bigcap A_2\\bigcap \\dots\\bigcap A_m| $$ void solve () { int res = 0 ; for ( int i = 1 ; i < ( 1 << m ); i ++ ) { int cnt = 0 ; for ( int j = i ; j != 0 ; j >>= 1 ) cnt += j & 1 ; ll lcm = 1 ; for ( int j = 0 ; j < m ; j ++ ) { if ( ( i >> j ) & 1 ) { lcm = lcm / gcd ( lcm , num [ j ]) * num [ j ]; //eg,\u662f2\u7684\u500d\u6570\u4e0d\u4e00\u5b9a\u662f4\u7684\u500d\u6570 if ( lcm > n ) break ; } } if ( cnt % 2 == 0 ) res -= n / lcm ; else res += n / lcm ; } cout << res ; }","title":"\u5bb9\u65a5\u539f\u7406"},{"location":"OI/%E6%95%B0%E8%AE%BA/#catalan","text":"\u8bbe h(n) \u8868\u793a Catalan\u6570\u7684\u7b2cn\u9879\uff0c \\(h(0) = 1, h(1) = 1\\) \u9012\u63a8\u5f0f\uff1a \\(h(n)=h(0)*h(n-1)+h(1)*h(n-2)+...+h(n-1)*h(0)(n\\geq2)\\) \u53e6\u7c7b\u9012\u63a8\u5f0f\uff1a \\(h(n)=h(n-1)*(4*n-2)/(n+1)\\) \u9012\u63a8\u5173\u7cfb\u7684\u89e3\uff1a \\(h(n)=C(2n,n)/(n+1)(n=0,1,2,...)\\) \u9012\u63a8\u5173\u7cfb\u7684\u53e6\u7c7b\u89e3\uff1a \\(h(n)=C(2n,n)-C(2n,n-1)(n=0,1,2,...)\\) eg\uff1a\u8fdb\u51fa\u6808\uff0c\u7535\u5f71\u8d2d\u7968\uff0c\u5706\u5185\u8fde\u5f26\uff0c\u51f8\u591a\u8fb9\u5f62\u7684\u5256\u5206\uff0cn\u5bf9\u62ec\u53f7\u5f62\u6210\u7684\u5408\u6cd5\u62ec\u53f7\u8868\u8fbe\u5f0f\u7684\u4e2a\u6570\uff0c n+1\u4e2a\u6570\u8fde\u4e58\u4e0d\u540c\u7684\u4e58\u6cd5\u987a\u5e8f\u6570\u3001","title":"Catalan\u6570"},{"location":"OI/%E6%95%B0%E8%AE%BA/#bellstirling","text":"\u7b2c\u4e00\u7c7b Stirling\u6570\u9012\u63a8\u5f0f\uff1a \\(S(i,j)=(i-1)*S(i-1,j)+S(i-1,j-1)\\) eg\uff1ai \u4e2a\u4e0d\u540c\u5143\u7d20\u6784\u6210 j \u4e2a\u5706\u6392\u5217\u7684\u6570\u76ee \u7b2c\u4e8c\u7c7b Stirling\u6570\u9012\u63a8\u5f0f\uff1a \\(S(i,j)=j*S(i-1,j)+S(i-1,j-1)\\) eg\uff1ai \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u5212\u5206\u4e3a j \u4e2a\u975e\u7a7a\u96c6\u7684\u65b9\u6cd5\u7684\u6570\u76ee Bell\u6570\u548c\u7b2c\u4e8c\u7c7bStirling\u6570\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a \\(B_n=\\sum_{k=1}^n{S(n,k)}\\) eg\uff1an \u4e2a\u4e0d\u540c\u7684\u6570\u7684\u5212\u5206\u65b9\u6848\u6570","title":"Bell\u6570\u548cStirling\u6570"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/","text":"\u8ba1\u7b97\u51e0\u4f55 \u00b6 \u70b9\u548c\u7ebf \u00b6 \u7cbe\u5ea6\u63a7\u5236 \u00b6 const double eps = 1e-10 ; double dcmp ( double x ) { //\u5224\u65ad \u6b63/\u8d1f/0 if ( fabs ( x ) < eps ) return 0 ; else return x > 0 ? 1 : -1 ; } \u70b9\u548c\u5411\u91cf\u5b58\u50a8 \u00b6 struct Vector { double x , y ; Point ( double x = 0 , y = 0 ) : x ( x ), y ( y ){} Vector rotate_90 () { return Vector ( y , - x );} //\u987a\u65f6\u948890\u5ea6 Vector rotate_90_c () { return Vector ( - y , x );} //\u9006\u65f6\u948890\u5ea6 }; typedef Vector Point ; \u5411\u91cf\u7684\u56db\u5219\u8fd0\u7b97 \u00b6 //\u8fd9\u79cd\u8fd4\u56de\u65b9\u5f0f\u4f3c\u4e4e\u6709\u65f6\u5019\u4f1a\u51fa\u95ee\u9898 //\u5411\u91cf+\u5411\u91cf=\u5411\u91cf \u70b9+\u5411\u91cf=\u70b9 Vector operator + ( Vector a , Vector b ){ return Vector ( a . x + b . x , a . y + b . y ); } //\u70b9-\u70b9=\u5411\u91cf Vector operator - ( Vector a , Vector b ){ return Vector ( a . x - b . x , a . y - b . y ); } //\u5411\u91cf*\u6570=\u5411\u91cf Vector operator * ( Vector a , double p ){ return Vector ( a . x * p , a . y * p ); } //\u5411\u91cf/\u6570=\u5411\u91cf Vector operator / ( Vector a , double p ){ return Vector ( a . x / p . a . y / p ); } \u70b9\u79ef \u53c9\u79ef \u53ca \u5e94\u7528 \u00b6 \\(\\vec{a} \\cdot \\vec{b} = |a||b|cos\\theta\\) \u200b \\(|\\vec{a} \\times \\vec{b}| = |a||b|sin\\theta\\) \uff0c\u6b63\u8d1f\u7531\u4e24\u5411\u91cf\u7684\u76f8\u5bf9\u5173\u7cfb\u51b3\u5b9a //\u70b9\u79ef double Dot ( Vector a , Vector b ){ return a . x * b . x + a . y * b . y ; } //\u53c9\u79ef double Cross ( Vector a , Vector b ){ return a . x * b . y - a . y * b . x ; } //\u5e94\u7528 //\u6c42\u6a21\u957f double Length ( Vector a ){ return sqrt ( Dot ( a , a )); } //\u6c42\u89d2\u5ea6 double Angle ( Vector a , Vector b ){ return acos ( Dot ( a , b ) / Length ( a ) / Length ( b )); } \u5224\u65ad\u70b9\u662f\u5426\u5728\u7ebf\u6bb5\u4e0a \u00b6 bool OnSegment ( Point p1 , Point p2 , Point q ){ //p1-p2\u662f\u7ebf\u6bb5 return Cross ( p1 - q , p2 - q ) == 0 && Dot ( p1 - q , p2 - q ) <= 0 ; } \u6c42\u4e24\u76f4\u7ebf\u7684\u4ea4\u70b9 \u00b6 \u7531 \\(q_2,q_1,p_2,p_1\\) \u200b\u200b\u786e\u5b9a\u7684\u4e24\u6761\u76f4\u7ebf\uff0c\u5047\u8bbe\u4ea4\u70b9\u4e3a \\(p_1+t(p_2-p_1)\\) \u200b\u200b\u200b \u6709 \\((q_2-q_1) \\times (p_1 + t(p_2-p_1)-q_1)=0\\) \u200b \u5f97 \\(t = \\frac{(q_2-q_1)\\times(q_1-p_1)}{(q_2-q_1)\\times(p_2-p_1)}\\) \u200b /*Point GetLineIntersection(Point p1, Point p2, Point q1, Point q2){ return p1+(p2-p1)*Cross(q2-q1, q1-p1)/Cross(q2-q1, p2-p1) }*/ Point GetLineIntersection ( Point p , Vector v1 , Point q , Vector v2 ){ return p + v1 * Cross ( v2 , q - p ) / Cross ( v2 , v1 ); } //\u5e73\u884c\u7279\u5224 \u7ebf\u6bb5\u76f8\u4ea4\u5224\u5b9a \u00b6 \u8de8\u7acb\u5b9e\u9a8c\uff1a\u5224\u65adq1,q2\u5728\u7ebf\u6bb5p2-p1\u4e24\u4fa7 \u4e14 p1,p2\u5728\u7ebf\u6bb5q2-q1\u4e24\u4fa7 bool SegmentProperIntersection ( Point p1 , Point p2 , Point q1 , Point q2 ){ double a1 = Cross ( p2 - p1 , q2 - p1 ), a2 = Cross ( p2 - p1 , q1 - p1 ); double a3 = Cross ( q2 - q1 , p1 - q1 ), a4 = Cross ( q2 - q1 , p2 - q1 ); return dcmp ( a1 ) * dcmp ( a2 ) < 0 && dcmp ( a3 ) * dcmp ( a4 ) < 0 ; } /*\u7279\u5224\u7aef\u70b9\u5728\u53e6\u4e00\u6761\u7ebf\u6bb5\u7684\u60c5\u51b5 if(OnSegment(p[i],q[i],p[j]) || OnSegment(p[i],q[i],q[j]) || OnSegment(p[j],q[j],p[i]) || OnSegment(p[j],q[j],q[i]) ) G[i][j] = G[j][i] = true; */ \u7ebf\u6bb5\u548c\u76f4\u7ebf\u76f8\u4ea4\u5224\u5b9a \u00b6 bool fun ( Point a , Point b , Point c , Point d ) { //a b \u786e\u5b9a\u76f4\u7ebf c d \u786e\u5b9a\u7ebf\u6bb5 return Cross ( a - b , a - c ) * Cross ( a - b , a - d ) <= eps } \u5411\u91cf\u65cb\u8f6c\u4e0e\u5355\u4f4d\u5316 \u00b6 \u9006\u65f6\u9488\uff1a \\[ \\left[ \\matrix{ x^{'} \\\\ y^{'} } \\right] = \\left[ \\matrix{ x \\\\ y } \\right] \\left[ \\matrix{ cos\\theta & sin\\theta\\\\ -sin\\theta & cos\\theta } \\right] \\] \u987a\u65f6\u9488\uff1a \\[ \\left[ \\matrix{ x^{'} \\\\ y^{'} } \\right] = \\left[ \\matrix{ x \\\\ y } \\right] \\left[ \\matrix{ cos\\theta & -sin\\theta\\\\ sin\\theta & cos\\theta } \\right] \\] //rad \u662f\u5f27\u5ea6, \u9006\u65f6\u9488 Vector Rotate ( Vector a , double rad ) { return Vector ( a . x * cos ( rad ) - a . y * sin ( rad ), a . x * sin ( rad ) + a . y * soc ( rad )); } //\u5355\u4f4d\u5316 Vector Normal ( Vector a ) { double L = length ( a ); return Vector ( a . x / L , a . y / L ); } \u70b9\u5230\u76f4\u7ebf\u7684\u8ddd\u79bb \u00b6 double DistaceToLine ( Point p , Point a , Point b ) { Vector v1 = b - a , v2 = p - a ; return fabs ( Cross ( v1 , v2 )) / Length ( v1 ); //\u5e73\u884c\u56db\u8fb9\u5f62\u9762\u79ef \u9664/\u5e95=\u9ad8 } \u5706 \u00b6 \u5706\u7684\u5b58\u50a8 \u00b6 struct Circle { Point c ; double r ; Circle ( Point a , double b = 0 ) : c ( a ), r ( b ){} } \u4e09\u89d2\u5f62\u5916\u63a5\u5706 \u00b6 //\u4e09\u70b9\u4e0d\u5171\u7ebf Circle circumcircle ( Point p1 , Point p2 , Point p3 ) { Point p = GetLineIntersection (( p1 + p2 ) / 2 , ( p2 - p1 ). rotate_90 (), ( p1 + p3 ) / 2 , ( p3 - p1 ). rotate_90 ()); return Circle ( p , Length ( p1 - p )); } \u6700\u5c0f\u5706\u8986\u76d6 \u00b6 \u968f\u673a\u589e\u91cf\u6cd5 \\(O(n)\\) //\u6d1b\u8c37 P1742 #include <iostream> #include <algorithm> #include <cmath> using namespace std ; const int maxn = 1e5 + 5 ; typedef struct Vector { double x , y ; Vector ( double a = 0 , double b = 0 ) : x ( a ), y ( b ){} Vector rotate_90 (){ return Vector ( y , - x ); } } Point ; struct Circle { Point c ; double r ; Circle ( Point a , double b ) : c ( a ), r ( b ){} }; Point operator - ( const Point & a , const Point & b ){ return Vector ( a . x - b . x , a . y - b . y ); } Point operator + ( const Point & a , const Point & b ){ return Vector ( a . x + b . x , a . y + b . y ); } Point operator / ( const Point & a , const double & b ){ return Vector ( a . x / b , a . y / b ); } Point operator * ( const Point & a , const double & b ){ return Vector ( a . x * b , a . y * b ); } double Dot ( Vector a , Vector b ){ return a . x * b . x + a . y * b . y ; } double Cross ( Vector a , Vector b ){ return a . x * b . y - a . y * b . x ; } double Length ( Vector a ){ return sqrt ( Dot ( a , a )); } Point GetLineIntersection ( Point p , Vector v1 , Point q , Vector v2 ){ return p + v1 * Cross ( v2 , q - p ) / Cross ( v2 , v1 ); } Circle circumcircle ( Point p1 , Point p2 , Point p3 ){ Point p = GetLineIntersection (( p1 + p2 ) / 2 , ( p2 - p1 ). rotate_90 (), ( p1 + p3 ) / 2 , ( p3 - p1 ). rotate_90 ()); return Circle ( p , Length ( p1 - p )); } Circle min_circle ( Point * p , int n ) { //\u6700\u5c0f\u5706\u8986\u76d6 random_shuffle ( p + 1 , p + 1 + n ); Point o ; double r = 0 ; for ( int i = 1 ; i <= n ; i ++ ) if ( Length ( p [ i ] - o ) > r ) { o = p [ i ], r = 0 ; for ( int j = 1 ; j < i ; j ++ ) if ( Length ( p [ j ] - o ) > r ) { o = ( p [ i ] + p [ j ]) / 2 , r = Length ( p [ i ] - p [ j ]) / 2 ; for ( int k = 1 ; k < j ; k ++ ) if ( Length ( o - p [ k ]) > r ) { Circle tmp = circumcircle ( p [ i ], p [ j ], p [ k ]); o = tmp . c , r = tmp . r ; } } } return Circle ( o , r ); } int main (){ int n ; Point p [ maxn ]; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) cin >> p [ i ]. x >> p [ i ]. y ; Circle res = min_circle ( p , n ); printf ( \"%.10lf \\n %.10lf %.10lf \\n \" , res . r , res . c . x , res . c . y ); return 0 ; } \u51f8\u5305 \u00b6 Graham\u626b\u63cf\u6cd5 \u7b97\u51f8\u5305 \u00b6 \u6309x\uff0cy\u5750\u6807\u5347\u5e8f\u6392\u5217\uff0c\u786e\u5b9a\u51f8\u5305\u76842\u7684\u9876\u70b9\uff0c\u7136\u540e\u518d\u786e\u5b9a\u4e0a\u4e0b\u4e24\u4e2a\u51f8\u58f3 \u6392\u5e8f \\(O(nlogn)\\) \u200b\u200b \u5176\u4ed6 \\(O(n)\\) \u200b\u200b bool cmp ( Point & p , Point & q ){ if ( p . x != p . x ) return p . x < q . x ; else return p . y < q . y ; } vector < Point > ConvexHull ( Point * ps , int n ){ sort ( ps , ps + n , cmp ); int k = 0 ; //\u51f8\u5305\u9876\u70b9\u6570 vector < Point > qs ( n * 2 ); //\u4e0b\u51f8\u58f3 for ( int i = 0 ; i < n ; i ++ ){ //while\u8981\u6ce8\u610f while ( k > 1 && Cross ( qs [ k -1 ] - qs [ k -2 ], ps [ i ] - qs [ k -1 ] <= 0 )) k -- ; qs [ k ++ ] = ps [ i ]; } //\u4e0a\u51f8\u58f3 for ( int i = n -2 , t = k ; i >= 0 ; i -- ){ while ( k > t && Cross ( qs [ k -1 ] - qs [ k -2 ], ps [ i ] - qs [ k -1 ] <= 0 )) k -- ; qs [ k ++ ] = ps [ i ]; } qs . resize ( k -1 ); return qs ; }","title":"\u8ba1\u7b97\u51e0\u4f55"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_1","text":"","title":"\u8ba1\u7b97\u51e0\u4f55"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_2","text":"","title":"\u70b9\u548c\u7ebf"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_3","text":"const double eps = 1e-10 ; double dcmp ( double x ) { //\u5224\u65ad \u6b63/\u8d1f/0 if ( fabs ( x ) < eps ) return 0 ; else return x > 0 ? 1 : -1 ; }","title":"\u7cbe\u5ea6\u63a7\u5236"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_4","text":"struct Vector { double x , y ; Point ( double x = 0 , y = 0 ) : x ( x ), y ( y ){} Vector rotate_90 () { return Vector ( y , - x );} //\u987a\u65f6\u948890\u5ea6 Vector rotate_90_c () { return Vector ( - y , x );} //\u9006\u65f6\u948890\u5ea6 }; typedef Vector Point ;","title":"\u70b9\u548c\u5411\u91cf\u5b58\u50a8"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_5","text":"//\u8fd9\u79cd\u8fd4\u56de\u65b9\u5f0f\u4f3c\u4e4e\u6709\u65f6\u5019\u4f1a\u51fa\u95ee\u9898 //\u5411\u91cf+\u5411\u91cf=\u5411\u91cf \u70b9+\u5411\u91cf=\u70b9 Vector operator + ( Vector a , Vector b ){ return Vector ( a . x + b . x , a . y + b . y ); } //\u70b9-\u70b9=\u5411\u91cf Vector operator - ( Vector a , Vector b ){ return Vector ( a . x - b . x , a . y - b . y ); } //\u5411\u91cf*\u6570=\u5411\u91cf Vector operator * ( Vector a , double p ){ return Vector ( a . x * p , a . y * p ); } //\u5411\u91cf/\u6570=\u5411\u91cf Vector operator / ( Vector a , double p ){ return Vector ( a . x / p . a . y / p ); }","title":"\u5411\u91cf\u7684\u56db\u5219\u8fd0\u7b97"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_6","text":"\\(\\vec{a} \\cdot \\vec{b} = |a||b|cos\\theta\\) \u200b \\(|\\vec{a} \\times \\vec{b}| = |a||b|sin\\theta\\) \uff0c\u6b63\u8d1f\u7531\u4e24\u5411\u91cf\u7684\u76f8\u5bf9\u5173\u7cfb\u51b3\u5b9a //\u70b9\u79ef double Dot ( Vector a , Vector b ){ return a . x * b . x + a . y * b . y ; } //\u53c9\u79ef double Cross ( Vector a , Vector b ){ return a . x * b . y - a . y * b . x ; } //\u5e94\u7528 //\u6c42\u6a21\u957f double Length ( Vector a ){ return sqrt ( Dot ( a , a )); } //\u6c42\u89d2\u5ea6 double Angle ( Vector a , Vector b ){ return acos ( Dot ( a , b ) / Length ( a ) / Length ( b )); }","title":"\u70b9\u79ef \u53c9\u79ef \u53ca \u5e94\u7528"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_7","text":"bool OnSegment ( Point p1 , Point p2 , Point q ){ //p1-p2\u662f\u7ebf\u6bb5 return Cross ( p1 - q , p2 - q ) == 0 && Dot ( p1 - q , p2 - q ) <= 0 ; }","title":"\u5224\u65ad\u70b9\u662f\u5426\u5728\u7ebf\u6bb5\u4e0a"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_8","text":"\u7531 \\(q_2,q_1,p_2,p_1\\) \u200b\u200b\u786e\u5b9a\u7684\u4e24\u6761\u76f4\u7ebf\uff0c\u5047\u8bbe\u4ea4\u70b9\u4e3a \\(p_1+t(p_2-p_1)\\) \u200b\u200b\u200b \u6709 \\((q_2-q_1) \\times (p_1 + t(p_2-p_1)-q_1)=0\\) \u200b \u5f97 \\(t = \\frac{(q_2-q_1)\\times(q_1-p_1)}{(q_2-q_1)\\times(p_2-p_1)}\\) \u200b /*Point GetLineIntersection(Point p1, Point p2, Point q1, Point q2){ return p1+(p2-p1)*Cross(q2-q1, q1-p1)/Cross(q2-q1, p2-p1) }*/ Point GetLineIntersection ( Point p , Vector v1 , Point q , Vector v2 ){ return p + v1 * Cross ( v2 , q - p ) / Cross ( v2 , v1 ); } //\u5e73\u884c\u7279\u5224","title":"\u6c42\u4e24\u76f4\u7ebf\u7684\u4ea4\u70b9"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_9","text":"\u8de8\u7acb\u5b9e\u9a8c\uff1a\u5224\u65adq1,q2\u5728\u7ebf\u6bb5p2-p1\u4e24\u4fa7 \u4e14 p1,p2\u5728\u7ebf\u6bb5q2-q1\u4e24\u4fa7 bool SegmentProperIntersection ( Point p1 , Point p2 , Point q1 , Point q2 ){ double a1 = Cross ( p2 - p1 , q2 - p1 ), a2 = Cross ( p2 - p1 , q1 - p1 ); double a3 = Cross ( q2 - q1 , p1 - q1 ), a4 = Cross ( q2 - q1 , p2 - q1 ); return dcmp ( a1 ) * dcmp ( a2 ) < 0 && dcmp ( a3 ) * dcmp ( a4 ) < 0 ; } /*\u7279\u5224\u7aef\u70b9\u5728\u53e6\u4e00\u6761\u7ebf\u6bb5\u7684\u60c5\u51b5 if(OnSegment(p[i],q[i],p[j]) || OnSegment(p[i],q[i],q[j]) || OnSegment(p[j],q[j],p[i]) || OnSegment(p[j],q[j],q[i]) ) G[i][j] = G[j][i] = true; */","title":"\u7ebf\u6bb5\u76f8\u4ea4\u5224\u5b9a"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_10","text":"bool fun ( Point a , Point b , Point c , Point d ) { //a b \u786e\u5b9a\u76f4\u7ebf c d \u786e\u5b9a\u7ebf\u6bb5 return Cross ( a - b , a - c ) * Cross ( a - b , a - d ) <= eps }","title":"\u7ebf\u6bb5\u548c\u76f4\u7ebf\u76f8\u4ea4\u5224\u5b9a"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_11","text":"\u9006\u65f6\u9488\uff1a \\[ \\left[ \\matrix{ x^{'} \\\\ y^{'} } \\right] = \\left[ \\matrix{ x \\\\ y } \\right] \\left[ \\matrix{ cos\\theta & sin\\theta\\\\ -sin\\theta & cos\\theta } \\right] \\] \u987a\u65f6\u9488\uff1a \\[ \\left[ \\matrix{ x^{'} \\\\ y^{'} } \\right] = \\left[ \\matrix{ x \\\\ y } \\right] \\left[ \\matrix{ cos\\theta & -sin\\theta\\\\ sin\\theta & cos\\theta } \\right] \\] //rad \u662f\u5f27\u5ea6, \u9006\u65f6\u9488 Vector Rotate ( Vector a , double rad ) { return Vector ( a . x * cos ( rad ) - a . y * sin ( rad ), a . x * sin ( rad ) + a . y * soc ( rad )); } //\u5355\u4f4d\u5316 Vector Normal ( Vector a ) { double L = length ( a ); return Vector ( a . x / L , a . y / L ); }","title":"\u5411\u91cf\u65cb\u8f6c\u4e0e\u5355\u4f4d\u5316"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_12","text":"double DistaceToLine ( Point p , Point a , Point b ) { Vector v1 = b - a , v2 = p - a ; return fabs ( Cross ( v1 , v2 )) / Length ( v1 ); //\u5e73\u884c\u56db\u8fb9\u5f62\u9762\u79ef \u9664/\u5e95=\u9ad8 }","title":"\u70b9\u5230\u76f4\u7ebf\u7684\u8ddd\u79bb"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_13","text":"","title":"\u5706"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_14","text":"struct Circle { Point c ; double r ; Circle ( Point a , double b = 0 ) : c ( a ), r ( b ){} }","title":"\u5706\u7684\u5b58\u50a8"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_15","text":"//\u4e09\u70b9\u4e0d\u5171\u7ebf Circle circumcircle ( Point p1 , Point p2 , Point p3 ) { Point p = GetLineIntersection (( p1 + p2 ) / 2 , ( p2 - p1 ). rotate_90 (), ( p1 + p3 ) / 2 , ( p3 - p1 ). rotate_90 ()); return Circle ( p , Length ( p1 - p )); }","title":"\u4e09\u89d2\u5f62\u5916\u63a5\u5706"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_16","text":"\u968f\u673a\u589e\u91cf\u6cd5 \\(O(n)\\) //\u6d1b\u8c37 P1742 #include <iostream> #include <algorithm> #include <cmath> using namespace std ; const int maxn = 1e5 + 5 ; typedef struct Vector { double x , y ; Vector ( double a = 0 , double b = 0 ) : x ( a ), y ( b ){} Vector rotate_90 (){ return Vector ( y , - x ); } } Point ; struct Circle { Point c ; double r ; Circle ( Point a , double b ) : c ( a ), r ( b ){} }; Point operator - ( const Point & a , const Point & b ){ return Vector ( a . x - b . x , a . y - b . y ); } Point operator + ( const Point & a , const Point & b ){ return Vector ( a . x + b . x , a . y + b . y ); } Point operator / ( const Point & a , const double & b ){ return Vector ( a . x / b , a . y / b ); } Point operator * ( const Point & a , const double & b ){ return Vector ( a . x * b , a . y * b ); } double Dot ( Vector a , Vector b ){ return a . x * b . x + a . y * b . y ; } double Cross ( Vector a , Vector b ){ return a . x * b . y - a . y * b . x ; } double Length ( Vector a ){ return sqrt ( Dot ( a , a )); } Point GetLineIntersection ( Point p , Vector v1 , Point q , Vector v2 ){ return p + v1 * Cross ( v2 , q - p ) / Cross ( v2 , v1 ); } Circle circumcircle ( Point p1 , Point p2 , Point p3 ){ Point p = GetLineIntersection (( p1 + p2 ) / 2 , ( p2 - p1 ). rotate_90 (), ( p1 + p3 ) / 2 , ( p3 - p1 ). rotate_90 ()); return Circle ( p , Length ( p1 - p )); } Circle min_circle ( Point * p , int n ) { //\u6700\u5c0f\u5706\u8986\u76d6 random_shuffle ( p + 1 , p + 1 + n ); Point o ; double r = 0 ; for ( int i = 1 ; i <= n ; i ++ ) if ( Length ( p [ i ] - o ) > r ) { o = p [ i ], r = 0 ; for ( int j = 1 ; j < i ; j ++ ) if ( Length ( p [ j ] - o ) > r ) { o = ( p [ i ] + p [ j ]) / 2 , r = Length ( p [ i ] - p [ j ]) / 2 ; for ( int k = 1 ; k < j ; k ++ ) if ( Length ( o - p [ k ]) > r ) { Circle tmp = circumcircle ( p [ i ], p [ j ], p [ k ]); o = tmp . c , r = tmp . r ; } } } return Circle ( o , r ); } int main (){ int n ; Point p [ maxn ]; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) cin >> p [ i ]. x >> p [ i ]. y ; Circle res = min_circle ( p , n ); printf ( \"%.10lf \\n %.10lf %.10lf \\n \" , res . r , res . c . x , res . c . y ); return 0 ; }","title":"\u6700\u5c0f\u5706\u8986\u76d6"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_17","text":"","title":"\u51f8\u5305"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#graham","text":"\u6309x\uff0cy\u5750\u6807\u5347\u5e8f\u6392\u5217\uff0c\u786e\u5b9a\u51f8\u5305\u76842\u7684\u9876\u70b9\uff0c\u7136\u540e\u518d\u786e\u5b9a\u4e0a\u4e0b\u4e24\u4e2a\u51f8\u58f3 \u6392\u5e8f \\(O(nlogn)\\) \u200b\u200b \u5176\u4ed6 \\(O(n)\\) \u200b\u200b bool cmp ( Point & p , Point & q ){ if ( p . x != p . x ) return p . x < q . x ; else return p . y < q . y ; } vector < Point > ConvexHull ( Point * ps , int n ){ sort ( ps , ps + n , cmp ); int k = 0 ; //\u51f8\u5305\u9876\u70b9\u6570 vector < Point > qs ( n * 2 ); //\u4e0b\u51f8\u58f3 for ( int i = 0 ; i < n ; i ++ ){ //while\u8981\u6ce8\u610f while ( k > 1 && Cross ( qs [ k -1 ] - qs [ k -2 ], ps [ i ] - qs [ k -1 ] <= 0 )) k -- ; qs [ k ++ ] = ps [ i ]; } //\u4e0a\u51f8\u58f3 for ( int i = n -2 , t = k ; i >= 0 ; i -- ){ while ( k > t && Cross ( qs [ k -1 ] - qs [ k -2 ], ps [ i ] - qs [ k -1 ] <= 0 )) k -- ; qs [ k ++ ] = ps [ i ]; } qs . resize ( k -1 ); return qs ; }","title":"Graham\u626b\u63cf\u6cd5 \u7b97\u51f8\u5305"},{"location":"Python/Conda/","text":"Conda \u00b6 \u914d\u7f6e\u4ee3\u7406 \u00b6 \u5728 .condarc \u6587\u4ef6\u4e2d\u589e\u52a0\u914d\u7f6e\uff1a # \u8fd9\u91cc\u4ee5 Clash \u4e3a\u4f8b proxy_servers: http: http://127.0.0.1:7890 https: http://127.0.0.1:7890","title":"Conda"},{"location":"Python/Conda/#conda","text":"","title":"Conda"},{"location":"Python/Conda/#_1","text":"\u5728 .condarc \u6587\u4ef6\u4e2d\u589e\u52a0\u914d\u7f6e\uff1a # \u8fd9\u91cc\u4ee5 Clash \u4e3a\u4f8b proxy_servers: http: http://127.0.0.1:7890 https: http://127.0.0.1:7890","title":"\u914d\u7f6e\u4ee3\u7406"},{"location":"Python/Matplotlib/","text":"Matplotlib \u00b6 \u3010\u83ab\u70e6Python\u3011Matplotlib Python bilibili plt.tight_layout() plt . legend ( bbox_to_anchor = ( 1.05 , 0 ), loc = 'lower left' , borderaxespad = 0. ) plt . subplots_adjust ( hspace = 0.5 ) \u652f\u6301\u4e2d\u6587 A12 , = plt . plot ( xt , c , ls = '--' , c = 'black' ) plt . legend ( handles = [ A7 , A8 , A9 , A12 ], labels = [ 'A7' , 'A8' , 'A9' , 'A12' ]) (4\u6761\u6d88\u606f) Python: Matplotlib\u8c03\u6574\u5b50\u56fe\u95f4\u8ddd\u79bb_RaySunWHUT-CSDN\u535a\u5ba2_matplotlib \u5b50\u56fe\u95f4\u8ddd Matplotlib: Python plotting \u2014 Matplotlib 3.4.2 documentation matplotlib.pyplot \u00b6 plt.plot() \u00b6 Plot y versus x as lines and/or markers. import matplotlib.pyplot as plt plt . plot ([ x ], y , [ fmt ], * , data = None , ** kwargs ) # \u5355\u7ebf\u6761 plt . plot ([ x ], y , [ fmt ], [ x2 ], y2 , [ fmt2 ], ... , ** kwargs ) # \u591a\u7ebf\u6761 eg : plot ( y ) # plot y using x as index array 0..N-1 # fmt = '[color][marker][line]' \u53ef\u4ee5\u7528\u7f29\u5199\u6765\u8bbe\u7f6e\u989c\u8272,\u70b9\u578b\uff0c\u7ebf\u578b\uff0c\u4f46\u7528\u5173\u952e\u5b57\u7684\u4f18\u5148\u7ea7\u66f4\u9ad8 \u5bf9\u591a\u7ec4\u6570\u636e\u4f5c\u56fe # \u6cd5\u4e00 plot multiple times plt . plot ( x1 , y1 , 'bo' ) plt . plot ( x2 , y2 , 'go' ) # \u6cd5\u4e8c plt . plot ([ x ], y , [ fmt ], [ x2 ], y2 , [ fmt2 ], ... , ** kwargs ) \u53ef\u9009\u53c2\u6570: color \u4e5f\u53ef\u4ee5\u7528\u5341\u516d\u8fdb\u5236\u7684 RGB \u5b57\u7b26\u4e32\uff0c\u5982 color='#900302' character color 'b' blue \u84dd 'g' green \u7eff 'r' red \u7ea2 'c' cyan \u84dd\u7eff 'm' magenta \u6d0b\u7ea2 'y' yellow \u9ec4 'k' black \u9ed1 'w' white \u767d marker \u53ea\u652f\u6301\u7b80\u5199 character description '.' point marker ',' pixel marker 'o' circle marker 'v' triangle_down marker '^' triangle_up marker '<' triangle_left marker '>' triangle_right marker '1' tri_down marker '2' tri_up marker '3' tri_left marker '4' tri_right marker 's' square marker 'p' pentagon marker '*' star marker 'h' hexagon1 marker 'H' hexagon2 marker '+' plus marker 'x' x marker 'D' diamond marker 'd' thin_diamond marker '|' vline marker '_' hline marker linestyle character description '-' solid line style \u5b9e\u7ebf '--' dashed line style \u865a\u7ebf '-.' dash-dot line style \u70b9\u753b\u7ebf ':' dotted line style \u70b9\u7ebf \u5176\u4ed6 Property Description alpha scalar or None markeredgecolor / mec color markeredgewidth / mew float markersize / ms float linewidth / lw float plt.hist() \u00b6 Plot a histogram matplotlib . pyplot . hist ( x , bins = None , density = False , log = False , stacked = False ,) x\uff1a\u6570\u636e\uff0c\u76f4\u65b9\u56fe\u4e2d\u4f1a\u5bf9\u6570\u636e\u8fdb\u884c\u7edf\u8ba1 bins\uff1a\u6a2a\u5750\u6807\u533a\u95f4\u5206\u5e03\uff0cint or sequence or str\uff0cdefalut\uff1a None density\uff1aFalse \u7eb5\u5750\u6807\u4f1a\u663e\u793a\u9891\u6570\uff0cTrue \u7eb5\u5750\u6807\u663e\u793a\u9891\u7387\uff0c\u8ba1\u7b97\u65b9\u5f0f\uff1adensity = counts / (sum(counts) * np.diff(bins))\uff0cdefalut\uff1a False If stacked is also True , the sum of the histograms is normalized to 1. log\uff1a\u662f\u5426\u4f7f\u7528\u6307\u6570\u523b\u5ea6\uff08\u79d1\u5b66\u8ba1\u6570\u6cd5\uff09\uff0cdefalut\uff1a False stacked: bool\uff0c\u662f\u5426\u4e3a\u5806\u79ef\u72b6\u56fe\uff0cdefault\uff1a False \u5806\u79ef\u67f1\u72b6\u56fe plt . hist ( x = [ data1 , data2 ], stacked = True , color = [ 'g' , 'r' ], label = [ 'Survived' , 'Dead' ]) plt.scatter() \u00b6 matplotlib.pyplot.scatter plt . scatter ( x , y , size , color , ) size\uff1as color\uff1ac plt.bar() \u00b6 plt . bar ( x , y , facecolor , edgecolor ) plt.boxplot() \u00b6 \u7bb1\u7ebf\u56fe_MapC\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_\u7bb1\u7ebf\u56fe contour \u00b6 plt.contour() \u753b\u7b49\u9ad8\u7ebf plt . contour ([ X , Y ,], z , colors , lw ) plt.contourf() contour fill\uff0c\u7b49\u9ad8\u7ebf\u586b\u5145 plt . contourf ([ X , Y ,] Z , [ level ], ** kwargs ) # \u5982\u679c XY \u90fd\u662f\u4e00\u7ef4\u7684, \u90a3 z \u7684\u884c\u6570\u7b49\u4e8e len(y), \u5217\u6570\u7b49\u4e8e len(x) \u53c2\u6570 \u8bf4\u660e colors alpha float, default 1, between 0 (transparent) and 1 (opaque) cmap colormap eg: \u70ed\u529b\u56fe cmap=plt.cm.hot\uff0c cmap=plt.cm.cool level \u5bc6\u96c6\u7a0b\u5ea6 eg: plt.contour(X, Y, Z, 8) inline \u662f\u5426\u6dfb\u52a0\u7b49\u9ad8\u7ebf\u7684\u6570\u503c eg: plt.contour(X, Y, Z, inline = True) fontsize \u5b57\u4f53\u5927\u5c0f eg: plt.contour(X, Y, Z, inline = True, fontsize = 12) plt.clabel \u7ed9\u7b49\u9ad8\u7ebf\u6807\u6ce8 C = plt . contour ( x , y , z , 8 ) plt . clabel ( C , inline = True , fontsize ) plt.imshow() \u00b6 matplotlib.pyplot.imshow plt.semilogy() \u00b6 matplotlib.pyplot.semilogy \u2014 Matplotlib 3.5.0 documentation \u8bef\u5dee\u68d2 \u00b6 plt.annotate() \u00b6 plt . annotate ( str , xy , xycoords , xytext , textcoords , fontsize , arrowprops = dict ( arrowstyle = '->' , connectionstyle = 'arc3,rad=.2' )) plt.text() \u00b6 plt . text ( x , y , str , fontdict = { 'size' : 16 , 'color' : 'r' }, ha , va ) ha\uff1ahorizontal alignment\uff0c'center'\uff0c'bottom' va\uff1avertical alignment \u8bbe\u7f6e\u5750\u6807\u8f74 \u00b6 \u5750\u6807\u8f74\u8303\u56f4 \u00b6 plt.xlim() plt . xlim ( * args , ** kwargs ) # \u8bbe\u7f6e\u6a2a\u5750\u6807\u8303\u56f4 left , right = xlim () # return the current xlim plt . xlim (( left , right )) # set the xlim to left, right plt . xlim ( right = 3 ) # adjust the right leaving left unchanged plt . xlim ( left = 1 ) # adjust the left leaving right unchanged plt.yscale() Set the y-axis scale plt . yscale ( value ) value\uff1a{\"linear\", \"log\", \"symlog\", \"logit\", ...}\uff0c\u6bd4\u5982 log \u53ef\u4ee5\u8bb2 y \u8f74\u7684\u503c\u5168\u90fd\u53d6 log10 plt.xlabel() \u00b6 plt . xlabel ( xlabel , fontdict = None , labelpad = None , * , loc = None , ** kwargs ) # \u8bbe\u7f6exlabel xlabel\uff1a\u5750\u6807\u8f74\u6807\u7b7e\uff0cstr fontdict\uff1a\u5b57\u4f53\u5927\u5c0f\uff0c\u6570\u5b57\u6216 'small'\uff0c'large'\uff0c'medium' loc\uff1a label position\uff0c{'left', 'center', 'right'}\uff0cdefalut\uff1a center plt.xticks() \u00b6 plt . xticks ( ticks = None , labels = None ) plt . xticks ( rotation = 60 ) # \u65cb\u8f6c ticks\uff1a\u8981\u663e\u793a\u7684\u5750\u6807 labels\uff1a\u628a ticks \u4e2d\u7684\u6bcf\u4e2a\u6570\u503c\u66ff\u6362\u4e3a labels plt . xticks (()) # \u4e0d\u663e\u793a x \u8f74 \u663e\u793a\u90e8\u5206\u5750\u6807 \u00b6 \u4f1a\u7528\u5728\u6a2a\u5750\u6807\u662f\u8fde\u7eed\u65e5\u671f\u4e14\u7279\u522b\u591a\uff0c\u53ea\u9700\u8981\u663e\u793a\u90e8\u5206\u5373\u53ef\u7684\u60c5\u51b5 import matplotlib.ticker as ticker plt . gca () . xaxis . set_major_locator ( ticker . MultipleLocator ( 20 )) # \u95f4\u9694\u5750\u6807\u6570 gca\uff1a'get current axis' \u79fb\u52a8\u5750\u6807\u8f74 \u00b6 ax = plt . gca () ax . spines [ 'right' ] . set_color ( 'none' ) # \u8ba9\u4e0a\u9762\u7684\u810a\u6d88\u5931 ax . spines [ 'top' ] . set_color ( 'none' ) ax . xaxis . set_ticks_position ( 'bottom' ) # \u7528\u4e0b\u9762\u7684\u810a\u4ee3\u66ffxaxis ax . yaxis . set_ticks_position ( 'left' ) ax . spines [ 'bottom' ] . set_position (( 'data' , 0 )) # \u79fb\u52a8\u5750\u6807\u8f74 ax . spines [ 'left' ] . set_position (( 'data' , 0 )) \u7ed8\u5236\u591a\u56fe \u00b6 plt.figure() \u00b6 Create a new figure, or activate an existing figure plt . figure ( num = None , figsize = None , dpi = 80 , facecolor = None , edgecolor = None , frameon = True ) num \uff1a\u56fe\u50cf\u7f16\u53f7\u6216\u540d\u79f0\uff0cint or str figsize \uff1afigure \u7684\u5bbd\u548c\u9ad8\uff0cdefault\uff1a [6.4, 4.8] dpi \uff1aresolution\uff0c\u6307\u5b9a\u5206\u8fa8\u7387\uff0cdefault\uff1a 100.0 facecolor \uff1abackground color\uff0cdefault\uff1a 'white' edgecolor \uff1aborder color\uff0cdefault\uff1a 'white' frameon \uff1a\u663e\u793a\u8fb9\u6846\u4e0e\u5426\uff0cdefault\uff1a True # eg plt . figure ( num = 1 , figsize ( 4 , 3 )) plt . plot ( ... ) plt . figure ( num = 2 , figsize ( 4 , 3 )) plt . plot ( ... ) plt . show () # \u4f1a\u663e\u793a 2 \u5f20\u56fe plt.subplot() \u00b6 \u7ed8\u5236\u5b50\u56fe\uff0c\u5728\u540c\u4e00\u5f20\u56fe\u4e0a\u7ed8\u5236\u591a\u5f20\u56fe plt . subplot ( nrows , ncols , index , ** kwargs ) # default: (1, 1, 1) nrows\uff1a\u884c\u6570 ncols\uff1a\u5217\u6570 index\uff1a\u7f16\u53f7 # eg plt . subplot ( 221 ) # nrows=2, ncols=2, index=1 \u7684\u7b80\u5199 plt . plot ( ... ) ... plt.subplots() \u00b6 plt . subplots ( nrows = 1 , ncols = 1 ) Create a figure and a set of subplots Return: - fig: Figure - ax: axes.Axes or array of Axes fig , ax = plt . subplots ( 2 , 2 ) ax [ 0 ][ 0 ] . plot ( ... ) # \u7ed8\u5236\u7b2c\u4e00\u5f20\u56fe ... \u56fe\u4f8b \u00b6 plt . legend ( handles = [], labels = [], loc = 'best' ) loc\uff1alegend \u4f4d\u7f6e\uff0c'best'\uff0c'upper right' .... plt . plot ( x , y , label = 'test' ) plt . legend () l1 , = plt . plot ( x1 , y1 ) l2 , = plt . plot ( x2 , y2 ) plt . legend ( handles = [ l1 , l2 ], labels = [ '1' , '2' ], loc = 'best' ) plt . legend ( handles = [ l1 , ], labels = [ '1' , ], loc = 'best' ) \u5176\u4ed6 \u00b6 plt.colorbar() plt . colorbar () cmap \u00b6 \u8bbe\u7f6e\u989c\u8272 # \u4ee5\u7070\u5ea6\u56fe\u4e3a\u4f8b cmap = plt . get_cmap ( 'Greys' ) # \u7b49\u6548\u4e8e cmap = plt.cm.Greys norm = plt . Normalize ( vmin =- 3 , vmax = 3 ) # \u5c06\u6570\u503c\u8303\u56f4\u6807\u51c6\u5316\uff0c\u6295\u5f71\u5230\u6240\u9009\u7684\u989c\u8272\u96c6\u4e0a plt . imshow ( grid . T , extent = ( 0 , 1 , 0 , 1 ), cmap = cmap , norm = norm ) # \u7ed8\u56fe Axes \u00b6 Axes.set_title() \u00b6 matplotlib.axes.Axes.set_title Axes.xaxis \u00b6 \u5b50\u56fe\u7684\u6a2a\u5750\u6807\u8f74\u8bbe\u7f6e \u7eb5\u5750\u6807\u8f74\uff1a Axes.yaxis Axes . xaxis . set_visible ( False ) #\u9690\u85cf\u5750\u6807\u8f74 \u5176\u4ed6 \u00b6 matplotlib . use ( \u2018 agg \u2019 ) # \u5728\u6267\u884cimport matplotlib.pyplot as plt\u524d\u8fd0\u884c, \u4e0d\u4f1a\u663e\u793a\u7ed8\u56fe %matplotlib inline \u00b6 \u53ef\u4ee5\u5728 jupyter notebook \u4e2d\u5185\u5d4c\u663e\u793a\u56fe\u7247 fig.axes.annotate \u00b6 7.1 \u4f18\u5316\u4e0e\u6df1\u5ea6\u5b66\u4e60 - Dive-into-DL-PyTorch (tangshusen.me) \u4fdd\u5b58\u56fe\u7247 \u00b6 plt . savefig ( path ) \u91cd\u53e0\u95ee\u9898 \u00b6 \u8f93\u51fa\u7684\u56fe\u7247\u5185\u5bb9\u6709\u91cd\u53e0\uff0c\u5982\u6709\u591a\u4e2a\u5b50\u56fe\u65f6 # \u53ef\u80fd\u7684\u89e3\u51b3\u529e\u6cd5 plt . tight_layout () # \u5728\u8981\u663e\u793a\u6216\u8005\u4fdd\u5b58\u4e4b\u524d \u6ce8\u610f\u4e8b\u9879 \u00b6 plt.savefig \u5fc5\u987b\u8981\u5728 plt.show \u524d\u9762\uff0c\u56e0\u4e3a plt.show \u4f1a\u91ca\u653e\u8d44\u6e90 \u53c2\u8003 \u00b6 matplotlib.pyplot.plot()\u53c2\u6570\u8be6\u89e3_ims\u7684\u535a\u5ba2-CSDN\u535a\u5ba2 matplotlib.pyplot contourf()\u51fd\u6570\u7684\u4f7f\u7528_lens_\u7684\u535a\u5ba2-CSDN\u535a\u5ba2 \u753b\u56fe\u79bb\u4e0d\u5f00\u8272\u5f69--\u8bf4\u8bf4matplot\u7684cmap | \u7530\u91ce\u5149\u7684\u6280\u672f\u5c0f\u7ad9 Matplotlib \u53ea\u90e8\u5206\u663e\u793ax\u8f74\u7684\u523b\u6807\u548c\u8bbe\u7f6e\u4e3b\u4ece\u5750\u6807\u8f74_Alex\u62b1\u7740\u7206\u7c73\u82b1\u7684\u535a\u5ba2-CSDN\u535a\u5ba2","title":"Matplotlib"},{"location":"Python/Matplotlib/#matplotlib","text":"\u3010\u83ab\u70e6Python\u3011Matplotlib Python bilibili plt.tight_layout() plt . legend ( bbox_to_anchor = ( 1.05 , 0 ), loc = 'lower left' , borderaxespad = 0. ) plt . subplots_adjust ( hspace = 0.5 ) \u652f\u6301\u4e2d\u6587 A12 , = plt . plot ( xt , c , ls = '--' , c = 'black' ) plt . legend ( handles = [ A7 , A8 , A9 , A12 ], labels = [ 'A7' , 'A8' , 'A9' , 'A12' ]) (4\u6761\u6d88\u606f) Python: Matplotlib\u8c03\u6574\u5b50\u56fe\u95f4\u8ddd\u79bb_RaySunWHUT-CSDN\u535a\u5ba2_matplotlib \u5b50\u56fe\u95f4\u8ddd Matplotlib: Python plotting \u2014 Matplotlib 3.4.2 documentation","title":"Matplotlib"},{"location":"Python/Matplotlib/#matplotlibpyplot","text":"","title":"matplotlib.pyplot"},{"location":"Python/Matplotlib/#pltplot","text":"Plot y versus x as lines and/or markers. import matplotlib.pyplot as plt plt . plot ([ x ], y , [ fmt ], * , data = None , ** kwargs ) # \u5355\u7ebf\u6761 plt . plot ([ x ], y , [ fmt ], [ x2 ], y2 , [ fmt2 ], ... , ** kwargs ) # \u591a\u7ebf\u6761 eg : plot ( y ) # plot y using x as index array 0..N-1 # fmt = '[color][marker][line]' \u53ef\u4ee5\u7528\u7f29\u5199\u6765\u8bbe\u7f6e\u989c\u8272,\u70b9\u578b\uff0c\u7ebf\u578b\uff0c\u4f46\u7528\u5173\u952e\u5b57\u7684\u4f18\u5148\u7ea7\u66f4\u9ad8 \u5bf9\u591a\u7ec4\u6570\u636e\u4f5c\u56fe # \u6cd5\u4e00 plot multiple times plt . plot ( x1 , y1 , 'bo' ) plt . plot ( x2 , y2 , 'go' ) # \u6cd5\u4e8c plt . plot ([ x ], y , [ fmt ], [ x2 ], y2 , [ fmt2 ], ... , ** kwargs ) \u53ef\u9009\u53c2\u6570: color \u4e5f\u53ef\u4ee5\u7528\u5341\u516d\u8fdb\u5236\u7684 RGB \u5b57\u7b26\u4e32\uff0c\u5982 color='#900302' character color 'b' blue \u84dd 'g' green \u7eff 'r' red \u7ea2 'c' cyan \u84dd\u7eff 'm' magenta \u6d0b\u7ea2 'y' yellow \u9ec4 'k' black \u9ed1 'w' white \u767d marker \u53ea\u652f\u6301\u7b80\u5199 character description '.' point marker ',' pixel marker 'o' circle marker 'v' triangle_down marker '^' triangle_up marker '<' triangle_left marker '>' triangle_right marker '1' tri_down marker '2' tri_up marker '3' tri_left marker '4' tri_right marker 's' square marker 'p' pentagon marker '*' star marker 'h' hexagon1 marker 'H' hexagon2 marker '+' plus marker 'x' x marker 'D' diamond marker 'd' thin_diamond marker '|' vline marker '_' hline marker linestyle character description '-' solid line style \u5b9e\u7ebf '--' dashed line style \u865a\u7ebf '-.' dash-dot line style \u70b9\u753b\u7ebf ':' dotted line style \u70b9\u7ebf \u5176\u4ed6 Property Description alpha scalar or None markeredgecolor / mec color markeredgewidth / mew float markersize / ms float linewidth / lw float","title":"plt.plot()"},{"location":"Python/Matplotlib/#plthist","text":"Plot a histogram matplotlib . pyplot . hist ( x , bins = None , density = False , log = False , stacked = False ,) x\uff1a\u6570\u636e\uff0c\u76f4\u65b9\u56fe\u4e2d\u4f1a\u5bf9\u6570\u636e\u8fdb\u884c\u7edf\u8ba1 bins\uff1a\u6a2a\u5750\u6807\u533a\u95f4\u5206\u5e03\uff0cint or sequence or str\uff0cdefalut\uff1a None density\uff1aFalse \u7eb5\u5750\u6807\u4f1a\u663e\u793a\u9891\u6570\uff0cTrue \u7eb5\u5750\u6807\u663e\u793a\u9891\u7387\uff0c\u8ba1\u7b97\u65b9\u5f0f\uff1adensity = counts / (sum(counts) * np.diff(bins))\uff0cdefalut\uff1a False If stacked is also True , the sum of the histograms is normalized to 1. log\uff1a\u662f\u5426\u4f7f\u7528\u6307\u6570\u523b\u5ea6\uff08\u79d1\u5b66\u8ba1\u6570\u6cd5\uff09\uff0cdefalut\uff1a False stacked: bool\uff0c\u662f\u5426\u4e3a\u5806\u79ef\u72b6\u56fe\uff0cdefault\uff1a False \u5806\u79ef\u67f1\u72b6\u56fe plt . hist ( x = [ data1 , data2 ], stacked = True , color = [ 'g' , 'r' ], label = [ 'Survived' , 'Dead' ])","title":"plt.hist()"},{"location":"Python/Matplotlib/#pltscatter","text":"matplotlib.pyplot.scatter plt . scatter ( x , y , size , color , ) size\uff1as color\uff1ac","title":"plt.scatter()"},{"location":"Python/Matplotlib/#pltbar","text":"plt . bar ( x , y , facecolor , edgecolor )","title":"plt.bar()"},{"location":"Python/Matplotlib/#pltboxplot","text":"\u7bb1\u7ebf\u56fe_MapC\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_\u7bb1\u7ebf\u56fe","title":"plt.boxplot()"},{"location":"Python/Matplotlib/#contour","text":"plt.contour() \u753b\u7b49\u9ad8\u7ebf plt . contour ([ X , Y ,], z , colors , lw ) plt.contourf() contour fill\uff0c\u7b49\u9ad8\u7ebf\u586b\u5145 plt . contourf ([ X , Y ,] Z , [ level ], ** kwargs ) # \u5982\u679c XY \u90fd\u662f\u4e00\u7ef4\u7684, \u90a3 z \u7684\u884c\u6570\u7b49\u4e8e len(y), \u5217\u6570\u7b49\u4e8e len(x) \u53c2\u6570 \u8bf4\u660e colors alpha float, default 1, between 0 (transparent) and 1 (opaque) cmap colormap eg: \u70ed\u529b\u56fe cmap=plt.cm.hot\uff0c cmap=plt.cm.cool level \u5bc6\u96c6\u7a0b\u5ea6 eg: plt.contour(X, Y, Z, 8) inline \u662f\u5426\u6dfb\u52a0\u7b49\u9ad8\u7ebf\u7684\u6570\u503c eg: plt.contour(X, Y, Z, inline = True) fontsize \u5b57\u4f53\u5927\u5c0f eg: plt.contour(X, Y, Z, inline = True, fontsize = 12) plt.clabel \u7ed9\u7b49\u9ad8\u7ebf\u6807\u6ce8 C = plt . contour ( x , y , z , 8 ) plt . clabel ( C , inline = True , fontsize )","title":"contour"},{"location":"Python/Matplotlib/#pltimshow","text":"matplotlib.pyplot.imshow","title":"plt.imshow()"},{"location":"Python/Matplotlib/#pltsemilogy","text":"matplotlib.pyplot.semilogy \u2014 Matplotlib 3.5.0 documentation","title":"plt.semilogy()"},{"location":"Python/Matplotlib/#_1","text":"","title":"\u8bef\u5dee\u68d2"},{"location":"Python/Matplotlib/#pltannotate","text":"plt . annotate ( str , xy , xycoords , xytext , textcoords , fontsize , arrowprops = dict ( arrowstyle = '->' , connectionstyle = 'arc3,rad=.2' ))","title":"plt.annotate()"},{"location":"Python/Matplotlib/#plttext","text":"plt . text ( x , y , str , fontdict = { 'size' : 16 , 'color' : 'r' }, ha , va ) ha\uff1ahorizontal alignment\uff0c'center'\uff0c'bottom' va\uff1avertical alignment","title":"plt.text()"},{"location":"Python/Matplotlib/#_2","text":"","title":"\u8bbe\u7f6e\u5750\u6807\u8f74"},{"location":"Python/Matplotlib/#_3","text":"plt.xlim() plt . xlim ( * args , ** kwargs ) # \u8bbe\u7f6e\u6a2a\u5750\u6807\u8303\u56f4 left , right = xlim () # return the current xlim plt . xlim (( left , right )) # set the xlim to left, right plt . xlim ( right = 3 ) # adjust the right leaving left unchanged plt . xlim ( left = 1 ) # adjust the left leaving right unchanged plt.yscale() Set the y-axis scale plt . yscale ( value ) value\uff1a{\"linear\", \"log\", \"symlog\", \"logit\", ...}\uff0c\u6bd4\u5982 log \u53ef\u4ee5\u8bb2 y \u8f74\u7684\u503c\u5168\u90fd\u53d6 log10","title":"\u5750\u6807\u8f74\u8303\u56f4"},{"location":"Python/Matplotlib/#pltxlabel","text":"plt . xlabel ( xlabel , fontdict = None , labelpad = None , * , loc = None , ** kwargs ) # \u8bbe\u7f6exlabel xlabel\uff1a\u5750\u6807\u8f74\u6807\u7b7e\uff0cstr fontdict\uff1a\u5b57\u4f53\u5927\u5c0f\uff0c\u6570\u5b57\u6216 'small'\uff0c'large'\uff0c'medium' loc\uff1a label position\uff0c{'left', 'center', 'right'}\uff0cdefalut\uff1a center","title":"plt.xlabel()"},{"location":"Python/Matplotlib/#pltxticks","text":"plt . xticks ( ticks = None , labels = None ) plt . xticks ( rotation = 60 ) # \u65cb\u8f6c ticks\uff1a\u8981\u663e\u793a\u7684\u5750\u6807 labels\uff1a\u628a ticks \u4e2d\u7684\u6bcf\u4e2a\u6570\u503c\u66ff\u6362\u4e3a labels plt . xticks (()) # \u4e0d\u663e\u793a x \u8f74","title":"plt.xticks()"},{"location":"Python/Matplotlib/#_4","text":"\u4f1a\u7528\u5728\u6a2a\u5750\u6807\u662f\u8fde\u7eed\u65e5\u671f\u4e14\u7279\u522b\u591a\uff0c\u53ea\u9700\u8981\u663e\u793a\u90e8\u5206\u5373\u53ef\u7684\u60c5\u51b5 import matplotlib.ticker as ticker plt . gca () . xaxis . set_major_locator ( ticker . MultipleLocator ( 20 )) # \u95f4\u9694\u5750\u6807\u6570 gca\uff1a'get current axis'","title":"\u663e\u793a\u90e8\u5206\u5750\u6807"},{"location":"Python/Matplotlib/#_5","text":"ax = plt . gca () ax . spines [ 'right' ] . set_color ( 'none' ) # \u8ba9\u4e0a\u9762\u7684\u810a\u6d88\u5931 ax . spines [ 'top' ] . set_color ( 'none' ) ax . xaxis . set_ticks_position ( 'bottom' ) # \u7528\u4e0b\u9762\u7684\u810a\u4ee3\u66ffxaxis ax . yaxis . set_ticks_position ( 'left' ) ax . spines [ 'bottom' ] . set_position (( 'data' , 0 )) # \u79fb\u52a8\u5750\u6807\u8f74 ax . spines [ 'left' ] . set_position (( 'data' , 0 ))","title":"\u79fb\u52a8\u5750\u6807\u8f74"},{"location":"Python/Matplotlib/#_6","text":"","title":"\u7ed8\u5236\u591a\u56fe"},{"location":"Python/Matplotlib/#pltfigure","text":"Create a new figure, or activate an existing figure plt . figure ( num = None , figsize = None , dpi = 80 , facecolor = None , edgecolor = None , frameon = True ) num \uff1a\u56fe\u50cf\u7f16\u53f7\u6216\u540d\u79f0\uff0cint or str figsize \uff1afigure \u7684\u5bbd\u548c\u9ad8\uff0cdefault\uff1a [6.4, 4.8] dpi \uff1aresolution\uff0c\u6307\u5b9a\u5206\u8fa8\u7387\uff0cdefault\uff1a 100.0 facecolor \uff1abackground color\uff0cdefault\uff1a 'white' edgecolor \uff1aborder color\uff0cdefault\uff1a 'white' frameon \uff1a\u663e\u793a\u8fb9\u6846\u4e0e\u5426\uff0cdefault\uff1a True # eg plt . figure ( num = 1 , figsize ( 4 , 3 )) plt . plot ( ... ) plt . figure ( num = 2 , figsize ( 4 , 3 )) plt . plot ( ... ) plt . show () # \u4f1a\u663e\u793a 2 \u5f20\u56fe","title":"plt.figure()"},{"location":"Python/Matplotlib/#pltsubplot","text":"\u7ed8\u5236\u5b50\u56fe\uff0c\u5728\u540c\u4e00\u5f20\u56fe\u4e0a\u7ed8\u5236\u591a\u5f20\u56fe plt . subplot ( nrows , ncols , index , ** kwargs ) # default: (1, 1, 1) nrows\uff1a\u884c\u6570 ncols\uff1a\u5217\u6570 index\uff1a\u7f16\u53f7 # eg plt . subplot ( 221 ) # nrows=2, ncols=2, index=1 \u7684\u7b80\u5199 plt . plot ( ... ) ...","title":"plt.subplot()"},{"location":"Python/Matplotlib/#pltsubplots","text":"plt . subplots ( nrows = 1 , ncols = 1 ) Create a figure and a set of subplots Return: - fig: Figure - ax: axes.Axes or array of Axes fig , ax = plt . subplots ( 2 , 2 ) ax [ 0 ][ 0 ] . plot ( ... ) # \u7ed8\u5236\u7b2c\u4e00\u5f20\u56fe ...","title":"plt.subplots()"},{"location":"Python/Matplotlib/#_7","text":"plt . legend ( handles = [], labels = [], loc = 'best' ) loc\uff1alegend \u4f4d\u7f6e\uff0c'best'\uff0c'upper right' .... plt . plot ( x , y , label = 'test' ) plt . legend () l1 , = plt . plot ( x1 , y1 ) l2 , = plt . plot ( x2 , y2 ) plt . legend ( handles = [ l1 , l2 ], labels = [ '1' , '2' ], loc = 'best' ) plt . legend ( handles = [ l1 , ], labels = [ '1' , ], loc = 'best' )","title":"\u56fe\u4f8b"},{"location":"Python/Matplotlib/#_8","text":"plt.colorbar() plt . colorbar ()","title":"\u5176\u4ed6"},{"location":"Python/Matplotlib/#cmap","text":"\u8bbe\u7f6e\u989c\u8272 # \u4ee5\u7070\u5ea6\u56fe\u4e3a\u4f8b cmap = plt . get_cmap ( 'Greys' ) # \u7b49\u6548\u4e8e cmap = plt.cm.Greys norm = plt . Normalize ( vmin =- 3 , vmax = 3 ) # \u5c06\u6570\u503c\u8303\u56f4\u6807\u51c6\u5316\uff0c\u6295\u5f71\u5230\u6240\u9009\u7684\u989c\u8272\u96c6\u4e0a plt . imshow ( grid . T , extent = ( 0 , 1 , 0 , 1 ), cmap = cmap , norm = norm ) # \u7ed8\u56fe","title":"cmap"},{"location":"Python/Matplotlib/#axes","text":"","title":"Axes"},{"location":"Python/Matplotlib/#axesset_title","text":"matplotlib.axes.Axes.set_title","title":"Axes.set_title()"},{"location":"Python/Matplotlib/#axesxaxis","text":"\u5b50\u56fe\u7684\u6a2a\u5750\u6807\u8f74\u8bbe\u7f6e \u7eb5\u5750\u6807\u8f74\uff1a Axes.yaxis Axes . xaxis . set_visible ( False ) #\u9690\u85cf\u5750\u6807\u8f74","title":"Axes.xaxis"},{"location":"Python/Matplotlib/#_9","text":"matplotlib . use ( \u2018 agg \u2019 ) # \u5728\u6267\u884cimport matplotlib.pyplot as plt\u524d\u8fd0\u884c, \u4e0d\u4f1a\u663e\u793a\u7ed8\u56fe","title":"\u5176\u4ed6"},{"location":"Python/Matplotlib/#matplotlib-inline","text":"\u53ef\u4ee5\u5728 jupyter notebook \u4e2d\u5185\u5d4c\u663e\u793a\u56fe\u7247","title":"%matplotlib inline"},{"location":"Python/Matplotlib/#figaxesannotate","text":"7.1 \u4f18\u5316\u4e0e\u6df1\u5ea6\u5b66\u4e60 - Dive-into-DL-PyTorch (tangshusen.me)","title":"fig.axes.annotate"},{"location":"Python/Matplotlib/#_10","text":"plt . savefig ( path )","title":"\u4fdd\u5b58\u56fe\u7247"},{"location":"Python/Matplotlib/#_11","text":"\u8f93\u51fa\u7684\u56fe\u7247\u5185\u5bb9\u6709\u91cd\u53e0\uff0c\u5982\u6709\u591a\u4e2a\u5b50\u56fe\u65f6 # \u53ef\u80fd\u7684\u89e3\u51b3\u529e\u6cd5 plt . tight_layout () # \u5728\u8981\u663e\u793a\u6216\u8005\u4fdd\u5b58\u4e4b\u524d","title":"\u91cd\u53e0\u95ee\u9898"},{"location":"Python/Matplotlib/#_12","text":"plt.savefig \u5fc5\u987b\u8981\u5728 plt.show \u524d\u9762\uff0c\u56e0\u4e3a plt.show \u4f1a\u91ca\u653e\u8d44\u6e90","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"Python/Matplotlib/#_13","text":"matplotlib.pyplot.plot()\u53c2\u6570\u8be6\u89e3_ims\u7684\u535a\u5ba2-CSDN\u535a\u5ba2 matplotlib.pyplot contourf()\u51fd\u6570\u7684\u4f7f\u7528_lens_\u7684\u535a\u5ba2-CSDN\u535a\u5ba2 \u753b\u56fe\u79bb\u4e0d\u5f00\u8272\u5f69--\u8bf4\u8bf4matplot\u7684cmap | \u7530\u91ce\u5149\u7684\u6280\u672f\u5c0f\u7ad9 Matplotlib \u53ea\u90e8\u5206\u663e\u793ax\u8f74\u7684\u523b\u6807\u548c\u8bbe\u7f6e\u4e3b\u4ece\u5750\u6807\u8f74_Alex\u62b1\u7740\u7206\u7c73\u82b1\u7684\u535a\u5ba2-CSDN\u535a\u5ba2","title":"\u53c2\u8003"},{"location":"Python/Numpy/","text":"Numpy \u00b6 NumPy Reference \u2014 NumPy v1.20 Manual np.polyfit(x, y, 1) np.poly1d() cunmsum ndarray \u00b6 \u521b\u5efa\u4e0e\u521d\u59cb\u5316 \u00b6 import numpy as np np . array ( object , dtype = None , copy = True ) np . empty ( shape , dtype = float , order = 'C' , * , like = None ) # \u5e76\u4e0d\u521d\u59cb\u5316\u4e3a0 np . ones ( shape , dtype = None , order = 'C' , * , like = None ) # \u521d\u59cb\u5316\u4e3a 1 np . zeros ( shape , dtype = float , order = 'C' , * , like = None ) # \u521d\u59cb\u5316\u4e3a 0 np . arange ( 24 ) . reshape (( 2 , 3 , 4 )) # range\u521b\u5efalist,arange\u521b\u5efaarray np . arange ( 24 ) . reshape (( 2 , 3 , - 1 )) # \u53c2\u6570\u6709-1\u65f6\u4f1a\u81ea\u52a8\u6839\u636e\u5176\u4ed6\u7684\u53c2\u6570\u8ba1\u7b97 np . linspace ( start , stop , num ) # [start, stop] \u5e73\u5747\u53d6 num \u4e2a\u6570 \u7ef4\u5ea6\u53d8\u6362 \u00b6 # transpose np . transpose ( a , axes ) # axes: tuple or list of ints ndarray . transpose ( * axes ) # axes: tuple of ints, or n ints \u7c7b\u578b\u8f6c\u6362 \u00b6 \u6570\u5b66\u8ba1\u7b97\u4e0e\u6570\u636e\u5904\u7406 \u00b6 np.random.normal() numpy.random.normal \u2014 NumPy v1.21 Manual random . normal ( loc = 0.0 , scale = 1.0 , size = None ) np.random.uniform() \u8bfb\u53d6\u6570\u636e \u00b6 # \u4e00\u7ef4 a [ 2 ] a [ 1 : 4 : 2 ] # \u5207\u7247 3 5 \u6b65\u957f2 # \u591a\u7ef4\u6570\u7ec4 a = np . arange ( 24 ) . reshape (( 2 , 3 , 4 )) a [ 1 , 2 , 3 ] a [::,::,::] # \u5207\u7247 a [[ 1 , 4 ],:] # \u83b7\u53d6 1,4 \u884c # \u591a\u7ef4\u6570\u636e\u53ea\u89c4\u5b9a\u7b2c\u4e00\u7ef4 a [ size :] # size~\u6700\u540e\u4e00\u884c \u6570\u636e\u8d4b\u503c \u00b6 \u589e\u52a0\u6570\u636e \u00b6 # concatenate axis=1 \u6c34\u5e73\u8fde\u63a5 np . concatenate (( a1 , a2 , ... ), axis = 0 ) # \u62fc\u63a5 # append axis=0 \u5217\u589e\u52a0 np . append ( arr , values , axis = None ) \u5220\u9664\u6570\u636e \u00b6 \u6570\u636e\u5904\u7406 \u00b6 ndarray.astype() \u6570\u636e\u7edf\u8ba1 \u00b6 \u5747\u503c # \u6c42\u5e73\u5747\u503c axis=0 \u6c42\u5217\u5747\u503c, axis=1 \u6c42\u884c\u5747\u503c\uff0c\u9ed8\u8ba4\u6c42\u6240\u6709\u6570\u7684\u5747\u503c np . mean ( matrix , axis = None ) \u6c42\u548c # \u6c42\u548c np . sum ( matrix , axis = None ) \u6807\u51c6\u5dee # \u6c42\u6807\u51c6\u5dee np . std ( matrix , axis = None ) \u65b9\u5dee # \u6c42\u65b9\u5dee np . var ( matrix , axis = None ) \u534f\u65b9\u5dee # \u6c42\u534f\u65b9\u5dee rowvar=True\u4ee5\u884c\u4e3a\u53d8\u91cf\uff0c\u5426\u5219\u4ee5\u5217\u4e3a\u53d8\u91cf np . cov ( matrix , rowvar = True ) \u8303\u6570 x_norm = np . linalg . norm ( x , ord = 2 , axis = None , keepdims = False ) \u9ed8\u8ba4 2 \u8303\u6570 \u53c2\u6570 \u8bf4\u660e \u5f0f\u5b50 ord=1 1\u8303\u6570 $ ord=2\uff08\u9ed8\u8ba4\uff09 2\u8303\u6570 \\(\\sqrt{x_1^2+x_2^2+...}\\) ord=np.inf \u65e0\u7a77\u8303\u6570 $max( np.argmax() Returns the indices of the maximum values along an axis. np . argmax ( a , axis = None , out = None ) \u77e9\u9635\u8fd0\u7b97 \u00b6 \u77e9\u9635\u8f6c\u7f6e \u603b\u7684\u6765\u8bf4\uff0c1 \u7ef4\u7684 list \u548c ndarray \u65e0\u6cd5\u8f6c\u7f6e \u975e\u4e00\u7ef4\u7684 list \u53ea\u80fd\u7528 np.transpose() \uff0cndarray \u8fd8\u53ef\u4ee5\u7528 ndarray.T \u4e00\u7ef4 # \u65e0\u8bba a \u662f list \u8fd8\u662f ndarray # \u5148\u53d8\u6210 2 \u7ef4\u7684 list at = np . transpose ([ a ]) # [a] \u662f\u4e00\u4e2a list # \u5148\u53d8\u6210 2 \u7ef4\u7684 ndarray a = np . array ([ a ]) at = a . T # transpose \u4e5f\u884c \u4e8c\u7ef4 # list at = np . transpose ( a ) # ndarray at = a . T at = np . transpose ( a ) \u77e9\u9635\u4e58\u6cd5 ndarray # x, w \u90fd\u662f ndarray np . dot ( x , w ) # \u70b9\u4e58 np . corss ( x , w ) # \u53c9\u4e58 matrix # x, w \u90fd\u662f matrix x = np . mat ([ 1 , 2 , 3 ]) w = np . mat ([ 1 ], [ 2 ], [ 3 ]) x * w np.matmul() np . matmul ( a , b ) \u5982\u679c a\uff0cb \u90fd\u662f 2 \u7ef4\u7684\uff0c\u90a3\u4e48\u5c31\u662f\u666e\u901a\u7684\u77e9\u9635\u8fd0\u7b97 \u5982\u679c a\uff0cb \u90fd\u662f \\(N(N>2)\\) \u200b\u200b\u200b\u200b\u200b \u7ef4\u7684\uff0c\u90a3\u4e48\u4f1a\u628a a\uff0cb \u5f53\u6210\u4ee5\u6700\u540e 2 \u7ef4\u4e3a\u7ef4\u5ea6\u7684\u82e5\u5e72\u77e9\u9635\u5206\u522b\u505a\u77e9\u9635\u4e58\u6cd5\uff0c\u6bd4\u5982 a \u662f \\(2\\times4\\times3\\) \u200b\u200b\u200b\u200b\uff0cb \u662f \\(2\\times3\\times2\\) \u200b\u200b\u200b\u200b\uff0c\u90a3\u4e48\u5c31\u662f a \u4e2d\u7b2c\u4e00\u4e2a \\(4\\times3\\) \u200b\u200b\u200b\u200b \u4e0e b \u4e2d\u7b2c\u4e00\u4e2a \\(3\\times2\\) \u200b\u200b\u200b\u200b \u505a\u77e9\u9635\u4e58\u6cd5\uff0c\u7b2c\u4e8c\u4e2a\u540c\u7406\uff0c\u7ed3\u679c\u662f \\(2\\times4\\times2\\) \u200b\u200b\u200b\u200b \u5982\u679c a\uff0cb \u5176\u4e2d\u4e00\u4e2a\u662f \\(N(N>2)\\) \u200b\u200b\u200b \u7ef4\u7684\u6216\u8005\u4e24\u8005\u7684\u7ef4\u6570\u4e0d\u540c\uff0c\u90a3\u4e48\u4f4e\u7ef4\u7684\u4f1a\u5411\u9ad8\u7ef4\u8fdb\u884c\u5e7f\u64ad\u518d\u8ba1\u7b97 \u6570\u5b66\u8fd0\u7b97 \u00b6 \u56db\u5219\u8fd0\u7b97 # ndarray \u5bf9\u5e94\u5143\u7d20\u505a\u56db\u5219\u8fd0\u7b97, \u4f4e\u7ef4\u4f1a\u5411\u9ad8\u7ef4\u5e7f\u64ad a = np . array ([ 1 , 2 ]) b = np . array ([ 2 , 3 ]) c = a * b # [2, 6] # matrix \u9664\u4e86 * \u662f\u505a\u77e9\u9635\u8fd0\u7b97\u5916, \u5176\u4ed6\u56db\u5219\u8fd0\u7b97\u4e0e ndarray \u76f8\u540c \u5176\u4ed6 # \u90fd\u662f\u5bf9\u6bcf\u4e2a\u5143\u7d20\u8fdb\u884c\u76f8\u5e94\u7684\u8fd0\u7b97 np . power ( a , 2 ) # \u5bf9 a \u4e2d\u6bcf\u4e2a\u5143\u7d20\u5e73\u65b9, \u53ef\u4ee5\u7b80\u5199\u4e3a a**2 np . log2 ( a ) np . around ( a ) np . abs ( a ) astype() \u00b6 # \u6570\u636e\u7c7b\u578b\u8f6c\u6362 ndarray . astype ( dtype , order = 'K' , casting = 'unsafe' , subok = True , copy = True ) meshgrid() / mgird() \u00b6 meshgrid() # \u751f\u6210\u7f51\u683c\u70b9\u5750\u6807\u77e9\u9635 np . meshgrid ( * xi , copy = True , sparse = False , indexing = 'xy' ) X , Y = np . meshgrid ( x , y ) # \u628a x,y \u8fdb\u884c\u7b1b\u5361\u5c14\u79ef\u7684\u7ed3\u679c\u7684\u7b2c\u4e00\u4f4d\u5143\u7d20\u653e\u8fdb X, \u7b2c\u4e8c\u4f4d\u5143\u7d20\u7ed9 Y mgird() >>> np . mgrid [ 0 : 5 , 0 : 5 ] # \u4e0e meshgird \u7684\u6548\u679c\u7c7b\u4f3c array ([[[ 0 , 0 , 0 , 0 , 0 ], [ 1 , 1 , 1 , 1 , 1 ], [ 2 , 2 , 2 , 2 , 2 ], [ 3 , 3 , 3 , 3 , 3 ], [ 4 , 4 , 4 , 4 , 4 ]], [[ 0 , 1 , 2 , 3 , 4 ], [ 0 , 1 , 2 , 3 , 4 ], [ 0 , 1 , 2 , 3 , 4 ], [ 0 , 1 , 2 , 3 , 4 ], [ 0 , 1 , 2 , 3 , 4 ]]]) >>> np . mgrid [ - 1 : 1 : 5 j ] # 5j \u8868\u793a\u751f\u62105\u4e2a\u70b9 array ([ - 1. , - 0.5 , 0. , 0.5 , 1. ]) >>> np . mgrid [ 0 : 1 : 100 j , 0 : 1 : 100 j ] # \u4e8c\u7ef4\u7684\u4f8b\u5b50 shape \u00b6 ndarray . shape # \u8fd4\u56de shape # \u4e5f\u53ef\u4ee5\u7528\u6765 reshape ndarray . shape = ( int , int ) # eg\uff1a\u83b7\u53d6\u6570\u636e\u7684\u5217\u6570 print ( data . shape [ 1 ]) clip() \u00b6 np . clip ( a , a_min , a_max ) # a \u4e2d\u5c0f\u4e8e a_min \u7684\u6570\u90fd\u53d8\u6210 a_min, \u5927\u4e8e a_max \u7684\u6570\u90fd\u53d8\u6210 a_max random.shuffle() \u00b6 # \u6253\u4e71\u987a\u5e8f arr = np . arange ( 10 ) np . random . shuffle ( arr ) argsort() \u00b6 \u83b7\u5f97\u5bf9\u5143\u7d20\u6392\u5e8f\u540e\u7684\u4e0b\u6807\uff08\u6392\u5e8f\u524d\u7684\u7d22\u5f15\uff09 np . argsort ( x )[: 3 ] # \u8fd4\u56de x \u4e2d\u6700\u5c0f\u7684\u4e09\u4e2a\u6570\u7684\u4e0b\u6807 np . argsort ( x )[ - 3 :] # \u8fd4\u56de x \u4e2d\u6700\u5927\u7684\u4e09\u4e2a\u6570\u7684\u4e0b\u6807 save() / load() \u00b6 np . save ( './test.npy' , x ) x = np . load ( './test.npy' ) numpy.random.seed() arr.ravel() arr.flatten() np.linalg \u00b6 inv() svd() np.random \u00b6 random.permutation() \u4ea7\u751f [1, x] \u7684\u968f\u673a\u5e8f\u5217 random . permutation ( x ) \u53c2\u8003 \u00b6 np\u5165\u95e8\u8be6\u7ec6\u6559\u7a0b(\u4e8c)_Smallactive-CSDN\u535a\u5ba2 np\u5165\u95e8\u8be6\u7ec6\u6559\u7a0b(\u4e09)_Smallactive-CSDN\u535a\u5ba2","title":"Numpy"},{"location":"Python/Numpy/#numpy","text":"NumPy Reference \u2014 NumPy v1.20 Manual np.polyfit(x, y, 1) np.poly1d() cunmsum","title":"Numpy"},{"location":"Python/Numpy/#ndarray","text":"","title":"ndarray"},{"location":"Python/Numpy/#_1","text":"import numpy as np np . array ( object , dtype = None , copy = True ) np . empty ( shape , dtype = float , order = 'C' , * , like = None ) # \u5e76\u4e0d\u521d\u59cb\u5316\u4e3a0 np . ones ( shape , dtype = None , order = 'C' , * , like = None ) # \u521d\u59cb\u5316\u4e3a 1 np . zeros ( shape , dtype = float , order = 'C' , * , like = None ) # \u521d\u59cb\u5316\u4e3a 0 np . arange ( 24 ) . reshape (( 2 , 3 , 4 )) # range\u521b\u5efalist,arange\u521b\u5efaarray np . arange ( 24 ) . reshape (( 2 , 3 , - 1 )) # \u53c2\u6570\u6709-1\u65f6\u4f1a\u81ea\u52a8\u6839\u636e\u5176\u4ed6\u7684\u53c2\u6570\u8ba1\u7b97 np . linspace ( start , stop , num ) # [start, stop] \u5e73\u5747\u53d6 num \u4e2a\u6570","title":"\u521b\u5efa\u4e0e\u521d\u59cb\u5316"},{"location":"Python/Numpy/#_2","text":"# transpose np . transpose ( a , axes ) # axes: tuple or list of ints ndarray . transpose ( * axes ) # axes: tuple of ints, or n ints","title":"\u7ef4\u5ea6\u53d8\u6362"},{"location":"Python/Numpy/#_3","text":"","title":"\u7c7b\u578b\u8f6c\u6362"},{"location":"Python/Numpy/#_4","text":"np.random.normal() numpy.random.normal \u2014 NumPy v1.21 Manual random . normal ( loc = 0.0 , scale = 1.0 , size = None ) np.random.uniform()","title":"\u6570\u5b66\u8ba1\u7b97\u4e0e\u6570\u636e\u5904\u7406"},{"location":"Python/Numpy/#_5","text":"# \u4e00\u7ef4 a [ 2 ] a [ 1 : 4 : 2 ] # \u5207\u7247 3 5 \u6b65\u957f2 # \u591a\u7ef4\u6570\u7ec4 a = np . arange ( 24 ) . reshape (( 2 , 3 , 4 )) a [ 1 , 2 , 3 ] a [::,::,::] # \u5207\u7247 a [[ 1 , 4 ],:] # \u83b7\u53d6 1,4 \u884c # \u591a\u7ef4\u6570\u636e\u53ea\u89c4\u5b9a\u7b2c\u4e00\u7ef4 a [ size :] # size~\u6700\u540e\u4e00\u884c","title":"\u8bfb\u53d6\u6570\u636e"},{"location":"Python/Numpy/#_6","text":"","title":"\u6570\u636e\u8d4b\u503c"},{"location":"Python/Numpy/#_7","text":"# concatenate axis=1 \u6c34\u5e73\u8fde\u63a5 np . concatenate (( a1 , a2 , ... ), axis = 0 ) # \u62fc\u63a5 # append axis=0 \u5217\u589e\u52a0 np . append ( arr , values , axis = None )","title":"\u589e\u52a0\u6570\u636e"},{"location":"Python/Numpy/#_8","text":"","title":"\u5220\u9664\u6570\u636e"},{"location":"Python/Numpy/#_9","text":"ndarray.astype()","title":"\u6570\u636e\u5904\u7406"},{"location":"Python/Numpy/#_10","text":"\u5747\u503c # \u6c42\u5e73\u5747\u503c axis=0 \u6c42\u5217\u5747\u503c, axis=1 \u6c42\u884c\u5747\u503c\uff0c\u9ed8\u8ba4\u6c42\u6240\u6709\u6570\u7684\u5747\u503c np . mean ( matrix , axis = None ) \u6c42\u548c # \u6c42\u548c np . sum ( matrix , axis = None ) \u6807\u51c6\u5dee # \u6c42\u6807\u51c6\u5dee np . std ( matrix , axis = None ) \u65b9\u5dee # \u6c42\u65b9\u5dee np . var ( matrix , axis = None ) \u534f\u65b9\u5dee # \u6c42\u534f\u65b9\u5dee rowvar=True\u4ee5\u884c\u4e3a\u53d8\u91cf\uff0c\u5426\u5219\u4ee5\u5217\u4e3a\u53d8\u91cf np . cov ( matrix , rowvar = True ) \u8303\u6570 x_norm = np . linalg . norm ( x , ord = 2 , axis = None , keepdims = False ) \u9ed8\u8ba4 2 \u8303\u6570 \u53c2\u6570 \u8bf4\u660e \u5f0f\u5b50 ord=1 1\u8303\u6570 $ ord=2\uff08\u9ed8\u8ba4\uff09 2\u8303\u6570 \\(\\sqrt{x_1^2+x_2^2+...}\\) ord=np.inf \u65e0\u7a77\u8303\u6570 $max( np.argmax() Returns the indices of the maximum values along an axis. np . argmax ( a , axis = None , out = None )","title":"\u6570\u636e\u7edf\u8ba1"},{"location":"Python/Numpy/#_11","text":"\u77e9\u9635\u8f6c\u7f6e \u603b\u7684\u6765\u8bf4\uff0c1 \u7ef4\u7684 list \u548c ndarray \u65e0\u6cd5\u8f6c\u7f6e \u975e\u4e00\u7ef4\u7684 list \u53ea\u80fd\u7528 np.transpose() \uff0cndarray \u8fd8\u53ef\u4ee5\u7528 ndarray.T \u4e00\u7ef4 # \u65e0\u8bba a \u662f list \u8fd8\u662f ndarray # \u5148\u53d8\u6210 2 \u7ef4\u7684 list at = np . transpose ([ a ]) # [a] \u662f\u4e00\u4e2a list # \u5148\u53d8\u6210 2 \u7ef4\u7684 ndarray a = np . array ([ a ]) at = a . T # transpose \u4e5f\u884c \u4e8c\u7ef4 # list at = np . transpose ( a ) # ndarray at = a . T at = np . transpose ( a ) \u77e9\u9635\u4e58\u6cd5 ndarray # x, w \u90fd\u662f ndarray np . dot ( x , w ) # \u70b9\u4e58 np . corss ( x , w ) # \u53c9\u4e58 matrix # x, w \u90fd\u662f matrix x = np . mat ([ 1 , 2 , 3 ]) w = np . mat ([ 1 ], [ 2 ], [ 3 ]) x * w np.matmul() np . matmul ( a , b ) \u5982\u679c a\uff0cb \u90fd\u662f 2 \u7ef4\u7684\uff0c\u90a3\u4e48\u5c31\u662f\u666e\u901a\u7684\u77e9\u9635\u8fd0\u7b97 \u5982\u679c a\uff0cb \u90fd\u662f \\(N(N>2)\\) \u200b\u200b\u200b\u200b\u200b \u7ef4\u7684\uff0c\u90a3\u4e48\u4f1a\u628a a\uff0cb \u5f53\u6210\u4ee5\u6700\u540e 2 \u7ef4\u4e3a\u7ef4\u5ea6\u7684\u82e5\u5e72\u77e9\u9635\u5206\u522b\u505a\u77e9\u9635\u4e58\u6cd5\uff0c\u6bd4\u5982 a \u662f \\(2\\times4\\times3\\) \u200b\u200b\u200b\u200b\uff0cb \u662f \\(2\\times3\\times2\\) \u200b\u200b\u200b\u200b\uff0c\u90a3\u4e48\u5c31\u662f a \u4e2d\u7b2c\u4e00\u4e2a \\(4\\times3\\) \u200b\u200b\u200b\u200b \u4e0e b \u4e2d\u7b2c\u4e00\u4e2a \\(3\\times2\\) \u200b\u200b\u200b\u200b \u505a\u77e9\u9635\u4e58\u6cd5\uff0c\u7b2c\u4e8c\u4e2a\u540c\u7406\uff0c\u7ed3\u679c\u662f \\(2\\times4\\times2\\) \u200b\u200b\u200b\u200b \u5982\u679c a\uff0cb \u5176\u4e2d\u4e00\u4e2a\u662f \\(N(N>2)\\) \u200b\u200b\u200b \u7ef4\u7684\u6216\u8005\u4e24\u8005\u7684\u7ef4\u6570\u4e0d\u540c\uff0c\u90a3\u4e48\u4f4e\u7ef4\u7684\u4f1a\u5411\u9ad8\u7ef4\u8fdb\u884c\u5e7f\u64ad\u518d\u8ba1\u7b97","title":"\u77e9\u9635\u8fd0\u7b97"},{"location":"Python/Numpy/#_12","text":"\u56db\u5219\u8fd0\u7b97 # ndarray \u5bf9\u5e94\u5143\u7d20\u505a\u56db\u5219\u8fd0\u7b97, \u4f4e\u7ef4\u4f1a\u5411\u9ad8\u7ef4\u5e7f\u64ad a = np . array ([ 1 , 2 ]) b = np . array ([ 2 , 3 ]) c = a * b # [2, 6] # matrix \u9664\u4e86 * \u662f\u505a\u77e9\u9635\u8fd0\u7b97\u5916, \u5176\u4ed6\u56db\u5219\u8fd0\u7b97\u4e0e ndarray \u76f8\u540c \u5176\u4ed6 # \u90fd\u662f\u5bf9\u6bcf\u4e2a\u5143\u7d20\u8fdb\u884c\u76f8\u5e94\u7684\u8fd0\u7b97 np . power ( a , 2 ) # \u5bf9 a \u4e2d\u6bcf\u4e2a\u5143\u7d20\u5e73\u65b9, \u53ef\u4ee5\u7b80\u5199\u4e3a a**2 np . log2 ( a ) np . around ( a ) np . abs ( a )","title":"\u6570\u5b66\u8fd0\u7b97"},{"location":"Python/Numpy/#astype","text":"# \u6570\u636e\u7c7b\u578b\u8f6c\u6362 ndarray . astype ( dtype , order = 'K' , casting = 'unsafe' , subok = True , copy = True )","title":"astype()"},{"location":"Python/Numpy/#meshgrid-mgird","text":"meshgrid() # \u751f\u6210\u7f51\u683c\u70b9\u5750\u6807\u77e9\u9635 np . meshgrid ( * xi , copy = True , sparse = False , indexing = 'xy' ) X , Y = np . meshgrid ( x , y ) # \u628a x,y \u8fdb\u884c\u7b1b\u5361\u5c14\u79ef\u7684\u7ed3\u679c\u7684\u7b2c\u4e00\u4f4d\u5143\u7d20\u653e\u8fdb X, \u7b2c\u4e8c\u4f4d\u5143\u7d20\u7ed9 Y mgird() >>> np . mgrid [ 0 : 5 , 0 : 5 ] # \u4e0e meshgird \u7684\u6548\u679c\u7c7b\u4f3c array ([[[ 0 , 0 , 0 , 0 , 0 ], [ 1 , 1 , 1 , 1 , 1 ], [ 2 , 2 , 2 , 2 , 2 ], [ 3 , 3 , 3 , 3 , 3 ], [ 4 , 4 , 4 , 4 , 4 ]], [[ 0 , 1 , 2 , 3 , 4 ], [ 0 , 1 , 2 , 3 , 4 ], [ 0 , 1 , 2 , 3 , 4 ], [ 0 , 1 , 2 , 3 , 4 ], [ 0 , 1 , 2 , 3 , 4 ]]]) >>> np . mgrid [ - 1 : 1 : 5 j ] # 5j \u8868\u793a\u751f\u62105\u4e2a\u70b9 array ([ - 1. , - 0.5 , 0. , 0.5 , 1. ]) >>> np . mgrid [ 0 : 1 : 100 j , 0 : 1 : 100 j ] # \u4e8c\u7ef4\u7684\u4f8b\u5b50","title":"meshgrid() / mgird()"},{"location":"Python/Numpy/#shape","text":"ndarray . shape # \u8fd4\u56de shape # \u4e5f\u53ef\u4ee5\u7528\u6765 reshape ndarray . shape = ( int , int ) # eg\uff1a\u83b7\u53d6\u6570\u636e\u7684\u5217\u6570 print ( data . shape [ 1 ])","title":"shape"},{"location":"Python/Numpy/#clip","text":"np . clip ( a , a_min , a_max ) # a \u4e2d\u5c0f\u4e8e a_min \u7684\u6570\u90fd\u53d8\u6210 a_min, \u5927\u4e8e a_max \u7684\u6570\u90fd\u53d8\u6210 a_max","title":"clip()"},{"location":"Python/Numpy/#randomshuffle","text":"# \u6253\u4e71\u987a\u5e8f arr = np . arange ( 10 ) np . random . shuffle ( arr )","title":"random.shuffle()"},{"location":"Python/Numpy/#argsort","text":"\u83b7\u5f97\u5bf9\u5143\u7d20\u6392\u5e8f\u540e\u7684\u4e0b\u6807\uff08\u6392\u5e8f\u524d\u7684\u7d22\u5f15\uff09 np . argsort ( x )[: 3 ] # \u8fd4\u56de x \u4e2d\u6700\u5c0f\u7684\u4e09\u4e2a\u6570\u7684\u4e0b\u6807 np . argsort ( x )[ - 3 :] # \u8fd4\u56de x \u4e2d\u6700\u5927\u7684\u4e09\u4e2a\u6570\u7684\u4e0b\u6807","title":"argsort()"},{"location":"Python/Numpy/#save-load","text":"np . save ( './test.npy' , x ) x = np . load ( './test.npy' ) numpy.random.seed() arr.ravel() arr.flatten()","title":"save() / load()"},{"location":"Python/Numpy/#nplinalg","text":"inv() svd()","title":"np.linalg"},{"location":"Python/Numpy/#nprandom","text":"random.permutation() \u4ea7\u751f [1, x] \u7684\u968f\u673a\u5e8f\u5217 random . permutation ( x )","title":"np.random"},{"location":"Python/Numpy/#_13","text":"np\u5165\u95e8\u8be6\u7ec6\u6559\u7a0b(\u4e8c)_Smallactive-CSDN\u535a\u5ba2 np\u5165\u95e8\u8be6\u7ec6\u6559\u7a0b(\u4e09)_Smallactive-CSDN\u535a\u5ba2","title":"\u53c2\u8003"},{"location":"Python/Pandas/","text":"Pandas \u00b6 pandas documentation \u2014 pandas 1.2.4 documentation (pydata.org) Pandas \u6559\u7a0b - \u76d6\u82e5 (gairuo.com) \u6570\u636e\u5904\u7406\uff1a \u5206\u7bb1 pd.cut() pd.qcut() \u79bb\u6563\u6570\u503c pd.get_dummies() DataFrame \u00b6 Dataframe \u4e2d str \u7c7b\u578b\u662f object \u521b\u5efa DataFrame \u00b6 pandas . DataFrame ( data = None , index = None , columns = None , dtype = None , copy = None ) # \u6570\u636e \u7d22\u5f15\uff08\u884c\u6807\u7b7e\uff09 \u5217\u6807\u7b7e \u6570\u636e\u7c7b\u578b \u62f7\u8d1d\u6570\u636e \u7528\u5b57\u5178\u521b\u5efa \u00b6 data = { \"one\" : np . random . randn ( 4 ), \"two\" : np . linspace ( 1 , 4 , 4 ), \"three\" :[ 'zhangsan' , '\u674e\u56db' , 999 , 0.1 ]} df = pd . DataFrame ( data , index = [ 1 , 2 , 3 , 4 ]) \u7528\u6570\u7ec4\u521b\u5efa \u00b6 data = np . random . randn ( 6 , 4 ) #\u521b\u5efa\u4e00\u4e2a6\u884c4\u5217\u7684\u6570\u7ec4 df = pd . DataFrame ( data , columns = list ( 'ABCD' ), index = [ 1 , 2 , 'a' , 'b' , '2006-10-1' , '\u7b2c\u516d\u884c' ]) \u7a7a DataFrame \u00b6 pd . DataFrame ( columns = ( 'id' , 'name' , 'grade' , 'class' )) \u7d22\u5f15\u8bbe\u7f6e \u00b6 \u521b\u5efa df \u662f\u4e0d\u6307\u5b9a\u7d22\u5f15\u9ed8\u8ba4\u4f1a\u4ece 0 \u5f00\u59cb set_index \uff1a\u5c06 df \u4e2d\u7684\u67d0\u5217\u8bbe\u7f6e\u4e3a\u7d22\u5f15 df . set_index ( 'one' , drop = False ) # drop\u9ed8\u8ba4\u4e3aTrue, \u8868\u793a\u8bbe\u7f6e\u7d22\u5f15\u540e\u5c06\u8be5\u5217\u5220\u9664 reset_index \uff1a\u91cd\u7f6e\u7d22\u5f15 df . set_index ( drop = True ) # drop\u9ed8\u8ba4\u4e3aFalse, \u8868\u793a\u539f\u7d22\u5f15\u5c06\u4f5c\u4e3a\u6570\u636e\u4fdd\u7559 \u8bfb\u53d6 DataFrame \u00b6 \u884c\u540d\u4e0e\u5217\u540d\u4e0d\u4e00\u5b9a\u662f\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u662f int \u6309\u5217\u8bfb\u53d6 \u00b6 # \u6309\u5217\u540d, \u8fd9\u91cc\u7684\u5217\u540d\u4e0d\u4e00\u5b9a\u90fd\u662f str f . \u5217\u540d # \u8fd4\u56de Series df [ '\u5217\u540d' ] # \u8fd4\u56de series df [[ '\u5217\u540d' ]] / df [[ '\u5217\u540d1' , '\u5217\u540d2' , ... ]] # \u8fd4\u56de Dataframe Dataframe # \u6309\u5217\u53f7 iloc df . iloc [:, 0 : 2 ] # [0,2)\u5217 \u8fd4\u56de Dataframe \u6309\u884c\u8bfb\u53d6 \u00b6 # \u6309\u884c\u6807\u7b7e loc, \u8fd9\u91cc\u884c\u6807\u7b7e\u4e0d\u4e00\u5b9a\u662f\u5b57\u7b26\u4e32 df . loc [ '\u884c\u6807\u7b7e' ] / df . loc [[ '\u884c\u6807\u7b7e' ]] / df . loc [[ '\u884c\u6807\u7b7e1' , '\u884c\u6807\u7b7e2' , ... ]] # series Dataframe Dataframe # \u6309\u884c\u53f7 iloc df . iloc [ \u884c\u53f7 ] / df . iloc [[ \u884c\u53f7 ]] / df . iloc [[ \u884c\u53f71 , \u884c\u53f72 , ... ]] / df . iloc [ \u884c\u53f71 : \u884c\u53f72 ] # \u7b2c\u4e00\u4e2a\u662fseries \u540e\u9762\u7684\u662fDataframe \u6309\u5355\u5143\u683c\u8bfb\u53d6 \u00b6 df [ col ][ row ] # eg: df['a'][1] df[1][2] /* loc */ # \u4e00\u4e2a\u5355\u5143\u683c, float or str df . loc [ row ][ col ] / df . loc [ row , col ] # \u4e00\u884c\u591a\u5217, Series df . loc [ row ][[ col1 , col2 ]] / df . loc [ 1 ,[ col1 , col2 ]] / df . loc [ row ][ firstCol : endCol ] / df . loc [ row , firstCol : endCol ] # \u591a\u884c\u4e00\u5217 \u884c\u53f7\u4e0d\u80fd\u7528\u5207\u7247 df . loc [[ row1 , row2 ]][ col ] / df . loc [[ row1 , row2 ]] . col / df . loc [[ row1 , row2 ], col ] # \u591a\u884c\u591a\u5217 \u884c\u53f7\u4e0d\u80fd\u7528\u5207\u7247 df . loc [[ row1 , row2 ],[ col1 , col2 ]] / df . loc [[ row1 , row2 ]][[ col1 , col2 ]] / df . loc [[ row1 , row3 ], firstCol : endCol ] /* iloc */ # \u4e00\u4e2a\u5355\u5143\u683c \u4e0d\u652f\u6301df.iloc[rowNo,col] df . iloc [ rowNo ] . col / df . iloc [ rowNo ][ col ] / df . iloc [ rowNo , colNo ] # \u4e00\u884c\u591a\u5217 \u4e0d\u652f\u6301df.iloc[rowNo,[col1,col2]],df.iloc[rowNo,firstColNo:endColNo] df . iloc [ rowNo , firestColNo : endColNo ] / df . iloc [ rowNo ][[ col1 , col2 ]] / df . iloc [ rowNo ][ firesCol : endCol ] # \u591a\u884c\u4e00\u5217 df . iloc [[ rowNo1 , rowNo2 ], colNo ] / df . iloc [ firstRowNo : endRowNo , colNo ] / df . iloc [[ rowNo1 , rowNo2 ]][ col ] / df . iloc [ firstRowNo : endRowNo ][ col ] # \u591a\u884c\u591a\u5217 df . iloc [ firstRowNo : endRowNo , firstColNo : endColNo ] / df . iloc [[ RowNo1 , RowNo2 ],[ ColNo1 , ColNo2 ]] / df . iloc [ firstRowNo : endRowNo ][[ col1 , col2 ]] \u6309\u6761\u4ef6\u8bfb\u53d6 \u00b6 \u590d\u6742\u7684\u5224\u65ad\u6761\u4ef6\u9700\u8981\u7528\u5230 | \u4e0e & \uff0c\u800c\u4e14\u6bcf\u9879\u90fd\u8981\u7528 () df = df [ df [ 'NR' ] == 1 ] # \u6539\u53d8\u6ee1\u8db3\u7279\u5b9a\u7684\u884c\u7684\u67d0\u5217\u7684\u503c df . loc [ df [ \"NA\" ] == 1 , \"IsNa\" ] = 1 \u8d4b\u503c,\u66ff\u6362 \u00b6 \u5982\u679c\u7528\u4e00\u4e2a\u5217\u8868\u6216\u6570\u7ec4\u8d4b\u503c\uff0c\u5176\u957f\u5ea6\u5fc5\u987b\u76f8\u540c Dataframe.fillna() \u6309\u5217\u8d4b\u503c \u00b6 df . col = colList / colValue df [ col ] = colList / colValue # eg: df.A=[1,2,3,4,5,6],df['A']=0 \u6309\u884c\u8d4b\u503c \u00b6 df . loc [ row ] = rowList df . loc [ row ] = rowValue \u591a\u884c\u591a\u5217\u8d4b\u503c \u00b6 df . loc [[ row1 , row2 ],[ col1 , col2 ]] = value / valueList df . iloc [[ rowNo1 , rowNo2 ],[ colNo1 , colNo2 ]] = value / valueList df . iloc [[ rowNo1 , rowNo2 ]][[ col1 , col2 ]] = value / valueList \u5176\u4ed6 \u00b6 df [ df == 'NR' ] = 0 # \u6240\u6709 NR \u66ff\u6362\u6210 0 DataFrame.fillna() \u00b6 \u589e\u52a0\u6570\u636e \u00b6 \u6309\u5217\u589e\u52a0 \u00b6 df.insert() \u00b6 df . insert ( loc , column , value ) loc\uff1a\u63d2\u5165\u5217\u4f4d\u7f6e\uff0cint column\uff1a\u5217\u540d value\uff1a\u63d2\u5165\u503c\uff0cint\uff0cSeries\uff0cor array-like \u6309\u884c\u589e\u52a0 \u00b6 df.loc() \u00b6 df . loc [ '\u65b0\u884c\u6807\u7b7e' ] = values # \u65b0\u884c\u6807\u7b7e\u4e0d\u4e00\u5b9a\u8981\u662f str # eg df . loc [ len ( df ) + 1 ] = values df.append() \u00b6 index \u53ef\u4ee5\u6709\u76f8\u540c\u7684 columns \u53ef\u4ee5\u4e0d\u540c\uff0ccolumns \u4f1a\u53d6\u5e76\u96c6\uff0c\u7f3a\u5931\u7684\u5730\u65b9\u8865 nan df1 = df1 . append ( df2 ) df.concat() \u00b6 pandas . concat ( objs , axis = 0 , join = 'outer' , ignore_index = False ) axis\uff1a\u62fc\u63a5\u7684\u7ef4\u5ea6 join\uff1a\u8fde\u63a5\u65b9\u5f0f\uff0c{'inner', 'outer'}\uff0cdefalut\uff1a outer ignore_index\uff1aTrue \u5c06\u4f1a\u91cd\u65b0\u6392\u5217\uff0c0...N-1\uff0cdefault\uff1a False \u5220\u9664\u6570\u636e \u00b6 Dataframe.drop() DataFrame . drop ( labels = None , axis = 0 , index = None , columns = None , level = None , inplace = False , errors = 'raise' ) Dataframe.dropna() DataFrame . dropna ( axis = 0 , how = 'any' , thresh = None , subset = None , inplace = False ) Remove missing values subset ( column label or sequence of labels\uff0coptional )\uff1aLabels along other axis to consider, e.g. if you are dropping rows these would be a list of columns to include. \u4f5c\u56fe \u00b6 Dataframe.plot() DataFrame . plot ( * args , ** kwargs ) args: kind ( str )\uff1a\u53ef\u9009 \"scatter\" ... x\uff1alabel y\uff1alabel figsize\uff1a cmap colorbar hands on ml \u4e2d\u7684\u4f8b\u5b50 # \u623f\u4ef7\u4f8b\u5b50\uff0c\u6a2a\u7eb5\u5750\u6807\u8868\u793a\u7ecf\u7eac\u5ea6\uff0cs \u7528\u4eba\u53e3\u8868\u793a\u5927\u5c0f\uff0cc \u7528\u623f\u4ef7\u6765\u4ee3\u8868\u989c\u8272\uff0c\u5177\u4f53\u53ef\u4ee5\u770b pyplot.scatter housing . plot ( kind = \"scatter\" , x = \"longitude\" , y = \"latitude\" , alpha = 0.4 , s = housing [ \"population\" ] / 100 , label = \"population\" , figsize = ( 10 , 7 ), c = \"median_house_value\" , cmap = plt . get_cmap ( \"jet\" ), colorbar = True , ) plt . legend () Dataframe.hist() \u4f1a\u8c03\u7528 matplotlib.pyplot.hist() DataFrame . hist ( column = None , by = None , grid = True , xlabelsize = None , xrot = None , ylabelsize = None , yrot = None , ax = None , sharex = False , sharey = False , figsize = None , layout = None , bins = 10 , backend = None , legend = False , ** kwargs ) groupby crosstab \u4ea4\u53c9\u5217\u8868\u53d6\u503c Pandas.plotting \u00b6 plotting.scatter_matrix() plotting . scatter_matrix ( frame , alpha = 0.5 , figsize = None , ax = None , grid = False , diagonal = 'hist' , marker = '.' , density_kwds = None , hist_kwds = None , range_padding = 0.05 , ** kwargs ) Draw a matrix of scatter plots\uff0c\u753b\u77e9\u9635\u6563\u70b9\u56fe \u4e00\u4e9b\u4f8b\u5b50 \u00b6 \u53d6\u51fa\u6570\u503c\u7c7b \u00b6 # str \u7c7b\u7684 dtype \u662f 'object' numeric_features = all_features . dtypes [ all_features . dtypes != 'object' ] . index all_features [ numeric_features ] \u5bf9\u6bcf\u5217\u6570\u636e\u6807\u51c6\u5316 \u00b6 df_normal = df . apply ( lambda x : ( x - x . mean ()) / ( x . std ())) \u586b\u8865\u7f3a\u5931\u503c \u00b6 import pandas as pd data = pd . read_csv ( r \"path.csv\" , index_col = 0 ) data . head () data . loc [:, \"Age\" ] = data . loc [:, \"Age\" ] . fillna ( data . loc [:, \"Age\" ] . median ()) #.fillna \u5728DataFrame\u91cc\u9762\u76f4\u63a5\u8fdb\u884c\u586b\u8865 data . dropna ( axis = 0 , inplace = True ) #.dropna(axis=0)\u5220\u9664\u6240\u6709\u6709\u7f3a\u5931\u503c\u7684\u884c\uff0c.dropna(axis=1)\u5220\u9664\u6240\u6709\u6709\u7f3a\u5931\u503c\u7684\u5217 #\u53c2\u6570inplace\uff0c\u4e3aTrue\u8868\u793a\u5728\u539f\u6570\u636e\u96c6\u4e2d\u4fee\u6539, False\u4f1a\u8fd4\u56de\u4e00\u4e2a\u526f\u672c,\u9ed8\u8ba4 False \u53c2\u8003 \u00b6 pandas \u5165\u95e8\uff1aDataFrame\u7684\u521b\u5efa\uff0c\u8bfb\u5199\uff0c\u63d2\u5165\u548c\u5220\u9664_\u4e0d\u53bb\u60f3\u7ed3\u679c\uff0c\u4e00\u76f4\u5728\u8def\u4e0a-CSDN\u535a\u5ba2 \u8be6\u89e3pandas\u7684read_csv\u65b9\u6cd5 - \u53e4\u660e\u5730\u76c6 - \u535a\u5ba2\u56ed","title":"Pandas"},{"location":"Python/Pandas/#pandas","text":"pandas documentation \u2014 pandas 1.2.4 documentation (pydata.org) Pandas \u6559\u7a0b - \u76d6\u82e5 (gairuo.com) \u6570\u636e\u5904\u7406\uff1a \u5206\u7bb1 pd.cut() pd.qcut() \u79bb\u6563\u6570\u503c pd.get_dummies()","title":"Pandas"},{"location":"Python/Pandas/#dataframe","text":"Dataframe \u4e2d str \u7c7b\u578b\u662f object","title":"DataFrame"},{"location":"Python/Pandas/#dataframe_1","text":"pandas . DataFrame ( data = None , index = None , columns = None , dtype = None , copy = None ) # \u6570\u636e \u7d22\u5f15\uff08\u884c\u6807\u7b7e\uff09 \u5217\u6807\u7b7e \u6570\u636e\u7c7b\u578b \u62f7\u8d1d\u6570\u636e","title":"\u521b\u5efa DataFrame"},{"location":"Python/Pandas/#_1","text":"data = { \"one\" : np . random . randn ( 4 ), \"two\" : np . linspace ( 1 , 4 , 4 ), \"three\" :[ 'zhangsan' , '\u674e\u56db' , 999 , 0.1 ]} df = pd . DataFrame ( data , index = [ 1 , 2 , 3 , 4 ])","title":"\u7528\u5b57\u5178\u521b\u5efa"},{"location":"Python/Pandas/#_2","text":"data = np . random . randn ( 6 , 4 ) #\u521b\u5efa\u4e00\u4e2a6\u884c4\u5217\u7684\u6570\u7ec4 df = pd . DataFrame ( data , columns = list ( 'ABCD' ), index = [ 1 , 2 , 'a' , 'b' , '2006-10-1' , '\u7b2c\u516d\u884c' ])","title":"\u7528\u6570\u7ec4\u521b\u5efa"},{"location":"Python/Pandas/#dataframe_2","text":"pd . DataFrame ( columns = ( 'id' , 'name' , 'grade' , 'class' ))","title":"\u7a7a DataFrame"},{"location":"Python/Pandas/#_3","text":"\u521b\u5efa df \u662f\u4e0d\u6307\u5b9a\u7d22\u5f15\u9ed8\u8ba4\u4f1a\u4ece 0 \u5f00\u59cb set_index \uff1a\u5c06 df \u4e2d\u7684\u67d0\u5217\u8bbe\u7f6e\u4e3a\u7d22\u5f15 df . set_index ( 'one' , drop = False ) # drop\u9ed8\u8ba4\u4e3aTrue, \u8868\u793a\u8bbe\u7f6e\u7d22\u5f15\u540e\u5c06\u8be5\u5217\u5220\u9664 reset_index \uff1a\u91cd\u7f6e\u7d22\u5f15 df . set_index ( drop = True ) # drop\u9ed8\u8ba4\u4e3aFalse, \u8868\u793a\u539f\u7d22\u5f15\u5c06\u4f5c\u4e3a\u6570\u636e\u4fdd\u7559","title":"\u7d22\u5f15\u8bbe\u7f6e"},{"location":"Python/Pandas/#dataframe_3","text":"\u884c\u540d\u4e0e\u5217\u540d\u4e0d\u4e00\u5b9a\u662f\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u662f int","title":"\u8bfb\u53d6 DataFrame"},{"location":"Python/Pandas/#_4","text":"# \u6309\u5217\u540d, \u8fd9\u91cc\u7684\u5217\u540d\u4e0d\u4e00\u5b9a\u90fd\u662f str f . \u5217\u540d # \u8fd4\u56de Series df [ '\u5217\u540d' ] # \u8fd4\u56de series df [[ '\u5217\u540d' ]] / df [[ '\u5217\u540d1' , '\u5217\u540d2' , ... ]] # \u8fd4\u56de Dataframe Dataframe # \u6309\u5217\u53f7 iloc df . iloc [:, 0 : 2 ] # [0,2)\u5217 \u8fd4\u56de Dataframe","title":"\u6309\u5217\u8bfb\u53d6"},{"location":"Python/Pandas/#_5","text":"# \u6309\u884c\u6807\u7b7e loc, \u8fd9\u91cc\u884c\u6807\u7b7e\u4e0d\u4e00\u5b9a\u662f\u5b57\u7b26\u4e32 df . loc [ '\u884c\u6807\u7b7e' ] / df . loc [[ '\u884c\u6807\u7b7e' ]] / df . loc [[ '\u884c\u6807\u7b7e1' , '\u884c\u6807\u7b7e2' , ... ]] # series Dataframe Dataframe # \u6309\u884c\u53f7 iloc df . iloc [ \u884c\u53f7 ] / df . iloc [[ \u884c\u53f7 ]] / df . iloc [[ \u884c\u53f71 , \u884c\u53f72 , ... ]] / df . iloc [ \u884c\u53f71 : \u884c\u53f72 ] # \u7b2c\u4e00\u4e2a\u662fseries \u540e\u9762\u7684\u662fDataframe","title":"\u6309\u884c\u8bfb\u53d6"},{"location":"Python/Pandas/#_6","text":"df [ col ][ row ] # eg: df['a'][1] df[1][2] /* loc */ # \u4e00\u4e2a\u5355\u5143\u683c, float or str df . loc [ row ][ col ] / df . loc [ row , col ] # \u4e00\u884c\u591a\u5217, Series df . loc [ row ][[ col1 , col2 ]] / df . loc [ 1 ,[ col1 , col2 ]] / df . loc [ row ][ firstCol : endCol ] / df . loc [ row , firstCol : endCol ] # \u591a\u884c\u4e00\u5217 \u884c\u53f7\u4e0d\u80fd\u7528\u5207\u7247 df . loc [[ row1 , row2 ]][ col ] / df . loc [[ row1 , row2 ]] . col / df . loc [[ row1 , row2 ], col ] # \u591a\u884c\u591a\u5217 \u884c\u53f7\u4e0d\u80fd\u7528\u5207\u7247 df . loc [[ row1 , row2 ],[ col1 , col2 ]] / df . loc [[ row1 , row2 ]][[ col1 , col2 ]] / df . loc [[ row1 , row3 ], firstCol : endCol ] /* iloc */ # \u4e00\u4e2a\u5355\u5143\u683c \u4e0d\u652f\u6301df.iloc[rowNo,col] df . iloc [ rowNo ] . col / df . iloc [ rowNo ][ col ] / df . iloc [ rowNo , colNo ] # \u4e00\u884c\u591a\u5217 \u4e0d\u652f\u6301df.iloc[rowNo,[col1,col2]],df.iloc[rowNo,firstColNo:endColNo] df . iloc [ rowNo , firestColNo : endColNo ] / df . iloc [ rowNo ][[ col1 , col2 ]] / df . iloc [ rowNo ][ firesCol : endCol ] # \u591a\u884c\u4e00\u5217 df . iloc [[ rowNo1 , rowNo2 ], colNo ] / df . iloc [ firstRowNo : endRowNo , colNo ] / df . iloc [[ rowNo1 , rowNo2 ]][ col ] / df . iloc [ firstRowNo : endRowNo ][ col ] # \u591a\u884c\u591a\u5217 df . iloc [ firstRowNo : endRowNo , firstColNo : endColNo ] / df . iloc [[ RowNo1 , RowNo2 ],[ ColNo1 , ColNo2 ]] / df . iloc [ firstRowNo : endRowNo ][[ col1 , col2 ]]","title":"\u6309\u5355\u5143\u683c\u8bfb\u53d6"},{"location":"Python/Pandas/#_7","text":"\u590d\u6742\u7684\u5224\u65ad\u6761\u4ef6\u9700\u8981\u7528\u5230 | \u4e0e & \uff0c\u800c\u4e14\u6bcf\u9879\u90fd\u8981\u7528 () df = df [ df [ 'NR' ] == 1 ] # \u6539\u53d8\u6ee1\u8db3\u7279\u5b9a\u7684\u884c\u7684\u67d0\u5217\u7684\u503c df . loc [ df [ \"NA\" ] == 1 , \"IsNa\" ] = 1","title":"\u6309\u6761\u4ef6\u8bfb\u53d6"},{"location":"Python/Pandas/#_8","text":"\u5982\u679c\u7528\u4e00\u4e2a\u5217\u8868\u6216\u6570\u7ec4\u8d4b\u503c\uff0c\u5176\u957f\u5ea6\u5fc5\u987b\u76f8\u540c Dataframe.fillna()","title":"\u8d4b\u503c,\u66ff\u6362"},{"location":"Python/Pandas/#_9","text":"df . col = colList / colValue df [ col ] = colList / colValue # eg: df.A=[1,2,3,4,5,6],df['A']=0","title":"\u6309\u5217\u8d4b\u503c"},{"location":"Python/Pandas/#_10","text":"df . loc [ row ] = rowList df . loc [ row ] = rowValue","title":"\u6309\u884c\u8d4b\u503c"},{"location":"Python/Pandas/#_11","text":"df . loc [[ row1 , row2 ],[ col1 , col2 ]] = value / valueList df . iloc [[ rowNo1 , rowNo2 ],[ colNo1 , colNo2 ]] = value / valueList df . iloc [[ rowNo1 , rowNo2 ]][[ col1 , col2 ]] = value / valueList","title":"\u591a\u884c\u591a\u5217\u8d4b\u503c"},{"location":"Python/Pandas/#_12","text":"df [ df == 'NR' ] = 0 # \u6240\u6709 NR \u66ff\u6362\u6210 0","title":"\u5176\u4ed6"},{"location":"Python/Pandas/#dataframefillna","text":"","title":"DataFrame.fillna()"},{"location":"Python/Pandas/#_13","text":"","title":"\u589e\u52a0\u6570\u636e"},{"location":"Python/Pandas/#_14","text":"","title":"\u6309\u5217\u589e\u52a0"},{"location":"Python/Pandas/#dfinsert","text":"df . insert ( loc , column , value ) loc\uff1a\u63d2\u5165\u5217\u4f4d\u7f6e\uff0cint column\uff1a\u5217\u540d value\uff1a\u63d2\u5165\u503c\uff0cint\uff0cSeries\uff0cor array-like","title":"df.insert()"},{"location":"Python/Pandas/#_15","text":"","title":"\u6309\u884c\u589e\u52a0"},{"location":"Python/Pandas/#dfloc","text":"df . loc [ '\u65b0\u884c\u6807\u7b7e' ] = values # \u65b0\u884c\u6807\u7b7e\u4e0d\u4e00\u5b9a\u8981\u662f str # eg df . loc [ len ( df ) + 1 ] = values","title":"df.loc()"},{"location":"Python/Pandas/#dfappend","text":"index \u53ef\u4ee5\u6709\u76f8\u540c\u7684 columns \u53ef\u4ee5\u4e0d\u540c\uff0ccolumns \u4f1a\u53d6\u5e76\u96c6\uff0c\u7f3a\u5931\u7684\u5730\u65b9\u8865 nan df1 = df1 . append ( df2 )","title":"df.append()"},{"location":"Python/Pandas/#dfconcat","text":"pandas . concat ( objs , axis = 0 , join = 'outer' , ignore_index = False ) axis\uff1a\u62fc\u63a5\u7684\u7ef4\u5ea6 join\uff1a\u8fde\u63a5\u65b9\u5f0f\uff0c{'inner', 'outer'}\uff0cdefalut\uff1a outer ignore_index\uff1aTrue \u5c06\u4f1a\u91cd\u65b0\u6392\u5217\uff0c0...N-1\uff0cdefault\uff1a False","title":"df.concat()"},{"location":"Python/Pandas/#_16","text":"Dataframe.drop() DataFrame . drop ( labels = None , axis = 0 , index = None , columns = None , level = None , inplace = False , errors = 'raise' ) Dataframe.dropna() DataFrame . dropna ( axis = 0 , how = 'any' , thresh = None , subset = None , inplace = False ) Remove missing values subset ( column label or sequence of labels\uff0coptional )\uff1aLabels along other axis to consider, e.g. if you are dropping rows these would be a list of columns to include.","title":"\u5220\u9664\u6570\u636e"},{"location":"Python/Pandas/#_17","text":"Dataframe.plot() DataFrame . plot ( * args , ** kwargs ) args: kind ( str )\uff1a\u53ef\u9009 \"scatter\" ... x\uff1alabel y\uff1alabel figsize\uff1a cmap colorbar hands on ml \u4e2d\u7684\u4f8b\u5b50 # \u623f\u4ef7\u4f8b\u5b50\uff0c\u6a2a\u7eb5\u5750\u6807\u8868\u793a\u7ecf\u7eac\u5ea6\uff0cs \u7528\u4eba\u53e3\u8868\u793a\u5927\u5c0f\uff0cc \u7528\u623f\u4ef7\u6765\u4ee3\u8868\u989c\u8272\uff0c\u5177\u4f53\u53ef\u4ee5\u770b pyplot.scatter housing . plot ( kind = \"scatter\" , x = \"longitude\" , y = \"latitude\" , alpha = 0.4 , s = housing [ \"population\" ] / 100 , label = \"population\" , figsize = ( 10 , 7 ), c = \"median_house_value\" , cmap = plt . get_cmap ( \"jet\" ), colorbar = True , ) plt . legend () Dataframe.hist() \u4f1a\u8c03\u7528 matplotlib.pyplot.hist() DataFrame . hist ( column = None , by = None , grid = True , xlabelsize = None , xrot = None , ylabelsize = None , yrot = None , ax = None , sharex = False , sharey = False , figsize = None , layout = None , bins = 10 , backend = None , legend = False , ** kwargs ) groupby crosstab \u4ea4\u53c9\u5217\u8868\u53d6\u503c","title":"\u4f5c\u56fe"},{"location":"Python/Pandas/#pandasplotting","text":"plotting.scatter_matrix() plotting . scatter_matrix ( frame , alpha = 0.5 , figsize = None , ax = None , grid = False , diagonal = 'hist' , marker = '.' , density_kwds = None , hist_kwds = None , range_padding = 0.05 , ** kwargs ) Draw a matrix of scatter plots\uff0c\u753b\u77e9\u9635\u6563\u70b9\u56fe","title":"Pandas.plotting"},{"location":"Python/Pandas/#_18","text":"","title":"\u4e00\u4e9b\u4f8b\u5b50"},{"location":"Python/Pandas/#_19","text":"# str \u7c7b\u7684 dtype \u662f 'object' numeric_features = all_features . dtypes [ all_features . dtypes != 'object' ] . index all_features [ numeric_features ]","title":"\u53d6\u51fa\u6570\u503c\u7c7b"},{"location":"Python/Pandas/#_20","text":"df_normal = df . apply ( lambda x : ( x - x . mean ()) / ( x . std ()))","title":"\u5bf9\u6bcf\u5217\u6570\u636e\u6807\u51c6\u5316"},{"location":"Python/Pandas/#_21","text":"import pandas as pd data = pd . read_csv ( r \"path.csv\" , index_col = 0 ) data . head () data . loc [:, \"Age\" ] = data . loc [:, \"Age\" ] . fillna ( data . loc [:, \"Age\" ] . median ()) #.fillna \u5728DataFrame\u91cc\u9762\u76f4\u63a5\u8fdb\u884c\u586b\u8865 data . dropna ( axis = 0 , inplace = True ) #.dropna(axis=0)\u5220\u9664\u6240\u6709\u6709\u7f3a\u5931\u503c\u7684\u884c\uff0c.dropna(axis=1)\u5220\u9664\u6240\u6709\u6709\u7f3a\u5931\u503c\u7684\u5217 #\u53c2\u6570inplace\uff0c\u4e3aTrue\u8868\u793a\u5728\u539f\u6570\u636e\u96c6\u4e2d\u4fee\u6539, False\u4f1a\u8fd4\u56de\u4e00\u4e2a\u526f\u672c,\u9ed8\u8ba4 False","title":"\u586b\u8865\u7f3a\u5931\u503c"},{"location":"Python/Pandas/#_22","text":"pandas \u5165\u95e8\uff1aDataFrame\u7684\u521b\u5efa\uff0c\u8bfb\u5199\uff0c\u63d2\u5165\u548c\u5220\u9664_\u4e0d\u53bb\u60f3\u7ed3\u679c\uff0c\u4e00\u76f4\u5728\u8def\u4e0a-CSDN\u535a\u5ba2 \u8be6\u89e3pandas\u7684read_csv\u65b9\u6cd5 - \u53e4\u660e\u5730\u76c6 - \u535a\u5ba2\u56ed","title":"\u53c2\u8003"},{"location":"Python/Pymssql/","text":"Pymssql \u00b6 pymssql \u2014 pymssql 2.2.2.dev0+gff84c14.d20210416 documentation \u8fde\u63a5 \u00b6 # \u8fde\u63a5 autocommit \u81ea\u52a8\u4fee\u6539\u64cd\u4f5c conn = sql . connect ( serverName , userName , password , autocommit = True ) cursor = conn . cursor () # \u5173\u95ed\u8fde\u63a5 conn . close () \u53ef\u80fd\u9047\u5230\u7684\u9519\u8bef\uff1a 18456 \uff1a\u5148\u7528 windows \u8eab\u4efd\u9a8c\u8bc1\u767b\u5f55\uff0c\u53f3\u51fb\u6570\u636e\u5e93\uff08\u4e0d\u662f\u91cc\u9762\u6570\u636e\u5e93\u90a3\u4e2a\u6587\u4ef6\u5939\uff0c\u662f\u6700\u5916\u9762\u90a3\u4e2a\uff0c\u56fe\u6807\u662f\u6570\u636e\u5e93\uff09\uff0c\u53f3\u51fb\u5c5e\u6027\uff0c\u5b89\u5168\u6027\uff0c\u670d\u52a1\u5668\u9a8c\u8bc1\u8eab\u4efd\u6539\u4e3a SQL Server \u548c Windows \u8eab\u4efd\u9a8c\u8bc1\u6a21\u5f0f 233 \uff1a\u6253\u5f00 SQL Server \u914d\u7f6e\u7ba1\u7406\u5668\uff0cSQL Server\u7f51\u7edc\u914d\u7f6e\uff0cMSSQLSERVER\u7684\u534f\u8bae\uff0c\u542f\u7528 TCP / IP\uff0c\u6700\u597d\u518d\u91cd\u542f\u4e00\u4e0b SQL Server\u914d\u7f6e\u7ba1\u7406\u5668\uff08\u672c\u5730\uff09\u4e2d\u7684 SQL Server \u6267\u884c\u6307\u4ee4 \u00b6 # \u6267\u884c cursor . execute ( 'sql\u8bed\u53e5' ) # \u8c03\u7528\u5b58\u50a8\u8fc7\u7a0b cursor . callproc ( 'FindPerson' , ( 'Jane Doe' ,)) # \u5b58\u50a8\u8fc7\u7a0b\u540d \u53c2\u6570 \u83b7\u53d6\u7ed3\u679c \u00b6 cnt = cursor . fetchone ()[ 0 ] # \u83b7\u53d6\u7b2c\u4e00\u884c # \u83b7\u53d6\u591a\u884c row = cursor . fetchone () while row : print ( \"ID= %d , Name= %s \" % ( row [ 0 ], row [ 1 ])) row = cursor . fetchone () cursor . execute ( 'SELECT * FROM persons WHERE salesrep= %s ' , 'John Doe' ) for row in cursor : print ( 'row = %r ' % ( row ,)) cursor . execute ( 'SELECT * FROM persons' ) for row in cursor : print ( \"ID= %d , Name= %s \" % ( row [ 'id' ], row [ 'name' ])) \u6ce8\u610f\u4e8b\u9879\uff1a\u4e00\u6761\u94fe\u63a5\u5728\u4efb\u4f55\u65f6\u5019\u53ea\u4f1a\u6709\u4e00\u4e2aCursor\u5bf9\u8c61\u5904\u4e8e\u67e5\u8be2\u72b6\u6001 SQL \u76f8\u5173 \u00b6 CONVERT() \u00b6 SQL Server CONVERT() \u51fd\u6570 (w3school.com.cn) \u767b\u5f55\u540d\u4e0e\u7528\u6237 \u00b6 SQLServer \u2014\u2014 \u7528\u6237\u6743\u9650\u64cd\u4f5c - \u5f90\u6797\u4fca","title":"Pymssql"},{"location":"Python/Pymssql/#pymssql","text":"pymssql \u2014 pymssql 2.2.2.dev0+gff84c14.d20210416 documentation","title":"Pymssql"},{"location":"Python/Pymssql/#_1","text":"# \u8fde\u63a5 autocommit \u81ea\u52a8\u4fee\u6539\u64cd\u4f5c conn = sql . connect ( serverName , userName , password , autocommit = True ) cursor = conn . cursor () # \u5173\u95ed\u8fde\u63a5 conn . close () \u53ef\u80fd\u9047\u5230\u7684\u9519\u8bef\uff1a 18456 \uff1a\u5148\u7528 windows \u8eab\u4efd\u9a8c\u8bc1\u767b\u5f55\uff0c\u53f3\u51fb\u6570\u636e\u5e93\uff08\u4e0d\u662f\u91cc\u9762\u6570\u636e\u5e93\u90a3\u4e2a\u6587\u4ef6\u5939\uff0c\u662f\u6700\u5916\u9762\u90a3\u4e2a\uff0c\u56fe\u6807\u662f\u6570\u636e\u5e93\uff09\uff0c\u53f3\u51fb\u5c5e\u6027\uff0c\u5b89\u5168\u6027\uff0c\u670d\u52a1\u5668\u9a8c\u8bc1\u8eab\u4efd\u6539\u4e3a SQL Server \u548c Windows \u8eab\u4efd\u9a8c\u8bc1\u6a21\u5f0f 233 \uff1a\u6253\u5f00 SQL Server \u914d\u7f6e\u7ba1\u7406\u5668\uff0cSQL Server\u7f51\u7edc\u914d\u7f6e\uff0cMSSQLSERVER\u7684\u534f\u8bae\uff0c\u542f\u7528 TCP / IP\uff0c\u6700\u597d\u518d\u91cd\u542f\u4e00\u4e0b SQL Server\u914d\u7f6e\u7ba1\u7406\u5668\uff08\u672c\u5730\uff09\u4e2d\u7684 SQL Server","title":"\u8fde\u63a5"},{"location":"Python/Pymssql/#_2","text":"# \u6267\u884c cursor . execute ( 'sql\u8bed\u53e5' ) # \u8c03\u7528\u5b58\u50a8\u8fc7\u7a0b cursor . callproc ( 'FindPerson' , ( 'Jane Doe' ,)) # \u5b58\u50a8\u8fc7\u7a0b\u540d \u53c2\u6570","title":"\u6267\u884c\u6307\u4ee4"},{"location":"Python/Pymssql/#_3","text":"cnt = cursor . fetchone ()[ 0 ] # \u83b7\u53d6\u7b2c\u4e00\u884c # \u83b7\u53d6\u591a\u884c row = cursor . fetchone () while row : print ( \"ID= %d , Name= %s \" % ( row [ 0 ], row [ 1 ])) row = cursor . fetchone () cursor . execute ( 'SELECT * FROM persons WHERE salesrep= %s ' , 'John Doe' ) for row in cursor : print ( 'row = %r ' % ( row ,)) cursor . execute ( 'SELECT * FROM persons' ) for row in cursor : print ( \"ID= %d , Name= %s \" % ( row [ 'id' ], row [ 'name' ])) \u6ce8\u610f\u4e8b\u9879\uff1a\u4e00\u6761\u94fe\u63a5\u5728\u4efb\u4f55\u65f6\u5019\u53ea\u4f1a\u6709\u4e00\u4e2aCursor\u5bf9\u8c61\u5904\u4e8e\u67e5\u8be2\u72b6\u6001","title":"\u83b7\u53d6\u7ed3\u679c"},{"location":"Python/Pymssql/#sql","text":"","title":"SQL \u76f8\u5173"},{"location":"Python/Pymssql/#convert","text":"SQL Server CONVERT() \u51fd\u6570 (w3school.com.cn)","title":"CONVERT()"},{"location":"Python/Pymssql/#_4","text":"SQLServer \u2014\u2014 \u7528\u6237\u6743\u9650\u64cd\u4f5c - \u5f90\u6797\u4fca","title":"\u767b\u5f55\u540d\u4e0e\u7528\u6237"},{"location":"Python/Pyside2/","text":"Pyside2 \u00b6 Designer \u00b6 \u4e3b\u8981\u8bb0\u5f55\u7528 designer \u5236\u4f5c ui \u65f6\u4e00\u4e9b\u5e38\u7528\u7684\u5c5e\u6027 Buttons \u00b6 Push Button \u00b6 button.clicked.connect() \u00b6 \u7ed1\u5b9a\u6309\u94ae\u7684\u64cd\u4f5c button . clicked . connect ( fun ) Input Widgets \u00b6 Plain Text Edit \u00b6 placeholderText \u00b6 \u63d0\u793a\u7528\u6237\u8f93\u5165\u7684\u4fe1\u606f \u52a8\u6001\u52a0\u8f7dUI\u6587\u4ef6 \u00b6 from PySide2.QtUiTools import QUiLoader QUiLoader().load() \u00b6 QUiLoader () . load ( path ) PySide2.QtWidgets \u00b6 QApplication \u00b6 app = QApplication ([]) ... app . exec_ () QMainWindow \u00b6 QMessageBox \u00b6 QMessageBox . about () QPlainTextEdit \u00b6 QPushButton \u00b6","title":"Pyside2"},{"location":"Python/Pyside2/#pyside2","text":"","title":"Pyside2"},{"location":"Python/Pyside2/#designer","text":"\u4e3b\u8981\u8bb0\u5f55\u7528 designer \u5236\u4f5c ui \u65f6\u4e00\u4e9b\u5e38\u7528\u7684\u5c5e\u6027","title":"Designer"},{"location":"Python/Pyside2/#buttons","text":"","title":"Buttons"},{"location":"Python/Pyside2/#push-button","text":"","title":"Push Button"},{"location":"Python/Pyside2/#buttonclickedconnect","text":"\u7ed1\u5b9a\u6309\u94ae\u7684\u64cd\u4f5c button . clicked . connect ( fun )","title":"button.clicked.connect()"},{"location":"Python/Pyside2/#input-widgets","text":"","title":"Input Widgets"},{"location":"Python/Pyside2/#plain-text-edit","text":"","title":"Plain Text Edit"},{"location":"Python/Pyside2/#placeholdertext","text":"\u63d0\u793a\u7528\u6237\u8f93\u5165\u7684\u4fe1\u606f","title":"placeholderText"},{"location":"Python/Pyside2/#ui","text":"from PySide2.QtUiTools import QUiLoader","title":"\u52a8\u6001\u52a0\u8f7dUI\u6587\u4ef6"},{"location":"Python/Pyside2/#quiloaderload","text":"QUiLoader () . load ( path )","title":"QUiLoader().load()"},{"location":"Python/Pyside2/#pyside2qtwidgets","text":"","title":"PySide2.QtWidgets"},{"location":"Python/Pyside2/#qapplication","text":"app = QApplication ([]) ... app . exec_ ()","title":"QApplication"},{"location":"Python/Pyside2/#qmainwindow","text":"","title":"QMainWindow"},{"location":"Python/Pyside2/#qmessagebox","text":"QMessageBox . about ()","title":"QMessageBox"},{"location":"Python/Pyside2/#qplaintextedit","text":"","title":"QPlainTextEdit"},{"location":"Python/Pyside2/#qpushbutton","text":"","title":"QPushButton"},{"location":"Python/Python-znk-Inspiron-7590/","text":"Python \u00b6 3.10.0 Documentation (python.org) jackfrued/Python-100-Days: Python - 100\u5929\u4ece\u65b0\u624b\u5230\u5927\u5e08 (github.com) jackfrued/Python-Core-50-Courses: Python\u8bed\u8a00\u57fa\u784050\u8bfe (github.com) Python3 \u6559\u7a0b | \u83dc\u9e1f\u6559\u7a0b (runoob.com) \u5185\u7f6e\u51fd\u6570\u4e0e\u8bed\u6cd5 \u00b6 range() range ( a ) # [0, a) range ( a , b , c ) # [a, b), \u6b65\u957f\u4e3a c sorted yield type() isinstance() \u4e0e type() \u533a\u522b\uff1a type() \u4e0d\u4f1a\u8ba4\u4e3a\u5b50\u7c7b\u662f\u4e00\u79cd\u7236\u7c7b\u7c7b\u578b\uff0c\u4e0d\u8003\u8651\u7ee7\u627f\u5173\u7cfb\u3002 isinstance() \u4f1a\u8ba4\u4e3a\u5b50\u7c7b\u662f\u4e00\u79cd\u7236\u7c7b\u7c7b\u578b\uff0c\u8003\u8651\u7ee7\u627f\u5173\u7cfb\u3002 isinstance() \u6765\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f\u4e00\u4e2a\u5df2\u77e5\u7684\u7c7b\u578b\uff0c\u53c2\u8003 isinstance() \u83dc\u9e1f\u6559\u7a0b isinstance ( object , classinfo ) classinfo\uff1a\u53ef\u4ee5\u662f\u76f4\u63a5\u6216\u95f4\u63a5\u7c7b\u540d\u3001\u57fa\u672c\u7c7b\u578b\u6216\u8005\u7531\u5b83\u4eec\u7ec4\u6210\u7684\u5143\u7ec4 # eg class A : pass class B ( A ): pass isinstance ( A (), A ) # returns True type ( A ()) == A # returns True isinstance ( B (), A ) # returns True type ( B ()) == A # returns False getattr \u7528\u4e8e\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u5c5e\u6027\u503c getattr ( object , name [, default ]) lambda lambda [ arg1 [, arg2 , ..... argn ]]: expression \u5b9a\u4e49\u533f\u540d\u51fd\u6570 # \u53ef\u5199\u51fd\u6570\u8bf4\u660e sum = lambda arg1 , arg2 : arg1 + arg2 # \u8c03\u7528sum\u51fd\u6570 print \"\u76f8\u52a0\u540e\u7684\u503c\u4e3a : \" , sum ( 10 , 20 ) print \"\u76f8\u52a0\u540e\u7684\u503c\u4e3a : \" , sum ( 20 , 20 ) id() \u8fd4\u56de\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740 ord() \u8fd4\u56de\u5b57\u7b26\u5bf9\u5e94\u7684 Ascii \u7801\u6216\u8005 Unicode chr() chr ( i ) # i in range(256) is \u6bd4\u8f83 2 \u4e2a\u53d8\u91cf\u7684\u5185\u5b58\u5730\u5740\u662f\u5426\u76f8\u540c zip \u8fd4\u56de\u4e00\u4e2a\u6709\u5143\u7ec4\u7ec4\u6210\u7684\u5bf9\u8c61\uff0c\u5728 python3 \u4e2d\u8981\u904d\u5386\u6b21\u5bf9\u8c61\u9700\u8981\u624b\u52a8\u8f6c\u6362\u4e3a list IO \u00b6 print print ( 1 ) print ( 'hello, world' ) print ( 'hello' , 'world' , 1 ) # \u591a\u4e2a\u5b57\u7b26\u4e32\u6216\u6570\u5b57\u4f1a\u7528\u7a7a\u683c\u9694\u5f00 print ( strings , sep = '@' , end = '' ) # sep: \u95f4\u9694\u7b26 end: \u7ed3\u675f\u7b26,\u9ed8\u8ba4\u4e3a'\\n' input name = input ( 'please enter your name: ' ) print ( 'hello,' , name ) f.open && f.close() f = open ( '/Users/michael/test.txt' , 'r' ) print ( f . read ()) f . close () \u64cd\u4f5c\u6a21\u5f0f \u5177\u4f53\u542b\u4e49 'r' \u8bfb\u53d6 \uff08\u9ed8\u8ba4\uff09 'w' \u5199\u5165\uff08\u4f1a\u5148\u622a\u65ad\u4e4b\u524d\u7684\u5185\u5bb9\uff09 'x' \u5199\u5165\uff0c\u5982\u679c\u6587\u4ef6\u5df2\u7ecf\u5b58\u5728\u4f1a\u4ea7\u751f\u5f02\u5e38 'a' \u8ffd\u52a0\uff0c\u5c06\u5185\u5bb9\u5199\u5165\u5230\u5df2\u6709\u6587\u4ef6\u7684\u672b\u5c3e 'b' \u4e8c\u8fdb\u5236\u6a21\u5f0f 't' \u6587\u672c\u6a21\u5f0f\uff08\u9ed8\u8ba4\uff09 '+' \u66f4\u65b0\uff08\u65e2\u53ef\u4ee5\u8bfb\u53c8\u53ef\u4ee5\u5199\uff09 \u6587\u4ef6\u8bfb\u5199\u53ef\u80fd\u4f1a\u51fa\u73b0 IOError \uff0c\u6bd4\u5982\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u8fd9\u6837 f.close() \u5c31\u4e0d\u80fd\u8c03\u7528\uff0c\u4e3a\u4e86\u6c38\u8fdc\u80fd\u6b63\u786e\u5173\u95ed\u6587\u4ef6\uff0c\u4f7f\u7528\u9519\u8bef\u5904\u7406\u6765\u5904\u7406 try : f = open ( '/path/to/file' , 'r' ) print ( f . read ()) finally : if f : f . close () \u6bcf\u6b21\u90fd\u8981\u5199 close() \u8fc7\u4e8e\u7e41\u7410\uff0c with \u53ef\u4ee5\u7b80\u5316\u4ee3\u7801\uff1a with open ( '/path/to/file' , 'r' ) as f : print ( f . read ()) \u8bfb\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5982\u56fe\u7247\uff0c\u89c6\u9891 f = open ( '/Users/michael/test.jpg' , 'rb' ) \u5b57\u7b26\u7f16\u7801 f = open ( '/Users/michael/gbk.txt' , 'r' , encoding = 'gbk' ) \u9519\u8bef\u7f16\u7801\u7684\u5904\u7406 f = open ( '/Users/michael/gbk.txt' , 'r' , encoding = 'gbk' , errors = 'ignore' ) # \u5ffd\u7565\u662f\u6700\u7b80\u5355\u7684\u65b9\u6cd5 f.read() print ( f . read ()) # \u83b7\u53d6\u6240\u6709\u5185\u5bb9 print ( f . read ( size )) # \u6307\u5b9a size \u5b57\u8282\u7684\u5185\u5bb9 print ( f . readline ()) # \u6bcf\u6b21\u8bfb\u53d6\u4e00\u884c print ( f . readlines ()) # \u83b7\u53d6\u6240\u6709\u5185\u5bb9,\u6309\u884c\u8fd4\u56de list eg\uff1a for line in f . readlines (): print ( line . strip ()) # \u628a\u672b\u5c3e\u7684'\\n'\u5220\u6389 f.write() with open ( '/Users/michael/test.txt' , 'w' ) as f : f . write ( 'Hello, world!' ) \u5199\u4e8c\u8fdb\u5236\u6587\u4ef6\uff1a 'wb' 'w' \u6a21\u5f0f\u4f1a\u8986\u76d6\u539f\u6587\u4ef6\u5185\u5bb9\uff0c\u53ef\u4ee5\u7528 'a' \uff08append\uff09 \u6570\u636e\u7ed3\u6784 \u00b6 \u5b57\u7b26\u4e32 \u00b6 \u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7c7b\u578b\uff0c\u4e0d\u53ef\u4ee5\u901a\u8fc7\u7d22\u5f15\u4fee\u6539\u5185\u5bb9 print ( \" \\\" \\' \\\\ \" ) # \u8f6c\u4e49 s = r '\\time up \\now' # R\u6216r \u5f00\u5934\u8868\u793a\u539f\u59cb\u5b57\u7b26\u4e32,\u4e0d\u8fdb\u884c\u8f6c\u4e49 s = ' \\141 ' # 8\u8fdb\u5236,\u8868\u793aa s = ' \\x61 ' # 16\u8fdb\u5236,\u8868\u793aa s = ' \\u9a86\\u660a ' # \\u \u540e\u9762\u52a0 Unicode \u5b57\u7b26\u7f16\u7801 s = s1 + s2 s = s1 * 3 'A' < 'a' # True, 65 < 97 'a' in s s [:::] len ( s ) \u65b9\u6cd5 \u8bf4\u660e str.capitalize() \u8fd4\u56de\u9996\u5b57\u6bcd\u5927\u5199\u540e\u7684\u5b57\u7b26\u4e32 str.title() \u8fd4\u56de\u6bcf\u4e2a\u5355\u8bcd\u5927\u5199\u540e\u7684\u5b57\u7b26\u4e32 str.upper() \u8fd4\u56de str \u6240\u6709\u5b57\u7b26\u5927\u5199\u540e\u7684\u5b57\u7b26\u4e32 str.lower() \u8fd4\u56de str \u6240\u6709\u5b57\u7b26\u5c0f\u5199\u540e\u7684\u5b57\u7b26\u4e32 str.find() \u8fd4\u56de\u6a21\u5f0f\u4e32\u5728\u4e3b\u4e32\u4e2d\u51fa\u73b0\u7684\u7d22\u5f15\uff0c\u5339\u914d\u5931\u8d25\u8fd4\u56de -1 str.index() \u4e0e find \u4e0d\u540c\u7684\u662f\u5339\u914d\u5931\u8d25\u4f1a\u62a5\u9519 str.rfind() \u4ece\u540e\u5f80\u524d\u627e str.rindex() \u4ece\u540e\u5f80\u524d\u627e str.strip() \u83b7\u53d6\u5b50\u4e32 str.split() \u5206\u5272\u5b57\u7b26\u4e32 str.join() \u5408\u5e76\u5b57\u7b26\u4e32 str.endwith() \u68c0\u67e5\u662f\u5426\u4ee5\u6307\u5b9a\u5b57\u7b26\u4e32\u7ed3\u5c3e str.startwith() \u68c0\u67e5\u662f\u5426\u4ee5\u6307\u5b9a\u5b57\u7b26\u4e32\u5f00\u5934 str.isdigit() \u662f\u5426\u7531\u6570\u5b57\u6784\u6210 str.isalpha() \u662f\u5426\u7531\u5b57\u6bcd\u6784\u6210 str.isalnum \u662f\u5426\u6570\u5b57\u548c\u5b57\u6bcd\u6784\u6210 str.center() \u5c45\u4e2d str.rjust() \u53f3\u5bf9\u9f50 str.ljust() \u5de6\u5bf9\u9f50 str.replace() \u5b57\u7b26\u66ff\u6362 str.encode() \u7f16\u7801 str.decode \u89e3\u7801 str.find() \u8fd4\u56de\u6a21\u5f0f\u4e32\u5728\u4e3b\u4e32\u4e2d\u51fa\u73b0\u7684\u7d22\u5f15\uff0c\u5339\u914d\u5931\u8d25\u8fd4\u56de -1 s . find ( string , beg = 0 , end = len ( string )) # beg end \u6307\u5b9a\u4e3b\u4e32\u4e2d\u5339\u914d\u7684\u7d22\u5f15\u8303\u56f4 str.index() \u4e0e find \u4e0d\u540c\u7684\u662f\u5339\u914d\u5931\u8d25\u4f1a\u62a5\u9519 s . index ( string , beg = 0 , end = len ( string )) # beg end \u6307\u5b9a\u4e3b\u4e32\u4e2d\u5339\u914d\u7684\u7d22\u5f15\u8303\u56f4 str.strip() str . strip ([ chars ]) Return a copy of the string with the leading and trailing characters removed. >>> ' spacious ' . strip () 'spacious' >>> 'www.example.com' . strip ( 'cmowz.' ) 'example' str.split() str . split ( sep = None ) \u6309\u7167 sep \u5206\u5272\u5b57\u7b26\u4e32 Return a list of the words in the string, using sep as the delimiter string. str.startswith() str . startswith ( str , beg = 0 , end = len ( string )) \u5982\u679c\u68c0\u6d4b\u5230\u5b57\u7b26\u4e32\u5219\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse str.center() \u5c45\u4e2d\u5bf9\u9f50\uff0crjust \u548c ljust \u7528\u6cd5\u7c7b\u4f3c s . center ( i , c ) # i \u6307\u5b9a\u5bbd\u5ea6\uff0cc \u6307\u5b9a\u586b\u5145\u5b57\u7b26 s = 'hello, world' print ( s . center ( 20 , '*' )) # ****hello, world**** str.replace() \u66ff\u6362\u5b57\u7b26 s . replace ( c1 , c2 , i ) # \u628a c1 \u66ff\u6362\u6210 c2, i \u662f\u66ff\u6362\u6b21\u6570, \u9ed8\u8ba4\u5168\u90e8\u66ff\u6362 list \u00b6 \u5217\u8868\u5bb9\u5668 classmates = [ 'Michael' , 'Bob' , 'Tracy' ] s = list ( \"hello\" ) # \u8fd0\u7b97 list1 + list2 [ 0 ] * 3 # [0, 0, 0] list1 == list2 list1 <= list2 'a' in list1 # \u5d4c\u5957\u5217\u8868\u7684\u521b\u5efa [[ 0 ] * 3 ] * 5 # \u8fd9\u79cd\u505a\u6cd5\u662f\u6709\u95ee\u9898\u7684 scores = [[ 0 ] * 3 for _ in range ( 5 )] # \u6b63\u786e\u505a\u6cd5 \u7d22\u5f15 classmates [ 0 ] # \u7b2c\u4e00\u4e2a\u5143\u7d20 classmates [ - 1 ] # \u5012\u6570\u7b2c\u4e00\u4e2a\u5143\u7d20 list1 [:::] # \u5207\u7247 \u65b9\u6cd5 \u8bf4\u660e list.append() \u5c3e\u52a0 list.extend() \u5c3e\u52a0\uff0c\u53c2\u6570\u662flist list.insert() \u63d2\u5165 list.remove() \u5220\u9664 list.pop() \u5c3e\u5220 list.clear() \u6e05\u7a7a list.index() \u8fd4\u56de\u7d22\u5f15 list.count() \u8ba1\u6570 list.sort() \u6392\u5e8f list.reverse() \u9006\u5e8f list.append() classmates . append ( 'Adam' ) # \u5c3e\u52a0 list.insert() classmates . insert ( 1 , 'Jack' ) # \u6307\u5b9a\u4f4d\u7f6e\u52a0 list.remove() list1 . remove ( 'jack' ) # \u5220\u9664\u6307\u5b9a\u5143\u7d20 list.pop() classmates . pop () # \u5c3e\u5220 classmates . pop ( 1 ) # \u6307\u5b9a\u4f4d\u7f6e\u5220,\u8fd4\u56de pop \u7684\u5143\u7d20 del list1 [ 1 ] list.clear() list1 . clear () # \u6e05\u7a7a\u5143\u7d20 list.index() list1 . index ( elem , i ) # \u8fd4\u56de\u7b2c i \u4e2a elem \u7684\u7d22\u5f15 items = [ 'Python' , 'Java' , 'Java' , 'Go' , 'Kotlin' , 'Python' ] print ( items . index ( 'Python' )) # 0 print ( items . index ( 'Python' , 2 )) # 5 list.count() list1 . count ( elem ) # \u8ba1\u7b97 elem \u5728 list \u4e2d\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u6ca1\u6709\u5c31\u662f 0 list.sort() list1 . sort ( key , reverse = False ) \u6392\u5e8f list.reverse() \u9006\u5e8f \u5217\u8868\u63a8\u5bfc\u5f0f \u5373\u5feb\u901f\u751f\u6210\u4e00\u4e2a list \u7684\u65b9\u6cd5\uff0c >>> [ x * x for x in range ( 1 , 11 ) if x % 2 == 0 ] [ 4 , 16 , 36 , 64 , 100 ] >>> [ m + n for m in 'ABC' for n in 'XYZ' ] [ 'AX' , 'AY' , 'AZ' , 'BX' , 'BY' , 'BZ' , 'CX' , 'CY' , 'CZ' ] \u5b57\u5178\u4e0e\u5217\u8868\u751f\u6210\u5f0f >>> d = { 'x' : 'A' , 'y' : 'B' , 'z' : 'C' } >>> [ k + '=' + v for k , v in d . items ()] # for \u4e2d\u53ef\u4ee5\u540c\u65f6\u83b7\u53d6 key \u4e0e val [ 'y=B' , 'x=A' , 'z=C' ] tuple \u00b6 \u5143\u7ec4\u5bb9\u5668\uff0c\u521d\u59cb\u5316\u540e\u65e0\u6cd5\u6539\u53d8\uff0c\u53ea\u80fd\u83b7\u53d6\u5143\u7d20 t = ( 1 , 2 ) t = ( 1 ) # \u8868\u793a\u4e00\u4e2a\u6570\u5b57,\u907f\u514d\u4e0e\u6570\u5b66\u516c\u5f0f\u4ea7\u751f\u6b67\u4e49 t = ( 1 ,) # \u8868\u793a\u4e00\u4e2a\u5143\u7d20\u7684\u5143\u7ec4 # \u4e00\u4e9b\u57fa\u672c\u7684\u8fd0\u7b97\u548c list \u7c7b\u4f3c \"\u53ef\u53d8\u7684\" tuple >>> t = ( 'a' , 'b' , [ 'A' , 'B' ]) >>> t [ 2 ][ 0 ] = 'X' >>> t [ 2 ][ 1 ] = 'Y' >>> t ( 'a' , 'b' , [ 'X' , 'Y' ]) t \u4e2d\u6240\u6307\u7684\u5185\u5b58\u5730\u5740\u8fd8\u662f\u4e0d\u53d8\uff0c\u53d8\u7684\u662f list \u4e2d\u7684\u5185\u5bb9 \u5e94\u7528 # \u6253\u5305 a = 1 , 10 , 100 i , j , k = a i , * k = a # \u548c\u51fd\u6570\u53c2\u6570\u4e2d\u7684\u89e3\u5305\u8bed\u6cd5\u7c7b\u4f3c # \u4ea4\u6362\u53d8\u91cf a , b = b , a # \u5143\u7ec4\u5217\u8868\u7684\u76f8\u4e92\u8f6c\u6362 tuple1 = tuple ( list1 ) dict \u00b6 \u5b57\u5178\uff0c\u952e-\u503c\uff08key-value\uff09\u5bf9\u5e94\u7684\u6570\u636e\u7ed3\u6784 d = { 'Michael' : 95 , 'Bob' : 75 , 'Tracy' : 85 } person = dict ( name = '\u738b\u5927\u9524' , age = 55 , weight = 60 , home = '\u4e2d\u540c\u4ec1\u8def8\u53f7' ) print ( person ) # {'name': '\u738b\u5927\u9524', 'age': 55, 'weight': 60, 'home': '\u4e2d\u540c\u4ec1\u8def8\u53f7'} items1 = dict ( zip ( 'ABCDE' , '12345' )) print ( items1 ) # {'A': '1', 'B': '2', 'C': '3', 'D': '4', 'E': '5'} # \u7528\u5b57\u5178\u751f\u6210\u5f0f\u8bed\u6cd5\u521b\u5efa\u5b57\u5178 items3 = { x : x ** 3 for x in range ( 1 , 6 )} print ( items3 ) # {1: 1, 2: 8, 3: 27, 4: 64, 5: 125} for key in person : # for \u53ea\u4f1a\u83b7\u53d6 key ... \u65b9\u6cd5 \u8bf4\u660e dict.get(key, val) \u8fd4\u56de\u952e\u5bf9\u5e94\u7684\u503c\uff0c\u6ca1\u6709\u8fd4\u56de val\uff0c\u4e0d\u8bbe\u5b9a\u53c2\u6570\u8fd4\u56de None dict.keys() \u8fd4\u56de\u5b57\u5178\u6240\u6709\u7684\u952e dict.values() \u8fd4\u56de\u5b57\u5178\u6240\u6709\u7684\u503c dict.items() \u8fd4\u56de\u5b57\u5178\u6240\u6709\u7684\u952e\u503c\u5bf9\uff0clist dict.pop(key) \u5220\u9664\u952e\u5bf9\u5e94\u7684\u503c\u5e76\u8fd4\u56de\u503c dict.popitem() \u5220\u9664\u6700\u540e\u4e00\u4e2a\u952e\u503c\u5bf9 dict.setdefault() dict.update() \u66f4\u65b0 dict.get() # \u5b57\u5178\u4e2d\u7684\u503c\u53c8\u662f\u4e00\u4e2a\u5b57\u5178(\u5d4c\u5957\u7684\u5b57\u5178) students = { 1001 : { 'name' : '\u72c4\u4ec1\u6770' , 'sex' : True , 'age' : 22 , 'place' : '\u5c71\u897f\u5927\u540c' }, 1002 : { 'name' : '\u767d\u5143\u82b3' , 'sex' : True , 'age' : 23 , 'place' : '\u6cb3\u5317\u4fdd\u5b9a' }, 1003 : { 'name' : '\u6b66\u5219\u5929' , 'sex' : False , 'age' : 20 , 'place' : '\u56db\u5ddd\u5e7f\u5143' } } # \u4f7f\u7528get\u65b9\u6cd5\u901a\u8fc7\u952e\u83b7\u53d6\u5bf9\u5e94\u7684\u503c\uff0c\u5982\u679c\u53d6\u4e0d\u5230\u4e0d\u4f1a\u5f15\u53d1KeyError\u5f02\u5e38\u800c\u662f\u8fd4\u56deNone\u6216\u8bbe\u5b9a\u7684\u9ed8\u8ba4\u503c print ( students . get ( 1002 )) # {'name': '\u767d\u5143\u82b3', 'sex': True, 'age': 23, 'place': '\u6cb3\u5317\u4fdd\u5b9a'} print ( students . get ( 1005 )) # None print ( students . get ( 1005 , { 'name' : '\u65e0\u540d\u6c0f' })) # {'name': '\u65e0\u540d\u6c0f'}, \u7b2c\u4e8c\u4e2a\u53c2\u6570\u8868\u793a\u9ed8\u8ba4\u7684\u8fd4\u56de\u503c set \u00b6 \u96c6\u5408 # {} \u8868\u793a\u7a7a\u5b57\u5178, {1} \u624d\u8868\u793a\u96c6\u5408 set1 = { 1 , 2 , 3 , 3 , 3 , 2 } print ( set1 ) # {1, 2, 3} print ( len ( set1 )) # 3 set2 = set ( 'hello' ) print ( set2 ) # {'h', 'l', 'o', 'e'} set4 = { num for num in range ( 1 , 20 ) if num % 3 == 0 or num % 5 == 0 } # \u96c6\u5408\u63a8\u5bfc\u5f0f print ( set4 ) # {3, 5, 6, 9, 10, 12, 15, 18} \u65b9\u6cd5 \u8bf4\u660e & set.intersection() \u4ea4\u96c6 | set.union() \u5e76\u96c6 - set.difference() \u5dee\u96c6 ^ set.symmetric_difference() \u5bf9\u79f0\u5dee == \u5143\u7d20\u662f\u5426\u76f8\u540c < set.issubset() \u662f\u5426\u662f\u771f\u5b50\u96c6 > set.issuperset() \u662f\u5426\u662f\u8d85\u96c6 set.add() \u6dfb\u52a0\u5143\u7d20 set.update(set) \u66f4\u65b0\u96c6\u5408 set.discard() \u5220\u9664\u5143\u7d20\uff0c\u6ca1\u6709\u4e0d\u4f1a\u62a5\u9519 set.remove() \u5220\u9664\u5143\u7d20\uff0c\u6ca1\u6709\u4f1a\u62a5\u9519 set.clear() \u6e05\u7a7a\u96c6\u5408 PIL \u00b6 \u8bfb\u5165\u7684\u662f \\(H\\times W\\times C\\) \uff0c\u4e14\u662f RGB Argparse \u00b6 argparse\u57fa\u672c\u7528\u6cd5_\u9a91\u7740\u8717\u725b\u5411\u524d\u8dd1\u7684\u535a\u5ba2 OS \u00b6 \u65b9\u6cd5 \u8bf4\u660e os.listdir(path) \u8fd4\u56de\u6307\u5b9a\u7684\u6587\u4ef6\u5939\u5305\u542b\u7684\u6587\u4ef6\u6216\u6587\u4ef6\u5939\u7684\u540d\u5b57\u7684\u5217\u8868 s.platform() os.getcwd() \u8fd4\u56de\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55 os.makedirs() os.isdir() os.cpu_count() \u8fd4\u56de CPU \u6570\u91cf os.path __file__ \u8868\u793a\u5f53\u524d\u6587\u4ef6\u540d \u65b9\u6cd5 \u8bf4\u660e os.path.join(path1[, path2[, ...]]) \u628a\u76ee\u5f55\u548c\u6587\u4ef6\u540d\u5408\u6210\u4e00\u4e2a\u8def\u5f84 os.path.abspath(path) \u8fd4\u56de\u7edd\u5bf9\u8def\u5f84 os.path.dirname(path) \u8fd4\u56de\u6587\u4ef6\u8def\u5f84 pathlib \u00b6 \u4f60\u5e94\u8be5\u4f7f\u7528pathlib\u66ff\u4ee3os.path - \u77e5\u4e4e (zhihu.com) \u6807\u51c6\u5e93\u4e2d\u7684\u6a21\u5757 from pathlib import Path pathlib \u4e0e os.path \u5bf9\u5e94\u65b9\u6cd5 os.path pathlib os.path.join(path1[, path2[, ...]]) Path(path1).joinpath([, path2[, ...]]) \u6216\u8005 Path(path1) / path2 / ... path.open(mode=\u2018r\u2019, bufferiong=-1, encoding=None, errors=None, newline=None) path.absolute() path.mkdir() path.exits() path.suffix Random \u00b6 random.randint() random.sample() random.randrange() Time \u00b6 time.sleep() Re \u00b6 regular expression\uff0c\u652f\u6301\u6b63\u5219\u8868\u8fbe\u5f0f\u76f8\u5173\u64cd\u4f5c \u300a\u6b63\u5219\u8868\u8fbe\u5f0f30\u5206\u949f\u5165\u95e8\u6559\u7a0b\u300b \u51fd\u6570 \u8bf4\u660e re.compile(pattern, flags=0) \u7f16\u8bd1\u6b63\u5219\u8868\u8fbe\u5f0f\u8fd4\u56de\u6b63\u5219\u8868\u8fbe\u5f0f\u5bf9\u8c61 re.match(pattern, string, flags=0) \u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u5b57\u7b26\u4e32 \u6210\u529f\u8fd4\u56de\u5339\u914d\u5bf9\u8c61 \u5426\u5219\u8fd4\u56deNone re.search(pattern, string, flags=0) \u641c\u7d22\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u6a21\u5f0f \u6210\u529f\u8fd4\u56de\u5339\u914d\u5bf9\u8c61 \u5426\u5219\u8fd4\u56deNone re.split(pattern, string, maxsplit=0, flags=0) \u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6307\u5b9a\u7684\u6a21\u5f0f\u5206\u9694\u7b26\u62c6\u5206\u5b57\u7b26\u4e32 \u8fd4\u56de\u5217\u8868 re.sub(pattern, repl, string, count=0, flags=0) \u7528\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u539f\u5b57\u7b26\u4e32\u4e2d\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u6a21\u5f0f \u53ef\u4ee5\u7528count\u6307\u5b9a\u66ff\u6362\u7684\u6b21\u6570 re.fullmatch(pattern, string, flags=0) match\u51fd\u6570\u7684\u5b8c\u5168\u5339\u914d\uff08\u4ece\u5b57\u7b26\u4e32\u5f00\u5934\u5230\u7ed3\u5c3e\uff09\u7248\u672c re.findall(pattern, string, flags=0) \u67e5\u627e\u5b57\u7b26\u4e32\u6240\u6709\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u6a21\u5f0f \u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u5217\u8868 re.finditer(pattern, string, flags=0) \u67e5\u627e\u5b57\u7b26\u4e32\u6240\u6709\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u6a21\u5f0f \u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668 re.purge() \u6e05\u9664\u9690\u5f0f\u7f16\u8bd1\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u7f13\u5b58 re.I / re.IGNORECASE \u5ffd\u7565\u5927\u5c0f\u5199\u5339\u914d\u6807\u8bb0 re.M / re.MULTILINE \u591a\u884c\u5339\u914d\u6807\u8bb0 \u5e94\u7528\uff1a \"\"\" \u9a8c\u8bc1\u8f93\u5165\u7528\u6237\u540d\u548cQQ\u53f7\u662f\u5426\u6709\u6548\u5e76\u7ed9\u51fa\u5bf9\u5e94\u7684\u63d0\u793a\u4fe1\u606f \u8981\u6c42\uff1a\u7528\u6237\u540d\u5fc5\u987b\u7531\u5b57\u6bcd\u3001\u6570\u5b57\u6216\u4e0b\u5212\u7ebf\u6784\u6210\u4e14\u957f\u5ea6\u57286~20\u4e2a\u5b57\u7b26\u4e4b\u95f4\uff0cQQ\u53f7\u662f5~12\u7684\u6570\u5b57\u4e14\u9996\u4f4d\u4e0d\u80fd\u4e3a0 \"\"\" import re def main (): username = input ( '\u8bf7\u8f93\u5165\u7528\u6237\u540d: ' ) qq = input ( '\u8bf7\u8f93\u5165QQ\u53f7: ' ) # match\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\u6216\u6b63\u5219\u8868\u8fbe\u5f0f\u5bf9\u8c61 # \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8981\u8ddf\u6b63\u5219\u8868\u8fbe\u5f0f\u505a\u5339\u914d\u7684\u5b57\u7b26\u4e32\u5bf9\u8c61 m1 = re . match ( r '^[0-9a-zA-Z_]{6,20}$' , username ) if not m1 : print ( '\u8bf7\u8f93\u5165\u6709\u6548\u7684\u7528\u6237\u540d.' ) m2 = re . match ( r '^[1-9]\\d{4,11}$' , qq ) if not m2 : print ( '\u8bf7\u8f93\u5165\u6709\u6548\u7684QQ\u53f7.' ) if m1 and m2 : print ( '\u4f60\u8f93\u5165\u7684\u4fe1\u606f\u662f\u6709\u6548\u7684!' ) if __name__ == '__main__' : main () Json \u00b6 JSON\uff1aJavaScript Object Notation\uff0cJavaScript \u8bed\u8a00\u4e2d\u521b\u5efa\u5bf9\u8c61\u7684\u4e00\u79cd\u5b57\u9762\u91cf\u8bed\u6cd5\uff0c\u53ef\u4ee5\u5bf9\u5e94\u4e8e Python \u4e2d\u7684\u5b57\u5178 json.dump() \u5c06Python\u5bf9\u8c61\u6309\u7167JSON\u683c\u5f0f\u5e8f\u5217\u5316\u5230\u6587\u4ef6\u4e2d json . dump ( obj , fp , * , skipkeys = False , ensure_ascii = True , check_circular = True , allow_nan = True , cls = None , indent = None , separators = None , default = None , sort_keys = False , ** kw ) json.dumps() \u5c06Python\u5bf9\u8c61\u5904\u7406\u6210JSON\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c\u4e0d\u9700\u8981\u4f20\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5176\u4ed6\u7684\u53c2\u6570\u548c dump \u51fd\u6570\u7684\u4e00\u6837 json . dumps ( obj , * , skipkeys = False , ensure_ascii = True , check_circular = True , allow_nan = True , cls = None , indent = None , separators = None , default = None , sort_keys = False , ** kw ) json.load() \u5c06\u6587\u4ef6\u4e2d\u7684JSON\u6570\u636e\u53cd\u5e8f\u5217\u5316\u6210\u5bf9\u8c61 json . load ( fp , * , cls = None , object_hook = None , parse_float = None , parse_int = None , parse_constant = None , object_pairs_hook = None , ** kw ) json.loads() \u5c06\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u53cd\u5e8f\u5217\u5316\u6210Python\u5bf9\u8c61\uff0c loads \u4e5f\u4e0d\u9700\u8981\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5176\u4ed6\u53c2\u6570\u7684\u542b\u4e49\u548c load \u51fd\u6570\u7684\u4e00\u81f4 json . loads ( s , * , encoding = None , cls = None , object_hook = None , parse_float = None , parse_int = None , parse_constant = None , object_pairs_hook = None , ** kw ) \u5e94\u7528\uff1a \u8fd9\u4e2a\u4f8b\u5b50\u4f7f\u7528\u4e86 \u5929\u884c\u6570\u636e \u63d0\u4f9b\u7684\u56fd\u5185\u65b0\u95fb\u6570\u636e\u63a5\u53e3\uff0c\u5176\u4e2d\u7684APIKey\u9700\u8981\u81ea\u5df1\u5230\u8be5\u7f51\u7ad9\u7533\u8bf7 import requests import json def main (): resp = requests . get ( 'http://api.tianapi.com/guonei/?key=APIKey&num=10' ) data_model = json . loads ( resp . text ) for news in data_model [ 'newslist' ]: print ( news [ 'title' ]) if __name__ == '__main__' : main () sys \u00b6 sys.path list\u7c7b\u578b\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b python \u5bfc\u5165\u6587\u4ef6\u6216\u8005\u6a21\u5757\u4f1a\u5148\u5728 sys.path \u91cc\u627e\u6a21\u5757\u7684\u8def\u5f84 sys . path . append ( parent_path ) # \u6dfb\u52a0\u8def\u5f84\uff0c\u9000\u51fa\u540e\u4f1a\u81ea\u52a8\u6d88\u5931 collections \u00b6 \u63d0\u4f9bPython\u6807\u51c6\u5185\u5efa\u5bb9\u5668 dict \uff0c listist \uff0c list \uff0c set , \u548c tuple \u7684\u66ff\u4ee3\u9009\u62e9 \u5bb9\u5668\u540d \u6982\u8ff0 deque ChainMap Counter OrderedDict \u6709\u5e8f\u5b57\u5178\uff0cpython\u65e9\u671f\u7248\u672c\u7684 dict \u4e2d\u7684\u5143\u7d20\u662f\u65e0\u5e8f\u7684 defaultdict UserDict UserList UserString defaultdict \u7528\u6765\u907f\u514d\u666e\u901a\u5b57\u5178\u7684 keyerror\uff0c\u5982\u679c\u8bbf\u95ee\u65f6 key \u4e0d\u5b58\u5728\u4f1a\u81ea\u52a8\u8c03\u7528\u53c2\u6570\u4e2d\u7684\u51fd\u6570\uff0cfun \u4e0d\u80fd\u6709\u53c2\u6570 from collections import defaultdict data = defaultdict ( fun ) # eg data = defaultdict ( set ) csv \u00b6 python3\uff1acsv\u7684\u8bfb\u5199_katyusha1\u7684\u535a\u5ba2-CSDN\u535a\u5ba2 csv\u7684\u5199 import csv headers = [ 'class' , 'name' , 'sex' , 'height' , 'year' ] rows = [ [ 1 , 'xiaoming' , 'male' , 168 , 23 ], [ 1 , 'xiaohong' , 'female' , 162 , 22 ], [ 2 , 'xiaozhang' , 'female' , 163 , 21 ], [ 2 , 'xiaoli' , 'male' , 158 , 21 ] ] with open ( 'test.csv' , 'w' ) as f : f_csv = csv . writer ( f ) f_csv . writerow ( headers ) f_csv . writerows ( rows ) \u5199\u5165\u5b57\u5178\u6570\u636e import csv headers = [ 'class' , 'name' , 'sex' , 'height' , 'year' ] rows = [ { 'class' : 1 , 'name' : 'xiaoming' , 'sex' : 'male' , 'height' : 168 , 'year' : 23 }, { 'class' : 1 , 'name' : 'xiaohong' , 'sex' : 'female' , 'height' : 162 , 'year' : 22 }, { 'class' : 2 , 'name' : 'xiaozhang' , 'sex' : 'female' , 'height' : 163 , 'year' : 21 }, { 'class' : 2 , 'name' : 'xiaoli' , 'sex' : 'male' , 'height' : 158 , 'year' : 21 }, ] with open ( 'test2.csv' , 'w' , newline = '' ) as f : f_csv = csv . DictWriter ( f , headers ) f_csv . writeheader () f_csv . writerows ( rows ) csv\u7684\u8bfb import csv with open ( 'test.csv' ) as f : f_csv = csv . reader ( f ) for row in f_csv : print ( row ) gc \u00b6 garbage collection import gc del var1 , var2 gc . collection () tqdm \u00b6 \u597d\u770b\u7684\u8fdb\u5ea6\u6761\u5de5\u5177\uff0c tqdm documentation \u8be6\u7ec6\u4ecb\u7ecdPython\u8fdb\u5ea6\u6761tqdm\u7684\u4f7f\u7528_python_\u811a\u672c\u4e4b\u5bb6 (jb51.net) \u975e\u624b\u52a8\u8bbe\u7f6e\u8fdb\u5ea6\uff1a from tqdm import tqdm import time pbar = tqdm ( range ( 100 )) for i in pbar : time . sleep ( 0.1 ) pbar . desc = str \u624b\u52a8\u8bbe\u7f6e\u8fdb\u5ea6\uff1a from tqdm import tqdm pbar = tqdm ( total , ncols , desc , unit ) args: total ( int or float )\uff1a\u81ea\u5b9a\u4e49\u8fed\u4ee3\u6b21\u6570 ncols ( int )\uff1a\u8f93\u51fa\u4fe1\u606f\u7684\u5bbd\u5ea6\uff0c If 0 , will not print any bar (only stats) unit ( str )\uff1aThe iteration unit [default: 'it'] \uff1f\uff1f\uff1f\uff1f\uff1f desc ( str )\uff1aPrefix for the progressbar \u65b9\u6cd5\uff1a pbar . set_description ( str ) pbar . update ( n = 1 ) # \u66f4\u65b0\u5df2\u8fed\u4ee3\u6b21\u6570 pbar . close () # \u7528\u5b8c\u540e\u5173\u95ed\u5360\u7528\u8d44\u6e90 pabr . set_postfix ( ** kwargs ) # \u8bbe\u7f6e\u53f3\u4fa7\u4fe1\u606f \u9519\u8bef\u5904\u7406 \u00b6 try-except-else-finally try : runoob () except AssertionError as error : print ( error ) except ( RuntimeError , TypeError , NameError ): # \u53ef\u4ee5\u5904\u7406\u591a\u4e2a\u9519\u8bef\uff0c\u7528\u5143\u7ec4 pass else : # try \u4e2d\u6ca1\u6709\u9519\u8bef\u518d\u6267\u884c\u7684\u7a0b\u5e8f try : with open ( 'file.log' ) as file : read_data = file . read () except FileNotFoundError as fnf_error : print ( fnf_error ) finally : # \u6700\u540e\u603b\u4f1a\u6267\u884c\u7684\u7a0b\u5e8f print ( '\u8fd9\u53e5\u8bdd\uff0c\u65e0\u8bba\u5f02\u5e38\u662f\u5426\u53d1\u751f\u90fd\u4f1a\u6267\u884c\u3002' ) raise x = 10 if x > 5 : raise Exception ( 'x \u4e0d\u80fd\u5927\u4e8e 5\u3002x \u7684\u503c\u4e3a: {} ' . format ( x )) # \u76f4\u63a5\u89e6\u53d1\u5f02\u5e38 else : raise # \u53ef\u4ee5\u76f4\u63a5\u629b\u51fa \u81ea\u5b9a\u4e49\u5f02\u5e38 class MyError ( Exception ): def __init__ ( self , value ): self . value = value def __str__ ( self ): return repr ( self . value ) assert \u7528\u4e8e\u5224\u65ad\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5728\u8868\u8fbe\u5f0f\u6761\u4ef6\u4e3a false \u7684\u65f6\u5019\u89e6\u53d1\u5f02\u5e38 assert expression [, arguments ] >>> assert False # \u6761\u4ef6\u4e3a false \u89e6\u53d1\u5f02\u5e38 Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > AssertionError >>> assert 1 == 2 , '1 \u4e0d\u7b49\u4e8e 2' Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > AssertionError : 1 \u4e0d\u7b49\u4e8e 2 \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b \u00b6 class Student ( object ): def __init__ ( self , name , score ): self . name = name self . __score = score def __print_score ( self ): print ( ' %s : %s ' % ( self . name , self . score )) obiect \uff1a\u7236\u7c7b\uff0c\u6ca1\u6709\u5c31\u5199 object self \uff1a\u5728\u7c7b\u4e2d\u5b9a\u4e49\u7684\u5b9e\u4f8b\uff08\u5bf9\u8c61\uff09\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u90fd\u5fc5\u987b\u662f self \uff0c\u8868\u793a\u7c7b\u81ea\u5df1 __score \uff1a\u6709 __ \u7684\u5c31\u662f private \u7684\uff0c\u6ca1\u6709\u5c31\u662f public \u7684\uff0c\u51fd\u6570\u540d\u4e5f\u4e00\u6837 @property\u88c5\u9970\u5668 (11\u6761\u6d88\u606f) \u5728\u81ea\u5b9a\u4e49\u7c7b\u7684\u65f6\u5019\uff0c@property\u88c5\u9970\u5668\u7684\u4f5c\u7528\uff1f_\u65e0\u654c..\u7684\u535a\u5ba2-CSDN\u535a\u5ba2 slots\u9b54\u6cd5 \u5bf9\u7c7b\u7684\u5c5e\u6027\u8fdb\u884c\u7ed1\u5b9a\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f__slots__\u7684\u9650\u5b9a\u53ea\u5bf9\u5f53\u524d\u7c7b\u7684\u5bf9\u8c61\u751f\u6548\uff0c\u5bf9\u5b50\u7c7b\u5e76\u4e0d\u8d77\u4efb\u4f55\u4f5c\u7528 class Person ( object ): # \u9650\u5b9aPerson\u5bf9\u8c61\u53ea\u80fd\u7ed1\u5b9a_name, _age\u548c_gender\u5c5e\u6027 __slots__ = ( '_name' , '_age' , '_gender' ) \u9759\u6001\u65b9\u6cd5\uff0c@staticmethod \u5c5e\u4e8e\u7c7b\u800c\u4e0d\u662f\u5c5e\u4e8e\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u7c7b\u540d\u8c03\u7528\uff0c\u6bd4\u5982\u5728\u521b\u5efa\u5bf9\u8c61\u524d\u5224\u65ad\u4e09\u6761\u8fb9\u80fd\u4e0d\u80fd\u7ec4\u6210\u4e09\u89d2\u5f62\uff08\u5982\u679c\u4e0d\u662f\u9759\u6001\u65b9\u6cd5\uff0c\u4e0d\u521b\u5efa\u5bf9\u8c61\u5c31\u65e0\u6cd5\u8c03\u7528\uff09 class Triangle ( object ): def __init__ ( self , a , b , c ): self . _a = a self . _b = b self . _c = c @staticmethod def is_valid ( a , b , c ): return a + b > c and b + c > a and a + c > b \u7c7b\u65b9\u6cd5\uff0c @classmethod \u548c\u9759\u6001\u65b9\u6cd5\u7c7b\u4f3c\uff0c\u662f\u5c5e\u4e8e\u7c7b\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u7c7b\u540d\u8c03\u7528\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u8981\u662f cls \uff08cls \u662f\u7ea6\u5b9a\u4fd7\u79f0\u7684\u4e60\u60ef\u800c\u5df2\uff09 class Clock ( object ): \"\"\"\u6570\u5b57\u65f6\u949f\"\"\" def __init__ ( self , hour = 0 , minute = 0 , second = 0 ): self . _hour = hour self . _minute = minute self . _second = second @classmethod def now ( cls ): ctime = localtime ( time ()) return cls ( ctime . tm_hour , ctime . tm_min , ctime . tm_sec ) # \u8fd4\u56de Clock\u7c7b \u7684\u4e00\u4e2a\u5bf9\u8c61 \u7ee7\u627f Python3.x \u548c Python2.x \u7684\u4e00\u4e2a\u533a\u522b\u662f: Python 3 \u53ef\u4ee5\u4f7f\u7528\u76f4\u63a5\u4f7f\u7528 super().xxx \u4ee3\u66ff super(Class, self).xxx\uff0c\u89c1 Python super() \u51fd\u6570 | \u83dc\u9e1f\u6559\u7a0b) class Student ( Person ): # Person \u662f\u7236\u7c7b \"\"\"\u5b66\u751f\"\"\" def __init__ ( self , name , age , grade ): super () . __init__ ( name , age ) # \u8c03\u7528\u7236\u7c7b\u7684\u521d\u59cb\u5316\u51fd\u6570 self . _grade = grade \u62bd\u8c61\u7c7b \u65e0\u6cd5\u5b9e\u4f8b\u5316\u7684\u7c7b from abc import ABCMeta , abstractmethod class Pet ( object , metaclass = ABCMeta ): \"\"\"\u5ba0\u7269\"\"\" def __init__ ( self , nickname ): self . _nickname = nickname @abstractmethod def make_voice ( self ): \"\"\"\u53d1\u51fa\u58f0\u97f3\"\"\" pass pdb \u00b6 \u8c03\u8bd5\u5de5\u5177\uff0c\u5728\u4f7f\u7528\u547d\u4ee4\u884c\u8c03\u8bd5\u65f6\u9700\u8981\u7528\u5230 pdb . set_trace () # \u624b\u52a8\u52a0\u65ad\u70b9 \u5176\u4ed6 \u00b6 global && nolocal \u00b6 \u51fd\u6570\u53c2\u6570\u7684\u4f20\u9012\u65b9\u5f0f \u00b6 python \u51fd\u6570\u4f20\u9012\u53c2\u6570\u7684\u591a\u79cd\u65b9\u6cd5 - \u5fcd\u51ac\u7684\u4f60 - \u535a\u5ba2\u56ed (cnblogs.com) \u5173\u4e8ePython\u4e2d\u5305\u88f9\u4f20\u53c2\u548c\u89e3\u5305\u88f9\u7684\u7406\u89e3 - HeZhengfa - \u535a\u5ba2\u56ed (cnblogs.com) \u5305\u88f9\u548c\u89e3\u5305\u88f9 # --------\u5305\u88f9\u4f20\u53c2--------- # \u5305\u88f9\u4f4d\u7f6e\u4f20\u53c2 def package_position ( * all_arguments ): print ( type ( all_arguments )) # tuple print ( all_arguments ) package_position ( 1 , 4 , 6 ) package_position ( 5 , 6 , 7 , 1 , 2 , 3 ) # \u5305\u88f9\u5173\u952e\u5b57\u4f20\u53c2 def package_keyword ( ** all_arguments ): print ( type ( all_arguments )) # dict print ( all_arguments ) package_keyword ( a = 1 , b = 9 ) package_keyword ( m = 2 , n = 1 , c = 11 ) # --------\u89e3\u5305\u88f9\u4f20\u53c2--------- def unpackage ( a , b , c ): print ( a , b , c ) args = ( 1 , 3 , 4 ) unpackage ( * args ) args = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } unpackage ( ** args ) ipynb \u683c\u5f0f\u8f6c\u6362 \u00b6 ipynb -> md jupyter nbconver \u6587\u4ef6\u540d --to markdown \u7c7b\u578b\u6ce8\u89e3 \u00b6 Python \u4e2d\u7684\u53d8\u91cf\u4e3a\u52a8\u6001\u7c7b\u578b \u7c7b\u578b\u6ce8\u89e3\u53ef\u4ee5\u4e3a\u51fd\u6570\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u5b9a\u4e49\u7c7b\u578b\uff0c\u5b9e\u73b0\u7c7b\u4f3c\u9759\u6001\u7c7b\u578b\u7684\u6548\u679c\u65b9\u4fbf debug def fun ( a : type , b : type ) -> type : pass vscode \u00b6 autopep8 \u8bbe\u7f6e\u5355\u884c\u6700\u5927\u957f\u5ea6\uff0c\u5728\u8bbe\u7f6e\u4e2d\u641c\u7d22 python formatting\uff0c\u5728 autopep8 Args \u4e2d\u6dfb\u52a0 --max-line-length=150","title":"Python"},{"location":"Python/Python-znk-Inspiron-7590/#python","text":"3.10.0 Documentation (python.org) jackfrued/Python-100-Days: Python - 100\u5929\u4ece\u65b0\u624b\u5230\u5927\u5e08 (github.com) jackfrued/Python-Core-50-Courses: Python\u8bed\u8a00\u57fa\u784050\u8bfe (github.com) Python3 \u6559\u7a0b | \u83dc\u9e1f\u6559\u7a0b (runoob.com)","title":"Python"},{"location":"Python/Python-znk-Inspiron-7590/#_1","text":"range() range ( a ) # [0, a) range ( a , b , c ) # [a, b), \u6b65\u957f\u4e3a c sorted yield type() isinstance() \u4e0e type() \u533a\u522b\uff1a type() \u4e0d\u4f1a\u8ba4\u4e3a\u5b50\u7c7b\u662f\u4e00\u79cd\u7236\u7c7b\u7c7b\u578b\uff0c\u4e0d\u8003\u8651\u7ee7\u627f\u5173\u7cfb\u3002 isinstance() \u4f1a\u8ba4\u4e3a\u5b50\u7c7b\u662f\u4e00\u79cd\u7236\u7c7b\u7c7b\u578b\uff0c\u8003\u8651\u7ee7\u627f\u5173\u7cfb\u3002 isinstance() \u6765\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f\u4e00\u4e2a\u5df2\u77e5\u7684\u7c7b\u578b\uff0c\u53c2\u8003 isinstance() \u83dc\u9e1f\u6559\u7a0b isinstance ( object , classinfo ) classinfo\uff1a\u53ef\u4ee5\u662f\u76f4\u63a5\u6216\u95f4\u63a5\u7c7b\u540d\u3001\u57fa\u672c\u7c7b\u578b\u6216\u8005\u7531\u5b83\u4eec\u7ec4\u6210\u7684\u5143\u7ec4 # eg class A : pass class B ( A ): pass isinstance ( A (), A ) # returns True type ( A ()) == A # returns True isinstance ( B (), A ) # returns True type ( B ()) == A # returns False getattr \u7528\u4e8e\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u5c5e\u6027\u503c getattr ( object , name [, default ]) lambda lambda [ arg1 [, arg2 , ..... argn ]]: expression \u5b9a\u4e49\u533f\u540d\u51fd\u6570 # \u53ef\u5199\u51fd\u6570\u8bf4\u660e sum = lambda arg1 , arg2 : arg1 + arg2 # \u8c03\u7528sum\u51fd\u6570 print \"\u76f8\u52a0\u540e\u7684\u503c\u4e3a : \" , sum ( 10 , 20 ) print \"\u76f8\u52a0\u540e\u7684\u503c\u4e3a : \" , sum ( 20 , 20 ) id() \u8fd4\u56de\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740 ord() \u8fd4\u56de\u5b57\u7b26\u5bf9\u5e94\u7684 Ascii \u7801\u6216\u8005 Unicode chr() chr ( i ) # i in range(256) is \u6bd4\u8f83 2 \u4e2a\u53d8\u91cf\u7684\u5185\u5b58\u5730\u5740\u662f\u5426\u76f8\u540c zip \u8fd4\u56de\u4e00\u4e2a\u6709\u5143\u7ec4\u7ec4\u6210\u7684\u5bf9\u8c61\uff0c\u5728 python3 \u4e2d\u8981\u904d\u5386\u6b21\u5bf9\u8c61\u9700\u8981\u624b\u52a8\u8f6c\u6362\u4e3a list","title":"\u5185\u7f6e\u51fd\u6570\u4e0e\u8bed\u6cd5"},{"location":"Python/Python-znk-Inspiron-7590/#io","text":"print print ( 1 ) print ( 'hello, world' ) print ( 'hello' , 'world' , 1 ) # \u591a\u4e2a\u5b57\u7b26\u4e32\u6216\u6570\u5b57\u4f1a\u7528\u7a7a\u683c\u9694\u5f00 print ( strings , sep = '@' , end = '' ) # sep: \u95f4\u9694\u7b26 end: \u7ed3\u675f\u7b26,\u9ed8\u8ba4\u4e3a'\\n' input name = input ( 'please enter your name: ' ) print ( 'hello,' , name ) f.open && f.close() f = open ( '/Users/michael/test.txt' , 'r' ) print ( f . read ()) f . close () \u64cd\u4f5c\u6a21\u5f0f \u5177\u4f53\u542b\u4e49 'r' \u8bfb\u53d6 \uff08\u9ed8\u8ba4\uff09 'w' \u5199\u5165\uff08\u4f1a\u5148\u622a\u65ad\u4e4b\u524d\u7684\u5185\u5bb9\uff09 'x' \u5199\u5165\uff0c\u5982\u679c\u6587\u4ef6\u5df2\u7ecf\u5b58\u5728\u4f1a\u4ea7\u751f\u5f02\u5e38 'a' \u8ffd\u52a0\uff0c\u5c06\u5185\u5bb9\u5199\u5165\u5230\u5df2\u6709\u6587\u4ef6\u7684\u672b\u5c3e 'b' \u4e8c\u8fdb\u5236\u6a21\u5f0f 't' \u6587\u672c\u6a21\u5f0f\uff08\u9ed8\u8ba4\uff09 '+' \u66f4\u65b0\uff08\u65e2\u53ef\u4ee5\u8bfb\u53c8\u53ef\u4ee5\u5199\uff09 \u6587\u4ef6\u8bfb\u5199\u53ef\u80fd\u4f1a\u51fa\u73b0 IOError \uff0c\u6bd4\u5982\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u8fd9\u6837 f.close() \u5c31\u4e0d\u80fd\u8c03\u7528\uff0c\u4e3a\u4e86\u6c38\u8fdc\u80fd\u6b63\u786e\u5173\u95ed\u6587\u4ef6\uff0c\u4f7f\u7528\u9519\u8bef\u5904\u7406\u6765\u5904\u7406 try : f = open ( '/path/to/file' , 'r' ) print ( f . read ()) finally : if f : f . close () \u6bcf\u6b21\u90fd\u8981\u5199 close() \u8fc7\u4e8e\u7e41\u7410\uff0c with \u53ef\u4ee5\u7b80\u5316\u4ee3\u7801\uff1a with open ( '/path/to/file' , 'r' ) as f : print ( f . read ()) \u8bfb\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5982\u56fe\u7247\uff0c\u89c6\u9891 f = open ( '/Users/michael/test.jpg' , 'rb' ) \u5b57\u7b26\u7f16\u7801 f = open ( '/Users/michael/gbk.txt' , 'r' , encoding = 'gbk' ) \u9519\u8bef\u7f16\u7801\u7684\u5904\u7406 f = open ( '/Users/michael/gbk.txt' , 'r' , encoding = 'gbk' , errors = 'ignore' ) # \u5ffd\u7565\u662f\u6700\u7b80\u5355\u7684\u65b9\u6cd5 f.read() print ( f . read ()) # \u83b7\u53d6\u6240\u6709\u5185\u5bb9 print ( f . read ( size )) # \u6307\u5b9a size \u5b57\u8282\u7684\u5185\u5bb9 print ( f . readline ()) # \u6bcf\u6b21\u8bfb\u53d6\u4e00\u884c print ( f . readlines ()) # \u83b7\u53d6\u6240\u6709\u5185\u5bb9,\u6309\u884c\u8fd4\u56de list eg\uff1a for line in f . readlines (): print ( line . strip ()) # \u628a\u672b\u5c3e\u7684'\\n'\u5220\u6389 f.write() with open ( '/Users/michael/test.txt' , 'w' ) as f : f . write ( 'Hello, world!' ) \u5199\u4e8c\u8fdb\u5236\u6587\u4ef6\uff1a 'wb' 'w' \u6a21\u5f0f\u4f1a\u8986\u76d6\u539f\u6587\u4ef6\u5185\u5bb9\uff0c\u53ef\u4ee5\u7528 'a' \uff08append\uff09","title":"IO"},{"location":"Python/Python-znk-Inspiron-7590/#_2","text":"","title":"\u6570\u636e\u7ed3\u6784"},{"location":"Python/Python-znk-Inspiron-7590/#_3","text":"\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7c7b\u578b\uff0c\u4e0d\u53ef\u4ee5\u901a\u8fc7\u7d22\u5f15\u4fee\u6539\u5185\u5bb9 print ( \" \\\" \\' \\\\ \" ) # \u8f6c\u4e49 s = r '\\time up \\now' # R\u6216r \u5f00\u5934\u8868\u793a\u539f\u59cb\u5b57\u7b26\u4e32,\u4e0d\u8fdb\u884c\u8f6c\u4e49 s = ' \\141 ' # 8\u8fdb\u5236,\u8868\u793aa s = ' \\x61 ' # 16\u8fdb\u5236,\u8868\u793aa s = ' \\u9a86\\u660a ' # \\u \u540e\u9762\u52a0 Unicode \u5b57\u7b26\u7f16\u7801 s = s1 + s2 s = s1 * 3 'A' < 'a' # True, 65 < 97 'a' in s s [:::] len ( s ) \u65b9\u6cd5 \u8bf4\u660e str.capitalize() \u8fd4\u56de\u9996\u5b57\u6bcd\u5927\u5199\u540e\u7684\u5b57\u7b26\u4e32 str.title() \u8fd4\u56de\u6bcf\u4e2a\u5355\u8bcd\u5927\u5199\u540e\u7684\u5b57\u7b26\u4e32 str.upper() \u8fd4\u56de str \u6240\u6709\u5b57\u7b26\u5927\u5199\u540e\u7684\u5b57\u7b26\u4e32 str.lower() \u8fd4\u56de str \u6240\u6709\u5b57\u7b26\u5c0f\u5199\u540e\u7684\u5b57\u7b26\u4e32 str.find() \u8fd4\u56de\u6a21\u5f0f\u4e32\u5728\u4e3b\u4e32\u4e2d\u51fa\u73b0\u7684\u7d22\u5f15\uff0c\u5339\u914d\u5931\u8d25\u8fd4\u56de -1 str.index() \u4e0e find \u4e0d\u540c\u7684\u662f\u5339\u914d\u5931\u8d25\u4f1a\u62a5\u9519 str.rfind() \u4ece\u540e\u5f80\u524d\u627e str.rindex() \u4ece\u540e\u5f80\u524d\u627e str.strip() \u83b7\u53d6\u5b50\u4e32 str.split() \u5206\u5272\u5b57\u7b26\u4e32 str.join() \u5408\u5e76\u5b57\u7b26\u4e32 str.endwith() \u68c0\u67e5\u662f\u5426\u4ee5\u6307\u5b9a\u5b57\u7b26\u4e32\u7ed3\u5c3e str.startwith() \u68c0\u67e5\u662f\u5426\u4ee5\u6307\u5b9a\u5b57\u7b26\u4e32\u5f00\u5934 str.isdigit() \u662f\u5426\u7531\u6570\u5b57\u6784\u6210 str.isalpha() \u662f\u5426\u7531\u5b57\u6bcd\u6784\u6210 str.isalnum \u662f\u5426\u6570\u5b57\u548c\u5b57\u6bcd\u6784\u6210 str.center() \u5c45\u4e2d str.rjust() \u53f3\u5bf9\u9f50 str.ljust() \u5de6\u5bf9\u9f50 str.replace() \u5b57\u7b26\u66ff\u6362 str.encode() \u7f16\u7801 str.decode \u89e3\u7801 str.find() \u8fd4\u56de\u6a21\u5f0f\u4e32\u5728\u4e3b\u4e32\u4e2d\u51fa\u73b0\u7684\u7d22\u5f15\uff0c\u5339\u914d\u5931\u8d25\u8fd4\u56de -1 s . find ( string , beg = 0 , end = len ( string )) # beg end \u6307\u5b9a\u4e3b\u4e32\u4e2d\u5339\u914d\u7684\u7d22\u5f15\u8303\u56f4 str.index() \u4e0e find \u4e0d\u540c\u7684\u662f\u5339\u914d\u5931\u8d25\u4f1a\u62a5\u9519 s . index ( string , beg = 0 , end = len ( string )) # beg end \u6307\u5b9a\u4e3b\u4e32\u4e2d\u5339\u914d\u7684\u7d22\u5f15\u8303\u56f4 str.strip() str . strip ([ chars ]) Return a copy of the string with the leading and trailing characters removed. >>> ' spacious ' . strip () 'spacious' >>> 'www.example.com' . strip ( 'cmowz.' ) 'example' str.split() str . split ( sep = None ) \u6309\u7167 sep \u5206\u5272\u5b57\u7b26\u4e32 Return a list of the words in the string, using sep as the delimiter string. str.startswith() str . startswith ( str , beg = 0 , end = len ( string )) \u5982\u679c\u68c0\u6d4b\u5230\u5b57\u7b26\u4e32\u5219\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse str.center() \u5c45\u4e2d\u5bf9\u9f50\uff0crjust \u548c ljust \u7528\u6cd5\u7c7b\u4f3c s . center ( i , c ) # i \u6307\u5b9a\u5bbd\u5ea6\uff0cc \u6307\u5b9a\u586b\u5145\u5b57\u7b26 s = 'hello, world' print ( s . center ( 20 , '*' )) # ****hello, world**** str.replace() \u66ff\u6362\u5b57\u7b26 s . replace ( c1 , c2 , i ) # \u628a c1 \u66ff\u6362\u6210 c2, i \u662f\u66ff\u6362\u6b21\u6570, \u9ed8\u8ba4\u5168\u90e8\u66ff\u6362","title":"\u5b57\u7b26\u4e32"},{"location":"Python/Python-znk-Inspiron-7590/#list","text":"\u5217\u8868\u5bb9\u5668 classmates = [ 'Michael' , 'Bob' , 'Tracy' ] s = list ( \"hello\" ) # \u8fd0\u7b97 list1 + list2 [ 0 ] * 3 # [0, 0, 0] list1 == list2 list1 <= list2 'a' in list1 # \u5d4c\u5957\u5217\u8868\u7684\u521b\u5efa [[ 0 ] * 3 ] * 5 # \u8fd9\u79cd\u505a\u6cd5\u662f\u6709\u95ee\u9898\u7684 scores = [[ 0 ] * 3 for _ in range ( 5 )] # \u6b63\u786e\u505a\u6cd5 \u7d22\u5f15 classmates [ 0 ] # \u7b2c\u4e00\u4e2a\u5143\u7d20 classmates [ - 1 ] # \u5012\u6570\u7b2c\u4e00\u4e2a\u5143\u7d20 list1 [:::] # \u5207\u7247 \u65b9\u6cd5 \u8bf4\u660e list.append() \u5c3e\u52a0 list.extend() \u5c3e\u52a0\uff0c\u53c2\u6570\u662flist list.insert() \u63d2\u5165 list.remove() \u5220\u9664 list.pop() \u5c3e\u5220 list.clear() \u6e05\u7a7a list.index() \u8fd4\u56de\u7d22\u5f15 list.count() \u8ba1\u6570 list.sort() \u6392\u5e8f list.reverse() \u9006\u5e8f list.append() classmates . append ( 'Adam' ) # \u5c3e\u52a0 list.insert() classmates . insert ( 1 , 'Jack' ) # \u6307\u5b9a\u4f4d\u7f6e\u52a0 list.remove() list1 . remove ( 'jack' ) # \u5220\u9664\u6307\u5b9a\u5143\u7d20 list.pop() classmates . pop () # \u5c3e\u5220 classmates . pop ( 1 ) # \u6307\u5b9a\u4f4d\u7f6e\u5220,\u8fd4\u56de pop \u7684\u5143\u7d20 del list1 [ 1 ] list.clear() list1 . clear () # \u6e05\u7a7a\u5143\u7d20 list.index() list1 . index ( elem , i ) # \u8fd4\u56de\u7b2c i \u4e2a elem \u7684\u7d22\u5f15 items = [ 'Python' , 'Java' , 'Java' , 'Go' , 'Kotlin' , 'Python' ] print ( items . index ( 'Python' )) # 0 print ( items . index ( 'Python' , 2 )) # 5 list.count() list1 . count ( elem ) # \u8ba1\u7b97 elem \u5728 list \u4e2d\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u6ca1\u6709\u5c31\u662f 0 list.sort() list1 . sort ( key , reverse = False ) \u6392\u5e8f list.reverse() \u9006\u5e8f \u5217\u8868\u63a8\u5bfc\u5f0f \u5373\u5feb\u901f\u751f\u6210\u4e00\u4e2a list \u7684\u65b9\u6cd5\uff0c >>> [ x * x for x in range ( 1 , 11 ) if x % 2 == 0 ] [ 4 , 16 , 36 , 64 , 100 ] >>> [ m + n for m in 'ABC' for n in 'XYZ' ] [ 'AX' , 'AY' , 'AZ' , 'BX' , 'BY' , 'BZ' , 'CX' , 'CY' , 'CZ' ] \u5b57\u5178\u4e0e\u5217\u8868\u751f\u6210\u5f0f >>> d = { 'x' : 'A' , 'y' : 'B' , 'z' : 'C' } >>> [ k + '=' + v for k , v in d . items ()] # for \u4e2d\u53ef\u4ee5\u540c\u65f6\u83b7\u53d6 key \u4e0e val [ 'y=B' , 'x=A' , 'z=C' ]","title":"list"},{"location":"Python/Python-znk-Inspiron-7590/#tuple","text":"\u5143\u7ec4\u5bb9\u5668\uff0c\u521d\u59cb\u5316\u540e\u65e0\u6cd5\u6539\u53d8\uff0c\u53ea\u80fd\u83b7\u53d6\u5143\u7d20 t = ( 1 , 2 ) t = ( 1 ) # \u8868\u793a\u4e00\u4e2a\u6570\u5b57,\u907f\u514d\u4e0e\u6570\u5b66\u516c\u5f0f\u4ea7\u751f\u6b67\u4e49 t = ( 1 ,) # \u8868\u793a\u4e00\u4e2a\u5143\u7d20\u7684\u5143\u7ec4 # \u4e00\u4e9b\u57fa\u672c\u7684\u8fd0\u7b97\u548c list \u7c7b\u4f3c \"\u53ef\u53d8\u7684\" tuple >>> t = ( 'a' , 'b' , [ 'A' , 'B' ]) >>> t [ 2 ][ 0 ] = 'X' >>> t [ 2 ][ 1 ] = 'Y' >>> t ( 'a' , 'b' , [ 'X' , 'Y' ]) t \u4e2d\u6240\u6307\u7684\u5185\u5b58\u5730\u5740\u8fd8\u662f\u4e0d\u53d8\uff0c\u53d8\u7684\u662f list \u4e2d\u7684\u5185\u5bb9 \u5e94\u7528 # \u6253\u5305 a = 1 , 10 , 100 i , j , k = a i , * k = a # \u548c\u51fd\u6570\u53c2\u6570\u4e2d\u7684\u89e3\u5305\u8bed\u6cd5\u7c7b\u4f3c # \u4ea4\u6362\u53d8\u91cf a , b = b , a # \u5143\u7ec4\u5217\u8868\u7684\u76f8\u4e92\u8f6c\u6362 tuple1 = tuple ( list1 )","title":"tuple"},{"location":"Python/Python-znk-Inspiron-7590/#dict","text":"\u5b57\u5178\uff0c\u952e-\u503c\uff08key-value\uff09\u5bf9\u5e94\u7684\u6570\u636e\u7ed3\u6784 d = { 'Michael' : 95 , 'Bob' : 75 , 'Tracy' : 85 } person = dict ( name = '\u738b\u5927\u9524' , age = 55 , weight = 60 , home = '\u4e2d\u540c\u4ec1\u8def8\u53f7' ) print ( person ) # {'name': '\u738b\u5927\u9524', 'age': 55, 'weight': 60, 'home': '\u4e2d\u540c\u4ec1\u8def8\u53f7'} items1 = dict ( zip ( 'ABCDE' , '12345' )) print ( items1 ) # {'A': '1', 'B': '2', 'C': '3', 'D': '4', 'E': '5'} # \u7528\u5b57\u5178\u751f\u6210\u5f0f\u8bed\u6cd5\u521b\u5efa\u5b57\u5178 items3 = { x : x ** 3 for x in range ( 1 , 6 )} print ( items3 ) # {1: 1, 2: 8, 3: 27, 4: 64, 5: 125} for key in person : # for \u53ea\u4f1a\u83b7\u53d6 key ... \u65b9\u6cd5 \u8bf4\u660e dict.get(key, val) \u8fd4\u56de\u952e\u5bf9\u5e94\u7684\u503c\uff0c\u6ca1\u6709\u8fd4\u56de val\uff0c\u4e0d\u8bbe\u5b9a\u53c2\u6570\u8fd4\u56de None dict.keys() \u8fd4\u56de\u5b57\u5178\u6240\u6709\u7684\u952e dict.values() \u8fd4\u56de\u5b57\u5178\u6240\u6709\u7684\u503c dict.items() \u8fd4\u56de\u5b57\u5178\u6240\u6709\u7684\u952e\u503c\u5bf9\uff0clist dict.pop(key) \u5220\u9664\u952e\u5bf9\u5e94\u7684\u503c\u5e76\u8fd4\u56de\u503c dict.popitem() \u5220\u9664\u6700\u540e\u4e00\u4e2a\u952e\u503c\u5bf9 dict.setdefault() dict.update() \u66f4\u65b0 dict.get() # \u5b57\u5178\u4e2d\u7684\u503c\u53c8\u662f\u4e00\u4e2a\u5b57\u5178(\u5d4c\u5957\u7684\u5b57\u5178) students = { 1001 : { 'name' : '\u72c4\u4ec1\u6770' , 'sex' : True , 'age' : 22 , 'place' : '\u5c71\u897f\u5927\u540c' }, 1002 : { 'name' : '\u767d\u5143\u82b3' , 'sex' : True , 'age' : 23 , 'place' : '\u6cb3\u5317\u4fdd\u5b9a' }, 1003 : { 'name' : '\u6b66\u5219\u5929' , 'sex' : False , 'age' : 20 , 'place' : '\u56db\u5ddd\u5e7f\u5143' } } # \u4f7f\u7528get\u65b9\u6cd5\u901a\u8fc7\u952e\u83b7\u53d6\u5bf9\u5e94\u7684\u503c\uff0c\u5982\u679c\u53d6\u4e0d\u5230\u4e0d\u4f1a\u5f15\u53d1KeyError\u5f02\u5e38\u800c\u662f\u8fd4\u56deNone\u6216\u8bbe\u5b9a\u7684\u9ed8\u8ba4\u503c print ( students . get ( 1002 )) # {'name': '\u767d\u5143\u82b3', 'sex': True, 'age': 23, 'place': '\u6cb3\u5317\u4fdd\u5b9a'} print ( students . get ( 1005 )) # None print ( students . get ( 1005 , { 'name' : '\u65e0\u540d\u6c0f' })) # {'name': '\u65e0\u540d\u6c0f'}, \u7b2c\u4e8c\u4e2a\u53c2\u6570\u8868\u793a\u9ed8\u8ba4\u7684\u8fd4\u56de\u503c","title":"dict"},{"location":"Python/Python-znk-Inspiron-7590/#set","text":"\u96c6\u5408 # {} \u8868\u793a\u7a7a\u5b57\u5178, {1} \u624d\u8868\u793a\u96c6\u5408 set1 = { 1 , 2 , 3 , 3 , 3 , 2 } print ( set1 ) # {1, 2, 3} print ( len ( set1 )) # 3 set2 = set ( 'hello' ) print ( set2 ) # {'h', 'l', 'o', 'e'} set4 = { num for num in range ( 1 , 20 ) if num % 3 == 0 or num % 5 == 0 } # \u96c6\u5408\u63a8\u5bfc\u5f0f print ( set4 ) # {3, 5, 6, 9, 10, 12, 15, 18} \u65b9\u6cd5 \u8bf4\u660e & set.intersection() \u4ea4\u96c6 | set.union() \u5e76\u96c6 - set.difference() \u5dee\u96c6 ^ set.symmetric_difference() \u5bf9\u79f0\u5dee == \u5143\u7d20\u662f\u5426\u76f8\u540c < set.issubset() \u662f\u5426\u662f\u771f\u5b50\u96c6 > set.issuperset() \u662f\u5426\u662f\u8d85\u96c6 set.add() \u6dfb\u52a0\u5143\u7d20 set.update(set) \u66f4\u65b0\u96c6\u5408 set.discard() \u5220\u9664\u5143\u7d20\uff0c\u6ca1\u6709\u4e0d\u4f1a\u62a5\u9519 set.remove() \u5220\u9664\u5143\u7d20\uff0c\u6ca1\u6709\u4f1a\u62a5\u9519 set.clear() \u6e05\u7a7a\u96c6\u5408","title":"set"},{"location":"Python/Python-znk-Inspiron-7590/#pil","text":"\u8bfb\u5165\u7684\u662f \\(H\\times W\\times C\\) \uff0c\u4e14\u662f RGB","title":"PIL"},{"location":"Python/Python-znk-Inspiron-7590/#argparse","text":"argparse\u57fa\u672c\u7528\u6cd5_\u9a91\u7740\u8717\u725b\u5411\u524d\u8dd1\u7684\u535a\u5ba2","title":"Argparse"},{"location":"Python/Python-znk-Inspiron-7590/#os","text":"\u65b9\u6cd5 \u8bf4\u660e os.listdir(path) \u8fd4\u56de\u6307\u5b9a\u7684\u6587\u4ef6\u5939\u5305\u542b\u7684\u6587\u4ef6\u6216\u6587\u4ef6\u5939\u7684\u540d\u5b57\u7684\u5217\u8868 s.platform() os.getcwd() \u8fd4\u56de\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55 os.makedirs() os.isdir() os.cpu_count() \u8fd4\u56de CPU \u6570\u91cf os.path __file__ \u8868\u793a\u5f53\u524d\u6587\u4ef6\u540d \u65b9\u6cd5 \u8bf4\u660e os.path.join(path1[, path2[, ...]]) \u628a\u76ee\u5f55\u548c\u6587\u4ef6\u540d\u5408\u6210\u4e00\u4e2a\u8def\u5f84 os.path.abspath(path) \u8fd4\u56de\u7edd\u5bf9\u8def\u5f84 os.path.dirname(path) \u8fd4\u56de\u6587\u4ef6\u8def\u5f84","title":"OS"},{"location":"Python/Python-znk-Inspiron-7590/#pathlib","text":"\u4f60\u5e94\u8be5\u4f7f\u7528pathlib\u66ff\u4ee3os.path - \u77e5\u4e4e (zhihu.com) \u6807\u51c6\u5e93\u4e2d\u7684\u6a21\u5757 from pathlib import Path pathlib \u4e0e os.path \u5bf9\u5e94\u65b9\u6cd5 os.path pathlib os.path.join(path1[, path2[, ...]]) Path(path1).joinpath([, path2[, ...]]) \u6216\u8005 Path(path1) / path2 / ... path.open(mode=\u2018r\u2019, bufferiong=-1, encoding=None, errors=None, newline=None) path.absolute() path.mkdir() path.exits() path.suffix","title":"pathlib"},{"location":"Python/Python-znk-Inspiron-7590/#random","text":"random.randint() random.sample() random.randrange()","title":"Random"},{"location":"Python/Python-znk-Inspiron-7590/#time","text":"time.sleep()","title":"Time"},{"location":"Python/Python-znk-Inspiron-7590/#re","text":"regular expression\uff0c\u652f\u6301\u6b63\u5219\u8868\u8fbe\u5f0f\u76f8\u5173\u64cd\u4f5c \u300a\u6b63\u5219\u8868\u8fbe\u5f0f30\u5206\u949f\u5165\u95e8\u6559\u7a0b\u300b \u51fd\u6570 \u8bf4\u660e re.compile(pattern, flags=0) \u7f16\u8bd1\u6b63\u5219\u8868\u8fbe\u5f0f\u8fd4\u56de\u6b63\u5219\u8868\u8fbe\u5f0f\u5bf9\u8c61 re.match(pattern, string, flags=0) \u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u5b57\u7b26\u4e32 \u6210\u529f\u8fd4\u56de\u5339\u914d\u5bf9\u8c61 \u5426\u5219\u8fd4\u56deNone re.search(pattern, string, flags=0) \u641c\u7d22\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u6a21\u5f0f \u6210\u529f\u8fd4\u56de\u5339\u914d\u5bf9\u8c61 \u5426\u5219\u8fd4\u56deNone re.split(pattern, string, maxsplit=0, flags=0) \u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6307\u5b9a\u7684\u6a21\u5f0f\u5206\u9694\u7b26\u62c6\u5206\u5b57\u7b26\u4e32 \u8fd4\u56de\u5217\u8868 re.sub(pattern, repl, string, count=0, flags=0) \u7528\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u539f\u5b57\u7b26\u4e32\u4e2d\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u6a21\u5f0f \u53ef\u4ee5\u7528count\u6307\u5b9a\u66ff\u6362\u7684\u6b21\u6570 re.fullmatch(pattern, string, flags=0) match\u51fd\u6570\u7684\u5b8c\u5168\u5339\u914d\uff08\u4ece\u5b57\u7b26\u4e32\u5f00\u5934\u5230\u7ed3\u5c3e\uff09\u7248\u672c re.findall(pattern, string, flags=0) \u67e5\u627e\u5b57\u7b26\u4e32\u6240\u6709\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u6a21\u5f0f \u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u5217\u8868 re.finditer(pattern, string, flags=0) \u67e5\u627e\u5b57\u7b26\u4e32\u6240\u6709\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u6a21\u5f0f \u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668 re.purge() \u6e05\u9664\u9690\u5f0f\u7f16\u8bd1\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u7f13\u5b58 re.I / re.IGNORECASE \u5ffd\u7565\u5927\u5c0f\u5199\u5339\u914d\u6807\u8bb0 re.M / re.MULTILINE \u591a\u884c\u5339\u914d\u6807\u8bb0 \u5e94\u7528\uff1a \"\"\" \u9a8c\u8bc1\u8f93\u5165\u7528\u6237\u540d\u548cQQ\u53f7\u662f\u5426\u6709\u6548\u5e76\u7ed9\u51fa\u5bf9\u5e94\u7684\u63d0\u793a\u4fe1\u606f \u8981\u6c42\uff1a\u7528\u6237\u540d\u5fc5\u987b\u7531\u5b57\u6bcd\u3001\u6570\u5b57\u6216\u4e0b\u5212\u7ebf\u6784\u6210\u4e14\u957f\u5ea6\u57286~20\u4e2a\u5b57\u7b26\u4e4b\u95f4\uff0cQQ\u53f7\u662f5~12\u7684\u6570\u5b57\u4e14\u9996\u4f4d\u4e0d\u80fd\u4e3a0 \"\"\" import re def main (): username = input ( '\u8bf7\u8f93\u5165\u7528\u6237\u540d: ' ) qq = input ( '\u8bf7\u8f93\u5165QQ\u53f7: ' ) # match\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\u6216\u6b63\u5219\u8868\u8fbe\u5f0f\u5bf9\u8c61 # \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8981\u8ddf\u6b63\u5219\u8868\u8fbe\u5f0f\u505a\u5339\u914d\u7684\u5b57\u7b26\u4e32\u5bf9\u8c61 m1 = re . match ( r '^[0-9a-zA-Z_]{6,20}$' , username ) if not m1 : print ( '\u8bf7\u8f93\u5165\u6709\u6548\u7684\u7528\u6237\u540d.' ) m2 = re . match ( r '^[1-9]\\d{4,11}$' , qq ) if not m2 : print ( '\u8bf7\u8f93\u5165\u6709\u6548\u7684QQ\u53f7.' ) if m1 and m2 : print ( '\u4f60\u8f93\u5165\u7684\u4fe1\u606f\u662f\u6709\u6548\u7684!' ) if __name__ == '__main__' : main ()","title":"Re"},{"location":"Python/Python-znk-Inspiron-7590/#json","text":"JSON\uff1aJavaScript Object Notation\uff0cJavaScript \u8bed\u8a00\u4e2d\u521b\u5efa\u5bf9\u8c61\u7684\u4e00\u79cd\u5b57\u9762\u91cf\u8bed\u6cd5\uff0c\u53ef\u4ee5\u5bf9\u5e94\u4e8e Python \u4e2d\u7684\u5b57\u5178 json.dump() \u5c06Python\u5bf9\u8c61\u6309\u7167JSON\u683c\u5f0f\u5e8f\u5217\u5316\u5230\u6587\u4ef6\u4e2d json . dump ( obj , fp , * , skipkeys = False , ensure_ascii = True , check_circular = True , allow_nan = True , cls = None , indent = None , separators = None , default = None , sort_keys = False , ** kw ) json.dumps() \u5c06Python\u5bf9\u8c61\u5904\u7406\u6210JSON\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c\u4e0d\u9700\u8981\u4f20\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5176\u4ed6\u7684\u53c2\u6570\u548c dump \u51fd\u6570\u7684\u4e00\u6837 json . dumps ( obj , * , skipkeys = False , ensure_ascii = True , check_circular = True , allow_nan = True , cls = None , indent = None , separators = None , default = None , sort_keys = False , ** kw ) json.load() \u5c06\u6587\u4ef6\u4e2d\u7684JSON\u6570\u636e\u53cd\u5e8f\u5217\u5316\u6210\u5bf9\u8c61 json . load ( fp , * , cls = None , object_hook = None , parse_float = None , parse_int = None , parse_constant = None , object_pairs_hook = None , ** kw ) json.loads() \u5c06\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u53cd\u5e8f\u5217\u5316\u6210Python\u5bf9\u8c61\uff0c loads \u4e5f\u4e0d\u9700\u8981\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5176\u4ed6\u53c2\u6570\u7684\u542b\u4e49\u548c load \u51fd\u6570\u7684\u4e00\u81f4 json . loads ( s , * , encoding = None , cls = None , object_hook = None , parse_float = None , parse_int = None , parse_constant = None , object_pairs_hook = None , ** kw ) \u5e94\u7528\uff1a \u8fd9\u4e2a\u4f8b\u5b50\u4f7f\u7528\u4e86 \u5929\u884c\u6570\u636e \u63d0\u4f9b\u7684\u56fd\u5185\u65b0\u95fb\u6570\u636e\u63a5\u53e3\uff0c\u5176\u4e2d\u7684APIKey\u9700\u8981\u81ea\u5df1\u5230\u8be5\u7f51\u7ad9\u7533\u8bf7 import requests import json def main (): resp = requests . get ( 'http://api.tianapi.com/guonei/?key=APIKey&num=10' ) data_model = json . loads ( resp . text ) for news in data_model [ 'newslist' ]: print ( news [ 'title' ]) if __name__ == '__main__' : main ()","title":"Json"},{"location":"Python/Python-znk-Inspiron-7590/#sys","text":"sys.path list\u7c7b\u578b\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b python \u5bfc\u5165\u6587\u4ef6\u6216\u8005\u6a21\u5757\u4f1a\u5148\u5728 sys.path \u91cc\u627e\u6a21\u5757\u7684\u8def\u5f84 sys . path . append ( parent_path ) # \u6dfb\u52a0\u8def\u5f84\uff0c\u9000\u51fa\u540e\u4f1a\u81ea\u52a8\u6d88\u5931","title":"sys"},{"location":"Python/Python-znk-Inspiron-7590/#collections","text":"\u63d0\u4f9bPython\u6807\u51c6\u5185\u5efa\u5bb9\u5668 dict \uff0c listist \uff0c list \uff0c set , \u548c tuple \u7684\u66ff\u4ee3\u9009\u62e9 \u5bb9\u5668\u540d \u6982\u8ff0 deque ChainMap Counter OrderedDict \u6709\u5e8f\u5b57\u5178\uff0cpython\u65e9\u671f\u7248\u672c\u7684 dict \u4e2d\u7684\u5143\u7d20\u662f\u65e0\u5e8f\u7684 defaultdict UserDict UserList UserString defaultdict \u7528\u6765\u907f\u514d\u666e\u901a\u5b57\u5178\u7684 keyerror\uff0c\u5982\u679c\u8bbf\u95ee\u65f6 key \u4e0d\u5b58\u5728\u4f1a\u81ea\u52a8\u8c03\u7528\u53c2\u6570\u4e2d\u7684\u51fd\u6570\uff0cfun \u4e0d\u80fd\u6709\u53c2\u6570 from collections import defaultdict data = defaultdict ( fun ) # eg data = defaultdict ( set )","title":"collections"},{"location":"Python/Python-znk-Inspiron-7590/#csv","text":"python3\uff1acsv\u7684\u8bfb\u5199_katyusha1\u7684\u535a\u5ba2-CSDN\u535a\u5ba2 csv\u7684\u5199 import csv headers = [ 'class' , 'name' , 'sex' , 'height' , 'year' ] rows = [ [ 1 , 'xiaoming' , 'male' , 168 , 23 ], [ 1 , 'xiaohong' , 'female' , 162 , 22 ], [ 2 , 'xiaozhang' , 'female' , 163 , 21 ], [ 2 , 'xiaoli' , 'male' , 158 , 21 ] ] with open ( 'test.csv' , 'w' ) as f : f_csv = csv . writer ( f ) f_csv . writerow ( headers ) f_csv . writerows ( rows ) \u5199\u5165\u5b57\u5178\u6570\u636e import csv headers = [ 'class' , 'name' , 'sex' , 'height' , 'year' ] rows = [ { 'class' : 1 , 'name' : 'xiaoming' , 'sex' : 'male' , 'height' : 168 , 'year' : 23 }, { 'class' : 1 , 'name' : 'xiaohong' , 'sex' : 'female' , 'height' : 162 , 'year' : 22 }, { 'class' : 2 , 'name' : 'xiaozhang' , 'sex' : 'female' , 'height' : 163 , 'year' : 21 }, { 'class' : 2 , 'name' : 'xiaoli' , 'sex' : 'male' , 'height' : 158 , 'year' : 21 }, ] with open ( 'test2.csv' , 'w' , newline = '' ) as f : f_csv = csv . DictWriter ( f , headers ) f_csv . writeheader () f_csv . writerows ( rows ) csv\u7684\u8bfb import csv with open ( 'test.csv' ) as f : f_csv = csv . reader ( f ) for row in f_csv : print ( row )","title":"csv"},{"location":"Python/Python-znk-Inspiron-7590/#gc","text":"garbage collection import gc del var1 , var2 gc . collection ()","title":"gc"},{"location":"Python/Python-znk-Inspiron-7590/#tqdm","text":"\u597d\u770b\u7684\u8fdb\u5ea6\u6761\u5de5\u5177\uff0c tqdm documentation \u8be6\u7ec6\u4ecb\u7ecdPython\u8fdb\u5ea6\u6761tqdm\u7684\u4f7f\u7528_python_\u811a\u672c\u4e4b\u5bb6 (jb51.net) \u975e\u624b\u52a8\u8bbe\u7f6e\u8fdb\u5ea6\uff1a from tqdm import tqdm import time pbar = tqdm ( range ( 100 )) for i in pbar : time . sleep ( 0.1 ) pbar . desc = str \u624b\u52a8\u8bbe\u7f6e\u8fdb\u5ea6\uff1a from tqdm import tqdm pbar = tqdm ( total , ncols , desc , unit ) args: total ( int or float )\uff1a\u81ea\u5b9a\u4e49\u8fed\u4ee3\u6b21\u6570 ncols ( int )\uff1a\u8f93\u51fa\u4fe1\u606f\u7684\u5bbd\u5ea6\uff0c If 0 , will not print any bar (only stats) unit ( str )\uff1aThe iteration unit [default: 'it'] \uff1f\uff1f\uff1f\uff1f\uff1f desc ( str )\uff1aPrefix for the progressbar \u65b9\u6cd5\uff1a pbar . set_description ( str ) pbar . update ( n = 1 ) # \u66f4\u65b0\u5df2\u8fed\u4ee3\u6b21\u6570 pbar . close () # \u7528\u5b8c\u540e\u5173\u95ed\u5360\u7528\u8d44\u6e90 pabr . set_postfix ( ** kwargs ) # \u8bbe\u7f6e\u53f3\u4fa7\u4fe1\u606f","title":"tqdm"},{"location":"Python/Python-znk-Inspiron-7590/#_4","text":"try-except-else-finally try : runoob () except AssertionError as error : print ( error ) except ( RuntimeError , TypeError , NameError ): # \u53ef\u4ee5\u5904\u7406\u591a\u4e2a\u9519\u8bef\uff0c\u7528\u5143\u7ec4 pass else : # try \u4e2d\u6ca1\u6709\u9519\u8bef\u518d\u6267\u884c\u7684\u7a0b\u5e8f try : with open ( 'file.log' ) as file : read_data = file . read () except FileNotFoundError as fnf_error : print ( fnf_error ) finally : # \u6700\u540e\u603b\u4f1a\u6267\u884c\u7684\u7a0b\u5e8f print ( '\u8fd9\u53e5\u8bdd\uff0c\u65e0\u8bba\u5f02\u5e38\u662f\u5426\u53d1\u751f\u90fd\u4f1a\u6267\u884c\u3002' ) raise x = 10 if x > 5 : raise Exception ( 'x \u4e0d\u80fd\u5927\u4e8e 5\u3002x \u7684\u503c\u4e3a: {} ' . format ( x )) # \u76f4\u63a5\u89e6\u53d1\u5f02\u5e38 else : raise # \u53ef\u4ee5\u76f4\u63a5\u629b\u51fa \u81ea\u5b9a\u4e49\u5f02\u5e38 class MyError ( Exception ): def __init__ ( self , value ): self . value = value def __str__ ( self ): return repr ( self . value ) assert \u7528\u4e8e\u5224\u65ad\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5728\u8868\u8fbe\u5f0f\u6761\u4ef6\u4e3a false \u7684\u65f6\u5019\u89e6\u53d1\u5f02\u5e38 assert expression [, arguments ] >>> assert False # \u6761\u4ef6\u4e3a false \u89e6\u53d1\u5f02\u5e38 Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > AssertionError >>> assert 1 == 2 , '1 \u4e0d\u7b49\u4e8e 2' Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > AssertionError : 1 \u4e0d\u7b49\u4e8e 2","title":"\u9519\u8bef\u5904\u7406"},{"location":"Python/Python-znk-Inspiron-7590/#_5","text":"class Student ( object ): def __init__ ( self , name , score ): self . name = name self . __score = score def __print_score ( self ): print ( ' %s : %s ' % ( self . name , self . score )) obiect \uff1a\u7236\u7c7b\uff0c\u6ca1\u6709\u5c31\u5199 object self \uff1a\u5728\u7c7b\u4e2d\u5b9a\u4e49\u7684\u5b9e\u4f8b\uff08\u5bf9\u8c61\uff09\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u90fd\u5fc5\u987b\u662f self \uff0c\u8868\u793a\u7c7b\u81ea\u5df1 __score \uff1a\u6709 __ \u7684\u5c31\u662f private \u7684\uff0c\u6ca1\u6709\u5c31\u662f public \u7684\uff0c\u51fd\u6570\u540d\u4e5f\u4e00\u6837 @property\u88c5\u9970\u5668 (11\u6761\u6d88\u606f) \u5728\u81ea\u5b9a\u4e49\u7c7b\u7684\u65f6\u5019\uff0c@property\u88c5\u9970\u5668\u7684\u4f5c\u7528\uff1f_\u65e0\u654c..\u7684\u535a\u5ba2-CSDN\u535a\u5ba2 slots\u9b54\u6cd5 \u5bf9\u7c7b\u7684\u5c5e\u6027\u8fdb\u884c\u7ed1\u5b9a\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f__slots__\u7684\u9650\u5b9a\u53ea\u5bf9\u5f53\u524d\u7c7b\u7684\u5bf9\u8c61\u751f\u6548\uff0c\u5bf9\u5b50\u7c7b\u5e76\u4e0d\u8d77\u4efb\u4f55\u4f5c\u7528 class Person ( object ): # \u9650\u5b9aPerson\u5bf9\u8c61\u53ea\u80fd\u7ed1\u5b9a_name, _age\u548c_gender\u5c5e\u6027 __slots__ = ( '_name' , '_age' , '_gender' ) \u9759\u6001\u65b9\u6cd5\uff0c@staticmethod \u5c5e\u4e8e\u7c7b\u800c\u4e0d\u662f\u5c5e\u4e8e\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u7c7b\u540d\u8c03\u7528\uff0c\u6bd4\u5982\u5728\u521b\u5efa\u5bf9\u8c61\u524d\u5224\u65ad\u4e09\u6761\u8fb9\u80fd\u4e0d\u80fd\u7ec4\u6210\u4e09\u89d2\u5f62\uff08\u5982\u679c\u4e0d\u662f\u9759\u6001\u65b9\u6cd5\uff0c\u4e0d\u521b\u5efa\u5bf9\u8c61\u5c31\u65e0\u6cd5\u8c03\u7528\uff09 class Triangle ( object ): def __init__ ( self , a , b , c ): self . _a = a self . _b = b self . _c = c @staticmethod def is_valid ( a , b , c ): return a + b > c and b + c > a and a + c > b \u7c7b\u65b9\u6cd5\uff0c @classmethod \u548c\u9759\u6001\u65b9\u6cd5\u7c7b\u4f3c\uff0c\u662f\u5c5e\u4e8e\u7c7b\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u7c7b\u540d\u8c03\u7528\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u8981\u662f cls \uff08cls \u662f\u7ea6\u5b9a\u4fd7\u79f0\u7684\u4e60\u60ef\u800c\u5df2\uff09 class Clock ( object ): \"\"\"\u6570\u5b57\u65f6\u949f\"\"\" def __init__ ( self , hour = 0 , minute = 0 , second = 0 ): self . _hour = hour self . _minute = minute self . _second = second @classmethod def now ( cls ): ctime = localtime ( time ()) return cls ( ctime . tm_hour , ctime . tm_min , ctime . tm_sec ) # \u8fd4\u56de Clock\u7c7b \u7684\u4e00\u4e2a\u5bf9\u8c61 \u7ee7\u627f Python3.x \u548c Python2.x \u7684\u4e00\u4e2a\u533a\u522b\u662f: Python 3 \u53ef\u4ee5\u4f7f\u7528\u76f4\u63a5\u4f7f\u7528 super().xxx \u4ee3\u66ff super(Class, self).xxx\uff0c\u89c1 Python super() \u51fd\u6570 | \u83dc\u9e1f\u6559\u7a0b) class Student ( Person ): # Person \u662f\u7236\u7c7b \"\"\"\u5b66\u751f\"\"\" def __init__ ( self , name , age , grade ): super () . __init__ ( name , age ) # \u8c03\u7528\u7236\u7c7b\u7684\u521d\u59cb\u5316\u51fd\u6570 self . _grade = grade \u62bd\u8c61\u7c7b \u65e0\u6cd5\u5b9e\u4f8b\u5316\u7684\u7c7b from abc import ABCMeta , abstractmethod class Pet ( object , metaclass = ABCMeta ): \"\"\"\u5ba0\u7269\"\"\" def __init__ ( self , nickname ): self . _nickname = nickname @abstractmethod def make_voice ( self ): \"\"\"\u53d1\u51fa\u58f0\u97f3\"\"\" pass","title":"\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b"},{"location":"Python/Python-znk-Inspiron-7590/#pdb","text":"\u8c03\u8bd5\u5de5\u5177\uff0c\u5728\u4f7f\u7528\u547d\u4ee4\u884c\u8c03\u8bd5\u65f6\u9700\u8981\u7528\u5230 pdb . set_trace () # \u624b\u52a8\u52a0\u65ad\u70b9","title":"pdb"},{"location":"Python/Python-znk-Inspiron-7590/#_6","text":"","title":"\u5176\u4ed6"},{"location":"Python/Python-znk-Inspiron-7590/#global-nolocal","text":"","title":"global &amp;&amp; nolocal"},{"location":"Python/Python-znk-Inspiron-7590/#_7","text":"python \u51fd\u6570\u4f20\u9012\u53c2\u6570\u7684\u591a\u79cd\u65b9\u6cd5 - \u5fcd\u51ac\u7684\u4f60 - \u535a\u5ba2\u56ed (cnblogs.com) \u5173\u4e8ePython\u4e2d\u5305\u88f9\u4f20\u53c2\u548c\u89e3\u5305\u88f9\u7684\u7406\u89e3 - HeZhengfa - \u535a\u5ba2\u56ed (cnblogs.com) \u5305\u88f9\u548c\u89e3\u5305\u88f9 # --------\u5305\u88f9\u4f20\u53c2--------- # \u5305\u88f9\u4f4d\u7f6e\u4f20\u53c2 def package_position ( * all_arguments ): print ( type ( all_arguments )) # tuple print ( all_arguments ) package_position ( 1 , 4 , 6 ) package_position ( 5 , 6 , 7 , 1 , 2 , 3 ) # \u5305\u88f9\u5173\u952e\u5b57\u4f20\u53c2 def package_keyword ( ** all_arguments ): print ( type ( all_arguments )) # dict print ( all_arguments ) package_keyword ( a = 1 , b = 9 ) package_keyword ( m = 2 , n = 1 , c = 11 ) # --------\u89e3\u5305\u88f9\u4f20\u53c2--------- def unpackage ( a , b , c ): print ( a , b , c ) args = ( 1 , 3 , 4 ) unpackage ( * args ) args = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } unpackage ( ** args )","title":"\u51fd\u6570\u53c2\u6570\u7684\u4f20\u9012\u65b9\u5f0f"},{"location":"Python/Python-znk-Inspiron-7590/#ipynb","text":"ipynb -> md jupyter nbconver \u6587\u4ef6\u540d --to markdown","title":"ipynb \u683c\u5f0f\u8f6c\u6362"},{"location":"Python/Python-znk-Inspiron-7590/#_8","text":"Python \u4e2d\u7684\u53d8\u91cf\u4e3a\u52a8\u6001\u7c7b\u578b \u7c7b\u578b\u6ce8\u89e3\u53ef\u4ee5\u4e3a\u51fd\u6570\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u5b9a\u4e49\u7c7b\u578b\uff0c\u5b9e\u73b0\u7c7b\u4f3c\u9759\u6001\u7c7b\u578b\u7684\u6548\u679c\u65b9\u4fbf debug def fun ( a : type , b : type ) -> type : pass","title":"\u7c7b\u578b\u6ce8\u89e3"},{"location":"Python/Python-znk-Inspiron-7590/#vscode","text":"autopep8 \u8bbe\u7f6e\u5355\u884c\u6700\u5927\u957f\u5ea6\uff0c\u5728\u8bbe\u7f6e\u4e2d\u641c\u7d22 python formatting\uff0c\u5728 autopep8 Args \u4e2d\u6dfb\u52a0 --max-line-length=150","title":"vscode"},{"location":"Python/Python/","text":"Python \u00b6 3.10.0 Documentation (python.org) jackfrued/Python-100-Days: Python - 100\u5929\u4ece\u65b0\u624b\u5230\u5927\u5e08 (github.com) jackfrued/Python-Core-50-Courses: Python\u8bed\u8a00\u57fa\u784050\u8bfe (github.com) Python3 \u6559\u7a0b | \u83dc\u9e1f\u6559\u7a0b (runoob.com) \u5185\u7f6e\u51fd\u6570\u4e0e\u8bed\u6cd5 \u00b6 range() range ( a ) # [0, a) range ( a , b , c ) # [a, b), \u6b65\u957f\u4e3a c sorted yield type() isinstance() \u4e0e type() \u533a\u522b\uff1a type() \u4e0d\u4f1a\u8ba4\u4e3a\u5b50\u7c7b\u662f\u4e00\u79cd\u7236\u7c7b\u7c7b\u578b\uff0c\u4e0d\u8003\u8651\u7ee7\u627f\u5173\u7cfb\u3002 isinstance() \u4f1a\u8ba4\u4e3a\u5b50\u7c7b\u662f\u4e00\u79cd\u7236\u7c7b\u7c7b\u578b\uff0c\u8003\u8651\u7ee7\u627f\u5173\u7cfb\u3002 isinstance() \u6765\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f\u4e00\u4e2a\u5df2\u77e5\u7684\u7c7b\u578b\uff0c\u53c2\u8003 isinstance() \u83dc\u9e1f\u6559\u7a0b isinstance ( object , classinfo ) classinfo\uff1a\u53ef\u4ee5\u662f\u76f4\u63a5\u6216\u95f4\u63a5\u7c7b\u540d\u3001\u57fa\u672c\u7c7b\u578b\u6216\u8005\u7531\u5b83\u4eec\u7ec4\u6210\u7684\u5143\u7ec4 # eg class A : pass class B ( A ): pass isinstance ( A (), A ) # returns True type ( A ()) == A # returns True isinstance ( B (), A ) # returns True type ( B ()) == A # returns False getattr \u7528\u4e8e\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u5c5e\u6027\u503c getattr ( object , name [, default ]) lambda lambda [ arg1 [, arg2 , ..... argn ]]: expression \u5b9a\u4e49\u533f\u540d\u51fd\u6570 # \u53ef\u5199\u51fd\u6570\u8bf4\u660e sum = lambda arg1 , arg2 : arg1 + arg2 # \u8c03\u7528sum\u51fd\u6570 print \"\u76f8\u52a0\u540e\u7684\u503c\u4e3a : \" , sum ( 10 , 20 ) print \"\u76f8\u52a0\u540e\u7684\u503c\u4e3a : \" , sum ( 20 , 20 ) id() \u8fd4\u56de\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740 ord() \u8fd4\u56de\u5b57\u7b26\u5bf9\u5e94\u7684 Ascii \u7801\u6216\u8005 Unicode chr() chr ( i ) # i in range(256) is \u6bd4\u8f83 2 \u4e2a\u53d8\u91cf\u7684\u5185\u5b58\u5730\u5740\u662f\u5426\u76f8\u540c zip \u8fd4\u56de\u4e00\u4e2a\u6709\u5143\u7ec4\u7ec4\u6210\u7684\u5bf9\u8c61\uff0c\u5728 python3 \u4e2d\u8981\u904d\u5386\u6b21\u5bf9\u8c61\u9700\u8981\u624b\u52a8\u8f6c\u6362\u4e3a list IO \u00b6 print print ( 1 ) print ( 'hello, world' ) print ( 'hello' , 'world' , 1 ) # \u591a\u4e2a\u5b57\u7b26\u4e32\u6216\u6570\u5b57\u4f1a\u7528\u7a7a\u683c\u9694\u5f00 print ( strings , sep = '@' , end = '' ) # sep: \u95f4\u9694\u7b26 end: \u7ed3\u675f\u7b26,\u9ed8\u8ba4\u4e3a'\\n' input name = input ( 'please enter your name: ' ) print ( 'hello,' , name ) f.open && f.close() f = open ( '/Users/michael/test.txt' , 'r' ) print ( f . read ()) f . close () \u64cd\u4f5c\u6a21\u5f0f \u5177\u4f53\u542b\u4e49 'r' \u8bfb\u53d6 \uff08\u9ed8\u8ba4\uff09 'w' \u5199\u5165\uff08\u4f1a\u5148\u622a\u65ad\u4e4b\u524d\u7684\u5185\u5bb9\uff09 'x' \u5199\u5165\uff0c\u5982\u679c\u6587\u4ef6\u5df2\u7ecf\u5b58\u5728\u4f1a\u4ea7\u751f\u5f02\u5e38 'a' \u8ffd\u52a0\uff0c\u5c06\u5185\u5bb9\u5199\u5165\u5230\u5df2\u6709\u6587\u4ef6\u7684\u672b\u5c3e 'b' \u4e8c\u8fdb\u5236\u6a21\u5f0f 't' \u6587\u672c\u6a21\u5f0f\uff08\u9ed8\u8ba4\uff09 '+' \u66f4\u65b0\uff08\u65e2\u53ef\u4ee5\u8bfb\u53c8\u53ef\u4ee5\u5199\uff09 \u6587\u4ef6\u8bfb\u5199\u53ef\u80fd\u4f1a\u51fa\u73b0 IOError \uff0c\u6bd4\u5982\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u8fd9\u6837 f.close() \u5c31\u4e0d\u80fd\u8c03\u7528\uff0c\u4e3a\u4e86\u6c38\u8fdc\u80fd\u6b63\u786e\u5173\u95ed\u6587\u4ef6\uff0c\u4f7f\u7528\u9519\u8bef\u5904\u7406\u6765\u5904\u7406 try : f = open ( '/path/to/file' , 'r' ) print ( f . read ()) finally : if f : f . close () \u6bcf\u6b21\u90fd\u8981\u5199 close() \u8fc7\u4e8e\u7e41\u7410\uff0c with \u53ef\u4ee5\u7b80\u5316\u4ee3\u7801\uff1a with open ( '/path/to/file' , 'r' ) as f : print ( f . read ()) \u8bfb\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5982\u56fe\u7247\uff0c\u89c6\u9891 f = open ( '/Users/michael/test.jpg' , 'rb' ) \u5b57\u7b26\u7f16\u7801 f = open ( '/Users/michael/gbk.txt' , 'r' , encoding = 'gbk' ) \u9519\u8bef\u7f16\u7801\u7684\u5904\u7406 f = open ( '/Users/michael/gbk.txt' , 'r' , encoding = 'gbk' , errors = 'ignore' ) # \u5ffd\u7565\u662f\u6700\u7b80\u5355\u7684\u65b9\u6cd5 f.read() print ( f . read ()) # \u83b7\u53d6\u6240\u6709\u5185\u5bb9 print ( f . read ( size )) # \u6307\u5b9a size \u5b57\u8282\u7684\u5185\u5bb9 print ( f . readline ()) # \u6bcf\u6b21\u8bfb\u53d6\u4e00\u884c print ( f . readlines ()) # \u83b7\u53d6\u6240\u6709\u5185\u5bb9,\u6309\u884c\u8fd4\u56de list eg\uff1a for line in f . readlines (): print ( line . strip ()) # \u628a\u672b\u5c3e\u7684'\\n'\u5220\u6389 f.write() with open ( '/Users/michael/test.txt' , 'w' ) as f : f . write ( 'Hello, world!' ) \u5199\u4e8c\u8fdb\u5236\u6587\u4ef6\uff1a 'wb' 'w' \u6a21\u5f0f\u4f1a\u8986\u76d6\u539f\u6587\u4ef6\u5185\u5bb9\uff0c\u53ef\u4ee5\u7528 'a' \uff08append\uff09 \u6570\u636e\u7ed3\u6784 \u00b6 \u5b57\u7b26\u4e32 \u00b6 \u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7c7b\u578b\uff0c\u4e0d\u53ef\u4ee5\u901a\u8fc7\u7d22\u5f15\u4fee\u6539\u5185\u5bb9 print ( \" \\\" \\' \\\\ \" ) # \u8f6c\u4e49 s = r '\\time up \\now' # R\u6216r \u5f00\u5934\u8868\u793a\u539f\u59cb\u5b57\u7b26\u4e32,\u4e0d\u8fdb\u884c\u8f6c\u4e49 s = ' \\141 ' # 8\u8fdb\u5236,\u8868\u793aa s = ' \\x61 ' # 16\u8fdb\u5236,\u8868\u793aa s = ' \\u9a86\\u660a ' # \\u \u540e\u9762\u52a0 Unicode \u5b57\u7b26\u7f16\u7801 s = s1 + s2 s = s1 * 3 'A' < 'a' # True, 65 < 97 'a' in s s [:::] len ( s ) \u65b9\u6cd5 \u8bf4\u660e str.capitalize() \u8fd4\u56de\u9996\u5b57\u6bcd\u5927\u5199\u540e\u7684\u5b57\u7b26\u4e32 str.title() \u8fd4\u56de\u6bcf\u4e2a\u5355\u8bcd\u5927\u5199\u540e\u7684\u5b57\u7b26\u4e32 str.upper() \u8fd4\u56de str \u6240\u6709\u5b57\u7b26\u5927\u5199\u540e\u7684\u5b57\u7b26\u4e32 str.lower() \u8fd4\u56de str \u6240\u6709\u5b57\u7b26\u5c0f\u5199\u540e\u7684\u5b57\u7b26\u4e32 str.find() \u8fd4\u56de\u6a21\u5f0f\u4e32\u5728\u4e3b\u4e32\u4e2d\u51fa\u73b0\u7684\u7d22\u5f15\uff0c\u5339\u914d\u5931\u8d25\u8fd4\u56de -1 str.index() \u4e0e find \u4e0d\u540c\u7684\u662f\u5339\u914d\u5931\u8d25\u4f1a\u62a5\u9519 str.rfind() \u4ece\u540e\u5f80\u524d\u627e str.rindex() \u4ece\u540e\u5f80\u524d\u627e str.strip() \u83b7\u53d6\u5b50\u4e32 str.split() \u5206\u5272\u5b57\u7b26\u4e32 str.join() \u5408\u5e76\u5b57\u7b26\u4e32 str.endwith() \u68c0\u67e5\u662f\u5426\u4ee5\u6307\u5b9a\u5b57\u7b26\u4e32\u7ed3\u5c3e str.startwith() \u68c0\u67e5\u662f\u5426\u4ee5\u6307\u5b9a\u5b57\u7b26\u4e32\u5f00\u5934 str.isdigit() \u662f\u5426\u7531\u6570\u5b57\u6784\u6210 str.isalpha() \u662f\u5426\u7531\u5b57\u6bcd\u6784\u6210 str.isalnum \u662f\u5426\u6570\u5b57\u548c\u5b57\u6bcd\u6784\u6210 str.center() \u5c45\u4e2d str.rjust() \u53f3\u5bf9\u9f50 str.ljust() \u5de6\u5bf9\u9f50 str.replace() \u5b57\u7b26\u66ff\u6362 str.encode() \u7f16\u7801 str.decode \u89e3\u7801 str.find() \u8fd4\u56de\u6a21\u5f0f\u4e32\u5728\u4e3b\u4e32\u4e2d\u51fa\u73b0\u7684\u7d22\u5f15\uff0c\u5339\u914d\u5931\u8d25\u8fd4\u56de -1 s . find ( string , beg = 0 , end = len ( string )) # beg end \u6307\u5b9a\u4e3b\u4e32\u4e2d\u5339\u914d\u7684\u7d22\u5f15\u8303\u56f4 str.index() \u4e0e find \u4e0d\u540c\u7684\u662f\u5339\u914d\u5931\u8d25\u4f1a\u62a5\u9519 s . index ( string , beg = 0 , end = len ( string )) # beg end \u6307\u5b9a\u4e3b\u4e32\u4e2d\u5339\u914d\u7684\u7d22\u5f15\u8303\u56f4 str.strip() str . strip ([ chars ]) Return a copy of the string with the leading and trailing characters removed. >>> ' spacious ' . strip () 'spacious' >>> 'www.example.com' . strip ( 'cmowz.' ) 'example' str.split() str . split ( sep = None ) \u6309\u7167 sep \u5206\u5272\u5b57\u7b26\u4e32 Return a list of the words in the string, using sep as the delimiter string. str.startswith() str . startswith ( str , beg = 0 , end = len ( string )) \u5982\u679c\u68c0\u6d4b\u5230\u5b57\u7b26\u4e32\u5219\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse str.center() \u5c45\u4e2d\u5bf9\u9f50\uff0crjust \u548c ljust \u7528\u6cd5\u7c7b\u4f3c s . center ( i , c ) # i \u6307\u5b9a\u5bbd\u5ea6\uff0cc \u6307\u5b9a\u586b\u5145\u5b57\u7b26 s = 'hello, world' print ( s . center ( 20 , '*' )) # ****hello, world**** str.replace() \u66ff\u6362\u5b57\u7b26 s . replace ( c1 , c2 , i ) # \u628a c1 \u66ff\u6362\u6210 c2, i \u662f\u66ff\u6362\u6b21\u6570, \u9ed8\u8ba4\u5168\u90e8\u66ff\u6362 list \u00b6 \u5217\u8868\u5bb9\u5668 classmates = [ 'Michael' , 'Bob' , 'Tracy' ] s = list ( \"hello\" ) # \u8fd0\u7b97 list1 + list2 [ 0 ] * 3 # [0, 0, 0] list1 == list2 list1 <= list2 'a' in list1 # \u5d4c\u5957\u5217\u8868\u7684\u521b\u5efa [[ 0 ] * 3 ] * 5 # \u8fd9\u79cd\u505a\u6cd5\u662f\u6709\u95ee\u9898\u7684 scores = [[ 0 ] * 3 for _ in range ( 5 )] # \u6b63\u786e\u505a\u6cd5 \u7d22\u5f15 classmates [ 0 ] # \u7b2c\u4e00\u4e2a\u5143\u7d20 classmates [ - 1 ] # \u5012\u6570\u7b2c\u4e00\u4e2a\u5143\u7d20 list1 [:::] # \u5207\u7247 \u65b9\u6cd5 \u8bf4\u660e list.append() \u5c3e\u52a0 list.extend() \u5c3e\u52a0\uff0c\u53c2\u6570\u662flist list.insert() \u63d2\u5165 list.remove() \u5220\u9664 list.pop() \u5c3e\u5220 list.clear() \u6e05\u7a7a list.index() \u8fd4\u56de\u7d22\u5f15 list.count() \u8ba1\u6570 list.sort() \u6392\u5e8f list.reverse() \u9006\u5e8f list.append() classmates . append ( 'Adam' ) # \u5c3e\u52a0 list.insert() classmates . insert ( 1 , 'Jack' ) # \u6307\u5b9a\u4f4d\u7f6e\u52a0 list.remove() list1 . remove ( 'jack' ) # \u5220\u9664\u6307\u5b9a\u5143\u7d20 list.pop() classmates . pop () # \u5c3e\u5220 classmates . pop ( 1 ) # \u6307\u5b9a\u4f4d\u7f6e\u5220,\u8fd4\u56de pop \u7684\u5143\u7d20 del list1 [ 1 ] list.clear() list1 . clear () # \u6e05\u7a7a\u5143\u7d20 list.index() list1 . index ( elem , i ) # \u8fd4\u56de\u7b2c i \u4e2a elem \u7684\u7d22\u5f15 items = [ 'Python' , 'Java' , 'Java' , 'Go' , 'Kotlin' , 'Python' ] print ( items . index ( 'Python' )) # 0 print ( items . index ( 'Python' , 2 )) # 5 list.count() list1 . count ( elem ) # \u8ba1\u7b97 elem \u5728 list \u4e2d\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u6ca1\u6709\u5c31\u662f 0 list.sort() list1 . sort ( key , reverse = False ) \u6392\u5e8f list.reverse() \u9006\u5e8f \u5217\u8868\u63a8\u5bfc\u5f0f \u5373\u5feb\u901f\u751f\u6210\u4e00\u4e2a list \u7684\u65b9\u6cd5\uff0c >>> [ x * x for x in range ( 1 , 11 ) if x % 2 == 0 ] [ 4 , 16 , 36 , 64 , 100 ] >>> [ m + n for m in 'ABC' for n in 'XYZ' ] [ 'AX' , 'AY' , 'AZ' , 'BX' , 'BY' , 'BZ' , 'CX' , 'CY' , 'CZ' ] \u5b57\u5178\u4e0e\u5217\u8868\u751f\u6210\u5f0f >>> d = { 'x' : 'A' , 'y' : 'B' , 'z' : 'C' } >>> [ k + '=' + v for k , v in d . items ()] # for \u4e2d\u53ef\u4ee5\u540c\u65f6\u83b7\u53d6 key \u4e0e val [ 'y=B' , 'x=A' , 'z=C' ] tuple \u00b6 \u5143\u7ec4\u5bb9\u5668\uff0c\u521d\u59cb\u5316\u540e\u65e0\u6cd5\u6539\u53d8\uff0c\u53ea\u80fd\u83b7\u53d6\u5143\u7d20 t = ( 1 , 2 ) t = ( 1 ) # \u8868\u793a\u4e00\u4e2a\u6570\u5b57,\u907f\u514d\u4e0e\u6570\u5b66\u516c\u5f0f\u4ea7\u751f\u6b67\u4e49 t = ( 1 ,) # \u8868\u793a\u4e00\u4e2a\u5143\u7d20\u7684\u5143\u7ec4 # \u4e00\u4e9b\u57fa\u672c\u7684\u8fd0\u7b97\u548c list \u7c7b\u4f3c \"\u53ef\u53d8\u7684\" tuple >>> t = ( 'a' , 'b' , [ 'A' , 'B' ]) >>> t [ 2 ][ 0 ] = 'X' >>> t [ 2 ][ 1 ] = 'Y' >>> t ( 'a' , 'b' , [ 'X' , 'Y' ]) t \u4e2d\u6240\u6307\u7684\u5185\u5b58\u5730\u5740\u8fd8\u662f\u4e0d\u53d8\uff0c\u53d8\u7684\u662f list \u4e2d\u7684\u5185\u5bb9 \u5e94\u7528 # \u6253\u5305 a = 1 , 10 , 100 i , j , k = a i , * k = a # \u548c\u51fd\u6570\u53c2\u6570\u4e2d\u7684\u89e3\u5305\u8bed\u6cd5\u7c7b\u4f3c # \u4ea4\u6362\u53d8\u91cf a , b = b , a # \u5143\u7ec4\u5217\u8868\u7684\u76f8\u4e92\u8f6c\u6362 tuple1 = tuple ( list1 ) dict \u00b6 \u5b57\u5178\uff0c\u952e-\u503c\uff08key-value\uff09\u5bf9\u5e94\u7684\u6570\u636e\u7ed3\u6784 d = { 'Michael' : 95 , 'Bob' : 75 , 'Tracy' : 85 } person = dict ( name = '\u738b\u5927\u9524' , age = 55 , weight = 60 , home = '\u4e2d\u540c\u4ec1\u8def8\u53f7' ) print ( person ) # {'name': '\u738b\u5927\u9524', 'age': 55, 'weight': 60, 'home': '\u4e2d\u540c\u4ec1\u8def8\u53f7'} items1 = dict ( zip ( 'ABCDE' , '12345' )) print ( items1 ) # {'A': '1', 'B': '2', 'C': '3', 'D': '4', 'E': '5'} # \u7528\u5b57\u5178\u751f\u6210\u5f0f\u8bed\u6cd5\u521b\u5efa\u5b57\u5178 items3 = { x : x ** 3 for x in range ( 1 , 6 )} print ( items3 ) # {1: 1, 2: 8, 3: 27, 4: 64, 5: 125} for key in person : # for \u53ea\u4f1a\u83b7\u53d6 key ... \u65b9\u6cd5 \u8bf4\u660e dict.get(key, val) \u8fd4\u56de\u952e\u5bf9\u5e94\u7684\u503c\uff0c\u6ca1\u6709\u8fd4\u56de val\uff0c\u4e0d\u8bbe\u5b9a\u53c2\u6570\u8fd4\u56de None dict.keys() \u8fd4\u56de\u5b57\u5178\u6240\u6709\u7684\u952e dict.values() \u8fd4\u56de\u5b57\u5178\u6240\u6709\u7684\u503c dict.items() \u8fd4\u56de\u5b57\u5178\u6240\u6709\u7684\u952e\u503c\u5bf9\uff0clist dict.pop(key) \u5220\u9664\u952e\u5bf9\u5e94\u7684\u503c\u5e76\u8fd4\u56de\u503c dict.popitem() \u5220\u9664\u6700\u540e\u4e00\u4e2a\u952e\u503c\u5bf9 dict.setdefault() dict.update() \u66f4\u65b0 dict.get() # \u5b57\u5178\u4e2d\u7684\u503c\u53c8\u662f\u4e00\u4e2a\u5b57\u5178(\u5d4c\u5957\u7684\u5b57\u5178) students = { 1001 : { 'name' : '\u72c4\u4ec1\u6770' , 'sex' : True , 'age' : 22 , 'place' : '\u5c71\u897f\u5927\u540c' }, 1002 : { 'name' : '\u767d\u5143\u82b3' , 'sex' : True , 'age' : 23 , 'place' : '\u6cb3\u5317\u4fdd\u5b9a' }, 1003 : { 'name' : '\u6b66\u5219\u5929' , 'sex' : False , 'age' : 20 , 'place' : '\u56db\u5ddd\u5e7f\u5143' } } # \u4f7f\u7528get\u65b9\u6cd5\u901a\u8fc7\u952e\u83b7\u53d6\u5bf9\u5e94\u7684\u503c\uff0c\u5982\u679c\u53d6\u4e0d\u5230\u4e0d\u4f1a\u5f15\u53d1KeyError\u5f02\u5e38\u800c\u662f\u8fd4\u56deNone\u6216\u8bbe\u5b9a\u7684\u9ed8\u8ba4\u503c print ( students . get ( 1002 )) # {'name': '\u767d\u5143\u82b3', 'sex': True, 'age': 23, 'place': '\u6cb3\u5317\u4fdd\u5b9a'} print ( students . get ( 1005 )) # None print ( students . get ( 1005 , { 'name' : '\u65e0\u540d\u6c0f' })) # {'name': '\u65e0\u540d\u6c0f'}, \u7b2c\u4e8c\u4e2a\u53c2\u6570\u8868\u793a\u9ed8\u8ba4\u7684\u8fd4\u56de\u503c set \u00b6 \u96c6\u5408 # {} \u8868\u793a\u7a7a\u5b57\u5178, {1} \u624d\u8868\u793a\u96c6\u5408 set1 = { 1 , 2 , 3 , 3 , 3 , 2 } print ( set1 ) # {1, 2, 3} print ( len ( set1 )) # 3 set2 = set ( 'hello' ) print ( set2 ) # {'h', 'l', 'o', 'e'} set4 = { num for num in range ( 1 , 20 ) if num % 3 == 0 or num % 5 == 0 } # \u96c6\u5408\u63a8\u5bfc\u5f0f print ( set4 ) # {3, 5, 6, 9, 10, 12, 15, 18} \u65b9\u6cd5 \u8bf4\u660e & set.intersection() \u4ea4\u96c6 | set.union() \u5e76\u96c6 - set.difference() \u5dee\u96c6 ^ set.symmetric_difference() \u5bf9\u79f0\u5dee == \u5143\u7d20\u662f\u5426\u76f8\u540c < set.issubset() \u662f\u5426\u662f\u771f\u5b50\u96c6 > set.issuperset() \u662f\u5426\u662f\u8d85\u96c6 set.add() \u6dfb\u52a0\u5143\u7d20 set.update(set) \u66f4\u65b0\u96c6\u5408 set.discard() \u5220\u9664\u5143\u7d20\uff0c\u6ca1\u6709\u4e0d\u4f1a\u62a5\u9519 set.remove() \u5220\u9664\u5143\u7d20\uff0c\u6ca1\u6709\u4f1a\u62a5\u9519 set.clear() \u6e05\u7a7a\u96c6\u5408 PIL \u00b6 \u8bfb\u5165\u7684\u662f \\(H\\times W\\times C\\) \uff0c\u4e14\u662f RGB Image ImageDraw\uff08\u753b bbox\uff0c\u7136\u540e plt.show()\uff09 Argparse \u00b6 argparse\u57fa\u672c\u7528\u6cd5_\u9a91\u7740\u8717\u725b\u5411\u524d\u8dd1\u7684\u535a\u5ba2 OS \u00b6 \u65b9\u6cd5 \u8bf4\u660e os.listdir(path) \u8fd4\u56de\u6307\u5b9a\u7684\u6587\u4ef6\u5939\u5305\u542b\u7684\u6587\u4ef6\u6216\u6587\u4ef6\u5939\u7684\u540d\u5b57\u7684\u5217\u8868 s.platform() os.getcwd() \u8fd4\u56de\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55 os.makedirs() os.isdir() os.cpu_count() \u8fd4\u56de CPU \u6570\u91cf os.path __file__ \u8868\u793a\u5f53\u524d\u6587\u4ef6\u540d \u65b9\u6cd5 \u8bf4\u660e os.path.join(path1[, path2[, ...]]) \u628a\u76ee\u5f55\u548c\u6587\u4ef6\u540d\u5408\u6210\u4e00\u4e2a\u8def\u5f84 os.path.abspath(path) \u8fd4\u56de\u7edd\u5bf9\u8def\u5f84 os.path.dirname(path) \u8fd4\u56de\u6587\u4ef6\u8def\u5f84 pathlib \u00b6 \u4f60\u5e94\u8be5\u4f7f\u7528pathlib\u66ff\u4ee3os.path - \u77e5\u4e4e (zhihu.com) \u6807\u51c6\u5e93\u4e2d\u7684\u6a21\u5757 from pathlib import Path pathlib \u4e0e os.path \u5bf9\u5e94\u65b9\u6cd5 os.path pathlib os.path.join(path1[, path2[, ...]]) Path(path1).joinpath([, path2[, ...]]) \u6216\u8005 Path(path1) / path2 / ... path.open(mode=\u2018r\u2019, bufferiong=-1, encoding=None, errors=None, newline=None) path.absolute() path.mkdir() path.exits() path.suffix Random \u00b6 random.randint() random.sample() random.randrange() Time \u00b6 time.sleep() Re \u00b6 regular expression\uff0c\u652f\u6301\u6b63\u5219\u8868\u8fbe\u5f0f\u76f8\u5173\u64cd\u4f5c \u300a\u6b63\u5219\u8868\u8fbe\u5f0f30\u5206\u949f\u5165\u95e8\u6559\u7a0b\u300b \u51fd\u6570 \u8bf4\u660e re.compile(pattern, flags=0) \u7f16\u8bd1\u6b63\u5219\u8868\u8fbe\u5f0f\u8fd4\u56de\u6b63\u5219\u8868\u8fbe\u5f0f\u5bf9\u8c61 re.match(pattern, string, flags=0) \u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u5b57\u7b26\u4e32 \u6210\u529f\u8fd4\u56de\u5339\u914d\u5bf9\u8c61 \u5426\u5219\u8fd4\u56deNone re.search(pattern, string, flags=0) \u641c\u7d22\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u6a21\u5f0f \u6210\u529f\u8fd4\u56de\u5339\u914d\u5bf9\u8c61 \u5426\u5219\u8fd4\u56deNone re.split(pattern, string, maxsplit=0, flags=0) \u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6307\u5b9a\u7684\u6a21\u5f0f\u5206\u9694\u7b26\u62c6\u5206\u5b57\u7b26\u4e32 \u8fd4\u56de\u5217\u8868 re.sub(pattern, repl, string, count=0, flags=0) \u7528\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u539f\u5b57\u7b26\u4e32\u4e2d\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u6a21\u5f0f \u53ef\u4ee5\u7528count\u6307\u5b9a\u66ff\u6362\u7684\u6b21\u6570 re.fullmatch(pattern, string, flags=0) match\u51fd\u6570\u7684\u5b8c\u5168\u5339\u914d\uff08\u4ece\u5b57\u7b26\u4e32\u5f00\u5934\u5230\u7ed3\u5c3e\uff09\u7248\u672c re.findall(pattern, string, flags=0) \u67e5\u627e\u5b57\u7b26\u4e32\u6240\u6709\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u6a21\u5f0f \u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u5217\u8868 re.finditer(pattern, string, flags=0) \u67e5\u627e\u5b57\u7b26\u4e32\u6240\u6709\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u6a21\u5f0f \u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668 re.purge() \u6e05\u9664\u9690\u5f0f\u7f16\u8bd1\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u7f13\u5b58 re.I / re.IGNORECASE \u5ffd\u7565\u5927\u5c0f\u5199\u5339\u914d\u6807\u8bb0 re.M / re.MULTILINE \u591a\u884c\u5339\u914d\u6807\u8bb0 \u5e94\u7528\uff1a \"\"\" \u9a8c\u8bc1\u8f93\u5165\u7528\u6237\u540d\u548cQQ\u53f7\u662f\u5426\u6709\u6548\u5e76\u7ed9\u51fa\u5bf9\u5e94\u7684\u63d0\u793a\u4fe1\u606f \u8981\u6c42\uff1a\u7528\u6237\u540d\u5fc5\u987b\u7531\u5b57\u6bcd\u3001\u6570\u5b57\u6216\u4e0b\u5212\u7ebf\u6784\u6210\u4e14\u957f\u5ea6\u57286~20\u4e2a\u5b57\u7b26\u4e4b\u95f4\uff0cQQ\u53f7\u662f5~12\u7684\u6570\u5b57\u4e14\u9996\u4f4d\u4e0d\u80fd\u4e3a0 \"\"\" import re def main (): username = input ( '\u8bf7\u8f93\u5165\u7528\u6237\u540d: ' ) qq = input ( '\u8bf7\u8f93\u5165QQ\u53f7: ' ) # match\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\u6216\u6b63\u5219\u8868\u8fbe\u5f0f\u5bf9\u8c61 # \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8981\u8ddf\u6b63\u5219\u8868\u8fbe\u5f0f\u505a\u5339\u914d\u7684\u5b57\u7b26\u4e32\u5bf9\u8c61 m1 = re . match ( r '^[0-9a-zA-Z_]{6,20}$' , username ) if not m1 : print ( '\u8bf7\u8f93\u5165\u6709\u6548\u7684\u7528\u6237\u540d.' ) m2 = re . match ( r '^[1-9]\\d{4,11}$' , qq ) if not m2 : print ( '\u8bf7\u8f93\u5165\u6709\u6548\u7684QQ\u53f7.' ) if m1 and m2 : print ( '\u4f60\u8f93\u5165\u7684\u4fe1\u606f\u662f\u6709\u6548\u7684!' ) if __name__ == '__main__' : main () Json \u00b6 JSON\uff1aJavaScript Object Notation\uff0cJavaScript \u8bed\u8a00\u4e2d\u521b\u5efa\u5bf9\u8c61\u7684\u4e00\u79cd\u5b57\u9762\u91cf\u8bed\u6cd5\uff0c\u53ef\u4ee5\u5bf9\u5e94\u4e8e Python \u4e2d\u7684\u5b57\u5178 json.dump() \u5c06Python\u5bf9\u8c61\u6309\u7167JSON\u683c\u5f0f\u5e8f\u5217\u5316\u5230\u6587\u4ef6\u4e2d json . dump ( obj , fp , * , skipkeys = False , ensure_ascii = True , check_circular = True , allow_nan = True , cls = None , indent = None , separators = None , default = None , sort_keys = False , ** kw ) json.dumps() \u5c06Python\u5bf9\u8c61\u5904\u7406\u6210JSON\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c\u4e0d\u9700\u8981\u4f20\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5176\u4ed6\u7684\u53c2\u6570\u548c dump \u51fd\u6570\u7684\u4e00\u6837 json . dumps ( obj , * , skipkeys = False , ensure_ascii = True , check_circular = True , allow_nan = True , cls = None , indent = None , separators = None , default = None , sort_keys = False , ** kw ) json.load() \u5c06\u6587\u4ef6\u4e2d\u7684JSON\u6570\u636e\u53cd\u5e8f\u5217\u5316\u6210\u5bf9\u8c61 json . load ( fp , * , cls = None , object_hook = None , parse_float = None , parse_int = None , parse_constant = None , object_pairs_hook = None , ** kw ) json.loads() \u5c06\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u53cd\u5e8f\u5217\u5316\u6210Python\u5bf9\u8c61\uff0c loads \u4e5f\u4e0d\u9700\u8981\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5176\u4ed6\u53c2\u6570\u7684\u542b\u4e49\u548c load \u51fd\u6570\u7684\u4e00\u81f4 json . loads ( s , * , encoding = None , cls = None , object_hook = None , parse_float = None , parse_int = None , parse_constant = None , object_pairs_hook = None , ** kw ) \u5e94\u7528\uff1a \u8fd9\u4e2a\u4f8b\u5b50\u4f7f\u7528\u4e86 \u5929\u884c\u6570\u636e \u63d0\u4f9b\u7684\u56fd\u5185\u65b0\u95fb\u6570\u636e\u63a5\u53e3\uff0c\u5176\u4e2d\u7684APIKey\u9700\u8981\u81ea\u5df1\u5230\u8be5\u7f51\u7ad9\u7533\u8bf7 import requests import json def main (): resp = requests . get ( 'http://api.tianapi.com/guonei/?key=APIKey&num=10' ) data_model = json . loads ( resp . text ) for news in data_model [ 'newslist' ]: print ( news [ 'title' ]) if __name__ == '__main__' : main () sys \u00b6 sys.path list\u7c7b\u578b\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b python \u5bfc\u5165\u6587\u4ef6\u6216\u8005\u6a21\u5757\u4f1a\u5148\u5728 sys.path \u91cc\u627e\u6a21\u5757\u7684\u8def\u5f84 sys . path . append ( parent_path ) # \u6dfb\u52a0\u8def\u5f84\uff0c\u9000\u51fa\u540e\u4f1a\u81ea\u52a8\u6d88\u5931 collections \u00b6 \u63d0\u4f9bPython\u6807\u51c6\u5185\u5efa\u5bb9\u5668 dict \uff0c listist \uff0c list \uff0c set , \u548c tuple \u7684\u66ff\u4ee3\u9009\u62e9 \u5bb9\u5668\u540d \u6982\u8ff0 deque ChainMap Counter OrderedDict \u6709\u5e8f\u5b57\u5178\uff0cpython\u65e9\u671f\u7248\u672c\u7684 dict \u4e2d\u7684\u5143\u7d20\u662f\u65e0\u5e8f\u7684 defaultdict UserDict UserList UserString namedtuple defaultdict \u7528\u6765\u907f\u514d\u666e\u901a\u5b57\u5178\u7684 keyerror\uff0c\u5982\u679c\u8bbf\u95ee\u65f6 key \u4e0d\u5b58\u5728\u4f1a\u81ea\u52a8\u8c03\u7528\u53c2\u6570\u4e2d\u7684\u51fd\u6570\uff0cfun \u4e0d\u80fd\u6709\u53c2\u6570 from collections import defaultdict data = defaultdict ( fun ) # eg data = defaultdict ( set , dict1 , dict2 ) # \u7b2c\u4e00\u4e2a\u53c2\u6570\u5916\u7684\u53c2\u6570\u90fd\u4f5c\u4e3a\u5b57\u5178\u7684\u6784\u9020\u51fd\u6570 csv \u00b6 python3\uff1acsv\u7684\u8bfb\u5199_katyusha1\u7684\u535a\u5ba2-CSDN\u535a\u5ba2 csv\u7684\u5199 import csv headers = [ 'class' , 'name' , 'sex' , 'height' , 'year' ] rows = [ [ 1 , 'xiaoming' , 'male' , 168 , 23 ], [ 1 , 'xiaohong' , 'female' , 162 , 22 ], [ 2 , 'xiaozhang' , 'female' , 163 , 21 ], [ 2 , 'xiaoli' , 'male' , 158 , 21 ] ] with open ( 'test.csv' , 'w' ) as f : f_csv = csv . writer ( f ) f_csv . writerow ( headers ) f_csv . writerows ( rows ) \u5199\u5165\u5b57\u5178\u6570\u636e import csv headers = [ 'class' , 'name' , 'sex' , 'height' , 'year' ] rows = [ { 'class' : 1 , 'name' : 'xiaoming' , 'sex' : 'male' , 'height' : 168 , 'year' : 23 }, { 'class' : 1 , 'name' : 'xiaohong' , 'sex' : 'female' , 'height' : 162 , 'year' : 22 }, { 'class' : 2 , 'name' : 'xiaozhang' , 'sex' : 'female' , 'height' : 163 , 'year' : 21 }, { 'class' : 2 , 'name' : 'xiaoli' , 'sex' : 'male' , 'height' : 158 , 'year' : 21 }, ] with open ( 'test2.csv' , 'w' , newline = '' ) as f : f_csv = csv . DictWriter ( f , headers ) f_csv . writeheader () f_csv . writerows ( rows ) csv\u7684\u8bfb import csv with open ( 'test.csv' ) as f : f_csv = csv . reader ( f ) for row in f_csv : print ( row ) gc \u00b6 garbage collection import gc del var1 , var2 gc . collection () tqdm \u00b6 \u597d\u770b\u7684\u8fdb\u5ea6\u6761\u5de5\u5177\uff0c tqdm documentation \u8be6\u7ec6\u4ecb\u7ecdPython\u8fdb\u5ea6\u6761tqdm\u7684\u4f7f\u7528_python_\u811a\u672c\u4e4b\u5bb6 (jb51.net) \u975e\u624b\u52a8\u8bbe\u7f6e\u8fdb\u5ea6\uff1a from tqdm import tqdm import time pbar = tqdm ( range ( 100 )) for i in pbar : time . sleep ( 0.1 ) pbar . desc = str \u624b\u52a8\u8bbe\u7f6e\u8fdb\u5ea6\uff1a from tqdm import tqdm pbar = tqdm ( total , ncols , desc , unit ) args: total ( int or float )\uff1a\u81ea\u5b9a\u4e49\u8fed\u4ee3\u6b21\u6570 ncols ( int )\uff1a\u8f93\u51fa\u4fe1\u606f\u7684\u5bbd\u5ea6\uff0c If 0 , will not print any bar (only stats) unit ( str )\uff1aThe iteration unit [default: 'it'] \uff1f\uff1f\uff1f\uff1f\uff1f desc ( str )\uff1aPrefix for the progressbar \u65b9\u6cd5\uff1a pbar . set_description ( str ) pbar . update ( n = 1 ) # \u66f4\u65b0\u5df2\u8fed\u4ee3\u6b21\u6570 pbar . close () # \u7528\u5b8c\u540e\u5173\u95ed\u5360\u7528\u8d44\u6e90 pabr . set_postfix ( ** kwargs ) # \u8bbe\u7f6e\u53f3\u4fa7\u4fe1\u606f lxml \u00b6 from lxml import etree etree . fromstring ( str1 ) \u5176\u4ed6 \u00b6 \u51fd\u6570\u53c2\u6570\u7684\u4f20\u9012\u65b9\u5f0f \u00b6 python \u51fd\u6570\u4f20\u9012\u53c2\u6570\u7684\u591a\u79cd\u65b9\u6cd5 - \u5fcd\u51ac\u7684\u4f60 - \u535a\u5ba2\u56ed (cnblogs.com) \u5173\u4e8ePython\u4e2d\u5305\u88f9\u4f20\u53c2\u548c\u89e3\u5305\u88f9\u7684\u7406\u89e3 - HeZhengfa - \u535a\u5ba2\u56ed (cnblogs.com) \u5305\u88f9\u548c\u89e3\u5305\u88f9 # --------\u5305\u88f9\u4f20\u53c2--------- # \u5305\u88f9\u4f4d\u7f6e\u4f20\u53c2 def package_position ( * all_arguments ): print ( type ( all_arguments )) # tuple print ( all_arguments ) package_position ( 1 , 4 , 6 ) package_position ( 5 , 6 , 7 , 1 , 2 , 3 ) # \u5305\u88f9\u5173\u952e\u5b57\u4f20\u53c2 def package_keyword ( ** all_arguments ): print ( type ( all_arguments )) # dict print ( all_arguments ) package_keyword ( a = 1 , b = 9 ) package_keyword ( m = 2 , n = 1 , c = 11 ) # --------\u89e3\u5305\u88f9\u4f20\u53c2--------- def unpackage ( a , b , c ): print ( a , b , c ) args = ( 1 , 3 , 4 ) unpackage ( * args ) args = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } unpackage ( ** args ) ipynb \u683c\u5f0f\u8f6c\u6362 \u00b6 ipynb -> md jupyter nbconver \u6587\u4ef6\u540d --to markdown \u7c7b\u578b\u6ce8\u89e3 \u00b6 Python \u4e2d\u7684\u53d8\u91cf\u4e3a\u52a8\u6001\u7c7b\u578b \u7c7b\u578b\u6ce8\u89e3\u53ef\u4ee5\u4e3a\u51fd\u6570\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u5b9a\u4e49\u7c7b\u578b\uff0c\u5b9e\u73b0\u7c7b\u4f3c\u9759\u6001\u7c7b\u578b\u7684\u6548\u679c\u65b9\u4fbf debug def fun ( a : type , b : type ) -> type : pass pip \u00b6 pip install . \uff1a\u5b89\u88c5\u540e\u7684\u6a21\u5757freeze\u5728pip/conda\u4f9d\u8d56\u4e0b\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u518d\u4fee\u6539\u672c\u5730\u7684\u539f\u9879\u76ee\u6587\u4ef6\uff0c\u4e0d\u4f1a\u5bfc\u81f4\u5bf9\u5e94\u6a21\u5757\u53d1\u751f\u53d8\u5316 pip install -e . \uff1a-e \u7406\u89e3\u4e3a editable\uff0c\u4fee\u6539\u672c\u5730\u6587\u4ef6\uff0c\u8c03\u7528\u7684\u6a21\u5757\u4ee5\u6700\u65b0\u6587\u4ef6\u4e3a\u51c6","title":"Python"},{"location":"Python/Python/#python","text":"3.10.0 Documentation (python.org) jackfrued/Python-100-Days: Python - 100\u5929\u4ece\u65b0\u624b\u5230\u5927\u5e08 (github.com) jackfrued/Python-Core-50-Courses: Python\u8bed\u8a00\u57fa\u784050\u8bfe (github.com) Python3 \u6559\u7a0b | \u83dc\u9e1f\u6559\u7a0b (runoob.com)","title":"Python"},{"location":"Python/Python/#_1","text":"range() range ( a ) # [0, a) range ( a , b , c ) # [a, b), \u6b65\u957f\u4e3a c sorted yield type() isinstance() \u4e0e type() \u533a\u522b\uff1a type() \u4e0d\u4f1a\u8ba4\u4e3a\u5b50\u7c7b\u662f\u4e00\u79cd\u7236\u7c7b\u7c7b\u578b\uff0c\u4e0d\u8003\u8651\u7ee7\u627f\u5173\u7cfb\u3002 isinstance() \u4f1a\u8ba4\u4e3a\u5b50\u7c7b\u662f\u4e00\u79cd\u7236\u7c7b\u7c7b\u578b\uff0c\u8003\u8651\u7ee7\u627f\u5173\u7cfb\u3002 isinstance() \u6765\u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u662f\u4e00\u4e2a\u5df2\u77e5\u7684\u7c7b\u578b\uff0c\u53c2\u8003 isinstance() \u83dc\u9e1f\u6559\u7a0b isinstance ( object , classinfo ) classinfo\uff1a\u53ef\u4ee5\u662f\u76f4\u63a5\u6216\u95f4\u63a5\u7c7b\u540d\u3001\u57fa\u672c\u7c7b\u578b\u6216\u8005\u7531\u5b83\u4eec\u7ec4\u6210\u7684\u5143\u7ec4 # eg class A : pass class B ( A ): pass isinstance ( A (), A ) # returns True type ( A ()) == A # returns True isinstance ( B (), A ) # returns True type ( B ()) == A # returns False getattr \u7528\u4e8e\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u5c5e\u6027\u503c getattr ( object , name [, default ]) lambda lambda [ arg1 [, arg2 , ..... argn ]]: expression \u5b9a\u4e49\u533f\u540d\u51fd\u6570 # \u53ef\u5199\u51fd\u6570\u8bf4\u660e sum = lambda arg1 , arg2 : arg1 + arg2 # \u8c03\u7528sum\u51fd\u6570 print \"\u76f8\u52a0\u540e\u7684\u503c\u4e3a : \" , sum ( 10 , 20 ) print \"\u76f8\u52a0\u540e\u7684\u503c\u4e3a : \" , sum ( 20 , 20 ) id() \u8fd4\u56de\u5bf9\u8c61\u7684\u5185\u5b58\u5730\u5740 ord() \u8fd4\u56de\u5b57\u7b26\u5bf9\u5e94\u7684 Ascii \u7801\u6216\u8005 Unicode chr() chr ( i ) # i in range(256) is \u6bd4\u8f83 2 \u4e2a\u53d8\u91cf\u7684\u5185\u5b58\u5730\u5740\u662f\u5426\u76f8\u540c zip \u8fd4\u56de\u4e00\u4e2a\u6709\u5143\u7ec4\u7ec4\u6210\u7684\u5bf9\u8c61\uff0c\u5728 python3 \u4e2d\u8981\u904d\u5386\u6b21\u5bf9\u8c61\u9700\u8981\u624b\u52a8\u8f6c\u6362\u4e3a list","title":"\u5185\u7f6e\u51fd\u6570\u4e0e\u8bed\u6cd5"},{"location":"Python/Python/#io","text":"print print ( 1 ) print ( 'hello, world' ) print ( 'hello' , 'world' , 1 ) # \u591a\u4e2a\u5b57\u7b26\u4e32\u6216\u6570\u5b57\u4f1a\u7528\u7a7a\u683c\u9694\u5f00 print ( strings , sep = '@' , end = '' ) # sep: \u95f4\u9694\u7b26 end: \u7ed3\u675f\u7b26,\u9ed8\u8ba4\u4e3a'\\n' input name = input ( 'please enter your name: ' ) print ( 'hello,' , name ) f.open && f.close() f = open ( '/Users/michael/test.txt' , 'r' ) print ( f . read ()) f . close () \u64cd\u4f5c\u6a21\u5f0f \u5177\u4f53\u542b\u4e49 'r' \u8bfb\u53d6 \uff08\u9ed8\u8ba4\uff09 'w' \u5199\u5165\uff08\u4f1a\u5148\u622a\u65ad\u4e4b\u524d\u7684\u5185\u5bb9\uff09 'x' \u5199\u5165\uff0c\u5982\u679c\u6587\u4ef6\u5df2\u7ecf\u5b58\u5728\u4f1a\u4ea7\u751f\u5f02\u5e38 'a' \u8ffd\u52a0\uff0c\u5c06\u5185\u5bb9\u5199\u5165\u5230\u5df2\u6709\u6587\u4ef6\u7684\u672b\u5c3e 'b' \u4e8c\u8fdb\u5236\u6a21\u5f0f 't' \u6587\u672c\u6a21\u5f0f\uff08\u9ed8\u8ba4\uff09 '+' \u66f4\u65b0\uff08\u65e2\u53ef\u4ee5\u8bfb\u53c8\u53ef\u4ee5\u5199\uff09 \u6587\u4ef6\u8bfb\u5199\u53ef\u80fd\u4f1a\u51fa\u73b0 IOError \uff0c\u6bd4\u5982\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u8fd9\u6837 f.close() \u5c31\u4e0d\u80fd\u8c03\u7528\uff0c\u4e3a\u4e86\u6c38\u8fdc\u80fd\u6b63\u786e\u5173\u95ed\u6587\u4ef6\uff0c\u4f7f\u7528\u9519\u8bef\u5904\u7406\u6765\u5904\u7406 try : f = open ( '/path/to/file' , 'r' ) print ( f . read ()) finally : if f : f . close () \u6bcf\u6b21\u90fd\u8981\u5199 close() \u8fc7\u4e8e\u7e41\u7410\uff0c with \u53ef\u4ee5\u7b80\u5316\u4ee3\u7801\uff1a with open ( '/path/to/file' , 'r' ) as f : print ( f . read ()) \u8bfb\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5982\u56fe\u7247\uff0c\u89c6\u9891 f = open ( '/Users/michael/test.jpg' , 'rb' ) \u5b57\u7b26\u7f16\u7801 f = open ( '/Users/michael/gbk.txt' , 'r' , encoding = 'gbk' ) \u9519\u8bef\u7f16\u7801\u7684\u5904\u7406 f = open ( '/Users/michael/gbk.txt' , 'r' , encoding = 'gbk' , errors = 'ignore' ) # \u5ffd\u7565\u662f\u6700\u7b80\u5355\u7684\u65b9\u6cd5 f.read() print ( f . read ()) # \u83b7\u53d6\u6240\u6709\u5185\u5bb9 print ( f . read ( size )) # \u6307\u5b9a size \u5b57\u8282\u7684\u5185\u5bb9 print ( f . readline ()) # \u6bcf\u6b21\u8bfb\u53d6\u4e00\u884c print ( f . readlines ()) # \u83b7\u53d6\u6240\u6709\u5185\u5bb9,\u6309\u884c\u8fd4\u56de list eg\uff1a for line in f . readlines (): print ( line . strip ()) # \u628a\u672b\u5c3e\u7684'\\n'\u5220\u6389 f.write() with open ( '/Users/michael/test.txt' , 'w' ) as f : f . write ( 'Hello, world!' ) \u5199\u4e8c\u8fdb\u5236\u6587\u4ef6\uff1a 'wb' 'w' \u6a21\u5f0f\u4f1a\u8986\u76d6\u539f\u6587\u4ef6\u5185\u5bb9\uff0c\u53ef\u4ee5\u7528 'a' \uff08append\uff09","title":"IO"},{"location":"Python/Python/#_2","text":"","title":"\u6570\u636e\u7ed3\u6784"},{"location":"Python/Python/#_3","text":"\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7c7b\u578b\uff0c\u4e0d\u53ef\u4ee5\u901a\u8fc7\u7d22\u5f15\u4fee\u6539\u5185\u5bb9 print ( \" \\\" \\' \\\\ \" ) # \u8f6c\u4e49 s = r '\\time up \\now' # R\u6216r \u5f00\u5934\u8868\u793a\u539f\u59cb\u5b57\u7b26\u4e32,\u4e0d\u8fdb\u884c\u8f6c\u4e49 s = ' \\141 ' # 8\u8fdb\u5236,\u8868\u793aa s = ' \\x61 ' # 16\u8fdb\u5236,\u8868\u793aa s = ' \\u9a86\\u660a ' # \\u \u540e\u9762\u52a0 Unicode \u5b57\u7b26\u7f16\u7801 s = s1 + s2 s = s1 * 3 'A' < 'a' # True, 65 < 97 'a' in s s [:::] len ( s ) \u65b9\u6cd5 \u8bf4\u660e str.capitalize() \u8fd4\u56de\u9996\u5b57\u6bcd\u5927\u5199\u540e\u7684\u5b57\u7b26\u4e32 str.title() \u8fd4\u56de\u6bcf\u4e2a\u5355\u8bcd\u5927\u5199\u540e\u7684\u5b57\u7b26\u4e32 str.upper() \u8fd4\u56de str \u6240\u6709\u5b57\u7b26\u5927\u5199\u540e\u7684\u5b57\u7b26\u4e32 str.lower() \u8fd4\u56de str \u6240\u6709\u5b57\u7b26\u5c0f\u5199\u540e\u7684\u5b57\u7b26\u4e32 str.find() \u8fd4\u56de\u6a21\u5f0f\u4e32\u5728\u4e3b\u4e32\u4e2d\u51fa\u73b0\u7684\u7d22\u5f15\uff0c\u5339\u914d\u5931\u8d25\u8fd4\u56de -1 str.index() \u4e0e find \u4e0d\u540c\u7684\u662f\u5339\u914d\u5931\u8d25\u4f1a\u62a5\u9519 str.rfind() \u4ece\u540e\u5f80\u524d\u627e str.rindex() \u4ece\u540e\u5f80\u524d\u627e str.strip() \u83b7\u53d6\u5b50\u4e32 str.split() \u5206\u5272\u5b57\u7b26\u4e32 str.join() \u5408\u5e76\u5b57\u7b26\u4e32 str.endwith() \u68c0\u67e5\u662f\u5426\u4ee5\u6307\u5b9a\u5b57\u7b26\u4e32\u7ed3\u5c3e str.startwith() \u68c0\u67e5\u662f\u5426\u4ee5\u6307\u5b9a\u5b57\u7b26\u4e32\u5f00\u5934 str.isdigit() \u662f\u5426\u7531\u6570\u5b57\u6784\u6210 str.isalpha() \u662f\u5426\u7531\u5b57\u6bcd\u6784\u6210 str.isalnum \u662f\u5426\u6570\u5b57\u548c\u5b57\u6bcd\u6784\u6210 str.center() \u5c45\u4e2d str.rjust() \u53f3\u5bf9\u9f50 str.ljust() \u5de6\u5bf9\u9f50 str.replace() \u5b57\u7b26\u66ff\u6362 str.encode() \u7f16\u7801 str.decode \u89e3\u7801 str.find() \u8fd4\u56de\u6a21\u5f0f\u4e32\u5728\u4e3b\u4e32\u4e2d\u51fa\u73b0\u7684\u7d22\u5f15\uff0c\u5339\u914d\u5931\u8d25\u8fd4\u56de -1 s . find ( string , beg = 0 , end = len ( string )) # beg end \u6307\u5b9a\u4e3b\u4e32\u4e2d\u5339\u914d\u7684\u7d22\u5f15\u8303\u56f4 str.index() \u4e0e find \u4e0d\u540c\u7684\u662f\u5339\u914d\u5931\u8d25\u4f1a\u62a5\u9519 s . index ( string , beg = 0 , end = len ( string )) # beg end \u6307\u5b9a\u4e3b\u4e32\u4e2d\u5339\u914d\u7684\u7d22\u5f15\u8303\u56f4 str.strip() str . strip ([ chars ]) Return a copy of the string with the leading and trailing characters removed. >>> ' spacious ' . strip () 'spacious' >>> 'www.example.com' . strip ( 'cmowz.' ) 'example' str.split() str . split ( sep = None ) \u6309\u7167 sep \u5206\u5272\u5b57\u7b26\u4e32 Return a list of the words in the string, using sep as the delimiter string. str.startswith() str . startswith ( str , beg = 0 , end = len ( string )) \u5982\u679c\u68c0\u6d4b\u5230\u5b57\u7b26\u4e32\u5219\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse str.center() \u5c45\u4e2d\u5bf9\u9f50\uff0crjust \u548c ljust \u7528\u6cd5\u7c7b\u4f3c s . center ( i , c ) # i \u6307\u5b9a\u5bbd\u5ea6\uff0cc \u6307\u5b9a\u586b\u5145\u5b57\u7b26 s = 'hello, world' print ( s . center ( 20 , '*' )) # ****hello, world**** str.replace() \u66ff\u6362\u5b57\u7b26 s . replace ( c1 , c2 , i ) # \u628a c1 \u66ff\u6362\u6210 c2, i \u662f\u66ff\u6362\u6b21\u6570, \u9ed8\u8ba4\u5168\u90e8\u66ff\u6362","title":"\u5b57\u7b26\u4e32"},{"location":"Python/Python/#list","text":"\u5217\u8868\u5bb9\u5668 classmates = [ 'Michael' , 'Bob' , 'Tracy' ] s = list ( \"hello\" ) # \u8fd0\u7b97 list1 + list2 [ 0 ] * 3 # [0, 0, 0] list1 == list2 list1 <= list2 'a' in list1 # \u5d4c\u5957\u5217\u8868\u7684\u521b\u5efa [[ 0 ] * 3 ] * 5 # \u8fd9\u79cd\u505a\u6cd5\u662f\u6709\u95ee\u9898\u7684 scores = [[ 0 ] * 3 for _ in range ( 5 )] # \u6b63\u786e\u505a\u6cd5 \u7d22\u5f15 classmates [ 0 ] # \u7b2c\u4e00\u4e2a\u5143\u7d20 classmates [ - 1 ] # \u5012\u6570\u7b2c\u4e00\u4e2a\u5143\u7d20 list1 [:::] # \u5207\u7247 \u65b9\u6cd5 \u8bf4\u660e list.append() \u5c3e\u52a0 list.extend() \u5c3e\u52a0\uff0c\u53c2\u6570\u662flist list.insert() \u63d2\u5165 list.remove() \u5220\u9664 list.pop() \u5c3e\u5220 list.clear() \u6e05\u7a7a list.index() \u8fd4\u56de\u7d22\u5f15 list.count() \u8ba1\u6570 list.sort() \u6392\u5e8f list.reverse() \u9006\u5e8f list.append() classmates . append ( 'Adam' ) # \u5c3e\u52a0 list.insert() classmates . insert ( 1 , 'Jack' ) # \u6307\u5b9a\u4f4d\u7f6e\u52a0 list.remove() list1 . remove ( 'jack' ) # \u5220\u9664\u6307\u5b9a\u5143\u7d20 list.pop() classmates . pop () # \u5c3e\u5220 classmates . pop ( 1 ) # \u6307\u5b9a\u4f4d\u7f6e\u5220,\u8fd4\u56de pop \u7684\u5143\u7d20 del list1 [ 1 ] list.clear() list1 . clear () # \u6e05\u7a7a\u5143\u7d20 list.index() list1 . index ( elem , i ) # \u8fd4\u56de\u7b2c i \u4e2a elem \u7684\u7d22\u5f15 items = [ 'Python' , 'Java' , 'Java' , 'Go' , 'Kotlin' , 'Python' ] print ( items . index ( 'Python' )) # 0 print ( items . index ( 'Python' , 2 )) # 5 list.count() list1 . count ( elem ) # \u8ba1\u7b97 elem \u5728 list \u4e2d\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u6ca1\u6709\u5c31\u662f 0 list.sort() list1 . sort ( key , reverse = False ) \u6392\u5e8f list.reverse() \u9006\u5e8f \u5217\u8868\u63a8\u5bfc\u5f0f \u5373\u5feb\u901f\u751f\u6210\u4e00\u4e2a list \u7684\u65b9\u6cd5\uff0c >>> [ x * x for x in range ( 1 , 11 ) if x % 2 == 0 ] [ 4 , 16 , 36 , 64 , 100 ] >>> [ m + n for m in 'ABC' for n in 'XYZ' ] [ 'AX' , 'AY' , 'AZ' , 'BX' , 'BY' , 'BZ' , 'CX' , 'CY' , 'CZ' ] \u5b57\u5178\u4e0e\u5217\u8868\u751f\u6210\u5f0f >>> d = { 'x' : 'A' , 'y' : 'B' , 'z' : 'C' } >>> [ k + '=' + v for k , v in d . items ()] # for \u4e2d\u53ef\u4ee5\u540c\u65f6\u83b7\u53d6 key \u4e0e val [ 'y=B' , 'x=A' , 'z=C' ]","title":"list"},{"location":"Python/Python/#tuple","text":"\u5143\u7ec4\u5bb9\u5668\uff0c\u521d\u59cb\u5316\u540e\u65e0\u6cd5\u6539\u53d8\uff0c\u53ea\u80fd\u83b7\u53d6\u5143\u7d20 t = ( 1 , 2 ) t = ( 1 ) # \u8868\u793a\u4e00\u4e2a\u6570\u5b57,\u907f\u514d\u4e0e\u6570\u5b66\u516c\u5f0f\u4ea7\u751f\u6b67\u4e49 t = ( 1 ,) # \u8868\u793a\u4e00\u4e2a\u5143\u7d20\u7684\u5143\u7ec4 # \u4e00\u4e9b\u57fa\u672c\u7684\u8fd0\u7b97\u548c list \u7c7b\u4f3c \"\u53ef\u53d8\u7684\" tuple >>> t = ( 'a' , 'b' , [ 'A' , 'B' ]) >>> t [ 2 ][ 0 ] = 'X' >>> t [ 2 ][ 1 ] = 'Y' >>> t ( 'a' , 'b' , [ 'X' , 'Y' ]) t \u4e2d\u6240\u6307\u7684\u5185\u5b58\u5730\u5740\u8fd8\u662f\u4e0d\u53d8\uff0c\u53d8\u7684\u662f list \u4e2d\u7684\u5185\u5bb9 \u5e94\u7528 # \u6253\u5305 a = 1 , 10 , 100 i , j , k = a i , * k = a # \u548c\u51fd\u6570\u53c2\u6570\u4e2d\u7684\u89e3\u5305\u8bed\u6cd5\u7c7b\u4f3c # \u4ea4\u6362\u53d8\u91cf a , b = b , a # \u5143\u7ec4\u5217\u8868\u7684\u76f8\u4e92\u8f6c\u6362 tuple1 = tuple ( list1 )","title":"tuple"},{"location":"Python/Python/#dict","text":"\u5b57\u5178\uff0c\u952e-\u503c\uff08key-value\uff09\u5bf9\u5e94\u7684\u6570\u636e\u7ed3\u6784 d = { 'Michael' : 95 , 'Bob' : 75 , 'Tracy' : 85 } person = dict ( name = '\u738b\u5927\u9524' , age = 55 , weight = 60 , home = '\u4e2d\u540c\u4ec1\u8def8\u53f7' ) print ( person ) # {'name': '\u738b\u5927\u9524', 'age': 55, 'weight': 60, 'home': '\u4e2d\u540c\u4ec1\u8def8\u53f7'} items1 = dict ( zip ( 'ABCDE' , '12345' )) print ( items1 ) # {'A': '1', 'B': '2', 'C': '3', 'D': '4', 'E': '5'} # \u7528\u5b57\u5178\u751f\u6210\u5f0f\u8bed\u6cd5\u521b\u5efa\u5b57\u5178 items3 = { x : x ** 3 for x in range ( 1 , 6 )} print ( items3 ) # {1: 1, 2: 8, 3: 27, 4: 64, 5: 125} for key in person : # for \u53ea\u4f1a\u83b7\u53d6 key ... \u65b9\u6cd5 \u8bf4\u660e dict.get(key, val) \u8fd4\u56de\u952e\u5bf9\u5e94\u7684\u503c\uff0c\u6ca1\u6709\u8fd4\u56de val\uff0c\u4e0d\u8bbe\u5b9a\u53c2\u6570\u8fd4\u56de None dict.keys() \u8fd4\u56de\u5b57\u5178\u6240\u6709\u7684\u952e dict.values() \u8fd4\u56de\u5b57\u5178\u6240\u6709\u7684\u503c dict.items() \u8fd4\u56de\u5b57\u5178\u6240\u6709\u7684\u952e\u503c\u5bf9\uff0clist dict.pop(key) \u5220\u9664\u952e\u5bf9\u5e94\u7684\u503c\u5e76\u8fd4\u56de\u503c dict.popitem() \u5220\u9664\u6700\u540e\u4e00\u4e2a\u952e\u503c\u5bf9 dict.setdefault() dict.update() \u66f4\u65b0 dict.get() # \u5b57\u5178\u4e2d\u7684\u503c\u53c8\u662f\u4e00\u4e2a\u5b57\u5178(\u5d4c\u5957\u7684\u5b57\u5178) students = { 1001 : { 'name' : '\u72c4\u4ec1\u6770' , 'sex' : True , 'age' : 22 , 'place' : '\u5c71\u897f\u5927\u540c' }, 1002 : { 'name' : '\u767d\u5143\u82b3' , 'sex' : True , 'age' : 23 , 'place' : '\u6cb3\u5317\u4fdd\u5b9a' }, 1003 : { 'name' : '\u6b66\u5219\u5929' , 'sex' : False , 'age' : 20 , 'place' : '\u56db\u5ddd\u5e7f\u5143' } } # \u4f7f\u7528get\u65b9\u6cd5\u901a\u8fc7\u952e\u83b7\u53d6\u5bf9\u5e94\u7684\u503c\uff0c\u5982\u679c\u53d6\u4e0d\u5230\u4e0d\u4f1a\u5f15\u53d1KeyError\u5f02\u5e38\u800c\u662f\u8fd4\u56deNone\u6216\u8bbe\u5b9a\u7684\u9ed8\u8ba4\u503c print ( students . get ( 1002 )) # {'name': '\u767d\u5143\u82b3', 'sex': True, 'age': 23, 'place': '\u6cb3\u5317\u4fdd\u5b9a'} print ( students . get ( 1005 )) # None print ( students . get ( 1005 , { 'name' : '\u65e0\u540d\u6c0f' })) # {'name': '\u65e0\u540d\u6c0f'}, \u7b2c\u4e8c\u4e2a\u53c2\u6570\u8868\u793a\u9ed8\u8ba4\u7684\u8fd4\u56de\u503c","title":"dict"},{"location":"Python/Python/#set","text":"\u96c6\u5408 # {} \u8868\u793a\u7a7a\u5b57\u5178, {1} \u624d\u8868\u793a\u96c6\u5408 set1 = { 1 , 2 , 3 , 3 , 3 , 2 } print ( set1 ) # {1, 2, 3} print ( len ( set1 )) # 3 set2 = set ( 'hello' ) print ( set2 ) # {'h', 'l', 'o', 'e'} set4 = { num for num in range ( 1 , 20 ) if num % 3 == 0 or num % 5 == 0 } # \u96c6\u5408\u63a8\u5bfc\u5f0f print ( set4 ) # {3, 5, 6, 9, 10, 12, 15, 18} \u65b9\u6cd5 \u8bf4\u660e & set.intersection() \u4ea4\u96c6 | set.union() \u5e76\u96c6 - set.difference() \u5dee\u96c6 ^ set.symmetric_difference() \u5bf9\u79f0\u5dee == \u5143\u7d20\u662f\u5426\u76f8\u540c < set.issubset() \u662f\u5426\u662f\u771f\u5b50\u96c6 > set.issuperset() \u662f\u5426\u662f\u8d85\u96c6 set.add() \u6dfb\u52a0\u5143\u7d20 set.update(set) \u66f4\u65b0\u96c6\u5408 set.discard() \u5220\u9664\u5143\u7d20\uff0c\u6ca1\u6709\u4e0d\u4f1a\u62a5\u9519 set.remove() \u5220\u9664\u5143\u7d20\uff0c\u6ca1\u6709\u4f1a\u62a5\u9519 set.clear() \u6e05\u7a7a\u96c6\u5408","title":"set"},{"location":"Python/Python/#pil","text":"\u8bfb\u5165\u7684\u662f \\(H\\times W\\times C\\) \uff0c\u4e14\u662f RGB Image ImageDraw\uff08\u753b bbox\uff0c\u7136\u540e plt.show()\uff09","title":"PIL"},{"location":"Python/Python/#argparse","text":"argparse\u57fa\u672c\u7528\u6cd5_\u9a91\u7740\u8717\u725b\u5411\u524d\u8dd1\u7684\u535a\u5ba2","title":"Argparse"},{"location":"Python/Python/#os","text":"\u65b9\u6cd5 \u8bf4\u660e os.listdir(path) \u8fd4\u56de\u6307\u5b9a\u7684\u6587\u4ef6\u5939\u5305\u542b\u7684\u6587\u4ef6\u6216\u6587\u4ef6\u5939\u7684\u540d\u5b57\u7684\u5217\u8868 s.platform() os.getcwd() \u8fd4\u56de\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55 os.makedirs() os.isdir() os.cpu_count() \u8fd4\u56de CPU \u6570\u91cf os.path __file__ \u8868\u793a\u5f53\u524d\u6587\u4ef6\u540d \u65b9\u6cd5 \u8bf4\u660e os.path.join(path1[, path2[, ...]]) \u628a\u76ee\u5f55\u548c\u6587\u4ef6\u540d\u5408\u6210\u4e00\u4e2a\u8def\u5f84 os.path.abspath(path) \u8fd4\u56de\u7edd\u5bf9\u8def\u5f84 os.path.dirname(path) \u8fd4\u56de\u6587\u4ef6\u8def\u5f84","title":"OS"},{"location":"Python/Python/#pathlib","text":"\u4f60\u5e94\u8be5\u4f7f\u7528pathlib\u66ff\u4ee3os.path - \u77e5\u4e4e (zhihu.com) \u6807\u51c6\u5e93\u4e2d\u7684\u6a21\u5757 from pathlib import Path pathlib \u4e0e os.path \u5bf9\u5e94\u65b9\u6cd5 os.path pathlib os.path.join(path1[, path2[, ...]]) Path(path1).joinpath([, path2[, ...]]) \u6216\u8005 Path(path1) / path2 / ... path.open(mode=\u2018r\u2019, bufferiong=-1, encoding=None, errors=None, newline=None) path.absolute() path.mkdir() path.exits() path.suffix","title":"pathlib"},{"location":"Python/Python/#random","text":"random.randint() random.sample() random.randrange()","title":"Random"},{"location":"Python/Python/#time","text":"time.sleep()","title":"Time"},{"location":"Python/Python/#re","text":"regular expression\uff0c\u652f\u6301\u6b63\u5219\u8868\u8fbe\u5f0f\u76f8\u5173\u64cd\u4f5c \u300a\u6b63\u5219\u8868\u8fbe\u5f0f30\u5206\u949f\u5165\u95e8\u6559\u7a0b\u300b \u51fd\u6570 \u8bf4\u660e re.compile(pattern, flags=0) \u7f16\u8bd1\u6b63\u5219\u8868\u8fbe\u5f0f\u8fd4\u56de\u6b63\u5219\u8868\u8fbe\u5f0f\u5bf9\u8c61 re.match(pattern, string, flags=0) \u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u5b57\u7b26\u4e32 \u6210\u529f\u8fd4\u56de\u5339\u914d\u5bf9\u8c61 \u5426\u5219\u8fd4\u56deNone re.search(pattern, string, flags=0) \u641c\u7d22\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u6a21\u5f0f \u6210\u529f\u8fd4\u56de\u5339\u914d\u5bf9\u8c61 \u5426\u5219\u8fd4\u56deNone re.split(pattern, string, maxsplit=0, flags=0) \u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6307\u5b9a\u7684\u6a21\u5f0f\u5206\u9694\u7b26\u62c6\u5206\u5b57\u7b26\u4e32 \u8fd4\u56de\u5217\u8868 re.sub(pattern, repl, string, count=0, flags=0) \u7528\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u539f\u5b57\u7b26\u4e32\u4e2d\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u6a21\u5f0f \u53ef\u4ee5\u7528count\u6307\u5b9a\u66ff\u6362\u7684\u6b21\u6570 re.fullmatch(pattern, string, flags=0) match\u51fd\u6570\u7684\u5b8c\u5168\u5339\u914d\uff08\u4ece\u5b57\u7b26\u4e32\u5f00\u5934\u5230\u7ed3\u5c3e\uff09\u7248\u672c re.findall(pattern, string, flags=0) \u67e5\u627e\u5b57\u7b26\u4e32\u6240\u6709\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u6a21\u5f0f \u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u5217\u8868 re.finditer(pattern, string, flags=0) \u67e5\u627e\u5b57\u7b26\u4e32\u6240\u6709\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u6a21\u5f0f \u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668 re.purge() \u6e05\u9664\u9690\u5f0f\u7f16\u8bd1\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u7f13\u5b58 re.I / re.IGNORECASE \u5ffd\u7565\u5927\u5c0f\u5199\u5339\u914d\u6807\u8bb0 re.M / re.MULTILINE \u591a\u884c\u5339\u914d\u6807\u8bb0 \u5e94\u7528\uff1a \"\"\" \u9a8c\u8bc1\u8f93\u5165\u7528\u6237\u540d\u548cQQ\u53f7\u662f\u5426\u6709\u6548\u5e76\u7ed9\u51fa\u5bf9\u5e94\u7684\u63d0\u793a\u4fe1\u606f \u8981\u6c42\uff1a\u7528\u6237\u540d\u5fc5\u987b\u7531\u5b57\u6bcd\u3001\u6570\u5b57\u6216\u4e0b\u5212\u7ebf\u6784\u6210\u4e14\u957f\u5ea6\u57286~20\u4e2a\u5b57\u7b26\u4e4b\u95f4\uff0cQQ\u53f7\u662f5~12\u7684\u6570\u5b57\u4e14\u9996\u4f4d\u4e0d\u80fd\u4e3a0 \"\"\" import re def main (): username = input ( '\u8bf7\u8f93\u5165\u7528\u6237\u540d: ' ) qq = input ( '\u8bf7\u8f93\u5165QQ\u53f7: ' ) # match\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\u6216\u6b63\u5219\u8868\u8fbe\u5f0f\u5bf9\u8c61 # \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8981\u8ddf\u6b63\u5219\u8868\u8fbe\u5f0f\u505a\u5339\u914d\u7684\u5b57\u7b26\u4e32\u5bf9\u8c61 m1 = re . match ( r '^[0-9a-zA-Z_]{6,20}$' , username ) if not m1 : print ( '\u8bf7\u8f93\u5165\u6709\u6548\u7684\u7528\u6237\u540d.' ) m2 = re . match ( r '^[1-9]\\d{4,11}$' , qq ) if not m2 : print ( '\u8bf7\u8f93\u5165\u6709\u6548\u7684QQ\u53f7.' ) if m1 and m2 : print ( '\u4f60\u8f93\u5165\u7684\u4fe1\u606f\u662f\u6709\u6548\u7684!' ) if __name__ == '__main__' : main ()","title":"Re"},{"location":"Python/Python/#json","text":"JSON\uff1aJavaScript Object Notation\uff0cJavaScript \u8bed\u8a00\u4e2d\u521b\u5efa\u5bf9\u8c61\u7684\u4e00\u79cd\u5b57\u9762\u91cf\u8bed\u6cd5\uff0c\u53ef\u4ee5\u5bf9\u5e94\u4e8e Python \u4e2d\u7684\u5b57\u5178 json.dump() \u5c06Python\u5bf9\u8c61\u6309\u7167JSON\u683c\u5f0f\u5e8f\u5217\u5316\u5230\u6587\u4ef6\u4e2d json . dump ( obj , fp , * , skipkeys = False , ensure_ascii = True , check_circular = True , allow_nan = True , cls = None , indent = None , separators = None , default = None , sort_keys = False , ** kw ) json.dumps() \u5c06Python\u5bf9\u8c61\u5904\u7406\u6210JSON\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c\u4e0d\u9700\u8981\u4f20\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5176\u4ed6\u7684\u53c2\u6570\u548c dump \u51fd\u6570\u7684\u4e00\u6837 json . dumps ( obj , * , skipkeys = False , ensure_ascii = True , check_circular = True , allow_nan = True , cls = None , indent = None , separators = None , default = None , sort_keys = False , ** kw ) json.load() \u5c06\u6587\u4ef6\u4e2d\u7684JSON\u6570\u636e\u53cd\u5e8f\u5217\u5316\u6210\u5bf9\u8c61 json . load ( fp , * , cls = None , object_hook = None , parse_float = None , parse_int = None , parse_constant = None , object_pairs_hook = None , ** kw ) json.loads() \u5c06\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u53cd\u5e8f\u5217\u5316\u6210Python\u5bf9\u8c61\uff0c loads \u4e5f\u4e0d\u9700\u8981\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5176\u4ed6\u53c2\u6570\u7684\u542b\u4e49\u548c load \u51fd\u6570\u7684\u4e00\u81f4 json . loads ( s , * , encoding = None , cls = None , object_hook = None , parse_float = None , parse_int = None , parse_constant = None , object_pairs_hook = None , ** kw ) \u5e94\u7528\uff1a \u8fd9\u4e2a\u4f8b\u5b50\u4f7f\u7528\u4e86 \u5929\u884c\u6570\u636e \u63d0\u4f9b\u7684\u56fd\u5185\u65b0\u95fb\u6570\u636e\u63a5\u53e3\uff0c\u5176\u4e2d\u7684APIKey\u9700\u8981\u81ea\u5df1\u5230\u8be5\u7f51\u7ad9\u7533\u8bf7 import requests import json def main (): resp = requests . get ( 'http://api.tianapi.com/guonei/?key=APIKey&num=10' ) data_model = json . loads ( resp . text ) for news in data_model [ 'newslist' ]: print ( news [ 'title' ]) if __name__ == '__main__' : main ()","title":"Json"},{"location":"Python/Python/#sys","text":"sys.path list\u7c7b\u578b\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b python \u5bfc\u5165\u6587\u4ef6\u6216\u8005\u6a21\u5757\u4f1a\u5148\u5728 sys.path \u91cc\u627e\u6a21\u5757\u7684\u8def\u5f84 sys . path . append ( parent_path ) # \u6dfb\u52a0\u8def\u5f84\uff0c\u9000\u51fa\u540e\u4f1a\u81ea\u52a8\u6d88\u5931","title":"sys"},{"location":"Python/Python/#collections","text":"\u63d0\u4f9bPython\u6807\u51c6\u5185\u5efa\u5bb9\u5668 dict \uff0c listist \uff0c list \uff0c set , \u548c tuple \u7684\u66ff\u4ee3\u9009\u62e9 \u5bb9\u5668\u540d \u6982\u8ff0 deque ChainMap Counter OrderedDict \u6709\u5e8f\u5b57\u5178\uff0cpython\u65e9\u671f\u7248\u672c\u7684 dict \u4e2d\u7684\u5143\u7d20\u662f\u65e0\u5e8f\u7684 defaultdict UserDict UserList UserString namedtuple defaultdict \u7528\u6765\u907f\u514d\u666e\u901a\u5b57\u5178\u7684 keyerror\uff0c\u5982\u679c\u8bbf\u95ee\u65f6 key \u4e0d\u5b58\u5728\u4f1a\u81ea\u52a8\u8c03\u7528\u53c2\u6570\u4e2d\u7684\u51fd\u6570\uff0cfun \u4e0d\u80fd\u6709\u53c2\u6570 from collections import defaultdict data = defaultdict ( fun ) # eg data = defaultdict ( set , dict1 , dict2 ) # \u7b2c\u4e00\u4e2a\u53c2\u6570\u5916\u7684\u53c2\u6570\u90fd\u4f5c\u4e3a\u5b57\u5178\u7684\u6784\u9020\u51fd\u6570","title":"collections"},{"location":"Python/Python/#csv","text":"python3\uff1acsv\u7684\u8bfb\u5199_katyusha1\u7684\u535a\u5ba2-CSDN\u535a\u5ba2 csv\u7684\u5199 import csv headers = [ 'class' , 'name' , 'sex' , 'height' , 'year' ] rows = [ [ 1 , 'xiaoming' , 'male' , 168 , 23 ], [ 1 , 'xiaohong' , 'female' , 162 , 22 ], [ 2 , 'xiaozhang' , 'female' , 163 , 21 ], [ 2 , 'xiaoli' , 'male' , 158 , 21 ] ] with open ( 'test.csv' , 'w' ) as f : f_csv = csv . writer ( f ) f_csv . writerow ( headers ) f_csv . writerows ( rows ) \u5199\u5165\u5b57\u5178\u6570\u636e import csv headers = [ 'class' , 'name' , 'sex' , 'height' , 'year' ] rows = [ { 'class' : 1 , 'name' : 'xiaoming' , 'sex' : 'male' , 'height' : 168 , 'year' : 23 }, { 'class' : 1 , 'name' : 'xiaohong' , 'sex' : 'female' , 'height' : 162 , 'year' : 22 }, { 'class' : 2 , 'name' : 'xiaozhang' , 'sex' : 'female' , 'height' : 163 , 'year' : 21 }, { 'class' : 2 , 'name' : 'xiaoli' , 'sex' : 'male' , 'height' : 158 , 'year' : 21 }, ] with open ( 'test2.csv' , 'w' , newline = '' ) as f : f_csv = csv . DictWriter ( f , headers ) f_csv . writeheader () f_csv . writerows ( rows ) csv\u7684\u8bfb import csv with open ( 'test.csv' ) as f : f_csv = csv . reader ( f ) for row in f_csv : print ( row )","title":"csv"},{"location":"Python/Python/#gc","text":"garbage collection import gc del var1 , var2 gc . collection ()","title":"gc"},{"location":"Python/Python/#tqdm","text":"\u597d\u770b\u7684\u8fdb\u5ea6\u6761\u5de5\u5177\uff0c tqdm documentation \u8be6\u7ec6\u4ecb\u7ecdPython\u8fdb\u5ea6\u6761tqdm\u7684\u4f7f\u7528_python_\u811a\u672c\u4e4b\u5bb6 (jb51.net) \u975e\u624b\u52a8\u8bbe\u7f6e\u8fdb\u5ea6\uff1a from tqdm import tqdm import time pbar = tqdm ( range ( 100 )) for i in pbar : time . sleep ( 0.1 ) pbar . desc = str \u624b\u52a8\u8bbe\u7f6e\u8fdb\u5ea6\uff1a from tqdm import tqdm pbar = tqdm ( total , ncols , desc , unit ) args: total ( int or float )\uff1a\u81ea\u5b9a\u4e49\u8fed\u4ee3\u6b21\u6570 ncols ( int )\uff1a\u8f93\u51fa\u4fe1\u606f\u7684\u5bbd\u5ea6\uff0c If 0 , will not print any bar (only stats) unit ( str )\uff1aThe iteration unit [default: 'it'] \uff1f\uff1f\uff1f\uff1f\uff1f desc ( str )\uff1aPrefix for the progressbar \u65b9\u6cd5\uff1a pbar . set_description ( str ) pbar . update ( n = 1 ) # \u66f4\u65b0\u5df2\u8fed\u4ee3\u6b21\u6570 pbar . close () # \u7528\u5b8c\u540e\u5173\u95ed\u5360\u7528\u8d44\u6e90 pabr . set_postfix ( ** kwargs ) # \u8bbe\u7f6e\u53f3\u4fa7\u4fe1\u606f","title":"tqdm"},{"location":"Python/Python/#lxml","text":"from lxml import etree etree . fromstring ( str1 )","title":"lxml"},{"location":"Python/Python/#_4","text":"","title":"\u5176\u4ed6"},{"location":"Python/Python/#_5","text":"python \u51fd\u6570\u4f20\u9012\u53c2\u6570\u7684\u591a\u79cd\u65b9\u6cd5 - \u5fcd\u51ac\u7684\u4f60 - \u535a\u5ba2\u56ed (cnblogs.com) \u5173\u4e8ePython\u4e2d\u5305\u88f9\u4f20\u53c2\u548c\u89e3\u5305\u88f9\u7684\u7406\u89e3 - HeZhengfa - \u535a\u5ba2\u56ed (cnblogs.com) \u5305\u88f9\u548c\u89e3\u5305\u88f9 # --------\u5305\u88f9\u4f20\u53c2--------- # \u5305\u88f9\u4f4d\u7f6e\u4f20\u53c2 def package_position ( * all_arguments ): print ( type ( all_arguments )) # tuple print ( all_arguments ) package_position ( 1 , 4 , 6 ) package_position ( 5 , 6 , 7 , 1 , 2 , 3 ) # \u5305\u88f9\u5173\u952e\u5b57\u4f20\u53c2 def package_keyword ( ** all_arguments ): print ( type ( all_arguments )) # dict print ( all_arguments ) package_keyword ( a = 1 , b = 9 ) package_keyword ( m = 2 , n = 1 , c = 11 ) # --------\u89e3\u5305\u88f9\u4f20\u53c2--------- def unpackage ( a , b , c ): print ( a , b , c ) args = ( 1 , 3 , 4 ) unpackage ( * args ) args = { \"a\" : 1 , \"b\" : 2 , \"c\" : 3 } unpackage ( ** args )","title":"\u51fd\u6570\u53c2\u6570\u7684\u4f20\u9012\u65b9\u5f0f"},{"location":"Python/Python/#ipynb","text":"ipynb -> md jupyter nbconver \u6587\u4ef6\u540d --to markdown","title":"ipynb \u683c\u5f0f\u8f6c\u6362"},{"location":"Python/Python/#_6","text":"Python \u4e2d\u7684\u53d8\u91cf\u4e3a\u52a8\u6001\u7c7b\u578b \u7c7b\u578b\u6ce8\u89e3\u53ef\u4ee5\u4e3a\u51fd\u6570\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u5b9a\u4e49\u7c7b\u578b\uff0c\u5b9e\u73b0\u7c7b\u4f3c\u9759\u6001\u7c7b\u578b\u7684\u6548\u679c\u65b9\u4fbf debug def fun ( a : type , b : type ) -> type : pass","title":"\u7c7b\u578b\u6ce8\u89e3"},{"location":"Python/Python/#pip","text":"pip install . \uff1a\u5b89\u88c5\u540e\u7684\u6a21\u5757freeze\u5728pip/conda\u4f9d\u8d56\u4e0b\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u518d\u4fee\u6539\u672c\u5730\u7684\u539f\u9879\u76ee\u6587\u4ef6\uff0c\u4e0d\u4f1a\u5bfc\u81f4\u5bf9\u5e94\u6a21\u5757\u53d1\u751f\u53d8\u5316 pip install -e . \uff1a-e \u7406\u89e3\u4e3a editable\uff0c\u4fee\u6539\u672c\u5730\u6587\u4ef6\uff0c\u8c03\u7528\u7684\u6a21\u5757\u4ee5\u6700\u65b0\u6587\u4ef6\u4e3a\u51c6","title":"pip"},{"location":"Python/Sklearn/","text":"Sklearn \u00b6 \u83dc\u83dc\u7684\u673a\u5668\u5b66\u4e60 sklearn\u3010\u516885\u96c6\u3011Python\u8fdb\u9636 bilibili sklearn.linear_model \u00b6 Atrbutes \u548c Mehods \u5e76\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u7c7b\u90fd\u6709 Methods\uff1a - decision_function( X )\uff1a\u8ba1\u7b97\u51b3\u7b56\u5206\u6570\uff0c\u6bd4\u5982\u53ef\u4ee5\u81ea\u5df1\u51b3\u5b9a threshold \u00b6 Linear classifiers \u7c7b \u8bf4\u660e linear_model.LogisticRegression ([penalty, ...]) Logistic Regression (aka logit, MaxEnt) classifier. linear_model.LogisticRegressionCV (*[, Cs, ...]) Logistic Regression CV (aka logit, MaxEnt) classifier. linear_model.PassiveAggressiveClassifier (*) Passive Aggressive Classifier. linear_model.Perceptron (*[, penalty, alpha, ...]) Linear perceptron classifier. linear_model.RidgeClassifier ([alpha, ...]) Classifier using Ridge regression. linear_model.RidgeClassifierCV ([alphas, ...]) Ridge classifier with built-in cross-validation. linear_model.SGDClassifier ([loss, penalty, ...]) Linear classifiers (SVM, logistic regression, etc.) with SGD training. linear_model.SGDOneClassSVM ([nu, ...]) Solves linear One-Class SVM using Stochastic Gradient Descent. Classical linear regressors \u7c7b \u8bf4\u660e linear_model.LinearRegression (*[, ...]) Ordinary least squares Linear Regression. linear_model.Ridge ([alpha, fit_intercept, ...]) Linear least squares with l2 regularization. linear_model.RidgeCV ([alphas, ...]) Ridge regression with built-in cross-validation. linear_model.SGDRegressor ([loss, penalty, ...]) Linear model fitted by minimizing a regularized empirical loss with SGD. sklearn.tree \u00b6 \u51b3\u7b56\u6811\u4e0d\u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u65e0\u91cf\u7eb2\u5316\u5904\u7406 from sklearn import tree # \u5bfc\u5165\u9700\u8981\u7684\u6a21\u5757 import graphviz clf = tree . DecisionTreeClassifier () # \u5b9e\u4f8b\u5316 clf = clf . fit ( X_train , y_train ) # \u7528\u8bad\u7ec3\u96c6\u6570\u636e\u8bad\u7ec3\u6a21\u578b result = clf . score ( X_test , y_test ) # \u5bfc\u5165\u6d4b\u8bd5\u96c6,\u4ece\u63a5\u53e3\u4e2d\u8c03\u7528\u9700\u8981\u7684\u4fe1\u606f\uff0c\u8fd4\u56de\u6d4b\u8bd5\u96c6\u7684\u51c6\u786e\u5ea6 clf . apply ( Xtest ) # apply\u8fd4\u56de\u6bcf\u4e2a\u6d4b\u8bd5\u6837\u672c\u6240\u5728\u7684\u53f6\u5b50\u8282\u70b9\u7684\u7d22\u5f15 clf . predict ( Xtest ) # predict\u8fd4\u56de\u6bcf\u4e2a\u6d4b\u8bd5\u6837\u672c\u7684\u5206\u7c7b/\u56de\u5f52\u7ed3\u679c clf . predict_proba ( Xtest ) # \u5bf9\u5e94\u7279\u5f81\u7684\u91cd\u8981\u6027 clf . feature_importances_ # \u753b\u51fa\u51b3\u7b56\u6811 dot_data = tree . export_graphviz ( clf , feature_name # \u987a\u5e8f\u5bf9\u5e94 data , class_names # \u987a\u5e8f\u5bf9\u5e94 target , filled = True # \u586b\u5145\u989c\u8272 , rounded = True # \u5706\u89d2 ) graph = graphviz . Source ( dot_data ) graph # \u4fdd\u5b58\u51b3\u7b56\u6811\u4e3a\u56fe\u7247 with open ( \"tree.dot\" , 'w' ) as f : f = tree . tree . export_graphviz ( clf ) # \u7136\u540e\u5728 cmd \u4e2d\u8fd0\u884c dot -Tpng tree.dot -o tree.png sklearn \u4f7f\u7528 CART \u7b97\u6cd5 \uff08Classifiation and Regression Tree\uff0c\u4e5f\u79f0\u589e\u957f\u6811\uff09\u8bad\u7ec3\u51b3\u7b56\u6811\uff0c\u5206\u7c7b\u95ee\u9898\u65f6\u4f7f\u7528\u6700\u5c0f\u5316\u4e0d\u7eaf\u5ea6\u6765\u62c6\u5206\u8bad\u7ec3\u96c6\uff0c\u56de\u5f52\u95ee\u9898\u65f6\u6700\u5c0f\u5316 mse \u526a\u679d\u53c2\u6570\uff1a max_depth\uff1a\u6700\u5927\u6df1\u5ea6 min_samples_leaf\uff1a\u7ed3\u70b9\u6700\u5c11\u8bad\u7ec3\u6837\u672c\u6570 min_samples_split\uff1a\u7ed3\u70b9\u5141\u8bb8\u5206\u652f\u7684\u6700\u5c0f\u8bad\u7ec3\u6837\u672c\u91cf min_weight_fraction_leaf\uff1a\u4e0e min_samples_leaf \u4e00\u6837\uff0c\u4f46\u8868\u73b0\u4e3a\u52a0\u6743\u5b9e\u4f8b\u603b\u6570\u7684\u5360\u6bd4 max_leaf_nodes\uff1a\u6700\u5927\u53f6\u7ed3\u70b9\u6570 max_features\uff1a\u5206\u88c2\u6bcf\u4e2a\u7ed3\u70b9\u8bc4\u4f30\u7684\u6700\u5927\u7279\u5f81\u6570\u91cf min_impurity_devrease\uff1a DecisionTreeClassifier \u5206\u7c7b\u6811 tree . DecisionTreeClassifier ( criterion = 'gini' , random_state = None , splitter , max_depth = None , min_samples_leaf = None , min_samples_split = None , max_features , min_impurity_decrease ) criterion\uff1a\u51b3\u5b9a\u4e0d\u7eaf\u5ea6\u7684\u8ba1\u7b97\u65b9\u6cd5\uff0centropy \u6216\u8005 gini random_state\uff1a\u968f\u673a\u6a21\u5f0f\u53c2\u6570\uff0c\u6307\u5b9a\u540e\u751f\u6210\u7684\u6811\u4f1a\u662f\u56fa\u5b9a\u7684 splitter\uff1a\u4e5f\u662f\u63a7\u5236\u51b3\u7b56\u6811\u7684\u968f\u5373\u9009\u9879\uff0cbest \u6216\u8005 random max_depth\uff1a\u526a\u679d\u53c2\u6570\uff0c\u6700\u5927\u6df1\u5ea6 min_samples_leaf\uff1a\u526a\u679d\u53c2\u6570\uff0c\u5b50\u7ed3\u70b9\u6700\u5c11\u8bad\u7ec3\u6837\u672c\u6570 min_samples_split\uff1a\u526a\u679d\u53c2\u6570\uff0c\u7ed3\u70b9\u5141\u8bb8\u5206\u652f\u7684\u6700\u5c0f\u8bad\u7ec3\u6837\u672c\u91cf max_features\uff1a\u526a\u679d\u53c2\u6570 min_impurity_devrease\uff1a\u526a\u679d\u53c2\u6570 [ * zip ( featrue_names , clf . feature_importances_ )] # \u67e5\u770b\u5bf9\u5e94\u7279\u5f81\u7684\u91cd\u8981\u6027 DecisionTreeRegressor \u56de\u5f52\u6811 export_graphviz \u53ef\u89c6\u5316 ExtraTreeClassifier ExtraTreeRegression sklearn.svm \u00b6 API Reference \u2014 scikit-learn 1.0.2 documentation \u5bf9\u4e00\u4e2a\u4e8c\u5143\u5206\u7c7b\u5668\uff0c\u5982\u679c\u4f20\u5165\u7684\u662f\u591a\u5143\u5206\u7c7b\u7684\u4efb\u52a1\uff0csklearn \u4f1a\u81ea\u52a8\u8bad\u7ec3\u591a\u4e2a\u4e8c\u5143\u5206\u7c7b\u5668\u6765\u5b9e\u73b0\u3002\u53ef\u4ee5\u4f7f\u7528 OneVsOneClassifier \u6216\u8005 OneVsRestClassifier \u6765\u5f3a\u5236\u4f7f\u7528\u4e00\u5bf9\u4e00\u6216\u8005\u4e00\u5bf9\u591a\u7b56\u7565 sklearn.ensemble \u00b6 voting \u00b6 \u6295\u7968\u5206\u7c7b\u5668\u6bcf\u4e2a\u9884\u6d4b\u5668\u4f7f\u7528\u4e0d\u540c\u7684\u7b97\u6cd5 \u786c\u6295\u7968\u548c\u8f6f\u6295\u7968\uff1a\u786c\u6295\u7968\u9009\u62e9\u6295\u7968\u6570\u6700\u591a\u7684\u7c7b\uff0c\u8f6f\u6295\u7968\u5e73\u5747\u6bcf\u4e2a\u5206\u7c7b\u5668\u7684\u7c7b\u522b\u540e\u7ed9\u51fa\u9884\u6d4b\uff0c\u901a\u5e38\u6548\u679c\u66f4\u597d\uff0c\u56e0\u4e3a\u4f1a\u7ed9\u4e88\u9ad8\u5ea6\u81ea\u4fe1\u7684\u6295\u7968\u66f4\u9ad8\u7684\u6743\u91cd\uff08voting=\"hard\" && voting=\"soft\"\uff09 bagging \u548c pasting \u00b6 \u6bcf\u4e2a\u9884\u6d4b\u5668\u4f7f\u7528\u76f8\u540c\u7684\u7b97\u6cd5\uff1b\u53ef\u4ee5\u901a\u8fc7\u4e0d\u540c\u7684 CPU \u5185\u6838\u751a\u81f3\u4e0d\u540c\u7684\u670d\u52a1\u5668\u5e76\u884c\u7684\u8bad\u7ec3\u548c\u9884\u6d4b\uff0c\u975e\u5e38\u6613\u4e8e\u6269\u5c55 bagging\uff1a\u81ea\u4e3e\u6c47\u805a\u6cd5\uff0c\u91c7\u6837\u65f6\u6709\u653e\u56de\uff0cpasting\uff1a\u91c7\u6837\u65f6\u65e0\u653e\u56de\uff1b\u6362\u53e5\u8bdd\u8bf4\uff0c\u4e24\u8005\u90fd\u5141\u8bb8\u4e00\u4e2a\u6837\u672c\u88ab\u591a\u6b21\u91c7\u6837\uff0c\u4f46\u53ea\u6709 bagging \u5141\u8bb8\u4e00\u4e2a\u6837\u672c\u88ab\u4e00\u4e2a\u9884\u6d4b\u5668\u591a\u6b21\u91c7\u6837 bagging \u56e0\u4e3a\u81ea\u4e3e\u6cd5\u7ed9\u8bad\u7ec3\u5b50\u96c6\u5f15\u5165\u4e86\u66f4\u9ad8\u7684\u591a\u6837\u6027\u6240\u4ee5\u504f\u5dee\u6bd4 pasting \u7565\u9ad8\uff0c\u4f46\u4e5f\u610f\u5473\u7740\u9884\u6d4b\u5668\u4e4b\u95f4\u7684\u5173\u8054\u5ea6\u66f4\u4f4e\uff0c\u6240\u4ee5\u96c6\u6210\u7684\u65b9\u5dee\u5c0f \u5305\u5916\u8bc4\u4f30\uff1a clf = BaggingClassifier ( DecisionTreeClassifier (), n_estimators = 500 , bootstrap = True , obb_score = True ) clf . fit ( x_train , y_train ) print ( clf . oob_score_ ) # \u5305\u5916\u8bc4\u4f30\u5206\u6570 print ( clf . oob_decision_function_ ) # \u5305\u5916\u51b3\u7b56\u51fd\u6570\uff0c\u8fd4\u56de\u6982\u7387 \u968f\u5373\u8865\u4e01\u548c\u968f\u673a\u5b50\u7a7a\u95f4 \u00b6 \u968f\u673a\u8865\u4e01\uff1a\u5bf9\u8bad\u7ec3\u6837\u672c\u548c\u7279\u5f81\u90fd\u8fdb\u884c\u62bd\u6837 \u968f\u673a\u5b50\u7a7a\u95f4\uff1a\u4fdd\u7559\u6240\u6709\u8bad\u7ec3\u5b9e\u4f8b\uff08bootstrap=False, max_samples=1.0\uff09\uff0c\u4f46\u5bf9\u7279\u5f81\u8fdb\u884c\u62bd\u6837\uff08bootstrap_features=True, max_features<1.0\uff09 \u968f\u673a\u68ee\u6797 \u00b6 \u968f\u673a\u68ee\u6797\u662f\u51b3\u7b56\u6811\u7684\u96c6\u6210 \u6781\u7aef\u968f\u673a\u6811\uff08ExtraTrees\uff09\uff1a \u968f\u673a\u68ee\u6797\u5728\u5355\u68f5\u6811\u6bcf\u4e2a\u7ed3\u70b9\u5206\u88c2\u65f6\u5bf9\u6bcf\u4e2a\u7279\u5f81\u4f7f\u7528\u968f\u673a\u9608\u503c\uff0c\u800c\u4e0d\u662f\u641c\u7d22\u5f97\u51fa\u6700\u4f73\u9608\u503c \u4ee5\u66f4\u9ad8\u7684\u504f\u5dee\u6362\u53d6\u4e86\u66f4\u4f4e\u7684\u65b9\u5dee\uff0c\u4e14\u8bad\u7ec3\u8d77\u6765\u5feb\u5f97\u591a\uff08\u56e0\u4e3a\u5bfb\u627e\u6700\u4f73\u9608\u503c\u662f\u51b3\u7b56\u6811\u751f\u957f\u4e2d\u6700\u8017\u65f6\u7684\u4efb\u52a1\uff09 \u7279\u5f81\u91cd\u8981\u6027\uff1a \u968f\u673a\u68ee\u6797\u53ef\u4ee5\u8ba1\u7b97\u7279\u5f81\u91cd\u8981\u6027\uff1b\u901a\u8fc7\u67e5\u770b\u6240\u6709\u6811\u4e0a\u4f7f\u7528\u8be5\u7279\u5f81\u7684\u6811\u7ed3\u70b9 \u52a0\u6743\u5e73\u5747 \u51cf\u5c11\u4e0d\u7eaf\u5ea6\u7684\u7a0b\u5ea6\u6765\u8861\u91cf\u91cd\u8981\u6027\uff0c\u6743\u91cd\u4e3a\u5176\u5173\u8054\u7684\u8bad\u7ec3\u6837\u672c\u7684\u6570\u91cf clf . feature_importances_ boosting \u00b6 \u63d0\u5347\u6cd5\uff1b\u7f3a\u70b9\u662f\u65e0\u6cd5\u5e76\u884c\uff0c\u6240\u4ee5\u5728\u6269\u5c55\u65b9\u9762\u4e0d\u5982 bagging \u548c pasting\uff1b AdaBoost\uff1a\u5bf9\u524d\u9762\u7684\u5206\u7c7b\u5668\u5206\u7c7b\u9519\u7684\u6837\u672c\u52a0\u5927\u6743\u91cd\u518d\u8bad\u7ec3\u4e00\u4e2a\u65b0\u7684\u5206\u7c7b\u5668 \u68af\u5ea6\u63d0\u5347\uff1a \u8ba9\u65b0\u7684\u9884\u6d4b\u5668\u9488\u5bf9\u524d\u4e00\u4e2a\u9884\u6d4b\u5668\u7684\u6b8b\u5dee\u8fdb\u884c\u62df\u5408\uff0c\u7136\u540e\u7ed3\u679c\u76f8\u52a0\uff1b\u6bd4\u5982 GBRT\uff08\u68af\u5ea6\u63d0\u5347\u56de\u5f52\u6811\uff09 \u8d85\u53c2\u6570 learning_rate \u5bf9\u6bcf\u68f5\u6811\u7684\u8d21\u732e\u8fdb\u884c\u7f29\u653e\uff0c\u5982\u679c\u662f\u4f4e\u503c\u5219\u9700\u8981\u66f4\u591a\u7684\u6811\u6765\u62df\u5408\uff0c\u4f46\u9884\u6d4b\u7684\u6cdb\u5316\u6548\u679c\u901a\u5e38\u66f4\u597d \u8981\u627e\u5230\u6811\u7684\u6700\u4f73\u6570\u91cf\u53ef\u4ee5\u4f7f\u7528\u63d0\u524d\u505c\u6b62\u6cd5 (staged_predict() \u6216\u8005 warm_start()) # staged_predict() import numpy as np from sklearn.model_selection import train_test_split from sklearn.metrics import mean_squared_error X_train , X_val , y_train , y_val = train_test_split ( X , y ) gbrt = GradientBoostingRegressor ( max_depth = 2 , n_estimators = 120 ) gbrt . fit ( X_train , y_train ) errors = [ mean_squared_error ( y_val , y_pred ) for y_pred in gbrt . staged_predict ( X_val )] bst_n_estimators = np . argmin ( errors ) + 1 # \u91cd\u65b0\u8bad\u7ec3\u4e00\u4e2a gbrt_best = GradientBoostingRegressor ( max_depth = 2 , n_estimators = bst_n_estimators ) gbrt_best . fit ( X_train , y_train ) # warm_start() gbrt = GradientBoostingRegressor ( max_depth = 2 , warm_start = True ) min_val_error = float ( \"inf\" ) error_going_up = 0 for n_estimators in range ( 1 , 120 ): gbrt . n_estimators = n_estimators gbrt . fit ( X_train , y_train ) y_pred = gbrt . predict ( X_val ) val_error = mean_squared_error ( y_val , y_pred ) if val_error < min_val_error : min_val_error = val_error error_going_up = 0 else : error_going_up += 1 if error_going_up == 5 : # \u9a8c\u8bc1\u96c6\u8bef\u5dee\u8fde\u7eed5\u6b64\u672a\u6539\u5584 break # early stopping XGBoost \uff08Extreme Gradient Boosting\uff09\u63d0\u4f9b\u4e86\u68af\u5ea6\u63d0\u5347\u7684\u4f18\u5316\u5b9e\u73b0\uff0c\u4e14 API \u548c sklearn \u76f8\u4f3c stacking \u00b6 \u5806\u53e0\u6cd5 \u5c06\u8bad\u7ec3\u96c6\u5206\u6210 n \u90e8\u5206\uff0c\u7b2c 1 \u90e8\u5206\u8bad\u7ec3\u7b2c\u4e00\u5c42\u7684 m \u4e2a\u9884\u6d4b\u5668\uff0c\u7136\u540e\u628a\u7b2c 2 \u90e8\u5206\u7684\u6837\u672c\u8f93\u5165\u7b2c\u4e00\u5c42\u7684\u9884\u6d4b\u5668\u5f97\u5230\u65b0\u7684\u6837\u672c\u6765\u8bad\u7ec3\u7b2c\u4e8c\u5c42\u7684\u9884\u6d4b\u5668 ........ \u6700\u4e0a\u5c42\u7528\u4e00\u4e2a\u9884\u6d4b\u5668\u6765\u5f97\u5230\u6700\u7ec8\u7684\u7ed3\u679c sklearn \u4e0d\u652f\u6301\u5806\u53e0\uff0c\u9700\u8981\u81ea\u5df1\u624b\u52a8\u5b9e\u73b0 \u6216\u8005 \u4f7f\u7528\u5f00\u6e90\u7684\u65b9\u6848\uff0c\u5982 DESlib RandomForestClassifier class sklearn . ensemble . RandomForestClassifier ( n_estimators = '10' , criterion = 'gini' , max_depth = None , min_samples_split = 2 , min_samples_leaf = 1 , min_weight_fraction_leaf = 0.0 , max_features = 'auto' , max_leaf_nodes = None , min_impurity_decrease = 0.0 , min_impurity_split = None , bootstrap = True , oob_score = False , n_jobs = None , random_state = None , verbose = 0 , warm_start = False , class_weight = None ) n_estimators\uff1a\u6811\u7684\u4e2a\u6570 \u5c5e\u6027 \u8bf4\u660e estimators_ \u67e5\u770b\u68ee\u6797\u4e2d\u6240\u6709\u6811\u7684\u5217\u8868 oob_score_ out of bag score\uff0c\u888b\u5916\u5f97\u5206 feature_importances_ \u7279\u5f81\u91cd\u8981\u6027 \u63a5\u53e3\uff1aapply\uff0cfit\uff0cpredict\uff0cscore\uff0cpredict_proba(\u8fd4\u56de\u6bcf\u4e2a\u6d4b\u8bd5\u6837\u672c\u5bf9\u5e94\u7684\u88ab\u5206\u5230\u6bcf\u4e00\u7c7b\u6807\u7b7e\u7684\u6982\u7387) sklearn.metrics \u00b6 Classification metrics \u00b6 See the Classification metrics section of the user guide for further details. \u65b9\u6cd5 \u8bf4\u660e metrics.accuracy_score (y_true, y_pred, *[, ...]) Accuracy classification score. metrics.auc (x, y) Compute Area Under the Curve (AUC) using the trapezoidal rule. metrics.average_precision_score (y_true, ...) Compute average precision (AP) from prediction scores. metrics.balanced_accuracy_score (y_true, ...) Compute the balanced accuracy. metrics.brier_score_loss (y_true, y_prob, *) Compute the Brier score loss. metrics.classification_report (y_true, y_pred, *) Build a text report showing the main classification metrics. metrics.cohen_kappa_score (y1, y2, *[, ...]) Cohen's kappa: a statistic that measures inter-annotator agreement. metrics.confusion_matrix (y_true, y_pred, *) \u6df7\u6dc6\u77e9\u9635\u3002Compute confusion matrix to evaluate the accuracy of a classification. metrics.dcg_score (y_true, y_score, *[, k, ...]) Compute Discounted Cumulative Gain. metrics.det_curve (y_true, y_score[, ...]) Compute error rates for different probability thresholds. metrics.f1_score (y_true, y_pred, *[, ...]) F1\u5ea6\u91cf\u3002Compute the F1 score, also known as balanced F-score or F-measure. metrics.fbeta_score (y_true, y_pred, *, beta) Compute the F-beta score. metrics.hamming_loss (y_true, y_pred, *[, ...]) Compute the average Hamming loss. metrics.hinge_loss (y_true, pred_decision, *) Average hinge loss (non-regularized). metrics.jaccard_score (y_true, y_pred, *[, ...]) Jaccard similarity coefficient score. metrics.log_loss (y_true, y_pred, *[, eps, ...]) Log loss, aka logistic loss or cross-entropy loss. metrics.matthews_corrcoef (y_true, y_pred, *) Compute the Matthews correlation coefficient (MCC). metrics.multilabel_confusion_matrix (y_true, ...) Compute a confusion matrix for each class or sample. metrics.ndcg_score (y_true, y_score, *[, k, ...]) Compute Normalized Discounted Cumulative Gain. metrics.precision_recall_curve (y_true, ...) \u7cbe\u5ea6\u53ec\u56de\u7387\u66f2\u7ebf\u3002Compute precision-recall pairs for different probability thresholds. metrics.precision_recall_fscore_support (...) Compute precision, recall, F-measure and support for each class. metrics.precision_score (y_true, y_pred, *[, ...]) \u7cbe\u5ea6\u3002Compute the precision. metrics.recall_score (y_true, y_pred, *[, ...]) \u53ec\u56de\u7387\u3002Compute the recall. metrics.roc_auc_score (y_true, y_score, *[, ...]) \u8ba1\u7b97 AUC\u3002Compute Area Under the Receiver Operating Characteristic Curve (ROC AUC) from prediction scores. metrics.roc_curve (y_true, y_score, *[, ...]) ROC\u66f2\u7ebf\u3002Compute Receiver operating characteristic (ROC). metrics.top_k_accuracy_score (y_true, y_score, *) Top-k Accuracy classification score. metrics.zero_one_loss (y_true, y_pred, *[, ...]) Zero-one classification loss. mean_squared_error sklearn.model_selection \u00b6 Splitter Classes \u00b6 \u7c7b \u8bf4\u660e model_selection.GroupKFold ([n_splits]) K-fold iterator variant with non-overlapping groups. model_selection.GroupShuffleSplit ([...]) Shuffle-Group(s)-Out cross-validation iterator model_selection.KFold ([n_splits, shuffle, ...]) K-Folds cross-validator model_selection.LeaveOneGroupOut () Leave One Group Out cross-validator model_selection.LeavePGroupsOut (n_groups) Leave P Group(s) Out cross-validator model_selection.LeaveOneOut () Leave-One-Out cross-validator model_selection.LeavePOut (p) Leave-P-Out cross-validator model_selection.PredefinedSplit (test_fold) Predefined split cross-validator model_selection.RepeatedKFold (*[, n_splits, ...]) Repeated K-Fold cross validator. model_selection.RepeatedStratifiedKFold (*[, ...]) Repeated Stratified K-Fold cross validator. model_selection.ShuffleSplit ([n_splits, ...]) Random permutation cross-validator model_selection.StratifiedKFold ([n_splits, ...]) Stratified K-Folds cross-validator. model_selection.StratifiedShuffleSplit ([...]) Stratified ShuffleSplit cross-validator model_selection.StratifiedGroupKFold ([...]) Stratified K-Folds iterator variant with non-overlapping groups. model_selection.TimeSeriesSplit ([n_splits, ...]) Time Series cross-validator Splitter Functions \u00b6 \u65b9\u6cd5 \u8bf4\u660e model_selection.check_cv ([cv, y, classifier]) Input checker utility for building a cross-validator model_selection.train_test_split (*arrays[, ...]) Split arrays or matrices into random train and test subsets. Hyper-parameter optimizers \u00b6 \u7c7b \u8bf4\u660e model_selection.GridSearchCV (estimator, ...) Exhaustive search over specified parameter values for an estimator. model_selection.HalvingGridSearchCV (...[, ...]) Search over specified parameter values with successive halving. model_selection.ParameterGrid (param_grid) Grid of parameters with a discrete number of values for each. model_selection.ParameterSampler (...[, ...]) Generator on parameters sampled from given distributions. model_selection.RandomizedSearchCV (...[, ...]) Randomized search on hyper parameters. model_selection.HalvingRandomSearchCV (...[, ...]) Randomized search on hyper parameters. Model validation \u00b6 \u65b9\u6cd5 \u8bf4\u660e model_selection.cross_validate (estimator, X) Evaluate metric(s) by cross-validation and also record fit/score times. model_selection.cross_val_predict (estimator, X) Generate cross-validated estimates for each input data point. model_selection.cross_val_score (estimator, X) Evaluate a score by cross-validation. model_selection.learning_curve (estimator, X, ...) Learning curve. model_selection.permutation_test_score (...) Evaluate the significance of a cross-validated score with permutations model_selection.validation_curve (estimator, ...) Validation curve. train_test_split() \u5206\u6570\u636e\u96c6\u548c\u6d4b\u8bd5\u96c6 from sklearn.model_selection import train_test_split Xtrain , Xtest , Ytrain , Ytest = train_test_split ( * arrays , test_size = None , test_size = None , random_state = None , shuffle = True ) args: test_size\uff1aIf float\uff0c\u8868\u793a\u53d6\u591a\u5c11\u6bd4\u4f8b\u5f53\u6d4b\u8bd5\u96c6\uff1bIf int\uff0c\u8868\u793a\u53d6\u591a\u5c11\u4e2a\u5f53\u6d4b\u8bd5\u96c6\uff1bIf None\uff1a\u53d6 1-train_size\uff0c\u5982\u679c train_size \u4e5f\u662f None \u53d6 0.25 train_size\uff1a\u540c test_size\uff0cIf None\uff0c\u53d6 1-test_size random_state\uff1a\u968f\u673a\u6570\u79cd\u5b50 returns: list, length=2 * len(arrays) cross_val_score() k\u6298\u4ea4\u53c9\u9a8c\u8bc1\uff0csklearn \u7684\u4ea4\u53c9\u9a8c\u8bc1\u66f4\u503e\u5411\u4e8e\u4f7f\u7528\u6548\u7528\u51fd\u6570\uff08\u8d8a\u5927\u8d8a\u597d\uff09 from sklearn.model_selection import cross_val_score rfc_s = cross_val_score ( estimator , X , y = None , cv = None ) args\uff1a estimator\uff1a\u7b97\u6cd5\u6a21\u578b X\uff1a\u6570\u636e y\uff1a\u6807\u7b7e cv\uff1a\u6298\u6570 Returns\uff1a scores \uff1a ndarray of float of shape=(len(list(cv)),) StratifiedShuffleSplit() \u63d0\u4f9b\u5206\u5c42\u62bd\u6837\u529f\u80fd\uff0c\u786e\u4fdd\u6bcf\u4e2a\u6807\u7b7e\u5bf9\u5e94\u7684\u6837\u672c\u7684\u6bd4\u4f8b class StratifiedShuffleSplit ( n_splits = 10 , * , test_size = None , train_size = None , random_state = None ) StratifiedShuffleSplit ( n_splits = 5 , random_state = 0 , ... ) >>> for train_index , test_index in sss . split ( X , y ): ... print ( \"TRAIN:\" , train_index , \"TEST:\" , test_index ) ... X_train , X_test = X [ train_index ], X [ test_index ] ... y_train , y_test = y [ train_index ], y [ test_index ] TRAIN : [ 5 2 3 ] TEST : [ 4 1 0 ] TRAIN : [ 5 1 4 ] TEST : [ 0 2 3 ] TRAIN : [ 5 0 2 ] TEST : [ 4 3 1 ] TRAIN : [ 4 1 0 ] TEST : [ 2 3 5 ] TRAIN : [ 0 5 1 ] TEST : [ 3 4 2 ] args: n_splits ( int )\uff1asplit \u8fed\u4ee3\u6b21\u6570 methods\uff1a splits split ( X , y , groups = None ) GridSearchCV \u7f51\u683c\u641c\u7d22 class sklearn . model_selection . GridSearchCV ( estimator , param_grid , * , scoring = None , n_jobs = None , refit = True , cv = None , verbose = 0 , pre_dispatch = '2*n_jobs' , error_score = nan , return_train_score = False ) estimator param_grid\uff1a\u5b57\u5178\u7c7b\u578b\uff0c\u8981\u7a77\u4e3e\u7684\u53d8\u91cf\uff0c\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b57\u5178\u5217\u8868 cv\uff1aK\u6298\u4ea4\u53c9\u9a8c\u8bc1 refit\uff1a #\u8c03\u6574max_depth param_grid = { 'max_depth' : np . arange ( 1 , 20 , 1 )} rfc = RandomForestClassifier ( n_estimators = 39 , random_state = 90 ) GS = GridSearchCV ( rfc , param_grid , cv = 10 ) GS . fit ( data . data , data . target ) GS . best_params_ # \u8fd4\u56de\u6700\u597d\u7684\u53c2\u6570 GS . best_score_ # \u8fd4\u56de\u6700\u9ad8\u7684\u5206\u6570 GS . best_estimator_ # \u8fd4\u56de\u6700\u597d\u7684\u4f30\u7b97\u5668 RandomizedSearchCV() cross_val_predict() sklearn . model_selection . cross_val_predict ( estimator , X , y = None , * , groups = None , cv = None , n_jobs = None , verbose = 0 , fit_params = None , pre_dispatch = '2*n_jobs' , method = 'predict' ) Args\uff1a method\uff1aeg\uff1a\"decision_function\"\uff0c\"dict_proba\" preprocessing \u00b6 \u6570\u636e\u9884\u5904\u7406 # \u4ee5MinMaxScaler\u4e3a\u4f8b\u5b50 from sklearn.preprocessing import MinMaxScaler data = [[ - 1 , 2 ], [ - 0.5 , 6 ], [ 0 , 10 ], [ 1 , 18 ]] #\u5b9e\u73b0\u5f52\u4e00\u5316 scaler = MinMaxScaler () #\u5b9e\u4f8b\u5316 scaler = scaler . fit ( data ) #fit\uff0c\u5728\u8fd9\u91cc\u672c\u8d28\u662f\u751f\u6210min(x)\u548cmax(x) result = scaler . transform ( data ) #\u901a\u8fc7\u63a5\u53e3\u5bfc\u51fa\u7ed3\u679c result # \u4e0a\u9762\u7684\u4ee3\u7801\u7b49\u540c\u4e8e\u4e0b\u9762\u8fd9\u53e5 result_ = scaler . fit_transform ( data ) #\u8bad\u7ec3\u548c\u5bfc\u51fa\u7ed3\u679c\u4e00\u6b65\u8fbe\u6210 scaler . inverse_transform ( result ) #\u5c06\u5f52\u4e00\u5316\u540e\u7684\u7ed3\u679c\u9006\u8f6c \u65e0\u91cf\u7eb2\u5316\u7c7b \u8bf4\u660e StandardScaler MinMaxScaler MaxAbsScaler RobustScaler Normalizer PowerTransformer QuantileTransformer KernelCenterer MinMaxScaler \u00b6 \u6570\u636e\u5f52\u4e00\u5316 $$ x=\\frac{x-min}{max-min} $$ class sklearn . preprocessing . MinMaxScaler ( feature_range = ( 0 , 1 ), * , copy = True , clip = False ) feature_range\uff1a\u5f52\u4e00\u5316\u8303\u56f4\uff0c\u9ed8\u8ba4 \\([0,1]\\) Attributes \uff1a data_min_ data_max_ #\u5f53X\u4e2d\u7684\u7279\u5f81\u6570\u91cf\u975e\u5e38\u591a\u7684\u65f6\u5019\uff0cfit\u4f1a\u62a5\u9519\u5e76\u8868\u793a\uff0c\u6570\u636e\u91cf\u592a\u5927\u4e86\u6211\u8ba1\u7b97\u4e0d\u4e86 #\u6b64\u65f6\u4f7f\u7528partial_fit\u4f5c\u4e3a\u8bad\u7ec3\u63a5\u53e3 scaler = scaler . partial_fit ( data ) StrandardScaler \u00b6 \u6570\u636e\u6807\u51c6\u5316 $$ x=\\frac{x-\\mu}{\\sigma} $$ class sklearn . preprocessing . StandardScaler ( * , copy = True , with_mean = True , with_std = True ) Attributes \uff1a mean_ var_ \u5904\u7406\u79bb\u6563\u53d8\u91cf \u00b6 LabelEncoder\uff1a\u6807\u7b7e\u7f16\u7801\u5668\uff0c\u79bb\u6563\u7c7b\u53d8\u6210\u6570\u503c\u7c7b\uff0c\u8f93\u51fa\u53ea\u6709\u4e00\u5217 OrdinalEncoder\uff1a\u7279\u5f81\u7f16\u7801\u5668\uff0c\u76f8\u5f53\u4e8e LabelEncoder \u652f\u6301\u591a\u5217\u7684\u7248\u672c OneHotEncoder\uff1a\u72ec\u70ed\u7f16\u7801\uff0c\u54d1\u53d8\u91cf\uff1b\u4e5f\u53ef\u4ee5\u4f7f\u7528 Pandas \u5904\u7406\uff1b\u4f1a\u4f7f\u7528\u7a00\u758f\u77e9\u9635\u5b58\u50a8 Binarizer \u00b6 \u8fde\u7eed\u6570\u503c\u6839\u636e\u9608\u503c\u4e8c\u503c\u5316 KBinDiscretizer \u00b6 \u8fde\u7eed\u6570\u503c\u5206\u7bb1 sklearn.datasets \u00b6 \u81ea\u5e26\u7684\u6570\u636e\u96c6 # \u4ee5\u7ea2\u9152\u6570\u636e\u96c6\u4e3a\u4f8b from sklearn.datasets import load_wine wine = load_wine () # wine \u6570\u636e\u96c6\u4e2d\u7684\u5c5e\u6027 wine . key wine . data wine . target wine . feature_names wine . target_names load_wine() fetch_openml() mnist = fetch_openml ( 'mnist_784' , version = 1 ) sklearn.impute \u00b6 \u4f30\u7b97\u5668 from sklearn.impute import SimpleImputer imputer = SimpleImputer ( strategy = \"median\" ) imputer . fit ( data ) SimpleImputer \u00b6 class sklearn . impute . SimpleImputer ( * , missing_values = nan , strategy = 'mean' , fill_value = None , verbose = 0 , copy = True , add_indicator = False ) Attributes: statistics_ ( array of shape )\uff1aThe imputation fill value for each feature Methods: fit() fit ( X , y = None ) transform() transform ( X ) fit_transform() fit_transform ( X , y = None , ** fit_params ) sklearn.pipeline \u00b6 Pipeline \u00b6 class sklearn . pipeline . Pipeline ( steps , * , memory = None , verbose = False ) Pipeline of transforms with a final estimator. \u6700\u540e\u4e00\u4e2a\u662f\u4f30\u7b97\u5668\u524d\u9762\u90fd\u662f\u8f6c\u6362\u5668\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u5fc5\u987b\u8981\u6709 fit_transform() \u65b9\u6cd5\uff09\uff1b\u5f53\u8c03\u7528\u6d41\u6c34\u7ebf\u7684 fit() \u65b9\u6cd5\u65f6\u4f9d\u6b21\u8c03\u7528\u8f6c\u6362\u5668\u7684 fit_transform() \u7136\u540e\u8c03\u7528\u6700\u540e\u7684\u4f30\u7b97\u5668\u7684 fit() pipe = Pipeline ([( 'scaler' , StandardScaler ()), ( 'svc' , SVC ())]) \u964d\u7ef4 \u00b6 \u968f\u673a\u6295\u5f71 random_projection \u591a\u7ef4\u7f29\u653e sklearn.decomposition \u00b6 PCA sklearn.manifold \u00b6 LLE sklearn.compose \u00b6 ColumnTransformer \u00b6 \u80fd\u591f\u5904\u7406\u6240\u6709\u5217\u7684\u8f6c\u6362\u5668 \u6a21\u578b save && load \u00b6 import joblib # save joblib . dump ( my_model , \"my_model.pkl\" ) # load my_model = joblib . load ( \"my_model.pkl\" ) \u53c2\u6570 \u00b6 tol ( float )\uff1aTolerance for stopping criteria. \u635f\u5931\u4e0b\u964d\u5c0f\u4e8e tol \u65f6\u505c\u6b62\u8bad\u7ec3 \u5176\u4ed6 \u00b6 \u81ea\u5b9a\u4e49\u8f6c\u6362\u5668 \u00b6 \u51b3\u7b56\u6811\u53ef\u89c6\u5316 \u00b6 conda install graphviz conda install python - graphviz","title":"Sklearn"},{"location":"Python/Sklearn/#sklearn","text":"\u83dc\u83dc\u7684\u673a\u5668\u5b66\u4e60 sklearn\u3010\u516885\u96c6\u3011Python\u8fdb\u9636 bilibili","title":"Sklearn"},{"location":"Python/Sklearn/#sklearnlinear_model","text":"Atrbutes \u548c Mehods \u5e76\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u7c7b\u90fd\u6709 Methods\uff1a","title":"sklearn.linear_model"},{"location":"Python/Sklearn/#-decision_functionx-threshold","text":"Linear classifiers \u7c7b \u8bf4\u660e linear_model.LogisticRegression ([penalty, ...]) Logistic Regression (aka logit, MaxEnt) classifier. linear_model.LogisticRegressionCV (*[, Cs, ...]) Logistic Regression CV (aka logit, MaxEnt) classifier. linear_model.PassiveAggressiveClassifier (*) Passive Aggressive Classifier. linear_model.Perceptron (*[, penalty, alpha, ...]) Linear perceptron classifier. linear_model.RidgeClassifier ([alpha, ...]) Classifier using Ridge regression. linear_model.RidgeClassifierCV ([alphas, ...]) Ridge classifier with built-in cross-validation. linear_model.SGDClassifier ([loss, penalty, ...]) Linear classifiers (SVM, logistic regression, etc.) with SGD training. linear_model.SGDOneClassSVM ([nu, ...]) Solves linear One-Class SVM using Stochastic Gradient Descent. Classical linear regressors \u7c7b \u8bf4\u660e linear_model.LinearRegression (*[, ...]) Ordinary least squares Linear Regression. linear_model.Ridge ([alpha, fit_intercept, ...]) Linear least squares with l2 regularization. linear_model.RidgeCV ([alphas, ...]) Ridge regression with built-in cross-validation. linear_model.SGDRegressor ([loss, penalty, ...]) Linear model fitted by minimizing a regularized empirical loss with SGD.","title":"- decision_function(X)\uff1a\u8ba1\u7b97\u51b3\u7b56\u5206\u6570\uff0c\u6bd4\u5982\u53ef\u4ee5\u81ea\u5df1\u51b3\u5b9a threshold"},{"location":"Python/Sklearn/#sklearntree","text":"\u51b3\u7b56\u6811\u4e0d\u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u65e0\u91cf\u7eb2\u5316\u5904\u7406 from sklearn import tree # \u5bfc\u5165\u9700\u8981\u7684\u6a21\u5757 import graphviz clf = tree . DecisionTreeClassifier () # \u5b9e\u4f8b\u5316 clf = clf . fit ( X_train , y_train ) # \u7528\u8bad\u7ec3\u96c6\u6570\u636e\u8bad\u7ec3\u6a21\u578b result = clf . score ( X_test , y_test ) # \u5bfc\u5165\u6d4b\u8bd5\u96c6,\u4ece\u63a5\u53e3\u4e2d\u8c03\u7528\u9700\u8981\u7684\u4fe1\u606f\uff0c\u8fd4\u56de\u6d4b\u8bd5\u96c6\u7684\u51c6\u786e\u5ea6 clf . apply ( Xtest ) # apply\u8fd4\u56de\u6bcf\u4e2a\u6d4b\u8bd5\u6837\u672c\u6240\u5728\u7684\u53f6\u5b50\u8282\u70b9\u7684\u7d22\u5f15 clf . predict ( Xtest ) # predict\u8fd4\u56de\u6bcf\u4e2a\u6d4b\u8bd5\u6837\u672c\u7684\u5206\u7c7b/\u56de\u5f52\u7ed3\u679c clf . predict_proba ( Xtest ) # \u5bf9\u5e94\u7279\u5f81\u7684\u91cd\u8981\u6027 clf . feature_importances_ # \u753b\u51fa\u51b3\u7b56\u6811 dot_data = tree . export_graphviz ( clf , feature_name # \u987a\u5e8f\u5bf9\u5e94 data , class_names # \u987a\u5e8f\u5bf9\u5e94 target , filled = True # \u586b\u5145\u989c\u8272 , rounded = True # \u5706\u89d2 ) graph = graphviz . Source ( dot_data ) graph # \u4fdd\u5b58\u51b3\u7b56\u6811\u4e3a\u56fe\u7247 with open ( \"tree.dot\" , 'w' ) as f : f = tree . tree . export_graphviz ( clf ) # \u7136\u540e\u5728 cmd \u4e2d\u8fd0\u884c dot -Tpng tree.dot -o tree.png sklearn \u4f7f\u7528 CART \u7b97\u6cd5 \uff08Classifiation and Regression Tree\uff0c\u4e5f\u79f0\u589e\u957f\u6811\uff09\u8bad\u7ec3\u51b3\u7b56\u6811\uff0c\u5206\u7c7b\u95ee\u9898\u65f6\u4f7f\u7528\u6700\u5c0f\u5316\u4e0d\u7eaf\u5ea6\u6765\u62c6\u5206\u8bad\u7ec3\u96c6\uff0c\u56de\u5f52\u95ee\u9898\u65f6\u6700\u5c0f\u5316 mse \u526a\u679d\u53c2\u6570\uff1a max_depth\uff1a\u6700\u5927\u6df1\u5ea6 min_samples_leaf\uff1a\u7ed3\u70b9\u6700\u5c11\u8bad\u7ec3\u6837\u672c\u6570 min_samples_split\uff1a\u7ed3\u70b9\u5141\u8bb8\u5206\u652f\u7684\u6700\u5c0f\u8bad\u7ec3\u6837\u672c\u91cf min_weight_fraction_leaf\uff1a\u4e0e min_samples_leaf \u4e00\u6837\uff0c\u4f46\u8868\u73b0\u4e3a\u52a0\u6743\u5b9e\u4f8b\u603b\u6570\u7684\u5360\u6bd4 max_leaf_nodes\uff1a\u6700\u5927\u53f6\u7ed3\u70b9\u6570 max_features\uff1a\u5206\u88c2\u6bcf\u4e2a\u7ed3\u70b9\u8bc4\u4f30\u7684\u6700\u5927\u7279\u5f81\u6570\u91cf min_impurity_devrease\uff1a DecisionTreeClassifier \u5206\u7c7b\u6811 tree . DecisionTreeClassifier ( criterion = 'gini' , random_state = None , splitter , max_depth = None , min_samples_leaf = None , min_samples_split = None , max_features , min_impurity_decrease ) criterion\uff1a\u51b3\u5b9a\u4e0d\u7eaf\u5ea6\u7684\u8ba1\u7b97\u65b9\u6cd5\uff0centropy \u6216\u8005 gini random_state\uff1a\u968f\u673a\u6a21\u5f0f\u53c2\u6570\uff0c\u6307\u5b9a\u540e\u751f\u6210\u7684\u6811\u4f1a\u662f\u56fa\u5b9a\u7684 splitter\uff1a\u4e5f\u662f\u63a7\u5236\u51b3\u7b56\u6811\u7684\u968f\u5373\u9009\u9879\uff0cbest \u6216\u8005 random max_depth\uff1a\u526a\u679d\u53c2\u6570\uff0c\u6700\u5927\u6df1\u5ea6 min_samples_leaf\uff1a\u526a\u679d\u53c2\u6570\uff0c\u5b50\u7ed3\u70b9\u6700\u5c11\u8bad\u7ec3\u6837\u672c\u6570 min_samples_split\uff1a\u526a\u679d\u53c2\u6570\uff0c\u7ed3\u70b9\u5141\u8bb8\u5206\u652f\u7684\u6700\u5c0f\u8bad\u7ec3\u6837\u672c\u91cf max_features\uff1a\u526a\u679d\u53c2\u6570 min_impurity_devrease\uff1a\u526a\u679d\u53c2\u6570 [ * zip ( featrue_names , clf . feature_importances_ )] # \u67e5\u770b\u5bf9\u5e94\u7279\u5f81\u7684\u91cd\u8981\u6027 DecisionTreeRegressor \u56de\u5f52\u6811 export_graphviz \u53ef\u89c6\u5316 ExtraTreeClassifier ExtraTreeRegression","title":"sklearn.tree"},{"location":"Python/Sklearn/#sklearnsvm","text":"API Reference \u2014 scikit-learn 1.0.2 documentation \u5bf9\u4e00\u4e2a\u4e8c\u5143\u5206\u7c7b\u5668\uff0c\u5982\u679c\u4f20\u5165\u7684\u662f\u591a\u5143\u5206\u7c7b\u7684\u4efb\u52a1\uff0csklearn \u4f1a\u81ea\u52a8\u8bad\u7ec3\u591a\u4e2a\u4e8c\u5143\u5206\u7c7b\u5668\u6765\u5b9e\u73b0\u3002\u53ef\u4ee5\u4f7f\u7528 OneVsOneClassifier \u6216\u8005 OneVsRestClassifier \u6765\u5f3a\u5236\u4f7f\u7528\u4e00\u5bf9\u4e00\u6216\u8005\u4e00\u5bf9\u591a\u7b56\u7565","title":"sklearn.svm"},{"location":"Python/Sklearn/#sklearnensemble","text":"","title":"sklearn.ensemble"},{"location":"Python/Sklearn/#voting","text":"\u6295\u7968\u5206\u7c7b\u5668\u6bcf\u4e2a\u9884\u6d4b\u5668\u4f7f\u7528\u4e0d\u540c\u7684\u7b97\u6cd5 \u786c\u6295\u7968\u548c\u8f6f\u6295\u7968\uff1a\u786c\u6295\u7968\u9009\u62e9\u6295\u7968\u6570\u6700\u591a\u7684\u7c7b\uff0c\u8f6f\u6295\u7968\u5e73\u5747\u6bcf\u4e2a\u5206\u7c7b\u5668\u7684\u7c7b\u522b\u540e\u7ed9\u51fa\u9884\u6d4b\uff0c\u901a\u5e38\u6548\u679c\u66f4\u597d\uff0c\u56e0\u4e3a\u4f1a\u7ed9\u4e88\u9ad8\u5ea6\u81ea\u4fe1\u7684\u6295\u7968\u66f4\u9ad8\u7684\u6743\u91cd\uff08voting=\"hard\" && voting=\"soft\"\uff09","title":"voting"},{"location":"Python/Sklearn/#bagging-pasting","text":"\u6bcf\u4e2a\u9884\u6d4b\u5668\u4f7f\u7528\u76f8\u540c\u7684\u7b97\u6cd5\uff1b\u53ef\u4ee5\u901a\u8fc7\u4e0d\u540c\u7684 CPU \u5185\u6838\u751a\u81f3\u4e0d\u540c\u7684\u670d\u52a1\u5668\u5e76\u884c\u7684\u8bad\u7ec3\u548c\u9884\u6d4b\uff0c\u975e\u5e38\u6613\u4e8e\u6269\u5c55 bagging\uff1a\u81ea\u4e3e\u6c47\u805a\u6cd5\uff0c\u91c7\u6837\u65f6\u6709\u653e\u56de\uff0cpasting\uff1a\u91c7\u6837\u65f6\u65e0\u653e\u56de\uff1b\u6362\u53e5\u8bdd\u8bf4\uff0c\u4e24\u8005\u90fd\u5141\u8bb8\u4e00\u4e2a\u6837\u672c\u88ab\u591a\u6b21\u91c7\u6837\uff0c\u4f46\u53ea\u6709 bagging \u5141\u8bb8\u4e00\u4e2a\u6837\u672c\u88ab\u4e00\u4e2a\u9884\u6d4b\u5668\u591a\u6b21\u91c7\u6837 bagging \u56e0\u4e3a\u81ea\u4e3e\u6cd5\u7ed9\u8bad\u7ec3\u5b50\u96c6\u5f15\u5165\u4e86\u66f4\u9ad8\u7684\u591a\u6837\u6027\u6240\u4ee5\u504f\u5dee\u6bd4 pasting \u7565\u9ad8\uff0c\u4f46\u4e5f\u610f\u5473\u7740\u9884\u6d4b\u5668\u4e4b\u95f4\u7684\u5173\u8054\u5ea6\u66f4\u4f4e\uff0c\u6240\u4ee5\u96c6\u6210\u7684\u65b9\u5dee\u5c0f \u5305\u5916\u8bc4\u4f30\uff1a clf = BaggingClassifier ( DecisionTreeClassifier (), n_estimators = 500 , bootstrap = True , obb_score = True ) clf . fit ( x_train , y_train ) print ( clf . oob_score_ ) # \u5305\u5916\u8bc4\u4f30\u5206\u6570 print ( clf . oob_decision_function_ ) # \u5305\u5916\u51b3\u7b56\u51fd\u6570\uff0c\u8fd4\u56de\u6982\u7387","title":"bagging \u548c pasting"},{"location":"Python/Sklearn/#_1","text":"\u968f\u673a\u8865\u4e01\uff1a\u5bf9\u8bad\u7ec3\u6837\u672c\u548c\u7279\u5f81\u90fd\u8fdb\u884c\u62bd\u6837 \u968f\u673a\u5b50\u7a7a\u95f4\uff1a\u4fdd\u7559\u6240\u6709\u8bad\u7ec3\u5b9e\u4f8b\uff08bootstrap=False, max_samples=1.0\uff09\uff0c\u4f46\u5bf9\u7279\u5f81\u8fdb\u884c\u62bd\u6837\uff08bootstrap_features=True, max_features<1.0\uff09","title":"\u968f\u5373\u8865\u4e01\u548c\u968f\u673a\u5b50\u7a7a\u95f4"},{"location":"Python/Sklearn/#_2","text":"\u968f\u673a\u68ee\u6797\u662f\u51b3\u7b56\u6811\u7684\u96c6\u6210 \u6781\u7aef\u968f\u673a\u6811\uff08ExtraTrees\uff09\uff1a \u968f\u673a\u68ee\u6797\u5728\u5355\u68f5\u6811\u6bcf\u4e2a\u7ed3\u70b9\u5206\u88c2\u65f6\u5bf9\u6bcf\u4e2a\u7279\u5f81\u4f7f\u7528\u968f\u673a\u9608\u503c\uff0c\u800c\u4e0d\u662f\u641c\u7d22\u5f97\u51fa\u6700\u4f73\u9608\u503c \u4ee5\u66f4\u9ad8\u7684\u504f\u5dee\u6362\u53d6\u4e86\u66f4\u4f4e\u7684\u65b9\u5dee\uff0c\u4e14\u8bad\u7ec3\u8d77\u6765\u5feb\u5f97\u591a\uff08\u56e0\u4e3a\u5bfb\u627e\u6700\u4f73\u9608\u503c\u662f\u51b3\u7b56\u6811\u751f\u957f\u4e2d\u6700\u8017\u65f6\u7684\u4efb\u52a1\uff09 \u7279\u5f81\u91cd\u8981\u6027\uff1a \u968f\u673a\u68ee\u6797\u53ef\u4ee5\u8ba1\u7b97\u7279\u5f81\u91cd\u8981\u6027\uff1b\u901a\u8fc7\u67e5\u770b\u6240\u6709\u6811\u4e0a\u4f7f\u7528\u8be5\u7279\u5f81\u7684\u6811\u7ed3\u70b9 \u52a0\u6743\u5e73\u5747 \u51cf\u5c11\u4e0d\u7eaf\u5ea6\u7684\u7a0b\u5ea6\u6765\u8861\u91cf\u91cd\u8981\u6027\uff0c\u6743\u91cd\u4e3a\u5176\u5173\u8054\u7684\u8bad\u7ec3\u6837\u672c\u7684\u6570\u91cf clf . feature_importances_","title":"\u968f\u673a\u68ee\u6797"},{"location":"Python/Sklearn/#boosting","text":"\u63d0\u5347\u6cd5\uff1b\u7f3a\u70b9\u662f\u65e0\u6cd5\u5e76\u884c\uff0c\u6240\u4ee5\u5728\u6269\u5c55\u65b9\u9762\u4e0d\u5982 bagging \u548c pasting\uff1b AdaBoost\uff1a\u5bf9\u524d\u9762\u7684\u5206\u7c7b\u5668\u5206\u7c7b\u9519\u7684\u6837\u672c\u52a0\u5927\u6743\u91cd\u518d\u8bad\u7ec3\u4e00\u4e2a\u65b0\u7684\u5206\u7c7b\u5668 \u68af\u5ea6\u63d0\u5347\uff1a \u8ba9\u65b0\u7684\u9884\u6d4b\u5668\u9488\u5bf9\u524d\u4e00\u4e2a\u9884\u6d4b\u5668\u7684\u6b8b\u5dee\u8fdb\u884c\u62df\u5408\uff0c\u7136\u540e\u7ed3\u679c\u76f8\u52a0\uff1b\u6bd4\u5982 GBRT\uff08\u68af\u5ea6\u63d0\u5347\u56de\u5f52\u6811\uff09 \u8d85\u53c2\u6570 learning_rate \u5bf9\u6bcf\u68f5\u6811\u7684\u8d21\u732e\u8fdb\u884c\u7f29\u653e\uff0c\u5982\u679c\u662f\u4f4e\u503c\u5219\u9700\u8981\u66f4\u591a\u7684\u6811\u6765\u62df\u5408\uff0c\u4f46\u9884\u6d4b\u7684\u6cdb\u5316\u6548\u679c\u901a\u5e38\u66f4\u597d \u8981\u627e\u5230\u6811\u7684\u6700\u4f73\u6570\u91cf\u53ef\u4ee5\u4f7f\u7528\u63d0\u524d\u505c\u6b62\u6cd5 (staged_predict() \u6216\u8005 warm_start()) # staged_predict() import numpy as np from sklearn.model_selection import train_test_split from sklearn.metrics import mean_squared_error X_train , X_val , y_train , y_val = train_test_split ( X , y ) gbrt = GradientBoostingRegressor ( max_depth = 2 , n_estimators = 120 ) gbrt . fit ( X_train , y_train ) errors = [ mean_squared_error ( y_val , y_pred ) for y_pred in gbrt . staged_predict ( X_val )] bst_n_estimators = np . argmin ( errors ) + 1 # \u91cd\u65b0\u8bad\u7ec3\u4e00\u4e2a gbrt_best = GradientBoostingRegressor ( max_depth = 2 , n_estimators = bst_n_estimators ) gbrt_best . fit ( X_train , y_train ) # warm_start() gbrt = GradientBoostingRegressor ( max_depth = 2 , warm_start = True ) min_val_error = float ( \"inf\" ) error_going_up = 0 for n_estimators in range ( 1 , 120 ): gbrt . n_estimators = n_estimators gbrt . fit ( X_train , y_train ) y_pred = gbrt . predict ( X_val ) val_error = mean_squared_error ( y_val , y_pred ) if val_error < min_val_error : min_val_error = val_error error_going_up = 0 else : error_going_up += 1 if error_going_up == 5 : # \u9a8c\u8bc1\u96c6\u8bef\u5dee\u8fde\u7eed5\u6b64\u672a\u6539\u5584 break # early stopping XGBoost \uff08Extreme Gradient Boosting\uff09\u63d0\u4f9b\u4e86\u68af\u5ea6\u63d0\u5347\u7684\u4f18\u5316\u5b9e\u73b0\uff0c\u4e14 API \u548c sklearn \u76f8\u4f3c","title":"boosting"},{"location":"Python/Sklearn/#stacking","text":"\u5806\u53e0\u6cd5 \u5c06\u8bad\u7ec3\u96c6\u5206\u6210 n \u90e8\u5206\uff0c\u7b2c 1 \u90e8\u5206\u8bad\u7ec3\u7b2c\u4e00\u5c42\u7684 m \u4e2a\u9884\u6d4b\u5668\uff0c\u7136\u540e\u628a\u7b2c 2 \u90e8\u5206\u7684\u6837\u672c\u8f93\u5165\u7b2c\u4e00\u5c42\u7684\u9884\u6d4b\u5668\u5f97\u5230\u65b0\u7684\u6837\u672c\u6765\u8bad\u7ec3\u7b2c\u4e8c\u5c42\u7684\u9884\u6d4b\u5668 ........ \u6700\u4e0a\u5c42\u7528\u4e00\u4e2a\u9884\u6d4b\u5668\u6765\u5f97\u5230\u6700\u7ec8\u7684\u7ed3\u679c sklearn \u4e0d\u652f\u6301\u5806\u53e0\uff0c\u9700\u8981\u81ea\u5df1\u624b\u52a8\u5b9e\u73b0 \u6216\u8005 \u4f7f\u7528\u5f00\u6e90\u7684\u65b9\u6848\uff0c\u5982 DESlib RandomForestClassifier class sklearn . ensemble . RandomForestClassifier ( n_estimators = '10' , criterion = 'gini' , max_depth = None , min_samples_split = 2 , min_samples_leaf = 1 , min_weight_fraction_leaf = 0.0 , max_features = 'auto' , max_leaf_nodes = None , min_impurity_decrease = 0.0 , min_impurity_split = None , bootstrap = True , oob_score = False , n_jobs = None , random_state = None , verbose = 0 , warm_start = False , class_weight = None ) n_estimators\uff1a\u6811\u7684\u4e2a\u6570 \u5c5e\u6027 \u8bf4\u660e estimators_ \u67e5\u770b\u68ee\u6797\u4e2d\u6240\u6709\u6811\u7684\u5217\u8868 oob_score_ out of bag score\uff0c\u888b\u5916\u5f97\u5206 feature_importances_ \u7279\u5f81\u91cd\u8981\u6027 \u63a5\u53e3\uff1aapply\uff0cfit\uff0cpredict\uff0cscore\uff0cpredict_proba(\u8fd4\u56de\u6bcf\u4e2a\u6d4b\u8bd5\u6837\u672c\u5bf9\u5e94\u7684\u88ab\u5206\u5230\u6bcf\u4e00\u7c7b\u6807\u7b7e\u7684\u6982\u7387)","title":"stacking"},{"location":"Python/Sklearn/#sklearnmetrics","text":"","title":"sklearn.metrics"},{"location":"Python/Sklearn/#classification-metrics","text":"See the Classification metrics section of the user guide for further details. \u65b9\u6cd5 \u8bf4\u660e metrics.accuracy_score (y_true, y_pred, *[, ...]) Accuracy classification score. metrics.auc (x, y) Compute Area Under the Curve (AUC) using the trapezoidal rule. metrics.average_precision_score (y_true, ...) Compute average precision (AP) from prediction scores. metrics.balanced_accuracy_score (y_true, ...) Compute the balanced accuracy. metrics.brier_score_loss (y_true, y_prob, *) Compute the Brier score loss. metrics.classification_report (y_true, y_pred, *) Build a text report showing the main classification metrics. metrics.cohen_kappa_score (y1, y2, *[, ...]) Cohen's kappa: a statistic that measures inter-annotator agreement. metrics.confusion_matrix (y_true, y_pred, *) \u6df7\u6dc6\u77e9\u9635\u3002Compute confusion matrix to evaluate the accuracy of a classification. metrics.dcg_score (y_true, y_score, *[, k, ...]) Compute Discounted Cumulative Gain. metrics.det_curve (y_true, y_score[, ...]) Compute error rates for different probability thresholds. metrics.f1_score (y_true, y_pred, *[, ...]) F1\u5ea6\u91cf\u3002Compute the F1 score, also known as balanced F-score or F-measure. metrics.fbeta_score (y_true, y_pred, *, beta) Compute the F-beta score. metrics.hamming_loss (y_true, y_pred, *[, ...]) Compute the average Hamming loss. metrics.hinge_loss (y_true, pred_decision, *) Average hinge loss (non-regularized). metrics.jaccard_score (y_true, y_pred, *[, ...]) Jaccard similarity coefficient score. metrics.log_loss (y_true, y_pred, *[, eps, ...]) Log loss, aka logistic loss or cross-entropy loss. metrics.matthews_corrcoef (y_true, y_pred, *) Compute the Matthews correlation coefficient (MCC). metrics.multilabel_confusion_matrix (y_true, ...) Compute a confusion matrix for each class or sample. metrics.ndcg_score (y_true, y_score, *[, k, ...]) Compute Normalized Discounted Cumulative Gain. metrics.precision_recall_curve (y_true, ...) \u7cbe\u5ea6\u53ec\u56de\u7387\u66f2\u7ebf\u3002Compute precision-recall pairs for different probability thresholds. metrics.precision_recall_fscore_support (...) Compute precision, recall, F-measure and support for each class. metrics.precision_score (y_true, y_pred, *[, ...]) \u7cbe\u5ea6\u3002Compute the precision. metrics.recall_score (y_true, y_pred, *[, ...]) \u53ec\u56de\u7387\u3002Compute the recall. metrics.roc_auc_score (y_true, y_score, *[, ...]) \u8ba1\u7b97 AUC\u3002Compute Area Under the Receiver Operating Characteristic Curve (ROC AUC) from prediction scores. metrics.roc_curve (y_true, y_score, *[, ...]) ROC\u66f2\u7ebf\u3002Compute Receiver operating characteristic (ROC). metrics.top_k_accuracy_score (y_true, y_score, *) Top-k Accuracy classification score. metrics.zero_one_loss (y_true, y_pred, *[, ...]) Zero-one classification loss. mean_squared_error","title":"Classification metrics"},{"location":"Python/Sklearn/#sklearnmodel_selection","text":"","title":"sklearn.model_selection"},{"location":"Python/Sklearn/#splitter-classes","text":"\u7c7b \u8bf4\u660e model_selection.GroupKFold ([n_splits]) K-fold iterator variant with non-overlapping groups. model_selection.GroupShuffleSplit ([...]) Shuffle-Group(s)-Out cross-validation iterator model_selection.KFold ([n_splits, shuffle, ...]) K-Folds cross-validator model_selection.LeaveOneGroupOut () Leave One Group Out cross-validator model_selection.LeavePGroupsOut (n_groups) Leave P Group(s) Out cross-validator model_selection.LeaveOneOut () Leave-One-Out cross-validator model_selection.LeavePOut (p) Leave-P-Out cross-validator model_selection.PredefinedSplit (test_fold) Predefined split cross-validator model_selection.RepeatedKFold (*[, n_splits, ...]) Repeated K-Fold cross validator. model_selection.RepeatedStratifiedKFold (*[, ...]) Repeated Stratified K-Fold cross validator. model_selection.ShuffleSplit ([n_splits, ...]) Random permutation cross-validator model_selection.StratifiedKFold ([n_splits, ...]) Stratified K-Folds cross-validator. model_selection.StratifiedShuffleSplit ([...]) Stratified ShuffleSplit cross-validator model_selection.StratifiedGroupKFold ([...]) Stratified K-Folds iterator variant with non-overlapping groups. model_selection.TimeSeriesSplit ([n_splits, ...]) Time Series cross-validator","title":"Splitter Classes"},{"location":"Python/Sklearn/#splitter-functions","text":"\u65b9\u6cd5 \u8bf4\u660e model_selection.check_cv ([cv, y, classifier]) Input checker utility for building a cross-validator model_selection.train_test_split (*arrays[, ...]) Split arrays or matrices into random train and test subsets.","title":"Splitter Functions"},{"location":"Python/Sklearn/#hyper-parameter-optimizers","text":"\u7c7b \u8bf4\u660e model_selection.GridSearchCV (estimator, ...) Exhaustive search over specified parameter values for an estimator. model_selection.HalvingGridSearchCV (...[, ...]) Search over specified parameter values with successive halving. model_selection.ParameterGrid (param_grid) Grid of parameters with a discrete number of values for each. model_selection.ParameterSampler (...[, ...]) Generator on parameters sampled from given distributions. model_selection.RandomizedSearchCV (...[, ...]) Randomized search on hyper parameters. model_selection.HalvingRandomSearchCV (...[, ...]) Randomized search on hyper parameters.","title":"Hyper-parameter optimizers"},{"location":"Python/Sklearn/#model-validation","text":"\u65b9\u6cd5 \u8bf4\u660e model_selection.cross_validate (estimator, X) Evaluate metric(s) by cross-validation and also record fit/score times. model_selection.cross_val_predict (estimator, X) Generate cross-validated estimates for each input data point. model_selection.cross_val_score (estimator, X) Evaluate a score by cross-validation. model_selection.learning_curve (estimator, X, ...) Learning curve. model_selection.permutation_test_score (...) Evaluate the significance of a cross-validated score with permutations model_selection.validation_curve (estimator, ...) Validation curve. train_test_split() \u5206\u6570\u636e\u96c6\u548c\u6d4b\u8bd5\u96c6 from sklearn.model_selection import train_test_split Xtrain , Xtest , Ytrain , Ytest = train_test_split ( * arrays , test_size = None , test_size = None , random_state = None , shuffle = True ) args: test_size\uff1aIf float\uff0c\u8868\u793a\u53d6\u591a\u5c11\u6bd4\u4f8b\u5f53\u6d4b\u8bd5\u96c6\uff1bIf int\uff0c\u8868\u793a\u53d6\u591a\u5c11\u4e2a\u5f53\u6d4b\u8bd5\u96c6\uff1bIf None\uff1a\u53d6 1-train_size\uff0c\u5982\u679c train_size \u4e5f\u662f None \u53d6 0.25 train_size\uff1a\u540c test_size\uff0cIf None\uff0c\u53d6 1-test_size random_state\uff1a\u968f\u673a\u6570\u79cd\u5b50 returns: list, length=2 * len(arrays) cross_val_score() k\u6298\u4ea4\u53c9\u9a8c\u8bc1\uff0csklearn \u7684\u4ea4\u53c9\u9a8c\u8bc1\u66f4\u503e\u5411\u4e8e\u4f7f\u7528\u6548\u7528\u51fd\u6570\uff08\u8d8a\u5927\u8d8a\u597d\uff09 from sklearn.model_selection import cross_val_score rfc_s = cross_val_score ( estimator , X , y = None , cv = None ) args\uff1a estimator\uff1a\u7b97\u6cd5\u6a21\u578b X\uff1a\u6570\u636e y\uff1a\u6807\u7b7e cv\uff1a\u6298\u6570 Returns\uff1a scores \uff1a ndarray of float of shape=(len(list(cv)),) StratifiedShuffleSplit() \u63d0\u4f9b\u5206\u5c42\u62bd\u6837\u529f\u80fd\uff0c\u786e\u4fdd\u6bcf\u4e2a\u6807\u7b7e\u5bf9\u5e94\u7684\u6837\u672c\u7684\u6bd4\u4f8b class StratifiedShuffleSplit ( n_splits = 10 , * , test_size = None , train_size = None , random_state = None ) StratifiedShuffleSplit ( n_splits = 5 , random_state = 0 , ... ) >>> for train_index , test_index in sss . split ( X , y ): ... print ( \"TRAIN:\" , train_index , \"TEST:\" , test_index ) ... X_train , X_test = X [ train_index ], X [ test_index ] ... y_train , y_test = y [ train_index ], y [ test_index ] TRAIN : [ 5 2 3 ] TEST : [ 4 1 0 ] TRAIN : [ 5 1 4 ] TEST : [ 0 2 3 ] TRAIN : [ 5 0 2 ] TEST : [ 4 3 1 ] TRAIN : [ 4 1 0 ] TEST : [ 2 3 5 ] TRAIN : [ 0 5 1 ] TEST : [ 3 4 2 ] args: n_splits ( int )\uff1asplit \u8fed\u4ee3\u6b21\u6570 methods\uff1a splits split ( X , y , groups = None ) GridSearchCV \u7f51\u683c\u641c\u7d22 class sklearn . model_selection . GridSearchCV ( estimator , param_grid , * , scoring = None , n_jobs = None , refit = True , cv = None , verbose = 0 , pre_dispatch = '2*n_jobs' , error_score = nan , return_train_score = False ) estimator param_grid\uff1a\u5b57\u5178\u7c7b\u578b\uff0c\u8981\u7a77\u4e3e\u7684\u53d8\u91cf\uff0c\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b57\u5178\u5217\u8868 cv\uff1aK\u6298\u4ea4\u53c9\u9a8c\u8bc1 refit\uff1a #\u8c03\u6574max_depth param_grid = { 'max_depth' : np . arange ( 1 , 20 , 1 )} rfc = RandomForestClassifier ( n_estimators = 39 , random_state = 90 ) GS = GridSearchCV ( rfc , param_grid , cv = 10 ) GS . fit ( data . data , data . target ) GS . best_params_ # \u8fd4\u56de\u6700\u597d\u7684\u53c2\u6570 GS . best_score_ # \u8fd4\u56de\u6700\u9ad8\u7684\u5206\u6570 GS . best_estimator_ # \u8fd4\u56de\u6700\u597d\u7684\u4f30\u7b97\u5668 RandomizedSearchCV() cross_val_predict() sklearn . model_selection . cross_val_predict ( estimator , X , y = None , * , groups = None , cv = None , n_jobs = None , verbose = 0 , fit_params = None , pre_dispatch = '2*n_jobs' , method = 'predict' ) Args\uff1a method\uff1aeg\uff1a\"decision_function\"\uff0c\"dict_proba\"","title":"Model validation"},{"location":"Python/Sklearn/#preprocessing","text":"\u6570\u636e\u9884\u5904\u7406 # \u4ee5MinMaxScaler\u4e3a\u4f8b\u5b50 from sklearn.preprocessing import MinMaxScaler data = [[ - 1 , 2 ], [ - 0.5 , 6 ], [ 0 , 10 ], [ 1 , 18 ]] #\u5b9e\u73b0\u5f52\u4e00\u5316 scaler = MinMaxScaler () #\u5b9e\u4f8b\u5316 scaler = scaler . fit ( data ) #fit\uff0c\u5728\u8fd9\u91cc\u672c\u8d28\u662f\u751f\u6210min(x)\u548cmax(x) result = scaler . transform ( data ) #\u901a\u8fc7\u63a5\u53e3\u5bfc\u51fa\u7ed3\u679c result # \u4e0a\u9762\u7684\u4ee3\u7801\u7b49\u540c\u4e8e\u4e0b\u9762\u8fd9\u53e5 result_ = scaler . fit_transform ( data ) #\u8bad\u7ec3\u548c\u5bfc\u51fa\u7ed3\u679c\u4e00\u6b65\u8fbe\u6210 scaler . inverse_transform ( result ) #\u5c06\u5f52\u4e00\u5316\u540e\u7684\u7ed3\u679c\u9006\u8f6c \u65e0\u91cf\u7eb2\u5316\u7c7b \u8bf4\u660e StandardScaler MinMaxScaler MaxAbsScaler RobustScaler Normalizer PowerTransformer QuantileTransformer KernelCenterer","title":"preprocessing"},{"location":"Python/Sklearn/#minmaxscaler","text":"\u6570\u636e\u5f52\u4e00\u5316 $$ x=\\frac{x-min}{max-min} $$ class sklearn . preprocessing . MinMaxScaler ( feature_range = ( 0 , 1 ), * , copy = True , clip = False ) feature_range\uff1a\u5f52\u4e00\u5316\u8303\u56f4\uff0c\u9ed8\u8ba4 \\([0,1]\\) Attributes \uff1a data_min_ data_max_ #\u5f53X\u4e2d\u7684\u7279\u5f81\u6570\u91cf\u975e\u5e38\u591a\u7684\u65f6\u5019\uff0cfit\u4f1a\u62a5\u9519\u5e76\u8868\u793a\uff0c\u6570\u636e\u91cf\u592a\u5927\u4e86\u6211\u8ba1\u7b97\u4e0d\u4e86 #\u6b64\u65f6\u4f7f\u7528partial_fit\u4f5c\u4e3a\u8bad\u7ec3\u63a5\u53e3 scaler = scaler . partial_fit ( data )","title":"MinMaxScaler"},{"location":"Python/Sklearn/#strandardscaler","text":"\u6570\u636e\u6807\u51c6\u5316 $$ x=\\frac{x-\\mu}{\\sigma} $$ class sklearn . preprocessing . StandardScaler ( * , copy = True , with_mean = True , with_std = True ) Attributes \uff1a mean_ var_","title":"StrandardScaler"},{"location":"Python/Sklearn/#_3","text":"LabelEncoder\uff1a\u6807\u7b7e\u7f16\u7801\u5668\uff0c\u79bb\u6563\u7c7b\u53d8\u6210\u6570\u503c\u7c7b\uff0c\u8f93\u51fa\u53ea\u6709\u4e00\u5217 OrdinalEncoder\uff1a\u7279\u5f81\u7f16\u7801\u5668\uff0c\u76f8\u5f53\u4e8e LabelEncoder \u652f\u6301\u591a\u5217\u7684\u7248\u672c OneHotEncoder\uff1a\u72ec\u70ed\u7f16\u7801\uff0c\u54d1\u53d8\u91cf\uff1b\u4e5f\u53ef\u4ee5\u4f7f\u7528 Pandas \u5904\u7406\uff1b\u4f1a\u4f7f\u7528\u7a00\u758f\u77e9\u9635\u5b58\u50a8","title":"\u5904\u7406\u79bb\u6563\u53d8\u91cf"},{"location":"Python/Sklearn/#binarizer","text":"\u8fde\u7eed\u6570\u503c\u6839\u636e\u9608\u503c\u4e8c\u503c\u5316","title":"Binarizer"},{"location":"Python/Sklearn/#kbindiscretizer","text":"\u8fde\u7eed\u6570\u503c\u5206\u7bb1","title":"KBinDiscretizer"},{"location":"Python/Sklearn/#sklearndatasets","text":"\u81ea\u5e26\u7684\u6570\u636e\u96c6 # \u4ee5\u7ea2\u9152\u6570\u636e\u96c6\u4e3a\u4f8b from sklearn.datasets import load_wine wine = load_wine () # wine \u6570\u636e\u96c6\u4e2d\u7684\u5c5e\u6027 wine . key wine . data wine . target wine . feature_names wine . target_names load_wine() fetch_openml() mnist = fetch_openml ( 'mnist_784' , version = 1 )","title":"sklearn.datasets"},{"location":"Python/Sklearn/#sklearnimpute","text":"\u4f30\u7b97\u5668 from sklearn.impute import SimpleImputer imputer = SimpleImputer ( strategy = \"median\" ) imputer . fit ( data )","title":"sklearn.impute"},{"location":"Python/Sklearn/#simpleimputer","text":"class sklearn . impute . SimpleImputer ( * , missing_values = nan , strategy = 'mean' , fill_value = None , verbose = 0 , copy = True , add_indicator = False ) Attributes: statistics_ ( array of shape )\uff1aThe imputation fill value for each feature Methods: fit() fit ( X , y = None ) transform() transform ( X ) fit_transform() fit_transform ( X , y = None , ** fit_params )","title":"SimpleImputer"},{"location":"Python/Sklearn/#sklearnpipeline","text":"","title":"sklearn.pipeline"},{"location":"Python/Sklearn/#pipeline","text":"class sklearn . pipeline . Pipeline ( steps , * , memory = None , verbose = False ) Pipeline of transforms with a final estimator. \u6700\u540e\u4e00\u4e2a\u662f\u4f30\u7b97\u5668\u524d\u9762\u90fd\u662f\u8f6c\u6362\u5668\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u5fc5\u987b\u8981\u6709 fit_transform() \u65b9\u6cd5\uff09\uff1b\u5f53\u8c03\u7528\u6d41\u6c34\u7ebf\u7684 fit() \u65b9\u6cd5\u65f6\u4f9d\u6b21\u8c03\u7528\u8f6c\u6362\u5668\u7684 fit_transform() \u7136\u540e\u8c03\u7528\u6700\u540e\u7684\u4f30\u7b97\u5668\u7684 fit() pipe = Pipeline ([( 'scaler' , StandardScaler ()), ( 'svc' , SVC ())])","title":"Pipeline"},{"location":"Python/Sklearn/#_4","text":"\u968f\u673a\u6295\u5f71 random_projection \u591a\u7ef4\u7f29\u653e","title":"\u964d\u7ef4"},{"location":"Python/Sklearn/#sklearndecomposition","text":"PCA","title":"sklearn.decomposition"},{"location":"Python/Sklearn/#sklearnmanifold","text":"LLE","title":"sklearn.manifold"},{"location":"Python/Sklearn/#sklearncompose","text":"","title":"sklearn.compose"},{"location":"Python/Sklearn/#columntransformer","text":"\u80fd\u591f\u5904\u7406\u6240\u6709\u5217\u7684\u8f6c\u6362\u5668","title":"ColumnTransformer"},{"location":"Python/Sklearn/#save-load","text":"import joblib # save joblib . dump ( my_model , \"my_model.pkl\" ) # load my_model = joblib . load ( \"my_model.pkl\" )","title":"\u6a21\u578b save &amp;&amp; load"},{"location":"Python/Sklearn/#_5","text":"tol ( float )\uff1aTolerance for stopping criteria. \u635f\u5931\u4e0b\u964d\u5c0f\u4e8e tol \u65f6\u505c\u6b62\u8bad\u7ec3","title":"\u53c2\u6570"},{"location":"Python/Sklearn/#_6","text":"","title":"\u5176\u4ed6"},{"location":"Python/Sklearn/#_7","text":"","title":"\u81ea\u5b9a\u4e49\u8f6c\u6362\u5668"},{"location":"Python/Sklearn/#_8","text":"conda install graphviz conda install python - graphviz","title":"\u51b3\u7b56\u6811\u53ef\u89c6\u5316"},{"location":"Python/%E5%85%B6%E4%BB%96%E5%8C%85/","text":"Conda\u5e38\u7528\u547d\u4ee4 \u00b6 Conda\u5e38\u7528\u547d\u4ee4\u53ca\u5982\u4f55\u6362\u955c\u50cf\u6e90 - \u77e5\u4e4e conda activate xxxx #\u5f00\u542fxxxx\u73af\u5883 conda deactivate #\u5173\u95ed\u73af\u5883 # \u4e0b\u97623\u4e2a\u7684\u4f5c\u7528\u76f8\u540c conda env list #\u663e\u793a\u6240\u6709\u7684\u865a\u62df\u73af\u5883 conda info --envs #\u663e\u793a\u6240\u6709\u7684\u865a\u62df\u73af\u5883 conda info -e #\u663e\u793a\u6240\u6709\u5df2\u7ecf\u521b\u5efa\u7684\u73af\u5883 conda update -n base conda #update\u6700\u65b0\u7248\u672c\u7684conda conda create -n xxxx python=3.6 #\u521b\u5efapython3.6\u7684\u53eb\u505axxxx\u865a\u62df\u73af\u5883 conda remove --name xxxx --all #\u5f7b\u5e95\u5220\u9664\u65e7\u73af\u5883 conda remove -n xxxx --all #\u5f7b\u5e95\u5220\u9664\u65e7\u73af\u5883 #Conda\u662f\u6ca1\u6709\u91cd\u547d\u540d\u73af\u5883\u7684\u529f\u80fd, \u8981\u5b9e\u73b0\u8fd9\u4e2a\u57fa\u672c\u9700\u6c42, \u53ef\u4ee5\u901a\u8fc7\u514b\u9686-\u5220\u9664\u7684\u8fc7\u7a0b\u3002 #\u5207\u8bb0\u4e0d\u8981\u76f4\u63a5mv\u79fb\u52a8\u73af\u5883\u7684\u6587\u4ef6\u5939\u6765\u91cd\u547d\u540d, \u4f1a\u5bfc\u81f4\u4e00\u7cfb\u5217\u65e0\u6cd5\u60f3\u8c61\u7684\u9519\u8bef\u7684\u53d1\u751f! conda create --name newname --clone oldname //\u514b\u9686\u73af\u5883 conda remove --name oldname --all //\u5f7b\u5e95\u5220\u9664\u65e7\u73af\u5883 conda list #\u67e5\u770b\u5df2\u7ecf\u5b89\u88c5\u7684\u6587\u4ef6\u5305 conda list -n xxx #\u6307\u5b9a\u67e5\u770bxxx\u865a\u62df\u73af\u5883\u4e0b\u5b89\u88c5\u7684package conda update xxx #\u66f4\u65b0xxx\u6587\u4ef6\u5305 conda uninstall xxx #\u5378\u8f7dxxx\u6587\u4ef6\u5305 \u914d\u7f6e\u4ee3\u7406: \u5728 .condarc \u6587\u4ef6\u4e2d\u589e\u52a0\u914d\u7f6e\uff1a # \u8fd9\u91cc\u4ee5 Clash \u4e3a\u4f8b proxy_servers: http: http://127.0.0.1:7890 https: http://127.0.0.1:7890 argparse \u00b6 parse_args()\u548cparse_known_args()\u7684\u7528\u6cd5\u548c\u533a\u522b \u89e3\u6790\u547d\u4ee4\u884c\u53c2\u6570 parser = argparse . ArgumentParser () parser . add_argument () opt = parser . parse_args () opt = parser . parse_known_args () parser.add_argument() parser . add_argument () name or flags - \u4e00\u4e2a\u547d\u540d\u6216\u8005\u4e00\u4e2a\u9009\u9879\u5b57\u7b26\u4e32\u7684\u5217\u8868\uff0c\u4f8b\u5982 foo \u6216 -f, --foo action - \u5f53\u53c2\u6570\u5728\u547d\u4ee4\u884c\u4e2d\u51fa\u73b0\u65f6\u4f7f\u7528\u7684\u52a8\u4f5c\u57fa\u672c\u7c7b\u578b\uff0c\u9ed8\u8ba4 'store'\uff0c\u8868\u793a\u4fdd\u5b58\u8f93\u5165\u7684\u503c \u53ef\u9009\uff0c\"store_true\" / \"store_false\"\uff1a\u5982\u679c\u914d\u7f6e\u503c\u4e3a True \u6216 False\uff0c\u4e0d\u80fd\u914d\u7f6e\u5177\u4f53\u7684\u503c\uff1b nargs - \u547d\u4ee4\u884c\u53c2\u6570\u5e94\u5f53\u6d88\u8017\u7684\u6570\u76ee \u53ef\u9009\uff0cN\uff1a\u975e\u8d1f\u6574\u6570\uff0c\u5fc5\u987b\u6709N\u4e2a\u53c2\u6570\uff1b'?'\uff1a0\u4e2a\u62161\u4e2a\u53c2\u6570\uff1b'*'\uff1a0\u4e2a\u6216\u591a\u4e2a\uff1b'+'\uff1a\u4e00\u4e2a\u6216\u591a\u4e2a\uff1b default - \u5f53\u53c2\u6570\u672a\u5728\u547d\u4ee4\u884c\u4e2d\u51fa\u73b0\u5e76\u4e14\u4e5f\u4e0d\u5b58\u5728\u4e8e\u547d\u540d\u7a7a\u95f4\u5bf9\u8c61\u65f6\u6240\u4ea7\u751f\u7684\u503c type - \u547d\u4ee4\u884c\u53c2\u6570\u5e94\u5f53\u88ab\u8f6c\u6362\u6210\u7684\u7c7b\u578b required ( bool ) - \u6b64\u547d\u4ee4\u884c\u9009\u9879\u662f\u5426\u53ef\u7701\u7565 \uff08\u4ec5\u9009\u9879\u53ef\u7528\uff09 help ( str ) - \u4e00\u4e2a\u6b64\u9009\u9879\u4f5c\u7528\u7684\u7b80\u5355\u63cf\u8ff0 parser.parse_args() \u8fd4\u56de\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\uff0c\u5982\u679c\u7528\u4e86\u6ca1\u6709 add_argument() \u7684\u53c2\u6570\u4f1a\u62a5\u9519 parser . parse_args () # \u4ee3\u7801 import argparse parser = argparse . ArgumentParser () parser . add_argument ( '--flag_int' , type = int , default = 2 , help = 'flag_int' ) opt1 = parser . parse_args () # \u547d\u4ee4\u884c python test . py -- flag_int 3 # \u8f93\u51fa Namespace ( flag_int = 3 ) parser.parse_known_args() \u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u547d\u540d\u7a7a\u95f4\uff0c\u5176\u4e2d\u6709\u5df2\u7ecf\u5b9a\u4e49\u7684\u53c2\u6570\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u5217\u8868\uff0c\u4ee5\u7a7a\u683c\u4e3a\u95f4\u9694\u5b58\u50a8\u672a\u5b9a\u4e49\u7684\u53c2\u6570 parser . parse_known_args () # \u4ee3\u7801 import argparse parser = argparse . ArgumentParser () parser . add_argument ( '--flag_int' , type = int , default = 2 , help = 'flag_int' ) opt1 = parser . parse_known_args () # \u547d\u4ee4\u884c python test . py -- flag_int = 1 -- flag_float = 1.0 -- flag_bool = true # \u8f93\u51fa ( Namespace ( flag_int = 1 ), [ '--flag_float=1.0' , '--flag_bool=true' ]) # \u547d\u4ee4\u884c python test . py -- flag_int 1 -- flag_float 1.0 -- flag_bool true # \u8f93\u51fa ( Namespace ( flag_int = 1 ), [ '--flag_float' , '1.0' , '--flag_bool' , 'true' ]) shutil \u00b6 \u5e38\u7528\u65b9\u6cd5 \u8bf4\u660e shutil.copy shutil.rmtree functools \u00b6 \u7528\u4e8e\u51fd\u6570\u5f0f\u7f16\u7a0b\uff0c\u589e\u5f3a\u51fd\u6570\u529f\u80fd partial \u5c01\u88c5\u4e00\u4e2a\u51fd\u6570\u7f16\u7a0b\u539f\u6765\u7684\u4e00\u90e8\u5206\uff0c\u56fa\u5b9a\u67d0\u4e9b\u53c2\u6570 def sum ( x , y ): print ( x + y ) sum2 = functools . partial ( sum , 1 ) sum2 ( 2 ) # \u8f93\u51fa 3 Opencv \u00b6 \u4e0b\u8f7d\u5b89\u88c5 \u00b6 pip install opencv-python \u5e38\u7528\u64cd\u4f5c \u00b6 cv2.imread() import cv2 img = cv2 . imread ( path , flag ) \u7528 opencv \u5904\u7406\u56fe\u50cf\u65f6\uff0c\u83b7\u5f97\u7684\u77e9\u9635\u7c7b\u578b\u90fd\u662f uint8\uff08dtype='uint8'\uff09\uff0ch*w*channel path\uff1a\u8def\u5f84 flag\uff1a>0\uff1a\u591a\u901a\u9053\uff0c=0\uff1a\u7070\u5ea6\u56fe\uff0c<0\uff1awith alpha channel\uff08\u900f\u660e\u5ea6\uff09 cv2.imshow() cv2 . imshow ( winname , mat ) cv2.imwrite() cv2 . imwrite ( path , mat ) cv2.resize() img = cv2 . resize ( img , ( w , h )) # \u8fd9\u91cc\u662f\u5bbd*\u9ad8 Scipy \u00b6 \u63d2\u503c \u00b6 griddata \u00b6 from scipy.interpolate import griddata grid_x , grid_y = np . mgrid [ 0 : 1 : 100 j , 0 : 1 : 100 j ] grid = griddata ( points , values , ( grid_x , grid_y ), method = 'linear' , fill_value = nan ) \u5982\u679c\u662f\u5728\u4e8c\u7ef4\u4e0a\u4f5c\u56fe\uff08 (X,Y) -> Z \uff09\uff0cpoint \u7684\u7ef4\u6570\u662f [data_size, 2]\uff0cvalues \u662f [1, data_size] method \uff1a\u8868\u793a\u63d2\u503c\u65b9\u5f0f\uff0c\u6709 nearest / linear / cubic fill_value \uff1a\u8bbe\u7f6e\u5916\u503c\uff0c\u9ed8\u8ba4 non\uff0c\u5bf9 nearest \u4e0d\u8d77\u4f5c\u7528 Streamlit \u00b6 \u4ec5\u8bb0\u5f55\u4e00\u4e9b\u7528\u5230\u4e86\u7684 import streamlit as st st . set_page_config ( layout = \"wide\" , page_icon = \":shark:\" ) # \u5bbd\u5c4f\u6a21\u5f0f\uff0c\u56fe\u6807\u9ca8\u9c7c st . markdown ( \"...\" ) # \u8f93\u51famd st . text_input ( \"...\" ) # \u8f93\u5165\u6587\u5b57 st . number_input ( \"...\" ) # \u8f93\u5165\u6570\u5b57 st . table ( df ) # \u4e5f\u53ef\u4ee5\u76f4\u63a5 df st . button ( \"...\" ) # \u8fd4\u56de bool st . write ( \"...\" ) # \u8f93\u51fa st . selectbox ( \"...\" , ( \"-\" , \"...\" )) # \u9009\u62e9\u6846 st . st . sidebar . selectbox ( \"...\" ) # \u4fa7\u8fb9\u680f siderbar.\u5176\u4ed6API Python\uff1a\u4f7f\u7528Streamlit\u5feb\u901f\u642d\u5efa\u6570\u636e\u79d1\u5b66Web App_\u5fd7\u6d69\u540c\u5b66\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_python streamlit python\ufe31\u5199markdown\u4e00\u6837\u5199\u7f51\u9875\uff0c\u4ee3\u7801\u5feb\u901f\u751f\u6210web\u5de5\u5177\uff1astreamlit\u4ecb\u7ecd\uff08\u4e00\uff09_\u7d20\u8d28\u4e91\u7b14\u8bb0/Recorder...-CSDN\u535a\u5ba2","title":"Conda\u5e38\u7528\u547d\u4ee4"},{"location":"Python/%E5%85%B6%E4%BB%96%E5%8C%85/#conda","text":"Conda\u5e38\u7528\u547d\u4ee4\u53ca\u5982\u4f55\u6362\u955c\u50cf\u6e90 - \u77e5\u4e4e conda activate xxxx #\u5f00\u542fxxxx\u73af\u5883 conda deactivate #\u5173\u95ed\u73af\u5883 # \u4e0b\u97623\u4e2a\u7684\u4f5c\u7528\u76f8\u540c conda env list #\u663e\u793a\u6240\u6709\u7684\u865a\u62df\u73af\u5883 conda info --envs #\u663e\u793a\u6240\u6709\u7684\u865a\u62df\u73af\u5883 conda info -e #\u663e\u793a\u6240\u6709\u5df2\u7ecf\u521b\u5efa\u7684\u73af\u5883 conda update -n base conda #update\u6700\u65b0\u7248\u672c\u7684conda conda create -n xxxx python=3.6 #\u521b\u5efapython3.6\u7684\u53eb\u505axxxx\u865a\u62df\u73af\u5883 conda remove --name xxxx --all #\u5f7b\u5e95\u5220\u9664\u65e7\u73af\u5883 conda remove -n xxxx --all #\u5f7b\u5e95\u5220\u9664\u65e7\u73af\u5883 #Conda\u662f\u6ca1\u6709\u91cd\u547d\u540d\u73af\u5883\u7684\u529f\u80fd, \u8981\u5b9e\u73b0\u8fd9\u4e2a\u57fa\u672c\u9700\u6c42, \u53ef\u4ee5\u901a\u8fc7\u514b\u9686-\u5220\u9664\u7684\u8fc7\u7a0b\u3002 #\u5207\u8bb0\u4e0d\u8981\u76f4\u63a5mv\u79fb\u52a8\u73af\u5883\u7684\u6587\u4ef6\u5939\u6765\u91cd\u547d\u540d, \u4f1a\u5bfc\u81f4\u4e00\u7cfb\u5217\u65e0\u6cd5\u60f3\u8c61\u7684\u9519\u8bef\u7684\u53d1\u751f! conda create --name newname --clone oldname //\u514b\u9686\u73af\u5883 conda remove --name oldname --all //\u5f7b\u5e95\u5220\u9664\u65e7\u73af\u5883 conda list #\u67e5\u770b\u5df2\u7ecf\u5b89\u88c5\u7684\u6587\u4ef6\u5305 conda list -n xxx #\u6307\u5b9a\u67e5\u770bxxx\u865a\u62df\u73af\u5883\u4e0b\u5b89\u88c5\u7684package conda update xxx #\u66f4\u65b0xxx\u6587\u4ef6\u5305 conda uninstall xxx #\u5378\u8f7dxxx\u6587\u4ef6\u5305 \u914d\u7f6e\u4ee3\u7406: \u5728 .condarc \u6587\u4ef6\u4e2d\u589e\u52a0\u914d\u7f6e\uff1a # \u8fd9\u91cc\u4ee5 Clash \u4e3a\u4f8b proxy_servers: http: http://127.0.0.1:7890 https: http://127.0.0.1:7890","title":"Conda\u5e38\u7528\u547d\u4ee4"},{"location":"Python/%E5%85%B6%E4%BB%96%E5%8C%85/#argparse","text":"parse_args()\u548cparse_known_args()\u7684\u7528\u6cd5\u548c\u533a\u522b \u89e3\u6790\u547d\u4ee4\u884c\u53c2\u6570 parser = argparse . ArgumentParser () parser . add_argument () opt = parser . parse_args () opt = parser . parse_known_args () parser.add_argument() parser . add_argument () name or flags - \u4e00\u4e2a\u547d\u540d\u6216\u8005\u4e00\u4e2a\u9009\u9879\u5b57\u7b26\u4e32\u7684\u5217\u8868\uff0c\u4f8b\u5982 foo \u6216 -f, --foo action - \u5f53\u53c2\u6570\u5728\u547d\u4ee4\u884c\u4e2d\u51fa\u73b0\u65f6\u4f7f\u7528\u7684\u52a8\u4f5c\u57fa\u672c\u7c7b\u578b\uff0c\u9ed8\u8ba4 'store'\uff0c\u8868\u793a\u4fdd\u5b58\u8f93\u5165\u7684\u503c \u53ef\u9009\uff0c\"store_true\" / \"store_false\"\uff1a\u5982\u679c\u914d\u7f6e\u503c\u4e3a True \u6216 False\uff0c\u4e0d\u80fd\u914d\u7f6e\u5177\u4f53\u7684\u503c\uff1b nargs - \u547d\u4ee4\u884c\u53c2\u6570\u5e94\u5f53\u6d88\u8017\u7684\u6570\u76ee \u53ef\u9009\uff0cN\uff1a\u975e\u8d1f\u6574\u6570\uff0c\u5fc5\u987b\u6709N\u4e2a\u53c2\u6570\uff1b'?'\uff1a0\u4e2a\u62161\u4e2a\u53c2\u6570\uff1b'*'\uff1a0\u4e2a\u6216\u591a\u4e2a\uff1b'+'\uff1a\u4e00\u4e2a\u6216\u591a\u4e2a\uff1b default - \u5f53\u53c2\u6570\u672a\u5728\u547d\u4ee4\u884c\u4e2d\u51fa\u73b0\u5e76\u4e14\u4e5f\u4e0d\u5b58\u5728\u4e8e\u547d\u540d\u7a7a\u95f4\u5bf9\u8c61\u65f6\u6240\u4ea7\u751f\u7684\u503c type - \u547d\u4ee4\u884c\u53c2\u6570\u5e94\u5f53\u88ab\u8f6c\u6362\u6210\u7684\u7c7b\u578b required ( bool ) - \u6b64\u547d\u4ee4\u884c\u9009\u9879\u662f\u5426\u53ef\u7701\u7565 \uff08\u4ec5\u9009\u9879\u53ef\u7528\uff09 help ( str ) - \u4e00\u4e2a\u6b64\u9009\u9879\u4f5c\u7528\u7684\u7b80\u5355\u63cf\u8ff0 parser.parse_args() \u8fd4\u56de\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\uff0c\u5982\u679c\u7528\u4e86\u6ca1\u6709 add_argument() \u7684\u53c2\u6570\u4f1a\u62a5\u9519 parser . parse_args () # \u4ee3\u7801 import argparse parser = argparse . ArgumentParser () parser . add_argument ( '--flag_int' , type = int , default = 2 , help = 'flag_int' ) opt1 = parser . parse_args () # \u547d\u4ee4\u884c python test . py -- flag_int 3 # \u8f93\u51fa Namespace ( flag_int = 3 ) parser.parse_known_args() \u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u547d\u540d\u7a7a\u95f4\uff0c\u5176\u4e2d\u6709\u5df2\u7ecf\u5b9a\u4e49\u7684\u53c2\u6570\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u5217\u8868\uff0c\u4ee5\u7a7a\u683c\u4e3a\u95f4\u9694\u5b58\u50a8\u672a\u5b9a\u4e49\u7684\u53c2\u6570 parser . parse_known_args () # \u4ee3\u7801 import argparse parser = argparse . ArgumentParser () parser . add_argument ( '--flag_int' , type = int , default = 2 , help = 'flag_int' ) opt1 = parser . parse_known_args () # \u547d\u4ee4\u884c python test . py -- flag_int = 1 -- flag_float = 1.0 -- flag_bool = true # \u8f93\u51fa ( Namespace ( flag_int = 1 ), [ '--flag_float=1.0' , '--flag_bool=true' ]) # \u547d\u4ee4\u884c python test . py -- flag_int 1 -- flag_float 1.0 -- flag_bool true # \u8f93\u51fa ( Namespace ( flag_int = 1 ), [ '--flag_float' , '1.0' , '--flag_bool' , 'true' ])","title":"argparse"},{"location":"Python/%E5%85%B6%E4%BB%96%E5%8C%85/#shutil","text":"\u5e38\u7528\u65b9\u6cd5 \u8bf4\u660e shutil.copy shutil.rmtree","title":"shutil"},{"location":"Python/%E5%85%B6%E4%BB%96%E5%8C%85/#functools","text":"\u7528\u4e8e\u51fd\u6570\u5f0f\u7f16\u7a0b\uff0c\u589e\u5f3a\u51fd\u6570\u529f\u80fd partial \u5c01\u88c5\u4e00\u4e2a\u51fd\u6570\u7f16\u7a0b\u539f\u6765\u7684\u4e00\u90e8\u5206\uff0c\u56fa\u5b9a\u67d0\u4e9b\u53c2\u6570 def sum ( x , y ): print ( x + y ) sum2 = functools . partial ( sum , 1 ) sum2 ( 2 ) # \u8f93\u51fa 3","title":"functools"},{"location":"Python/%E5%85%B6%E4%BB%96%E5%8C%85/#opencv","text":"","title":"Opencv"},{"location":"Python/%E5%85%B6%E4%BB%96%E5%8C%85/#_1","text":"pip install opencv-python","title":"\u4e0b\u8f7d\u5b89\u88c5"},{"location":"Python/%E5%85%B6%E4%BB%96%E5%8C%85/#_2","text":"cv2.imread() import cv2 img = cv2 . imread ( path , flag ) \u7528 opencv \u5904\u7406\u56fe\u50cf\u65f6\uff0c\u83b7\u5f97\u7684\u77e9\u9635\u7c7b\u578b\u90fd\u662f uint8\uff08dtype='uint8'\uff09\uff0ch*w*channel path\uff1a\u8def\u5f84 flag\uff1a>0\uff1a\u591a\u901a\u9053\uff0c=0\uff1a\u7070\u5ea6\u56fe\uff0c<0\uff1awith alpha channel\uff08\u900f\u660e\u5ea6\uff09 cv2.imshow() cv2 . imshow ( winname , mat ) cv2.imwrite() cv2 . imwrite ( path , mat ) cv2.resize() img = cv2 . resize ( img , ( w , h )) # \u8fd9\u91cc\u662f\u5bbd*\u9ad8","title":"\u5e38\u7528\u64cd\u4f5c"},{"location":"Python/%E5%85%B6%E4%BB%96%E5%8C%85/#scipy","text":"","title":"Scipy"},{"location":"Python/%E5%85%B6%E4%BB%96%E5%8C%85/#_3","text":"","title":"\u63d2\u503c"},{"location":"Python/%E5%85%B6%E4%BB%96%E5%8C%85/#griddata","text":"from scipy.interpolate import griddata grid_x , grid_y = np . mgrid [ 0 : 1 : 100 j , 0 : 1 : 100 j ] grid = griddata ( points , values , ( grid_x , grid_y ), method = 'linear' , fill_value = nan ) \u5982\u679c\u662f\u5728\u4e8c\u7ef4\u4e0a\u4f5c\u56fe\uff08 (X,Y) -> Z \uff09\uff0cpoint \u7684\u7ef4\u6570\u662f [data_size, 2]\uff0cvalues \u662f [1, data_size] method \uff1a\u8868\u793a\u63d2\u503c\u65b9\u5f0f\uff0c\u6709 nearest / linear / cubic fill_value \uff1a\u8bbe\u7f6e\u5916\u503c\uff0c\u9ed8\u8ba4 non\uff0c\u5bf9 nearest \u4e0d\u8d77\u4f5c\u7528","title":"griddata"},{"location":"Python/%E5%85%B6%E4%BB%96%E5%8C%85/#streamlit","text":"\u4ec5\u8bb0\u5f55\u4e00\u4e9b\u7528\u5230\u4e86\u7684 import streamlit as st st . set_page_config ( layout = \"wide\" , page_icon = \":shark:\" ) # \u5bbd\u5c4f\u6a21\u5f0f\uff0c\u56fe\u6807\u9ca8\u9c7c st . markdown ( \"...\" ) # \u8f93\u51famd st . text_input ( \"...\" ) # \u8f93\u5165\u6587\u5b57 st . number_input ( \"...\" ) # \u8f93\u5165\u6570\u5b57 st . table ( df ) # \u4e5f\u53ef\u4ee5\u76f4\u63a5 df st . button ( \"...\" ) # \u8fd4\u56de bool st . write ( \"...\" ) # \u8f93\u51fa st . selectbox ( \"...\" , ( \"-\" , \"...\" )) # \u9009\u62e9\u6846 st . st . sidebar . selectbox ( \"...\" ) # \u4fa7\u8fb9\u680f siderbar.\u5176\u4ed6API Python\uff1a\u4f7f\u7528Streamlit\u5feb\u901f\u642d\u5efa\u6570\u636e\u79d1\u5b66Web App_\u5fd7\u6d69\u540c\u5b66\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_python streamlit python\ufe31\u5199markdown\u4e00\u6837\u5199\u7f51\u9875\uff0c\u4ee3\u7801\u5feb\u901f\u751f\u6210web\u5de5\u5177\uff1astreamlit\u4ecb\u7ecd\uff08\u4e00\uff09_\u7d20\u8d28\u4e91\u7b14\u8bb0/Recorder...-CSDN\u535a\u5ba2","title":"Streamlit"},{"location":"Python/%E8%AF%B4%E6%98%8E/","text":"\u8bf4\u660e \u00b6 Python\u5b66\u4e60\u4e2d\u7684\u7b14\u8bb0","title":"\u8bf4\u660e"},{"location":"Python/%E8%AF%B4%E6%98%8E/#_1","text":"Python\u5b66\u4e60\u4e2d\u7684\u7b14\u8bb0","title":"\u8bf4\u660e"},{"location":"%E5%85%B6%E4%BB%96/Markdown/","text":"Markdown \u00b6 \u4e00\u79cd\u65b9\u4fbf\u7b80\u5355\u7684\u6392\u7248\u8bed\u8a00 \u4e0d\u540c\u7684\u5e73\u53f0\u4f7f\u7528 Markdow \u89c4\u5219\u53ef\u80fd\u6709\u4e9b\u8bb8\u4e0d\u540c\uff0c\u6bd4\u5982\u6807\u9898 # \u540e\u9762\u53ef\u80fd\u4e0d\u9700\u8981\u52a0\u7a7a\u683c\uff0c\u672c\u6587\u4e3b\u8981\u57fa\u4e8e typora \u57fa\u672c\u8bed\u6cd5 \u00b6 \u6807\u9898 \u00b6 \u4e00\u7ea7\u6807\u9898 # + \u7a7a\u683c \u4e8c\u7ea7\u6807\u9898 ## + \u7a7a\u683c ...\u6700\u591a\u6709\u516d\u7ea7\u6807\u9898 # Markdown ## \u57fa\u672c\u8bed\u6cd5 \u5f15\u7528 \u00b6 > + \u7a7a\u683c \u8fd9\u662f\u4e00\u4e2a\u4f8b\u5b50 \u5f15\u7528\u53ef\u4ee5\u5d4c\u5957 \u4f8b\u5b50 \u5d4c\u5957 \u5f3a\u8c03 \u00b6 * \u548c _ \u90fd\u53ef\u4ee5\u8868\u793a\u5f3a\u8c03 \u4f7f\u7528\u65b9\u5f0f\uff1a\u5728\u9700\u8981\u5f3a\u8c03\u7684\u90e8\u5206\u7684\u5934\u548c\u5c3e\u90fd\u8981\u52a0 \u4e00\u4e2a * \u6216\u8005 _ \u8868\u793a \u503e\u659c \u4e24\u4e2a * \u6216\u8005 _ \u8868\u793a \u52a0\u7c97 \u4e09\u4e2a * \u6216\u8005 _ \u8868\u793a \u52a0\u7c97\uff0b\u503e\u659c `\u53ef\u4ee5\u7528\u4e8e\u5f3a\u8c03\u4e00\u4e9b\u5b57\u7b26\uff0c\u8bed\u6cd5\u5982\u4e0b\uff1a `+` \u6548\u679c\uff1a + \u5217\u8868 \u00b6 * + \u7a7a\u683c \u6216\u8005 + + \u7a7a\u683c \u8fd9\u662f\u4e00\u4e2a\u4f8b\u5b50 \u8fd9\u662f\u4e00\u4e2a\u4f8b\u5b50 \u5728\u4e00\u4e2a\u5217\u8868\u4e0b\u6309 tab \u4f1a\u53d8\u6210\u4e8c\u7ea7\u5217\u8868 \u8fd9\u662f\u4e00\u7ea7\u5217\u8868 \u8fd9\u662f\u4e8c\u7ea7\u5217\u8868 \u4ee3\u7801\u5757 \u00b6 ``` + \u8bed\u8a00(\u6bd4\u5982C++) + \u56de\u8f66 \u6548\u679c\u5982\u4e0b: #include <iostream> using namespace std ; int main () { cout << \"hello, world.\" return 0 ; } \u5206\u5272\u7ebf \u00b6 \u4e09\u4e2a\u6216\u8005\u66f4\u591a\u7684 + \u6216 _ \u6216 - + \u56de\u8f66 \u6548\u679c\uff1a \u8d85\u94fe\u63a5\u4e0e\u56fe\u7247 \u00b6 \u884c\u5185\u5f0f \u683c\u5f0f\uff1a[\u540d\u5b57] (URL) [ \u767e\u5ea6 ]( https://www.baidu.com/ ) \u6548\u679c\u5982\u4e0b\uff1a \u767e\u5ea6 \u53c2\u8003\u5f0f \u5728\u8981\u591a\u6b21\u4f7f\u7528\u540c\u4e00\u4e2a\u8d85\u94fe\u63a5\u65f6\u4f7f\u7528 \u683c\u5f0f\uff1a[\u7ed9\u7f51\u7ad9\u8d77\u7684\u540d\u5b57]\uff1aURL \uff08\u76f8\u5f53\u4e8e\u5b9a\u4e49\uff09 \u4f7f\u7528\u65b9\u5f0f\uff1a[\u8d85\u94fe\u63a5\u7684\u540d\u5b57] [\u7ed9\u7f51\u7ad9\u8d77\u7684\u540d\u5b57] [ \u767e\u5ea6 ]: https://www.baidu.com/ [ here ][ \u767e\u5ea6 ] \u56fe\u7247 \u4e5f\u6709\u884c\u5185\u5f0f\u4e0e\u53c2\u8003\u5f0f\uff0c\u9700\u8981\u5728\u524d\u9762\u52a0\u4e2a ! ![\u56fe\u7247\u540d][\u5177\u4f53\u5730\u5740\uff0c\u672c\u5730\u6216\u8005\u7f51\u9875] HTML \u7528 HTML \u6765\u505a\u8d85\u94fe\u63a5\u66f4\u65b9\u4fbf\uff0c\u5bf9\u56fe\u7247\u8fd8\u80fd\u8fdb\u884c\u5927\u5c0f\u7684\u8c03\u6574\uff0c\u4ee5\u56fe\u7247\u4e3a\u4f8b < img src = \"\u56fe\u7247\u94fe\u63a5\" /> \u9875\u5185\u8df3\u8f6c \u9700\u8981\u5b9a\u4e49\u8df3\u8f6c\u7684\u51fa\u53d1\u70b9\u548c\u7ec8\u70b9\uff08\u951a\u70b9\uff09\uff0c\u53ef\u80fd\u5e76\u4e0d\u4e00\u5b9a\u662f span [\u51fa\u53d1\u70b9](#id) < span id = \"id\" > \u951a\u70b9 </ span > \u6570\u5b66\u516c\u5f0f \u00b6 1.\u5185\u8054\u5f0f typora\u4e2d \u6587\u4ef6-\u504f\u597d\u8bbe\u7f6e-markdown-\u6253\u5f00\u5185\u8054\u516c\u5f0f $\u516c\u5f0f\u5185\u5bb9$ 2.\u975e\u5185\u8054\u5f0f \u6dfb\u52a0\u6570\u5b66\u516c\u5f0f\uff1a $$ \u516c\u5f0f\u5185\u5bb9 $$ \u5e38\u7528\u7b26\u53f7 \u8fd9\u91cc\u4ec5\u5217\u51fa\u4e00\u4e9b\u5e38\u7528\u7684\uff0c\u5177\u4f53\u8bf7\u770b\u53c2\u8003 \u7b26\u53f7 \u6548\u679c \u8868\u793a\u65b9\u5f0f \u4e0a\u4e0b\u6807 \\(x^2\\) x^2 x_2 \u5206\u5f0f \\(\\frac{1}{2}\\) \\frac{1}{2} \u6839\u53f7 \\(\\sqrt{2}\\) \\sqrt{2} \u77e2\u91cf \\(\\vec{a}\\) \\vec{a} \u4e0d\u5b9a\u79ef\u5206 \\(\\int{x}dx\\) \\int{x}dx \u5b9a\u79ef\u5206 \\(\\int_{1}^{2}{x}dx\\) \\int_{1}^{2}{x}dx \u7a7a\u683c \\quad \u6781\u9650 \\(\\lim{a+b}\\) \\lim{a+b} \\(\\lim_{n\\rightarrow+\\infty}\\) \\lim_{n\\rightarrow+\\infty} \\(\\lim_{n\\rightarrow+\\infty}{a+b}\\) \\lim_{n\\rightarrow+\\infty}{a+b} \u7d2f\u52a0 \\(\\sum{a}\\) \\sum{a} \\(\\sum_{i=1}^{n}{a_i}\\) \\sum_{i=1}^{n}{a_i} \u7d2f\u4e58 \\(\\prod{x}\\) \\prod{x} \\(\\prod_{i=1}^{n}{x_i}\\) \\prod_{i=1}^{n}{x_i} \u5bf9\u6570\u51fd\u6570 \\(\\ln2\\) \\ln2 \\(\\log_{11}{121}\\) \\log_{11}{121} \\(\\lg10\\) \\lg10 \u52a0\u51cf \\(\\pm\\) \\pm \u53c9\u4e58 \\(\\times\\) \\times \u70b9\u4e58 \\(\\cdot\\) \\cdot \u9664\u6cd5 \\(\u00f7\\) \\div \u4e0d\u7b49 \\(\\neq\\) \\neq \u6052\u7b49 \\(\\equiv\\) \\equiv \u5c0f\u4e8e\u7b49\u4e8e \\(\\leq\\) \\leq \u5927\u4e8e\u7b49\u4e8e \\(\\geq\\) \\geq \u7ea6\u7b49\u4e8e \\(\\approx\\) \\approx \u56e0\u4e3a \\(\\because\\) \\because \u6240\u4ee5 \\(\\therefore\\) \\therefore \u5408\u53d6 \\(\\wedge\\) \\wedge \u6790\u53d6 \\(\\vee\\) \\vee \u8574\u542b \\(\\Rightarrow\\) \\Rightarrow \u975e \\(\\urcorner\\) \\urcorner \u5927\u62ec\u53f7 \\[ y = \\begin{cases} 1 &x\\geq 0 \\\\ 0 &x<0 \\end{cases} \\] y = \\begin{cases} 1 &x\\geq 0 \\\\ 0 &x<0 \\end{cases} \u77e9\u9635 \\[ \\begin{bmatrix} a & b \\\\ c & d \\end{bmatrix} \\] \\begin{bmatrix} a & b \\\\ c & d \\end{bmatrix} \u8868\u683c\u5143\u7d20 \u00b6 typora \u4e2d\u4f7f\u7528\u5feb\u6377\u952e Ctrl+T name|score ----|---- abcd|100 defg|0 name score abcd 100 defg 0 \u6298\u53e0\u4ee3\u7801\u548c\u4fa7\u8fb9\u680f \u00b6 typora\u4e2d\u6298\u53e0\u4fa7\u8fb9\u680f\uff1a\u6587\u4ef6-\u504f\u597d\u8bbe\u7f6e-\u5916\u89c2-\u4fa7\u8fb9\u680f \u6298\u53e0\u4ee3\u7801\uff1a <details> <summary>tag</summary> <code> Hello world! </code> </details> \u6548\u679c\u5982\u4e0b\uff1a tag Hello world! \u5bfc\u51fa\u5176\u4ed6\u683c\u5f0f \u00b6 typora \u4e2d\u53ef\u4ee5\u76f4\u63a5\u70b9\u51fb \u6587\u4ef6-\u5bfc\u51fa \u5e76\u9009\u62e9\u6587\u4ef6\u683c\u5f0f\u5373\u53ef \u5bfc\u51fa\u4e3a word \u4e4b\u524d\u9700\u8981\u4e0b\u8f7d pandoc\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003\u7f51\u4e0a\u535a\u5ba2 Mermaid \u00b6 Typora \u652f\u6301\u6e32\u67d3 mermaid\uff0c\u9700\u8981\u5728 Typora \u4e2d\u5c06\u4ee3\u7801\u5757\u7684\u8bed\u8a00\u9009\u62e9\u4e3a Mermaid \u53c2\u8003\uff1a Mermaid\u4ece\u5165\u95e8\u5230\u5165\u571f\u2014\u2014Markdown\u8fdb\u9636\u8bed\u6cd5 - \u77e5\u4e4e (zhihu.com) \u997c\u72b6\u56fe \u00b6 pie title \u4e3a\u4ec0\u4e48\u603b\u662f\u5b85\u5728\u5bb6\u91cc\uff1f \"\u559c\u6b22\u5b85\" : 15 \"\u5929\u6c14\u592a\u70ed\u6216\u592a\u51b7\" : 20 \"\u7a77\" : 500 title \u662f\u53ef\u9009\u7684 pie title \u4e3a\u4ec0\u4e48\u603b\u662f\u5b85\u5728\u5bb6\u91cc\uff1f \"\u559c\u6b22\u5b85\" : 15 \"\u5929\u6c14\u592a\u70ed\u6216\u592a\u51b7\" : 20 \"\u7a77\" : 500 \u6d41\u7a0b\u56fe \u00b6 graph LR A[Start] --> B{Is it?}; B -- Yes --> C[OK]; C --> D[Rethink]; D --> B; B -- No ----> E[End]; graph LR A[Start] --> B{Is it?}; B -- Yes --> C[OK]; C --> D[Rethink]; D --> B; B -- No ----> E[End]; \u58f0\u660e \u00b6 \u5148\u58f0\u660e\u6d41\u7a0b\u56fe\u548c\u65b9\u5411 graph \u6216 graph TB \u6216 graph TD \uff1a\u4ece\u4e0a\u5f80\u4e0b graph BT \uff1a\u4ece\u4e0b\u5f80\u4e0a graph LR \uff1a\u4ece\u5de6\u5f80\u53f3 graph RL \uff1a\u4ece\u53f3\u5f80\u5de6 \u7ed3\u70b9 \u00b6 \u53ef\u4ee5\u4e3a\u7ed3\u70b9\u7f16\u53f7\uff0c\u53ef\u4ee5\u6307\u5b9a\u7ed3\u70b9\u5f62\u72b6\uff0c\u9ed8\u8ba4\u4e3a\u77e9\u5f62 \u65e0\u7f16\u53f7\u7ed3\u70b9\uff0c\u76f4\u63a5\u5199\u540d\u5b57\u5373\u53ef\uff0c\u4e14\u5185\u5bb9\u4e0d\u80fd\u4e3a\u7a7a\u683c \u6709\u7f16\u53f7\u7ed3\u70b9\uff0c\u7f16\u53f7\u540e\u5199\u5185\u5bb9\uff0c\u4e14\u5185\u5bb9\u53ef\u4ee5\u4e3a\u7a7a\u683c graph \u9ed8\u8ba4\u65b9\u5f62 id1[\u65b9\u5f62] id2(\u5706\u8fb9\u77e9\u5f62) id3([\u4f53\u80b2\u573a\u5f62]) id4[[\u5b50\u7a0b\u5e8f\u5f62]] id5[(\u5706\u67f1\u5f62)] id6((\u5706\u5f62)) graph \u9ed8\u8ba4\u65b9\u5f62 id1[\u65b9\u5f62] id2(\u5706\u8fb9\u77e9\u5f62) id3([\u4f53\u80b2\u573a\u5f62]) id4[[\u5b50\u7a0b\u5e8f\u5f62]] id5[(\u5706\u67f1\u5f62)] id6((\u5706\u5f62)) graph id1{\u83f1\u5f62} id2{{\u516d\u89d2\u5f62}} id3[/\u5e73\u884c\u56db\u8fb9\u5f62/] id4[\\\u53cd\u5411\u5e73\u884c\u56db\u8fb9\u5f62\\] id5[/\u68af\u5f62\\] id6[\\\u53cd\u5411\u68af\u5f62/] graph id1{\u83f1\u5f62} id2{{\u516d\u89d2\u5f62}} id3[/\u5e73\u884c\u56db\u8fb9\u5f62/] id4[\\\u53cd\u5411\u5e73\u884c\u56db\u8fb9\u5f62\\] id5[/\u68af\u5f62\\] id6[\\\u53cd\u5411\u68af\u5f62/] \u8fde\u7ebf\u6837\u5f0f \u00b6 \u53ef\u4ee5\u6709\u6587\u672c \u5b9e\u7ebf\u7bad\u5934\uff0c\u6587\u672c\u6709 2 \u79cd\u4e66\u5199\u65b9\u5f0f graph LR a-->b--\u6587\u672c1-->c-->|\u6587\u672c2|d graph LR a-->b--\u6587\u672c1-->c-->|\u6587\u672c2|d \u7c97\u5b9e\u7ebf graph LR a==>b==\u6587\u672c==>c graph LR a==>b==\u6587\u672c==>c==>|\u6587\u672c2|d \u865a\u7ebf\u7bad\u5934 graph LR a-.->b-.\u6587\u672c.->c graph LR a-.->b-.\u6587\u672c.->c \u65e0\u7bad\u5934\u7ebf\uff0c\u4e0a\u9762\u4e09\u79cd\u7bad\u5934\u7684\u6539\u5199 graph LR a --- b graph LR a---b--\u6587\u672c1---c---|\u6587\u672c2|d===e==\u6587\u672c3===f-.-g-.\u6587\u672c4.-h \u5176\u4ed6\u8fde\u7ebf\uff0c\u5c06 graph \u5173\u952e\u5b57\u6539\u4e3a flowchart flowchart LR A o--o B B <--> C C x--x D flowchart LR A o--o B B <--> C C x--x D \u5ef6\u957f\u8fde\u7ebf\uff1a\u589e\u52a0\u76f8\u5e94\u5b57\u7b26\u5373\u53ef\uff0c\u5982\u4e0b\u56fe\u4e2d\u7684B\u5230E\uff0c\u8fde\u7ebf\u4e2d\u589e\u52a0\u4e86\u4e00\u4e2a - \u3002\u5b57\u7b26\u53ef\u591a\u6b21\u6dfb\u52a0 graph LR A[Start] --> B{Is it?} B -->|Yes| C[OK] C --> D[Rethink] D --> B B --->|No| E[End] graph LR A[Start] --> B{Is it?} B -->|Yes| C[OK] C --> D[Rethink] D --> B B --->|No| E[End] \u591a\u91cd\u94fe\uff0c\u4f7f\u7528 & \uff0c\u591a\u6b21\u8fde\u7ebf\u4e5f\u53ef\u4ee5 graph a --> b & c--> d A & B--> C & D X --> M X --> N Y --> M Y --> N graph a --> b & c--> d A & B--> C & D X --> M X --> N Y --> M Y --> N \u6ce8\u91ca \u00b6 graph LR %% \u6ce8\u91ca A[Start] --> B{Is it?} B -->|Yes| C[OK] C --> D[Rethink] D --> B B --->|No| E[End] graph LR %% \u6ce8\u91ca A[Start] --> B{Is it?} B -->|Yes| C[OK] C --> D[Rethink] D --> B B --->|No| E[End] \u53c2\u8003 \u00b6 Introduction | Learning-Markdown (Markdown \u5165\u95e8\u53c2\u8003) Supported Functions \u00b7 KaTeX Mathjax\u516c\u5f0f\u6559\u7a0b_dabokele\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_mathjax\u516c\u5f0f Mermaid\u4ece\u5165\u95e8\u5230\u5165\u571f\u2014\u2014Markdown\u8fdb\u9636\u8bed\u6cd5 - \u77e5\u4e4e (zhihu.com)","title":"Markdown"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#markdown","text":"\u4e00\u79cd\u65b9\u4fbf\u7b80\u5355\u7684\u6392\u7248\u8bed\u8a00 \u4e0d\u540c\u7684\u5e73\u53f0\u4f7f\u7528 Markdow \u89c4\u5219\u53ef\u80fd\u6709\u4e9b\u8bb8\u4e0d\u540c\uff0c\u6bd4\u5982\u6807\u9898 # \u540e\u9762\u53ef\u80fd\u4e0d\u9700\u8981\u52a0\u7a7a\u683c\uff0c\u672c\u6587\u4e3b\u8981\u57fa\u4e8e typora","title":"Markdown"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_1","text":"","title":"\u57fa\u672c\u8bed\u6cd5"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_2","text":"\u4e00\u7ea7\u6807\u9898 # + \u7a7a\u683c \u4e8c\u7ea7\u6807\u9898 ## + \u7a7a\u683c ...\u6700\u591a\u6709\u516d\u7ea7\u6807\u9898 # Markdown ## \u57fa\u672c\u8bed\u6cd5","title":"\u6807\u9898"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_3","text":"> + \u7a7a\u683c \u8fd9\u662f\u4e00\u4e2a\u4f8b\u5b50 \u5f15\u7528\u53ef\u4ee5\u5d4c\u5957 \u4f8b\u5b50 \u5d4c\u5957","title":"\u5f15\u7528"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_4","text":"* \u548c _ \u90fd\u53ef\u4ee5\u8868\u793a\u5f3a\u8c03 \u4f7f\u7528\u65b9\u5f0f\uff1a\u5728\u9700\u8981\u5f3a\u8c03\u7684\u90e8\u5206\u7684\u5934\u548c\u5c3e\u90fd\u8981\u52a0 \u4e00\u4e2a * \u6216\u8005 _ \u8868\u793a \u503e\u659c \u4e24\u4e2a * \u6216\u8005 _ \u8868\u793a \u52a0\u7c97 \u4e09\u4e2a * \u6216\u8005 _ \u8868\u793a \u52a0\u7c97\uff0b\u503e\u659c `\u53ef\u4ee5\u7528\u4e8e\u5f3a\u8c03\u4e00\u4e9b\u5b57\u7b26\uff0c\u8bed\u6cd5\u5982\u4e0b\uff1a `+` \u6548\u679c\uff1a +","title":"\u5f3a\u8c03"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_5","text":"* + \u7a7a\u683c \u6216\u8005 + + \u7a7a\u683c \u8fd9\u662f\u4e00\u4e2a\u4f8b\u5b50 \u8fd9\u662f\u4e00\u4e2a\u4f8b\u5b50 \u5728\u4e00\u4e2a\u5217\u8868\u4e0b\u6309 tab \u4f1a\u53d8\u6210\u4e8c\u7ea7\u5217\u8868 \u8fd9\u662f\u4e00\u7ea7\u5217\u8868 \u8fd9\u662f\u4e8c\u7ea7\u5217\u8868","title":"\u5217\u8868"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_6","text":"``` + \u8bed\u8a00(\u6bd4\u5982C++) + \u56de\u8f66 \u6548\u679c\u5982\u4e0b: #include <iostream> using namespace std ; int main () { cout << \"hello, world.\" return 0 ; }","title":"\u4ee3\u7801\u5757"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_7","text":"\u4e09\u4e2a\u6216\u8005\u66f4\u591a\u7684 + \u6216 _ \u6216 - + \u56de\u8f66 \u6548\u679c\uff1a","title":"\u5206\u5272\u7ebf"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_8","text":"\u884c\u5185\u5f0f \u683c\u5f0f\uff1a[\u540d\u5b57] (URL) [ \u767e\u5ea6 ]( https://www.baidu.com/ ) \u6548\u679c\u5982\u4e0b\uff1a \u767e\u5ea6 \u53c2\u8003\u5f0f \u5728\u8981\u591a\u6b21\u4f7f\u7528\u540c\u4e00\u4e2a\u8d85\u94fe\u63a5\u65f6\u4f7f\u7528 \u683c\u5f0f\uff1a[\u7ed9\u7f51\u7ad9\u8d77\u7684\u540d\u5b57]\uff1aURL \uff08\u76f8\u5f53\u4e8e\u5b9a\u4e49\uff09 \u4f7f\u7528\u65b9\u5f0f\uff1a[\u8d85\u94fe\u63a5\u7684\u540d\u5b57] [\u7ed9\u7f51\u7ad9\u8d77\u7684\u540d\u5b57] [ \u767e\u5ea6 ]: https://www.baidu.com/ [ here ][ \u767e\u5ea6 ] \u56fe\u7247 \u4e5f\u6709\u884c\u5185\u5f0f\u4e0e\u53c2\u8003\u5f0f\uff0c\u9700\u8981\u5728\u524d\u9762\u52a0\u4e2a ! ![\u56fe\u7247\u540d][\u5177\u4f53\u5730\u5740\uff0c\u672c\u5730\u6216\u8005\u7f51\u9875] HTML \u7528 HTML \u6765\u505a\u8d85\u94fe\u63a5\u66f4\u65b9\u4fbf\uff0c\u5bf9\u56fe\u7247\u8fd8\u80fd\u8fdb\u884c\u5927\u5c0f\u7684\u8c03\u6574\uff0c\u4ee5\u56fe\u7247\u4e3a\u4f8b < img src = \"\u56fe\u7247\u94fe\u63a5\" /> \u9875\u5185\u8df3\u8f6c \u9700\u8981\u5b9a\u4e49\u8df3\u8f6c\u7684\u51fa\u53d1\u70b9\u548c\u7ec8\u70b9\uff08\u951a\u70b9\uff09\uff0c\u53ef\u80fd\u5e76\u4e0d\u4e00\u5b9a\u662f span [\u51fa\u53d1\u70b9](#id) < span id = \"id\" > \u951a\u70b9 </ span >","title":"\u8d85\u94fe\u63a5\u4e0e\u56fe\u7247"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_9","text":"1.\u5185\u8054\u5f0f typora\u4e2d \u6587\u4ef6-\u504f\u597d\u8bbe\u7f6e-markdown-\u6253\u5f00\u5185\u8054\u516c\u5f0f $\u516c\u5f0f\u5185\u5bb9$ 2.\u975e\u5185\u8054\u5f0f \u6dfb\u52a0\u6570\u5b66\u516c\u5f0f\uff1a $$ \u516c\u5f0f\u5185\u5bb9 $$ \u5e38\u7528\u7b26\u53f7 \u8fd9\u91cc\u4ec5\u5217\u51fa\u4e00\u4e9b\u5e38\u7528\u7684\uff0c\u5177\u4f53\u8bf7\u770b\u53c2\u8003 \u7b26\u53f7 \u6548\u679c \u8868\u793a\u65b9\u5f0f \u4e0a\u4e0b\u6807 \\(x^2\\) x^2 x_2 \u5206\u5f0f \\(\\frac{1}{2}\\) \\frac{1}{2} \u6839\u53f7 \\(\\sqrt{2}\\) \\sqrt{2} \u77e2\u91cf \\(\\vec{a}\\) \\vec{a} \u4e0d\u5b9a\u79ef\u5206 \\(\\int{x}dx\\) \\int{x}dx \u5b9a\u79ef\u5206 \\(\\int_{1}^{2}{x}dx\\) \\int_{1}^{2}{x}dx \u7a7a\u683c \\quad \u6781\u9650 \\(\\lim{a+b}\\) \\lim{a+b} \\(\\lim_{n\\rightarrow+\\infty}\\) \\lim_{n\\rightarrow+\\infty} \\(\\lim_{n\\rightarrow+\\infty}{a+b}\\) \\lim_{n\\rightarrow+\\infty}{a+b} \u7d2f\u52a0 \\(\\sum{a}\\) \\sum{a} \\(\\sum_{i=1}^{n}{a_i}\\) \\sum_{i=1}^{n}{a_i} \u7d2f\u4e58 \\(\\prod{x}\\) \\prod{x} \\(\\prod_{i=1}^{n}{x_i}\\) \\prod_{i=1}^{n}{x_i} \u5bf9\u6570\u51fd\u6570 \\(\\ln2\\) \\ln2 \\(\\log_{11}{121}\\) \\log_{11}{121} \\(\\lg10\\) \\lg10 \u52a0\u51cf \\(\\pm\\) \\pm \u53c9\u4e58 \\(\\times\\) \\times \u70b9\u4e58 \\(\\cdot\\) \\cdot \u9664\u6cd5 \\(\u00f7\\) \\div \u4e0d\u7b49 \\(\\neq\\) \\neq \u6052\u7b49 \\(\\equiv\\) \\equiv \u5c0f\u4e8e\u7b49\u4e8e \\(\\leq\\) \\leq \u5927\u4e8e\u7b49\u4e8e \\(\\geq\\) \\geq \u7ea6\u7b49\u4e8e \\(\\approx\\) \\approx \u56e0\u4e3a \\(\\because\\) \\because \u6240\u4ee5 \\(\\therefore\\) \\therefore \u5408\u53d6 \\(\\wedge\\) \\wedge \u6790\u53d6 \\(\\vee\\) \\vee \u8574\u542b \\(\\Rightarrow\\) \\Rightarrow \u975e \\(\\urcorner\\) \\urcorner \u5927\u62ec\u53f7 \\[ y = \\begin{cases} 1 &x\\geq 0 \\\\ 0 &x<0 \\end{cases} \\] y = \\begin{cases} 1 &x\\geq 0 \\\\ 0 &x<0 \\end{cases} \u77e9\u9635 \\[ \\begin{bmatrix} a & b \\\\ c & d \\end{bmatrix} \\] \\begin{bmatrix} a & b \\\\ c & d \\end{bmatrix}","title":"\u6570\u5b66\u516c\u5f0f"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_10","text":"typora \u4e2d\u4f7f\u7528\u5feb\u6377\u952e Ctrl+T name|score ----|---- abcd|100 defg|0 name score abcd 100 defg 0","title":"\u8868\u683c\u5143\u7d20"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_11","text":"typora\u4e2d\u6298\u53e0\u4fa7\u8fb9\u680f\uff1a\u6587\u4ef6-\u504f\u597d\u8bbe\u7f6e-\u5916\u89c2-\u4fa7\u8fb9\u680f \u6298\u53e0\u4ee3\u7801\uff1a <details> <summary>tag</summary> <code> Hello world! </code> </details> \u6548\u679c\u5982\u4e0b\uff1a tag Hello world!","title":"\u6298\u53e0\u4ee3\u7801\u548c\u4fa7\u8fb9\u680f"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_12","text":"typora \u4e2d\u53ef\u4ee5\u76f4\u63a5\u70b9\u51fb \u6587\u4ef6-\u5bfc\u51fa \u5e76\u9009\u62e9\u6587\u4ef6\u683c\u5f0f\u5373\u53ef \u5bfc\u51fa\u4e3a word \u4e4b\u524d\u9700\u8981\u4e0b\u8f7d pandoc\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003\u7f51\u4e0a\u535a\u5ba2","title":"\u5bfc\u51fa\u5176\u4ed6\u683c\u5f0f"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#mermaid","text":"Typora \u652f\u6301\u6e32\u67d3 mermaid\uff0c\u9700\u8981\u5728 Typora \u4e2d\u5c06\u4ee3\u7801\u5757\u7684\u8bed\u8a00\u9009\u62e9\u4e3a Mermaid \u53c2\u8003\uff1a Mermaid\u4ece\u5165\u95e8\u5230\u5165\u571f\u2014\u2014Markdown\u8fdb\u9636\u8bed\u6cd5 - \u77e5\u4e4e (zhihu.com)","title":"Mermaid"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_13","text":"pie title \u4e3a\u4ec0\u4e48\u603b\u662f\u5b85\u5728\u5bb6\u91cc\uff1f \"\u559c\u6b22\u5b85\" : 15 \"\u5929\u6c14\u592a\u70ed\u6216\u592a\u51b7\" : 20 \"\u7a77\" : 500 title \u662f\u53ef\u9009\u7684 pie title \u4e3a\u4ec0\u4e48\u603b\u662f\u5b85\u5728\u5bb6\u91cc\uff1f \"\u559c\u6b22\u5b85\" : 15 \"\u5929\u6c14\u592a\u70ed\u6216\u592a\u51b7\" : 20 \"\u7a77\" : 500","title":"\u997c\u72b6\u56fe"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_14","text":"graph LR A[Start] --> B{Is it?}; B -- Yes --> C[OK]; C --> D[Rethink]; D --> B; B -- No ----> E[End]; graph LR A[Start] --> B{Is it?}; B -- Yes --> C[OK]; C --> D[Rethink]; D --> B; B -- No ----> E[End];","title":"\u6d41\u7a0b\u56fe"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_15","text":"\u5148\u58f0\u660e\u6d41\u7a0b\u56fe\u548c\u65b9\u5411 graph \u6216 graph TB \u6216 graph TD \uff1a\u4ece\u4e0a\u5f80\u4e0b graph BT \uff1a\u4ece\u4e0b\u5f80\u4e0a graph LR \uff1a\u4ece\u5de6\u5f80\u53f3 graph RL \uff1a\u4ece\u53f3\u5f80\u5de6","title":"\u58f0\u660e"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_16","text":"\u53ef\u4ee5\u4e3a\u7ed3\u70b9\u7f16\u53f7\uff0c\u53ef\u4ee5\u6307\u5b9a\u7ed3\u70b9\u5f62\u72b6\uff0c\u9ed8\u8ba4\u4e3a\u77e9\u5f62 \u65e0\u7f16\u53f7\u7ed3\u70b9\uff0c\u76f4\u63a5\u5199\u540d\u5b57\u5373\u53ef\uff0c\u4e14\u5185\u5bb9\u4e0d\u80fd\u4e3a\u7a7a\u683c \u6709\u7f16\u53f7\u7ed3\u70b9\uff0c\u7f16\u53f7\u540e\u5199\u5185\u5bb9\uff0c\u4e14\u5185\u5bb9\u53ef\u4ee5\u4e3a\u7a7a\u683c graph \u9ed8\u8ba4\u65b9\u5f62 id1[\u65b9\u5f62] id2(\u5706\u8fb9\u77e9\u5f62) id3([\u4f53\u80b2\u573a\u5f62]) id4[[\u5b50\u7a0b\u5e8f\u5f62]] id5[(\u5706\u67f1\u5f62)] id6((\u5706\u5f62)) graph \u9ed8\u8ba4\u65b9\u5f62 id1[\u65b9\u5f62] id2(\u5706\u8fb9\u77e9\u5f62) id3([\u4f53\u80b2\u573a\u5f62]) id4[[\u5b50\u7a0b\u5e8f\u5f62]] id5[(\u5706\u67f1\u5f62)] id6((\u5706\u5f62)) graph id1{\u83f1\u5f62} id2{{\u516d\u89d2\u5f62}} id3[/\u5e73\u884c\u56db\u8fb9\u5f62/] id4[\\\u53cd\u5411\u5e73\u884c\u56db\u8fb9\u5f62\\] id5[/\u68af\u5f62\\] id6[\\\u53cd\u5411\u68af\u5f62/] graph id1{\u83f1\u5f62} id2{{\u516d\u89d2\u5f62}} id3[/\u5e73\u884c\u56db\u8fb9\u5f62/] id4[\\\u53cd\u5411\u5e73\u884c\u56db\u8fb9\u5f62\\] id5[/\u68af\u5f62\\] id6[\\\u53cd\u5411\u68af\u5f62/]","title":"\u7ed3\u70b9"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_17","text":"\u53ef\u4ee5\u6709\u6587\u672c \u5b9e\u7ebf\u7bad\u5934\uff0c\u6587\u672c\u6709 2 \u79cd\u4e66\u5199\u65b9\u5f0f graph LR a-->b--\u6587\u672c1-->c-->|\u6587\u672c2|d graph LR a-->b--\u6587\u672c1-->c-->|\u6587\u672c2|d \u7c97\u5b9e\u7ebf graph LR a==>b==\u6587\u672c==>c graph LR a==>b==\u6587\u672c==>c==>|\u6587\u672c2|d \u865a\u7ebf\u7bad\u5934 graph LR a-.->b-.\u6587\u672c.->c graph LR a-.->b-.\u6587\u672c.->c \u65e0\u7bad\u5934\u7ebf\uff0c\u4e0a\u9762\u4e09\u79cd\u7bad\u5934\u7684\u6539\u5199 graph LR a --- b graph LR a---b--\u6587\u672c1---c---|\u6587\u672c2|d===e==\u6587\u672c3===f-.-g-.\u6587\u672c4.-h \u5176\u4ed6\u8fde\u7ebf\uff0c\u5c06 graph \u5173\u952e\u5b57\u6539\u4e3a flowchart flowchart LR A o--o B B <--> C C x--x D flowchart LR A o--o B B <--> C C x--x D \u5ef6\u957f\u8fde\u7ebf\uff1a\u589e\u52a0\u76f8\u5e94\u5b57\u7b26\u5373\u53ef\uff0c\u5982\u4e0b\u56fe\u4e2d\u7684B\u5230E\uff0c\u8fde\u7ebf\u4e2d\u589e\u52a0\u4e86\u4e00\u4e2a - \u3002\u5b57\u7b26\u53ef\u591a\u6b21\u6dfb\u52a0 graph LR A[Start] --> B{Is it?} B -->|Yes| C[OK] C --> D[Rethink] D --> B B --->|No| E[End] graph LR A[Start] --> B{Is it?} B -->|Yes| C[OK] C --> D[Rethink] D --> B B --->|No| E[End] \u591a\u91cd\u94fe\uff0c\u4f7f\u7528 & \uff0c\u591a\u6b21\u8fde\u7ebf\u4e5f\u53ef\u4ee5 graph a --> b & c--> d A & B--> C & D X --> M X --> N Y --> M Y --> N graph a --> b & c--> d A & B--> C & D X --> M X --> N Y --> M Y --> N","title":"\u8fde\u7ebf\u6837\u5f0f"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_18","text":"graph LR %% \u6ce8\u91ca A[Start] --> B{Is it?} B -->|Yes| C[OK] C --> D[Rethink] D --> B B --->|No| E[End] graph LR %% \u6ce8\u91ca A[Start] --> B{Is it?} B -->|Yes| C[OK] C --> D[Rethink] D --> B B --->|No| E[End]","title":"\u6ce8\u91ca"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_19","text":"Introduction | Learning-Markdown (Markdown \u5165\u95e8\u53c2\u8003) Supported Functions \u00b7 KaTeX Mathjax\u516c\u5f0f\u6559\u7a0b_dabokele\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_mathjax\u516c\u5f0f Mermaid\u4ece\u5165\u95e8\u5230\u5165\u571f\u2014\u2014Markdown\u8fdb\u9636\u8bed\u6cd5 - \u77e5\u4e4e (zhihu.com)","title":"\u53c2\u8003"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/","text":"\u57fa\u4e8eMaterial for MkDocs\u642d\u5efa\u9759\u6001\u6587\u6863 \u00b6 Mkdocs \u53ef\u4ee5\u5341\u5206\u65b9\u4fbf\u7684\u5efa\u7acb\u4e00\u4e2a\u9759\u6001\u6587\u6863\uff0c\u6bd4\u5982 OI Wiki \uff0c\u6b64\u6587\u6863\u4e5f\u662f\u57fa\u4e8e Mkdocs \u6b64\u6587\u6863\u5185\u5bb9\u4ec5\u662f\u57fa\u4e8e\u4e2a\u4eba\u7ecf\u5386\u7684\u7406\u89e3 \u9700\u8981\u7684\u7528\u5230\u7684\u5de5\u5177\uff1a Markdown\u7f16\u8f91\u5668 \uff0c python3 \u5b89\u88c5/\u521d\u59cb\u5316/\u914d\u7f6e\u8303\u4f8b \u00b6 \u5b89\u88c5 \u00b6 \u5229\u7528 python3 \u81ea\u5e26\u7684 pip \u5de5\u5177\u5728 cmd \u4e2d\u8f93\u5165 pip install mkdocs mkdocs-material \u5982\u679c\u540e\u9762\u63d0\u793a 'mkdocs' \u4e0d\u662f\u5185\u90e8\u6216\u5916\u90e8\u547d\u4ee4.... \u7684\u8bdd\u5c31\u9700\u8981\u81ea\u5df1\u52a0\u4e00\u4e0b\u73af\u5883\u53d8\u91cf \u521d\u59cb\u5316 \u00b6 \u5728\u4f60\u60f3\u8981\u65b0\u5efa\u6587\u6863\u7684\u76ee\u5f55\u542f\u52a8 cmd\uff0c\u5e76\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4 mkdocs new my-project \u7136\u540e\u6253\u5f00\u65b0\u5efa\u7684\u6587\u4ef6\u5939\u6253\u5f00 mkdocs.yml \uff0c\u4ee5\u4e0b\u5217\u51fa\u6211\u5199\u6b64\u6587\u6863\u65f6\u7684\u914d\u7f6e\u5e76\u914d\u4e0a\u4e86\u6ce8\u91ca\u4f5c\u4e3a\u53c2\u8003 # site site_name: hucorz's Docs # \u6587\u6863\u7684\u540d\u5b57\uff0c\u4f1a\u4f53\u73b0\u5728\u5de6\u4e0a\u89d2 site_url: https://hucorz.github.io/myDoc/ # \u7f51\u7ad9\u7684\u94fe\u63a5\uff0c\u4f3c\u4e4e\u70b9\u51fb\u5de6\u4e0a\u89d2\u7684logo\u540e\u4f1a\u8fdb\u53bb\uff0c\u6211\u4e5f\u6ca1\u505a\u5b9e\u9a8c # repo repo_name: 'hucorz/myDoc' # github\u4ed3\u5e93\u7684\u540d\u5b57\uff0c\u4f1a\u4f53\u73b0\u5728\u53f3\u4e0a\u89d2 repo_url: https://github.com/hucorz/myDoc # github\u4ed3\u5e93\u7684\u94fe\u63a5\uff0c\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684logo\u540e\u4f1a\u8fdb\u53bb nav: # \u5bfc\u822a\u9875\uff0c\u5177\u4f53\u5185\u5bb9\u8981\u57fa\u4e8e\u81ea\u5df1\u6587\u6863\u7684\u5185\u5bb9 - Home: 'index.md' # : \u540e\u9762\u662f\u6587\u4ef6\u7684\u540d\u5b57\uff0c\u524d\u9762\u662f\u6587\u6863\u4e2d\u663e\u793a\u7684\u540d\u5b57\uff0c\u53ef\u4ee5\u5d4c\u5957 - Makrdown: 'Markdown.md' - OI: - \u53c2\u8003: 'OI/\u53c2\u8003.md' - \u6570\u8bba: 'OI/\u6570\u8bba.md' - \u8ba1\u7b97\u51e0\u4f55: 'OI/\u8ba1\u7b97\u51e0\u4f55.md' - \u56fe\u8bba: 'OI/\u56fe\u8bba.md' - \u6570\u636e\u7ed3\u6784: 'OI/\u6570\u636e\u7ed3\u6784.md' - \u5b57\u7b26\u4e32: 'OI/\u5b57\u7b26\u4e32.md' - \u5176\u4ed6: 'OI/\u5176\u4ed6.md' - STL: 'OI/STL.md' - \u8bfe\u7a0b\u7b14\u8bb0: - \u53c2\u8003: '\u8bfe\u7a0b\u7b14\u8bb0/\u53c2\u8003.md' - \u6570\u636e\u5e93\u7cfb\u7edf: '\u8bfe\u7a0b\u7b14\u8bb0/\u6570\u636e\u5e93\u7cfb\u7edf.md' theme: name: 'material' # \u4e3b\u9898\uff0c\u5c31\u7528 material features: # \u8fd9\u540e\u9762\u662f\u4e3b\u9898\u7684\u914d\u7f6e\uff0c\u5177\u4f53\u6211\u4f1a\u5199\u5728\u6587\u6863\u540e\u9762 - navigation.tabs - navigation.tabs.sticky palette: primary: 'white' # \u914d\u8272 accent: 'indigo' logo: 'img/cat-solid.svg' # \u5de6\u4e0a\u89d2logo icon: repo: fontawesome/brands/github-alt # repo\u7684logo favicon: 'img/favicon.ico' #\u7f51\u9875\u56fe\u6807 markdown_extensions: - pymdownx.arithmatex: generic: true - pymdownx.emoji: emoji_index: !!python/name:materialx.emoji.twemoji emoji_generator: !!python/name:materialx.emoji.to_svg - pymdownx.highlight # \u4ee3\u7801\u9ad8\u4eae - pymdownx.superfences - toc: permalink: true # \u6bcf\u4e2a\u6807\u9898\u540e\u9762\u7684 \u951a\u94fe\u63a5 #toc_depth: 2 # table of content \u663e\u793a\u7684\u7ea7\u6570\uff0c0\u5c31\u4e0d\u4f1a\u663e\u793a extra_javascript: - javascripts/config.js - https://polyfill.io/v3/polyfill.min.js?features=es6 - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js plugins: - search: lang: ja # \u5b9e\u6d4b\u641c\u7d22\u8bed\u8a00\u6539\u6210\u65e5\u672c\u53ef\u4ee5\u652f\u6301\u4e2d\u6587\u641c\u641c \u90e8\u7f72 github \u00b6 \u9996\u5148\u9700\u8981\u4e00\u4e2a github \u8d26\u53f7\uff0c\u7136\u540e\u65b0\u5efa\u4e00\u4e2a\u7a7a\u4ed3\u5e93\uff0c\u5e76\u5229\u7528 git \u5c06\u4ed3\u5e93 clone \u5230\u672c\u5730 \u4ec5\u8bb2\u4e00\u4e0b\u6211\u9047\u5230\u7684\u95ee\u9898\uff1a Failed to connect to github.com port 443: Timed out \u89e3\u51b3\u65b9\u6cd5\uff1a\u7ed9 git \u8bbe\u7f6e\u4ee3\u7406 \u79d1\u5b66\u4e0a\u7f51\u65f6\u6253\u5f00 win10 \u8bbe\u7f6e\u91cc\u7684\u4ee3\u7406\u8bbe\u7f6e\uff0c\u627e\u5230\u4ee3\u7406\u7684\u5730\u5740\u548c\u7aef\u53e3 git config --global http.proxy 172.17.18.80:8080 # \u540e\u9762\u662f \u5730\u5740:\u7aef\u53e3 \u67e5\u770b\u662f\u5426\u6210\u529f git config --get http.proxy \u514b\u9686\u6210\u529f\u540e\u628a .yml \u548c docs \u653e\u5728\u514b\u9686\u6587\u4ef6\u5939\u91cc\uff0c\u7136\u540e\u5728\u6b64\u6587\u4ef6\u5939\u542f\u52a8 cmd\uff0c\u8f93\u5165\u4ee5\u4e0b\u6307\u4ee4\u5373\u53ef\u90e8\u7f72 mkdocs gh-deploy \u7f8e\u5316\u914d\u7f6e \u00b6 \u5b98\u65b9\u6587\u6863 \u6587\u6863\u540d\u79f0 \u00b6 site_name: hucorz's Docs site_url: https://hucorz.github.io/myDoc/ \u6587\u6863\u4e3b\u9898 \u00b6 theme: name: 'material' \u914d\u8272 \u00b6 \u914d\u8272\u76f8\u5173\u914d\u7f6e theme: palette: primary: 'white' accent: 'indigo' \u5bfc\u822a\u9875 \u00b6 \u5bfc\u822a\u9875\u76f8\u5173\u914d\u7f6e features: - navigation.tabs - navigation.tabs.sticky logo && favicon \u00b6 \u6587\u6863\u7684 logo && favicon \u00b6 logo && favicon \u76f8\u5173\u914d\u7f6e theme: # \u8fd9\u4e24\u4e2a\u6211\u90fd\u662f\u4e0b\u4e0b\u6765\u540e\u7528\u7684 logo: 'img/cat-solid.svg' favicon: 'img/favicon.ico' repo \u7684 logo \u00b6 repo \u76f8\u5173\u914d\u7f6e \u4f60\u9700\u8981\u5148\u5728\u914d\u7f6e\u4e2d\u6dfb\u52a0 repo \u7684\u540d\u5b57\u548c url repo_name: 'hucorz/myDoc' repo_url: https://github.com/hucorz/myDoc \u7136\u540e logo \u53c2\u8003\u7684\u5b98\u65b9\u6587\u6863\uff1a theme: icon: repo: fontawesome/brands/github-alt \u6269\u5c55 \u00b6 markdown\u6269\u5c55 \u00b6 \u6570\u5b66\u516c\u5f0f MathJax - Material for MkDocs markdown_extensions: - pymdownx.arithmatex: generic: true extra_javascript: - javascripts/config.js - https://polyfill.io/v3/polyfill.min.js?features=es6 - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js \u4ee3\u7801\u9ad8\u4eae Code blocks - Material for MkDocs markdown_extensions: - pymdownx.highlight # code hilight - pymdownx.superfences toc\uff08table of content\uff09 Setting up navigation - Material for MkDocs markdown_extensions: # \u8fd92\u4e2a\u90fd\u662f\u548c\u6bcf\u4e2amarkdown\u6587\u6863\u7684\u6807\u9898\u6709\u5173 - toc: permalink: true # \u5f00\u542f\u6bcf\u4e2a\u6807\u9898\u540e\u9762\u7684 \u951a\u94fe\u63a5 #toc_depth: 2 # toc\u663e\u793a\u7684\u7ea7\u6570,\u8d8a\u9ad8\u663e\u793a\u7684\u8d8a\u591a\uff0c\u4e0d\u5199\u90fd\u663e\u793a\uff0c0\u4e0d\u663e\u793a \u652f\u6301\u4e2d\u6587\u641c\u7d22 \u00b6 Setting up site search - Material for MkDocs plugins: - search: lang: ja \u4e00\u4e9b\u95ee\u9898\u7684\u89e3\u51b3\u529e\u6cd5 \u00b6 \u6570\u5b66\u516c\u5f0f\u4e0d\u80fd\u6b63\u5e38\u663e\u793a\uff1a \u5728 $$ \u524d\u540e\u52a0\u4e00\u884c\u7a7a\u884c \u53c2\u8003 \u00b6 1.\u4ecb\u7ecd - \u57fa\u4e8e Material for MkDocs \u642d\u5efa\u9759\u6001\u7f51\u9875 Material for MkDocs - Material forMkDocs Failed to connect to github.com port 443: Timed out_\u5929\u751f\u6211\u6750\u5fc5\u6709\u7528-CSDN\u535a\u5ba2","title":"Mkdocs"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#material-for-mkdocs","text":"Mkdocs \u53ef\u4ee5\u5341\u5206\u65b9\u4fbf\u7684\u5efa\u7acb\u4e00\u4e2a\u9759\u6001\u6587\u6863\uff0c\u6bd4\u5982 OI Wiki \uff0c\u6b64\u6587\u6863\u4e5f\u662f\u57fa\u4e8e Mkdocs \u6b64\u6587\u6863\u5185\u5bb9\u4ec5\u662f\u57fa\u4e8e\u4e2a\u4eba\u7ecf\u5386\u7684\u7406\u89e3 \u9700\u8981\u7684\u7528\u5230\u7684\u5de5\u5177\uff1a Markdown\u7f16\u8f91\u5668 \uff0c python3","title":"\u57fa\u4e8eMaterial for MkDocs\u642d\u5efa\u9759\u6001\u6587\u6863"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#_1","text":"","title":"\u5b89\u88c5/\u521d\u59cb\u5316/\u914d\u7f6e\u8303\u4f8b"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#_2","text":"\u5229\u7528 python3 \u81ea\u5e26\u7684 pip \u5de5\u5177\u5728 cmd \u4e2d\u8f93\u5165 pip install mkdocs mkdocs-material \u5982\u679c\u540e\u9762\u63d0\u793a 'mkdocs' \u4e0d\u662f\u5185\u90e8\u6216\u5916\u90e8\u547d\u4ee4.... \u7684\u8bdd\u5c31\u9700\u8981\u81ea\u5df1\u52a0\u4e00\u4e0b\u73af\u5883\u53d8\u91cf","title":"\u5b89\u88c5"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#_3","text":"\u5728\u4f60\u60f3\u8981\u65b0\u5efa\u6587\u6863\u7684\u76ee\u5f55\u542f\u52a8 cmd\uff0c\u5e76\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4 mkdocs new my-project \u7136\u540e\u6253\u5f00\u65b0\u5efa\u7684\u6587\u4ef6\u5939\u6253\u5f00 mkdocs.yml \uff0c\u4ee5\u4e0b\u5217\u51fa\u6211\u5199\u6b64\u6587\u6863\u65f6\u7684\u914d\u7f6e\u5e76\u914d\u4e0a\u4e86\u6ce8\u91ca\u4f5c\u4e3a\u53c2\u8003 # site site_name: hucorz's Docs # \u6587\u6863\u7684\u540d\u5b57\uff0c\u4f1a\u4f53\u73b0\u5728\u5de6\u4e0a\u89d2 site_url: https://hucorz.github.io/myDoc/ # \u7f51\u7ad9\u7684\u94fe\u63a5\uff0c\u4f3c\u4e4e\u70b9\u51fb\u5de6\u4e0a\u89d2\u7684logo\u540e\u4f1a\u8fdb\u53bb\uff0c\u6211\u4e5f\u6ca1\u505a\u5b9e\u9a8c # repo repo_name: 'hucorz/myDoc' # github\u4ed3\u5e93\u7684\u540d\u5b57\uff0c\u4f1a\u4f53\u73b0\u5728\u53f3\u4e0a\u89d2 repo_url: https://github.com/hucorz/myDoc # github\u4ed3\u5e93\u7684\u94fe\u63a5\uff0c\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684logo\u540e\u4f1a\u8fdb\u53bb nav: # \u5bfc\u822a\u9875\uff0c\u5177\u4f53\u5185\u5bb9\u8981\u57fa\u4e8e\u81ea\u5df1\u6587\u6863\u7684\u5185\u5bb9 - Home: 'index.md' # : \u540e\u9762\u662f\u6587\u4ef6\u7684\u540d\u5b57\uff0c\u524d\u9762\u662f\u6587\u6863\u4e2d\u663e\u793a\u7684\u540d\u5b57\uff0c\u53ef\u4ee5\u5d4c\u5957 - Makrdown: 'Markdown.md' - OI: - \u53c2\u8003: 'OI/\u53c2\u8003.md' - \u6570\u8bba: 'OI/\u6570\u8bba.md' - \u8ba1\u7b97\u51e0\u4f55: 'OI/\u8ba1\u7b97\u51e0\u4f55.md' - \u56fe\u8bba: 'OI/\u56fe\u8bba.md' - \u6570\u636e\u7ed3\u6784: 'OI/\u6570\u636e\u7ed3\u6784.md' - \u5b57\u7b26\u4e32: 'OI/\u5b57\u7b26\u4e32.md' - \u5176\u4ed6: 'OI/\u5176\u4ed6.md' - STL: 'OI/STL.md' - \u8bfe\u7a0b\u7b14\u8bb0: - \u53c2\u8003: '\u8bfe\u7a0b\u7b14\u8bb0/\u53c2\u8003.md' - \u6570\u636e\u5e93\u7cfb\u7edf: '\u8bfe\u7a0b\u7b14\u8bb0/\u6570\u636e\u5e93\u7cfb\u7edf.md' theme: name: 'material' # \u4e3b\u9898\uff0c\u5c31\u7528 material features: # \u8fd9\u540e\u9762\u662f\u4e3b\u9898\u7684\u914d\u7f6e\uff0c\u5177\u4f53\u6211\u4f1a\u5199\u5728\u6587\u6863\u540e\u9762 - navigation.tabs - navigation.tabs.sticky palette: primary: 'white' # \u914d\u8272 accent: 'indigo' logo: 'img/cat-solid.svg' # \u5de6\u4e0a\u89d2logo icon: repo: fontawesome/brands/github-alt # repo\u7684logo favicon: 'img/favicon.ico' #\u7f51\u9875\u56fe\u6807 markdown_extensions: - pymdownx.arithmatex: generic: true - pymdownx.emoji: emoji_index: !!python/name:materialx.emoji.twemoji emoji_generator: !!python/name:materialx.emoji.to_svg - pymdownx.highlight # \u4ee3\u7801\u9ad8\u4eae - pymdownx.superfences - toc: permalink: true # \u6bcf\u4e2a\u6807\u9898\u540e\u9762\u7684 \u951a\u94fe\u63a5 #toc_depth: 2 # table of content \u663e\u793a\u7684\u7ea7\u6570\uff0c0\u5c31\u4e0d\u4f1a\u663e\u793a extra_javascript: - javascripts/config.js - https://polyfill.io/v3/polyfill.min.js?features=es6 - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js plugins: - search: lang: ja # \u5b9e\u6d4b\u641c\u7d22\u8bed\u8a00\u6539\u6210\u65e5\u672c\u53ef\u4ee5\u652f\u6301\u4e2d\u6587\u641c\u641c","title":"\u521d\u59cb\u5316"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#github","text":"\u9996\u5148\u9700\u8981\u4e00\u4e2a github \u8d26\u53f7\uff0c\u7136\u540e\u65b0\u5efa\u4e00\u4e2a\u7a7a\u4ed3\u5e93\uff0c\u5e76\u5229\u7528 git \u5c06\u4ed3\u5e93 clone \u5230\u672c\u5730 \u4ec5\u8bb2\u4e00\u4e0b\u6211\u9047\u5230\u7684\u95ee\u9898\uff1a Failed to connect to github.com port 443: Timed out \u89e3\u51b3\u65b9\u6cd5\uff1a\u7ed9 git \u8bbe\u7f6e\u4ee3\u7406 \u79d1\u5b66\u4e0a\u7f51\u65f6\u6253\u5f00 win10 \u8bbe\u7f6e\u91cc\u7684\u4ee3\u7406\u8bbe\u7f6e\uff0c\u627e\u5230\u4ee3\u7406\u7684\u5730\u5740\u548c\u7aef\u53e3 git config --global http.proxy 172.17.18.80:8080 # \u540e\u9762\u662f \u5730\u5740:\u7aef\u53e3 \u67e5\u770b\u662f\u5426\u6210\u529f git config --get http.proxy \u514b\u9686\u6210\u529f\u540e\u628a .yml \u548c docs \u653e\u5728\u514b\u9686\u6587\u4ef6\u5939\u91cc\uff0c\u7136\u540e\u5728\u6b64\u6587\u4ef6\u5939\u542f\u52a8 cmd\uff0c\u8f93\u5165\u4ee5\u4e0b\u6307\u4ee4\u5373\u53ef\u90e8\u7f72 mkdocs gh-deploy","title":"\u90e8\u7f72 github"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#_4","text":"\u5b98\u65b9\u6587\u6863","title":"\u7f8e\u5316\u914d\u7f6e"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#_5","text":"site_name: hucorz's Docs site_url: https://hucorz.github.io/myDoc/","title":"\u6587\u6863\u540d\u79f0"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#_6","text":"theme: name: 'material'","title":"\u6587\u6863\u4e3b\u9898"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#_7","text":"\u914d\u8272\u76f8\u5173\u914d\u7f6e theme: palette: primary: 'white' accent: 'indigo'","title":"\u914d\u8272"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#_8","text":"\u5bfc\u822a\u9875\u76f8\u5173\u914d\u7f6e features: - navigation.tabs - navigation.tabs.sticky","title":"\u5bfc\u822a\u9875"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#logo-favicon","text":"","title":"logo &amp;&amp; favicon"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#logo-favicon_1","text":"logo && favicon \u76f8\u5173\u914d\u7f6e theme: # \u8fd9\u4e24\u4e2a\u6211\u90fd\u662f\u4e0b\u4e0b\u6765\u540e\u7528\u7684 logo: 'img/cat-solid.svg' favicon: 'img/favicon.ico'","title":"\u6587\u6863\u7684 logo &amp;&amp; favicon"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#repo-logo","text":"repo \u76f8\u5173\u914d\u7f6e \u4f60\u9700\u8981\u5148\u5728\u914d\u7f6e\u4e2d\u6dfb\u52a0 repo \u7684\u540d\u5b57\u548c url repo_name: 'hucorz/myDoc' repo_url: https://github.com/hucorz/myDoc \u7136\u540e logo \u53c2\u8003\u7684\u5b98\u65b9\u6587\u6863\uff1a theme: icon: repo: fontawesome/brands/github-alt","title":"repo \u7684 logo"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#_9","text":"","title":"\u6269\u5c55"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#markdown","text":"\u6570\u5b66\u516c\u5f0f MathJax - Material for MkDocs markdown_extensions: - pymdownx.arithmatex: generic: true extra_javascript: - javascripts/config.js - https://polyfill.io/v3/polyfill.min.js?features=es6 - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js \u4ee3\u7801\u9ad8\u4eae Code blocks - Material for MkDocs markdown_extensions: - pymdownx.highlight # code hilight - pymdownx.superfences toc\uff08table of content\uff09 Setting up navigation - Material for MkDocs markdown_extensions: # \u8fd92\u4e2a\u90fd\u662f\u548c\u6bcf\u4e2amarkdown\u6587\u6863\u7684\u6807\u9898\u6709\u5173 - toc: permalink: true # \u5f00\u542f\u6bcf\u4e2a\u6807\u9898\u540e\u9762\u7684 \u951a\u94fe\u63a5 #toc_depth: 2 # toc\u663e\u793a\u7684\u7ea7\u6570,\u8d8a\u9ad8\u663e\u793a\u7684\u8d8a\u591a\uff0c\u4e0d\u5199\u90fd\u663e\u793a\uff0c0\u4e0d\u663e\u793a","title":"markdown\u6269\u5c55"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#_10","text":"Setting up site search - Material for MkDocs plugins: - search: lang: ja","title":"\u652f\u6301\u4e2d\u6587\u641c\u7d22"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#_11","text":"\u6570\u5b66\u516c\u5f0f\u4e0d\u80fd\u6b63\u5e38\u663e\u793a\uff1a \u5728 $$ \u524d\u540e\u52a0\u4e00\u884c\u7a7a\u884c","title":"\u4e00\u4e9b\u95ee\u9898\u7684\u89e3\u51b3\u529e\u6cd5"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#_12","text":"1.\u4ecb\u7ecd - \u57fa\u4e8e Material for MkDocs \u642d\u5efa\u9759\u6001\u7f51\u9875 Material for MkDocs - Material forMkDocs Failed to connect to github.com port 443: Timed out_\u5929\u751f\u6211\u6750\u5fc5\u6709\u7528-CSDN\u535a\u5ba2","title":"\u53c2\u8003"},{"location":"%E5%89%8D%E7%AB%AF/CSS/","text":"CSS \u00b6 Cascading Style Sheets\uff1a\u5c42\u53e0\u6837\u5f0f\u8868 \u548c HTML \u4e00\u6837\u4e5f\u662f\u4e00\u79cd\u6807\u8bb0\u8bed\u8a00 \u4f5c\u7528\uff1a\u7f8e\u5316 HTML \u6587\u6863\uff0c\u5b9e\u73b0\u7ed3\u6784\uff08HTML\uff09\u4e0e\u6837\u5f0f\uff08CSS\uff09\u76f8\u5206\u79bb \u9009\u62e9\u5668\u5206\u7c7b\uff1a\u57fa\u7840\u9009\u62e9\u5668 \u548c \u590d\u5408\u9009\u62e9\u5668 \u57fa\u7840\u6982\u5ff5 \u00b6 CSS \u89c4\u5219\u7684\u6784\u6210\uff1a\u9009\u62e9\u5668(HTML\u6807\u7b7e) + \u4e00\u6761\u6216\u591a\u6761\u58f0\u660e \u4e00\u822c\u5199\u5728 \\(<head>\\) \u4e2d eg\uff1a < head > < style > /*style \u53ef\u4ee5\u5199\u5728\u4efb\u4f55\u5730\u65b9*/ p { color : red ; /*\u6bb5\u843d\u8bbe\u7f6e\u4e3a\u7ea2\u8272*/ font-size : 12 px ; /*\u5b57\u4f53\u5927\u5c0f12\u50cf\u7d20*/ } </ style > </ head > CSS\u5f15\u5165\u65b9\u5f0f \u00b6 \u884c\u5185\u5f0f\uff0c\u5728\u6807\u7b7e\u7684\u5c5e\u6027\u91cc\u76f4\u63a5\u6dfb\u52a0\u6837\u5f0f \\(<p\\ style=\"\\ color:red;\\ \">\\) \uff0c\u9002\u5408\u4fee\u6539\u7b80\u5355\u6837\u5f0f\uff0c\u6ca1\u6709\u4e0e\u7ed3\u6784\u5206\u79bb \u5d4c\u5165\u5f0f\uff0c\u5199\u5728 html \u9875\u9762\u5185\u90e8\uff0c\u5373 \\(<style></style>\\) \u4e2d\uff0c\u5e76\u6ca1\u6709\u5b8c\u5168\u4e0e\u7ed3\u6784\u5206\u79bb \u94fe\u63a5\u5f0f\uff0c\u5355\u72ec\u5199\u5728 CSS \u6587\u4ef6\u4e2d\uff0c\u9002\u7528\u4e8e\u6837\u5f0f\u6bd4\u8f83\u591a\u7684\u65f6\u5019\uff0c\u5b9e\u73b0\u4e86\u4e0e\u7ed3\u6784\u5206\u79bb /*.css\u6587\u4ef6\u4e2d*/ \u4e0d\u9700\u8981\u5199 < style ></ style > , \u53ea\u9700\u8981\u5199\u6837\u5f0f /*.html\u6587\u4ef6\u4e2d*/ < link rel = \"stylesheet\" href = \"css\u6587\u4ef6\u8def\u5f84\" > \u57fa\u7840\u9009\u62e9\u5668 \u00b6 \u57fa\u7840\u9009\u62e9\u5668\u7531\u5355\u4e2a\u9009\u62e9\u5668\u7ec4\u6210 \u6807\u7b7e\u9009\u62e9\u5668 \u00b6 \u6807\u7b7e\u540d\u4f5c\u4e3a\u9009\u62e9\u5668 \u6807\u7b7e\u540d { \u5c5e\u60271: \u5c5e\u6027\u503c1; ... } \u7c7b\u9009\u62e9\u5668 \u00b6 \u53ef\u4ee5\u5355\u72ec\u9009\u62e9\u4e00\u4e2a\u6216\u51e0\u4e2a\u6807\u7b7e\uff0c\u4e00\u4e2a\u6807\u7b7e\u4e5f\u53ef\u4ee5\u6709\u591a\u4e2a\u7c7b\u540d\uff0c\u7528 . \u6765\u5b9a\u4e49 .\u7c7b\u540d { \u5c5e\u60271: \u5c5e\u6027\u503c1; ... } < div class = \"\u7c7b\u540d\" > eg </ div > < div class = \"\u7c7b\u540d1 \u7c7b\u540d2\" > </ div > id\u9009\u62e9\u5668 \u00b6 \u4e3a\u6807\u6709\u7279\u5b9a id \u7684 HTML\u5143\u7d20 \u6307\u5b9a\u6837\u5f0f\uff0c\u7528 # \u6765\u5b9a\u4e49 \u4e0e\u7c7b\u9009\u62e9\u5668\u7684\u533a\u522b\u5728\u4e8e\uff0cid\u9009\u62e9\u5668\u53ea\u80fd\u8c03\u7528\u4e00\u6b21\uff0c\u5373 id \u662f\u72ec\u4e00\u65e0\u4e8c\u7684 #\u7c7b\u540d { \u5c5e\u60271: \u5c5e\u6027\u503c1; ... } < div id = \"id\" > eg </ div > \u901a\u914d\u7b26\u9009\u62e9\u5668 \u00b6 \u4e3a\u9875\u9762\u4e2d\u6240\u6709\u7684\u5143\u7d20\u6307\u5b9a\u6837\u5f0f\uff0c\u7528 * \u6765\u5b9a\u4e49 \u4e0d\u9700\u8981\u8c03\u7528 * { \u5c5e\u60271: \u5c5e\u6027\u503c1; ... } \u590d\u5408\u9009\u62e9\u5668 \u00b6 \u540e\u4ee3\u9009\u62e9\u5668 \u00b6 \u53c8\u79f0\u5305\u542b\u9009\u62e9\u5668 # \u5143\u7d20 \u53ef\u4ee5\u662f\u4efb\u4f55\u57fa\u7840\u9009\u62e9\u5668 \u5143\u7d201 \u5143\u7d202 {\u6837\u5f0f\u58f0\u660e} # \u6b64\u6837\u5f0f\u53ea\u4f1a\u5e94\u7528\u4e8e \u5143\u7d201 \u4e2d\u6240\u6709\u7684 \u5143\u7d202\uff08\u4e0d\u4e00\u5b9a\u6b63\u597d\u662f\u4e0b\u4e00\u7ea7\uff09\uff0c\u5373\u540e\u4ee3\u5143\u7d20 \u5143\u7d201 \u5143\u7d202 \u5143\u7d203 ... {\u6837\u5f0f\u58f0\u660e} # \u540e\u4ee3\u53ef\u4ee5\u6709\u591a\u5c42, \u4f46\u53ea\u4f1a\u5e94\u7528\u4e8e\u6700\u540e\u4e00\u5c42 # eg: \u7c7b\u9009\u62e9\u5668 + li + a .nav li a { color: red; } \u5b50\u9009\u62e9\u5668 \u00b6 \u9009\u62e9\u67d0\u5143\u7d20\u6700\u8fd1\u4e00\u7ea7\u7684\u5b50\u5143\u7d20 \u5143\u7d201 > \u5143\u7d202 {\u6837\u5f0f\u58f0\u660e} # \u6b64\u6837\u5f0f\u53ea\u4f1a\u5e94\u7528\u4e8e \u5143\u7d201 \u4e2d\u6700\u8fd1\u7684 \u5143\u7d202, \u5143\u7d202 \u5fc5\u987b\u662f\u513f\u5b50 \u5e76\u96c6\u9009\u62e9\u5668 \u00b6 \u4f2a\u7c7b\u9009\u62e9\u5668 \u00b6 \u7528\u4e8e\u6dfb\u52a0\u4e00\u4e9b\u9009\u62e9\u5668\u7684\u7279\u6b8a\u6548\u679c\uff0c\u5982\u4e3a\u8d85\u94fe\u63a5\u7684\u4e0d\u540c\u72b6\u6001\u6dfb\u52a0\u4e0d\u540c\u7684\u989c\u8272 \u5e38\u7528\u5c5e\u6027\u603b\u7ed3 \u00b6 \u5b57\u4f53\u5c5e\u6027 \u00b6 \u5b57\u4f53\uff0c\u5927\u5c0f\uff0c\u7c97\u7ec6\uff0c\u6587\u672c\u6837\u5f0f \u5c5e\u6027 \u542b\u4e49 \u5c5e\u6027\u503c\u4e3e\u4f8b font-family \u5b57\u4f53 \"Microsoft YaHei\" font-size \u5927\u5c0f 20px\uff08\u4e0d\u4f1a\u5f71\u54cd\u6807\u9898\uff09 font-weight \u7c97\u7ec6 700\uff08\u52a0\u7c97:100\uff0c\u666e\u901a:100\uff09 font-style \u6587\u5b57\u6837\u5f0f normal\uff08\u659c\u4f53:italic\uff09 \u590d\u5408\u5c5e\u6027 /*font: font-style font-weight font-size/line-height font-family*/ /*\u4e0a\u9762\u7684\u987a\u5e8f\u4e0d\u80fd\u66f4\u6539*/ /*font-size \u548c font-famliy \u4e0d\u53ef\u4ee5\u7701\u7565*/ font: italic 700 16px 'Microsoft yahei'; \u6587\u672c\u5c5e\u6027 \u00b6 \u6587\u672c\u7684\u5916\u89c2\u5c5e\u6027 \u5c5e\u6027 \u542b\u4e49 \u5c5e\u6027\u503c\u4e3e\u4f8b color \u989c\u8272 red / #FF0000 text-align \u6c34\u5e73\u5bf9\u9f50 center / left / right text-decoration \u88c5\u9970\u6587\u672c none / underline / overline / line-through text-indent \u9996\u884c\u7f29\u8fdb 10px / 2em\uff082\u4e2a\u5f53\u524d\u6587\u5b57\u5927\u5c0f\uff09 ling-height \u884c\u95f4\u8ddd 26px \u88c5\u9970\u5c5e\u6027\u53d6 none \u5e38\u7528\u5728\u53d6\u6d88\u8d85\u94fe\u63a5\u7684\u4e0b\u5212\u7ebf \u5176\u4ed6 \u00b6 \u5c5e\u6027\u540d \u542b\u4e49 width / height \u9ad8\u5ea6 / \u5bbd\u5ea6 background-color \u80cc\u666f\u989c\u8272 margin padding \u5176\u4ed6 \u00b6 Emmet \u8bed\u6cd5 \u00b6 \u524d\u8eab\u662f Zen coding\uff0c\u80fd\u591f\u4f7f\u7528\u7f29\u5199\u63d0\u9ad8 html / css \u7684\u7f16\u5199\u901f\u5ea6\uff0cvscode \u5185\u90e8\u96c6\u6210 \u5feb\u901f\u751f\u6210 HTML \u8bed\u6cd5 \u751f\u6210\u6807\u7b7e\uff1a\u6807\u7b7e\u540d + tab \u751f\u6210\u591a\u4e2a\u6807\u7b7e\uff1a\u6807\u7b7e\u540d * \u4e2a\u6570+ tab \uff0c\u5982 div*3+tab \u7236\u5b50\u7ea7\u5173\u7cfb\u6807\u7b7e\uff0c\u7528 > \uff0c\u6bd4\u5982 ul>li+tab \u5144\u5f1f\u5173\u7cfb\u6807\u7b7e\uff0c\u7528 + \uff0c\u6bd4\u5982 dip+p+tab \u5e26\u7c7b\u6807\u7b7e\uff0c\u7528 \u6807\u7b7e\u540d.\u7c7b\u540d \uff0c\u6bd4\u5982 p.demo+tab\uff0c\u4e0d\u5199\u6807\u7b7e\u540d\u9ed8\u8ba4\u6807\u7b7e\u662f div \u5e26 id \u6807\u7b7e\uff0c\u7528 \u6807\u7b7e\u540d#\u7c7b\u540d \uff0c\u4e0d\u5199\u6807\u7b7e\u540d\u9ed8\u8ba4\u662f div \u751f\u6210\u6709\u5e8f\u7c7b\u540d\uff0c .\u7c7b\u540d$*\u6570\u5b57 \uff0c\u4f1a\u751f\u6210 \u7c7b\u540d1\uff0c\u7c7b\u540d2\uff0c\uff0c\uff0c \u6807\u7b7e\u5185\u9ed8\u8ba4\u6587\u5b57\uff0c\u7528 {} \uff0c\u5982 div{eg}+tab\uff0cdiv{$}*5\u4f1a\u751f\u62105\u4e2a\u81ea\u5e2612345\u7684div \u5feb\u901f\u751f\u6210 CSS \u8bed\u6cd5 \u7f29\u5199+ tab \uff0c\u5982\uff1a tac+tab \u8868\u793a text-align: center; w100+tab \u8868\u793a width: 100px; tx2em+tab \u8868\u793a text-indent: 2em; \u7c7b\u540d\u89c4\u8303 \u00b6 \u7c7b\u540d\u542b\u4e49 \u7c7b\u540d \u9875\u5c3e / \u9875\u811a footer \u56fe\u7247 pic \u5de5\u5177 \u00b6 FSCaputer\uff1a\u6d4b\u884c\u9ad8\uff0c\u62fe\u8272\u5668 \u4e00\u4e9b\u5b9e\u4f8b \u00b6 \u56fe\u7247\u5c45\u4e2d\u5bf9\u9f50 \u00b6 .pic { text-align:center; } < div class = \"pic\" > < img src = \"...\" alt = \"...\" > </ div >","title":"CSS"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#css","text":"Cascading Style Sheets\uff1a\u5c42\u53e0\u6837\u5f0f\u8868 \u548c HTML \u4e00\u6837\u4e5f\u662f\u4e00\u79cd\u6807\u8bb0\u8bed\u8a00 \u4f5c\u7528\uff1a\u7f8e\u5316 HTML \u6587\u6863\uff0c\u5b9e\u73b0\u7ed3\u6784\uff08HTML\uff09\u4e0e\u6837\u5f0f\uff08CSS\uff09\u76f8\u5206\u79bb \u9009\u62e9\u5668\u5206\u7c7b\uff1a\u57fa\u7840\u9009\u62e9\u5668 \u548c \u590d\u5408\u9009\u62e9\u5668","title":"CSS"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_1","text":"CSS \u89c4\u5219\u7684\u6784\u6210\uff1a\u9009\u62e9\u5668(HTML\u6807\u7b7e) + \u4e00\u6761\u6216\u591a\u6761\u58f0\u660e \u4e00\u822c\u5199\u5728 \\(<head>\\) \u4e2d eg\uff1a < head > < style > /*style \u53ef\u4ee5\u5199\u5728\u4efb\u4f55\u5730\u65b9*/ p { color : red ; /*\u6bb5\u843d\u8bbe\u7f6e\u4e3a\u7ea2\u8272*/ font-size : 12 px ; /*\u5b57\u4f53\u5927\u5c0f12\u50cf\u7d20*/ } </ style > </ head >","title":"\u57fa\u7840\u6982\u5ff5"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#css_1","text":"\u884c\u5185\u5f0f\uff0c\u5728\u6807\u7b7e\u7684\u5c5e\u6027\u91cc\u76f4\u63a5\u6dfb\u52a0\u6837\u5f0f \\(<p\\ style=\"\\ color:red;\\ \">\\) \uff0c\u9002\u5408\u4fee\u6539\u7b80\u5355\u6837\u5f0f\uff0c\u6ca1\u6709\u4e0e\u7ed3\u6784\u5206\u79bb \u5d4c\u5165\u5f0f\uff0c\u5199\u5728 html \u9875\u9762\u5185\u90e8\uff0c\u5373 \\(<style></style>\\) \u4e2d\uff0c\u5e76\u6ca1\u6709\u5b8c\u5168\u4e0e\u7ed3\u6784\u5206\u79bb \u94fe\u63a5\u5f0f\uff0c\u5355\u72ec\u5199\u5728 CSS \u6587\u4ef6\u4e2d\uff0c\u9002\u7528\u4e8e\u6837\u5f0f\u6bd4\u8f83\u591a\u7684\u65f6\u5019\uff0c\u5b9e\u73b0\u4e86\u4e0e\u7ed3\u6784\u5206\u79bb /*.css\u6587\u4ef6\u4e2d*/ \u4e0d\u9700\u8981\u5199 < style ></ style > , \u53ea\u9700\u8981\u5199\u6837\u5f0f /*.html\u6587\u4ef6\u4e2d*/ < link rel = \"stylesheet\" href = \"css\u6587\u4ef6\u8def\u5f84\" >","title":"CSS\u5f15\u5165\u65b9\u5f0f"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_2","text":"\u57fa\u7840\u9009\u62e9\u5668\u7531\u5355\u4e2a\u9009\u62e9\u5668\u7ec4\u6210","title":"\u57fa\u7840\u9009\u62e9\u5668"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_3","text":"\u6807\u7b7e\u540d\u4f5c\u4e3a\u9009\u62e9\u5668 \u6807\u7b7e\u540d { \u5c5e\u60271: \u5c5e\u6027\u503c1; ... }","title":"\u6807\u7b7e\u9009\u62e9\u5668"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_4","text":"\u53ef\u4ee5\u5355\u72ec\u9009\u62e9\u4e00\u4e2a\u6216\u51e0\u4e2a\u6807\u7b7e\uff0c\u4e00\u4e2a\u6807\u7b7e\u4e5f\u53ef\u4ee5\u6709\u591a\u4e2a\u7c7b\u540d\uff0c\u7528 . \u6765\u5b9a\u4e49 .\u7c7b\u540d { \u5c5e\u60271: \u5c5e\u6027\u503c1; ... } < div class = \"\u7c7b\u540d\" > eg </ div > < div class = \"\u7c7b\u540d1 \u7c7b\u540d2\" > </ div >","title":"\u7c7b\u9009\u62e9\u5668"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#id","text":"\u4e3a\u6807\u6709\u7279\u5b9a id \u7684 HTML\u5143\u7d20 \u6307\u5b9a\u6837\u5f0f\uff0c\u7528 # \u6765\u5b9a\u4e49 \u4e0e\u7c7b\u9009\u62e9\u5668\u7684\u533a\u522b\u5728\u4e8e\uff0cid\u9009\u62e9\u5668\u53ea\u80fd\u8c03\u7528\u4e00\u6b21\uff0c\u5373 id \u662f\u72ec\u4e00\u65e0\u4e8c\u7684 #\u7c7b\u540d { \u5c5e\u60271: \u5c5e\u6027\u503c1; ... } < div id = \"id\" > eg </ div >","title":"id\u9009\u62e9\u5668"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_5","text":"\u4e3a\u9875\u9762\u4e2d\u6240\u6709\u7684\u5143\u7d20\u6307\u5b9a\u6837\u5f0f\uff0c\u7528 * \u6765\u5b9a\u4e49 \u4e0d\u9700\u8981\u8c03\u7528 * { \u5c5e\u60271: \u5c5e\u6027\u503c1; ... }","title":"\u901a\u914d\u7b26\u9009\u62e9\u5668"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_6","text":"","title":"\u590d\u5408\u9009\u62e9\u5668"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_7","text":"\u53c8\u79f0\u5305\u542b\u9009\u62e9\u5668 # \u5143\u7d20 \u53ef\u4ee5\u662f\u4efb\u4f55\u57fa\u7840\u9009\u62e9\u5668 \u5143\u7d201 \u5143\u7d202 {\u6837\u5f0f\u58f0\u660e} # \u6b64\u6837\u5f0f\u53ea\u4f1a\u5e94\u7528\u4e8e \u5143\u7d201 \u4e2d\u6240\u6709\u7684 \u5143\u7d202\uff08\u4e0d\u4e00\u5b9a\u6b63\u597d\u662f\u4e0b\u4e00\u7ea7\uff09\uff0c\u5373\u540e\u4ee3\u5143\u7d20 \u5143\u7d201 \u5143\u7d202 \u5143\u7d203 ... {\u6837\u5f0f\u58f0\u660e} # \u540e\u4ee3\u53ef\u4ee5\u6709\u591a\u5c42, \u4f46\u53ea\u4f1a\u5e94\u7528\u4e8e\u6700\u540e\u4e00\u5c42 # eg: \u7c7b\u9009\u62e9\u5668 + li + a .nav li a { color: red; }","title":"\u540e\u4ee3\u9009\u62e9\u5668"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_8","text":"\u9009\u62e9\u67d0\u5143\u7d20\u6700\u8fd1\u4e00\u7ea7\u7684\u5b50\u5143\u7d20 \u5143\u7d201 > \u5143\u7d202 {\u6837\u5f0f\u58f0\u660e} # \u6b64\u6837\u5f0f\u53ea\u4f1a\u5e94\u7528\u4e8e \u5143\u7d201 \u4e2d\u6700\u8fd1\u7684 \u5143\u7d202, \u5143\u7d202 \u5fc5\u987b\u662f\u513f\u5b50","title":"\u5b50\u9009\u62e9\u5668"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_9","text":"","title":"\u5e76\u96c6\u9009\u62e9\u5668"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_10","text":"\u7528\u4e8e\u6dfb\u52a0\u4e00\u4e9b\u9009\u62e9\u5668\u7684\u7279\u6b8a\u6548\u679c\uff0c\u5982\u4e3a\u8d85\u94fe\u63a5\u7684\u4e0d\u540c\u72b6\u6001\u6dfb\u52a0\u4e0d\u540c\u7684\u989c\u8272","title":"\u4f2a\u7c7b\u9009\u62e9\u5668"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_11","text":"","title":"\u5e38\u7528\u5c5e\u6027\u603b\u7ed3"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_12","text":"\u5b57\u4f53\uff0c\u5927\u5c0f\uff0c\u7c97\u7ec6\uff0c\u6587\u672c\u6837\u5f0f \u5c5e\u6027 \u542b\u4e49 \u5c5e\u6027\u503c\u4e3e\u4f8b font-family \u5b57\u4f53 \"Microsoft YaHei\" font-size \u5927\u5c0f 20px\uff08\u4e0d\u4f1a\u5f71\u54cd\u6807\u9898\uff09 font-weight \u7c97\u7ec6 700\uff08\u52a0\u7c97:100\uff0c\u666e\u901a:100\uff09 font-style \u6587\u5b57\u6837\u5f0f normal\uff08\u659c\u4f53:italic\uff09 \u590d\u5408\u5c5e\u6027 /*font: font-style font-weight font-size/line-height font-family*/ /*\u4e0a\u9762\u7684\u987a\u5e8f\u4e0d\u80fd\u66f4\u6539*/ /*font-size \u548c font-famliy \u4e0d\u53ef\u4ee5\u7701\u7565*/ font: italic 700 16px 'Microsoft yahei';","title":"\u5b57\u4f53\u5c5e\u6027"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_13","text":"\u6587\u672c\u7684\u5916\u89c2\u5c5e\u6027 \u5c5e\u6027 \u542b\u4e49 \u5c5e\u6027\u503c\u4e3e\u4f8b color \u989c\u8272 red / #FF0000 text-align \u6c34\u5e73\u5bf9\u9f50 center / left / right text-decoration \u88c5\u9970\u6587\u672c none / underline / overline / line-through text-indent \u9996\u884c\u7f29\u8fdb 10px / 2em\uff082\u4e2a\u5f53\u524d\u6587\u5b57\u5927\u5c0f\uff09 ling-height \u884c\u95f4\u8ddd 26px \u88c5\u9970\u5c5e\u6027\u53d6 none \u5e38\u7528\u5728\u53d6\u6d88\u8d85\u94fe\u63a5\u7684\u4e0b\u5212\u7ebf","title":"\u6587\u672c\u5c5e\u6027"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_14","text":"\u5c5e\u6027\u540d \u542b\u4e49 width / height \u9ad8\u5ea6 / \u5bbd\u5ea6 background-color \u80cc\u666f\u989c\u8272 margin padding","title":"\u5176\u4ed6"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_15","text":"","title":"\u5176\u4ed6"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#emmet","text":"\u524d\u8eab\u662f Zen coding\uff0c\u80fd\u591f\u4f7f\u7528\u7f29\u5199\u63d0\u9ad8 html / css \u7684\u7f16\u5199\u901f\u5ea6\uff0cvscode \u5185\u90e8\u96c6\u6210 \u5feb\u901f\u751f\u6210 HTML \u8bed\u6cd5 \u751f\u6210\u6807\u7b7e\uff1a\u6807\u7b7e\u540d + tab \u751f\u6210\u591a\u4e2a\u6807\u7b7e\uff1a\u6807\u7b7e\u540d * \u4e2a\u6570+ tab \uff0c\u5982 div*3+tab \u7236\u5b50\u7ea7\u5173\u7cfb\u6807\u7b7e\uff0c\u7528 > \uff0c\u6bd4\u5982 ul>li+tab \u5144\u5f1f\u5173\u7cfb\u6807\u7b7e\uff0c\u7528 + \uff0c\u6bd4\u5982 dip+p+tab \u5e26\u7c7b\u6807\u7b7e\uff0c\u7528 \u6807\u7b7e\u540d.\u7c7b\u540d \uff0c\u6bd4\u5982 p.demo+tab\uff0c\u4e0d\u5199\u6807\u7b7e\u540d\u9ed8\u8ba4\u6807\u7b7e\u662f div \u5e26 id \u6807\u7b7e\uff0c\u7528 \u6807\u7b7e\u540d#\u7c7b\u540d \uff0c\u4e0d\u5199\u6807\u7b7e\u540d\u9ed8\u8ba4\u662f div \u751f\u6210\u6709\u5e8f\u7c7b\u540d\uff0c .\u7c7b\u540d$*\u6570\u5b57 \uff0c\u4f1a\u751f\u6210 \u7c7b\u540d1\uff0c\u7c7b\u540d2\uff0c\uff0c\uff0c \u6807\u7b7e\u5185\u9ed8\u8ba4\u6587\u5b57\uff0c\u7528 {} \uff0c\u5982 div{eg}+tab\uff0cdiv{$}*5\u4f1a\u751f\u62105\u4e2a\u81ea\u5e2612345\u7684div \u5feb\u901f\u751f\u6210 CSS \u8bed\u6cd5 \u7f29\u5199+ tab \uff0c\u5982\uff1a tac+tab \u8868\u793a text-align: center; w100+tab \u8868\u793a width: 100px; tx2em+tab \u8868\u793a text-indent: 2em;","title":"Emmet \u8bed\u6cd5"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_16","text":"\u7c7b\u540d\u542b\u4e49 \u7c7b\u540d \u9875\u5c3e / \u9875\u811a footer \u56fe\u7247 pic","title":"\u7c7b\u540d\u89c4\u8303"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_17","text":"FSCaputer\uff1a\u6d4b\u884c\u9ad8\uff0c\u62fe\u8272\u5668","title":"\u5de5\u5177"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_18","text":"","title":"\u4e00\u4e9b\u5b9e\u4f8b"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_19","text":".pic { text-align:center; } < div class = \"pic\" > < img src = \"...\" alt = \"...\" > </ div >","title":"\u56fe\u7247\u5c45\u4e2d\u5bf9\u9f50"},{"location":"%E5%89%8D%E7%AB%AF/HTML/","text":"HTML \u00b6 \u57fa\u7840\u6982\u5ff5 \u00b6 HTML \u00b6 HTML \u662f\u4e00\u79cd\u8d85\u6587\u672c\u6807\u8bb0\u8bed\u8a00\uff08\u5373\u53ef\u4ee5\u52a0\u5165\u591a\u5a92\u4f53\u5185\u5bb9\uff0c\u8d85\u8d8a\u4e86\u6587\u672c\u9650\u5236\uff0c\u8fd8\u652f\u6301\u8d85\u94fe\u63a5\uff09 WEB\u6807\u51c6 \u00b6 \u6784\u6210\uff1a\u7ed3\u6784\uff08HTML\uff09\uff0c\u8868\u73b0\uff08CSS\uff09\uff0c\u884c\u4e3a\uff08JS\uff09 VSCODE\u4f7f\u7528 \u00b6 \u63d2\u4ef6 \u00b6 \u63d2\u4ef6 \u4f5c\u7528 open in browser \u53f3\u952e\u5373\u53ef\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00 Auto Rename Tag \u81ea\u52a8\u8865\u5168\u53cc\u6807\u7b7e \u5feb\u901f\u683c\u5f0f\u5316 \u00b6 \u5feb\u901f\u683c\u5f0f\u5316\u6587\u6863\uff1a ALT SHIFT F \u4fdd\u5b58\u6587\u4ef6\u81ea\u52a8\u683c\u5f0f\u5316\uff1a\u5728 setting.json \u4e2d\u52a0\u4e0a \"editor.formatOnType\" : true , // HTML \u6587\u4ef6\u4fdd\u5b58\u81ea\u52a8\u683c\u5f0f\u5316 \"editor.formatOnSave\" : true \u6807\u7b7e \u00b6 \u57fa\u672c\u7ed3\u6784\u6807\u7b7e \u00b6 \u6807\u7b7e\u540d \u8bf4\u660e \\(<html></html>\\) \u6839\u6807\u7b7e \\(<head></head>\\) \u5934\u90e8\u6807\u7b7e \\(<title></title>\\) \u6807\u9898\u6807\u7b7e \\(<body></body>\\) \u4e3b\u4f53\u6807\u7b7e \\(<!DOCTYPE html>\\) \u58f0\u660ehtml\u7248\u672c \\(<html lang=\"zh-CN\">\\) \u58f0\u660e\u7f51\u9875\u8bed\u8a00 \\(<meta charset=\"UTF-8\">\\) \u58f0\u660e\u5b57\u7b26\u96c6\u4e3a\u4e07\u56fd\u7801 \u6807\u9898\u6807\u7b7e \u00b6 \u6700\u591a\u67096\u7ea7\u6807\u9898\u6807\u7b7e < h1 > \u4e00\u7ea7\u6807\u9898 </ h1 > < h2 > \u4e8c\u7ea7\u6807\u9898 </ h2 > < h3 > \u4e09\u7ea7\u6807\u9898 </ h3 > \u6bb5\u843d\u548c\u6362\u884c\u6807\u7b7e \u00b6 \u6807\u7b7e\u540d \u8bf4\u660e \\(<p></p>\\) \u6bb5\u843d\u6807\u7b7e\uff0cparagraph \\(<br>\\) \u6362\u884c\u6807\u7b7e\uff0cbreak \u6587\u672c\u683c\u5f0f\u5316\u6807\u7b7e \u00b6 \u6807\u7b7e\u540d \u8bf4\u660e \\(<strong></strong>\\) \u6216\u8005 \\(<b></b>\\) \u52a0\u7c97 \\(<em></em>\\) \u6216\u8005 \\(<i></i>\\) \u503e\u659c \\(<del></del>\\) \u6216\u8005 \\(<s></s>\\) \u5220\u9664\u7ebf \\(<ins></ins>\\) \u6216\u8005 \\(<u></u>\\) \u4e0b\u5212\u7ebf div \u548c span \u6807\u7b7e \u00b6 \u8fd92\u4e2a\u6807\u7b7e\u90fd\u662f\u5e03\u5c40\u7528 \u6807\u7b7e\u540d \u8bf4\u660e \\(<div></div>\\) \u5206\u533a\uff0c\u5360\u4e00\u884c\uff0cdivision \\(<span></span>\\) \u8de8\u8ddd\uff0c\u53ef\u4ee5\u591a\u4e2a\u5360\u4e00\u884c\uff0c \u56fe\u50cf\u6807\u7b7e \u00b6 < img src = \"\u8def\u5f84\u6216\u8005\u94fe\u63a5\" /> img \u6807\u7b7e\u4e2d\u53ef\u52a0\u7684\u5c5e\u6027 \u5c5e\u6027 \u8bf4\u660e src \u8def\u5f84\u6216\u94fe\u63a5\uff0csource alt \u663e\u793a\u5931\u8d25\u65f6\u7684\u66ff\u6362\u6587\u672c\uff0calternative title \u9f20\u6807\u653e\u5728\u56fe\u7247\u4e0a\u65f6\u7684\u8bf4\u660e\u6587\u5b57 width \u8bbe\u5b9a\u5bbd\u5ea6 height \u8bbe\u5b9a\u9ad8\u5ea6 border \u8bbe\u5b9a\u8fb9\u6846\u7c97\u7ec6 \u5bbd\u5ea6\u548c\u9ad8\u5ea6\u53ea\u8bbe\u5b9a\u4e00\u4e2a\u65f6\u7eb5\u6a2a\u6bd4\u662f\u56fa\u5b9a\u7684 \u8d85\u94fe\u63a5\u6807\u7b7e \u00b6 <!-- anchor --> <!-- target=\"_self\"\u65f6\u4e0d\u5f00\u65b0\u7a97\u53e3 \"_blank\"\u65f6\u5f00\u65b0\u7a97\u53e3 --> < a herf = \"\u8df3\u8f6c\u76ee\u6807\" target = \"\u7a97\u53e3\u5f39\u51fa\u65b9\u5f0f\" > \u6587\u672c\u6216\u56fe\u50cf\u6807\u7b7e </ a > <!-- herf \u662fhtml\u6587\u4ef6\u65f6\u662f\u5185\u90e8\u94fe\u63a5\uff0c\u662f\u7f51\u9875\u94fe\u63a5\u65f6\u662f\u5916\u90e8\u94fe\u63a5 --> <!-- herf = \"#\" \u8868\u793a \u7a7a\u94fe\u63a5--> <!-- herf = \"\u6587\u4ef6\u8def\u5f84\" \u65f6\u53ef\u4ee5\u5b9e\u73b0\u4e0b\u8f7d\u6587\u4ef6--> \u951a\u70b9\u94fe\u63a5 <!-- \u51fa\u53d1\u4f4d\u7f6e --> < a herf = \"#tag\" > \u6587\u672c\u6216\u56fe\u50cf\u6807\u7b7e </ a > <!-- \u76ee\u6807\u4f4d\u7f6e\u5728\u6807\u9898\u5904 --> < h2 id = \"tag\" > \u6807\u9898 </ h2 > \u6ce8\u91ca\u548c\u7279\u6b8a\u5b57\u7b26 \u00b6 <!-- \u8fd9\u662f\u6ce8\u91ca\u6807\u7b7e\uff0cvscode \u7528 Ctrl+/ --> \u7279\u6b8a\u5b57\u7b26\uff1a HTML \u7b26\u53f7\u5b9e\u4f53\u53c2\u8003\u624b\u518c | \u83dc\u9e1f\u6559\u7a0b \u5e38\u7528\uff1a | \u63cf\u8ff0 | \u4ee3\u7801 | | -------- | ----------- | | \u7a7a\u683c | &nbsp; | | \u5927\u4e8e | &gt; | | \u5c0f\u4e8e | &lt; | | \u4e0e\u53f7 | &amp; | | \u4e58\u6cd5 | &times; | | \u9664\u6cd5 | &divide; | | \u5e73\u65b9 | &sup2; | | \u7acb\u65b9 | &sup3; | \u8868\u683c\u6807\u7b7e \u00b6 < table > <!-- \u8868\u683c\u6839\u6807\u7b7e --> < tr > <!-- \u8868\u683c\u4e2d\u7684\u884c --> < td > \u5355\u5143\u683c\u5185\u7684\u6587\u5b57 </ td > <!-- \u6bcf\u884c\u4e2d\u6bcf\u683c\u7684\u5185\u5bb9 --> ... </ tr > ... </ table > <!-- \u8868\u5934\u5355\u5143\u683c\u6807\u7b7e\uff0c\u6307\u660e\u67d0\u4e00\u884c\u662f\u8868\u5934\uff0c\u548ctd\u540c\u7ea7\uff0c\u4f1a\u52a0\u7c97\u5e76\u5c45\u4e2d --> < th > ... </ th > \u8868\u683c\u5c5e\u6027 \u4e0d\u592a\u5e38\u7528\uff0c\u4f1a\u901a\u8fc7CSS\u8bbe\u7f6e \u5c5e\u6027\u540d \u5c5e\u6027\u503c \u63cf\u8ff0 align left / center / right \u76f8\u5bf9\u5468\u56f4\u5143\u7d20\u7684\u5bf9\u9f50\u65b9\u5f0f border 1 / \"\" \u662f\u5426\u6709\u8fb9\u6846\uff0c\"\"\u4e3a\u9ed8\u8ba4\uff0c\u8868\u793a\u6ca1\u6709 cellpadding \u50cf\u7d20\u503c \u8fb9\u6cbf\u4e0e\u5185\u5bb9\u4e4b\u95f4\u7684\u7a7a\u767d\uff0c\u9ed8\u8ba4\u4e3a1 cellspacing \u50cf\u7d20\u503c \u5355\u5143\u683c\u4e4b\u95f4\u7684\u7a7a\u767d\uff0c\u9ed8\u8ba42 width \u50cf\u7d20\u503c / \u767e\u5206\u6bd4 \u5bbd\u5ea6 height \u50cf\u7d20\u503c / \u767e\u5206\u6bd4 \u9ad8\u5ea6 \u8868\u683c\u7ed3\u6784\u6807\u7b7e < table > < thead ></ thead > <!-- \u5934\u90e8\u6807\u7b7e --> < tbody ></ tbody > <!-- \u4e3b\u4f53\u6807\u7b7e --> </ table > \u5408\u5e76\u5355\u5143\u683c\uff08td\u7684\u5c5e\u6027\uff09 \u8de8\u884c\u5408\u5e76\uff1arowspan=\"\u5408\u5e76\u5355\u5143\u683c\u7684\u4e2a\u6570\"\uff0c\u6700\u4e0a\u4fa7\u5355\u5143\u683c\u4e3a\u76ee\u6807\u5355\u5143\u683c \u8de8\u5217\u5408\u5e76\uff1acolspan=\"\u5408\u5e76\u5355\u5143\u683c\u7684\u4e2a\u6570\"\uff0c\u6700\u5de6\u4fa7\u5355\u5143\u683c\u4e3a\u76ee\u6807\u5355\u5143\u683c \u5217\u8868\u6807\u7b7e \u00b6 \u5206\u7c7b\uff1a\u65e0\u5e8f\u5217\u8868\uff0c\u6709\u5e8f\u5217\u8868\uff0c\u81ea\u5b9a\u4e49\u5217\u8868 \u5217\u8868\u81ea\u5e26\u7684\u6837\u5f0f\u5c5e\u6027\u53ef\u4ee5\u901a\u8fc7CSS\u4fee\u6539 \u65e0\u5e8f\u5217\u8868 < ul > <!-- ul\u4e2d\u53ea\u80fd\u653eli\u6807\u7b7e\uff0c\u4f46li\u4e2d\u53ef\u4ee5\u653e\u4efb\u4f55\u6807\u7b7e --> < li > \u5217\u8868\u98791 </ li > < li > \u5217\u8868\u98792 </ li > < li > \u5217\u8868\u98793 </ li > ... </ ul > \u6709\u5e8f\u5217\u8868 < ol > <!-- ol\u4e2d\u53ea\u80fd\u653eli\u6807\u7b7e\uff0c\u4f46li\u4e2d\u53ef\u4ee5\u653e\u4efb\u4f55\u6807\u7b7e --> < li > \u5217\u8868\u98791 </ li > < li > \u5217\u8868\u98792 </ li > < li > \u5217\u8868\u98793 </ li > ... </ ol > \u81ea\u5b9a\u4e49\u5217\u8868 < dl > <!-- dl\u4e2d\u53ea\u80fd\u653edt/dd\u6807\u7b7e\uff0c\u4f46dt/dd\u4e2d\u53ef\u4ee5\u653e\u4efb\u4f55\u6807\u7b7e --> < dt > \u540d\u8bcd1 </ dt > < dd > \u540d\u8bcd1\u89e3\u91ca1 </ dd > < dd > \u540d\u8bcd1\u89e3\u91ca2 </ dd > </ dl > \u8868\u5355\u6807\u7b7e \u00b6 \u8868\u5355\u7528\u4e8e\u6536\u96c6\u7528\u6237\u4fe1\u606f \u8868\u5355\u7531 \u8868\u5355\u57df\uff0c\u8868\u5355\u63a7\u4ef6(\u8868\u5355\u5143\u7d20)\uff0c\u63d0\u793a\u4fe1\u606f \u6784\u6210 < form > </ form > \u5c5e\u6027 \u5c5e\u6027\u503c \u4f5c\u7528 action url\u5730\u5740 \u6307\u5b9a\u63a5\u53d7\u5e76\u5904\u7406\u8868\u8fbe\u90a3\u6570\u636e\u7684\u670d\u52a1\u5668\u7a0b\u5e8f\u7684url\u5730\u5740 method get/post \u8bbe\u7f6e\u8868\u5355\u6570\u636e\u7684\u63d0\u4ea4\u65b9\u5f0f name \u540d\u79f0 \u8bbe\u7f6e\u8868\u5355\u540d\u79f0 input \u8f93\u5165\u8868\u5355\u5143\u7d20 \u00b6 < input type = \"\" /> <!-- type\u6307\u5b9a\u4e0d\u540c\u7684\u63a7\u4ef6\u7c7b\u578b --> <!-- eg --> <!-- \u5355\u9009\u5c5e\u6027\u5fc5\u987b\u6709\u76f8\u540c\u7684name\u503c --> \u6027\u522b\uff1a\u7537 < input type = \"radio\" name = \"sex\" > \u5973 < input type = \"radio\" name = \"sex\" > type\u5c5e\u6027\u503c \u63cf\u8ff0 button \u70b9\u51fb\u6309\u94ae\uff08\u591a\u6570\u60c5\u51b5\u4e0b\u901a\u8fc7JS\u542f\u52a8\u811a\u672c\uff09 checkbox \u590d\u9009\u6846 file \u8f93\u5165\u5b57\u6bb5\u548c\"\u6d4f\u89c8\"\u6309\u94ae\uff0c\u4f9b\u6587\u4ef6\u4e0a\u4f20 hidden \u9690\u85cf\u7684\u8f93\u5165\u5b57\u6bb5 image \u56fe\u50cf\u5f62\u5f0f\u7684\u63d0\u4ea4\u6309\u94ae password \u5bc6\u7801\u5b57\u6bb5\uff0c\u6697\u6587\u8f93\u5165 radio \u5355\u9009\u6309\u94ae reset \u91cd\u7f6e\u6309\u94ae submit \u63d0\u4ea4\u6309\u94ae text \u8f93\u5165\u5b57\u6bb5\uff0c\u5bbd\u5ea6\u9ed8\u8ba4\u4e3a20\u5b57\u7b26 input\u5176\u4ed6\u5c5e\u6027 \u5c5e\u6027\u503c \u63cf\u8ff0 name \u81ea\u5b9a\u4e49 \u540d\u79f0 value \u81ea\u5b9a\u4e49 input\u7684\u5143\u7d20\u503c checked checked \u89c4\u5b9a\u6b64input\u5143\u7d20\u9996\u6b21\u52a0\u8f7d\u65f6\u5e94\u5f53\u88ab\u9009\u4e2d maxlength \u6b63\u6574\u6570 \u8f93\u5165\u5b57\u6bb5\u5b57\u7b26\u7684\u6700\u5927\u957f\u5ea6 label \u6807\u7b7e \u00b6 \u7ed1\u5b9a\u4e00\u4e2a\u8868\u5355\u5143\u7d20\uff0c\u5f53\u7528\u6237\u70b9\u51fb label \u6807\u7b7e\u5185\u7684\u6587\u672c\u65f6\uff0c\u4f1a\u81ea\u52a8\u5bf9\u5e94\u5230\u5bf9\u5e94\u7684\u8868\u5355\u5143\u7d20\u4e0a < label for = \"sex\" > \u7537 </ label > < input type = \"radio\" name = \"sex\" id = \"sex\" /> <!-- for \u4e0e id \u7684\u5c5e\u6027\u503c\u8981\u76f8\u540c --> select \u4e0b\u62c9\u8868\u5355\u5143\u7d20 \u00b6 select \u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a option\uff0coption < select > < option > \u9009\u98791 </ option > < option > \u9009\u98792 </ option > <!-- selected \u8868\u793a\u9ed8\u8ba4\u9009\u4e2d\u9879 --> < option selected = \"selected\" > \u9009\u98793 </ option > ... </ select > textarea \u6587\u672c\u57df\u5143\u7d20 \u00b6 \u7528\u4e8e\u8f93\u5165\u591a\u884c\u7684\u6587\u672c\u8f93\u5165\u7684\u63a7\u4ef6 <!-- \u5b9e\u9645\u5f00\u53d1\u4e2d\u90fd\u662f\u7528CSS\u6765\u6539\u53d8\u5927\u5c0f --> < textraea rows = \"3\" cols = \"20\" > \u6587\u672c\u5185\u5bb9 </ textraea > \u5176\u4ed6\u6807\u7b7e \u00b6 button \u00b6 < button > \u641c\u7d22 </ button > /*\u7b49\u6548\u4e8e < input type = \"button\" value = \"\u641c\u7d22\" > */ \u53c2\u8003 \u00b6 \u9ed1\u9a6c\u7a0b\u5e8f\u5458pink\u8001\u5e08\u524d\u7aef\u5165\u95e8\u6559\u7a0b\uff0c\u96f6\u57fa\u7840\u5fc5\u770b\u7684h5(html5)+css3+\u79fb\u52a8\u7aef\u524d\u7aef\u89c6\u9891\u6559\u7a0b_\u54d4\u54e9\u54d4\u54e9_bilibili","title":"HTML"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#html","text":"","title":"HTML"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_1","text":"","title":"\u57fa\u7840\u6982\u5ff5"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#html_1","text":"HTML \u662f\u4e00\u79cd\u8d85\u6587\u672c\u6807\u8bb0\u8bed\u8a00\uff08\u5373\u53ef\u4ee5\u52a0\u5165\u591a\u5a92\u4f53\u5185\u5bb9\uff0c\u8d85\u8d8a\u4e86\u6587\u672c\u9650\u5236\uff0c\u8fd8\u652f\u6301\u8d85\u94fe\u63a5\uff09","title":"HTML"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#web","text":"\u6784\u6210\uff1a\u7ed3\u6784\uff08HTML\uff09\uff0c\u8868\u73b0\uff08CSS\uff09\uff0c\u884c\u4e3a\uff08JS\uff09","title":"WEB\u6807\u51c6"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#vscode","text":"","title":"VSCODE\u4f7f\u7528"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_2","text":"\u63d2\u4ef6 \u4f5c\u7528 open in browser \u53f3\u952e\u5373\u53ef\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00 Auto Rename Tag \u81ea\u52a8\u8865\u5168\u53cc\u6807\u7b7e","title":"\u63d2\u4ef6"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_3","text":"\u5feb\u901f\u683c\u5f0f\u5316\u6587\u6863\uff1a ALT SHIFT F \u4fdd\u5b58\u6587\u4ef6\u81ea\u52a8\u683c\u5f0f\u5316\uff1a\u5728 setting.json \u4e2d\u52a0\u4e0a \"editor.formatOnType\" : true , // HTML \u6587\u4ef6\u4fdd\u5b58\u81ea\u52a8\u683c\u5f0f\u5316 \"editor.formatOnSave\" : true","title":"\u5feb\u901f\u683c\u5f0f\u5316"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_4","text":"","title":"\u6807\u7b7e"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_5","text":"\u6807\u7b7e\u540d \u8bf4\u660e \\(<html></html>\\) \u6839\u6807\u7b7e \\(<head></head>\\) \u5934\u90e8\u6807\u7b7e \\(<title></title>\\) \u6807\u9898\u6807\u7b7e \\(<body></body>\\) \u4e3b\u4f53\u6807\u7b7e \\(<!DOCTYPE html>\\) \u58f0\u660ehtml\u7248\u672c \\(<html lang=\"zh-CN\">\\) \u58f0\u660e\u7f51\u9875\u8bed\u8a00 \\(<meta charset=\"UTF-8\">\\) \u58f0\u660e\u5b57\u7b26\u96c6\u4e3a\u4e07\u56fd\u7801","title":"\u57fa\u672c\u7ed3\u6784\u6807\u7b7e"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_6","text":"\u6700\u591a\u67096\u7ea7\u6807\u9898\u6807\u7b7e < h1 > \u4e00\u7ea7\u6807\u9898 </ h1 > < h2 > \u4e8c\u7ea7\u6807\u9898 </ h2 > < h3 > \u4e09\u7ea7\u6807\u9898 </ h3 >","title":"\u6807\u9898\u6807\u7b7e"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_7","text":"\u6807\u7b7e\u540d \u8bf4\u660e \\(<p></p>\\) \u6bb5\u843d\u6807\u7b7e\uff0cparagraph \\(<br>\\) \u6362\u884c\u6807\u7b7e\uff0cbreak","title":"\u6bb5\u843d\u548c\u6362\u884c\u6807\u7b7e"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_8","text":"\u6807\u7b7e\u540d \u8bf4\u660e \\(<strong></strong>\\) \u6216\u8005 \\(<b></b>\\) \u52a0\u7c97 \\(<em></em>\\) \u6216\u8005 \\(<i></i>\\) \u503e\u659c \\(<del></del>\\) \u6216\u8005 \\(<s></s>\\) \u5220\u9664\u7ebf \\(<ins></ins>\\) \u6216\u8005 \\(<u></u>\\) \u4e0b\u5212\u7ebf","title":"\u6587\u672c\u683c\u5f0f\u5316\u6807\u7b7e"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#div-span","text":"\u8fd92\u4e2a\u6807\u7b7e\u90fd\u662f\u5e03\u5c40\u7528 \u6807\u7b7e\u540d \u8bf4\u660e \\(<div></div>\\) \u5206\u533a\uff0c\u5360\u4e00\u884c\uff0cdivision \\(<span></span>\\) \u8de8\u8ddd\uff0c\u53ef\u4ee5\u591a\u4e2a\u5360\u4e00\u884c\uff0c","title":"div \u548c span \u6807\u7b7e"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_9","text":"< img src = \"\u8def\u5f84\u6216\u8005\u94fe\u63a5\" /> img \u6807\u7b7e\u4e2d\u53ef\u52a0\u7684\u5c5e\u6027 \u5c5e\u6027 \u8bf4\u660e src \u8def\u5f84\u6216\u94fe\u63a5\uff0csource alt \u663e\u793a\u5931\u8d25\u65f6\u7684\u66ff\u6362\u6587\u672c\uff0calternative title \u9f20\u6807\u653e\u5728\u56fe\u7247\u4e0a\u65f6\u7684\u8bf4\u660e\u6587\u5b57 width \u8bbe\u5b9a\u5bbd\u5ea6 height \u8bbe\u5b9a\u9ad8\u5ea6 border \u8bbe\u5b9a\u8fb9\u6846\u7c97\u7ec6 \u5bbd\u5ea6\u548c\u9ad8\u5ea6\u53ea\u8bbe\u5b9a\u4e00\u4e2a\u65f6\u7eb5\u6a2a\u6bd4\u662f\u56fa\u5b9a\u7684","title":"\u56fe\u50cf\u6807\u7b7e"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_10","text":"<!-- anchor --> <!-- target=\"_self\"\u65f6\u4e0d\u5f00\u65b0\u7a97\u53e3 \"_blank\"\u65f6\u5f00\u65b0\u7a97\u53e3 --> < a herf = \"\u8df3\u8f6c\u76ee\u6807\" target = \"\u7a97\u53e3\u5f39\u51fa\u65b9\u5f0f\" > \u6587\u672c\u6216\u56fe\u50cf\u6807\u7b7e </ a > <!-- herf \u662fhtml\u6587\u4ef6\u65f6\u662f\u5185\u90e8\u94fe\u63a5\uff0c\u662f\u7f51\u9875\u94fe\u63a5\u65f6\u662f\u5916\u90e8\u94fe\u63a5 --> <!-- herf = \"#\" \u8868\u793a \u7a7a\u94fe\u63a5--> <!-- herf = \"\u6587\u4ef6\u8def\u5f84\" \u65f6\u53ef\u4ee5\u5b9e\u73b0\u4e0b\u8f7d\u6587\u4ef6--> \u951a\u70b9\u94fe\u63a5 <!-- \u51fa\u53d1\u4f4d\u7f6e --> < a herf = \"#tag\" > \u6587\u672c\u6216\u56fe\u50cf\u6807\u7b7e </ a > <!-- \u76ee\u6807\u4f4d\u7f6e\u5728\u6807\u9898\u5904 --> < h2 id = \"tag\" > \u6807\u9898 </ h2 >","title":"\u8d85\u94fe\u63a5\u6807\u7b7e"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_11","text":"<!-- \u8fd9\u662f\u6ce8\u91ca\u6807\u7b7e\uff0cvscode \u7528 Ctrl+/ --> \u7279\u6b8a\u5b57\u7b26\uff1a HTML \u7b26\u53f7\u5b9e\u4f53\u53c2\u8003\u624b\u518c | \u83dc\u9e1f\u6559\u7a0b \u5e38\u7528\uff1a | \u63cf\u8ff0 | \u4ee3\u7801 | | -------- | ----------- | | \u7a7a\u683c | &nbsp; | | \u5927\u4e8e | &gt; | | \u5c0f\u4e8e | &lt; | | \u4e0e\u53f7 | &amp; | | \u4e58\u6cd5 | &times; | | \u9664\u6cd5 | &divide; | | \u5e73\u65b9 | &sup2; | | \u7acb\u65b9 | &sup3; |","title":"\u6ce8\u91ca\u548c\u7279\u6b8a\u5b57\u7b26"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_12","text":"< table > <!-- \u8868\u683c\u6839\u6807\u7b7e --> < tr > <!-- \u8868\u683c\u4e2d\u7684\u884c --> < td > \u5355\u5143\u683c\u5185\u7684\u6587\u5b57 </ td > <!-- \u6bcf\u884c\u4e2d\u6bcf\u683c\u7684\u5185\u5bb9 --> ... </ tr > ... </ table > <!-- \u8868\u5934\u5355\u5143\u683c\u6807\u7b7e\uff0c\u6307\u660e\u67d0\u4e00\u884c\u662f\u8868\u5934\uff0c\u548ctd\u540c\u7ea7\uff0c\u4f1a\u52a0\u7c97\u5e76\u5c45\u4e2d --> < th > ... </ th > \u8868\u683c\u5c5e\u6027 \u4e0d\u592a\u5e38\u7528\uff0c\u4f1a\u901a\u8fc7CSS\u8bbe\u7f6e \u5c5e\u6027\u540d \u5c5e\u6027\u503c \u63cf\u8ff0 align left / center / right \u76f8\u5bf9\u5468\u56f4\u5143\u7d20\u7684\u5bf9\u9f50\u65b9\u5f0f border 1 / \"\" \u662f\u5426\u6709\u8fb9\u6846\uff0c\"\"\u4e3a\u9ed8\u8ba4\uff0c\u8868\u793a\u6ca1\u6709 cellpadding \u50cf\u7d20\u503c \u8fb9\u6cbf\u4e0e\u5185\u5bb9\u4e4b\u95f4\u7684\u7a7a\u767d\uff0c\u9ed8\u8ba4\u4e3a1 cellspacing \u50cf\u7d20\u503c \u5355\u5143\u683c\u4e4b\u95f4\u7684\u7a7a\u767d\uff0c\u9ed8\u8ba42 width \u50cf\u7d20\u503c / \u767e\u5206\u6bd4 \u5bbd\u5ea6 height \u50cf\u7d20\u503c / \u767e\u5206\u6bd4 \u9ad8\u5ea6 \u8868\u683c\u7ed3\u6784\u6807\u7b7e < table > < thead ></ thead > <!-- \u5934\u90e8\u6807\u7b7e --> < tbody ></ tbody > <!-- \u4e3b\u4f53\u6807\u7b7e --> </ table > \u5408\u5e76\u5355\u5143\u683c\uff08td\u7684\u5c5e\u6027\uff09 \u8de8\u884c\u5408\u5e76\uff1arowspan=\"\u5408\u5e76\u5355\u5143\u683c\u7684\u4e2a\u6570\"\uff0c\u6700\u4e0a\u4fa7\u5355\u5143\u683c\u4e3a\u76ee\u6807\u5355\u5143\u683c \u8de8\u5217\u5408\u5e76\uff1acolspan=\"\u5408\u5e76\u5355\u5143\u683c\u7684\u4e2a\u6570\"\uff0c\u6700\u5de6\u4fa7\u5355\u5143\u683c\u4e3a\u76ee\u6807\u5355\u5143\u683c","title":"\u8868\u683c\u6807\u7b7e"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_13","text":"\u5206\u7c7b\uff1a\u65e0\u5e8f\u5217\u8868\uff0c\u6709\u5e8f\u5217\u8868\uff0c\u81ea\u5b9a\u4e49\u5217\u8868 \u5217\u8868\u81ea\u5e26\u7684\u6837\u5f0f\u5c5e\u6027\u53ef\u4ee5\u901a\u8fc7CSS\u4fee\u6539 \u65e0\u5e8f\u5217\u8868 < ul > <!-- ul\u4e2d\u53ea\u80fd\u653eli\u6807\u7b7e\uff0c\u4f46li\u4e2d\u53ef\u4ee5\u653e\u4efb\u4f55\u6807\u7b7e --> < li > \u5217\u8868\u98791 </ li > < li > \u5217\u8868\u98792 </ li > < li > \u5217\u8868\u98793 </ li > ... </ ul > \u6709\u5e8f\u5217\u8868 < ol > <!-- ol\u4e2d\u53ea\u80fd\u653eli\u6807\u7b7e\uff0c\u4f46li\u4e2d\u53ef\u4ee5\u653e\u4efb\u4f55\u6807\u7b7e --> < li > \u5217\u8868\u98791 </ li > < li > \u5217\u8868\u98792 </ li > < li > \u5217\u8868\u98793 </ li > ... </ ol > \u81ea\u5b9a\u4e49\u5217\u8868 < dl > <!-- dl\u4e2d\u53ea\u80fd\u653edt/dd\u6807\u7b7e\uff0c\u4f46dt/dd\u4e2d\u53ef\u4ee5\u653e\u4efb\u4f55\u6807\u7b7e --> < dt > \u540d\u8bcd1 </ dt > < dd > \u540d\u8bcd1\u89e3\u91ca1 </ dd > < dd > \u540d\u8bcd1\u89e3\u91ca2 </ dd > </ dl >","title":"\u5217\u8868\u6807\u7b7e"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_14","text":"\u8868\u5355\u7528\u4e8e\u6536\u96c6\u7528\u6237\u4fe1\u606f \u8868\u5355\u7531 \u8868\u5355\u57df\uff0c\u8868\u5355\u63a7\u4ef6(\u8868\u5355\u5143\u7d20)\uff0c\u63d0\u793a\u4fe1\u606f \u6784\u6210 < form > </ form > \u5c5e\u6027 \u5c5e\u6027\u503c \u4f5c\u7528 action url\u5730\u5740 \u6307\u5b9a\u63a5\u53d7\u5e76\u5904\u7406\u8868\u8fbe\u90a3\u6570\u636e\u7684\u670d\u52a1\u5668\u7a0b\u5e8f\u7684url\u5730\u5740 method get/post \u8bbe\u7f6e\u8868\u5355\u6570\u636e\u7684\u63d0\u4ea4\u65b9\u5f0f name \u540d\u79f0 \u8bbe\u7f6e\u8868\u5355\u540d\u79f0","title":"\u8868\u5355\u6807\u7b7e"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#input","text":"< input type = \"\" /> <!-- type\u6307\u5b9a\u4e0d\u540c\u7684\u63a7\u4ef6\u7c7b\u578b --> <!-- eg --> <!-- \u5355\u9009\u5c5e\u6027\u5fc5\u987b\u6709\u76f8\u540c\u7684name\u503c --> \u6027\u522b\uff1a\u7537 < input type = \"radio\" name = \"sex\" > \u5973 < input type = \"radio\" name = \"sex\" > type\u5c5e\u6027\u503c \u63cf\u8ff0 button \u70b9\u51fb\u6309\u94ae\uff08\u591a\u6570\u60c5\u51b5\u4e0b\u901a\u8fc7JS\u542f\u52a8\u811a\u672c\uff09 checkbox \u590d\u9009\u6846 file \u8f93\u5165\u5b57\u6bb5\u548c\"\u6d4f\u89c8\"\u6309\u94ae\uff0c\u4f9b\u6587\u4ef6\u4e0a\u4f20 hidden \u9690\u85cf\u7684\u8f93\u5165\u5b57\u6bb5 image \u56fe\u50cf\u5f62\u5f0f\u7684\u63d0\u4ea4\u6309\u94ae password \u5bc6\u7801\u5b57\u6bb5\uff0c\u6697\u6587\u8f93\u5165 radio \u5355\u9009\u6309\u94ae reset \u91cd\u7f6e\u6309\u94ae submit \u63d0\u4ea4\u6309\u94ae text \u8f93\u5165\u5b57\u6bb5\uff0c\u5bbd\u5ea6\u9ed8\u8ba4\u4e3a20\u5b57\u7b26 input\u5176\u4ed6\u5c5e\u6027 \u5c5e\u6027\u503c \u63cf\u8ff0 name \u81ea\u5b9a\u4e49 \u540d\u79f0 value \u81ea\u5b9a\u4e49 input\u7684\u5143\u7d20\u503c checked checked \u89c4\u5b9a\u6b64input\u5143\u7d20\u9996\u6b21\u52a0\u8f7d\u65f6\u5e94\u5f53\u88ab\u9009\u4e2d maxlength \u6b63\u6574\u6570 \u8f93\u5165\u5b57\u6bb5\u5b57\u7b26\u7684\u6700\u5927\u957f\u5ea6","title":"input \u8f93\u5165\u8868\u5355\u5143\u7d20"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#label","text":"\u7ed1\u5b9a\u4e00\u4e2a\u8868\u5355\u5143\u7d20\uff0c\u5f53\u7528\u6237\u70b9\u51fb label \u6807\u7b7e\u5185\u7684\u6587\u672c\u65f6\uff0c\u4f1a\u81ea\u52a8\u5bf9\u5e94\u5230\u5bf9\u5e94\u7684\u8868\u5355\u5143\u7d20\u4e0a < label for = \"sex\" > \u7537 </ label > < input type = \"radio\" name = \"sex\" id = \"sex\" /> <!-- for \u4e0e id \u7684\u5c5e\u6027\u503c\u8981\u76f8\u540c -->","title":"label \u6807\u7b7e"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#select","text":"select \u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a option\uff0coption < select > < option > \u9009\u98791 </ option > < option > \u9009\u98792 </ option > <!-- selected \u8868\u793a\u9ed8\u8ba4\u9009\u4e2d\u9879 --> < option selected = \"selected\" > \u9009\u98793 </ option > ... </ select >","title":"select \u4e0b\u62c9\u8868\u5355\u5143\u7d20"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#textarea","text":"\u7528\u4e8e\u8f93\u5165\u591a\u884c\u7684\u6587\u672c\u8f93\u5165\u7684\u63a7\u4ef6 <!-- \u5b9e\u9645\u5f00\u53d1\u4e2d\u90fd\u662f\u7528CSS\u6765\u6539\u53d8\u5927\u5c0f --> < textraea rows = \"3\" cols = \"20\" > \u6587\u672c\u5185\u5bb9 </ textraea >","title":"textarea \u6587\u672c\u57df\u5143\u7d20"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_15","text":"","title":"\u5176\u4ed6\u6807\u7b7e"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#button","text":"< button > \u641c\u7d22 </ button > /*\u7b49\u6548\u4e8e < input type = \"button\" value = \"\u641c\u7d22\" > */","title":"button"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_16","text":"\u9ed1\u9a6c\u7a0b\u5e8f\u5458pink\u8001\u5e08\u524d\u7aef\u5165\u95e8\u6559\u7a0b\uff0c\u96f6\u57fa\u7840\u5fc5\u770b\u7684h5(html5)+css3+\u79fb\u52a8\u7aef\u524d\u7aef\u89c6\u9891\u6559\u7a0b_\u54d4\u54e9\u54d4\u54e9_bilibili","title":"\u53c2\u8003"},{"location":"%E7%AC%94%E8%AE%B0/C/","text":"gcc -E \u4e0d\u7f16\u8bd1\uff0c\u628a\u9884\u7f16\u8bd1\u4e2d\u7684\u5b8f\u5c55\u5f00 X-Macro","title":"C"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/","text":"Effective Python \u00b6 \u539f\u4e66\u7b2c\u4e8c\u7248 \u7b2c1\u7ae0 \u57f9\u517b Pythonic \u601d\u7ef4 \u00b6 2. PEP 8 \u98ce\u683c\u6307\u5357 \u00b6 \u7a7a\u767d\u6709\u5173 \u7f29\u8fdb\u7528 4 \u4e2a\u7a7a\u683c\u4ee3\u66ff \u547d\u540d\u76f8\u5173 \u51fd\u6570\uff0c\u53d8\u91cf\u53ca\u5c5e\u6027\u7528\u5c0f\u5199\u5b57\u6bcd\u548c\u4e0b\u5212\u7ebf\u8fde\u63a5\uff0c\u7c7b\u540d\u6bcf\u4e2a\u9996\u5b57\u6bcd\u90fd\u5927\u5199\uff08\u4e0d\u7528\u4e0b\u5212\u7ebf\uff09\uff0c\u6a21\u5757\u7ea7\u522b\u7684\u5e38\u91cf\u6240\u6709\u5b57\u6bcd\u5927\u5199\u5e76\u7528\u4e0b\u5212\u7ebf\u8fde\u63a5 \u7c7b\u4e2d\u7684\u5b9e\u4f8b\u65b9\u6cd5\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a self\uff08\u8868\u793a\u5bf9\u8c61\u672c\u8eab\uff09\uff0c\u7c7b\u65b9\u6cd5\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a cls\uff08\u8868\u793a\u7c7b\u672c\u8eab\uff09 \u8868\u8fbe\u5f0f\u548c\u8bed\u53e5\u76f8\u5173 \u5224\u65ad\u5bb9\u5668\u6216\u5e8f\u5217\u6709\u6ca1\u6709\u5185\u5bb9\u8981\u7528 if not somelist \u6216\u8005 if somelist \u591a\u884c\u7684\u8868\u8fbe\u5f0f\u7528\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u800c\u4e0d\u8981\u7528 \\ 3. str \u548c bytes \u00b6 bytes \u662f 8 \u4f4d\u503c\u6240\u7ec4\u6210\u7684\u5e8f\u5217\uff0cstr \u662f\u7531 Unicode \u7801\u70b9\u7ec4\u6210\u7684\u5e8f\u5217\uff0c\u4e24\u8005\u4e0d\u80fd\u6df7\u7528 def to_str ( bytes_or_str ): if isinstance ( bytes_or_str , bytes ): value = bytes_or_str . decode ( 'utf-8' ) else : value = bytes_or_str return value # to_bytes \u540c\u7406 4. \u652f\u6301\u63d2\u503c\u7684 f-string \u00b6 places = 3 number = 1.23456 print ( f 'my number is { number : . { places } f } ' ) # python3.6 >>> my number is 1.235 f \" { n !r} \" # \u8c03\u7528 repr() f \" { n !a} \" # \u8c03\u7528 ascii() f \" { n !s} \" # \u8c03\u7528 str() 7. enmuerate \u53d6\u4ee3 range \u00b6 8. zip \u51fd\u6570\u904d\u5386\u4e24\u4e2a\u8fed\u4ee3\u5668 \u00b6 zip \u7684\u5faa\u73af\u6b21\u6570\u7531\u6700\u77ed\u7684\u5217\u8868\u51b3\u5b9a\uff0c\u5982\u679c\u8981\u5168\u90e8\u8fed\u4ee3\u5b8c\uff0c\u53ef\u4ee5\u4f7f\u7528 zip_longest 9. \u8d4b\u503c\u8868\u8fbe\u5f0f\u51cf\u5c11\u91cd\u590d\u4ee3\u7801 \u00b6 := \u6d77\u8c61\u64cd\u4f5c\u7b26\uff0c\u9700\u8981 python 3.8 a = 1 # \u6b64\u8868\u8fbe\u5f0f\u6ca1\u6709\u503c a := 1 # \u6b64\u8868\u8fbe\u5f0f\u503c\u4e3a 1 \u7b2c2\u7ae0 \u5217\u8868\u4e0e\u5b57\u5178 \u00b6 11. \u5e8f\u5217\u5207\u7247 \u00b6 a [ 2 : 7 ] = [ 1 , 2 ] # list \u5207\u7247\u8d4b\u503c\u65f6\u5143\u7d20\u4e2a\u6570\u53ef\u4ee5\u4e0d\u540c,\u8fd9\u6837\u4f1a\u6539\u53d8 list \u7684\u957f\u5ea6 b = a [:] # \u7ed9 a \u5217\u8868\u505a\u65b0\u7684\u526f\u672c b = a # \u8fd9\u4e48\u505a\u4e0d\u4f1a\u7ed9 b \u5206\u914d\u65b0\u7684\u5217\u8868,a \u6539\u53d8\u540e b \u4e5f\u4f1a\u53d8 14. sort \u65b9\u6cd5\u7684 key \u53c2\u6570 \u00b6 \u5217\u8868\u4e2d\u5185\u7f6e\u7684 sort \u51fd\u6570 list1 . sort ( key , reverse = False ) reverse\uff1a\u7528\u6765\u63a7\u5236\u662f\u5426\u9006\u5e8f key\uff1a\u5bf9\u4e8e\u81ea\u5b9a\u4e49\u7684\u7c7b\u578b\u8981\u8fdb\u884c\u6392\u5e8f\uff0c\u8f93\u5165\u4e00\u4e2a\u51fd\u6570\uff08\uff09\uff1a list1 . sort ( key = lambda x : ( x . name , x . weight )) # \u4ece x \u4e2d\u53d6\u51fa\u4e86 2 \u4e2a\u5c5e\u6027\u6765\u8fdb\u884c\u6bd4\u8f83, \u5143\u7ec4\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u6bd4\u8f83 def fun ( x ): pass list1 . sort ( key = fun ) \u200b \u5982\u679c\u8981\u5bf9\u67d0\u4e9b\u5c5e\u6027\u5347\u5e8f\u5176\u4ed6\u5c5e\u6027\u964d\u5e8f\uff0c\u5982\u679c\u53ef\u4ee5\u7528\u8d1f\u53f7\u5c31\u7528\u8d1f\u53f7\uff0c\u5426\u5219\u53ea\u80fd\u591a\u6b21\u4f7f\u7528 sort \u65b9\u6cd5 16. \u7528 get \u5904\u7406\u952e\u4e0d\u5728\u5b57\u5178\u7684\u60c5\u51b5 \u00b6 dict1 . get ( key , val ) # val \u4e3a key \u4e0d\u5b58\u5728\u65f6\u8fd4\u56de\u7684\u9ed8\u8ba4\u503c 17. defaultdict \u5904\u7406\u5185\u90e8\u72b6\u6001\u4e2d\u7f3a\u5931\u5143\u7d20 \u00b6 defaultdict \u7528\u6765\u907f\u514d\u666e\u901a\u5b57\u5178\u7684 keyerror\uff0c\u5982\u679c\u8bbf\u95ee\u65f6 key \u4e0d\u5b58\u5728\u4f1a\u81ea\u52a8\u8c03\u7528\u53c2\u6570\u4e2d\u7684\u51fd\u6570\uff0cfun \u51fd\u6570\u4e0d\u80fd\u6709\u53c2\u6570 from collections import defaultdict data = defaultdict ( fun ) # eg data = defaultdict ( set ) 18. __missing__ \u6784\u9020\u4f9d\u8d56\u952e\u7684\u9ed8\u8ba4\u503c \u00b6 \u7ee7\u627f dict \u5e76\u5b9e\u73b0 __missing__ \u65b9\u6cd5\uff0c\u5b9a\u4e49\u4e86\u5b57\u5178\u4e2d\u4e0d\u5b58\u5728\u8fd9\u4e2a key \u65f6\u7684\u64cd\u4f5c class Picture ( dict ): def __missing__ ( self , key ): value = open_picture ( key ) # \u4e00\u4e2a\u51fd\u6570\uff0c\u8fd4\u56de\u6587\u4ef6\u53e5\u67c4 self [ key ] = value return value \u7b2c3\u7ae0 \u51fd\u6570 \u00b6 21. nonlocal \u548c global \u00b6 nonlocal \u5728\u51fd\u6570\u4e2d\u8868\u660e\u67d0\u53d8\u91cf\u4e3a\u6b64\u51fd\u6570\u4f5c\u7528\u57df\u5916\u9762\u7684\u53d8\u91cf\uff0c\u5426\u5219\u4f1a\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u540c\u540d\u53d8\u91cf global \u5728\u63cf\u8ff0\u67d0\u53d8\u91cf\u5e76\u8d4b\u503c\u540e\uff0c\u7cfb\u7edf\u4f1a\u628a\u6b64\u53d8\u91cf\u653e\u5230\u5168\u5c40\u4f5c\u7528\u57df \u4f46 nonlocal \u548c global \u90fd\u4e0d\u5e94\u8be5\u88ab\u6ee5\u7528\uff0cnonlocal \u7528\u6cd5\u6bd4\u8f83\u590d\u6742\u65f6\u6700\u597d\u4f7f\u7528\u8d4b\u503c\u7c7b class Sorter : def __init__ ( self , group ): self . group = group self . found = False def __call__ ( self , x ): if x in self . group : # \u5982\u679c\u5728 group\u7ec4\u4e2d\u7684\u4f18\u5148\u7ea7\u6bd4\u8f83\u9ad8 self . found = True # found \u4e0d\u7528 nonlocal return ( 0 , x ) return ( 1 , x ) sorter = Sorter ( group ) numbers . sort ( key = sorter ) 22. \u6570\u91cf\u53ef\u53d8\u7684\u4f4d\u7f6e\u53c2\u6570 \u00b6 def fun ( args1 , * varargs ): pass \u8fd9\u79cd\u505a\u6cd5\u9002\u5408\u53c2\u6570\u6570\u91cf\u4e0d\u592a\u591a\u7684\u60c5\u51b5 \u4e14\u8981\u6dfb\u52a0\u65b0\u7684\u53c2\u6570\u65f6\u6bd4\u8f83\u9ebb\u70e6\uff0c\u4e3a\u4e86\u907f\u514d\u6f0f\u6d1e\uff0c\u5e94\u8be5\u4f7f\u7528 keyword-only argument (25\u6761) \u6216\u8005\u6dfb\u52a0\u7c7b\u578b\u6ce8\u89e3 23. \u5173\u952e\u5b57\u53c2\u6570 \u00b6 def fun ( args1 , ** kwargs ): pass \u597d\u5904\uff1a \u6613\u61c2 \u5e26\u9ed8\u8ba4\u503c \u6613\u6269\u5c55 24. \u7528 None \u6765\u63cf\u8ff0\u9ed8\u8ba4\u503c\u53ef\u53d8\u7684\u53c2\u6570 \u00b6 \u5982\u9ed8\u8ba4\u8fd4\u56de\u5f53\u524d\u7684\u65f6\u95f4 \u4e0d\u8981\u7528\u5982 {} \u5145\u5f53\u9ed8\u8ba4\u53c2\u6570\uff0c\u4f1a\u6709\u95ee\u9898 25. keyword-only arg \u548c positional-only arg \u00b6 # keyword-only arg def safe_div ( number , divisor , * , ignore_overflow = False , # \u540e\u97622\u4e2a\u53c2\u6570\u5fc5\u987b\u4f7f\u7528\u5173\u952e\u5b57\u6307\u5b9a ignore_zero_div = False ): pass # positional-only arg\uff1apython 3.8\u65b0\u7279\u6027 # \u4e3a\u4e86\u907f\u514d\u51fd\u6570\u7684\u5173\u952e\u5b57\u6539\u540d\u4e4b\u7c7b\u7684\u60c5\u51b5 def safe_div ( number , divisor , / , * , # / \u5de6\u8fb9\u7684\u5fc5\u987b\u6309\u7167\u4f4d\u7f6e\u6307\u5b9a ignore_overflow = False , # \u540e\u97622\u4e2a\u53c2\u6570\u5fc5\u987b\u4f7f\u7528\u5173\u952e\u5b57\u6307\u5b9a ignore_zero_div = False ): pass # ------- # \u5904\u5728 / \u548c * \u4e4b\u95f4\u7684\u53c2\u6570\u5173\u952e\u5b57\u548c\u4f4d\u7f6e\u6307\u5b9a\u90fd\u53ef\u4ee5 # ------- 26. functools.wrap \u5b9a\u4e49\u51fd\u6570\u4fee\u9970\u5668 \u00b6 \u81ea\u5df1\u5199\u4fee\u9970\u5668\u4f1a\u6709\u5f88\u591a\u95ee\u9898 from functools import wraps def trace ( func ): @wraps ( func ) def wrapper ( * args , ** kwargs ): ... return wrapper @trace def fun ( n ): ... \u7b2c4\u7ae0 \u63a8\u5bfc\u4e0e\u751f\u6210 \u00b6 comprehension generator 27. \u63a8\u5bfc\u5f0f \u00b6 \u5217\u8868/\u5b57\u5178/\u96c6\u5408\u63a8\u5bfc\u5f0f a = [ 1 , 2 , 3 , 4 , 5 ] [ x for x in a if x > 3 if x % 2 == 0 ] # \u53ef\u4ee5\u4f7f\u7528\u591a\u4e2aif\uff0c\u8fd9\u4e9b if \u8868\u793a\u540c\u65f6\u6210\u7acb [ x for x in a if x > 3 and if x % 2 == 0 ] # \u6548\u679c\u76f8\u540c 29. \u7528\u8d4b\u503c\u8868\u8fbe\u5f0f\u51cf\u5c11\u63a8\u5bfc\u5f0f\u4e2d\u7684\u4ee3\u7801 \u00b6 has_bug = { name : get_batches ( stock . get ( name , 0 ), 8 ) for name in order if get_batches ( stock . get ( name , 0 ), 8 )} has_bug = { name : batches # \u5bf9\u6bd4\u4e0a\u9762\u7684\u5199\u6cd5 for name in order if batches := get_batches ( stock . get ( name , 0 ), 8 )} # \u8d4b\u503c\u8868\u8fbe\u5f0f\u4f1a\u6709\u4f5c\u7528\u57df\u95ee\u9898 30. \u7528 \u751f\u6210\u5668 yield\uff0c \u4e0d\u8981\u8ba9\u51fd\u6570\u8fd4\u56de\u5217\u8868 \u00b6 it = index_word_iter ( address ) # \u6b64\u51fd\u6570\u5185\u7528\u7684 yield print ( next ( it )) # \u7528 next \u53d6\u503c print ( list ( it )) # \u4e5f\u53ef\u4ee5\u628a\u8fed\u4ee3\u5668\u4f20\u9012\u7ed9 list \u5f97\u5230 list 31. \u8c28\u614e\u8fed\u4ee3\u51fd\u6570\u6536\u5230\u7684\u53c2\u6570 \u00b6 \u6211\u7684\u7406\u89e3\u662f\u5982\u679c\u53c2\u6570\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8fed\u4ee3\u5668\u53ea\u80fd\u5b8c\u6574\u7684\u8fed\u4ee3\u4e00\u6b21 \u89e3\u51b3\u65b9\u6848\uff1a \u5728\u51fd\u6570\u5185\u590d\u5236\u4e00\u4efd\u6570\u636e, list(arg), \u7f3a\u70b9\u662f\u6570\u636e\u91cf\u5927\u65f6\u5185\u5b58\u6d88\u8017\u5927 \u53c2\u6570\u4ece\u8fed\u4ee3\u5668\u53d8\u6210\u8fd4\u56de\u8fed\u4ee3\u5668\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528 lambda \u65b0\u5efa\u4e00\u4e2a\u5bb9\u5668\u7c7b\uff0c\u5b9e\u73b0\u8fed\u4ee3\u5668\u534f\u8bae 32. \u751f\u6210\u5668\u8868\u8fbe\u5f0f(\u66ff\u4ee3\u6570\u636e\u91cf\u8f83\u5927\u7684\u5217\u8868\u63a8\u5bfc\u5f0f) \u00b6 it = ( len ( x ) for x in open ( \"my_file.txt\" )) print ( it ) >>> < generator ...> # \u53ef\u4ee5\u5d4c\u5957 roots = (( x , x ** 0.5 ) for x in it ) # it \u4e3a\u4e0a\u9762\u5f97\u5230\u7684 iter \u8981\u6ce8\u610f\u751f\u6210\u5668\u53ea\u80fd\u8fed\u4ee3\u4e00\u6b21 33. yield from \u00b6 34. \u00b6 (\u4e70\u7684\u4e66\u7f3a\u4e869\u9875....) 35. \u00b6 36. \u00b6 \u7b2c5\u7ae0 \u7c7b\u4e0e\u63a5\u53e3 \u00b6 37. \u7528\u7ec4\u5408\u8d77\u6765\u7684\u7c7b\u5b9e\u73b0\u591a\u5c42\u7ed3\u6784\uff0c\u4e0d\u8981\u7528\u5d4c\u5957\u7684\u5185\u7f6e\u7c7b\u578b \u00b6 \u79d1\u76ee\u6210\u7ee9->\u5b66\u751f->\u6210\u7ee9\u518c 38. \u7528\u7b80\u5355\u63a5\u53e3\u63a5\u53d7\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u7c7b\u7684\u5b9e\u4f8b \u00b6 \u65b9\u6cd5\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u6302\u94a9(hook)\uff0c\u5982\u679c\u7c7b\u5b9a\u4e49\u4e86 __call__\uff0c\u90a3\u4e48\u7c7b\u7684\u5bf9\u8c61\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u6302\u94a9(callable) 39. @classmethod \u591a\u6001 \u00b6 40. \u4f7f\u7528 super \u521d\u59cb\u5316\u8d85\u7c7b \u00b6 \u5982\u679c\u76f4\u63a5\u8c03\u7528\u7236\u7c7b\u7684\u521d\u59cb\u5316\u51fd\u6570\uff0c\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\u4f1a\u6709\u95ee\u9898\uff0c\u6bd4\u5982\u83f1\u5f62\u7ee7\u627f class MyBaseClass : def __init__ ( self , value ): self . value = value class MyChildClass ( MyBaseClass ): def __init__ ( self ): MyBaseClass . __init__ ( self , 5 ) # \u76f4\u63a5\u8c03\u7528\u7236\u7c7b\u7684\u521d\u59cb\u5316\u51fd\u6570 \u4f7f\u7528 super() \u5728\u591a\u7ee7\u627f\u65f6\u4f1a\u9075\u5faa C3 \u7ebf\u6027\u5316\u7b97\u6cd5\uff0c\u907f\u514d\u591a\u6b21\u8c03\u7528\u83f1\u5f62\u7ee7\u627f\u4e2d\u5171\u540c\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570; \u4e14\u8d85\u7c7b\u6539\u540d\u540e\u4e5f\u4e0d\u7528\u6539\u7a0b\u5e8f \u53ef\u4ee5\u901a\u8fc7 mro() \u65b9\u6cd5 \u6765\u67e5\u770b\u8d85\u7c7b\u7684\u521d\u59cb\u5316\u987a\u5e8f(P139); MRO(method resolution order): \u65b9\u6cd5\u89e3\u6790\u987a\u5e8f 41. mix-in \u7c7b \u00b6 43. \u81ea\u5b9a\u4e49\u5bb9\u5668\u7c7b\u578b\u4ece collections.abc \u00b6 from collections.abc import Sequence class MySequence ( Sequence ): pass \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5982\u679c\u81ea\u5b9a\u4e49\u5bb9\u5668\u6709\u67d0\u4e9b\u65b9\u6cd5\u6ca1\u6709\u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u5728\u5b9e\u4f8b\u5316\u65f6\u4f1a\u62a5\u9519 \u7b2c6\u7ae0 \u00b6 \u7b2c7\u7ae0 \u00b6 \u7b2c8\u7ae0 \u00b6 \u7b2c9\u7ae0 \u00b6","title":"Effective Python"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#effective-python","text":"\u539f\u4e66\u7b2c\u4e8c\u7248","title":"Effective Python"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#1-pythonic","text":"","title":"\u7b2c1\u7ae0 \u57f9\u517b Pythonic \u601d\u7ef4"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#2-pep-8","text":"\u7a7a\u767d\u6709\u5173 \u7f29\u8fdb\u7528 4 \u4e2a\u7a7a\u683c\u4ee3\u66ff \u547d\u540d\u76f8\u5173 \u51fd\u6570\uff0c\u53d8\u91cf\u53ca\u5c5e\u6027\u7528\u5c0f\u5199\u5b57\u6bcd\u548c\u4e0b\u5212\u7ebf\u8fde\u63a5\uff0c\u7c7b\u540d\u6bcf\u4e2a\u9996\u5b57\u6bcd\u90fd\u5927\u5199\uff08\u4e0d\u7528\u4e0b\u5212\u7ebf\uff09\uff0c\u6a21\u5757\u7ea7\u522b\u7684\u5e38\u91cf\u6240\u6709\u5b57\u6bcd\u5927\u5199\u5e76\u7528\u4e0b\u5212\u7ebf\u8fde\u63a5 \u7c7b\u4e2d\u7684\u5b9e\u4f8b\u65b9\u6cd5\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a self\uff08\u8868\u793a\u5bf9\u8c61\u672c\u8eab\uff09\uff0c\u7c7b\u65b9\u6cd5\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a cls\uff08\u8868\u793a\u7c7b\u672c\u8eab\uff09 \u8868\u8fbe\u5f0f\u548c\u8bed\u53e5\u76f8\u5173 \u5224\u65ad\u5bb9\u5668\u6216\u5e8f\u5217\u6709\u6ca1\u6709\u5185\u5bb9\u8981\u7528 if not somelist \u6216\u8005 if somelist \u591a\u884c\u7684\u8868\u8fbe\u5f0f\u7528\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u800c\u4e0d\u8981\u7528 \\","title":"2. PEP 8 \u98ce\u683c\u6307\u5357"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#3-str-bytes","text":"bytes \u662f 8 \u4f4d\u503c\u6240\u7ec4\u6210\u7684\u5e8f\u5217\uff0cstr \u662f\u7531 Unicode \u7801\u70b9\u7ec4\u6210\u7684\u5e8f\u5217\uff0c\u4e24\u8005\u4e0d\u80fd\u6df7\u7528 def to_str ( bytes_or_str ): if isinstance ( bytes_or_str , bytes ): value = bytes_or_str . decode ( 'utf-8' ) else : value = bytes_or_str return value # to_bytes \u540c\u7406","title":"3. str \u548c bytes"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#4-f-string","text":"places = 3 number = 1.23456 print ( f 'my number is { number : . { places } f } ' ) # python3.6 >>> my number is 1.235 f \" { n !r} \" # \u8c03\u7528 repr() f \" { n !a} \" # \u8c03\u7528 ascii() f \" { n !s} \" # \u8c03\u7528 str()","title":"4. \u652f\u6301\u63d2\u503c\u7684 f-string"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#7-enmuerate-range","text":"","title":"7. enmuerate \u53d6\u4ee3 range"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#8-zip","text":"zip \u7684\u5faa\u73af\u6b21\u6570\u7531\u6700\u77ed\u7684\u5217\u8868\u51b3\u5b9a\uff0c\u5982\u679c\u8981\u5168\u90e8\u8fed\u4ee3\u5b8c\uff0c\u53ef\u4ee5\u4f7f\u7528 zip_longest","title":"8. zip \u51fd\u6570\u904d\u5386\u4e24\u4e2a\u8fed\u4ee3\u5668"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#9","text":":= \u6d77\u8c61\u64cd\u4f5c\u7b26\uff0c\u9700\u8981 python 3.8 a = 1 # \u6b64\u8868\u8fbe\u5f0f\u6ca1\u6709\u503c a := 1 # \u6b64\u8868\u8fbe\u5f0f\u503c\u4e3a 1","title":"9. \u8d4b\u503c\u8868\u8fbe\u5f0f\u51cf\u5c11\u91cd\u590d\u4ee3\u7801"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#2","text":"","title":"\u7b2c2\u7ae0 \u5217\u8868\u4e0e\u5b57\u5178"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#11","text":"a [ 2 : 7 ] = [ 1 , 2 ] # list \u5207\u7247\u8d4b\u503c\u65f6\u5143\u7d20\u4e2a\u6570\u53ef\u4ee5\u4e0d\u540c,\u8fd9\u6837\u4f1a\u6539\u53d8 list \u7684\u957f\u5ea6 b = a [:] # \u7ed9 a \u5217\u8868\u505a\u65b0\u7684\u526f\u672c b = a # \u8fd9\u4e48\u505a\u4e0d\u4f1a\u7ed9 b \u5206\u914d\u65b0\u7684\u5217\u8868,a \u6539\u53d8\u540e b \u4e5f\u4f1a\u53d8","title":"11. \u5e8f\u5217\u5207\u7247"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#14-sort-key","text":"\u5217\u8868\u4e2d\u5185\u7f6e\u7684 sort \u51fd\u6570 list1 . sort ( key , reverse = False ) reverse\uff1a\u7528\u6765\u63a7\u5236\u662f\u5426\u9006\u5e8f key\uff1a\u5bf9\u4e8e\u81ea\u5b9a\u4e49\u7684\u7c7b\u578b\u8981\u8fdb\u884c\u6392\u5e8f\uff0c\u8f93\u5165\u4e00\u4e2a\u51fd\u6570\uff08\uff09\uff1a list1 . sort ( key = lambda x : ( x . name , x . weight )) # \u4ece x \u4e2d\u53d6\u51fa\u4e86 2 \u4e2a\u5c5e\u6027\u6765\u8fdb\u884c\u6bd4\u8f83, \u5143\u7ec4\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u6bd4\u8f83 def fun ( x ): pass list1 . sort ( key = fun ) \u200b \u5982\u679c\u8981\u5bf9\u67d0\u4e9b\u5c5e\u6027\u5347\u5e8f\u5176\u4ed6\u5c5e\u6027\u964d\u5e8f\uff0c\u5982\u679c\u53ef\u4ee5\u7528\u8d1f\u53f7\u5c31\u7528\u8d1f\u53f7\uff0c\u5426\u5219\u53ea\u80fd\u591a\u6b21\u4f7f\u7528 sort \u65b9\u6cd5","title":"14. sort \u65b9\u6cd5\u7684 key \u53c2\u6570"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#16-get","text":"dict1 . get ( key , val ) # val \u4e3a key \u4e0d\u5b58\u5728\u65f6\u8fd4\u56de\u7684\u9ed8\u8ba4\u503c","title":"16. \u7528 get \u5904\u7406\u952e\u4e0d\u5728\u5b57\u5178\u7684\u60c5\u51b5"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#17-defaultdict","text":"defaultdict \u7528\u6765\u907f\u514d\u666e\u901a\u5b57\u5178\u7684 keyerror\uff0c\u5982\u679c\u8bbf\u95ee\u65f6 key \u4e0d\u5b58\u5728\u4f1a\u81ea\u52a8\u8c03\u7528\u53c2\u6570\u4e2d\u7684\u51fd\u6570\uff0cfun \u51fd\u6570\u4e0d\u80fd\u6709\u53c2\u6570 from collections import defaultdict data = defaultdict ( fun ) # eg data = defaultdict ( set )","title":"17. defaultdict \u5904\u7406\u5185\u90e8\u72b6\u6001\u4e2d\u7f3a\u5931\u5143\u7d20"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#18-__missing__","text":"\u7ee7\u627f dict \u5e76\u5b9e\u73b0 __missing__ \u65b9\u6cd5\uff0c\u5b9a\u4e49\u4e86\u5b57\u5178\u4e2d\u4e0d\u5b58\u5728\u8fd9\u4e2a key \u65f6\u7684\u64cd\u4f5c class Picture ( dict ): def __missing__ ( self , key ): value = open_picture ( key ) # \u4e00\u4e2a\u51fd\u6570\uff0c\u8fd4\u56de\u6587\u4ef6\u53e5\u67c4 self [ key ] = value return value","title":"18. __missing__ \u6784\u9020\u4f9d\u8d56\u952e\u7684\u9ed8\u8ba4\u503c"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#3","text":"","title":"\u7b2c3\u7ae0 \u51fd\u6570"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#21-nonlocal-global","text":"nonlocal \u5728\u51fd\u6570\u4e2d\u8868\u660e\u67d0\u53d8\u91cf\u4e3a\u6b64\u51fd\u6570\u4f5c\u7528\u57df\u5916\u9762\u7684\u53d8\u91cf\uff0c\u5426\u5219\u4f1a\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u540c\u540d\u53d8\u91cf global \u5728\u63cf\u8ff0\u67d0\u53d8\u91cf\u5e76\u8d4b\u503c\u540e\uff0c\u7cfb\u7edf\u4f1a\u628a\u6b64\u53d8\u91cf\u653e\u5230\u5168\u5c40\u4f5c\u7528\u57df \u4f46 nonlocal \u548c global \u90fd\u4e0d\u5e94\u8be5\u88ab\u6ee5\u7528\uff0cnonlocal \u7528\u6cd5\u6bd4\u8f83\u590d\u6742\u65f6\u6700\u597d\u4f7f\u7528\u8d4b\u503c\u7c7b class Sorter : def __init__ ( self , group ): self . group = group self . found = False def __call__ ( self , x ): if x in self . group : # \u5982\u679c\u5728 group\u7ec4\u4e2d\u7684\u4f18\u5148\u7ea7\u6bd4\u8f83\u9ad8 self . found = True # found \u4e0d\u7528 nonlocal return ( 0 , x ) return ( 1 , x ) sorter = Sorter ( group ) numbers . sort ( key = sorter )","title":"21. nonlocal \u548c global"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#22","text":"def fun ( args1 , * varargs ): pass \u8fd9\u79cd\u505a\u6cd5\u9002\u5408\u53c2\u6570\u6570\u91cf\u4e0d\u592a\u591a\u7684\u60c5\u51b5 \u4e14\u8981\u6dfb\u52a0\u65b0\u7684\u53c2\u6570\u65f6\u6bd4\u8f83\u9ebb\u70e6\uff0c\u4e3a\u4e86\u907f\u514d\u6f0f\u6d1e\uff0c\u5e94\u8be5\u4f7f\u7528 keyword-only argument (25\u6761) \u6216\u8005\u6dfb\u52a0\u7c7b\u578b\u6ce8\u89e3","title":"22. \u6570\u91cf\u53ef\u53d8\u7684\u4f4d\u7f6e\u53c2\u6570"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#23","text":"def fun ( args1 , ** kwargs ): pass \u597d\u5904\uff1a \u6613\u61c2 \u5e26\u9ed8\u8ba4\u503c \u6613\u6269\u5c55","title":"23. \u5173\u952e\u5b57\u53c2\u6570"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#24-none","text":"\u5982\u9ed8\u8ba4\u8fd4\u56de\u5f53\u524d\u7684\u65f6\u95f4 \u4e0d\u8981\u7528\u5982 {} \u5145\u5f53\u9ed8\u8ba4\u53c2\u6570\uff0c\u4f1a\u6709\u95ee\u9898","title":"24. \u7528 None \u6765\u63cf\u8ff0\u9ed8\u8ba4\u503c\u53ef\u53d8\u7684\u53c2\u6570"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#25-keyword-only-arg-positional-only-arg","text":"# keyword-only arg def safe_div ( number , divisor , * , ignore_overflow = False , # \u540e\u97622\u4e2a\u53c2\u6570\u5fc5\u987b\u4f7f\u7528\u5173\u952e\u5b57\u6307\u5b9a ignore_zero_div = False ): pass # positional-only arg\uff1apython 3.8\u65b0\u7279\u6027 # \u4e3a\u4e86\u907f\u514d\u51fd\u6570\u7684\u5173\u952e\u5b57\u6539\u540d\u4e4b\u7c7b\u7684\u60c5\u51b5 def safe_div ( number , divisor , / , * , # / \u5de6\u8fb9\u7684\u5fc5\u987b\u6309\u7167\u4f4d\u7f6e\u6307\u5b9a ignore_overflow = False , # \u540e\u97622\u4e2a\u53c2\u6570\u5fc5\u987b\u4f7f\u7528\u5173\u952e\u5b57\u6307\u5b9a ignore_zero_div = False ): pass # ------- # \u5904\u5728 / \u548c * \u4e4b\u95f4\u7684\u53c2\u6570\u5173\u952e\u5b57\u548c\u4f4d\u7f6e\u6307\u5b9a\u90fd\u53ef\u4ee5 # -------","title":"25. keyword-only arg \u548c positional-only arg"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#26-functoolswrap","text":"\u81ea\u5df1\u5199\u4fee\u9970\u5668\u4f1a\u6709\u5f88\u591a\u95ee\u9898 from functools import wraps def trace ( func ): @wraps ( func ) def wrapper ( * args , ** kwargs ): ... return wrapper @trace def fun ( n ): ...","title":"26. functools.wrap \u5b9a\u4e49\u51fd\u6570\u4fee\u9970\u5668"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#4","text":"comprehension generator","title":"\u7b2c4\u7ae0 \u63a8\u5bfc\u4e0e\u751f\u6210"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#27","text":"\u5217\u8868/\u5b57\u5178/\u96c6\u5408\u63a8\u5bfc\u5f0f a = [ 1 , 2 , 3 , 4 , 5 ] [ x for x in a if x > 3 if x % 2 == 0 ] # \u53ef\u4ee5\u4f7f\u7528\u591a\u4e2aif\uff0c\u8fd9\u4e9b if \u8868\u793a\u540c\u65f6\u6210\u7acb [ x for x in a if x > 3 and if x % 2 == 0 ] # \u6548\u679c\u76f8\u540c","title":"27. \u63a8\u5bfc\u5f0f"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#29","text":"has_bug = { name : get_batches ( stock . get ( name , 0 ), 8 ) for name in order if get_batches ( stock . get ( name , 0 ), 8 )} has_bug = { name : batches # \u5bf9\u6bd4\u4e0a\u9762\u7684\u5199\u6cd5 for name in order if batches := get_batches ( stock . get ( name , 0 ), 8 )} # \u8d4b\u503c\u8868\u8fbe\u5f0f\u4f1a\u6709\u4f5c\u7528\u57df\u95ee\u9898","title":"29. \u7528\u8d4b\u503c\u8868\u8fbe\u5f0f\u51cf\u5c11\u63a8\u5bfc\u5f0f\u4e2d\u7684\u4ee3\u7801"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#30-yield","text":"it = index_word_iter ( address ) # \u6b64\u51fd\u6570\u5185\u7528\u7684 yield print ( next ( it )) # \u7528 next \u53d6\u503c print ( list ( it )) # \u4e5f\u53ef\u4ee5\u628a\u8fed\u4ee3\u5668\u4f20\u9012\u7ed9 list \u5f97\u5230 list","title":"30. \u7528 \u751f\u6210\u5668 yield\uff0c \u4e0d\u8981\u8ba9\u51fd\u6570\u8fd4\u56de\u5217\u8868"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#31","text":"\u6211\u7684\u7406\u89e3\u662f\u5982\u679c\u53c2\u6570\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8fed\u4ee3\u5668\u53ea\u80fd\u5b8c\u6574\u7684\u8fed\u4ee3\u4e00\u6b21 \u89e3\u51b3\u65b9\u6848\uff1a \u5728\u51fd\u6570\u5185\u590d\u5236\u4e00\u4efd\u6570\u636e, list(arg), \u7f3a\u70b9\u662f\u6570\u636e\u91cf\u5927\u65f6\u5185\u5b58\u6d88\u8017\u5927 \u53c2\u6570\u4ece\u8fed\u4ee3\u5668\u53d8\u6210\u8fd4\u56de\u8fed\u4ee3\u5668\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528 lambda \u65b0\u5efa\u4e00\u4e2a\u5bb9\u5668\u7c7b\uff0c\u5b9e\u73b0\u8fed\u4ee3\u5668\u534f\u8bae","title":"31. \u8c28\u614e\u8fed\u4ee3\u51fd\u6570\u6536\u5230\u7684\u53c2\u6570"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#32","text":"it = ( len ( x ) for x in open ( \"my_file.txt\" )) print ( it ) >>> < generator ...> # \u53ef\u4ee5\u5d4c\u5957 roots = (( x , x ** 0.5 ) for x in it ) # it \u4e3a\u4e0a\u9762\u5f97\u5230\u7684 iter \u8981\u6ce8\u610f\u751f\u6210\u5668\u53ea\u80fd\u8fed\u4ee3\u4e00\u6b21","title":"32. \u751f\u6210\u5668\u8868\u8fbe\u5f0f(\u66ff\u4ee3\u6570\u636e\u91cf\u8f83\u5927\u7684\u5217\u8868\u63a8\u5bfc\u5f0f)"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#33-yield-from","text":"","title":"33. yield from"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#34","text":"(\u4e70\u7684\u4e66\u7f3a\u4e869\u9875....)","title":"34."},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#35","text":"","title":"35."},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#36","text":"","title":"36."},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#5","text":"","title":"\u7b2c5\u7ae0 \u7c7b\u4e0e\u63a5\u53e3"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#37","text":"\u79d1\u76ee\u6210\u7ee9->\u5b66\u751f->\u6210\u7ee9\u518c","title":"37. \u7528\u7ec4\u5408\u8d77\u6765\u7684\u7c7b\u5b9e\u73b0\u591a\u5c42\u7ed3\u6784\uff0c\u4e0d\u8981\u7528\u5d4c\u5957\u7684\u5185\u7f6e\u7c7b\u578b"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#38","text":"\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u6302\u94a9(hook)\uff0c\u5982\u679c\u7c7b\u5b9a\u4e49\u4e86 __call__\uff0c\u90a3\u4e48\u7c7b\u7684\u5bf9\u8c61\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u6302\u94a9(callable)","title":"38. \u7528\u7b80\u5355\u63a5\u53e3\u63a5\u53d7\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u7c7b\u7684\u5b9e\u4f8b"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#39-classmethod","text":"","title":"39. @classmethod \u591a\u6001"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#40-super","text":"\u5982\u679c\u76f4\u63a5\u8c03\u7528\u7236\u7c7b\u7684\u521d\u59cb\u5316\u51fd\u6570\uff0c\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\u4f1a\u6709\u95ee\u9898\uff0c\u6bd4\u5982\u83f1\u5f62\u7ee7\u627f class MyBaseClass : def __init__ ( self , value ): self . value = value class MyChildClass ( MyBaseClass ): def __init__ ( self ): MyBaseClass . __init__ ( self , 5 ) # \u76f4\u63a5\u8c03\u7528\u7236\u7c7b\u7684\u521d\u59cb\u5316\u51fd\u6570 \u4f7f\u7528 super() \u5728\u591a\u7ee7\u627f\u65f6\u4f1a\u9075\u5faa C3 \u7ebf\u6027\u5316\u7b97\u6cd5\uff0c\u907f\u514d\u591a\u6b21\u8c03\u7528\u83f1\u5f62\u7ee7\u627f\u4e2d\u5171\u540c\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570; \u4e14\u8d85\u7c7b\u6539\u540d\u540e\u4e5f\u4e0d\u7528\u6539\u7a0b\u5e8f \u53ef\u4ee5\u901a\u8fc7 mro() \u65b9\u6cd5 \u6765\u67e5\u770b\u8d85\u7c7b\u7684\u521d\u59cb\u5316\u987a\u5e8f(P139); MRO(method resolution order): \u65b9\u6cd5\u89e3\u6790\u987a\u5e8f","title":"40. \u4f7f\u7528 super \u521d\u59cb\u5316\u8d85\u7c7b"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#41-mix-in","text":"","title":"41. mix-in \u7c7b"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#43-collectionsabc","text":"from collections.abc import Sequence class MySequence ( Sequence ): pass \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5982\u679c\u81ea\u5b9a\u4e49\u5bb9\u5668\u6709\u67d0\u4e9b\u65b9\u6cd5\u6ca1\u6709\u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u5728\u5b9e\u4f8b\u5316\u65f6\u4f1a\u62a5\u9519","title":"43. \u81ea\u5b9a\u4e49\u5bb9\u5668\u7c7b\u578b\u4ece collections.abc"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#6","text":"","title":"\u7b2c6\u7ae0"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#7","text":"","title":"\u7b2c7\u7ae0"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#8","text":"","title":"\u7b2c8\u7ae0"},{"location":"%E7%AC%94%E8%AE%B0/Effective%20Python/#9_1","text":"","title":"\u7b2c9\u7ae0"},{"location":"%E7%AC%94%E8%AE%B0/Git/","text":"Git \u00b6 Git\u6559\u7a0b - \u5ed6\u96ea\u5cf0\u7684\u5b98\u65b9\u7f51\u7ad9 (liaoxuefeng.com) Git \u7b80\u4ecb \u00b6 Git \u662f\u5206\u5e03\u5f0f\u7684\u7248\u672c\u63a7\u5236\u7cfb\u7edf \u96c6\u4e2d\u5f0f\u7248\u672c\u63a7\u5236\u7cfb\u7edf\uff1a\u7248\u672c\u5e93\u5b58\u653e\u5728\u4e2d\u592e\u670d\u52a1\u5668\uff0c\u5fc5\u987b\u8981\u8054\u7f51 \u5206\u5e03\u5f0f\u7248\u672c\u63a7\u5236\u7cfb\u7edf\uff1a\u6bcf\u4e2a\u4eba\u7684\u7535\u8111\u90fd\u6709\u5b8c\u6574\u7684\u7248\u672c\u5e93\uff0c\u4e0d\u540c\u7535\u8111\u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u63a8\u9001\u7248\u672c\uff0c\u901a\u5e38\u4e5f\u6709\u4e2d\u592e\u670d\u52a1\u5668\u6765\u65b9\u4fbf\"\u4ea4\u6362\"\u5927\u5bb6\u7684\u4fee\u6539 Git \u5b89\u88c5 \u00b6 Ubuntu \u4e2d\u76f4\u63a5 sudo apt install git Windows\uff1a\u5728\u5b98\u7f51\u4e0b\u8f7d Git - Downloads (git-scm.com) \u5b89\u88c5\u5b8c\u6210\u540e\u5728\u547d\u4ee4\u884c\u8f93\u5165\uff1a\u4e3a\u6bcf\u4e2a\u673a\u5668\u81ea\u62a5\u5bb6\u95e8\uff0cglobal \u8868\u793a\u4e3a\u6b64\u673a\u5668\u7684\u6240\u6709 Git \u4ed3\u5e93\u4f7f\u7528\u6b64\u914d\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u4e3a\u67d0\u4e2a\u4ed3\u5e93\u5355\u72ec\u914d\u7f6e git config --global user.name \"Your Name\" git config --global user.email \"email@example.com\" \u5982\u679c\u662f\u67e5\u770b\u81ea\u5df1\u7684\u7528\u6237\u540d\u548c\u90ae\u7bb1\uff1a git config uesr.name git config user.email \u521b\u5efa\u7248\u672c\u5e93 \u00b6 \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\u5939 \uff0c\u6ce8\u610f\u76ee\u5f55\u4e0d\u8981\u6709\u4e2d\u6587 $ mkdir learngit $ cd learngit $ pwd \u901a\u8fc7 git init \u547d\u4ee4\u628a\u8fd9\u4e2a\u76ee\u5f55\u53d8\u6210Git\u53ef\u4ee5\u7ba1\u7406\u7684\u4ed3\u5e93\uff0c\u8fd9\u6837\u4f1a\u591a\u4e00\u4e2a .git \u7684\u76ee\u5f55\u7528\u6765\u7ba1\u7406\u7248\u672c\u5e93 $ git init \u7248\u672c\u63a7\u5236 \u00b6 \u5de5\u4f5c\u533a\u548c\u6682\u5b58\u533a \u00b6 \u5de5\u4f5c\u533a\u5373\u4e00\u4e2a\u76ee\u5f55\uff0c\u7248\u672c\u5e93\u5728 .git \u76ee\u5f55\u4e2d\uff0c\u91cc\u9762\u6709\u4e00\u4e2a\u53eb stage \u7684\u6682\u5b58\u533a\u548c Git \u4e3a\u6211\u4eec\u81ea\u52a8\u521b\u5efa\u7684\u7b2c\u4e00\u4e2a\u5206\u652f master \uff0c\u4ee5\u53ca\u6307\u5411 master \u7684\u4e00\u4e2a\u6307\u9488\u53eb HEAD \u628a\u6587\u4ef6\u5f80Git\u7248\u672c\u5e93\u91cc\u6dfb\u52a0\u7684\u65f6\u5019\uff0c\u662f\u5206\u4e24\u6b65\u6267\u884c\u7684\uff1a git add file_path # \u6dfb\u52a0\u6307\u5b9a\u6587\u4ef6\u5230\u6682\u5b58\u533a git add . # \u6dfb\u52a0\u6240\u6709\u7684\u6587\u4ef6\u5230\u6682\u5b58\u533a git add --all # \u6dfb\u52a0\u6240\u6709\u7684\u6587\u4ef6\u5230\u6682\u5b58\u533a git commit -m \"comment\" # \u5c06\u6682\u5b58\u533a\u7684\u5185\u5bb9\u6dfb\u52a0\u5230\u7248\u672c\u5e93 git status \uff1a\u53ef\u4ee5\u67e5\u770b\u4ed3\u5e93\u5f53\u524d\u72b6\u6001 Changes not staged for commit \u8868\u793a\u672a\u8fdb\u5165 stage\uff08\u672a add\uff09 Changes to be committed \u8868\u793a\u8fdb\u5165\u4e86 stage \u4f46\u662f\u6ca1\u6709\u63d0\u4ea4\u5230\u5206\u652f Untracked files \u8868\u793a\u662f\u65b0\u6587\u4ef6 git diff \uff1a\u67e5\u770b\u5de5\u4f5c\u533a\u548c\u6682\u5b58\u533a\u5dee\u5f02\uff0c\u663e\u793a\u7684\u683c\u5f0f\u662f Unix \u901a\u7528\u7684 diff \u683c\u5f0f git diff --cached \u67e5\u770b\u6682\u5b58\u533a\u548c\u4ed3\u5e93\u5dee\u5f02 git diff HEAD \u67e5\u770b\u5de5\u4f5c\u533a\u548c\u4ed3\u5e93\u7684\u5dee\u5f02 \u7248\u672c\u56de\u9000 \u00b6 git log \uff1a\u67e5\u770b\u5386\u53f2\u8bb0\u5f55 \u53ef\u4ee5\u5728 ~/.bashrc \u4e2d\u6dfb\u52a0\u522b\u540d\uff0c\u7528 git-log \u66f4\u65b9\u4fbf alias git-log='git log --pretty=oneline --all --graph get reflog \uff1a\u53ef\u4ee5\u67e5\u770b\u6bcf\u6b21\u64cd\u4f5c\u5bf9\u5e94\u7684 commit id git reset --hard HEAD^ \uff1a\u7248\u672c\u56de\u9000\uff0cHEAD\u8868\u793a\u5f53\u524d\u7248\u672c\uff0c\u6709\u51e0\u4e2a ^ \u5c31\u8868\u793a\u56de\u9000\u591a\u5c11\u4e2a\u7248\u672c\uff0c\u4e5f\u53ef\u4ee5\u5199 HEAD~100 \u8868\u793a\u56de\u9000100\u4e2a\u7248\u672c\uff0c\u4e5f\u53ef\u4ee5 --hard commit_id \u76f4\u63a5\u5230\u6307\u5b9a\u7684\u7248\u672c \u64a4\u9500\u4fee\u6539 \u00b6 \u5728\u5de5\u4f5c\u533a\u7684\u6587\u4ef6\u4e2d\u5199\u4e86\u4e0d\u8be5\u5199\u7684\u4e1c\u897f\uff0c\u540e\u8981\u64a4\u9500 git restore <file> \u628a\\<file>\u6587\u4ef6\u5728\u5de5\u4f5c\u533a\u7684\u4fee\u6539\u5168\u90e8\u64a4\u9500\uff0c\u8fd9\u91cc\u6709\u4e24\u79cd\u60c5\u51b5\uff1a \\<file>\u81ea\u4fee\u6539\u540e\u8fd8\u6ca1\u6709\u88ab\u653e\u5230\u6682\u5b58\u533a\uff0c\u73b0\u5728\uff0c\u64a4\u9500\u4fee\u6539\u5c31\u56de\u5230\u548c\u7248\u672c\u5e93\u4e00\u6a21\u4e00\u6837\u7684\u72b6\u6001\uff1b \\<file>\u5df2\u7ecf\u6dfb\u52a0\u5230\u6682\u5b58\u533a\u540e\uff0c\u53c8\u4f5c\u4e86\u4fee\u6539\uff0c\u73b0\u5728\uff0c\u64a4\u9500\u4fee\u6539\u5c31\u56de\u5230\u6dfb\u52a0\u5230\u6682\u5b58\u533a\u540e\u7684\u72b6\u6001\u3002 \u603b\u4e4b\uff0c\u5c31\u662f\u8ba9\u8fd9\u4e2a\u6587\u4ef6\u56de\u5230\u6700\u8fd1\u4e00\u6b21\\<file>\u6216\\<file>\u65f6\u7684\u72b6\u6001 \u5728\u5de5\u4f5c\u533a\u7684\u6587\u4ef6\u4e2d\u5199\u4e86\u4e0d\u8be5\u5199\u7684\u4e1c\u897f\u5e76\u4e14\u52a0\u5230\u4e86\u6682\u5b58\u533a\uff0c\u8981\u64a4\u9500 git reset HEAD <file> \u5982\u679c\u6682\u5b58\u533a\u6709\u4e1c\u897f\uff0c\u53ef\u4ee5\u628a\u6682\u5b58\u533a\u7684\u4fee\u6539\u64a4\u9500\u6389\uff08unstage\uff09\uff0c\u91cd\u65b0\u653e\u56de\u5de5\u4f5c\u533a \u5220\u9664\u6587\u4ef6 \u00b6 \u5728\u5de5\u4f5c\u533a\u5220\u9664\u6587\u4ef6\u4e5f\u662f\u4e00\u9879\u4fee\u6539\u64cd\u4f5c \u5220\u9664\u540e\u7528 git status \u67e5\u770b\uff1a $ git status On branch master Changes not staged for commit: (use \"git add/rm <file>...\" to update what will be committed) (use \"git restore <file>...\" to discard changes in working directory) modified: dir/t.txt deleted: readme.txt no changes added to commit (use \"git add\" and/or \"git commit -a\") \u53ef\u4ee5\u7528 git rm/add <file> \u5e76 git commit \u786e\u5b9e\u4ece\u4ed3\u5e93\u4e2d\u5220\u9664 \u4e5f\u53ef\u4ee5 git restore <file> \u6062\u590d \u6ce8\u610f\uff1a\u4ece\u6765\u6ca1\u6709\u88ab\u6dfb\u52a0\u5230\u7248\u672c\u5e93\u5c31\u88ab\u5220\u9664\u7684\u6587\u4ef6\uff0c\u662f\u65e0\u6cd5\u6062\u590d\u7684\uff01 \u8fdc\u7a0b\u4ed3\u5e93 \u00b6 \u8fdc\u7a0b\u8fde\u63a5 github \u7b2c1\u6b65\uff1a\u521b\u5efaSSH Key \u5982\u679c\u7528\u6237\u4e3b\u76ee\u5f55\u4e0b\u7684 .ssh \u76ee\u5f55\u4e0b\u6709 id_rsa \u548c id_rsa.pub \u4e24\u4e2a\u6587\u4ef6\u53ef\u4ee5\u8df3\u8fc7\u7b2c\u4e00\u6b65\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u6253\u5f00 Git Bash $ ssh-keygen -t rsa -C \"youremail@example.com\" \u7136\u540e\u4e00\u8def\u56de\u8f66\uff0c\u5bc6\u7801\u4e00\u822c\u4e0d\u9700\u8981\uff0c\u7136\u540e\u5c31\u4f1a\u751f\u6210 SSH Key \u7684\u79d8\u94a5\u5bf9\uff0c id_rsa \u662f\u79c1\u94a5\uff0c\u4e0d\u80fd\u6cc4\u9732\u51fa\u53bb\uff0c id_rsa.pub \u662f\u516c\u94a5\uff0c\u53ef\u4ee5\u653e\u5fc3\u5730\u544a\u8bc9\u4efb\u4f55\u4eba \u7b2c2\u6b65 \uff1a \u5728 github \u7684 setting \u4e2d\u627e\u5230 SSH and GPG keys\uff0cadd ssh keys\uff0c\u4efb\u610f title\uff0c\u5e76\u586b\u5165\u516c\u94a5 id_rsa.pub \u7684\u5185\u5bb9 \u6dfb\u52a0\u8fdc\u7a0b\u5e93 \u00b6 create a new repo \u7136\u540e\u53ef\u4ee5\u6839\u636e\u63d0\u793a\u628a\u672c\u5730\u7684\u4ed3\u5e93\u63a8\u9001\u5230 github git push \uff1a\u628a\u672c\u5730\u7684\u4ed3\u5e93\u63a8\u9001\u5230\u8fdc\u7a0b \u5728\u7b2c\u4e00\u6b21\u63a8\u9001\u65f6\u63d0\u793a\u4e2d\u7684 push \u547d\u4ee4\u662f git push -u origin main \uff0c\u7531\u4e8e\u8fdc\u7a0b\u5e93\u662f\u7a7a\u7684\uff0c\u6211\u4eec\u7b2c\u4e00\u6b21\u63a8\u9001 master \u5206\u652f\u65f6\uff0c\u52a0\u4e0a\u4e86 -u \u53c2\u6570\uff0cGit\u4e0d\u4f46\u4f1a\u628a\u672c\u5730\u7684 master \u5206\u652f\u5185\u5bb9\u63a8\u9001\u7684\u8fdc\u7a0b\u65b0\u7684 master \u5206\u652f\uff0c\u8fd8\u4f1a\u628a\u672c\u5730\u7684 master \u5206\u652f\u548c\u8fdc\u7a0b\u7684 master \u5206\u652f\u5173\u8054\u8d77\u6765\uff0c\u5728\u4ee5\u540e\u7684\u63a8\u9001\u6216\u8005\u62c9\u53d6\u65f6\u5c31\u53ef\u4ee5\u7b80\u5316\u547d\u4ee4 \u5220\u9664\u8fdc\u7a0b\u5e93 \u00b6 \u5982\u679c\u6dfb\u52a0\u7684\u65f6\u5019\u5730\u5740\u5199\u9519\u4e86\u6216\u8005\u60f3\u5220\u9664\u8fdc\u7a0b\u5e93\uff0c\u7528 git remote rm <name> \u5728\u5220\u9664\u4e4b\u524d\u6700\u597d\u7528 git remote -v \u67e5\u770b\u4e00\u4e0b\u8fdc\u7a0b\u5e93\u4fe1\u606f \u8fd9\u91cc\u7684\u5220\u9664\u4ec5\u4ec5\u662f\u5220\u9664\u4e86\u672c\u5730\u548c\u8fdc\u7a0b\u7684\u7ed1\u5b9a \u514b\u9686\u8fdc\u7a0b\u5e93 \u00b6 git clone <path> \u5206\u652f\u64cd\u4f5c \u00b6 \u5176\u4ed6 \u00b6 \u5ffd\u7565\u90e8\u5206\u6587\u4ef6 \u00b6 \u5728\u6839\u76ee\u5f55\u4e2d\u65b0\u5efa\u4e00\u4e2a .gitignore \uff0c\u5728\u91cc\u9762\u5199\u5165\u8981\u5ffd\u7565\u7684\u6587\u4ef6\u7684\u76f8\u5bf9\u8def\u5f84\u5373\u53ef\uff0c\u5982\u4e0b classification/5_ResNet/*.pth # \u5ffd\u7565\u67d0\u6587\u4ef6\u5939\u4e0b\u540e\u7f00\u4e3a pth \u7684\u6587\u4ef6 *.pth # \u5ffd\u7565\u6240\u6709\u540e\u7f00\u4e3a pth \u7684\u6587\u4ef6 \u5982\u679c\u8981 add \u5ffd\u7565\u7684\u6587\u4ef6\u5939\u4e2d\u7684\u67d0\u4e2a\u6587\u4ef6\uff0c\u9700\u8981\u52a0\u4e0a\u53c2\u6570 -f git add dir/readme.md -f # dir \u5728 .gitignore \u4e2d","title":"Git"},{"location":"%E7%AC%94%E8%AE%B0/Git/#git","text":"Git\u6559\u7a0b - \u5ed6\u96ea\u5cf0\u7684\u5b98\u65b9\u7f51\u7ad9 (liaoxuefeng.com)","title":"Git"},{"location":"%E7%AC%94%E8%AE%B0/Git/#git_1","text":"Git \u662f\u5206\u5e03\u5f0f\u7684\u7248\u672c\u63a7\u5236\u7cfb\u7edf \u96c6\u4e2d\u5f0f\u7248\u672c\u63a7\u5236\u7cfb\u7edf\uff1a\u7248\u672c\u5e93\u5b58\u653e\u5728\u4e2d\u592e\u670d\u52a1\u5668\uff0c\u5fc5\u987b\u8981\u8054\u7f51 \u5206\u5e03\u5f0f\u7248\u672c\u63a7\u5236\u7cfb\u7edf\uff1a\u6bcf\u4e2a\u4eba\u7684\u7535\u8111\u90fd\u6709\u5b8c\u6574\u7684\u7248\u672c\u5e93\uff0c\u4e0d\u540c\u7535\u8111\u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u63a8\u9001\u7248\u672c\uff0c\u901a\u5e38\u4e5f\u6709\u4e2d\u592e\u670d\u52a1\u5668\u6765\u65b9\u4fbf\"\u4ea4\u6362\"\u5927\u5bb6\u7684\u4fee\u6539","title":"Git \u7b80\u4ecb"},{"location":"%E7%AC%94%E8%AE%B0/Git/#git_2","text":"Ubuntu \u4e2d\u76f4\u63a5 sudo apt install git Windows\uff1a\u5728\u5b98\u7f51\u4e0b\u8f7d Git - Downloads (git-scm.com) \u5b89\u88c5\u5b8c\u6210\u540e\u5728\u547d\u4ee4\u884c\u8f93\u5165\uff1a\u4e3a\u6bcf\u4e2a\u673a\u5668\u81ea\u62a5\u5bb6\u95e8\uff0cglobal \u8868\u793a\u4e3a\u6b64\u673a\u5668\u7684\u6240\u6709 Git \u4ed3\u5e93\u4f7f\u7528\u6b64\u914d\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u4e3a\u67d0\u4e2a\u4ed3\u5e93\u5355\u72ec\u914d\u7f6e git config --global user.name \"Your Name\" git config --global user.email \"email@example.com\" \u5982\u679c\u662f\u67e5\u770b\u81ea\u5df1\u7684\u7528\u6237\u540d\u548c\u90ae\u7bb1\uff1a git config uesr.name git config user.email","title":"Git \u5b89\u88c5"},{"location":"%E7%AC%94%E8%AE%B0/Git/#_1","text":"\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\u5939 \uff0c\u6ce8\u610f\u76ee\u5f55\u4e0d\u8981\u6709\u4e2d\u6587 $ mkdir learngit $ cd learngit $ pwd \u901a\u8fc7 git init \u547d\u4ee4\u628a\u8fd9\u4e2a\u76ee\u5f55\u53d8\u6210Git\u53ef\u4ee5\u7ba1\u7406\u7684\u4ed3\u5e93\uff0c\u8fd9\u6837\u4f1a\u591a\u4e00\u4e2a .git \u7684\u76ee\u5f55\u7528\u6765\u7ba1\u7406\u7248\u672c\u5e93 $ git init","title":"\u521b\u5efa\u7248\u672c\u5e93"},{"location":"%E7%AC%94%E8%AE%B0/Git/#_2","text":"","title":"\u7248\u672c\u63a7\u5236"},{"location":"%E7%AC%94%E8%AE%B0/Git/#_3","text":"\u5de5\u4f5c\u533a\u5373\u4e00\u4e2a\u76ee\u5f55\uff0c\u7248\u672c\u5e93\u5728 .git \u76ee\u5f55\u4e2d\uff0c\u91cc\u9762\u6709\u4e00\u4e2a\u53eb stage \u7684\u6682\u5b58\u533a\u548c Git \u4e3a\u6211\u4eec\u81ea\u52a8\u521b\u5efa\u7684\u7b2c\u4e00\u4e2a\u5206\u652f master \uff0c\u4ee5\u53ca\u6307\u5411 master \u7684\u4e00\u4e2a\u6307\u9488\u53eb HEAD \u628a\u6587\u4ef6\u5f80Git\u7248\u672c\u5e93\u91cc\u6dfb\u52a0\u7684\u65f6\u5019\uff0c\u662f\u5206\u4e24\u6b65\u6267\u884c\u7684\uff1a git add file_path # \u6dfb\u52a0\u6307\u5b9a\u6587\u4ef6\u5230\u6682\u5b58\u533a git add . # \u6dfb\u52a0\u6240\u6709\u7684\u6587\u4ef6\u5230\u6682\u5b58\u533a git add --all # \u6dfb\u52a0\u6240\u6709\u7684\u6587\u4ef6\u5230\u6682\u5b58\u533a git commit -m \"comment\" # \u5c06\u6682\u5b58\u533a\u7684\u5185\u5bb9\u6dfb\u52a0\u5230\u7248\u672c\u5e93 git status \uff1a\u53ef\u4ee5\u67e5\u770b\u4ed3\u5e93\u5f53\u524d\u72b6\u6001 Changes not staged for commit \u8868\u793a\u672a\u8fdb\u5165 stage\uff08\u672a add\uff09 Changes to be committed \u8868\u793a\u8fdb\u5165\u4e86 stage \u4f46\u662f\u6ca1\u6709\u63d0\u4ea4\u5230\u5206\u652f Untracked files \u8868\u793a\u662f\u65b0\u6587\u4ef6 git diff \uff1a\u67e5\u770b\u5de5\u4f5c\u533a\u548c\u6682\u5b58\u533a\u5dee\u5f02\uff0c\u663e\u793a\u7684\u683c\u5f0f\u662f Unix \u901a\u7528\u7684 diff \u683c\u5f0f git diff --cached \u67e5\u770b\u6682\u5b58\u533a\u548c\u4ed3\u5e93\u5dee\u5f02 git diff HEAD \u67e5\u770b\u5de5\u4f5c\u533a\u548c\u4ed3\u5e93\u7684\u5dee\u5f02","title":"\u5de5\u4f5c\u533a\u548c\u6682\u5b58\u533a"},{"location":"%E7%AC%94%E8%AE%B0/Git/#_4","text":"git log \uff1a\u67e5\u770b\u5386\u53f2\u8bb0\u5f55 \u53ef\u4ee5\u5728 ~/.bashrc \u4e2d\u6dfb\u52a0\u522b\u540d\uff0c\u7528 git-log \u66f4\u65b9\u4fbf alias git-log='git log --pretty=oneline --all --graph get reflog \uff1a\u53ef\u4ee5\u67e5\u770b\u6bcf\u6b21\u64cd\u4f5c\u5bf9\u5e94\u7684 commit id git reset --hard HEAD^ \uff1a\u7248\u672c\u56de\u9000\uff0cHEAD\u8868\u793a\u5f53\u524d\u7248\u672c\uff0c\u6709\u51e0\u4e2a ^ \u5c31\u8868\u793a\u56de\u9000\u591a\u5c11\u4e2a\u7248\u672c\uff0c\u4e5f\u53ef\u4ee5\u5199 HEAD~100 \u8868\u793a\u56de\u9000100\u4e2a\u7248\u672c\uff0c\u4e5f\u53ef\u4ee5 --hard commit_id \u76f4\u63a5\u5230\u6307\u5b9a\u7684\u7248\u672c","title":"\u7248\u672c\u56de\u9000"},{"location":"%E7%AC%94%E8%AE%B0/Git/#_5","text":"\u5728\u5de5\u4f5c\u533a\u7684\u6587\u4ef6\u4e2d\u5199\u4e86\u4e0d\u8be5\u5199\u7684\u4e1c\u897f\uff0c\u540e\u8981\u64a4\u9500 git restore <file> \u628a\\<file>\u6587\u4ef6\u5728\u5de5\u4f5c\u533a\u7684\u4fee\u6539\u5168\u90e8\u64a4\u9500\uff0c\u8fd9\u91cc\u6709\u4e24\u79cd\u60c5\u51b5\uff1a \\<file>\u81ea\u4fee\u6539\u540e\u8fd8\u6ca1\u6709\u88ab\u653e\u5230\u6682\u5b58\u533a\uff0c\u73b0\u5728\uff0c\u64a4\u9500\u4fee\u6539\u5c31\u56de\u5230\u548c\u7248\u672c\u5e93\u4e00\u6a21\u4e00\u6837\u7684\u72b6\u6001\uff1b \\<file>\u5df2\u7ecf\u6dfb\u52a0\u5230\u6682\u5b58\u533a\u540e\uff0c\u53c8\u4f5c\u4e86\u4fee\u6539\uff0c\u73b0\u5728\uff0c\u64a4\u9500\u4fee\u6539\u5c31\u56de\u5230\u6dfb\u52a0\u5230\u6682\u5b58\u533a\u540e\u7684\u72b6\u6001\u3002 \u603b\u4e4b\uff0c\u5c31\u662f\u8ba9\u8fd9\u4e2a\u6587\u4ef6\u56de\u5230\u6700\u8fd1\u4e00\u6b21\\<file>\u6216\\<file>\u65f6\u7684\u72b6\u6001 \u5728\u5de5\u4f5c\u533a\u7684\u6587\u4ef6\u4e2d\u5199\u4e86\u4e0d\u8be5\u5199\u7684\u4e1c\u897f\u5e76\u4e14\u52a0\u5230\u4e86\u6682\u5b58\u533a\uff0c\u8981\u64a4\u9500 git reset HEAD <file> \u5982\u679c\u6682\u5b58\u533a\u6709\u4e1c\u897f\uff0c\u53ef\u4ee5\u628a\u6682\u5b58\u533a\u7684\u4fee\u6539\u64a4\u9500\u6389\uff08unstage\uff09\uff0c\u91cd\u65b0\u653e\u56de\u5de5\u4f5c\u533a","title":"\u64a4\u9500\u4fee\u6539"},{"location":"%E7%AC%94%E8%AE%B0/Git/#_6","text":"\u5728\u5de5\u4f5c\u533a\u5220\u9664\u6587\u4ef6\u4e5f\u662f\u4e00\u9879\u4fee\u6539\u64cd\u4f5c \u5220\u9664\u540e\u7528 git status \u67e5\u770b\uff1a $ git status On branch master Changes not staged for commit: (use \"git add/rm <file>...\" to update what will be committed) (use \"git restore <file>...\" to discard changes in working directory) modified: dir/t.txt deleted: readme.txt no changes added to commit (use \"git add\" and/or \"git commit -a\") \u53ef\u4ee5\u7528 git rm/add <file> \u5e76 git commit \u786e\u5b9e\u4ece\u4ed3\u5e93\u4e2d\u5220\u9664 \u4e5f\u53ef\u4ee5 git restore <file> \u6062\u590d \u6ce8\u610f\uff1a\u4ece\u6765\u6ca1\u6709\u88ab\u6dfb\u52a0\u5230\u7248\u672c\u5e93\u5c31\u88ab\u5220\u9664\u7684\u6587\u4ef6\uff0c\u662f\u65e0\u6cd5\u6062\u590d\u7684\uff01","title":"\u5220\u9664\u6587\u4ef6"},{"location":"%E7%AC%94%E8%AE%B0/Git/#_7","text":"\u8fdc\u7a0b\u8fde\u63a5 github \u7b2c1\u6b65\uff1a\u521b\u5efaSSH Key \u5982\u679c\u7528\u6237\u4e3b\u76ee\u5f55\u4e0b\u7684 .ssh \u76ee\u5f55\u4e0b\u6709 id_rsa \u548c id_rsa.pub \u4e24\u4e2a\u6587\u4ef6\u53ef\u4ee5\u8df3\u8fc7\u7b2c\u4e00\u6b65\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u6253\u5f00 Git Bash $ ssh-keygen -t rsa -C \"youremail@example.com\" \u7136\u540e\u4e00\u8def\u56de\u8f66\uff0c\u5bc6\u7801\u4e00\u822c\u4e0d\u9700\u8981\uff0c\u7136\u540e\u5c31\u4f1a\u751f\u6210 SSH Key \u7684\u79d8\u94a5\u5bf9\uff0c id_rsa \u662f\u79c1\u94a5\uff0c\u4e0d\u80fd\u6cc4\u9732\u51fa\u53bb\uff0c id_rsa.pub \u662f\u516c\u94a5\uff0c\u53ef\u4ee5\u653e\u5fc3\u5730\u544a\u8bc9\u4efb\u4f55\u4eba \u7b2c2\u6b65 \uff1a \u5728 github \u7684 setting \u4e2d\u627e\u5230 SSH and GPG keys\uff0cadd ssh keys\uff0c\u4efb\u610f title\uff0c\u5e76\u586b\u5165\u516c\u94a5 id_rsa.pub \u7684\u5185\u5bb9","title":"\u8fdc\u7a0b\u4ed3\u5e93"},{"location":"%E7%AC%94%E8%AE%B0/Git/#_8","text":"create a new repo \u7136\u540e\u53ef\u4ee5\u6839\u636e\u63d0\u793a\u628a\u672c\u5730\u7684\u4ed3\u5e93\u63a8\u9001\u5230 github git push \uff1a\u628a\u672c\u5730\u7684\u4ed3\u5e93\u63a8\u9001\u5230\u8fdc\u7a0b \u5728\u7b2c\u4e00\u6b21\u63a8\u9001\u65f6\u63d0\u793a\u4e2d\u7684 push \u547d\u4ee4\u662f git push -u origin main \uff0c\u7531\u4e8e\u8fdc\u7a0b\u5e93\u662f\u7a7a\u7684\uff0c\u6211\u4eec\u7b2c\u4e00\u6b21\u63a8\u9001 master \u5206\u652f\u65f6\uff0c\u52a0\u4e0a\u4e86 -u \u53c2\u6570\uff0cGit\u4e0d\u4f46\u4f1a\u628a\u672c\u5730\u7684 master \u5206\u652f\u5185\u5bb9\u63a8\u9001\u7684\u8fdc\u7a0b\u65b0\u7684 master \u5206\u652f\uff0c\u8fd8\u4f1a\u628a\u672c\u5730\u7684 master \u5206\u652f\u548c\u8fdc\u7a0b\u7684 master \u5206\u652f\u5173\u8054\u8d77\u6765\uff0c\u5728\u4ee5\u540e\u7684\u63a8\u9001\u6216\u8005\u62c9\u53d6\u65f6\u5c31\u53ef\u4ee5\u7b80\u5316\u547d\u4ee4","title":"\u6dfb\u52a0\u8fdc\u7a0b\u5e93"},{"location":"%E7%AC%94%E8%AE%B0/Git/#_9","text":"\u5982\u679c\u6dfb\u52a0\u7684\u65f6\u5019\u5730\u5740\u5199\u9519\u4e86\u6216\u8005\u60f3\u5220\u9664\u8fdc\u7a0b\u5e93\uff0c\u7528 git remote rm <name> \u5728\u5220\u9664\u4e4b\u524d\u6700\u597d\u7528 git remote -v \u67e5\u770b\u4e00\u4e0b\u8fdc\u7a0b\u5e93\u4fe1\u606f \u8fd9\u91cc\u7684\u5220\u9664\u4ec5\u4ec5\u662f\u5220\u9664\u4e86\u672c\u5730\u548c\u8fdc\u7a0b\u7684\u7ed1\u5b9a","title":"\u5220\u9664\u8fdc\u7a0b\u5e93"},{"location":"%E7%AC%94%E8%AE%B0/Git/#_10","text":"git clone <path>","title":"\u514b\u9686\u8fdc\u7a0b\u5e93"},{"location":"%E7%AC%94%E8%AE%B0/Git/#_11","text":"","title":"\u5206\u652f\u64cd\u4f5c"},{"location":"%E7%AC%94%E8%AE%B0/Git/#_12","text":"","title":"\u5176\u4ed6"},{"location":"%E7%AC%94%E8%AE%B0/Git/#_13","text":"\u5728\u6839\u76ee\u5f55\u4e2d\u65b0\u5efa\u4e00\u4e2a .gitignore \uff0c\u5728\u91cc\u9762\u5199\u5165\u8981\u5ffd\u7565\u7684\u6587\u4ef6\u7684\u76f8\u5bf9\u8def\u5f84\u5373\u53ef\uff0c\u5982\u4e0b classification/5_ResNet/*.pth # \u5ffd\u7565\u67d0\u6587\u4ef6\u5939\u4e0b\u540e\u7f00\u4e3a pth \u7684\u6587\u4ef6 *.pth # \u5ffd\u7565\u6240\u6709\u540e\u7f00\u4e3a pth \u7684\u6587\u4ef6 \u5982\u679c\u8981 add \u5ffd\u7565\u7684\u6587\u4ef6\u5939\u4e2d\u7684\u67d0\u4e2a\u6587\u4ef6\uff0c\u9700\u8981\u52a0\u4e0a\u53c2\u6570 -f git add dir/readme.md -f # dir \u5728 .gitignore \u4e2d","title":"\u5ffd\u7565\u90e8\u5206\u6587\u4ef6"},{"location":"%E7%AC%94%E8%AE%B0/Linux/","text":"Linux \u00b6 Vim \u00b6 vim \u6587\u4ef6\u8def\u5f84 # \u8fdb\u5165normal vimtutor # \u57fa\u7840\u6559\u7a0b normal\u6a21\u5f0f \u00b6 \u5149\u6807\u79fb\u52a8 \u00b6 hjkl # \u5de6\u4e0b\u4e0a\u53f3 w # \u4e0b\u4e00\u4e2a\u5355\u8bcd\u5f00\u5934 b # \u672c\u5355\u8bcd\u6216\u8005\u4e0a\u4e00\u4e2a\u5355\u8bcd\u5f00\u5934 e # \u672c\u5355\u8bcd\u6216\u4e0b\u4e00\u5355\u8bcd\u7ed3\u5c3e 0 # \u5149\u6807\u79fb\u52a8\u5230\u6240\u5728\u884c\u7684\u884c\u9996 ^ # \u884c\u9996\u5f00\u59cb\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26 $ # \u5149\u6807\u79fb\u52a8\u5230\u6240\u5728\u884c\u7684\u884c\u5c3e gg # \u7b2c\u4e00\u884c G # \u6700\u540e\u4e00\u884c f { char } # \u8df3\u5230\u4e0b\u4e00\u4e2a char \u7684\u4f4d\u7f6e F { char } # \u8df3\u6389\u4e0a\u4e00\u4e2a\u7684 char \u7684\u4f4d\u7f6e t { char } # \u8df3\u5230\u4e0b\u4e00\u4e2a char \u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e T { char } # \u8df3\u6389\u4e0a\u4e00\u4e2a\u7684 char \u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e ; # \u91cd\u590d\u4e0a\u4e00\u4e2a\u67e5\u627e\u64cd\u4f5c\uff0c\u5411\u540e\u627e , # \u91cd\u590d\u4e0a\u4e00\u4e2a\u67e5\u627e\u64cd\u4f5c\uff0c \u5411\u524d\u627e % # \u5149\u6807\u5728 \u5404\u79cd\u62ec\u53f7 \u4e0a\u65f6\uff0c\u53ef\u4ee5\u8fdb\u884c\u8df3\u8f6c\u5230\u5339\u914d\u5904 [ num ] G # \u8df3\u8f6c\u5230\u5bf9\u5e94\u884c ctrl o # \u8df3\u8f6c\u5230\u8001\u4f4d\u7f6e ctrl i # \u8df3\u8f6c\u5230\u65b0\u7684\u4f4d\u7f6e Ctrl + f # \u5f80\u4e0b\u7ffb\u4e00\u9875 Ctrl + b # \u5f80\u4e0a\u7ffb\u4e00\u9875 ctrl e # \u5411\u4e0b\u6eda\u52a8\u4e00\u884c ctrl y # \u5411\u4e0a\u6eda\u52a8\u4e00\u884c \u64cd\u4f5c\u7b26 \u00b6 d # \u5220\u9664\uff0c\u5e26\u526a\u5207 c # \u4fee\u6539\uff0c\u5e26\u526a\u5207 y # \u590d\u5236 v # \u8fdb\u5165 visual \u6a21\u5f0f s # \u5220\u9664\u5f53\u524d\u5b57\u7b26\u5e76\u8fdb\u5165 insert \u6a21\u5f0f S + '{' # \u53ef\u4ee5\u7ed9\u9009\u4e2d\u90e8\u5206\u4e24\u8fb9\u52a0\u7b26\u53f7 dd # \u5220\u9664\u4e00\u884c d [ num ] motion D # \u7b49\u6548\u4e8e d$ cc # \u4fee\u6539\u4e00\u884c\uff0c\u4f1a\u5148\u5220\u9664\u5e76\u8fdb\u5165\u63d2\u5165\u6a21\u5f0f c [ num ] motion C # \u7b49\u6548\u4e8e c$, \u5220\u9664\u5149\u6807\u5904\u5230\u884c\u672b\uff0c\u5e76\u8fdb\u5165\u63d2\u5165\u6a21\u5f0f I # ^i A # $a yy # \u590d\u5236\u4e00\u884c 2 dd # \u5220\u96642\u884c dfs # \u5220\u9664\u5230 s \u7684\u4f4d\u7f6e dw d $ d ^ die / cie # \u6574\u4e2a\u6587\u4ef6 zz # \u89c6\u89d2\u53d8\u5316\u5230\u5149\u6807\u5f53\u524d\u884c\u5230\u5c4f\u5e55\u4e2d\u592e . # \u91cd\u590d\u4e0a\u6b21\u4fee\u6539\u64cd\u4f5c \u52a8\u4f5c \u00b6 \u4e0e\u64cd\u4f5c\u7b26\u914d\u5408 iw / aw i ( / a ( i { / a { i \" / a\" i ' / a' i < / a < i [ / a [ it / at # html \u91cc\u7528 \u5176\u4ed6 \u00b6 p # \u590d\u5236 u # \u64a4\u9500 U # \u64a4\u9500\u5bf9\u6574\u884c\u7684\u4fee\u6539 ctrl r # \u91cd\u505a\u88ab\u64a4\u9500\u7684\u547d\u4ee4\uff0c\u64a4\u9500\u64a4\u9500\u7684\u547d\u4ee4 x # \u5220\u9664\u4e00\u4e2a\u5b57\u7b26 r { char } # \u6539\u53d8\u4e00\u4e2a\u5b57\u7b26 . # \u91cd\u590d\u4e0a\u6b21\u7684\u4fee\u6539\u64cd\u4f5c # \u5927\u5c0f\u5199\u5207\u6362, \u4e5f\u53ef\u4ee5\u5728\u9009\u4e2d\u6a21\u5f0f\u4e0b\u7528 u / U ~ # \u6539\u53d8\u4e00\u4e2a\u5b57\u7b26\u5927\u5c0f\u5199 3 ~ g ~~ gUU guu gUiw guiw gd # \u8df3\u8f6c\u5230\u51fd\u6570\u5b9a\u4e49 gh # holder gt / gT # \u5207\u6362\u6807\u7b7e\u9875, ctrl 0 ctrl 1 ctrl g # \u67e5\u770b\u6587\u4ef6\u72b6\u6001 visual \u6a21\u5f0f \u00b6 \u9009\u4e2d\u6a21\u5f0f viw # \u9009\u4e2d\u4e00\u4e2a\u5355\u8bcd viwd # \u5220\u9664\u9009\u4e2d\u7684\u5355\u8bcd insert \u6a21\u5f0f \u00b6 \u8fdb\u5165\u63d2\u5165\u6a21\u5f0f\uff1a i / I a / A o / O \u9000\u51fa\u63d2\u5165\u6a21\u5f0f\uff1a Esc ctrl o # \u63d2\u5165-\u666e\u901a\u6a21\u5f0f\uff0c\u53ef\u4ee5\u5728\u63d2\u5165\u6a21\u5f0f\u4e0b\u8f93\u5165\u4e00\u6b21\u666e\u901a\u6a21\u5f0f\u7684\u6307\u4ee4 : \u6a21\u5f0f \u00b6 normal \u6a21\u5f0f\u4e0b\u6309 : \u6216 / : wq # \u4fdd\u5b58\u6587\u4ef6\u5e76\u9000\u51fa : q # \u4e0d\u4fdd\u5b58\u6587\u4ef6\uff0c\u5e76\u9000\u51fa\uff0c\u5982\u679c\u6587\u4ef6\u505a\u4e86\u4fee\u6539\uff0c\u4f46\u6709\u4e0d\u60f3\u4fdd\u5b58\uff0c\u9700\u8981\u7528:q! : q ! # \u4e0d\u4fdd\u5b58\u6587\u4ef6\uff0c\u5f3a\u5236\u9000\u51fa : w # \u53ea\u4fdd\u5b58\u6587\u4ef6\uff0c\u4f46\u662f\u4e0d\u9000\u51favi\uff0c\u53ef\u4ee5\u5207\u6362\u5230\u8f93\u5165\u6a21\u5f0f\u4e0b\u9762\u7ee7\u7eed\u7f16\u8f91\u6587\u4ef6 : w { file_name } # \u5199\u5165\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6 : set nu # \u663e\u793a\u884c\u53f7 / { string } # \u5411\u540e\u641c\u7d22\u5b57\u7b26\u4e32\uff0cn \u5411\u524d\uff0cN \u5411\u540e ? { string } # \u5411\u524d\u641c\u7d22\u5b57\u7b26\u4e32 : set ic # \u641c\u7d22\u540e\u7528\u6b64\u547d\u4ee4\u53ef\u4ee5\u5ffd\u7565\u5927\u5c0f\u5199,ignore case : set hls is # hls \u9ad8\u4eae\u641c\u7d22, is \u663e\u793a\u90e8\u5206\u5339\u914d, hl search, incsearch : set noic # \u5173\u95ed\u9009\u9879, nohls, nois : s / old / new # \u672c\u884c\u4e2d\u7b2c\u4e00\u4e2a old \u66ff\u6362\u4e3a new : s / old / new / g # \u5728\u672c\u884c\u4e2d\u6240\u6709 old \u66ff\u6362\u4e3a new : #,#s/old/new/g # # \u548c # \u8868\u793a\u884c\u53f7 : % s / old / new / g # \u66ff\u6362\u6574\u4e2a\u6587\u4ef6\u7684 old : % s / old / new / gc # \u66ff\u6362\u6574\u4e2a\u6587\u4ef6\u7684 old\uff0c\u5e76\u4e14\u4f1a\u6bcf\u4e2a\u8fdb\u884c\u8be2\u95ee : ! ls # :! \u540e\u8f93\u5165\u5916\u90e8\u547d\u4ee4 : r filename # \u628a\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u5199\u5230\u5149\u6807\u5904 : r ! ls # \u4e5f\u53ef\u4ee5\u628a\u547d\u4ee4\u7684\u8f93\u51fa\u5199\u5230\u5149\u6807\u5904 : help # \u521b\u5efa\u542f\u52a8\u811a\u672c \u4fee\u6539 apt \u6e90\u670d\u52a1\u5668 \u00b6 \u4ee5root\u8d26\u53f7\u767b\u5f55\uff0c\u6216\u8005\u540e\u7eed\u547d\u4ee4\u524d\u9762\u52a0 sudo \u4ee5root\u6267\u884c \u6267\u884c\u547d\u4ee4 cd /etc/apt \u8fdb\u5165\u5230\u76ee\u5f55 /etc/apt \u4e0b \u6267\u884c\u547d\u4ee4 cp sources.list sources.list.bak \u5148\u521b\u5efa\u5907\u4efd\u6587\u4ef6\uff0c\u8fd9\u6837\u4e07\u4e00\u6539\u9519\uff0c\u53ef\u4ee5\u6709\u5907\u4efd\u6587\u4ef6\u6062\u590d \u6267\u884c vi sources.list \u6253\u5f00\u6587\u4ef6\uff0c \u51c6\u5907\u628a\u57df\u540d\u4ece\u4ece cn.archive.ubuntu.com \u66ff\u6362\u4e3a mirrors.aliyun.com \u6309 \u5192\u53f7\uff0c\u8fdb\u5165\u5e95\u884c\u6a21\u5f0f\uff0c\u8f93\u5165\u547d\u4ee4 1,$s/cn.archive.ubuntu.com/mirrors.aliyun.com/g \u8fdb\u884c\u66ff\u6362 \u786e\u8ba4\u4e00\u4e0b\u57df\u540d\u4fee\u6539\u6b63\u786e\u540e\uff0c\u8f93\u5165 :wq \u4fdd\u5b58\u9000\u51fa\u3002 \u6267\u884c\u547d\u4ee4 apt update \uff0c \u8ba9\u4fee\u6539\u751f\u6548 \u8fde\u63a5\u8fdc\u7a0b\u4e3b\u673a \u00b6 SSH ssh user@ip \u65ad\u5f00\u8fde\u63a5\uff1aCtrl + D SCP \u628a\u8fdc\u7a0b\u7684\u6587\u4ef6\u590d\u5236\u5230\u672c\u5730 scp user@ip:path1 path2 \u628a\u672c\u5730\u7684\u6587\u4ef6\u590d\u5236\u5230\u8fdc\u7a0b\u4e3b\u673a\u4e0a scp path1 user@ip:path2 \u628a\u8fdc\u7a0b\u7684\u76ee\u5f55\u590d\u5236\u5230\u672c\u5730 scp -r user@ip:path1 path2 \u5176\u4ed6 \u00b6 sort -nk 6 // -n \u8868\u793a\u6309\u7167\u6570\u5b57\u6392\u5e8f\uff0c-k \u8868\u793a\u6392\u5e8f\u7b2c\u51e0\u5217\u8f93\u51fa head -n 100 // \u524d 100 \u884c uniq -c // -c \u7edf\u8ba1 \u624b\u518c \u00b6 CodeSheep \u5173\u673a/\u91cd\u542f/\u6ce8\u9500 \u00b6 \u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 shutdown -h now \u5373\u523b\u5173\u673a shutdown -h 10 10\u5206\u949f\u540e\u5173\u673a shutdown -h 11:00 11\uff1a00\u5173\u673a shutdown -h +10 \u9884\u5b9a\u65f6\u95f4\u5173\u673a\uff0810\u5206\u949f\u540e\uff09 shutdown -c \u53d6\u6d88\u6307\u5b9a\u65f6\u95f4\u5173\u673a shutdown -r now \u91cd\u542f shutdown -r 10 10\u5206\u949f\u4e4b\u540e\u91cd\u542f shutdown -r 11:00 \u5b9a\u65f6\u91cd\u542f reboot \u91cd\u542f init 6 \u91cd\u542f init 0 \u2f74\u523b\u5173\u673a telinit 0 \u5173\u673a poweroff \u2f74\u523b\u5173\u673a halt \u5173\u673a sync buff\u6570\u636e\u540c\u6b65\u5230\u78c1\u76d8 logout \u9000\u51fa\u767b\u5f55Shell \u7cfb\u7edf\u4fe1\u606f\u548c\u6027\u80fd\u67e5\u770b \u00b6 \u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 uname -a \u67e5\u770b\u5185\u6838/OS/CPU\u4fe1\u606f uname -r \u67e5\u770b\u5185\u6838\u7248\u672c uname -m \u67e5\u770b\u5904\u7406\u5668\u67b6\u6784 arch \u67e5\u770b\u5904\u7406\u5668\u67b6\u6784 hostname \u67e5\u770b\u8ba1\u7b97\u673a\u540d who \u663e\u793a\u5f53\u524d\u767b\u5f55\u7cfb\u7edf\u7684\u2f64\u6237 who am i \u663e\u793a\u767b\u5f55\u65f6\u7684\u2f64\u6237\u540d whoami \u663e\u793a\u5f53\u524d\u2f64\u6237\u540d cat /proc/version \u67e5\u770blinux\u7248\u672c\u4fe1\u606f cat /proc/cpuinfo \u67e5\u770bCPU\u4fe1\u606f cat /proc/interrupts \u67e5\u770b\u4e2d\u65ad cat /proc/loadavg \u67e5\u770b\u7cfb\u7edf\u8d1f\u8f7d uptime \u67e5\u770b\u7cfb\u7edf\u8fd0\u2f8f\u65f6\u95f4\u3001\u2f64\u6237\u6570\u3001\u8d1f\u8f7d env \u67e5\u770b\u7cfb\u7edf\u7684\u73af\u5883\u53d8\u91cf lsusb -tv \u67e5\u770b\u7cfb\u7edfUSB\u8bbe\u5907\u4fe1\u606f lspci -tv \u67e5\u770b\u7cfb\u7edfPCI\u8bbe\u5907\u4fe1\u606f lsmod \u67e5\u770b\u5df2\u52a0\u8f7d\u7684\u7cfb\u7edf\u6a21\u5757 grep MemTotal /proc/meminfo \u67e5\u770b\u5185\u5b58\u603b\u91cf grep MemFree /proc/meminfo \u67e5\u770b\u7a7a\u95f2\u5185\u5b58\u91cf free -m \u67e5\u770b\u5185\u5b58\u2f64\u91cf\u548c\u4ea4\u6362\u533a\u2f64\u91cf date \u663e\u793a\u7cfb\u7edf\u2f47\u671f\u65f6\u95f4 cal 2021 \u663e\u793a2021\u2f47\u5386\u8868 top \u52a8\u6001\u663e\u793acpu/\u5185\u5b58/\u8fdb\u7a0b\u7b49\u60c5\u51b5 vmstat 1 20 \u6bcf1\u79d2\u91c7\u2f00\u6b21\u7cfb\u7edf\u72b6\u6001\uff0c\u91c720\u6b21 iostat \u67e5\u770bio\u8bfb\u5199/cpu\u4f7f\u2f64\u60c5\u51b5 \u67e5\u770bio\u8bfb\u5199/cpu\u4f7f\u2f64\u60c5\u51b5 \u67e5\u8be2cpu\u4f7f\u2f64\u60c5\u51b5\uff081\u79d2\u2f00\u6b21\uff0c\u517110\u6b21\uff09 sar -d 1 10 \u67e5\u8be2\u78c1\u76d8\u6027\u80fd \u78c1\u76d8\u548c\u5206\u533a \u00b6 \u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 fdisk -l \u67e5\u770b\u6240\u6709\u78c1\u76d8\u5206\u533a swapon -s \u67e5\u770b\u6240\u6709\u4ea4\u6362\u5206\u533a df -h \u67e5\u770b\u78c1\u76d8\u4f7f\u2f64\u60c5\u51b5\u53ca\u6302\u8f7d\u70b9 df -hl \u540c\u4e0a du -sh /dir \u67e5\u770b\u6307\u5b9a\u67d0\u4e2a\u2f6c\u5f55\u7684\u2f24\u2f29 du -sk * | sort -rn \u4ece\u2fbc\u5230\u4f4e\u4f9d\u6b21\u663e\u793a\u2f42\u4ef6\u548c\u2f6c\u5f55\u2f24\u2f29 mount /dev/hda2 /mnt/hda2 \u6302\u8f7dhda2\u76d8 mount -t ntfs /dev/sdc1 /mnt/usbhd1 \u6307\u5b9a\u2f42\u4ef6\u7cfb\u7edf\u7c7b\u578b\u6302\u8f7d\uff08\u5982ntfs\uff09 mount -o loop xxx.iso /mnt/cdrom \u6302 \u8f7d iso \u2f42 \u4ef6 umount -v /dev/sda1 \u901a\u8fc7\u8bbe\u5907\u540d\u5378\u8f7d umount -v /mnt/mymnt \u901a\u8fc7\u6302\u8f7d\u70b9\u5378\u8f7d fuser -km /mnt/hda1 \u5f3a\u5236\u5378\u8f7d(\u614e\u2f64) \u2f64\u6237\u548c\u2f64\u6237\u7ec4 \u00b6 \u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 useradd codesheep \u521b\u5efa\u2f64\u6237\uff08\u6ca1\u6709\u7528\u6237\u76ee\u5f55\uff0c\u5bc6\u7801\uff09 userdel -r codesheep \u5220\u9664\u2f64\u6237 usermod -g group_name user_name \u4fee\u6539\u2f64\u6237\u7684\u7ec4 usermod -aG group_name user_name \u5c06\u2f64\u6237\u6dfb\u52a0\u5230\u7ec4 usermod -s /bin/ksh -d /home/codepig \u2013g dev codesheep \u4fee\u6539\u2f64\u6237codesheep\u7684\u767b\u5f55Shell\u3001\u4e3b\u2f6c\u5f55\u4ee5\u53ca\u2f64\u6237\u7ec4 groups test \u67e5\u770btest\u2f64\u6237\u6240\u5728\u7684\u7ec4 groupadd group_name \u521b\u5efa\u2f64\u6237\u7ec4 groupdel group_name \u5220\u9664\u2f64\u6237\u7ec4 groupmod -n new_name old_name \u91cd\u547d\u540d\u2f64\u6237\u7ec4 su - user_name su - user_name passwd \u4fee\u6539\u2f1d\u4ee4 passwd codesheep \u4fee\u6539\u67d0\u2f64\u6237\u7684\u2f1d\u4ee4 w \u67e5\u770b\u6d3b\u52a8\u2f64\u6237 id codesheep \u67e5\u770b\u6307\u5b9a\u2f64\u6237codesheep\u4fe1\u606f last \u67e5\u770b\u2f64\u6237\u767b\u5f55\u2f47\u5fd7 crontab -l \u67e5\u770b\u5f53\u524d\u2f64\u6237\u7684\u8ba1\u5212\u4efb\u52a1 cut -d: -f1 /etc/passwd \u67e5\u770b\u7cfb\u7edf\u6240\u6709\u2f64\u6237 cut -d: -f1 /etc/group \u67e5\u770b\u7cfb\u7edf\u6240\u6709\u7ec4 \u2f79\u7edc\u548c\u8fdb\u7a0b\u7ba1\u7406 \u00b6 \u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 ifconfig \u67e5\u770b\u2f79\u7edc\u63a5\u2f1d\u5c5e\u6027 ifconfig eth0 \u67e5\u770b\u67d0\u2f79\u5361\u7684\u914d\u7f6e route -n \u67e5\u770b\u8def\u7531\u8868 netstat -lntp \u67e5\u770b\u6240\u6709\u76d1\u542c\u7aef\u2f1d netstat -antp \u67e5\u770b\u5df2\u7ecf\u5efa\u2f74\u7684TCP\u8fde\u63a5 netstat -lutp \u67e5\u770bTCP/UDP\u7684\u72b6\u6001\u4fe1\u606f ifup eth0 \u542f\u2f64eth0\u2f79\u7edc\u8bbe\u5907 ifdown eth0 \u7981\u2f64eth0\u2f79\u7edc\u8bbe\u5907 iptables -L \u67e5\u770biptables\u89c4\u5219 ifconfig eth0 192.168.1.1 netmask 255.255.255.0 \u914d\u7f6eip\u5730\u5740 dhclient eth0 \u4ee5dhcp\u6a21\u5f0f\u542f\u2f64eth0 route add -net 0/0 gw Gateway_IP \u914d\u7f6e\u9ed8\u8ba4\u2f79\u5173 route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1 \u914d\u7f6e\u9759\u6001\u8def\u7531\u5230\u8fbe\u2f79\u7edc'192.168.0.0/16' route del 0/0 gw Gateway_IP \u5220\u9664\u9759\u6001\u8def\u7531 hostname \u67e5\u770b\u4e3b\u673a\u540d host www.baidu.com \u89e3\u6790\u4e3b\u673a\u540d nslookup www.baidu.com \u67e5\u8be2DNS\u8bb0\u5f55\uff0c\u67e5\u770b\u57df\u540d\u89e3\u6790\u662f\u5426\u6b63\u5e38 ps -ef \u67e5\u770b\u6240\u6709\u8fdb\u7a0b -f\uff1a\u8be6\u7ec6\u4fe1\u606f -e\uff1a\u6240\u6709\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b ps -ef | grep codesheep \u8fc7\u6ee4\u51fa\u4f60\u9700\u8981\u7684\u8fdb\u7a0b kill -s name kill\u6307\u5b9a\u540d\u79f0\u7684\u8fdb\u7a0b kill -s pid kill\u6307\u5b9apid\u7684\u8fdb\u7a0b kill -9 pid kill\u8fdb\u7a0b top \u5b9e\u65f6\u663e\u793a\u8fdb\u7a0b\u72b6\u6001 top -d pid \u5b9e\u65f6\u663e\u793a\u67d0\u8fdb\u7a0b\u72b6\u6001 vmstat 1 20 \u6bcf1\u79d2\u91c7\u2f00\u6b21\u7cfb\u7edf\u72b6\u6001\uff0c\u91c720\u6b21 iostat iostat sar -u 1 10 \u67e5\u8be2cpu\u4f7f\u2f64\u60c5\u51b5\uff081\u79d2\u2f00\u6b21\uff0c\u517110\u6b21\uff09 sar -d 1 10 \u67e5\u8be2\u78c1\u76d8\u6027\u80fd nohup python3 test.py no hang up\uff08\u4e0d\u6302\u8d77\uff09\uff0c\u7528\u4e8e\u5728\u7cfb\u7edf\u540e\u53f0\u4e0d\u6302\u65ad\u5730\u8fd0\u884c\u547d\u4ee4\uff0c\u9000\u51fa\u7ec8\u7aef\u4e0d\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u7684\u8fd0\u884c \u5e38\u2ec5\u7cfb\u7edf\u670d\u52a1\u547d\u4ee4 \u00b6 \u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 chkconfig --list \u5217\u51fa\u7cfb\u7edf\u670d\u52a1 service <\u670d\u52a1\u540d> status \u67e5\u770b\u67d0\u4e2a\u670d\u52a1 service <\u670d\u52a1\u540d> start \u542f\u52a8\u67d0\u4e2a\u670d\u52a1 service <\u670d\u52a1\u540d> stop \u7ec8\u2f4c\u67d0\u4e2a\u670d\u52a1 service <\u670d\u52a1\u540d> restart \u91cd\u542f\u67d0\u4e2a\u670d\u52a1 systemctl status <\u670d\u52a1\u540d> \u67e5\u770b\u67d0\u4e2a\u670d\u52a1 systemctl start <\u670d\u52a1\u540d> \u542f\u52a8\u67d0\u4e2a\u670d\u52a1 systemctl stop <\u670d\u52a1\u540d> \u7ec8\u2f4c\u67d0\u4e2a\u670d\u52a1 systemctl restart <\u670d\u52a1\u540d> \u91cd\u542f\u67d0\u4e2a\u670d\u52a1 systemctl enable <\u670d\u52a1\u540d> \u5173\u95ed\u2f83\u542f\u52a8 systemctl disable <\u670d\u52a1\u540d> \u5173\u95ed\u2f83\u542f\u52a8 \u2f42\u4ef6\u548c\u2f6c\u5f55\u64cd\u4f5c \u00b6 \u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 cd <\u2f6c\u5f55\u540d> \u8fdb\u2f0a\u67d0\u4e2a\u2f6c\u5f55 cd .. \u56de\u4e0a\u7ea7\u2f6c\u5f55 cd ../.. \u56de\u4e0a\u4e24\u7ea7\u2f6c\u5f55 cd \u8fdb\u4e2a\u2f08\u4e3b\u2f6c\u5f55 cd - \u56de\u4e0a\u2f00\u6b65\u6240\u5728\u2f6c\u5f55 pwd \u663e\u793a\u5f53\u524d\u8def\u5f84 ls \u67e5\u770b\u2f42\u4ef6\u2f6c\u5f55\u5217\u8868 ls -F \u67e5\u770b\u2f6c\u5f55\u4e2d\u5185\u5bb9\uff08\u663e\u793a\u662f\u2f42\u4ef6\u8fd8\u662f\u2f6c\u5f55\uff09 ls -l \u67e5\u770b\u2f42\u4ef6\u548c\u2f6c\u5f55\u7684\u8be6\u60c5\u5217\u8868 ls -a \u67e5\u770b\u9690\u85cf\u2f42\u4ef6 ls -lh \u67e5\u770b\u2f42\u4ef6\u548c\u2f6c\u5f55\u7684\u8be6\u60c5\u5217\u8868\uff08\u589e\u5f3a\u2f42\u4ef6\u2f24\u2f29\u6613\u8bfb\u6027\uff09 ls -lSr \u67e5\u770b\u2f42\u4ef6\u548c\u2f6c\u5f55\u5217\u8868\uff08\u4ee5\u2f42\u4ef6\u2f24\u2f29\u5347\u5e8f\u67e5\u770b\uff09 tree \u67e5\u770b\u2f42\u4ef6\u548c\u2f6c\u5f55\u7684\u6811\u5f62\u7ed3\u6784 mkdir <\u2f6c\u5f55\u540d> \u521b\u5efa\u2f6c\u5f55 mkdir dir1 dir2 \u540c\u65f6\u521b\u5efa\u4e24\u4e2a\u2f6c\u5f55 mkdir -p /tmp/dir1/dir2 \u521b\u5efa\u2f6c\u5f55\u6811 rm -f file1 \u5220\u9664'file1'\u2f42\u4ef6 rmdir dir1 \u5220\u9664'dir1'\u2f6c\u5f55 rm -rf dir1 \u5220\u9664'dir1'\u2f6c\u5f55\u548c\u5176\u5185\u5bb9 rm -rf dir1 dir2 \u540c\u65f6\u5220\u9664\u4e24\u4e2a\u2f6c\u5f55\u53ca\u5176\u5185\u5bb9 mv old_dir new_dir \u91cd\u547d\u540d/\u79fb\u52a8\u2f6c\u5f55 cp file1 file2 \u590d\u5236\u2f42\u4ef6 cp dir/* . \u590d\u5236\u67d0\u2f6c\u5f55\u4e0b\u7684\u6240\u6709\u2f42\u4ef6\u2f84\u5f53\u524d\u2f6c\u5f55 cp -a dir1 dir2 \u590d\u5236\u2f6c\u5f55 cp -a /tmp/dir1 . \u590d\u5236\u2f00\u4e2a\u2f6c\u5f55\u2f84\u5f53\u524d\u2f6c\u5f55 ln -s file1 link1 \u521b\u5efa\u6307\u5411\u2f42\u4ef6/\u2f6c\u5f55\u7684\u8f6f\u94fe\u63a5 ln file1 lnk1 \u521b\u5efa\u6307\u5411\u2f42\u4ef6/\u2f6c\u5f55\u7684\u7269\u7406\u94fe\u63a5 find / -name file1 \u4ece\u8ddf\u2f6c\u5f55\u5f00\u59cb\u641c\u7d22\u2f42\u4ef6/\u2f6c\u5f55 find / -user user1 \u641c\u7d22\u2f64\u6237user1\u7684\u2f42\u4ef6/\u2f6c\u5f55 find /dir -name *.bin \u5728\u2f6c\u5f55/dir\u4e2d\u641c\u5e26\u6709.bin\u540e\u7f00\u7684\u2f42\u4ef6 locate <\u5173\u952e\u8bcd> \u5feb\u901f\u5b9a\u4f4d\u2f42\u4ef6 locate *.mp4 \u5bfb\u627e.mp4\u7ed3\u5c3e\u7684\u2f42\u4ef6 whereis <\u5173\u952e\u8bcd> \u663e\u793a\u67d0\u2f06\u8fdb\u5236\u2f42\u4ef6/\u53ef\u6267\u2f8f\u2f42\u4ef6\u7684\u8def\u5f84 which <\u5173\u952e\u8bcd> \u67e5\u627e\u7cfb\u7edf\u2f6c\u5f55\u4e0b\u67d0\u7684\u2f06\u8fdb\u5236\u2f42\u4ef6 chmod ugo+rwx dir1 \u8bbe\u7f6e\u2f6c\u5f55\u6240\u6709\u8005(u)\u3001\u7fa4\u7ec4(g)\u53ca\u5176\u4ed6\u2f08(o)\u7684\u8bfb\uff08r\uff09\u5199(w)\u6267\u2f8f(x)\u6743\u9650 chmod ugo-rwx dir1 \u79fb\u9664\u6240\u6709\u8005(u)\u3001\u7fa4\u7ec4(g)\u4e0e\u5176\u4ed6\u2f08(o)\u5bf9\u2f6c\u5f55\u7684\u8bfb\u5199\u6267\u2f8f\u6743\u9650 chown user1 file1 \u6539\u53d8\u2f42\u4ef6\u7684\u6240\u6709\u8005\u5c5e\u6027 chown -R user1 dir1 \u6539\u53d8\u2f6c\u5f55\u7684\u6240\u6709\u8005\u5c5e\u6027 chgrp group1 file1 \u6539\u53d8\u2f42\u4ef6\u7fa4\u7ec4 chown user1:group1 file1 \u6539\u53d8\u2f42\u4ef6\u7684\u6240\u6709\u2f08\u548c\u7fa4\u7ec4 \u2f42\u4ef6\u67e5\u770b\u548c\u5904\u7406 \u00b6 \u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 cat file1 \u67e5\u770b\u2f42\u4ef6\u5185\u5bb9 cat -n file1 \u67e5\u770b\u5185\u5bb9\u5e76\u6807\u793a\u2f8f\u6570 tac file1 \u4ece\u6700\u540e\u2f00\u2f8f\u5f00\u59cb\u53cd\u770b\u2f42\u4ef6\u5185\u5bb9 more file1 more file1 less file1 \u7c7b\u4f3cmore\u547d\u4ee4\uff0c\u4f46\u5141\u8bb8\u53cd\u5411\u64cd\u4f5c head -2 file1 \u67e5\u770b\u2f42\u4ef6\u524d\u4e24\u2f8f tail -2 file1 \u67e5\u770b\u2f42\u4ef6\u540e\u4e24\u2f8f tail -f /log/msg \u5b9e\u65f6\u67e5\u770b\u6dfb\u52a0\u5230\u2f42\u4ef6\u4e2d\u7684\u5185\u5bb9 grep codesheep hello.txt \u5728\u2f42\u4ef6hello.txt\u4e2d\u67e5\u627e\u5173\u952e\u8bcdcodesheep grep ^sheep hello.txt \u5728\u2f42\u4ef6hello.txt\u4e2d\u67e5\u627e\u4ee5sheep\u5f00\u5934\u7684\u5185\u5bb9 grep [0-9] hello.txt \u9009\u62e9hello.txt\u2f42\u4ef6\u4e2d\u6240\u6709\u5305\u542b\u6570\u5b57\u7684\u2f8f sed 's/s1/s2/g' hello.txt \u5c06hello.txt\u2f42\u4ef6\u4e2d\u7684s1\u66ff\u6362\u6210s2 sed '/^$/d' hello.txt \u4ecehello.txt\u2f42\u4ef6\u4e2d\u5220\u9664\u6240\u6709\u7a7a\u2f69\u2f8f sed '/ *#/d; /^$/d' hello.txt \u4ecehello.txt\u2f42\u4ef6\u4e2d\u5220\u9664\u6240\u6709\u6ce8\u91ca\u548c\u7a7a\u2f69\u2f8f sed -e '1d' hello.txt \u4ece\u2f42\u4ef6hello.txt \u4e2d\u6392\u9664\u7b2c\u2f00\u2f8f sed -n '/s1/p' hello.txt \u67e5\u770b\u53ea\u5305\u542b\u5173\u952e\u8bcd\"s1\"\u7684\u2f8f sed -e 's/ *$//' hello.txt \u5220\u9664\u6bcf\u2f00\u2f8f\u6700\u540e\u7684\u7a7a\u2f69\u5b57\u7b26 sed -e 's/s1//g' hello.txt \u4ece\u2f42\u6863\u4e2d\u53ea\u5220\u9664\u8bcd\u6c47s1\u5e76\u4fdd\u7559\u5269\u4f59\u5168\u90e8 sed -n '1,5p;5q' hello.txt \u67e5\u770b\u4ece\u7b2c\u2f00\u2f8f\u5230\u7b2c5\u2f8f\u5185\u5bb9 sed -n '5p;5q' hello.txt \u67e5\u770b\u7b2c5\u2f8f paste file1 file2 \u5408\u5e76\u4e24\u4e2a\u2f42\u4ef6\u6216\u4e24\u680f\u7684\u5185\u5bb9 paste -d '+' file1 file2 \u5408\u5e76\u4e24\u4e2a\u2f42\u4ef6\u6216\u4e24\u680f\u7684\u5185\u5bb9\uff0c\u4e2d\u95f4\u2f64\"+\"\u533a\u5206 sort file1 file2 \u6392\u5e8f\u4e24\u4e2a\u2f42\u4ef6\u7684\u5185\u5bb9 comm -1 file1 file2 \u2f50\u8f83\u4e24\u4e2a\u2f42\u4ef6\u7684\u5185\u5bb9(\u53bb\u9664'file1'\u6240\u542b\u5185\u5bb9) comm -2 file1 file2 \u2f50\u8f83\u4e24\u4e2a\u2f42\u4ef6\u7684\u5185\u5bb9(\u53bb\u9664'file2'\u6240\u542b\u5185\u5bb9 comm -3 file1 file2 \u2f50\u8f83\u4e24\u4e2a\u2f42\u4ef6\u7684\u5185\u5bb9(\u53bb\u9664\u4e24\u2f42\u4ef6\u5171\u6709\u90e8\u5206) \u6253\u5305\u548c\u89e3\u538b \u00b6 \u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 zip xxx.zip file \u538b\u7f29\u2f84zip\u5305 zip -r xxx.zip file1 file2 dir1 \u5c06\u591a\u4e2a\u2f42\u4ef6+\u2f6c\u5f55\u538b\u6210zip\u5305 unzip xxx.zip \u89e3\u538bzip\u5305 unzip xxx.zip -d path \u89e3\u538bzip\u5305\u5230path tar -cvf xxx.tar file \u521b\u5efa\u2fae\u538b\u7f29tar\u5305 tar -cvf xxx.tar file1 file2 dir1 \u5c06\u591a\u4e2a\u2f42\u4ef6+\u2f6c\u5f55\u6253tar\u5305 tar -tf xxx.tar \u67e5\u770btar\u5305\u7684\u5185\u5bb9 tar -xvf xxx.tar \u89e3\u538btar\u5305 tar -xvf xxx.tar -C /dir \u5c06tar\u5305\u89e3\u538b\u2f84\u6307\u5b9a\u2f6c\u5f55 tar -cvfj xxx.tar.bz2 dir \u521b\u5efabz2\u538b\u7f29\u5305 tar -jxvf xxx.tar.bz2 \u89e3\u538bbz2\u538b\u7f29\u5305 tar -cvfz xxx.tar.gz dir \u521b\u5efagzip\u538b\u7f29\u5305 tar -zxvf xxx.tar.gz \u89e3\u538bgzip\u538b\u7f29\u5305 bunzip2 xxx.bz2 \u89e3\u538bbz2\u538b\u7f29\u5305 bzip2 filename \u538b\u7f29\u2f42\u4ef6 gunzip xxx.gz \u89e3\u538bgzip\u538b\u7f29\u5305 gzip filename \u538b\u7f29\u2f42\u4ef6 gzip -9 filename \u6700\u2f24\u7a0b\u5ea6\u538b\u7f29 RPM\u5305\u7ba1\u7406\u547d\u4ee4 \u00b6 \u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 rpm -qa \u67e5\u770b\u5df2\u5b89\u88c5\u7684rpm\u5305 rpm -q pkg_name \u67e5\u8be2\u67d0\u4e2arpm\u5305 rpm -q --whatprovides xxx \u663e\u793axxx\u529f\u80fd\u662f\u7531\u54ea\u4e2a\u5305\u63d0\u4f9b\u7684 rpm -q --whatrequires xxx \u663e\u793axxx\u529f\u80fd\u88ab\u54ea\u4e2a\u7a0b\u5e8f\u5305\u4f9d\u8d56\u7684 rpm -q --changelog xxx \u663e\u793axxx\u5305\u7684\u66f4\u6539\u8bb0\u5f55 rpm -qi pkg_name \u67e5\u770b\u2f00\u4e2a\u5305\u7684\u8be6\u7ec6\u4fe1\u606f rpm -qd pkg_name \u67e5\u8be2\u2f00\u4e2a\u5305\u6240\u63d0\u4f9b\u7684\u2f42\u6863 rpm -qc pkg_name \u67e5\u770b\u5df2\u5b89\u88c5rpm\u5305\u63d0\u4f9b\u7684\u914d\u7f6e\u2f42\u4ef6 rpm -ql pkg_name \u67e5\u770b\u2f00\u4e2a\u5305\u5b89\u88c5\u4e86\u54ea\u4e9b\u2f42\u4ef6 rpm -qf filename \u67e5\u770b\u67d0\u4e2a\u2f42\u4ef6\u5c5e\u4e8e\u54ea\u4e2a\u5305 rpm -qR pkg_name \u67e5\u8be2\u5305\u7684\u4f9d\u8d56\u5173\u7cfb rpm -ivh xxx.rpm \u5b89\u88c5rpm\u5305 rpm -ivh --test xxx.rpm \u6d4b\u8bd5\u5b89\u88c5rpm\u5305 rpm -ivh --nodeps xxx.rpm \u5b89\u88c5rpm\u5305\u65f6\u5ffd\u7565\u4f9d\u8d56\u5173\u7cfb rpm -e xxx \u5378\u8f7d\u7a0b\u5e8f\u5305 rpm -Fvh pkg_name \u5347\u7ea7\u786e\u5b9a\u5df2\u5b89\u88c5\u7684rpm\u5305 rpm -Uvh pkg_name \u5347\u7ea7rpm\u5305(\u82e5\u672a\u5b89\u88c5\u5219\u4f1a\u5b89\u88c5) rpm -V pkg_name RPM\u5305\u8be6\u7ec6\u4fe1\u606f\u6821\u9a8c YUM\u5305\u7ba1\u7406\u547d\u4ee4 \u00b6 \u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 yum repolist enabled \u663e\u793a\u53ef\u2f64\u7684\u6e90\u4ed3\u5e93 yum search pkg_name \u641c\u7d22\u8f6f\u4ef6\u5305 yum install pkg_name \u4e0b\u8f7d\u5e76\u5b89\u88c5\u8f6f\u4ef6\u5305 yum install --downloadonly pkg_name \u53ea \u4e0b \u8f7d \u4e0d \u5b89 \u88c5 yum list \u663e\u793a\u6240\u6709\u7a0b\u5e8f\u5305 yum list installed \u67e5\u770b\u5f53\u524d\u7cfb\u7edf\u5df2\u5b89\u88c5\u5305 yum list updates \u67e5\u770b\u53ef\u4ee5\u66f4\u65b0\u7684\u5305\u5217\u8868 yum check-update \u67e5\u770b\u53ef\u5347\u7ea7\u7684\u8f6f\u4ef6\u5305 yum update \u66f4\u65b0\u6240\u6709\u8f6f\u4ef6\u5305 yum update pkg_name \u5347\u7ea7\u6307\u5b9a\u8f6f\u4ef6\u5305 yum deplist pkg_name \u5217\u51fa\u8f6f\u4ef6\u5305\u4f9d\u8d56\u5173\u7cfb yum remove pkg_name \u5220\u9664\u8f6f\u4ef6\u5305 yum clean all \u6e05\u9664\u7f13\u5b58 yum clean packages \u6e05\u9664\u7f13\u5b58\u7684\u8f6f\u4ef6\u5305 yum clean headers \u6e05\u9664\u7f13\u5b58\u7684header DPKG\u5305\u7ba1\u7406\u547d\u4ee4 \u00b6 \u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 dpkg -c xxx.deb \u5217\u51fadeb\u5305\u7684\u5185\u5bb9 dpkg -i xxx.deb \u5b89\u88c5/\u66f4\u65b0deb\u5305 dpkg -r pkg_name \u79fb\u9664deb\u5305 dpkg -P pkg_name \u79fb\u9664deb\u5305(\u4e0d\u4fdd\u7559\u914d\u7f6e) dpkg -l \u67e5\u770b\u7cfb\u7edf\u4e2d\u5df2\u5b89\u88c5deb\u5305 dpkg -l pkg_name \u663e\u793a\u5305\u7684\u2f24\u81f4\u4fe1\u606f dpkg -L pkg_name \u67e5\u770bdeb\u5305\u5b89\u88c5\u7684\u2f42\u4ef6 dpkg -s pkg_name \u67e5\u770b\u5305\u7684\u8be6\u7ec6\u4fe1\u606f dpkg \u2013unpack xxx.deb \u89e3\u5f00deb\u5305\u7684\u5185\u5bb9 APT\u8f6f\u4ef6\u2f2f\u5177 \u00b6 \u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 apt-cache search pkg_name \u641c\u7d22\u7a0b\u5e8f\u5305 apt-cache show pkg_name \u83b7\u53d6\u5305\u7684\u6982\u89c8\u4fe1\u606f apt-get install pkg_name \u5b89\u88c5/\u5347\u7ea7\u8f6f\u4ef6\u5305 apt-get purge pkg_name \u5378\u8f7d\u8f6f\u4ef6\uff08\u5305\u62ec\u914d\u7f6e\uff09 apt-get remove pkg_name \u5378\u8f7d\u8f6f\u4ef6\uff08\u4e0d\u5305\u62ec\u914d\u7f6e\uff09 apt-get update \u66f4\u65b0\u5305\u7d22\u5f15\u4fe1\u606f apt-get upgrade \u66f4\u65b0\u5df2\u5b89\u88c5\u8f6f\u4ef6\u5305 apt-get clean \u6e05\u7406\u7f13\u5b58 \u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 apt install package1 \u5b89\u88c5 apt list --installed \u5217\u51fa\u6240\u6709\u5b89\u88c5\u4fe1\u606f apt list package1 \u5217\u51fa\u6307\u5b9a\u5305\u4fe1\u606f apt remove package1 \u5378\u8f7d apt update \u66f4\u65b0\u5305\u7d22\u5f15\u4fe1\u606f","title":"Linux"},{"location":"%E7%AC%94%E8%AE%B0/Linux/#linux","text":"","title":"Linux"},{"location":"%E7%AC%94%E8%AE%B0/Linux/#vim","text":"vim \u6587\u4ef6\u8def\u5f84 # \u8fdb\u5165normal vimtutor # \u57fa\u7840\u6559\u7a0b","title":"Vim"},{"location":"%E7%AC%94%E8%AE%B0/Linux/#normal","text":"","title":"normal\u6a21\u5f0f"},{"location":"%E7%AC%94%E8%AE%B0/Linux/#_1","text":"hjkl # \u5de6\u4e0b\u4e0a\u53f3 w # \u4e0b\u4e00\u4e2a\u5355\u8bcd\u5f00\u5934 b # \u672c\u5355\u8bcd\u6216\u8005\u4e0a\u4e00\u4e2a\u5355\u8bcd\u5f00\u5934 e # \u672c\u5355\u8bcd\u6216\u4e0b\u4e00\u5355\u8bcd\u7ed3\u5c3e 0 # \u5149\u6807\u79fb\u52a8\u5230\u6240\u5728\u884c\u7684\u884c\u9996 ^ # \u884c\u9996\u5f00\u59cb\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26 $ # \u5149\u6807\u79fb\u52a8\u5230\u6240\u5728\u884c\u7684\u884c\u5c3e gg # \u7b2c\u4e00\u884c G # \u6700\u540e\u4e00\u884c f { char } # \u8df3\u5230\u4e0b\u4e00\u4e2a char \u7684\u4f4d\u7f6e F { char } # \u8df3\u6389\u4e0a\u4e00\u4e2a\u7684 char \u7684\u4f4d\u7f6e t { char } # \u8df3\u5230\u4e0b\u4e00\u4e2a char \u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e T { char } # \u8df3\u6389\u4e0a\u4e00\u4e2a\u7684 char \u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e ; # \u91cd\u590d\u4e0a\u4e00\u4e2a\u67e5\u627e\u64cd\u4f5c\uff0c\u5411\u540e\u627e , # \u91cd\u590d\u4e0a\u4e00\u4e2a\u67e5\u627e\u64cd\u4f5c\uff0c \u5411\u524d\u627e % # \u5149\u6807\u5728 \u5404\u79cd\u62ec\u53f7 \u4e0a\u65f6\uff0c\u53ef\u4ee5\u8fdb\u884c\u8df3\u8f6c\u5230\u5339\u914d\u5904 [ num ] G # \u8df3\u8f6c\u5230\u5bf9\u5e94\u884c ctrl o # \u8df3\u8f6c\u5230\u8001\u4f4d\u7f6e ctrl i # \u8df3\u8f6c\u5230\u65b0\u7684\u4f4d\u7f6e Ctrl + f # \u5f80\u4e0b\u7ffb\u4e00\u9875 Ctrl + b # \u5f80\u4e0a\u7ffb\u4e00\u9875 ctrl e # \u5411\u4e0b\u6eda\u52a8\u4e00\u884c ctrl y # \u5411\u4e0a\u6eda\u52a8\u4e00\u884c","title":"\u5149\u6807\u79fb\u52a8"},{"location":"%E7%AC%94%E8%AE%B0/Linux/#_2","text":"d # \u5220\u9664\uff0c\u5e26\u526a\u5207 c # \u4fee\u6539\uff0c\u5e26\u526a\u5207 y # \u590d\u5236 v # \u8fdb\u5165 visual \u6a21\u5f0f s # \u5220\u9664\u5f53\u524d\u5b57\u7b26\u5e76\u8fdb\u5165 insert \u6a21\u5f0f S + '{' # \u53ef\u4ee5\u7ed9\u9009\u4e2d\u90e8\u5206\u4e24\u8fb9\u52a0\u7b26\u53f7 dd # \u5220\u9664\u4e00\u884c d [ num ] motion D # \u7b49\u6548\u4e8e d$ cc # \u4fee\u6539\u4e00\u884c\uff0c\u4f1a\u5148\u5220\u9664\u5e76\u8fdb\u5165\u63d2\u5165\u6a21\u5f0f c [ num ] motion C # \u7b49\u6548\u4e8e c$, \u5220\u9664\u5149\u6807\u5904\u5230\u884c\u672b\uff0c\u5e76\u8fdb\u5165\u63d2\u5165\u6a21\u5f0f I # ^i A # $a yy # \u590d\u5236\u4e00\u884c 2 dd # \u5220\u96642\u884c dfs # \u5220\u9664\u5230 s \u7684\u4f4d\u7f6e dw d $ d ^ die / cie # \u6574\u4e2a\u6587\u4ef6 zz # \u89c6\u89d2\u53d8\u5316\u5230\u5149\u6807\u5f53\u524d\u884c\u5230\u5c4f\u5e55\u4e2d\u592e . # \u91cd\u590d\u4e0a\u6b21\u4fee\u6539\u64cd\u4f5c","title":"\u64cd\u4f5c\u7b26"},{"location":"%E7%AC%94%E8%AE%B0/Linux/#_3","text":"\u4e0e\u64cd\u4f5c\u7b26\u914d\u5408 iw / aw i ( / a ( i { / a { i \" / a\" i ' / a' i < / a < i [ / a [ it / at # html \u91cc\u7528","title":"\u52a8\u4f5c"},{"location":"%E7%AC%94%E8%AE%B0/Linux/#_4","text":"p # \u590d\u5236 u # \u64a4\u9500 U # \u64a4\u9500\u5bf9\u6574\u884c\u7684\u4fee\u6539 ctrl r # \u91cd\u505a\u88ab\u64a4\u9500\u7684\u547d\u4ee4\uff0c\u64a4\u9500\u64a4\u9500\u7684\u547d\u4ee4 x # \u5220\u9664\u4e00\u4e2a\u5b57\u7b26 r { char } # \u6539\u53d8\u4e00\u4e2a\u5b57\u7b26 . # \u91cd\u590d\u4e0a\u6b21\u7684\u4fee\u6539\u64cd\u4f5c # \u5927\u5c0f\u5199\u5207\u6362, \u4e5f\u53ef\u4ee5\u5728\u9009\u4e2d\u6a21\u5f0f\u4e0b\u7528 u / U ~ # \u6539\u53d8\u4e00\u4e2a\u5b57\u7b26\u5927\u5c0f\u5199 3 ~ g ~~ gUU guu gUiw guiw gd # \u8df3\u8f6c\u5230\u51fd\u6570\u5b9a\u4e49 gh # holder gt / gT # \u5207\u6362\u6807\u7b7e\u9875, ctrl 0 ctrl 1 ctrl g # \u67e5\u770b\u6587\u4ef6\u72b6\u6001","title":"\u5176\u4ed6"},{"location":"%E7%AC%94%E8%AE%B0/Linux/#visual","text":"\u9009\u4e2d\u6a21\u5f0f viw # \u9009\u4e2d\u4e00\u4e2a\u5355\u8bcd viwd # \u5220\u9664\u9009\u4e2d\u7684\u5355\u8bcd","title":"visual \u6a21\u5f0f"},{"location":"%E7%AC%94%E8%AE%B0/Linux/#insert","text":"\u8fdb\u5165\u63d2\u5165\u6a21\u5f0f\uff1a i / I a / A o / O \u9000\u51fa\u63d2\u5165\u6a21\u5f0f\uff1a Esc ctrl o # \u63d2\u5165-\u666e\u901a\u6a21\u5f0f\uff0c\u53ef\u4ee5\u5728\u63d2\u5165\u6a21\u5f0f\u4e0b\u8f93\u5165\u4e00\u6b21\u666e\u901a\u6a21\u5f0f\u7684\u6307\u4ee4","title":"insert \u6a21\u5f0f"},{"location":"%E7%AC%94%E8%AE%B0/Linux/#_5","text":"normal \u6a21\u5f0f\u4e0b\u6309 : \u6216 / : wq # \u4fdd\u5b58\u6587\u4ef6\u5e76\u9000\u51fa : q # \u4e0d\u4fdd\u5b58\u6587\u4ef6\uff0c\u5e76\u9000\u51fa\uff0c\u5982\u679c\u6587\u4ef6\u505a\u4e86\u4fee\u6539\uff0c\u4f46\u6709\u4e0d\u60f3\u4fdd\u5b58\uff0c\u9700\u8981\u7528:q! : q ! # \u4e0d\u4fdd\u5b58\u6587\u4ef6\uff0c\u5f3a\u5236\u9000\u51fa : w # \u53ea\u4fdd\u5b58\u6587\u4ef6\uff0c\u4f46\u662f\u4e0d\u9000\u51favi\uff0c\u53ef\u4ee5\u5207\u6362\u5230\u8f93\u5165\u6a21\u5f0f\u4e0b\u9762\u7ee7\u7eed\u7f16\u8f91\u6587\u4ef6 : w { file_name } # \u5199\u5165\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6 : set nu # \u663e\u793a\u884c\u53f7 / { string } # \u5411\u540e\u641c\u7d22\u5b57\u7b26\u4e32\uff0cn \u5411\u524d\uff0cN \u5411\u540e ? { string } # \u5411\u524d\u641c\u7d22\u5b57\u7b26\u4e32 : set ic # \u641c\u7d22\u540e\u7528\u6b64\u547d\u4ee4\u53ef\u4ee5\u5ffd\u7565\u5927\u5c0f\u5199,ignore case : set hls is # hls \u9ad8\u4eae\u641c\u7d22, is \u663e\u793a\u90e8\u5206\u5339\u914d, hl search, incsearch : set noic # \u5173\u95ed\u9009\u9879, nohls, nois : s / old / new # \u672c\u884c\u4e2d\u7b2c\u4e00\u4e2a old \u66ff\u6362\u4e3a new : s / old / new / g # \u5728\u672c\u884c\u4e2d\u6240\u6709 old \u66ff\u6362\u4e3a new : #,#s/old/new/g # # \u548c # \u8868\u793a\u884c\u53f7 : % s / old / new / g # \u66ff\u6362\u6574\u4e2a\u6587\u4ef6\u7684 old : % s / old / new / gc # \u66ff\u6362\u6574\u4e2a\u6587\u4ef6\u7684 old\uff0c\u5e76\u4e14\u4f1a\u6bcf\u4e2a\u8fdb\u884c\u8be2\u95ee : ! ls # :! \u540e\u8f93\u5165\u5916\u90e8\u547d\u4ee4 : r filename # \u628a\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u5199\u5230\u5149\u6807\u5904 : r ! ls # \u4e5f\u53ef\u4ee5\u628a\u547d\u4ee4\u7684\u8f93\u51fa\u5199\u5230\u5149\u6807\u5904 : help # \u521b\u5efa\u542f\u52a8\u811a\u672c","title":": \u6a21\u5f0f"},{"location":"%E7%AC%94%E8%AE%B0/Linux/#apt","text":"\u4ee5root\u8d26\u53f7\u767b\u5f55\uff0c\u6216\u8005\u540e\u7eed\u547d\u4ee4\u524d\u9762\u52a0 sudo \u4ee5root\u6267\u884c \u6267\u884c\u547d\u4ee4 cd /etc/apt \u8fdb\u5165\u5230\u76ee\u5f55 /etc/apt \u4e0b \u6267\u884c\u547d\u4ee4 cp sources.list sources.list.bak \u5148\u521b\u5efa\u5907\u4efd\u6587\u4ef6\uff0c\u8fd9\u6837\u4e07\u4e00\u6539\u9519\uff0c\u53ef\u4ee5\u6709\u5907\u4efd\u6587\u4ef6\u6062\u590d \u6267\u884c vi sources.list \u6253\u5f00\u6587\u4ef6\uff0c \u51c6\u5907\u628a\u57df\u540d\u4ece\u4ece cn.archive.ubuntu.com \u66ff\u6362\u4e3a mirrors.aliyun.com \u6309 \u5192\u53f7\uff0c\u8fdb\u5165\u5e95\u884c\u6a21\u5f0f\uff0c\u8f93\u5165\u547d\u4ee4 1,$s/cn.archive.ubuntu.com/mirrors.aliyun.com/g \u8fdb\u884c\u66ff\u6362 \u786e\u8ba4\u4e00\u4e0b\u57df\u540d\u4fee\u6539\u6b63\u786e\u540e\uff0c\u8f93\u5165 :wq \u4fdd\u5b58\u9000\u51fa\u3002 \u6267\u884c\u547d\u4ee4 apt update \uff0c \u8ba9\u4fee\u6539\u751f\u6548","title":"\u4fee\u6539 apt \u6e90\u670d\u52a1\u5668"},{"location":"%E7%AC%94%E8%AE%B0/Linux/#_6","text":"SSH ssh user@ip \u65ad\u5f00\u8fde\u63a5\uff1aCtrl + D SCP \u628a\u8fdc\u7a0b\u7684\u6587\u4ef6\u590d\u5236\u5230\u672c\u5730 scp user@ip:path1 path2 \u628a\u672c\u5730\u7684\u6587\u4ef6\u590d\u5236\u5230\u8fdc\u7a0b\u4e3b\u673a\u4e0a scp path1 user@ip:path2 \u628a\u8fdc\u7a0b\u7684\u76ee\u5f55\u590d\u5236\u5230\u672c\u5730 scp -r user@ip:path1 path2","title":"\u8fde\u63a5\u8fdc\u7a0b\u4e3b\u673a"},{"location":"%E7%AC%94%E8%AE%B0/Linux/#_7","text":"sort -nk 6 // -n \u8868\u793a\u6309\u7167\u6570\u5b57\u6392\u5e8f\uff0c-k \u8868\u793a\u6392\u5e8f\u7b2c\u51e0\u5217\u8f93\u51fa head -n 100 // \u524d 100 \u884c uniq -c // -c \u7edf\u8ba1","title":"\u5176\u4ed6"},{"location":"%E7%AC%94%E8%AE%B0/Linux/#_8","text":"CodeSheep","title":"\u624b\u518c"},{"location":"%E7%AC%94%E8%AE%B0/Linux/#_9","text":"\u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 shutdown -h now \u5373\u523b\u5173\u673a shutdown -h 10 10\u5206\u949f\u540e\u5173\u673a shutdown -h 11:00 11\uff1a00\u5173\u673a shutdown -h +10 \u9884\u5b9a\u65f6\u95f4\u5173\u673a\uff0810\u5206\u949f\u540e\uff09 shutdown -c \u53d6\u6d88\u6307\u5b9a\u65f6\u95f4\u5173\u673a shutdown -r now \u91cd\u542f shutdown -r 10 10\u5206\u949f\u4e4b\u540e\u91cd\u542f shutdown -r 11:00 \u5b9a\u65f6\u91cd\u542f reboot \u91cd\u542f init 6 \u91cd\u542f init 0 \u2f74\u523b\u5173\u673a telinit 0 \u5173\u673a poweroff \u2f74\u523b\u5173\u673a halt \u5173\u673a sync buff\u6570\u636e\u540c\u6b65\u5230\u78c1\u76d8 logout \u9000\u51fa\u767b\u5f55Shell","title":"\u5173\u673a/\u91cd\u542f/\u6ce8\u9500"},{"location":"%E7%AC%94%E8%AE%B0/Linux/#_10","text":"\u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 uname -a \u67e5\u770b\u5185\u6838/OS/CPU\u4fe1\u606f uname -r \u67e5\u770b\u5185\u6838\u7248\u672c uname -m \u67e5\u770b\u5904\u7406\u5668\u67b6\u6784 arch \u67e5\u770b\u5904\u7406\u5668\u67b6\u6784 hostname \u67e5\u770b\u8ba1\u7b97\u673a\u540d who \u663e\u793a\u5f53\u524d\u767b\u5f55\u7cfb\u7edf\u7684\u2f64\u6237 who am i \u663e\u793a\u767b\u5f55\u65f6\u7684\u2f64\u6237\u540d whoami \u663e\u793a\u5f53\u524d\u2f64\u6237\u540d cat /proc/version \u67e5\u770blinux\u7248\u672c\u4fe1\u606f cat /proc/cpuinfo \u67e5\u770bCPU\u4fe1\u606f cat /proc/interrupts \u67e5\u770b\u4e2d\u65ad cat /proc/loadavg \u67e5\u770b\u7cfb\u7edf\u8d1f\u8f7d uptime \u67e5\u770b\u7cfb\u7edf\u8fd0\u2f8f\u65f6\u95f4\u3001\u2f64\u6237\u6570\u3001\u8d1f\u8f7d env \u67e5\u770b\u7cfb\u7edf\u7684\u73af\u5883\u53d8\u91cf lsusb -tv \u67e5\u770b\u7cfb\u7edfUSB\u8bbe\u5907\u4fe1\u606f lspci -tv \u67e5\u770b\u7cfb\u7edfPCI\u8bbe\u5907\u4fe1\u606f lsmod \u67e5\u770b\u5df2\u52a0\u8f7d\u7684\u7cfb\u7edf\u6a21\u5757 grep MemTotal /proc/meminfo \u67e5\u770b\u5185\u5b58\u603b\u91cf grep MemFree /proc/meminfo \u67e5\u770b\u7a7a\u95f2\u5185\u5b58\u91cf free -m \u67e5\u770b\u5185\u5b58\u2f64\u91cf\u548c\u4ea4\u6362\u533a\u2f64\u91cf date \u663e\u793a\u7cfb\u7edf\u2f47\u671f\u65f6\u95f4 cal 2021 \u663e\u793a2021\u2f47\u5386\u8868 top \u52a8\u6001\u663e\u793acpu/\u5185\u5b58/\u8fdb\u7a0b\u7b49\u60c5\u51b5 vmstat 1 20 \u6bcf1\u79d2\u91c7\u2f00\u6b21\u7cfb\u7edf\u72b6\u6001\uff0c\u91c720\u6b21 iostat \u67e5\u770bio\u8bfb\u5199/cpu\u4f7f\u2f64\u60c5\u51b5 \u67e5\u770bio\u8bfb\u5199/cpu\u4f7f\u2f64\u60c5\u51b5 \u67e5\u8be2cpu\u4f7f\u2f64\u60c5\u51b5\uff081\u79d2\u2f00\u6b21\uff0c\u517110\u6b21\uff09 sar -d 1 10 \u67e5\u8be2\u78c1\u76d8\u6027\u80fd","title":"\u7cfb\u7edf\u4fe1\u606f\u548c\u6027\u80fd\u67e5\u770b"},{"location":"%E7%AC%94%E8%AE%B0/Linux/#_11","text":"\u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 fdisk -l \u67e5\u770b\u6240\u6709\u78c1\u76d8\u5206\u533a swapon -s \u67e5\u770b\u6240\u6709\u4ea4\u6362\u5206\u533a df -h \u67e5\u770b\u78c1\u76d8\u4f7f\u2f64\u60c5\u51b5\u53ca\u6302\u8f7d\u70b9 df -hl \u540c\u4e0a du -sh /dir \u67e5\u770b\u6307\u5b9a\u67d0\u4e2a\u2f6c\u5f55\u7684\u2f24\u2f29 du -sk * | sort -rn \u4ece\u2fbc\u5230\u4f4e\u4f9d\u6b21\u663e\u793a\u2f42\u4ef6\u548c\u2f6c\u5f55\u2f24\u2f29 mount /dev/hda2 /mnt/hda2 \u6302\u8f7dhda2\u76d8 mount -t ntfs /dev/sdc1 /mnt/usbhd1 \u6307\u5b9a\u2f42\u4ef6\u7cfb\u7edf\u7c7b\u578b\u6302\u8f7d\uff08\u5982ntfs\uff09 mount -o loop xxx.iso /mnt/cdrom \u6302 \u8f7d iso \u2f42 \u4ef6 umount -v /dev/sda1 \u901a\u8fc7\u8bbe\u5907\u540d\u5378\u8f7d umount -v /mnt/mymnt \u901a\u8fc7\u6302\u8f7d\u70b9\u5378\u8f7d fuser -km /mnt/hda1 \u5f3a\u5236\u5378\u8f7d(\u614e\u2f64)","title":"\u78c1\u76d8\u548c\u5206\u533a"},{"location":"%E7%AC%94%E8%AE%B0/Linux/#_12","text":"\u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 useradd codesheep \u521b\u5efa\u2f64\u6237\uff08\u6ca1\u6709\u7528\u6237\u76ee\u5f55\uff0c\u5bc6\u7801\uff09 userdel -r codesheep \u5220\u9664\u2f64\u6237 usermod -g group_name user_name \u4fee\u6539\u2f64\u6237\u7684\u7ec4 usermod -aG group_name user_name \u5c06\u2f64\u6237\u6dfb\u52a0\u5230\u7ec4 usermod -s /bin/ksh -d /home/codepig \u2013g dev codesheep \u4fee\u6539\u2f64\u6237codesheep\u7684\u767b\u5f55Shell\u3001\u4e3b\u2f6c\u5f55\u4ee5\u53ca\u2f64\u6237\u7ec4 groups test \u67e5\u770btest\u2f64\u6237\u6240\u5728\u7684\u7ec4 groupadd group_name \u521b\u5efa\u2f64\u6237\u7ec4 groupdel group_name \u5220\u9664\u2f64\u6237\u7ec4 groupmod -n new_name old_name \u91cd\u547d\u540d\u2f64\u6237\u7ec4 su - user_name su - user_name passwd \u4fee\u6539\u2f1d\u4ee4 passwd codesheep \u4fee\u6539\u67d0\u2f64\u6237\u7684\u2f1d\u4ee4 w \u67e5\u770b\u6d3b\u52a8\u2f64\u6237 id codesheep \u67e5\u770b\u6307\u5b9a\u2f64\u6237codesheep\u4fe1\u606f last \u67e5\u770b\u2f64\u6237\u767b\u5f55\u2f47\u5fd7 crontab -l \u67e5\u770b\u5f53\u524d\u2f64\u6237\u7684\u8ba1\u5212\u4efb\u52a1 cut -d: -f1 /etc/passwd \u67e5\u770b\u7cfb\u7edf\u6240\u6709\u2f64\u6237 cut -d: -f1 /etc/group \u67e5\u770b\u7cfb\u7edf\u6240\u6709\u7ec4","title":"\u2f64\u6237\u548c\u2f64\u6237\u7ec4"},{"location":"%E7%AC%94%E8%AE%B0/Linux/#_13","text":"\u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 ifconfig \u67e5\u770b\u2f79\u7edc\u63a5\u2f1d\u5c5e\u6027 ifconfig eth0 \u67e5\u770b\u67d0\u2f79\u5361\u7684\u914d\u7f6e route -n \u67e5\u770b\u8def\u7531\u8868 netstat -lntp \u67e5\u770b\u6240\u6709\u76d1\u542c\u7aef\u2f1d netstat -antp \u67e5\u770b\u5df2\u7ecf\u5efa\u2f74\u7684TCP\u8fde\u63a5 netstat -lutp \u67e5\u770bTCP/UDP\u7684\u72b6\u6001\u4fe1\u606f ifup eth0 \u542f\u2f64eth0\u2f79\u7edc\u8bbe\u5907 ifdown eth0 \u7981\u2f64eth0\u2f79\u7edc\u8bbe\u5907 iptables -L \u67e5\u770biptables\u89c4\u5219 ifconfig eth0 192.168.1.1 netmask 255.255.255.0 \u914d\u7f6eip\u5730\u5740 dhclient eth0 \u4ee5dhcp\u6a21\u5f0f\u542f\u2f64eth0 route add -net 0/0 gw Gateway_IP \u914d\u7f6e\u9ed8\u8ba4\u2f79\u5173 route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1 \u914d\u7f6e\u9759\u6001\u8def\u7531\u5230\u8fbe\u2f79\u7edc'192.168.0.0/16' route del 0/0 gw Gateway_IP \u5220\u9664\u9759\u6001\u8def\u7531 hostname \u67e5\u770b\u4e3b\u673a\u540d host www.baidu.com \u89e3\u6790\u4e3b\u673a\u540d nslookup www.baidu.com \u67e5\u8be2DNS\u8bb0\u5f55\uff0c\u67e5\u770b\u57df\u540d\u89e3\u6790\u662f\u5426\u6b63\u5e38 ps -ef \u67e5\u770b\u6240\u6709\u8fdb\u7a0b -f\uff1a\u8be6\u7ec6\u4fe1\u606f -e\uff1a\u6240\u6709\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b ps -ef | grep codesheep \u8fc7\u6ee4\u51fa\u4f60\u9700\u8981\u7684\u8fdb\u7a0b kill -s name kill\u6307\u5b9a\u540d\u79f0\u7684\u8fdb\u7a0b kill -s pid kill\u6307\u5b9apid\u7684\u8fdb\u7a0b kill -9 pid kill\u8fdb\u7a0b top \u5b9e\u65f6\u663e\u793a\u8fdb\u7a0b\u72b6\u6001 top -d pid \u5b9e\u65f6\u663e\u793a\u67d0\u8fdb\u7a0b\u72b6\u6001 vmstat 1 20 \u6bcf1\u79d2\u91c7\u2f00\u6b21\u7cfb\u7edf\u72b6\u6001\uff0c\u91c720\u6b21 iostat iostat sar -u 1 10 \u67e5\u8be2cpu\u4f7f\u2f64\u60c5\u51b5\uff081\u79d2\u2f00\u6b21\uff0c\u517110\u6b21\uff09 sar -d 1 10 \u67e5\u8be2\u78c1\u76d8\u6027\u80fd nohup python3 test.py no hang up\uff08\u4e0d\u6302\u8d77\uff09\uff0c\u7528\u4e8e\u5728\u7cfb\u7edf\u540e\u53f0\u4e0d\u6302\u65ad\u5730\u8fd0\u884c\u547d\u4ee4\uff0c\u9000\u51fa\u7ec8\u7aef\u4e0d\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u7684\u8fd0\u884c","title":"\u2f79\u7edc\u548c\u8fdb\u7a0b\u7ba1\u7406"},{"location":"%E7%AC%94%E8%AE%B0/Linux/#_14","text":"\u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 chkconfig --list \u5217\u51fa\u7cfb\u7edf\u670d\u52a1 service <\u670d\u52a1\u540d> status \u67e5\u770b\u67d0\u4e2a\u670d\u52a1 service <\u670d\u52a1\u540d> start \u542f\u52a8\u67d0\u4e2a\u670d\u52a1 service <\u670d\u52a1\u540d> stop \u7ec8\u2f4c\u67d0\u4e2a\u670d\u52a1 service <\u670d\u52a1\u540d> restart \u91cd\u542f\u67d0\u4e2a\u670d\u52a1 systemctl status <\u670d\u52a1\u540d> \u67e5\u770b\u67d0\u4e2a\u670d\u52a1 systemctl start <\u670d\u52a1\u540d> \u542f\u52a8\u67d0\u4e2a\u670d\u52a1 systemctl stop <\u670d\u52a1\u540d> \u7ec8\u2f4c\u67d0\u4e2a\u670d\u52a1 systemctl restart <\u670d\u52a1\u540d> \u91cd\u542f\u67d0\u4e2a\u670d\u52a1 systemctl enable <\u670d\u52a1\u540d> \u5173\u95ed\u2f83\u542f\u52a8 systemctl disable <\u670d\u52a1\u540d> \u5173\u95ed\u2f83\u542f\u52a8","title":"\u5e38\u2ec5\u7cfb\u7edf\u670d\u52a1\u547d\u4ee4"},{"location":"%E7%AC%94%E8%AE%B0/Linux/#_15","text":"\u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 cd <\u2f6c\u5f55\u540d> \u8fdb\u2f0a\u67d0\u4e2a\u2f6c\u5f55 cd .. \u56de\u4e0a\u7ea7\u2f6c\u5f55 cd ../.. \u56de\u4e0a\u4e24\u7ea7\u2f6c\u5f55 cd \u8fdb\u4e2a\u2f08\u4e3b\u2f6c\u5f55 cd - \u56de\u4e0a\u2f00\u6b65\u6240\u5728\u2f6c\u5f55 pwd \u663e\u793a\u5f53\u524d\u8def\u5f84 ls \u67e5\u770b\u2f42\u4ef6\u2f6c\u5f55\u5217\u8868 ls -F \u67e5\u770b\u2f6c\u5f55\u4e2d\u5185\u5bb9\uff08\u663e\u793a\u662f\u2f42\u4ef6\u8fd8\u662f\u2f6c\u5f55\uff09 ls -l \u67e5\u770b\u2f42\u4ef6\u548c\u2f6c\u5f55\u7684\u8be6\u60c5\u5217\u8868 ls -a \u67e5\u770b\u9690\u85cf\u2f42\u4ef6 ls -lh \u67e5\u770b\u2f42\u4ef6\u548c\u2f6c\u5f55\u7684\u8be6\u60c5\u5217\u8868\uff08\u589e\u5f3a\u2f42\u4ef6\u2f24\u2f29\u6613\u8bfb\u6027\uff09 ls -lSr \u67e5\u770b\u2f42\u4ef6\u548c\u2f6c\u5f55\u5217\u8868\uff08\u4ee5\u2f42\u4ef6\u2f24\u2f29\u5347\u5e8f\u67e5\u770b\uff09 tree \u67e5\u770b\u2f42\u4ef6\u548c\u2f6c\u5f55\u7684\u6811\u5f62\u7ed3\u6784 mkdir <\u2f6c\u5f55\u540d> \u521b\u5efa\u2f6c\u5f55 mkdir dir1 dir2 \u540c\u65f6\u521b\u5efa\u4e24\u4e2a\u2f6c\u5f55 mkdir -p /tmp/dir1/dir2 \u521b\u5efa\u2f6c\u5f55\u6811 rm -f file1 \u5220\u9664'file1'\u2f42\u4ef6 rmdir dir1 \u5220\u9664'dir1'\u2f6c\u5f55 rm -rf dir1 \u5220\u9664'dir1'\u2f6c\u5f55\u548c\u5176\u5185\u5bb9 rm -rf dir1 dir2 \u540c\u65f6\u5220\u9664\u4e24\u4e2a\u2f6c\u5f55\u53ca\u5176\u5185\u5bb9 mv old_dir new_dir \u91cd\u547d\u540d/\u79fb\u52a8\u2f6c\u5f55 cp file1 file2 \u590d\u5236\u2f42\u4ef6 cp dir/* . \u590d\u5236\u67d0\u2f6c\u5f55\u4e0b\u7684\u6240\u6709\u2f42\u4ef6\u2f84\u5f53\u524d\u2f6c\u5f55 cp -a dir1 dir2 \u590d\u5236\u2f6c\u5f55 cp -a /tmp/dir1 . \u590d\u5236\u2f00\u4e2a\u2f6c\u5f55\u2f84\u5f53\u524d\u2f6c\u5f55 ln -s file1 link1 \u521b\u5efa\u6307\u5411\u2f42\u4ef6/\u2f6c\u5f55\u7684\u8f6f\u94fe\u63a5 ln file1 lnk1 \u521b\u5efa\u6307\u5411\u2f42\u4ef6/\u2f6c\u5f55\u7684\u7269\u7406\u94fe\u63a5 find / -name file1 \u4ece\u8ddf\u2f6c\u5f55\u5f00\u59cb\u641c\u7d22\u2f42\u4ef6/\u2f6c\u5f55 find / -user user1 \u641c\u7d22\u2f64\u6237user1\u7684\u2f42\u4ef6/\u2f6c\u5f55 find /dir -name *.bin \u5728\u2f6c\u5f55/dir\u4e2d\u641c\u5e26\u6709.bin\u540e\u7f00\u7684\u2f42\u4ef6 locate <\u5173\u952e\u8bcd> \u5feb\u901f\u5b9a\u4f4d\u2f42\u4ef6 locate *.mp4 \u5bfb\u627e.mp4\u7ed3\u5c3e\u7684\u2f42\u4ef6 whereis <\u5173\u952e\u8bcd> \u663e\u793a\u67d0\u2f06\u8fdb\u5236\u2f42\u4ef6/\u53ef\u6267\u2f8f\u2f42\u4ef6\u7684\u8def\u5f84 which <\u5173\u952e\u8bcd> \u67e5\u627e\u7cfb\u7edf\u2f6c\u5f55\u4e0b\u67d0\u7684\u2f06\u8fdb\u5236\u2f42\u4ef6 chmod ugo+rwx dir1 \u8bbe\u7f6e\u2f6c\u5f55\u6240\u6709\u8005(u)\u3001\u7fa4\u7ec4(g)\u53ca\u5176\u4ed6\u2f08(o)\u7684\u8bfb\uff08r\uff09\u5199(w)\u6267\u2f8f(x)\u6743\u9650 chmod ugo-rwx dir1 \u79fb\u9664\u6240\u6709\u8005(u)\u3001\u7fa4\u7ec4(g)\u4e0e\u5176\u4ed6\u2f08(o)\u5bf9\u2f6c\u5f55\u7684\u8bfb\u5199\u6267\u2f8f\u6743\u9650 chown user1 file1 \u6539\u53d8\u2f42\u4ef6\u7684\u6240\u6709\u8005\u5c5e\u6027 chown -R user1 dir1 \u6539\u53d8\u2f6c\u5f55\u7684\u6240\u6709\u8005\u5c5e\u6027 chgrp group1 file1 \u6539\u53d8\u2f42\u4ef6\u7fa4\u7ec4 chown user1:group1 file1 \u6539\u53d8\u2f42\u4ef6\u7684\u6240\u6709\u2f08\u548c\u7fa4\u7ec4","title":"\u2f42\u4ef6\u548c\u2f6c\u5f55\u64cd\u4f5c"},{"location":"%E7%AC%94%E8%AE%B0/Linux/#_16","text":"\u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 cat file1 \u67e5\u770b\u2f42\u4ef6\u5185\u5bb9 cat -n file1 \u67e5\u770b\u5185\u5bb9\u5e76\u6807\u793a\u2f8f\u6570 tac file1 \u4ece\u6700\u540e\u2f00\u2f8f\u5f00\u59cb\u53cd\u770b\u2f42\u4ef6\u5185\u5bb9 more file1 more file1 less file1 \u7c7b\u4f3cmore\u547d\u4ee4\uff0c\u4f46\u5141\u8bb8\u53cd\u5411\u64cd\u4f5c head -2 file1 \u67e5\u770b\u2f42\u4ef6\u524d\u4e24\u2f8f tail -2 file1 \u67e5\u770b\u2f42\u4ef6\u540e\u4e24\u2f8f tail -f /log/msg \u5b9e\u65f6\u67e5\u770b\u6dfb\u52a0\u5230\u2f42\u4ef6\u4e2d\u7684\u5185\u5bb9 grep codesheep hello.txt \u5728\u2f42\u4ef6hello.txt\u4e2d\u67e5\u627e\u5173\u952e\u8bcdcodesheep grep ^sheep hello.txt \u5728\u2f42\u4ef6hello.txt\u4e2d\u67e5\u627e\u4ee5sheep\u5f00\u5934\u7684\u5185\u5bb9 grep [0-9] hello.txt \u9009\u62e9hello.txt\u2f42\u4ef6\u4e2d\u6240\u6709\u5305\u542b\u6570\u5b57\u7684\u2f8f sed 's/s1/s2/g' hello.txt \u5c06hello.txt\u2f42\u4ef6\u4e2d\u7684s1\u66ff\u6362\u6210s2 sed '/^$/d' hello.txt \u4ecehello.txt\u2f42\u4ef6\u4e2d\u5220\u9664\u6240\u6709\u7a7a\u2f69\u2f8f sed '/ *#/d; /^$/d' hello.txt \u4ecehello.txt\u2f42\u4ef6\u4e2d\u5220\u9664\u6240\u6709\u6ce8\u91ca\u548c\u7a7a\u2f69\u2f8f sed -e '1d' hello.txt \u4ece\u2f42\u4ef6hello.txt \u4e2d\u6392\u9664\u7b2c\u2f00\u2f8f sed -n '/s1/p' hello.txt \u67e5\u770b\u53ea\u5305\u542b\u5173\u952e\u8bcd\"s1\"\u7684\u2f8f sed -e 's/ *$//' hello.txt \u5220\u9664\u6bcf\u2f00\u2f8f\u6700\u540e\u7684\u7a7a\u2f69\u5b57\u7b26 sed -e 's/s1//g' hello.txt \u4ece\u2f42\u6863\u4e2d\u53ea\u5220\u9664\u8bcd\u6c47s1\u5e76\u4fdd\u7559\u5269\u4f59\u5168\u90e8 sed -n '1,5p;5q' hello.txt \u67e5\u770b\u4ece\u7b2c\u2f00\u2f8f\u5230\u7b2c5\u2f8f\u5185\u5bb9 sed -n '5p;5q' hello.txt \u67e5\u770b\u7b2c5\u2f8f paste file1 file2 \u5408\u5e76\u4e24\u4e2a\u2f42\u4ef6\u6216\u4e24\u680f\u7684\u5185\u5bb9 paste -d '+' file1 file2 \u5408\u5e76\u4e24\u4e2a\u2f42\u4ef6\u6216\u4e24\u680f\u7684\u5185\u5bb9\uff0c\u4e2d\u95f4\u2f64\"+\"\u533a\u5206 sort file1 file2 \u6392\u5e8f\u4e24\u4e2a\u2f42\u4ef6\u7684\u5185\u5bb9 comm -1 file1 file2 \u2f50\u8f83\u4e24\u4e2a\u2f42\u4ef6\u7684\u5185\u5bb9(\u53bb\u9664'file1'\u6240\u542b\u5185\u5bb9) comm -2 file1 file2 \u2f50\u8f83\u4e24\u4e2a\u2f42\u4ef6\u7684\u5185\u5bb9(\u53bb\u9664'file2'\u6240\u542b\u5185\u5bb9 comm -3 file1 file2 \u2f50\u8f83\u4e24\u4e2a\u2f42\u4ef6\u7684\u5185\u5bb9(\u53bb\u9664\u4e24\u2f42\u4ef6\u5171\u6709\u90e8\u5206)","title":"\u2f42\u4ef6\u67e5\u770b\u548c\u5904\u7406"},{"location":"%E7%AC%94%E8%AE%B0/Linux/#_17","text":"\u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 zip xxx.zip file \u538b\u7f29\u2f84zip\u5305 zip -r xxx.zip file1 file2 dir1 \u5c06\u591a\u4e2a\u2f42\u4ef6+\u2f6c\u5f55\u538b\u6210zip\u5305 unzip xxx.zip \u89e3\u538bzip\u5305 unzip xxx.zip -d path \u89e3\u538bzip\u5305\u5230path tar -cvf xxx.tar file \u521b\u5efa\u2fae\u538b\u7f29tar\u5305 tar -cvf xxx.tar file1 file2 dir1 \u5c06\u591a\u4e2a\u2f42\u4ef6+\u2f6c\u5f55\u6253tar\u5305 tar -tf xxx.tar \u67e5\u770btar\u5305\u7684\u5185\u5bb9 tar -xvf xxx.tar \u89e3\u538btar\u5305 tar -xvf xxx.tar -C /dir \u5c06tar\u5305\u89e3\u538b\u2f84\u6307\u5b9a\u2f6c\u5f55 tar -cvfj xxx.tar.bz2 dir \u521b\u5efabz2\u538b\u7f29\u5305 tar -jxvf xxx.tar.bz2 \u89e3\u538bbz2\u538b\u7f29\u5305 tar -cvfz xxx.tar.gz dir \u521b\u5efagzip\u538b\u7f29\u5305 tar -zxvf xxx.tar.gz \u89e3\u538bgzip\u538b\u7f29\u5305 bunzip2 xxx.bz2 \u89e3\u538bbz2\u538b\u7f29\u5305 bzip2 filename \u538b\u7f29\u2f42\u4ef6 gunzip xxx.gz \u89e3\u538bgzip\u538b\u7f29\u5305 gzip filename \u538b\u7f29\u2f42\u4ef6 gzip -9 filename \u6700\u2f24\u7a0b\u5ea6\u538b\u7f29","title":"\u6253\u5305\u548c\u89e3\u538b"},{"location":"%E7%AC%94%E8%AE%B0/Linux/#rpm","text":"\u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 rpm -qa \u67e5\u770b\u5df2\u5b89\u88c5\u7684rpm\u5305 rpm -q pkg_name \u67e5\u8be2\u67d0\u4e2arpm\u5305 rpm -q --whatprovides xxx \u663e\u793axxx\u529f\u80fd\u662f\u7531\u54ea\u4e2a\u5305\u63d0\u4f9b\u7684 rpm -q --whatrequires xxx \u663e\u793axxx\u529f\u80fd\u88ab\u54ea\u4e2a\u7a0b\u5e8f\u5305\u4f9d\u8d56\u7684 rpm -q --changelog xxx \u663e\u793axxx\u5305\u7684\u66f4\u6539\u8bb0\u5f55 rpm -qi pkg_name \u67e5\u770b\u2f00\u4e2a\u5305\u7684\u8be6\u7ec6\u4fe1\u606f rpm -qd pkg_name \u67e5\u8be2\u2f00\u4e2a\u5305\u6240\u63d0\u4f9b\u7684\u2f42\u6863 rpm -qc pkg_name \u67e5\u770b\u5df2\u5b89\u88c5rpm\u5305\u63d0\u4f9b\u7684\u914d\u7f6e\u2f42\u4ef6 rpm -ql pkg_name \u67e5\u770b\u2f00\u4e2a\u5305\u5b89\u88c5\u4e86\u54ea\u4e9b\u2f42\u4ef6 rpm -qf filename \u67e5\u770b\u67d0\u4e2a\u2f42\u4ef6\u5c5e\u4e8e\u54ea\u4e2a\u5305 rpm -qR pkg_name \u67e5\u8be2\u5305\u7684\u4f9d\u8d56\u5173\u7cfb rpm -ivh xxx.rpm \u5b89\u88c5rpm\u5305 rpm -ivh --test xxx.rpm \u6d4b\u8bd5\u5b89\u88c5rpm\u5305 rpm -ivh --nodeps xxx.rpm \u5b89\u88c5rpm\u5305\u65f6\u5ffd\u7565\u4f9d\u8d56\u5173\u7cfb rpm -e xxx \u5378\u8f7d\u7a0b\u5e8f\u5305 rpm -Fvh pkg_name \u5347\u7ea7\u786e\u5b9a\u5df2\u5b89\u88c5\u7684rpm\u5305 rpm -Uvh pkg_name \u5347\u7ea7rpm\u5305(\u82e5\u672a\u5b89\u88c5\u5219\u4f1a\u5b89\u88c5) rpm -V pkg_name RPM\u5305\u8be6\u7ec6\u4fe1\u606f\u6821\u9a8c","title":"RPM\u5305\u7ba1\u7406\u547d\u4ee4"},{"location":"%E7%AC%94%E8%AE%B0/Linux/#yum","text":"\u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 yum repolist enabled \u663e\u793a\u53ef\u2f64\u7684\u6e90\u4ed3\u5e93 yum search pkg_name \u641c\u7d22\u8f6f\u4ef6\u5305 yum install pkg_name \u4e0b\u8f7d\u5e76\u5b89\u88c5\u8f6f\u4ef6\u5305 yum install --downloadonly pkg_name \u53ea \u4e0b \u8f7d \u4e0d \u5b89 \u88c5 yum list \u663e\u793a\u6240\u6709\u7a0b\u5e8f\u5305 yum list installed \u67e5\u770b\u5f53\u524d\u7cfb\u7edf\u5df2\u5b89\u88c5\u5305 yum list updates \u67e5\u770b\u53ef\u4ee5\u66f4\u65b0\u7684\u5305\u5217\u8868 yum check-update \u67e5\u770b\u53ef\u5347\u7ea7\u7684\u8f6f\u4ef6\u5305 yum update \u66f4\u65b0\u6240\u6709\u8f6f\u4ef6\u5305 yum update pkg_name \u5347\u7ea7\u6307\u5b9a\u8f6f\u4ef6\u5305 yum deplist pkg_name \u5217\u51fa\u8f6f\u4ef6\u5305\u4f9d\u8d56\u5173\u7cfb yum remove pkg_name \u5220\u9664\u8f6f\u4ef6\u5305 yum clean all \u6e05\u9664\u7f13\u5b58 yum clean packages \u6e05\u9664\u7f13\u5b58\u7684\u8f6f\u4ef6\u5305 yum clean headers \u6e05\u9664\u7f13\u5b58\u7684header","title":"YUM\u5305\u7ba1\u7406\u547d\u4ee4"},{"location":"%E7%AC%94%E8%AE%B0/Linux/#dpkg","text":"\u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 dpkg -c xxx.deb \u5217\u51fadeb\u5305\u7684\u5185\u5bb9 dpkg -i xxx.deb \u5b89\u88c5/\u66f4\u65b0deb\u5305 dpkg -r pkg_name \u79fb\u9664deb\u5305 dpkg -P pkg_name \u79fb\u9664deb\u5305(\u4e0d\u4fdd\u7559\u914d\u7f6e) dpkg -l \u67e5\u770b\u7cfb\u7edf\u4e2d\u5df2\u5b89\u88c5deb\u5305 dpkg -l pkg_name \u663e\u793a\u5305\u7684\u2f24\u81f4\u4fe1\u606f dpkg -L pkg_name \u67e5\u770bdeb\u5305\u5b89\u88c5\u7684\u2f42\u4ef6 dpkg -s pkg_name \u67e5\u770b\u5305\u7684\u8be6\u7ec6\u4fe1\u606f dpkg \u2013unpack xxx.deb \u89e3\u5f00deb\u5305\u7684\u5185\u5bb9","title":"DPKG\u5305\u7ba1\u7406\u547d\u4ee4"},{"location":"%E7%AC%94%E8%AE%B0/Linux/#apt_1","text":"\u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 apt-cache search pkg_name \u641c\u7d22\u7a0b\u5e8f\u5305 apt-cache show pkg_name \u83b7\u53d6\u5305\u7684\u6982\u89c8\u4fe1\u606f apt-get install pkg_name \u5b89\u88c5/\u5347\u7ea7\u8f6f\u4ef6\u5305 apt-get purge pkg_name \u5378\u8f7d\u8f6f\u4ef6\uff08\u5305\u62ec\u914d\u7f6e\uff09 apt-get remove pkg_name \u5378\u8f7d\u8f6f\u4ef6\uff08\u4e0d\u5305\u62ec\u914d\u7f6e\uff09 apt-get update \u66f4\u65b0\u5305\u7d22\u5f15\u4fe1\u606f apt-get upgrade \u66f4\u65b0\u5df2\u5b89\u88c5\u8f6f\u4ef6\u5305 apt-get clean \u6e05\u7406\u7f13\u5b58 \u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 apt install package1 \u5b89\u88c5 apt list --installed \u5217\u51fa\u6240\u6709\u5b89\u88c5\u4fe1\u606f apt list package1 \u5217\u51fa\u6307\u5b9a\u5305\u4fe1\u606f apt remove package1 \u5378\u8f7d apt update \u66f4\u65b0\u5305\u7d22\u5f15\u4fe1\u606f","title":"APT\u8f6f\u4ef6\u2f2f\u5177"},{"location":"%E7%AC%94%E8%AE%B0/MakeFile/","text":"seisman/how-to-write-makefile: \u8ddf\u6211\u4e00\u8d77\u5199Makefile\u91cd\u5236\u7248 (github.com)","title":"MakeFile"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","text":"\u64cd\u4f5c\u7cfb\u7edf \u00b6 \u738b\u9053\u8ba1\u7b97\u673a\u8003\u7814 \u6570\u636e\u7ed3\u6784_\u54d4\u54e9\u54d4\u54e9_bilibili 0. \u603b\u7ed3 \u00b6 0.2 \u8fdb\u7a0b \u4e3a\u4ec0\u4e48\u8981\u5f15\u5165\u8fdb\u7a0b\uff1a\u5728\u591a\u9053\u7a0b\u5e8f\u7684\u80cc\u666f\u4e0b\u5982\u679c\u53ea\u6709\u7a0b\u5e8f\u65e0\u6cd5\u5f88\u597d\u7684\u5b9e\u73b0\u5e76\u53d1\uff0c\u56e0\u4e3a\u7a0b\u5e8f\u662f\u9759\u6001\u7684\u6982\u5ff5\uff0c\u65e0\u6cd5\u63cf\u8ff0\u7a0b\u5e8f\u5728\u5185\u5b58\u4e2d\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u5f15\u5165\u8fdb\u7a0b\u3002 \u4ec0\u4e48\u662f\u8fdb\u7a0b\uff1f\u8fdb\u7a0b\u7684\u7ec4\u6210\uff1a\u8fdb\u7a0b\u662f\u7a0b\u5e8f\u4e00\u6b21\u6267\u884c\u7684\u52a8\u6001\u8fc7\u7a0b\uff1b\u8fdb\u7a0b\u5b9e\u4f53\u7531\u7a0b\u5e8f\u6bb5\uff0c\u6570\u636e\u6bb5\uff0cPCB\u7ec4\u6210\uff1b \u7ebf\u7a0b\u7684\u6982\u5ff5\uff1a... \u8fdb\u7a0b\u4e2d\u4f7f\u7528\u7279\u6743\u6307\u4ee4\u8981\u628a PSW \u7684\u4e00\u4e2a\u72b6\u6001\u4f4d\u6539\u6210 \u6838\u5fc3\u6001\uff0c\u800c\u7ebf\u7a0b\u7684\u7528\u6237\u7ea7\u7ebf\u7a0b\u548c\u6838\u5fc3\u7ea7\u7ebf\u7a0b\u5206\u522b\u5bf9\u5e94\u7528\u6237\u7a7a\u95f4\u548c\u6838\u5fc3\u7a7a\u95f4\uff0c\u662f\u5bf9\u5185\u5b58\u7684\u5212\u5206 \u76f8\u5173\u94fe\u63a51 \u76f8\u5173\u94fe\u63a52 \u4e3a\u4ec0\u4e48\u8981\u5904\u7406\u673a\u8c03\u5ea6\uff1a\u589e\u52a0 CPU \u7684\u5229\u7528\u7387\uff0c\u4e0d\u540c\u7684\u8c03\u5ea6\u7b97\u6cd5\u53ef\u4ee5\u6ee1\u8db3\u4e0d\u540c\u7684\u8981\u6c42 \u666e\u901a\u7684\u4fe1\u53f7\u91cf\u673a\u5236\uff08\u7528 while\uff09\u662f\u4e0d\u6ee1\u8db3\u8ba9\u6743\u7b49\u5f85\u7684\uff0c\u7b49\u5f85\u8d44\u6e90\u7684\u8fdb\u7a0b\u4efb\u7136\u4f1a\u5360\u7528 CPU \u8d44\u6e90\uff1b\u7ba1\u7a0b\u4e2d x.wait\uff1a\u5c06\u6b63\u5728\u8bbf\u95ee\u7ba1\u7a0b\u7684\u8fdb\u7a0b\u653e\u5230 x \u7684\u7b49\u5f85\u961f\u5217\u4e0a\uff0c\u5e76\u91ca\u653e\u7ba1\u7a0b\uff1bx.signal\uff1a\u4ece\u963b\u585e\u961f\u5217\u4e2d\u5524\u9192\u56e0 x \u88ab\u963b\u585e\u7684\u8fdb\u7a0b\uff1b\u8fd9\u4e2a\u961f\u5217\u662f\u5728\u7ba1\u7a0b\u4e2d\u7684\uff0c\u4e0d\u540c\u7684 x \u5bf9\u5e94\u4e0d\u540c\u7684\u961f\u5217 \u6b7b\u9501\uff1a\u5404\u4e2a\u8fdb\u7a0b\u4e92\u76f8\u7b49\u5f85\u5bf9\u65b9\u624b\u91cc\u7684\u8d44\u6e90\uff1b\u53d1\u751f\u6b7b\u9501\u7684\u8fdb\u7a0b\u4e00\u5b9a\u5904\u4e8e\u963b\u585e\u6001\uff1b\u81f3\u5c11\u6709 2 \u4e2a\u6216 2 \u4e2a\u4ee5\u4e0a\u7684\u8fdb\u7a0b\u540c\u65f6\u6b7b\u9501 \u6b7b\u9501\u72b6\u6001\u4e00\u5b9a\u662f\u4e0d\u5b89\u5168\u7684\uff1b\u8d44\u6e90\u5206\u914d\u56fe\u6ca1\u6709\u73af\u8def\u4e00\u5b9a\u4e0d\u4f1a\u51fa\u73b0\u6b7b\u9501 0.3 \u5185\u5b58\u7ba1\u7406 \u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u81ea\u5df1\u7684\u9875\u8868\uff0c\u9875\u8868\u5730\u5740\u4e00\u5f00\u59cb\u653e\u5728 PCB \u4e2d\uff0c\u88ab\u8c03\u5ea6\u65f6\u653e\u5230 PTR \u4e2d 1. \u64cd\u4f5c\u7cfb\u7edf \u00b6 1.1 \u64cd\u4f5c\u7cfb\u7edf\u7684\u6982\u5ff5 \u00b6 \u88f8\u673a \u64cd\u4f5c\u7cfb\u7edf \u8f6f\u4ef6 \u64cd\u4f5c\u7cfb\u7edf\u7684\u5b9a\u4e49\uff1a\uff08\u7b80\u5355\u5b9a\u4e49\uff09\u63a7\u5236\u548c\u7ba1\u7406\u6574\u4e2a\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u786c\u4ef6\u548c\u8f6f\u4ef6\u8d44\u6e90\uff0c\u5e76\u4e3a\u7528\u6237\u548c\u5176\u4ed6\u8f6f\u4ef6\u63d0\u4f9b\u63a5\u53e3\u4e0e\u73af\u5883\u7684\u7a0b\u5e8f\u96c6\u5408 1.2 \u64cd\u4f5c\u7cfb\u7edf\u7684\u529f\u80fd\u548c\u76ee\u6807 \u00b6 \u63d0\u4f9b\u7684\u529f\u80fd\uff1a \u4f5c\u4e3a\u7cfb\u7edf\u8d44\u6e90\u7684\u7ba1\u7406\u8005 \u5904\u7406\u673a\u7ba1\u7406 \u5b58\u50a8\u5668\u7ba1\u7406 \u6587\u4ef6\u7ba1\u7406 \u8bbe\u5907\u7ba1\u7406 \u4f5c\u4e3a\u7528\u6237\u548c\u8ba1\u7b97\u673a\u786c\u4ef6\u4e4b\u95f4\u7684\u63a5\u53e3 \u547d\u4ee4\u63a5\u53e3\uff1a\u8054\u673a\u547d\u4ee4\u63a5\u53e3/\u4ea4\u4e92\u5f0f\u63a5\u53e3\uff0c\u8131\u673a\u547d\u4ee4\u63a5\u53e3 \u7a0b\u5e8f\u63a5\u53e3\uff1a\u7cfb\u7edf\u8c03\u7528\uff08\u7cfb\u7edf\u8c03\u7528\u7684\u76ee\u7684\u662f\u8bf7\u6c42\u7cfb\u7edf\u670d\u52a1\uff0c\u53ea\u80fd\u901a\u8fc7\u7528\u6237\u7a0b\u5e8f\u95f4\u63a5\u4f7f\u7528\uff0c\u662f\u64cd\u4f5c\u7cfb\u7edf\u4e3a\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u5185\u6838\u529f\u80fd\u63d0\u4f9b\u7684\u63a5\u53e3\uff09\uff0cGUI\u56fe\u5f62\u7528\u6237\u754c\u9762\u662f\u5f53\u524d\u6700\u6d41\u884c\u7684 \u4f5c\u4e3a\u6700\u63a5\u8fd1\u786c\u4ef6\u7684\u5c42\u6b21\uff0c\u5b9e\u73b0\u5bf9\u786c\u4ef6\u673a\u5668\u7684\u6269\u5c55 1.3 \u64cd\u4f5c\u7cfb\u7edf\u7684\u7279\u5f81 \u00b6 \u5e76\u53d1: \u5b8f\u89c2\u540c\u65f6\u53d1\u751f \u5171\u4eab: \u8d44\u6e90\u5171\u4eab\uff1a\u4e92\u65a5\u5171\u4eab\uff0c\u540c\u65f6\u5171\u4eab \u865a\u62df: \u6307\u628a\u4e00\u4e2a\u7269\u7406\u5b9e\u4f53\u53d8\u4e3a\u903b\u8f91\u4e0a\u7684\u5bf9\u5e94\u7269\uff0c\u65f6\u5206\u590d\u7528\u6280\u672f\uff08\u865a\u62df\u5904\u7406\u5668\uff09\uff0c\u7a7a\u5206\u590d\u7528\u6280\u672f\uff08\u865a\u62df\u5b58\u50a8\u5668\uff09 \u5f02\u6b65: \u591a\u9053\u73af\u5883\u4e0b\u5141\u8bb8\u591a\u4e2a\u7a0b\u5e8f\u5e76\u53d1\u6267\u884c\uff0c\u8d70\u8d70\u505c\u505c\uff0c\u4ee5\u4e0d\u53ef\u9884\u77e5\u7684\u901f\u5ea6\u524d\u8fdb \u5e76\u53d1\u5171\u4eab\u4e92\u4e3a\u6761\u4ef6 \u5e76\u53d1\u548c\u5171\u4eab\u662f\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e24\u4e2a\u6700\u57fa\u672c\u7684\u7279\u5f81 1.4 \u64cd\u4f5c\u7cfb\u7edf\u7684\u53d1\u5c55\u548c\u5206\u7c7b \u00b6 \u624b\u5de5\u64cd\u4f5c\u9636\u6bb5\uff1acpu\u5229\u7528\u7387\u4f4e\uff0c\u7528\u6237\u72ec\u5360\u5168\u673a \u6279\u5904\u7406\u9636\u6bb5\uff1a\u6ca1\u6709\u4ea4\u4e92 \u5355\u9053\u6279\u5904\u7406: \u8d44\u6e90\u5229\u7528\u7387\u63d0\u5347\uff0c\u6709\u5f88\u591a\u4e8b\u4ef6\u7b49\u5f85I/O \u591a\u9053\u6279\u5904\u7406: \u591a\u9053\u7a0b\u5e8f\u5e76\u53d1\u6267\u884c\uff0c\u5171\u4eab\u8ba1\u7b97\u673a\u8d44\u6e90;\u6ca1\u6709\u4eba\u673a\u4ea4\u4e92\uff0c\u7528\u6237\u54cd\u5e94\u65f6\u95f4\u957f \u5206\u65f6\u64cd\u4f5c\u7cfb\u7edf: \u7279\u70b9\uff1a\u540c\u65f6\u6027\uff0c\u4ea4\u4e92\u6027\uff0c\u72ec\u7acb\u6027\uff0c\u53ca\u65f6\u6027\uff0c\u7f3a\u70b9\uff1a\u4e0d\u80fd\u4f18\u5148\u5904\u7406\u4e00\u4e9b\u7d27\u6025\u4efb\u52a1 \u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf: \u80fd\u591f\u4f18\u5148\u54cd\u5e94\u4e00\u4e9b\u7d27\u6025\u4efb\u52a1:\u786c\u5b9e\u65f6\uff0c\u8f6f\u5b9e\u65f6 \u7f51\u7edc\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5206\u5e03\u5f0f\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4e2a\u4eba\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf 1.5 OS \u8fd0\u884c\u673a\u5236\u548c\u4f53\u7cfb\u7ed3\u6784 \u00b6 \u6307\u4ee4\uff1a\u7279\u6743\u6307\u4ee4\uff0c\u975e\u7279\u6743\u6307\u4ee4 \u4e24\u79cd\u5904\u7406\u5668\u72b6\u6001\uff1a\u7528\u6237\u6001\uff08\u76ee\u6001\uff09\uff0c\u6838\u5fc3\u6001(\u7ba1\u6001) \u4e24\u79cd\u7a0b\u5e8f\uff1a\u5185\u6838\u7a0b\u5e8f\uff0c\u5e94\u7528\u7a0b\u5e8f \u64cd\u4f5c\u7cfb\u7edf\u7684\u5185\u6838 \u65f6\u949f\u7ba1\u7406 \u4e2d\u65ad\u5904\u7406 \u539f\u8bed \u5bf9\u7cfb\u7edf\u8d44\u6e90\u8fdb\u884c\u7ba1\u7406\u7684\u529f\u80fd\uff1a\u8fdb\u7a0b\uff0c\u5b58\u50a8\u5668\uff0c\u8bbe\u5907\u7ba1\u7406 1.6 \u4e2d\u65ad\u548c\u5f02\u5e38 \u00b6 \u4e2d\u65ad\u7684\u6982\u5ff5: \u53d1\u751f\u4e2d\u65ad\u65f6\uff0cCPU\u8fdb\u5165\u6838\u5fc3\u6001\uff1b\u64cd\u4f5c\u7cfb\u7edf\u5bf9\u4e2d\u65ad\u8fdb\u884c\u5904\u7406 \u7528\u6237\u6001 \u5230 \u6838\u5fc3\u6001 \u662f\u901a\u8fc7\u4e2d\u65ad\u5b9e\u73b0\u7684 \u6838\u5fc3\u6001 \u5230 \u7528\u6237\u6001 \u662f\u901a\u8fc7\u6267\u884c\u4e00\u4e2a\u7279\u6743\u6307\u4ee4\uff0c\u6539\u53d8\u7a0b\u5e8f\u72b6\u6001\u5b57 \u4e2d\u65ad\u7684\u5206\u7c7b\uff1a \u5185\u4e2d\u65ad\uff1a\u5f02\u5e38\u3001\u4f8b\u5916\u3001\u9677\u5165,\u4e0e\u5f53\u524d\u6267\u884c\u7684\u6307\u4ee4\u6709\u5173 \u8f6f\u4ef6\u4e2d\u65ad\uff1a\u6545\u969c\uff0c\u81ea\u9677 \u786c\u4ef6\u4e2d\u65ad\uff1a\u7ec8\u6b62 \u5916\u4e2d\u65ad\uff1a\u4e2d\u65ad, \u6765\u81eaCPU\u7684\u5916\u90e8 \u5916\u4e2d\u65ad\u7684\u5904\u7406\u8fc7\u7a0b: \u6267\u884c\u5b8c\u6bcf\u4e2a\u6307\u4ee4\u540e\uff0c\u68c0\u67e5\u662f\u5426\u6709\u5916\u90e8\u4e2d\u65ad \u5982\u679c\u6709\uff0c\u4fdd\u62a4\u88ab\u4e2d\u65ad\u8fdb\u7a0b\u7684CPU\u73af\u5883 \u8fdb\u884c\u4e2d\u65ad\u5904\u7406 \u6062\u590d\u539f\u8fdb\u7a0b\u7684CPU\u73af\u5883\u5e76\u9000\u51fa\u4e2d\u65ad\uff0c\u7ee7\u7eed\u6267\u884c 1.7 \u7cfb\u7edf\u8c03\u7528 \u00b6 \u4ec0\u4e48\u662f\u7cfb\u7edf\u8c03\u7528\uff0c\u6709\u4ec0\u4e48\u4f5c\u7528\uff1f \u7528\u6237\u901a\u8fc7\u8f6f\u4ef6\u95f4\u63a5\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\uff0c\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u6765\u7ba1\u7406\u8d44\u6e90 \u7cfb\u7edf\u8c03\u7528\u5206\u7c7b\uff1a - \u8bbe\u5907\u7ba1\u7406 - \u6587\u4ef6\u7ba1\u7406 - \u8fdb\u7a0b\u7ba1\u7406 - \u8fdb\u7a0b\u901a\u4fe1 - \u5185\u5b58\u7ba1\u7406 \u7cfb\u7edf\u8c03\u7528\u548c\u5e93\u51fd\u6570\u7684\u533a\u522b\uff1a\u5e93\u51fd\u6570\u662f\u5bf9\u7cfb\u7edf\u8c03\u7528\u7684\u5c01\u88c5 \u7cfb\u7edf\u8c03\u7528\u5728\u6838\u5fc3\u6001\u6267\u884c \u8bbf\u7ba1\u6307\u4ee4\u5f15\u8d77\u8bbf\u7ba1\u4e2d\u65ad\uff0c\u64cd\u4f5c\u7cfb\u7edf\u8f6c\u4e3a\u6838\u5fc3\u6001 \u7cfb\u7edf\u8c03\u7528\u80cc\u540e\u7684\u8fc7\u7a0b\uff1a\u4f20\u9012\u7cfb\u7edf\u8c03\u7528\u53c2\u6570->\u6267\u884c\u9677\u5165\u6307\u4ee4\uff08\u7528\u6237\u6001\uff09->\u6267\u884c\u7cfb\u7edf\u8c03\u7528\u76f8\u5e94\u670d\u52a1\u7a0b\u5e8f\uff08\u6838\u5fc3\u6001\uff09->\u8fd4\u56de\u7528\u6237\u7a0b\u5e8f \u9677\u5165\u6307\u4ee4\u53ea\u80fd\u5728\u7528\u6237\u6001\u4e0b\u6267\u884c 1.8 \u64cd\u4f5c\u7cfb\u7edf\u7ed3\u6784\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5f15\u5bfc\uff0c\u865a\u62df\u673a \u00b6 \u7ed3\u6784\uff1a \u5206\u5c42\u6cd5\uff1a\u5355\u5411\u4f9d\u8d56\uff0c\u4f18\uff1a\u4fbf\u4e8e\u8c03\u8bd5\u548c\u9a8c\u8bc1\uff0c\u52a3\uff1a\u6548\u7387\u4f4e \u6a21\u5757\u5316\uff1a \u5b8f\u5185\u6838\uff1a \u5fae\u5185\u6838\uff1a\u53ea\u4fdd\u7559\u6700\u57fa\u672c\u7684\u529f\u80fd \u5fae\u5185\u6838\u7684\u57fa\u672c\u529f\u80fd\uff1a\u8fdb\u7a0b\u7ebf\u7a0b\u7ba1\u7406\uff0c\u4f4e\u7ea7\u5b58\u50a8\u5668\u7ba1\u7406\uff08\u5982\u5730\u5740\u53d8\u6362\u673a\u6784\uff09\uff0c\u4e2d\u65ad\u548c\u9677\u5165\u5904\u7406 \u7279\u70b9\uff1a\u6269\u5c55\u6027\u548c\u7075\u6d3b\u6027\uff0c\u53ef\u9760\u6027\u548c\u5b89\u5168\u6027\uff0c\u53ef\u79fb\u690d\u6027\uff0c\u5206\u5e03\u5f0f\u8ba1\u7b97 \u5f15\u5bfc\uff1a \u6fc0\u6d3bCPU\uff0c\u8bfb\u53d6ROM\u4e2d\u7684boot\u7a0b\u5e8f\uff0c\u5c06\u6307\u4ee4\u5bc4\u5b58\u5668\u7f6e\u4e3aBIOS\u7684\u7b2c\u4e00\u6761\u6307\u4ee4 \u786c\u4ef6\u81ea\u68c0 \u52a0\u8f7d\u5e26\u6709\u64cd\u4f5c\u7cfb\u7edf\u7684\u786c\u76d8\uff0c\uff08\u662f\u52a0\u8f7d\u786c\u76d8 \u52a0\u8f7dMBR \u626b\u63cf\u786c\u76d8\u5206\u533a\u8868\uff0cMBR\u5305\u542b\u786c\u76d8\u5206\u533a\u8868\uff0c\u786c\u76d8\u5206\u533a\u533a\u5206\u4e3a\u6d3b\u52a8\u5206\u533a\u548c\u975e\u6d3b\u52a8\u5206\u533a \u52a0\u8f7d\u5206\u533a\u5f15\u5bfc\u8bb0\u5f55PBR\uff0c\u5373\u6d3b\u52a8\u6247\u533a\u7684\u7b2c\u4e00\u4e2a\u6247\u533a \u52a0\u8f7d\u542f\u52a8\u7ba1\u7406\u5668 \u52a0\u8f7d\u64cd\u4f5c\u7cfb\u7edf \u865a\u62df\u673a\uff1a \u7b2c\u4e00\u7c7b\u865a\u62df\u673a\u7ba1\u7406\u7a0b\u5e8f \u7b2c\u4e8c\u7c7b\u865a\u62df\u673a\u7ba1\u7406\u7a0b\u5e8f 2 \u8fdb\u7a0b \u00b6 2.1 \u8fdb\u7a0b \u00b6 2.1.1 \u8fdb\u7a0b\u6982\u8ff0 \u00b6 \u5b9a\u4e49\uff1a\u7a0b\u5e8f\u6bb5\u3001\u6570\u636e\u6bb5\u3001PCB\u4e09\u90e8\u5206\u7ec4\u6210\u4e86\u8fdb\u7a0b\u5b9e\u4f53 \uff1b\u8fdb\u7a0b\u662f\u7a0b\u5e8f\u7684\u4e00\u6b21\u6267\u884c\uff0c\u662f\u8fdb\u884c\u8d44\u6e90\u5206\u914d\u548c\u8c03\u5ea6\u7684\u57fa\u672c\u5355\u4f4d \u8fdb\u7a0b\u5b9e\u4f53\u662f\u9759\u6001\u7684\uff0c\u8fdb\u7a0b\u662f\u52a8\u6001\u7684 PCB\uff1a - \u8fdb\u7a0b\u63cf\u8ff0\u4fe1\u606f - \u8fdb\u7a0b\u63a7\u5236\u548c\u7ba1\u7406\u4fe1\u606f - \u8d44\u6e90\u5206\u914d\u6e05\u5355 - \u5904\u7406\u673a\u76f8\u5173\u4fe1\u606f \u8fdb\u7a0b\u7684\u7ec4\u7ec7\uff1a - \u94fe\u63a5\u65b9\u5f0f\uff1a\u6267\u884c\u6307\u9488\uff0c\u5c31\u7eea\u961f\u5217\u6307\u9488\uff0c\u963b\u585e\u961f\u5217\u6307\u9488 - \u7d22\u5f15\u65b9\u5f0f\uff1a\u6267\u884c\u6307\u9488\uff0c\u5c31\u7eea\u8868\u6307\u9488\uff0c\u963b\u585e\u8868\u6307\u9488 \u8fdb\u7a0b\u7684\u7279\u5f81 - \u52a8\u6001\u6027 - \u5e76\u53d1\u6027 - \u72ec\u7acb\u6027 - \u5f02\u6b65\u6027 2.1.2 \u8fdb\u7a0b\u7684\u72b6\u6001\u548c\u8f6c\u6362 \u00b6 \u4e09\u6001\uff1a\u8fd0\u884c\u6001\uff0c\u5c31\u7eea\u6001\uff0c\u963b\u585e\u6001 \u4e94\u6001\uff1a\u521b\u5efa\u6001\uff0c\u7ec8\u6b62\u6001 \u8fdb\u7a0b\u7684\u8f6c\u6362\uff1a 2.1.3 \u8fdb\u7a0b\u63a7\u5236 \u00b6 \u5b9e\u73b0\u5bf9\u8fdb\u7a0b\u72b6\u6001\u7684\u8f6c\u6362 \u7528\u539f\u8bed\u5b9e\u73b0\u8fdb\u7a0b\u63a7\u5236\uff1a\u901a\u8fc7\u5173 \u4e2d\u65ad\u548c\u5f00\u4e2d\u65ad\u5b9e\u73b0\u539f\u8bed \u5173\u4e2d\u65ad\u548c\u5f00\u4e2d\u65ad\u53ea\u53ef\u4ee5\u5728\u6838\u5fc3\u6001\u4e0b\u9762\u6267\u884c \u8fdb\u7a0b\u63a7\u5236\u76f8\u5173\u7684\u539f\u8bed\u505a\u76843\u7c7b\u4e8b\u60c5\uff1a - \u66f4\u65b0PCB\u4fe1\u606f - \u5c06PCB\u63d2\u5165\u5408\u9002\u961f\u5217 - \u5206\u914d\u3001\u56de\u6536\u8d44\u6e90 \u8fdb\u7a0b\u7684\u521b\u5efa\uff1a\u521b\u5efa\u539f\u8bed - \u7533\u8bf7\u7a7a\u767dPCB - \u4e3a\u65b0\u8fdb\u7a0b\u5206\u914d\u6240\u9700\u8d44\u6e90 - \u521d\u59cb\u5316PCB - \u5c06 PCB\u63d2\u5165\u5c31\u7eea\u961f\u5217 \u8fdb\u7a0b\u7ec8\u6b62\uff1a\u64a4\u9500\u539f\u8bed - \u4ecePCB\u96c6\u5408\u4e2d\u627e\u5230\u7ec8\u6b62\u8fdb\u7a0b\u7684PCB - \u82e5\u7a0b\u5e8f\u6b63\u5728\u8fd0\u884c\uff0c\u7acb\u5373\u5265\u593aCPU\uff0c\u5c06CPU\u5206\u914d\u7ed9\u5176\u4ed6\u8fdb\u7a0b - \u7ec8\u6b62\u5176\u6240\u6709\u5b50\u8fdb\u7a0b - \u5c06\u8be5\u8fdb\u7a0b\u62e5\u6709\u7684\u8d44\u6e90\u5f52\u8fd8\u7ed9\u7236\u8fdb\u7a0b\u6216\u64cd\u4f5c\u7cfb\u7edf - \u5220\u9664 PCB \u8fdb\u7a0b\u7684\u963b\u585e\u548c\u5524\u9192\uff1a\u963b\u585e\u539f\u8bed\uff0c\u5524\u9192\u539f\u8bed \u8fdb\u7a0b\u7684\u5207\u6362\uff1a\u5207\u6362\u539f\u8bed 2.1.4 \u8fdb\u7a0b\u901a\u4fe1 \u00b6 PV\u64cd\u4f5c\u65f6\u4f4e\u7ea7\u901a\u4fe1\uff0c\u9ad8\u7ea7\u901a\u4fe1\u6307\u4ee5\u9ad8\u6548\u7387\u4f20\u9012\u5927\u91cf\u6570\u636e \u5171\u4eab\u5b58\u50a8\uff1a\u5bf9\u5171\u4eab\u7a7a\u95f4\u7684\u8bbf\u95ee\u662f\u4e92\u65a5\u7684 \u57fa\u4e8e\u6570\u636e\u7ed3\u6784\u7684\u5171\u4eab\uff1a\u4f4e\u7ea7\u901a\u4fe1 \u57fa\u4e8e\u5b58\u50a8\u533a\u7684\u5171\u4eab\uff1a\u9ad8\u7ea7\u901a\u4fe1 \u7ba1\u9053\u901a\u4fe1: \u4e00\u4e2a\u7ba1\u9053\u53ea\u80fd\u91c7\u7528\u534a\u53cc\u5de5\u901a\u4fe1,\u5404\u8fdb\u7a0b\u4e92\u65a5\u7684\u8bbf\u95ee\u7ba1\u9053\uff1b\u7ba1\u9053\u5199\u6ee1\u624d\u5141\u8bb8\u8bfb\uff0c\u8bfb\u5b8c\u624d\u5141\u8bb8\u5199 \u6d88\u606f\u4f20\u9012\uff1a\u76f4\u63a5\u901a\u4fe1\u65b9\u5f0f\uff0c\u95f4\u63a5\u901a\u4fe1\u65b9\u5f0f 2.1.5 \u7ebf\u7a0b \u00b6 \u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u540c\u6837\u6709\u201c\u540c\u65f6\u201c\u505a\u5f88\u591a\u4e8b\u60c5 \u7ebf\u7a0b\u662f\u57fa\u672c\u7684CPU\u6267\u884c\u5355\u5143 \u5f15\u5165\u7ebf\u7a0b\u540e\uff0c\u8fdb\u7a0b\u662f\u8d44\u6e90\u5206\u914d\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u7ebf\u7a0b\u662f\u8c03\u5ea6\u7684\u57fa\u672c\u5355\u4f4d TCB \u7ebf\u7a0b\u57fa\u672c\u4e0d\u62e5\u6709\u7cfb\u7edf\u8d44\u6e90\uff0c\u540c\u4e00\u8fdb\u7a0b\u7684\u7ebf\u7a0b\u5171\u4eab\u8fdb\u7a0b\u8d44\u6e90 \u540c\u4e00\u8fdb\u7a0b\u7684\u7ebf\u7a0b\u5207\u6362\u4e0d\u4f1a\u5f15\u8d77\u8fdb\u7a0b\u5207\u6362\uff0c\u5207\u6362\u7ebf\u7a0b\u7684\u5f00\u9500\u5c0f \u7ebf\u7a0b\u7684\u5b9e\u73b0\u65b9\u5f0f\uff1a - \u7528\u6237\u7ea7\u7ebf\u7a0b\uff1a\u963b\u585e\u4f1a\u5bfc\u81f4\u6574\u4e2a\u8fdb\u7a0b\u7684\u963b\u585e\uff1b\u5207\u6362\u4ee3\u4ef7\u5c0f\uff1b\u5141\u8bb8\u6bcf\u4e2a\u8fdb\u7a0b\u81ea\u5b9a\u4e49\u8c03\u5ea6\u7b97\u6cd5 - \u5185\u6838\u7ea7\u7ebf\u7a0b\uff1a\u540c\u4e00\u8fdb\u7a0b\u7684\u7ebf\u7a0b\u5207\u6362\u9700\u8981\u4ece\u7528\u6237\u6001\u8f6c\u5230\u6838\u5fc3\u6001\uff0c\u5f00\u9500\u5927\uff1b\u5185\u6838\u7ebf\u7a0b\u963b\u585e\u65f6\u4e0d\u4f1a\u5bfc\u81f4\u6574\u4e2a\u8fdb\u7a0b\u963b\u585e\uff1b - \u7ec4\u5408\u65b9\u5f0f \u591a\u7ebf\u7a0b\u6a21\u578b\uff1a - \u591a\u5bf9\u4e00\uff1a\u591a\u4e2a\u7528\u6237\u7ea7\u7ebf\u7a0b\u5bf9\u4e00\u4e2a\u5185\u6838\u7ea7\u7ebf\u7a0b\uff0c\u7f3a\u70b9\u662f\u5e76\u53d1\u5ea6\u4e0d\u9ad8 - \u4e00\u5bf9\u4e00\uff1a\u7f3a\u70b9\u662f\u5360\u7528\u5185\u6838\u7ea7\u7ebf\u7a0b\u591a - \u591a\u5bf9\u591a\uff1a 2.2 \u5904\u7406\u673a \u00b6 2.2.3 \u5904\u7406\u673a\u8c03\u5ea6\u7684\u6982\u5ff5 \u00b6 \u8c03\u5ea6\u7684\u4e09\u4e2a\u5c42\u6b21\uff1a - \u9ad8\u7ea7\u8c03\u5ea6\uff1a\u4f5c\u4e1a\u8c03\u5ea6 - \u4e2d\u7ea7\u8c03\u5ea6\uff1a\u6302\u8d77 - \u4f4e\u7ea7\u8c03\u5ea6\uff1a\u8fdb\u7a0b\u8c03\u5ea6,\u662f\u64cd\u4f5c\u7cfb\u7edf\u6700\u57fa\u672c\u7684\u4e00\u79cd\u8c03\u5ea6 \u4e03\u6001\u6a21\u578b\uff1a 2.2.3 \u8fdb\u7a0b\u8c03\u5ea6\u7684\u8fc7\u7a0b\uff0c\u5b9e\u9645\uff0c\u65b9\u5f0f \u00b6 \u8fdb\u7a0b\u8c03\u5ea6\u7684\u65f6\u673a\uff1a\u5f53\u524d\u8fd0\u884c\u8fdb\u7a0b\u4e3b\u52a8\u6216\u88ab\u52a8\u653e\u5f03\u5904\u7406\u673a \u4e0d\u80fd\u8fdb\u884c\u8fdb\u7a0b\u8c03\u5ea6\u4e0e\u5207\u6362\u7684\u60c5\u51b5\uff1a - \u5904\u7406\u4e2d\u65ad\u8fc7\u7a0b\u4e2d - \u8fdb\u7a0b\u5728\u64cd\u4f5c\u7cfb\u7edf\u7684\u5185\u6838\u7a0b\u5e8f\u4e34\u754c\u533a - \u539f\u5b50\u64cd\u4f5c\u8fc7\u7a0b\u4e2d \u8fdb\u7a0b\u5728\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u7a0b\u5e8f\u4e34\u754c\u533a\u4e2d\u4e0d\u80fd\u8fdb\u884c\u8c03\u5ea6\u548c\u5207\u6362 \u6b63\u786e \u8fdb\u7a0b\u5904\u4e8e\u4e34\u754c\u533a\u65f6\u4e0d\u80fd\u8fdb\u884c\u5904\u7406\u673a\u8c03\u5ea6 \u9519\u8bef \u4e34\u754c\u8d44\u6e90 \u4e34\u754c\u533a\uff1a\u8bbf\u95ee\u4e34\u754c\u8d44\u6e90\u7684\u90a3\u6bb5\u4ee3\u7801 \u8fdb\u7a0b\u8c03\u5ea6\u7684\u65b9\u5f0f\uff1a - \u975e\u5265\u593a\u5f0f\uff0c\u975e\u62a2\u5360\u65b9\u5f0f - \u5265\u593a\u5f0f\uff0c\u62a2\u5360\u5f0f \u8fdb\u7a0b\u5207\u6362\u7684\u8fc7\u7a0b\uff1a - \u5bf9\u539f\u6765\u8fd0\u884c\u7684\u8fdb\u7a0b\u7684\u5404\u79cd\u6570\u636e\u7684\u4fdd\u62a4 - \u5bf9\u65b0\u7684\u8fdb\u7a0b\u5404\u79cd\u6570\u636e\u7684\u6062\u590d 2.2.4 \u8c03\u5ea6\u7b97\u6cd5\u7684\u8bc4\u4ef7\u6307\u6807 \u00b6 CPU \u5229\u7528\u7387\uff1a \u5fd9\u7387\u65f6\u95f4 / \u603b\u65f6\u95f4 \u7cfb\u7edf\u541e\u5410\u91cf\uff1a\u603b\u5171\u5b8c\u6210\u4e86\u591a\u5c11\u9053\u4f5c\u4e1a / \u603b\u5171\u82b1\u4e86\u591a\u5c11\u65f6\u95f4 \u5468\u8f6c\u65f6\u95f4\uff1a\u4f5c\u4e1a\u88ab\u63d0\u4ea4\u7ed9\u7cfb\u7edf\u5230\u5b8c\u6210\u7684\u65f6\u95f4 \u5e73\u5747\u5468\u8f6c\u65f6\u95f4\uff1a\u5468\u8f6c\u65f6\u95f4\u4e4b\u548c / \u4f5c\u4e1a\u6570 \u5e26\u6743\u5468\u8f6c\u65f6\u95f4\uff1a\u4f5c\u4e1a\u5468\u8f6c\u65f6\u95f4 / \u4f5c\u4e1a\u5b9e\u9645\u8fd0\u884c\u65f6\u95f4 >= 1 \u5e73\u5747\u5e26\u6743\u5468\u8f6c\u65f6\u95f4 \u7b49\u5f85\u65f6\u95f4\uff1a\u5904\u4e8e\u7b49\u5f85\u5904\u7406\u673a\u72b6\u6001\u65f6\u95f4\u4e4b\u548c \u5e73\u5747\u7b49\u5f85\u65f6\u95f4 \u54cd\u5e94\u65f6\u95f4\uff1a\u7528\u6237\u63d0\u4ea4\u8bf7\u6c42\u5230\u9996\u6b21\u4ea7\u751f\u54cd\u5e94\u6240\u7528\u7684\u65f6\u95f4 2.2.5 \u8c03\u5ea6\u7b97\u6cd5 \u00b6 \u4e0b\u9762\u7684\u7b97\u6cd5\u9002\u5408\u6279\u5904\u7406\u7cfb\u7edf\uff1a \u5148\u6765\u5148\u670d\u52a1 FCFS: - \u4f5c\u4e1a\u8c03\u5ea6\u548c\u8fdb\u7a0b\u8c03\u5ea6\u90fd\u53ef\u4ee5 - \u975e\u62a2\u5360\uff0c\u62a2\u5360\u5f0f\u7684\u7b49\u4e8e\u6700\u77ed\u5269\u4f59\u65f6\u95f4\u4f18\u5148 - \u5bf9\u957f\u4f5c\u4e1a\u6709\u5229\uff0c\u5bf9\u77ed\u4f5c\u4e1a\u4e0d\u5229 - \u4e0d\u4f1a\u5bfc\u81f4\u9965\u997f \u77ed\u4f5c\u4e1a\u4f18\u5148 SJF / \u77ed\u8fdb\u7a0b\u4f18\u5148 SPF: - \u4f5c\u4e1a\u8c03\u5ea6\u548c\u8fdb\u7a0b\u8c03\u5ea6\u90fd\u53ef\u4ee5 - \u4e00\u822c\u662f\u975e\u62a2\u5360\u5f0f\uff0c\u4e5f\u6709\u62a2\u5360\u5f0f\u7684\u7248\u672c\uff0c\u6700\u77ed\u5269\u4f59\u65f6\u95f4\u4f18\u5148 SRTN - \u4e00\u822c\u6765\u8bf4\uff0cSJF / SRTN \u7684\u5e73\u5747\u7b49\u5f85\u65f6\u95f4\u3001\u5e73\u5747\u5468\u8f6c\u65f6\u95f4\u6700\u5c11 - \u5bf9\u77ed\u4f5c\u4e1a\u6709\u5229\uff0c\u957f\u4f5c\u4e1a\u4e0d\u5229 - \u4f1a\u5bfc\u81f4\u9965\u997f \u9ad8\u54cd\u5e94\u6bd4\u4f18\u5148 HRRN - \u4f5c\u4e1a\u8c03\u5ea6\uff0c\u8fdb\u7a0b\u8c03\u5ea6\u90fd\u53ef\u4ee5 - \u54cd\u5e94\u6bd4 = (\u7b49\u5f85\u65f6\u95f4+\u8981\u6c42\u670d\u52a1\u65f6\u95f4) / \u8981\u6c42\u670d\u52a1\u65f6\u95f4 >= 1 - \u975e\u62a2\u5360\u5f0f - \u4e0d\u4f1a\u5bfc\u81f4\u9965\u997f \u4e0b\u9762\u7684\u7b97\u6cd5\u9002\u5408\u4ea4\u4e92\u5f0f\u7cfb\u7edf\uff1a \u65f6\u95f4\u7247\u8f6e\u8f6c\u8c03\u5ea6\u7b97\u6cd5 RR - \u5206\u65f6\u64cd\u4f5c\u7cfb\u7edf - \u7528\u4e8e\u8fdb\u7a0b\u8c03\u5ea6 - \u5c5e\u4e8e\u62a2\u5360\u5f0f\u7b97\u6cd5 - \u5982\u679c\u65f6\u95f4\u7247\u6ca1\u7528\u5b8c\u4f46\u662f\u8fdb\u7a0b\u5b8c\u6210\u4e86\u4f1a\u63d0\u524d\u7ed3\u675f - \u5982\u679c\u65f6\u95f4\u7247\u592a\u5927\uff0c\u4f1a\u9000\u5316\u4e3a FCFS\uff1b\u65f6\u95f4\u7247\u592a\u5c0f\u5207\u6362\u4f1a\u8fc7\u4e8e\u9891\u7e41 - \u4e0d\u4f1a\u5bfc\u81f4\u9965\u997f \u4f18\u5148\u7ea7\u8c03\u5ea6\u7b97\u6cd5 - \u8c03\u5ea6\u9009\u62e9\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u4f5c\u4e1a/\u8fdb\u7a0b - \u4f5c\u4e1a\u8c03\u5ea6/\u8fdb\u7a0b\u8c03\u5ea6\u90fd\u53ef\u4ee5 - \u62a2\u5360\u5f0f\u548c\u975e\u62a2\u5360\u5f0f\u90fd\u6709 - \u5c31\u7eea\u961f\u5217\u672a\u5fc5\u53ea\u6709\u4e00\u4e2a - \u9759\u6001\u4f18\u5148\u7ea7\u548c\u52a8\u6001\u4f18\u5148\u7ea7 - \u4f1a\u5bfc\u81f4\u9965\u997f \u591a\u7ea7\u53cd\u9988\u961f\u5217\u8c03\u5ea6\u7b97\u6cd5 - \u7528\u4e8e\u8fdb\u7a0b\u8c03\u5ea6 - \u62a2\u5360\u5f0f\uff1b\u6307\u5982\u679c\u5728\u8fd0\u884c\u65f6\u4f18\u5148\u7ea7\u66f4\u9ad8\u7684\u961f\u5217\u4e2d\u6709\u8fdb\u7a0b\u4e86\uff0c\u4f1a\u88ab\u62a2\u5360\uff0c\u4e14\u88ab\u62a2\u5360\u7684\u8fdb\u7a0b\u8fd8\u662f\u653e\u5230\u539f\u6765\u7684\u961f\u5c3e\uff0c\u4e0d\u4f1a\u4e0b\u653e - \u6bcf\u4e2a\u961f\u5217\u8bbe\u7f6e\u7684\u65f6\u95f4\u7247\u4e0d\u540c - \u4f1a\u5bfc\u81f4\u9965\u997f 2.3 \u8fdb\u7a0b\u540c\u6b65\u3001\u8fdb\u7a0b\u4e92\u65a5 \u00b6 \u4e3a\u4e86\u5b9e\u73b0\u4e34\u754c\u8d44\u6e90\u7684\u4e92\u65a5\u8bbf\u95ee\uff0c\u9700\u8981\u9075\u5faa\u4ee5\u4e0b\u539f\u5219\uff1a - \u7a7a\u95f2\u8ba9\u8fdb - \u5fd9\u5219\u7b49\u5f85 - \u6709\u9650\u7b49\u5f85\uff1a\u5bf9\u8bf7\u6c42\u8bbf\u95ee\u7684\u8fdb\u7a0b\u8981\u4fdd\u8bc1\u80fd\u5728\u6709\u9650\u65f6\u95f4\u5185\u8fdb\u5165\u4e34\u754c\u533a - \u8ba9\u6743\u7b49\u5f85\uff1a\u5982\u679c\u8fdb\u7a0b\u4e0d\u80fd\u8fdb\u5165\u4e34\u754c\u533a\u9700\u8981\u7acb\u5373\u91ca\u653e\u5904\u7406\u673a 2.3.1 \u8fdb\u7a0b\u4e92\u65a5\u7684\u5b9e\u73b0\u65b9\u6cd5 \u00b6 \u8f6f\u4ef6\u5b9e\u73b0\uff1a - \u5355\u6807\u5fd7\u6cd5\uff1a\u7528\u4e00\u4e2a\u6807\u5fd7\u8868\u793a\u51e0\u53f7\u8fdb\u7a0b\u53ef\u4ee5\u8fdb\u5165\u4e34\u754c\u533a\uff0c\u4e24\u4e2a\u8fdb\u7a0b\u8f6e\u6d41\u8fdb\u5165\uff1b\u5982\u679c\u67d0\u8fdb\u7a0b\u4e00\u76f4\u4e0d\u8fdb\u5165\u4e34\u754c\u533a\u5c31\u8fdd\u80cc\u201c\u7a7a\u95f2\u8ba9\u8fdb\u201d\u539f\u5219 - \u53cc\u6807\u5fd7\u5148\u68c0\u67e5\u6cd5\uff1a\u5148\u68c0\u67e5\u5176\u4ed6\u8fdb\u7a0b\u662f\u5426\u5728\u4e34\u754c\u533a\uff0c\u8fdd\u80cc\u201c\u5fd9\u5219\u7b49\u5f85\u201d\u539f\u5219\uff1b\u53ef\u80fd\u4f1a\u67092\u4e2a\u8fdb\u7a0b\u540c\u65f6\u8bbf\u95ee\u4e34\u754c\u533a\uff0c\u56e0\u4e3a\u68c0\u67e5\u548c\u4e0a\u9501\u4e0d\u662f\u4e00\u6c14\u5475\u6210\u7684 - \u53cc\u6807\u5fd7\u540e\u68c0\u67e5\u6cd5\uff1a\u5148\u4e0a\u9501\uff0c\u540e\u68c0\u67e5\uff1b\u4f1a\u6709\u6b7b\u9501\uff0c\u90fd\u65e0\u6cd5\u8fdb\u5165\u4e34\u754c\u533a\uff1b - Peterson \u7b97\u6cd5\uff1a\u7528 flag \u8868\u793a\u67d0\u8fdb\u7a0b\u60f3\u8981\u8fdb\u5165\u4e34\u754c\u533a\uff0c\u5e76\u7528 turn \u8868\u793a\u5148\u8ba9\u51e0\u53f7\u8fdb\u7a0b\u8fdb\u5165\u4e34\u754c\u533a\uff1b\u5728\u8bbf\u95ee\u4e34\u754c\u8d44\u6e90\u524d flag \u7f6e\u4e3a true\uff0c\u5e76\u628a turn \u8bbe\u4e3a\u53e6\u4e00\u4e2a\u8fdb\u7a0b \u786c\u4ef6\u5b9e\u73b0\uff1a - \u4e2d\u65ad\u5c4f\u853d\uff1a\u7f3a\u70b9\u662f\u4e0d\u9002\u5408\u591a\u5904\u7406\u673a\uff0c\u4e0d\u9002\u5408\u7528\u6237\u8fdb\u7a0b - TestAndSet/TS/TSL\uff1awhile\u4e2d\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u7ed9\u4e34\u754c\u8d44\u6e90\u4e0a\u9501\uff0c\u51fd\u6570\u8fd4\u56de\u4e0a\u9501\u524d\u6b64\u8d44\u6e90\u662f\u5426\u88ab\u4e0a\u9501\uff1b\u8fd9\u4e2a\u51fd\u6570\u662f\u539f\u5b50\u64cd\u4f5c\uff1b\u7f3a\u70b9\u662f\u4e0d\u6ee1\u8db3\u8ba9\u6743\u7b49\u5f85\uff0c\u4ecd\u7136\u5360\u7528\u5904\u7406\u673a\u8d44\u6e90 - Swap/Exchange/XCHG\uff1a\u548c TSL \u6ca1\u533a\u522b\uff1b\u7f3a\u70b9\u662f\u8ba9\u6743\u7b49\u5f85\uff0c\u4ecd\u7136\u5360\u7528\u5904\u7406\u673a\u8d44\u6e90 2.3.2 \u4fe1\u53f7\u91cf\u673a\u5236 \u00b6 \u4f7f\u7528\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u539f\u8bed\u5bf9\u4fe1\u53f7\u91cf\u8fdb\u884c\u64cd\u4f5c: wait(S) signal(S) \u6216\u8005 P V \u64cd\u4f5c \u5bf9\u4fe1\u53f7\u91cf\u7684\u64cd\u4f5c\u53ea\u6709\uff1a\u521d\u59cb\u5316\uff0cP\uff0cV \u6574\u578b\u4fe1\u53f7\u91cf\uff1a\u8868\u793a\u7cfb\u7edf\u4e2d\u7684\u67d0\u79cd\u8d44\u6e90\u6570\u91cf\uff1b\u4e0d\u6ee1\u8db3\u8ba9\u6743\u7b49\u5f85\uff0c\u4ecd\u4f1a\u5360\u7528\u5904\u7406\u673a\u8d44\u6e90\uff1b \u8bb0\u5f55\u578b\u4fe1\u53f7\u91cf\uff1a\u5269\u4f59\u8d44\u6e90\u6570+\u7b49\u5f85\u961f\u5217\uff1bwait\u4e2d\u5148\u51cf\u4e00\uff0c\u518d\u68c0\u67e5\u662f\u5426\u6709\u8d44\u6e90\uff0c\u6ca1\u6709(<0)\u5c31\u963b\u585e\uff1bsignal\u4e2d\u5148\u52a0\u4e00\uff0c\u7136\u540e\u68c0\u67e5\u662f\u5426\u6709\u963b\u585e\u8fdb\u7a0b\uff0c\u6709(<=0)\u5c31\u91ca\u653e\u4e00\u4e2a\u963b\u585e\u8fdb\u7a0b 2.3.3 \u4fe1\u53f7\u91cf\u673a\u5236\u5b9e\u73b0\u8fdb\u7a0b\u4e92\u65a5\uff0c\u540c\u6b65 \u00b6 \u5b9e\u73b0\u4e92\u65a5\uff1a - \u8bbe\u7f6e\u540c\u6b65\u4fe1\u53f7\u91cf semaphore mutex\uff0c\u521d\u59cb\u503c\u4e3a 1 - \u6210\u5bf9\u4f7f\u7528PV\u64cd\u4f5c \u5b9e\u73b0\u540c\u6b65\uff1a - \u8bbe\u7f6e\u540c\u6b65\u4fe1\u53f7\u91cfsemaphore S\uff0c\u521d\u59cb\u503c\u4e3a0 - \u5728\u524d\u64cd\u4f5c\u4e4b\u540e\u6267\u884cV - \u5728\u540e\u64cd\u4f5c\u4e4b\u524d\u6267\u884cP \u4fe1\u53f7\u91cf\u673a\u5236\u5b9e\u73b0\u524d\u9a71\u5173\u7cfb\uff1a - \u4e3a\u6bcf\u4e00\u5bf9\u524d\u9a71\u5173\u7cfb\u5404\u8bbe\u7f6e\u4e00\u4e2a\u540c\u6b65\u53d8\u91cf - \u5728\u524d\u64cd\u4f5c\u4e4b\u540e\u6267\u884cV\uff0c\u53ef\u80fd\u6709\u591a\u4e2aV - \u5728\u540e\u64cd\u4f5c\u4e4b\u524d\u6267\u884cP\uff0c\u53ef\u80fd\u6709\u591a\u4e2aP 2.3.4 \u751f\u4ea7\u8005\uff0c\u6d88\u8d39\u8005 \u00b6 \u5bf9 mutex \u7684 P \u64cd\u4f5c\u9700\u8981\u5728 \u540c\u6b65\u4fe1\u53f7\u91cf P \u64cd\u4f5c\u91cc\u9762 2.3.5 \u591a\u751f\u4ea7\u8005\uff0c\u591a\u6d88\u8d39\u8005 \u00b6 \u5403\u6c34\u679c\u95ee\u9898 \u8fd9\u79cd\u60c5\u51b5\u53ef\u4ee5\u4e0d\u9700\u8981\u4e92\u65a5\u578b\u53f7\u91cf mutex,\u5982\u679c\u7f13\u51b2\u533a\u7684\u5927\u5c0f\u5927\u4e8e 1 \u5c31\u9700\u8981\u8bbe\u7f6e\u4e92\u65a5\u4fe1\u53f7\u91cf\uff0c\u5426\u5219\u53ef\u80fd\u53d1\u751f\u7f13\u51b2\u533a\u7684\u8986\u76d6\u95ee\u9898 2.3.6 \u5438\u70df\u8005\u95ee\u9898 \u00b6 \u9700\u89814\u4e2a\u540c\u6b65\u4fe1\u53f7\u91cf: \u5206\u522b\u8868\u793a\u4e09\u79cd\u7ec4\u5408\u7684 \u548c \u8868\u793a\u62bd\u70df\u662f\u5426\u5b8c\u6210\u7684 2.3.7 \u8bfb\u8005\u3001\u5199\u8005\u95ee\u9898 \u00b6 \u7528\u4e00\u4e2a mutex \u6765\u4fdd\u8bc1\u8bfb \u8fdb\u7a0b\u7684\u52a0\u9501\u89e3\u9501 \u548c \u4fee\u6539count \u662f\u539f\u5b50\u64cd\u4f5c \u4e0b\u9762\u7684\u4ee3\u7801\u662f \u8bfb\u8005 \u4f18\u5148\uff0c\u5199\u8005\u53ef\u80fd\u4f1a\u9965\u997f \u4e0b\u9762\u7684\u4ee3\u7801\u662f \u5199\u8005 \u4f18\u5148 2.3.8 \u54f2\u5b66\u5bb6\u8fdb\u9910\u95ee\u9898 \u00b6 \u9632\u6b62\u6b7b\u9501\u7684\u65b9\u6cd5\uff1a - \u6700\u591a\u5141\u8bb84\u4e2a\u54f2\u5b66\u5bb6\u540c\u65f6\u8fdb\u9910\uff0c\u7528\u4e00\u4e2a\u521d\u59cb\u503c\u4e3a 4 \u7684\u540c\u6b65\u4fe1\u53f7\u91cf - \u5947\u6570\u53f7\u54f2\u5b66\u5bb6\u5148\u62ff\u5de6\u8fb9\u7684\u7b77\u5b50\uff0c\u800c\u5076\u6570\u53f7\u54f2\u5b66\u5bb6\u76f8\u53cd\uff1b\u7528 if \u6765\u5224\u65ad\u4e00\u4e0b - \u4ec5\u5f53\u4e00\u4e2a\u54f2\u5b66\u5bb6\u5de6\u53f3\u4e24\u53ea\u7b77\u5b50\u53ef\u7528\u65f6\u624d\u5141\u8bb8\u4ed6\u6293\u8d77\u7b77\u5b50\uff08\u8fd9\u4e2a\u8868\u8ff0\u4e0d\u662f\u5f88\u51c6\u786e\uff09\uff1b\u57282\u4e2a\u62ff\u7b77\u5b50\u7684 P \u64cd\u4f5c\u5916\u9762\u7528\u4e00\u4e2a mutex \u7684 PV \u64cd\u4f5c\u5305\u8d77\u6765\uff0c\u5982\u679c\u6709\u4eba\u6ca1\u62ff\u5230 2 \u652f\u7b77\u5b50\u5176\u4ed6\u6240\u6709\u4eba\u90fd\u4e0d\u53ef\u4ee5\u62ff\uff0c\u76f4\u5230\u4ed6\u62ff\u5230\uff1b\u4ee3\u7801\u770b\u4e0b\u56fe 2.3.9 \u7ba1\u7a0b \u00b6 \u4fe1\u53f7\u91cf\u673a\u5236\u7f16\u5199\u7a0b\u5e8f\u56f0\u96be\uff0c\u6613\u51fa\u9519\uff1b\u7ba1\u7a0b\u4e5f\u662f\u4e00\u79cd\u540c\u6b65\u673a\u5236 \u7ba1\u7a0b\u7684\u7ec4\u6210\uff08\u7c7b\uff09 - \u5171\u4eab\u6570\u636e\u7ed3\u6784 - \u4e00\u7ec4\u8fc7\u7a0b - \u5bf9\u5171\u4eab\u6570\u636e\u8bbe\u7f6e\u521d\u59cb\u503c\u7684\u8bed\u53e5 - \u7ba1\u7a0b\u6709\u4e00\u4e2a\u540d\u5b57 \u901a\u8fc7\u76f4\u63a5\u8c03\u7528\u7ba1\u7a0b\u7684\u65b9\u6cd5\u8bbf\u95ee\u5171\u4eab\u6570\u636e\uff0c\u4e92\u65a5\u548c\u5171\u4eab\u7684\u4ee3\u7801\u5728\u7ba1\u7a0b\u4e2d\u5c01\u88c5\u597d\u4e86 \u53ea\u6709\u901a\u8fc7\u7ba1\u7a0b\u7279\u5b9a\u7684 \u5165\u53e3 \u624d\u80fd\u8bbf\u95ee\u5171\u4eab\u6570\u636e \u7ba1\u7a0b\u6709\u5f88\u591a\u5165\u53e3\uff0c\u4f46\u6bcf\u6b21\u53ea\u80fd\u5f00\u653e\u5176\u4e2d\u4e00\u4e2a \u5165\u53e3\uff0c\u5e76\u4e14\u53ea\u80fd\u8ba9\u4e00\u4e2a\u8fdb\u7a0b\u6216\u8005\u7ebf\u7a0b\u8fdb\u5165 \u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u8fdb\u5165\u7ba1\u57ce\u540e\u56e0\u4e3a\u5176\u4ed6\u539f\u56e0\u963b\u585e\uff0c\u90a3\u4e48\u5176\u4ed6\u8fdb\u7a0b\u5c31\u6682\u65f6\u65e0\u6cd5\u8bbf\u95ee\u6b64\u7ba1\u7a0b\uff1b\u53ef\u4ee5\u5728\u7ba1\u7a0b\u4e2d\u8bbe\u7f6e \u6761\u4ef6\u53d8\u91cfcondititon \u4ee5\u53ca \u7b49\u5f85/\u5524\u9192\u64cd\u4f5c\uff0c\u8ba9\u4e00\u4e2a\u8fdb\u7a0b\u963b\u585e\u6216\u8005\u7ebf\u7a0b\u5728\u6761\u4ef6\u53d8\u91cf\u4e0a\u7b49\u5f85\uff0c\u6b64\u65f6\u8fdb\u7a0b\u4f1a\u91ca\u653e\u7ba1\u7a0b\u7684\u4f7f\u7528\u6743\uff1b\u901a\u8fc7\u5524\u9192\u64cd\u4f5c\u5c06\u7b49\u5f85\u5728\u6761\u4ef6\u53d8\u91cf\u4e0a\u7684\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u5524\u9192\uff1bx.wait\uff1a\u5c06\u6b63\u5728\u8bbf\u95ee\u7ba1\u7a0b\u7684\u8fdb\u7a0b\u653e\u5230 x \u7684\u7b49\u5f85\u961f\u5217\u4e0a\uff0c\u5e76\u91ca\u653e\u7ba1\u7a0b\uff1bx.signal\uff1a\u4ece\u963b\u585e\u961f\u5217\u4e2d\u5524\u9192\u56e0 x \u88ab\u963b\u585e\u7684\u8fdb\u7a0b 2.4 \u6b7b\u9501 \u00b6 2.4.1 \u6b7b\u9501\u7684\u6982\u5ff5 \u00b6 \u6b7b\u9501\uff1a\u5404\u4e2a\u8fdb\u7a0b\u4e92\u76f8\u7b49\u5f85\u5bf9\u65b9\u624b\u91cc\u7684\u8d44\u6e90\uff1b\u53d1\u751f\u6b7b\u9501\u7684\u8fdb\u7a0b\u4e00\u5b9a\u5904\u4e8e\u963b\u585e\u6001\uff1b\u81f3\u5c11\u6709 2 \u4e2a\u6216 2 \u4e2a\u4ee5\u4e0a\u7684\u8fdb\u7a0b\u540c\u65f6\u6b7b\u9501 \u9965\u997f\uff1a\u7531\u4e8e\u957f\u671f\u5f97\u4e0d\u5230\u60f3\u8981\u7684\u8d44\u6e90\u800c\u65e0\u6cd5\u63a8\u8fdb\uff1b\u4e00\u4e2a\u8fdb\u7a0b\u4e5f\u53ef\u80fd\u53d1\u751f\u6b7b\u9501 \u6b7b\u5faa\u73af\uff1a\u8df3\u4e0d\u51fa\u5faa\u73af\uff1b\u53ef\u4ee5\u662f\u8fd0\u884c\u6001 \u6b7b\u9501\u7684\u5fc5\u8981\u6761\u4ef6\uff1a - \u4e92\u65a5\u6761\u4ef6 - \u4e0d\u53ef\u5265\u593a\u6761\u4ef6 - \u8bf7\u6c42\u548c\u4fdd\u6301\u6761\u4ef6\uff1a\u8fdb\u7a0b\u5df2\u7ecf\u4fdd\u6301\u4e86\u4e00\u4e2a\u8d44\u6e90\uff0c\u4f46\u53c8\u63d0\u51fa\u4e86\u65b0\u7684\u8d44\u6e90\u8bf7\u6c42 - \u5faa\u73af\u7b49\u5f85\u6761\u4ef6\uff1a\u5b58\u5728\u4e00\u79cd\u8fdb\u7a0b\u8d44\u6e90\u7684\u5faa\u73af\u7b49\u5f85\u94fe\uff1b\u6ce8\u610f\u7684\u662f\u53d1\u751f\u6b7b\u9501\u4e00\u5b9a\u6709\u5faa\u73af\u7b49\u5f85\uff0c\u4f46\u662f\u53d1\u751f\u5faa\u73af\u7b49\u5f85\u4e0d\u4e00\u5b9a\u6709\u6b7b\u9501 \u4ec0\u4e48\u65f6\u5019\u4f1a\u6709\u6b7b\u9501\uff1a - \u5bf9\u7cfb\u7edf\u8d44\u6e90\u7684\u7ade\u4e89 - \u8fdb\u7a0b\u63a8\u8fdb\u987a\u5e8f\u975e\u6cd5 - \u4fe1\u53f7\u91cf\u7684\u4f7f\u7528\u4e0d\u5f53 \u6b7b\u9501\u7684\u5904\u7406\u7b56\u7565\uff1a - \u9884\u9632\u6b7b\u9501 - \u907f\u514d\u6b7b\u9501 - \u6b7b\u9501\u7684\u68c0\u67e5\u548c\u89e3\u9664 2.4.2 \u9884\u9632\u6b7b\u9501 \u00b6 \u7834\u574f\u6b7b\u9501\u7684\u5fc5\u8981\u6761\u4ef6 - \u7834\u574f\u4e92\u65a5\u6761\u4ef6\uff1a\u628a\u4e92\u65a5\u7684\u8fdb\u7a0b\u6539\u9020\u4e3a\u5141\u8bb8\u5171\u4eab\u4f7f\u7528 - \u7834\u574f\u4e0d\u53ef\u5265\u593a\u6761\u4ef6\uff1a - \u5f53\u67d0\u8fdb\u7a0b\u8bf7\u6c42\u8d44\u6e90\u5f97\u4e0d\u5230\u6ee1\u8db3\u65f6\u9700\u8981\u7acb\u5373\u91ca\u653e\u4fdd\u6301\u7684\u6240\u6709\u8d44\u6e90 - \u67d0\u8fdb\u7a0b\u9700\u8981\u7684\u8d44\u6e90\u88ab\u5176\u4ed6\u8fdb\u7a0b\u5360\u6709\u65f6\u53ef\u4ee5\u7531\u64cd\u4f5c\u7cfb\u7edf\u534f\u52a9\u628a\u60f3\u8981\u7684\u8d44\u6e90\u5f3a\u884c\u5265\u593a \u7834\u574f\u8bf7\u6c42\u548c\u4fdd\u6301\u6761\u4ef6\uff1a\u8fdb\u7a0b\u8fd0\u884c\u524d\u4e00\u6b21\u7533\u8bf7\u5b8c\u6240\u9700\u8981\u7684\u5168\u90e8\u8d44\u6e90 \u7834\u574f\u5faa\u73af\u7b49\u5f85\u6761\u4ef6\uff1a\u91c7\u7528\u987a\u5e8f\u8d44\u6e90\u5206\u914d\u6cd5 2.4.3 \u907f\u514d\u6b7b\u9501 \u00b6 \u5b89\u5168\u5e8f\u5217 \u5904\u4e8e\u5b89\u5168\u72b6\u6001\u4e00\u5b9a\u4e0d\u4f1a\u53d1\u751f\u6b7b\u9501\uff1b\u5982\u679c\u8fdb\u5165\u4e0d\u5b89\u5168\u72b6\u6001\uff0c\u53ef\u80fd\u53d1\u751f\u6b7b\u9501\uff1b\u53d1\u751f\u6b7b\u9501\u4e00\u5b9a\u662f\u5728\u4e0d\u5b89\u5168\u72b6\u6001 \u94f6\u884c\u5bb6\u7b97\u6cd5\uff1a - \u5148\u5224\u65ad request \u7684\u8d44\u6e90\u662f\u5426 \u5c0f\u4e8e\u7b49\u4e8e need \u8d44\u6e90\uff0c\u5927\u4e8e\u8ba4\u4e3a\u51fa\u9519 - \u5982\u679c available \u8d44\u6e90\u5c0f\u4e8e request \u8868\u793a\u6ca1\u6709\u8db3\u591f\u7684\u8d44\u6e90\uff1b - \u6709\u8db3\u591f\u8d44\u6e90\u5c31\u9610\u91ca\u5206\u914d\u8d44\u6e90\uff0c\u5e76\u6267\u884c\u5b89\u5168\u6027\u7b97\u6cd5 2.4.4 \u6b7b\u9501\u7684\u68c0\u6d4b\u548c\u89e3\u9664 \u00b6 \u6b7b\u9501\u7684\u68c0\u6d4b\uff0c\u5fc5\u987b\uff1a - \u7528\u67d0\u79cd\u6570\u636e\u7ed3\u6784\u6765\u4fdd\u5b58\u8d44\u6e90\u7684\u8bf7\u6c42\u548c\u5206\u914d\u4fe1\u606f\uff0c\u5982\u8d44\u6e90\u5206\u914d\u56fe - \u63d0\u4f9b\u4e00\u79cd\u7b97\u6cd5\uff0c\u5229\u7528\u4e0a\u8ff0\u4fe1\u606f\u6765\u68c0\u6d4b\u7cfb\u7edf\u662f\u5426\u5df2\u8fdb\u5165\u6b7b\u9501\u72b6\u6001 \u5982\u679c\u4e0d\u80fd\u6d88\u9664\u6240\u6709\u7684\u8fb9\u5c31\u662f\u53d1\u751f\u4e86\u6b7b\u9501 \u6b7b\u9501\u7684\u89e3\u9664\uff1a - \u7528\u6b7b\u9501\u68c0\u6d4b\u7b97\u6cd5\u5316\u7b80\u8d44\u6e90\u5206\u914d\u56fe\u540e\uff0c\u8fd8\u8fde\u7740\u8fb9\u7684\u5c31\u662f\u6b7b\u9501\u8fdb\u7a0b - \u89e3\u9664\u6b7b\u9501\u7684\u4e3b\u8981\u65b9\u6cd5\uff1a - \u8d44\u6e90\u5265\u593a\u6cd5 - \u64a4\u9500\u8fdb\u7a0b\u6cd5 - \u8fdb\u7a0b\u56de\u9000\u6cd5 3 \u5185\u5b58\u7ba1\u7406 \u00b6 3.1 \u5185\u5b58 \u00b6 3.1.1 \u5185\u5b58\u57fa\u7840\u77e5\u8bc6 \u00b6 \u7a0b\u5e8f\u6267\u884c\u524d\u9700\u8981\u653e\u5230\u5185\u5b58\u4e2d\u624d\u80fd\u88abCPU\u5904\u7406 \u5185\u5b58\u5730\u5740\uff1a\u6309\u5b57\u8282\u7f16\u5740\uff0c\u6309\u5b57\u957f\u7f16\u5740 \u903b\u8f91\u5730\u5740 / \u7269\u7406\u5730\u5740\uff0c\u903b\u8f91\u5730\u5740->\u7269\u7406\u5730\u5740\uff1a\u91cd\u5b9a\u4f4d \u7a0b\u5e8f\u53d8\u6210\u5728\u5185\u5b58\u4e2d\u6267\u884c\u7684\u7a0b\u5e8f\u7684\u6b65\u9aa4\uff1a\u7f16\u8bd1\uff0c\u94fe\u63a5\uff0c\u88c5\u5165 \u94fe\u63a5\u7684\u65b9\u5f0f\uff1a\u94fe\u63a5\u540e\u5f62\u6210\u5b8c\u6574\u7684\u903b\u8f91\u5730\u5740 \u9759\u6001\u94fe\u63a5 \u88c5\u5165\u65f6\u52a8\u6001\u94fe\u63a5\uff1a\u4f18\u70b9\u662f\u4fbf\u4e8e\u4fee\u6539\u548c\u66f4\u65b0\uff0c\u4fbf\u4e8e\u5b9e\u73b0\u5bf9\u76ee\u6807\u6a21\u5757\u7684\u5171\u4eab \u8fd0\u884c\u65f6\u52a8\u6001\u94fe\u63a5\uff1a\u8fd0\u884c\u65f6\u9700\u8981\u67d0\u4e2a\u6a21\u5757\u518d\u8fdb\u884c\u94fe\u63a5\uff1b\u4f18\u70b9\u662f\u80fd\u591f\u52a0\u5feb\u7a0b\u5e8f\u7684\u88c5\u5165\u8fc7\u7a0b\uff0c\u8282\u7701\u5185\u5b58\u7a7a\u95f4 \u88c5\u5165\u7684\u65b9\u5f0f\uff1a\u88c5\u5165\u540e\u5f62\u6210\u7269\u7406\u5730\u5740 - \u7edd\u5bf9\u88c5\u5165\uff1a\u88c5\u5165\u65f6\u76f4\u63a5\u5199\u6210\u7edd\u5bf9\u5730\u5740\uff1b\u53ea\u9002\u7528\u4e8e\u5355\u9053\u7a0b\u5e8f\u73af\u5883 - \u53ef\u91cd\u5b9a\u4f4d\u88c5\u5165\uff1a\u4e5f\u53eb\u9759\u6001\u91cd\u5b9a\u4f4d\uff0c\u5728\u88c5\u5165\u65f6\u5bf9\u903b\u8f91\u5730\u5740\u8fdb\u884c\u91cd\u5b9a\u4f4d\uff0c\u53d8\u6210\u7edd\u5bf9\u5730\u5740\uff1b\u8fd0\u884c\u671f\u95f4\u4e0d\u80fd\u518d\u79fb\u52a8\uff1b\u5fc5\u987b\u5206\u914d\u8981\u6c42\u7684\u5168\u90e8\u5185\u5b58\u7a7a\u95f4 - \u52a8\u6001\u8fd0\u884c\u65f6\u88c5\u5165\uff1a\u4e5f\u53eb\u52a8\u6001\u91cd\u5b9a\u4f4d\uff0c\u5730\u5740\u8f6c\u6362\u4f1a\u63a8\u8fdf\u5230\u7a0b\u5e8f\u6267\u884c\u65f6\u8fdb\u884c\uff1b\u9700\u8981\u91cd\u5b9a\u4f4d\u5bc4\u5b58\u5668\u7684\u652f\u6301\uff1b\u5141\u8bb8\u7a0b\u5e8f\u5728\u5185\u5b58\u4e2d\u53d1\u751f\u79fb\u52a8 3.1.2 \u5185\u5b58\u7ba1\u7406 \u00b6 \u5185\u5b58\u7a7a\u95f4\u7684\u5206\u914d\u548c\u56de\u6536 \u865a\u62df\u5185\u5b58\u5bf9\u5185\u5b58\u8fdb\u884c\u6269\u5145 \u8986\u76d6\u6280\u672f \u4ea4\u6362\u6280\u672f \u865a\u62df\u5b58\u50a8\u6280\u672f \u63d0\u4f9b\u5730\u5740\u8f6c\u6362\u529f\u80fd:\u4e09\u79cd\u88c5\u5165\u65b9\u5f0f \u5185\u5b58\u5171\u4eab\uff1a\u53ea\u8bfb\u533a\u57df\u624d\u53ef\u4ee5\u5171\u4eab\uff0c\u6bd4\u5982\u53ef\u91cd\u5165\u4ee3\u7801 \u5185\u5b58\u4fdd\u62a4\uff1a\u4e24\u79cd\u529e\u6cd5 \u4e0a\u9650\u5bc4\u5b58\u5668\u548c\u4e0b\u9650\u5bc4\u5b58\u5668 \u91cd\u5b9a\u4f4d\u5bc4\u5b58\u5668\u548c\u754c\u5730\u5740\u5bc4\u5b58\u5668\uff08\u754c\u5730\u5740\u5bc4\u5b58\u5668\u6765\u5224\u65ad\u903b\u8f91\u5730\u5740\u7684\u8303\u56f4\uff09 3.1.3 \u8986\u76d6\u548c\u4ea4\u6362 \u00b6 \u8986\u76d6\uff1a - \u7a0b\u5e8f\u5206\u4e3a\u591a\u4e2a\u6bb5\uff0c\u5e38\u7528\u7684\u6bb5\u5e38\u9a7b\u5185\u5b58\u4e2d - \u5185\u5b58\u4e2d\u5206\u4e3a\u4e00\u4e2a \u56fa\u5b9a\u533a \u548c \u82e5\u5e72\u4e2a \u8986\u76d6\u533a - \u5e38\u9a7b\u7684\u6bb5\u653e\u5728\u56fa\u5b9a\u533a\u4e2d\uff0c\u4e0d\u5e38\u7528\u7684\u6bb5\u653e\u5728\u8986\u76d6\u533a\uff0c\u9700\u8981\u65f6\u8c03\u5165\u5185\u5b58 - \u7f3a\u70b9\uff1a\u5bf9\u7528\u6237\u4e0d\u900f\u660e\uff0c\u589e\u52a0\u7528\u6237\u7f16\u7a0b\u8d1f\u62c5 \u4ea4\u6362\u6280\u672f / \u5bf9\u6362\u6280\u672f\uff1a - \u5185\u5b58\u7d27\u5f20\u65f6\u5c06\u67d0\u4e9b\u8fdb\u7a0b\u6682\u65f6\u6362\u51fa\u5916\u5b58 \u6216\u8005 \u628a\u5916\u5b58\u4e2d\u67d0\u4e9b\u5df2\u7ecf\u5177\u5907\u8fd0\u884c\u6761\u4ef6\u7684\u8fdb\u7a0b\u6362\u5165\u5185\u5b58\uff1b\u88ab\u6362\u51fa\u5916\u5b58\u7684\u8fdb\u7a0b\u7684PCB\u8fd8\u662f\u5728\u5185\u5b58\u4e2d\u7684 - \u4e2d\u7ea7\u8c03\u5ea6\uff1a\u88ab\u66ff\u6362\u5230\u5916\u5b58\u7684\u8fdb\u7a0b\u72b6\u6001\u4e3a\u6302\u8d77 \u78c1\u76d8\u5b58\u50a8\u7a7a\u95f4\uff1a - \u5bf9\u6362\u533a\uff08I/O\u5feb\uff0c\u8fde\u7eed\u5206\u914d\u65b9\u5f0f\uff09\uff0c\u6587\u4ef6\u533a\uff08\u79bb\u6563\u5206\u914d\uff09 - \u8fdb\u7a0b\u8fd0\u884c\u65f6\u53d1\u73b0\u5185\u5b58\u5403\u7d27\u65f6\u8fdb\u884c\u4ea4\u6362\uff1b\u5982\u8bb8\u591a\u8fdb\u7a0b\u8fd0\u884c\u65f6\u53d1\u751f\u7f3a\u9875\uff1b\u5982\u679c\u7f3a\u9875\u7387\u660e\u663e\u4e0b\u964d\uff0c\u5c31\u6682\u505c\u6362\u51fa - \u4f18\u5148\u6362\u51fa\u963b\u585e\u8fdb\u7a0b\uff0c\u4f18\u5148\u6362\u51fa\u4f18\u5148\u7ea7\u4f4e\u7684\u8fdb\u7a0b 3.1.4 \u8fde\u7eed\u5206\u914d\u7ba1\u7406\u65b9\u5f0f \u00b6 \u5185\u90e8\u788e\u7247\uff1a\u5206\u914d\u7ed9\u8fdb\u7a0b\u7684\u5185\u5b58\u533a\u57df\u6709\u4e9b\u6ca1\u6709\u7528\u4e0a \u5916\u90e8\u788e\u7247\uff1a\u5185\u5b58\u4e2d\u6709\u4e9b\u7a7a\u95f2\u533a\u57df\u592a\u5c0f\u800c\u96be\u4ee5\u5229\u7528 \u5355\u4e00\u8fde\u7eed\u5206\u914d \u5206\u4e3a\u7cfb\u7edf\u533a\uff0c\u7528\u6237\u533a \u53ea\u80fd\u6709\u4e00\u9053\u7528\u6237\u7a0b\u5e8f \u4f18\u70b9\uff1a\u5b9e\u73b0\u7b80\u5355\u4e0d\u4e00\u5b9a\u9700\u8981\u5185\u5b58\u4fdd\u62a4\uff1b\u7f3a\u70b9\uff1a\u5229\u7528\u7387\u4f4e\uff0c\u53ea\u80fd\u7528\u4e8e\u5355\u7528\u6237\uff0c\u5355\u4efb\u52a1\u7684\u64cd\u4f5c\u7cfb\u7edf \u6709\u5185\u90e8\u788e\u7247\uff0c\u65e0\u5916\u90e8\u788e\u7247 \u56fa\u5b9a\u5206\u533a\u5206\u914d \u5c06\u7528\u6237\u533a\u5206\u4e3a\u82e5\u5e72\u5206\u533a\uff0c\u6709\u5206\u533a\u5927\u5c0f\u76f8\u7b49\u548c\u5206\u533a\u5927\u5c0f\u4e0d\u540c\u7684\u65b9\u5f0f \u5206\u533a\u8bf4\u660e\u8868 \u4f18\u70b9\uff1a\u5b9e\u73b0\u7b80\u5355\uff1b\u7f3a\u70b9\uff1a\u7528\u6237\u7a0b\u5e8f\u592a\u5927\u65f6\u9700\u8981\u7528\u8986\u76d6\u6280\u672f\uff0c\u4f1a\u964d\u4f4e\u6027\u80fd \u6709\u5185\u90e8\u788e\u7247\uff0c\u65e0\u5916\u90e8\u788e\u7247 \u52a8\u6001\u5206\u533a\u5206\u914d / \u53ef\u53d8\u5206\u533a\u5206\u914d \u4e0d\u9884\u5148\u5212\u5206\u5185\u5b58\u5206\u533a \u4f7f\u7528\u6570\u636e\u7ed3\u6784\u8bb0\u5f55\u5185\u5b58\u4f7f\u7528\u60c5\u51b5\uff1a\u7a7a\u95f2\u5206\u533a\u8868\uff0c\u7a7a\u95f2\u5206\u533a\u94fe \u5206\u914d\u7b97\u6cd5\uff1a\u4e0b\u4e00\u8282\u5185\u5bb9 \u5206\u533a\u7684\u5206\u914d\u548c\u56de\u6536 \u6ca1\u6709\u5185\u90e8\u788e\u7247\uff0c\u6709\u5916\u90e8\u788e\u7247 \u89e3\u51b3\u5916\u90e8\u788e\u7247\uff1a\u7d27\u51d1 3.1.5 \u52a8\u6001\u5206\u533a\u5206\u914d\u7b97\u6cd5 \u00b6 \u9996\u6b21\u9002\u5e94\u7b97\u6cd5 first fit \u4ece\u4f4e\u5730\u5740\u5f00\u59cb\u9012\u589e\u67e5\u627e \u7a7a\u95f2\u5206\u533a\u8868\u6309\u7167\u5730\u5740\u4ece\u5c0f\u5230\u5927\u6392 \u6700\u4f73\u9002\u5e94\u7b97\u6cd5 best fit \u7a7a\u95f2\u5206\u533a\u8868\u6309\u5206\u533a\u5927\u5c0f\u4ece\u5c0f\u5230\u5927\u6392 \u627e\u5230\u7b2c\u4e00\u4e2a\u6ee1\u8db3\u8981\u6c42\u7684\uff0c\u5373\u5206\u533a\u5927\u5c0f\u6ee1\u8db3\u4e14\u5927\u5c0f\u6700\u5c0f\u7684\u5206\u533a \u7f3a\u70b9\uff1a\u4f1a\u4ea7\u751f\u5f88\u591a\u5916\u90e8\u788e\u7247 \u6700\u574f\u9002\u5e94\u7b97\u6cd5 worst fit \u7a7a\u95f2\u5206\u533a\u8868\u6309\u5206\u533a\u5927\u5c0f\u4ece\u5927\u5230\u5c0f\u6392 \u7f3a\u70b9\uff1a\u4e4b\u540e\u6709\u5927\u8fdb\u7a0b\u6ca1\u6709\u7a7a\u95f4\u5206\u914d \u90bb\u8fd1\u9002\u5e94\u7b97\u6cd5 next fit \u7a7a\u95f2\u5206\u533a\u6309\u7167\u5730\u5740\u4ece\u5c0f\u5230\u5927\u6392 \u7a7a\u95f2\u5206\u533a\u94fe\u9700\u8981\u8bbe\u7f6e\u4e3a\u5faa\u73af\u94fe\u8868 \u6bcf\u6b21\u4ece\u4e0a\u6b21\u67e5\u627e\u7ed3\u675f\u7684\u4f4d\u7f6e\u5f00\u59cb\u5f80\u540e\u67e5\u627e 3.1.6 \u57fa\u672c\u5206\u9875\u5b58\u50a8\u7ba1\u7406\u7684\u57fa\u672c\u6982\u5ff5 \u00b6 \u975e\u8fde\u7eed\u5206\u914d\u7ba1\u7406\u65b9\u5f0f\uff1a - \u57fa\u672c\u5206\u9875\u5b58\u50a8\u7ba1\u7406 - \u57fa\u672c\u5206\u6bb5\u5b58\u50a8\u7ba1\u7406 - \u6bb5\u9875\u5f0f\u5b58\u50a8\u7ba1\u7406 \u5c06\u5185\u5b58\u5206\u4e3a\u5927\u5c0f\u76f8\u7b49\u7684\u5206\u533a\uff1a - \u9875\u6846 / \u9875\u5e27 / \u5185\u5b58\u5757 / \u7269\u7406\u5757 - \u9875\u6846\u53f7 / \u5185\u5b58\u5757\u53f7 / \u9875\u5e27\u53f7 / \u7269\u7406\u5757\u53f7 \u5c06\u7528\u6237\u8fdb\u7a0b\u4e5f\u5206\u4e3a\u4e5f\u9875\u6846\u5927\u5c0f\u4e00\u6837\u7684\u533a\u57df\uff0c\u79f0\u4e3a \u9875 \u6216 \u9875\u9762\uff08\u6700\u540e\u4e00\u4e2a\u9875\u53ef\u80fd\u6ca1\u6709\u6ee1\uff09 \u903b\u8f91\u5730\u5740\u5230\u7269\u7406 \u5730\u5740\u7684\u8f6c\u6362\uff1a - \u8ba1\u7b97\u903b\u8f91\u5730\u5740\u5bf9\u5e94\u7684\u9875\u53f7 - \u8be5\u9875\u53f7\u5728\u5185\u5b58\u4e2d\u7684\u8d77\u59cb\u5730\u5740 - \u903b\u8f91\u5730\u5740\u5728\u5185\u9762\u5185\u7684\u504f\u79fb\u91cf - \u7269\u7406\u5730\u5740 = \u8d77\u59cb\u5730\u5740 + \u504f\u79fb\u91cf \u903b\u8f91\u5730\u5740\u7ed3\u6784\uff1a \u9875\u8868\uff1a\u9875\u53f7\u5230\u5757\u53f7\u7684\u5bf9\u5e94\u5173\u7cfb \u6bcf\u4e2a\u9875\u8868\u9879\u9700\u8981\u7684\u5b57\u8282\u6570\u4e3a \u5185\u5b58\u4e2d\u5757\u6570 \u9700\u8981\u7684\u5b57\u8282\u6570 3.1.7 \u57fa\u672c\u5730\u5740\u53d8\u6362\u673a\u6784 \u00b6 \u9875\u8868\u5bc4\u5b58\u5668 PTR\uff0c\u5b58\u653e\u9875\u8868\u5728\u5185\u5b58\u4e2d\u7684\u8d77\u59cb\u5730\u5740F\u548c\u9875\u8868\u957f\u5ea6M\uff1b \u8fdb\u7a0b\u672a\u6267\u884c\u65f6\uff0c\u9875\u8868\u8d77\u59cb\u5730\u5740\u548c\u957f\u5ea6\u653e\u5728\u5728 PCB \u4e2d\uff0c\u5f53\u8fdb\u7a0b\u88ab\u8c03\u5ea6\u65f6\u624d\u4f1a\u653e\u5230\u9875\u8868\u5bc4\u5b58\u5668\u4e2d \u9875\u5f0f\u7ba1\u7406\u4e2d\u5730\u5740\u662f\u4e00\u7ef4\u7684\uff1b\u5730\u5740\u53d8\u6362\u8fc7\u7a0b\u9700\u8981\u8bbf\u95ee2\u6b21\u5185\u5b58\uff1a\u7b2c\u4e00\u6b21\u67e5\u9875\u8868\uff0c\u7b2c\u4e8c\u6b21\u8bbf\u95ee\u76ee\u6807\u5185\u5b58\u5355\u5143 \u5982\u679c\u4e00\u4e2a\u9875\u8868\u9879\u53ea\u9700\u8981\u8981 3B \u5c31\u53ef\u4ee5\u8868\u793a\uff0c\u8fd8\u662f\u4f1a\u8ba9\u5176\u4f7f\u7528 4B\uff0c\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u8ba9\u6bcf\u4e2a\u9875\u9762\u6070\u597d\u53ef\u4ee5\u88c5\u7684\u4e0b\u6574\u6570\u4e2a\u9875\u8868\u9879 3.1.8 \u5177\u6709\u5feb\u8868\u7684\u5730\u5740\u53d8\u6362\u673a\u6784 \u00b6 \u5c40\u90e8\u6027\u539f\u7406\uff1a - \u65f6\u95f4\u5c40\u90e8\u6027 - \u7a7a\u95f4\u5c40\u90e8\u6027 \u5feb\u8868\uff1aTLB - \u5185\u5b58\u4e2d\u7684\u9875\u8868\u88ab\u79f0\u4e3a\u6162\u8868 - \u662f\u9875\u8868\u7684\u4e00\u90e8\u5206\u526f\u672c - \u5982\u679c\u5feb\u8868\u547d\u4e2d\uff0c\u5219\u53ea\u9700\u8981\u4e00\u6b21\u8bbf\u5b58;\u5426\u5219\u8fd8\u662f\u9700\u89812\u6b21 - \u6709\u7684\u7cfb\u7edf\u652f\u6301\u5feb\u8868\u548c\u6162\u8868\u540c\u65f6\u67e5\u8be2 3.1.9 \u4e24\u7ea7\u9875\u8868 \u00b6 \u5355\u7ea7\u9875\u8868\u7684\u95ee\u9898\uff1a - \u9875\u8868\u5fc5\u987b\u8fde\u7eed\u5b58\u653e\uff0c\u9875\u8868\u5f88\u5927\u65f6\u9700\u8981\u5360\u7528\u591a\u4e2a\u8fde\u7eed\u7684\u9875\u6846 - \u6ca1\u6709\u5fc5\u8981\u8ba9\u6574\u4e2a\u9875\u8868\u5e38\u9a7b\u5185\u5b58\uff1b\u56e0\u4e3a\u8fdb\u7a0b\u4e00\u6bb5\u65f6\u95f4\u5185\u53ef\u80fd\u53ea\u9700\u8981\u8bbf\u95ee\u51e0\u4e2a\u7279\u5b9a\u7684\u9875\u9762 \u95ee\u9898\u7684\u89e3\u51b3\uff1a - \u4e3a\u79bb\u6563\u5206\u914d\u7684\u9875\u8868\u518d\u5efa\u7acb\u4e00\u5f20\u9875\u8868\uff0c\u79f0\u4e3a\u9875\u76ee\u5f55\u8868\u6216\u5916\u5c42\u9875\u8868\u6216\u9876\u5c42\u9875\u8868 - \u865a\u62df\u5b58\u50a8\u6280\u672f\uff08\u540e\u9762\u7684\u7ae0\u8282\u7684\u5185\u5bb9\uff09 \u9700\u8981\u6ce8\u610f\u7684\u7ec6\u8282\uff1a - \u91c7\u7528\u591a\u7ea7\u9875\u8868\u65f6\uff0c\u5404\u7ea7\u9875\u8868\u7684\u5927\u5c0f\u4e0d\u80fd\u8d85\u8fc7\u4e00\u4e2a\u9875\u9762 - \u5047\u8bbe\u6ca1\u6709\u5feb\u8868\uff0c\u9700\u8981\u8bbf\u5b583\u6b21 3.1.10 \u57fa\u672c\u5206\u6bb5\u5b58\u50a8\u7ba1\u7406\u65b9\u5f0f \u00b6 \u5206\u6bb5\uff1a\u6309\u7167\u7a0b\u5e8f\u7684\u903b\u8f91\u5212\u5206\u4e3a\u82e5\u5e72\u6bb5\uff0c\u6bcf\u6bb5\u4ece0\u5f00\u59cb\u7f16\u5740 \u6bb5\u8868\uff1a - \u6bb5\u8868\u9879\u7684\u5185\u5bb9\uff1a\u6bb5\u53f7\uff08\u4e0d\u4f1a\u5360\u6bb5\u8868\u7684\u7a7a\u95f4\uff09\uff0c\u6bb5\u957f\uff0c\u57fa\u5740 - \u6bcf\u4e2a\u6bb5\u8868\u9879\u7684\u957f\u5ea6\u662f\u76f8\u540c\u7684 - \u6bb5\u8868\u7684\u5730\u5740\u548c\u957f\u5ea6\u5b58\u5728\u5728\u6bb5\u8868\u5bc4\u5b58\u5668\u4e2d \u5730\u5740\u53d8\u5316\uff1a \u5206\u6bb5\uff0c\u5206\u9875\u7684\u5bf9\u6bd4\uff1a - \u9875\u5bf9\u7528\u6237\u662f\u4e0d\u53ef\u89c1\u7684\uff0c\u6bb5\u5bf9\u7528\u6237\u662f\u53ef\u89c1\u7684 - \u9875\u7684\u5927\u5c0f\u662f\u56fa\u5b9a\u7684 - \u5bf9\u7528\u6237\u6765\u8bf4\uff0c\u5206\u9875\u5730\u5740\u7a7a\u95f4\u662f\u4e00\u7ef4\u7684\uff0c\u5206\u6bb5\u5730\u5740\u7a7a\u95f4\u662f\u4e8c\u7ef4\u7684 - \u5206\u6bb5\u6bd4\u5206\u9875\u5bb9\u6613\u5b9e\u73b0\u4fe1\u606f\u5171\u4eab\u548c\u4fdd\u62a4\uff08\u4e0d\u80fd\u88ab\u4fee\u6539\u7684\u4ee3\u7801\u79f0\u4e3a\u7eaf\u4ee3\u7801\uff0c\u4e0d\u5c5e\u4e8e\u4e34\u754c\u8d44\u6e90\uff0c\u53ef\u4ee5\u5171\u4eab\uff09 - \u8bbf\u5b58\u6b21\u6570\uff1a\u65e0\u5feb\u8868\uff0c\u5355\u7ea7\u9875\u8868\u8981\u4e24\u6b21\uff0c\u5206\u6bb5\u8981\u4e24\u6b21 - \u5206\u6bb5\u7cfb\u7edf\u4e2d\u4e5f\u53ef\u4ee5\u5f15\u5165\u5feb\u8868\u673a\u5236 3.1.11 \u6bb5\u9875\u5f0f\u7ba1\u7406 \u00b6 \u5206\u9875\u3001\u5206\u6bb5\u7684\u4f18\u7f3a\u70b9\uff1a \u5730\u5740\u7ed3\u6784\uff1a \u6bb5\u8868 + \u9875\u8868\uff1a \u4e00\u4e2a\u8fdb\u7a0b\u5bf9\u5e94\u4e00\u4e2a\u6bb5\u8868\uff08\u6bb5\u53f7\uff0c\u6bb5\u957f\uff0c\u9875\u8868\u5b58\u653e\u5757\u53f7\uff09\uff0c\u4e00\u4e2a\u6bb5\u5bf9\u5e94\u4e00\u4e2a\u9875\u8868\uff08\u9875\u53f7\uff0c\u5185\u5b58\u5757\u53f7\uff09\uff1b \u6bb5\u8868\u7684\u8d77\u59cb\u5730\u5740\u548c\u957f\u5ea6\u5b58\u653e\u5728\u6bb5\u8868\u5bc4\u5b58\u5668\u4e2d \u5730\u5740\u8f6c\u6362\uff1a\u5982\u679c\u6ca1\u6709\u5feb\u8868\u9700\u8981\u4e09\u6b21\u8bbf\u5b58\uff1b \u5feb\u8868\u547d\u4e2d\u53ea\u9700\u8981\u4e00\u6b21\u8bbf\u5b58 3.2 \u865a\u62df\u5185\u5b58 \u00b6 3.2.1 \u865a\u62df\u5185\u5b58\u7684\u57fa\u672c\u6982\u5ff5 \u00b6 \u5c40\u90e8\u6027\u539f\u7406\uff1a - \u65f6\u95f4\u5c40\u90e8\u6027 - \u7a7a\u95f4\u5c40\u90e8\u6027 \u4f20\u7edf\u5b58\u50a8\u5668\u7ba1\u7406\u65b9\u5f0f\u7684\u7279\u70b9\uff1a \u4e00\u6b21\u6027 \u9a7b\u7559\u6027 \u865a\u62df\u5185\u5b58\u7279\u5f81\uff1a \u591a\u6b21\u6027 \u5bf9\u6362\u6027 \u865a\u62df\u6027 \u865a\u62df\u5185\u5b58\u7684\u5b9e\u73b0\uff1a\u8bf7\u6c42\u8c03\u9875\u529f\u80fd\uff0c\u9875\u9762\u7f6e\u6362\u529f\u80fd - \u8bf7\u6c42\u5206\u9875\u5b58\u50a8\u7ba1\u7406 - \u8bf7\u6c42\u5206\u6bb5\u5b58\u50a8\u7ba1\u7406 - \u8bf7\u6c42\u6bb5\u9875\u5f0f\u5b58\u50a8\u7ba1\u7406 3.2.2 \u8bf7\u6c42\u5206\u9875\u7ba1\u7406\u65b9\u5f0f \u00b6 \u64cd\u4f5c\u7cfb\u7edf\u8981\u63d0\u4f9b\u7684\u529f\u80fd\uff1a - \u8bf7\u6c42\u8c03\u9875\u529f\u80fd - \u9875\u9762\u7f6e\u6362 \u8bf7\u6c42\u5206\u9875\u7ba1\u7406\u65b9\u5f0f\uff1a - \u9875\u8868\u673a\u5236 - \u7f3a\u9875\u4e2d\u65ad\u673a\u6784 - \u5730\u5740\u53d8\u6362\u673a\u6784 \u9875\u8868\u673a\u5236\uff1a\u8bf7\u6c42\u5206\u9875\u7684\u9875\u8868\u589e\u52a0\u7684\u5185\u5bb9 - \u72b6\u6001\u4f4d\uff1a1 \u8868\u793a\u8c03\u5165\u5185\u5b58 - \u8bbf\u95ee\u5b57\u6bb5\uff1a\u4f9b\u7f6e\u6362\u7b97\u6cd5\u53c2\u8003 - \u4fee\u6539\u4f4d\uff1a\u8c03\u5165\u5185\u5b58\u540e\u662f\u5426\u88ab\u4fee\u6539\u8fc7 - \u5916\u5b58\u5730\u5740 \u7f3a\u9875\u4e2d\u65ad\u673a\u6784\uff1a - \u8981\u8bbf\u95ee\u7684\u9875\u9762\u4e0d\u5728\u5185\u5b58\u4e2d\u65f6\uff0c\u5c31\u4ea7\u751f\u7f3a\u9875\u4e2d\u65ad\uff0c\u6b64\u65f6\u7f3a\u9875\u7684\u8fdb\u7a0b\u963b\u585e\uff0c\u653e\u5165\u963b\u585e\u961f\u5217\uff0c\u8c03\u9875\u5b8c\u6210\u540e\u518d\u5c06\u5176\u5524\u9192\uff0c\u653e\u56de\u5c31\u7eea\u961f\u5217 - \u5982\u679c\u6709\u7a7a\u95f2\u5757\uff0c\u5c31\u5206\u914d\u4e00\u4e2a\u7a7a\u95f2\u5757 - \u5982\u679c\u6ca1\u6709\u7a7a\u95f2\u5757\u5c31\u7531\u9875\u9762\u7f6e\u6362\u7b97\u6cd5\u9009\u62e9\u4e00\u4e2a\u9875\u9762\u6dd8\u6c70\uff1b\u5982\u679c\u4fee\u6539\u8fc7\u8981\u5c06\u5176\u5199\u56de\u5916\u5b58\uff0c\u6ca1\u4fee\u6539\u8fc7\u4e0d\u9700\u8981 - \u7f3a\u9875\u4e2d\u65ad\u662f\u5185\u4e2d\u65ad\u7684\u6545\u969c - \u5982\u679c\u5728\u5feb\u8868\u4e2d\u8868\u793a\u80af\u5b9a\u5728\u5185\u5b58\u4e2d - \u65b0\u589e\u7684\u6b65\u9aa4\uff1a - \u8bf7\u6c42\u8c03\u9875 - \u9875\u9762\u7f6e\u6362 - \u4fee\u6539\u66f4\u65b0\u9875\u8868 3.2.3 \u9875\u9762\u7f6e\u6362\u7b97\u6cd5 \u00b6 \u9875\u9762\u7f6e\u6362\u7b97\u6cd5\uff1a\u8ffd\u6c42\u5c11\u7684\u7f3a\u9875\u7387 - \u6700\u4f73\u7f6e\u6362\u7b97\u6cd5 OPT \u6bcf\u6b21\u6dd8\u6c70\u7684\u9875\u9762\u662f\u4ee5\u540e\u6700\u957f\u65f6\u95f4\u5185\u4e0d\u518d\u88ab\u8bbf\u95ee\u7684\u9875\u9762 - \u5148\u8fdb\u5148\u51fa\u7f6e\u6362\u7b97\u6cd5 FIFO - \u6700\u8fd1\u6700\u4e45\u672a\u4f7f\u7528\u7f6e\u6362\u7b97\u6cd5 LRU \u5728\u8bbf\u95ee\u5b57\u6bb5\u4e2d\u8bbe\u7f6e\u81ea\u4e0a\u6b21\u88ab\u8bbf\u95ee\u4ee5\u6765\u6240\u7ecf\u5386\u7684\u65f6\u95f4 - \u65f6\u949f\u7f6e\u6362\u7b97\u6cd5 CLOCK \u4e5f\u53eb \u6700\u8fd1\u672a\u7528\u7b97\u6cd5 NRU \u8981\u6ce8\u610f\u8bbf\u95ee\u7684\u65f6\u5019\u65f6\u949f\u6307\u9488\u662f\u4e0d\u4f1a\u53d8\u7684 \u5982\u679c\u8bbf\u95ee\u4f4d\u90fd\u662f 1\uff0c\u5219\u626b\u63cf\u5b8c\u4e00\u8f6e\u540e\u628a\u6240\u6709\u8bbf\u95ee\u4f4d\u7f6e 0 \u6700\u591a\u8fdb\u884c 2 \u8f6e\u626b\u63cf - \u6539\u8fdb\u578b\u7684\u65f6\u949f\u7f6e\u6362\u7b97\u6cd5 \u7528\uff08\u8bbf\u95ee\u4f4d\uff0c\u4fee\u6539\u4f4d\uff09\u8868\u793a\u5404\u9875\u9762\u7684\u72b6\u6001 \u7b2c\u4e00\u8f6e\u626b\u63cf\u627e\uff080\uff0c0\uff09 \u7b2c\u4e8c\u8f6e\u626b\u63cf\u627e\uff080\uff0c1\uff09\uff0c\u626b\u63cf\u65f6\u8981\u628a\u8bbf\u95ee\u4f4d\u7f6e 0\uff0c\u5982\u679c\u6ca1\u627e\u5230\u8bbf\u95ee\u4f4d\u5168\u90e8\u7f6e0 \u7b2c\u4e09\u8f6e\u626b\u63cf\u627e\uff080\uff0c0\uff09 \u7b2c\u56db\u8f6e\u626b\u63cf\u627e\uff080\uff0c1\uff09 Belady \u5f02\u5e38\uff1a\u4e3a\u8fdb\u7a0b\u5206\u914d\u7684\u7269\u7406\u5757\u6570\u589e\u5927\u65f6\uff0c\u7f3a\u9875\u7684\u6b21\u6570\u4e0d\u51cf\u53cd\u589e\u7684\u5f02\u5e38\u73b0\u8c61\uff1b\u53ea\u6709FIFO\u624d\u4f1a\u6709 3.2.4 \u9875\u9762\u5206\u914d\u7b56\u7565 \u00b6 \u9a7b\u7559\u96c6\uff1a\u8bf7\u6c42\u5206\u9875\u5b58\u50a8\u7ba1\u7406\u4e2d\u7ed9\u8fdb\u7a0b\u5206\u914d\u7684\u7269\u7406\u5757\u7684\u96c6\u5408\uff1b\u4e0d\u80fd\u592a\u5927\uff0c\u4e5f\u4e0d\u80fd\u592a\u5c0f \u9875\u9762\u5206\u914d\uff1a - \u56fa\u5b9a\u5206\u914d\uff1a - \u53ef\u53d8\u5206\u914d\uff1a\u9a7b\u7559\u96c6\u5927\u5c0f\u53ef\u53d8 \u7f6e\u6362\u7b56\u7565\uff1a - \u5c40\u90e8\u7f6e\u6362\uff1a\u53d1\u751f\u7f3a\u9875\u65f6\u53ea\u80fd\u9009\u81ea\u5df1\u8fdb\u7a0b\u7684\u7269\u7406\u5757\u8fdb\u884c\u7f6e\u6362 - \u5168\u5c40\u7f6e\u6362\uff1a\u53ef\u4ee5\u5c06\u7a7a\u95f2\u7684\u7269\u7406\u5757\u5206\u914d\u7ed9\u7f3a\u9875\u8fdb\u7a0b\uff0c\u4e5f\u53ef\u4ee5\u5c06\u522b\u7684\u8fdb\u7a0b\u6301\u6709\u7684\u7269\u7406\u5757\u7f6e\u6362\u5230\u5916\u5b58\uff0c\u518d\u5206\u914d\u7ed9\u7f3a\u9875\u8fdb\u7a0b \u4e0d\u5b58\u5728\u56fa\u5b9a\u5206\u914d+\u5168\u5c40\u7f6e\u6362 \u53ef\u53d8\u5206\u914d\u5168\u5c40\u7f6e\u6362\uff1a\u53ea\u8981\u7f3a\u9875\u5c31\u5206\u914d\u65b0\u7684\u7269\u7406\u5757 \u53ef\u53d8\u5206\u914d\u5c40\u90e8\u7f6e\u6362\uff1a\u66f4\u5177\u53d1\u751f\u7f3a\u9875\u7684\u9891\u7387\u52a8\u6001\u589e\u52a0\u6216\u51cf\u5c11\u8fdb\u7a0b\u7684\u7269\u7406\u5757 \u7269\u7406\u5757\u8c03\u5165\u7b97\u6cd5\uff1a \u5e73\u5747\u5206\u914d\u7b97\u6cd5\uff1a\u7a7a\u95f2\u5757\u5e73\u5747\u5206\u914d\u7ed9\u5404\u8fdb\u7a0b \u6309\u6bd4\u4f8b\u5206\u914d\u7b97\u6cd5\uff1a\u6309\u7167\u8fdb\u7a0b\u5927\u5c0f\u6309\u6bd4\u4f8b\u5206\u914d \u4f18\u5148\u6743\u5206\u914d\u7b97\u6cd5\uff1a\u4f18\u5148\u7ea7\u5927\u7684\u5206\u914d\u591a\u4e00\u4e9b\u7684\u7269\u7406\u5757 \u4f55\u65f6\u8c03\u5165\u9875\u9762\uff1a - \u9884\u8c03\u9875\u7b56\u7565\uff1a\u8fd0\u884c\u524d\u8c03\u5165 - \u8bf7\u6c42\u8c03\u9875\u7b56\u7565\uff1a\u8fd0\u884c\u65f6\u8c03\u5165 \u4ece\u4f55\u5904\u8c03\u5165\u9875\u9762\uff1a\u5916\u5b58\u4e2d\u5bf9\u6362\u533a\uff08\u8fde\u7eed\u5206\u914d\uff09\u7684\u901f\u5ea6\u6bd4\u6587\u4ef6\u533a\uff08\u79bb\u6563\u5206\u914d\uff09\u5feb 3.2.5 \u6296\u52a8\u548c\u5de5\u4f5c\u96c6 \u00b6 \u6296\u52a8 / \u98a0\u7c38\uff1a\u9891\u7e41\u7684\u9875\u9762\u8c03\u5ea6\u884c\u4e3a;\u539f\u56e0\uff1a\u5206\u914d\u7ed9\u8fdb\u7a0b\u7684\u7269\u7406\u5757\u4e0d\u591f\uff1b\u539f\u56e0\u662f\u540c\u65f6\u8fd0\u884c\u7684\u8fdb\u7a0b\u592a\u591a\uff0c\u4ece\u800c\u5206\u914d\u7ed9\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u7269\u7406\u5757\u592a\u5c11 \u5de5\u4f5c\u96c6\uff1a - \u67d0\u6bb5\u65f6\u95f4\u95f4\u9694\u91cc\uff0c\u8fdb\u7a0b\u5b9e\u9645\u8bbf\u95ee\u9875\u9762\u7684\u96c6\u5408; - \u8bbe\u5b9a\u4e00\u4e2a\u7a97\u53e3\u5c3a\u5bf8\uff0c\u4ece\u5f53\u524d\u8bbf\u95ee\u7684\u9875\u9762\u5f80\u524d\u770b\u7a97\u53e3\u5c3a\u5bf8\u7684\u5927\u5c0f\u4e2a\u9875\u9762\uff0c\u8fd9\u4e2a\u96c6\u5408\u5c31\u662f\u5de5\u4f5c\u96c6\uff1b - \u5de5\u4f5c\u96c6\u7684\u5927\u5c0f\u53ef\u80fd\u5c0f\u4e8e\u7a97\u53e3\u5c3a\u5bf8 - \u4e00\u822c\u6765\u8bf4\uff0c\u9a7b\u7559\u96c6\u7684\u5927\u5c0f\u4e0d\u80fd\u5c0f\u4e8e\u5de5\u4f5c\u96c6\u5927\u5c0f \u865a\u62df\u5b58\u50a8\u5668\u6027\u80fd\u5f71\u54cd\u56e0\u7d20\uff1a \u9875\u9762\u5927\uff1a\u7f3a\u9875\u7387\u4f4e\uff0c\u51cf\u5c0f\u9875\u8868\u957f\u5ea6\uff0c\u4f46\u662f\u788e\u7247\u591a \u9875\u9762\u5c0f\uff1a\u7f3a\u9875\u7387\u9ad8\uff0c\u51cf\u5c11\u788e\u7247\uff0c\u63d0\u9ad8\u5185\u5b58\u5229\u7528\u7387\uff0c\u4f46\u662f\u9875\u8868\u957f *\u5730\u5740\u7ffb\u8bd1\uff1a\u4e0e\u8ba1\u7ec4\u76f8\u5173 4 \u6587\u4ef6\u7ba1\u7406 \u00b6 4.1 \u6587\u4ef6 \u00b6 4.1.1 \u521d\u8bc6\u6587\u4ef6\u7ba1\u7406 \u00b6 4.1.2 \u6587\u4ef6\u76ee\u5f55 \u00b6 FCB \u7684\u6709\u5e8f\u96c6\u5408\u5c31\u662f\u6587\u4ef6\u76ee\u5f55\uff0c\u4e00\u4e2a FCB \u662f\u6587\u4ef6\u76ee\u5f55\u9879 \u6587\u4ef6\u76ee\u5f55\uff1a \u6587\u4ef6\u63a7\u5236\u5757\uff1a FCB\uff0c\u76ee\u5f55\u6587\u4ef6\u4e2d\u7684\u4e00\u6761\u8bb0\u5f55\u5c31\u662f\u4e00\u4e2a FCB \u8bb0\u5f55\u4e2d\u6700\u91cd\u8981\u6700\u57fa\u672c\u7684\u662f\u6587\u4ef6\u540d\u548c\u6587\u4ef6\u5b58\u653e\u7684\u7269\u7406\u5730\u5740 \u5bf9\u76ee\u5f55\u7684\u64cd\u4f5c\uff1a\u641c\u7d22\uff0c\u521b\u5efa\u6587\u4ef6\uff0c\u5220\u9664\u6587\u4ef6\uff0c\u663e\u793a\u76ee\u5f55\uff0c\u4fee\u6539\u76ee\u5f55 \u76ee\u5f55\u7ed3\u6784 \u5355\u7ea7\u76ee\u5f55\u7ed3\u6784\uff1a\u4e0d\u5141\u8bb8\u6587\u4ef6\u91cd\u540d\uff1b\u4e0d\u9002\u7528\u591a\u7528\u6237\u7cfb\u7edf \u4e24\u7ea7\u76ee\u5f55\u7ed3\u6784\uff1a\u4e3b\u6587\u4ef6\u76ee\u5f55\u548c\u7528\u6237\u6587\u4ef6\u76ee\u5f55 \u591a\u7ea7\u76ee\u5f55\u7ed3\u6784\uff1a\u6811\u5f62\u76ee\u5f55\u7ed3\u6784\uff1b\u7edd\u5bf9\u8def\u5f84\uff0c\u76f8\u5bf9\u8def\u5f84\uff1b \u65e0\u73af\u56fe\u76ee\u5f55\u7ed3\u6784\uff1a\u5171\u4eab\u8ba1\u6570\u5668\uff1b\u65b9\u4fbf\u5b9e\u73b0\u6587\u4ef6\u5171\u4eab \u7d22\u5f15\u7ed3\u70b9\uff1aFCB\u7684\u6539\u8fdb\uff1b\u628a FCB \u9664\u6587\u4ef6\u540d\u4e4b\u5916\u7684\u4fe1\u606f\u653e\u5728\u7d22\u5f15\u7ed3\u70b9\u4e2d\uff0c\u76ee\u5f55\u8868\u53ea\u7559\u6587\u4ef6\u540d\u548c\u6307\u5411\u7d22\u5f15\u7ed3\u70b9\u7684\u6307\u9488 4.1.3 \u6587\u4ef6\u7684\u903b\u8f91\u7ed3\u6784 \u00b6 \u6587\u4ef6\u7684\u903b\u8f91\u7ed3\u6784\uff1a\u7528\u6237\u89c6\u89d2\u7684\u7ed3\u6784 - \u65e0\u7ed3\u6784\u6587\u4ef6 / \u6d41\u5f0f\u6587\u4ef6\uff1a\u5982 txt - \u6709\u7ed3\u6784\u6587\u4ef6 / \u8bb0\u5f55\u5f0f\u6587\u4ef6\uff1a\u5982\u6570\u636e\u5e93\u8868\uff0c\u6bcf\u6761\u8bb0\u5f55\u6709\u4e00\u4e2a\u6570\u636e\u9879\u53ef\u4ee5\u4f5c\u4e3a\u5173\u952e\u5b57 \u5b9a\u957f\u8bb0\u5f55 \u53ef\u53d8\u957f\u8bb0\u5f55 \u6709\u7ed3\u6784\u6587\u4ef6\u7684\u903b\u8f91\u7ed3\u6784\uff1a - \u987a\u5e8f\u6587\u4ef6 - \u7d22\u5f15\u6587\u4ef6\uff1a\u5efa\u7acb\u7d22\u5f15\u8868 - \u7d22\u5f15\u987a\u5e8f\u6587\u4ef6 4.1.4 \u6587\u4ef6\u7684\u7269\u7406\u7ed3\u6784 \u00b6 OS \u5bf9\u78c1\u76d8\u5757\u7684\u7ba1\u7406\uff1a - \u5bf9\u975e\u7a7a\u95f2\u78c1\u76d8\u5757\u7684\u7ba1\u7406\uff1a\u6587\u4ef6\u7684\u7269\u7406\u7ed3\u6784/\u6587\u4ef6\u5206\u914d\u65b9\u5f0f - \u5bf9\u7a7a\u95f2\u78c1\u76d8\u5757\u7684\u7ba1\u7406\uff1a\u6587\u4ef6\u5b58\u50a8\u7a7a\u95f4\u7ba1\u7406 \u6587\u4ef6\u5757\u3001\u78c1\u76d8\u5757\u7684\u5927\u5c0f\u548c\u5185\u5b58\u5757/\u9875\u9762\u4e00\u6837\u5927;\u6240\u4ee5\u6587\u4ef6\u7684\u903b\u8f91\u5730\u5740\u53ef\u4ee5\u8868\u793a\u4e3a\uff08\u903b\u8f91\u5757\u53f7\uff0c\u5757\u5185\u5730\u5740\uff09 \u6587\u4ef6\u7684\u7269\u7406\u7ed3\u6784 / \u6587\u4ef6\u5206\u914d\u65b9\u5f0f\uff1a - \u8fde\u7eed\u5206\u914d\uff1a \u6bcf\u4e2a\u6587\u4ef6\u5728\u78c1\u76d8\u4e0a\u5360\u6709\u8fde\u7eed\u7684\u5757\uff1b \u7269\u7406\u5757\u53f7=\u8d77\u59cb\u5757\u53f7\uff08\u67e5\u8868\uff09+\u903b\u8f91\u5757\u53f7\uff1b \u62d3\u5c55\u6587\u4ef6\u4e0d\u65b9\u4fbf - \u94fe\u63a5\u5206\u914d \u9690\u5f0f\u94fe\u63a5 \u663e\u793a\u94fe\u63a5\uff1a\u6587\u4ef6\u5206\u914d\u8868 FAT;\u56e0\u4e3a\u53ea\u9700\u8981\u67e5\u627eFAT\uff0c\u6240\u4ee5\u4e5f\u7b97\u662f\u652f\u6301\u968f\u673a\u8bbf\u95ee\uff1b\u4e00\u4e2a\u78c1\u76d8\u4e00\u5f20 FAT - \u7d22\u5f15\u5206\u914d: \u4e3a\u6bcf\u4e2a\u6587\u4ef6\u5efa\u7acb\u4e00\u5f20\u7d22\u5f15\u8868\uff0c\u662f\u903b\u8f91\u5757\u53f7\u5230\u7269\u7406\u5757\u53f7\u7684\u6620\u5c04\uff1b \u7d22\u5f15\u8868\u4e2d\u7684\u5185\u5bb9\u4e5f\u5b58\u653e\u5728\u4e00\u4e2a\u78c1\u76d8\u5757\u4e2d\uff0c\u53eb\u7d22\u5f15\u5757\uff1b \u76ee\u5f55\u4e2d\u9700\u8981\u8bb0\u5f55\u6bcf\u4e2a\u6587\u4ef6\u7684\u7d22\u5f15\u5757\uff1b \u5982\u679c\u4e00\u4e2a\u78c1\u76d8\u5757\u5b58\u4e0d\u4e0b\u67d0\u6587\u4ef6\u7684\u7d22\u5f15\u8868\u7684\u89e3\u51b3\u65b9\u6848\uff1a \u94fe\u63a5\u65b9\u6848\uff1a\u4e00\u4e2a\u6587\u4ef6\u9700\u8981\u7684\u7d22\u5f15\u5757\u7279\u522b\u591a\u65f6\u6548\u7387\u4f4e \u591a\u5c42\u7d22\u5f15\uff1a\u76ee\u5f55\u4e2d\u8bb0\u5f55\u9876\u7ea7\u7d22\u5f15\u8868\u7684\u78c1\u76d8\u5757 \u6df7\u5408\u7d22\u5f15 \u8fde\u7eed\u5206\u914d\uff1a \u94fe\u63a5\u5206\u914d\uff1a \u7d22\u5f15\u5206\u914d\uff1a \u603b\u7ed3\uff1a 4.1.5 \u6587\u4ef6\u5b58\u50a8\u7a7a\u95f4\u7ba1\u7406 \u00b6 \u5b58\u50a8\u7a7a\u95f4\u7684\u5212\u5206\u4e0e\u521d\u59cb\u5316\uff1a \u7ba1\u7406\u65b9\u5f0f\uff1a - \u7a7a\u95f2\u8868\u6cd5 - \u7a7a\u95f2\u94fe\u8868\u6cd5 \u7a7a\u95f2\u76d8\u5757\u94fe:\u5206\u914d\u548c\u56de\u6536\u7684\u65f6\u5019\u90fd\u662f\u4fee\u6539\u94fe\u5934\u548c\u94fe\u5c3e\u6307\u9488\uff1b\u9002\u5408\u79bb\u6563\u5206\u914d \u7a7a\u95f2\u76d8\u533a\u94fe\uff1a - \u4f4d\u793a\u56fe\u6cd5\uff1a\u7528\u4e8c\u8fdb\u5236\u4f4d\u8868\u793a\uff1b\uff08\u5b57\u53f7\uff0c\u4f4d\u53f7\uff09\u548c \u76d8\u5757\u53f7 \u4e4b\u95f4\u7684\u76f8\u4e92\u8f6c\u6362 - \u6210\u7ec4\u94fe\u63a5\u6cd5 4.1.6 \u6587\u4ef6\u7684\u57fa\u672c\u64cd\u4f5c \u00b6 4.1.7 \u6587\u4ef6\u5171\u4eab \u00b6 \u6587\u4ef6\u5171\u4eab\uff1a\u5171\u4eab\u610f\u5473\u7740\u53ea\u6709\u4e00\u4efd\u6587\u4ef6 - \u57fa\u4e8e\u7d22\u5f15\u7ed3\u70b9\u7684\u5171\u4eab\u65b9\u5f0f\uff08\u786c\u94fe\u63a5\uff09 - \u57fa\u4e8e\u7b26\u53f7\u94fe\u7684\u5171\u4eab\u65b9\u5f0f\uff08\u8f6f\u94fe\u63a5\uff09 4.1.8 \u6587\u4ef6\u4fdd\u62a4 \u00b6 \u6587\u4ef6\u4fdd\u62a4\uff1a - \u53e3\u4ee4\u4fdd\u62a4 - \u52a0\u5bc6\u4fdd\u62a4 - \u8bbf\u95ee\u63a7\u5236\uff1a\u8bbf\u95ee\u63a7\u5236\u8868\uff0c\u7cbe\u7b80\u7684\u8bbf\u95ee\u63a7\u5236\u8868\uff08\u5206\u7ec4\uff09 4.1.9 \u6587\u4ef6\u7cfb\u7edf\u7684\u5c42\u6b21\u7ed3\u6784 \u00b6 4.2 \u78c1\u76d8 \u00b6 4.2.1 \u78c1\u76d8\u7684\u7ed3\u6784 \u00b6 \u78c1\u76d8\u3001\u78c1\u9053\u3001\u6247\u533a \u76d8\u9762\u3001\u67f1\u9762 \uff08\u67f1\u9762\u53f7\u3001\u76d8\u9762\u53f7\u3001\u6247\u533a\u53f7\uff09 \u78c1\u76d8\u7684\u5206\u7c7b\uff1a - \u6d3b\u52a8\u5934\u78c1\u76d8\u3001\u56fa\u5b9a\u5934\u78c1\u76d8 - \u53ef\u6362\u76d8\u78c1\u76d8\u3001\u56fa\u5b9a\u76d8\u78c1\u76d8 4.2.2 \u78c1\u76d8\u8c03\u5ea6\u7b97\u6cd5 \u00b6 \u5bfb\u627e\u65f6\u95f4\uff1a\u542f\u52a8\u78c1\u5934\u81c2+\u79fb\u52a8\u78c1\u5934 \u5ef6\u8fdf\u65f6\u95f4\uff1a\u65cb\u8f6c\u78c1\u76d8\u5230\u6307\u5b9a\u6247\u533a\uff0c \\(T_r=(1/2)*(1/r)=1/2r\\) \uff0cr\u4e3a\u78c1\u76d8\u8f6c\u901f \u4f20\u8f93\u65f6\u95f4\uff1a\u8bfb\u5165\u6216\u5199\u5165\u65f6\u95f4\uff0c \\(T_t=(1/r)*(b/N)=b/(rN)\\) \uff0cb\u4e3a\u8bfb/\u5199\u7684\u5b57\u8282\u6570\uff0cN\u4e3a\u78c1\u9053\u4e0a\u7684\u5b57\u8282\u6570 \u78c1\u76d8\u8c03\u5ea6\u7b97\u6cd5\uff1a - \u5148\u6765\u5148\u670d\u52a1 / FCFS\uff1a - \u6700\u77ed\u5bfb\u627e\u65f6\u95f4\u4f18\u5148 / SSTF\uff1a\u53ef\u80fd\u4f1a\u9965\u997f - \u626b\u63cf\u7b97\u6cd5 / SCAN / \u7535\u68af\u7b97\u6cd5\uff1a \u4e0d\u4f1a\u6709\u9965\u997f - LOOK \u8c03\u5ea6\u7b97\u6cd5\uff1a\u626b\u63cf\u7b97\u6cd5\u63d0\u524d\u6539\u53d8\u78c1\u5934\u79fb\u52a8\u65b9\u5411 - C-SCAN\u7b97\u6cd5\uff1a\u53ea\u6709\u5f80\u67d0\u4e2a\u65b9\u5411\u79fb\u52a8\u624d\u5904\u7406\u8bf7\u6c42\uff0c\u5373\u5230\u5934\u540e\u91cc\u9762\u56de\u5230\u8d77\u70b9\uff0c\u4e2d\u9014\u4e0d\u5904\u7406 - C-LOOK\u7b97\u6cd5\uff1a 4.2.3 \u51cf\u5c11\u78c1\u76d8\u5ef6\u65f6\u65f6\u95f4\u7684\u65b9\u6cd5 \u00b6 \u78c1\u76d8\u5730\u5740\u7684\u7ed3\u6784\u8bbe\u8ba1\uff1a\uff08\u67f1\u9762\u53f7\u3001\u76d8\u9762\u53f7\u3001\u6247\u533a\u53f7\uff09\uff1b\u5982\u679c\u662f\uff08\u76d8\u9762\u53f7\u3001\u67f1\u9762\u53f7\u3001\u6247\u533a\u53f7\uff09\uff0c\u5728\u8fde\u7eed\u8bfb\u53d6\u6570\u636e\u65f6\u79fb\u52a8\u78c1\u5934\u7684\u6b21\u6570\u4f1a\u591a \u4ea4\u66ff\u7f16\u53f7\uff1a\u5982\u679c\u7f16\u53f7\u662f\u8fde\u7eed\u7684\uff0c\u5728\u5230\u8fbe\u4e0b\u4e00\u4e2a\u6247\u533a\u65f6\u6ca1\u6cd5\u7acb\u5373\u8bfb\u597d\u6570\u636e\uff0c\u5c31\u9700\u8981\u518d\u8f6c\u4e00\u5708 \u9519\u4f4d\u547d\u540d\uff1a\u4e0d\u540c\u7684\u76d8\u9762\u662f\u4e00\u8d77\u8f6c\u7684\uff0c\u548c\u4ea4\u66ff\u7f16\u53f7\u7684\u539f\u56e0\u7c7b\u4f3c\uff0c\u8bfb\u53d6\u4e0b\u4e00\u4e2a\u76d8\u9762\u6247\u533a\u65f6\u5982\u679c\u662f\u9519\u4f4d\u547d\u540d\u7684\uff0c\u53ef\u4ee5\u5c11\u8f6c\u4e00\u4e9b\u5c31\u8bfb\u5230\u8981\u8bfb\u7684\u6570\u636e 4.2.4 \u78c1\u76d8\u521d\u59cb\u5316 \u00b6 \u6b65\u9aa4\uff1a \u4f4e\u7ea7\u683c\u5f0f\u5316 / \u7269\u7406\u683c\u5f0f\u5316\uff1a\u5934\u3001\u6570\u636e\u533a\u3001\u5c3e \u5206\u533a\uff1a \u903b\u8f91\u683c\u5f0f\u5316\uff1a\u5982\u521b\u5efa\u4f4d\u793a\u56fe\uff0c\u7a7a\u95f2\u5206\u533a\u8868 \u5f15\u5bfc\u5757\uff1a \u574f\u5757\u7684\u7ba1\u7406\uff1a IO \u00b6 5.1 IO\u8bbe\u5907 \u00b6 5.1.1 IO\u8bbe\u5907\u7684\u6982\u5ff5\u548c\u5206\u7c7b \u00b6 \u6309\u4f7f\u7528\u7279\u6027\u5206\u7c7b\uff1a - \u4eba\u673a\u4ea4\u4e92\u7c7b\u5916\u90e8\u8bbe\u5907 - \u5b58\u50a8\u8bbe\u5907 - \u7f51\u7edc\u901a\u4fe1\u8bbe\u5907 \u6309\u4f20\u8f93\u901f\u7387\uff1a - \u4f4e\u901f - \u4e2d\u901f - \u9ad8\u901f \u6309\u4fe1\u606f\u4ea4\u6362\u7684\u5355\u4f4d\uff1a - \u5757\u8bbe\u5907\uff1a\u4f20\u8f93\u5feb\uff0c\u53ef\u5bfb\u5740 - \u5b57\u7b26\u8bbe\u5907\uff1a\u4f20\u8f93\u6162\uff0c\u4e0d\u53ef\u5bfb\u5740\uff0c\u5e38\u4f7f\u7528\u4e2d\u65ad\u9a71\u52a8\u65b9\u5f0f 5.1.2 IO\u63a7\u5236\u5668 \u00b6 IO\u8bbe\u5907\u7531 \u673a\u68b0\u90e8\u4ef6 \u548c \u7535\u5b50\u90e8\u4ef6\uff08IO\u63a7\u5236\u5668\uff0c\u8bbe\u5907\u63a7\u5236\u5668\uff09\u7ec4\u6210 IO\u63a7\u5236\u5668\u7684\u529f\u80fd\uff1a IO\u63a7\u5236\u5668\u7684\u7ec4\u6210\uff1a 5.1.3 IO\u63a7\u5236\u65b9\u5f0f \u00b6 \u7a0b\u5e8f\u63a7\u5236\uff1a \u4e2d\u65ad\u9a71\u52a8\u65b9\u5f0f\uff1a DMA\u65b9\u5f0f\uff1a \u901a\u9053\u63a7\u63a7\u5236\u65b9\u5f0f\uff1a \u603b\u7ed3\uff1a 5.1.4 IO\u8f6f\u4ef6\u5c42\u6b21\u7ed3\u6784 \u00b6 \u7528\u6237\u5c42\u8f6f\u4ef6 \u8bbe\u5907\u72ec\u7acb\u6027\u8f6f\u4ef6\uff1a\u53c8\u79f0\u8bbe\u5907\u65e0\u5173\u6027\u8f6f\u4ef6 \u4e3b\u8981\u5b9e\u73b0\u7684\u529f\u80fd\uff1a 1 \u5411\u4e0a\u5c42\u63d0\u4f9b\u540c\u4e00\u7684\u8c03\u7528\u63a5\u53e3 \u5982 read/write 2 \u8bbe\u5907\u7684\u4fdd\u62a4 / \u6587\u4ef6\u7684\u4fdd\u62a4\uff1a\u8bbf\u95ee\u6743\u9650 3 \u5dee\u9519\u5904\u7406 4 \u8bbe\u5907\u7684\u5206\u914d\u548c\u56de\u6536 5 \u6570\u636e\u7f13\u51b2\u533a\u5904\u7406 6 \u5efa\u7acb\u903b\u8f91\u8bbe\u5907\u540d\u5230\u7269\u7406\u8bbe\u5907\u540d\u7684\u6620\u5c04\u5173\u7cfb\uff1a \u903b\u8f91\u8bbe\u5907\u8868 LUT\uff1a\u6574\u4e2a\u7cfb\u7edf\u8bbe\u7f6e\u4e00\u5f20LUT \u6216\u8005 \u4e3a\u6bcf\u4e2a\u7528\u6237\u8bbe\u7f6e\u4e00\u5f20LUT \u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f \u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f \u786c\u4ef6 5.1.5 IO\u6838\u5fc3\u5b50\u7cfb\u7edf \u00b6 5.1.6 \u5047\u8131\u673a\u6280\u672f \u00b6 \u8131\u673a\u6280\u672f\uff1a\u8131\u79bb\u4e3b\u673a\u63a7\u5236\u8fdb\u884c IO \u5047\u8131\u673a\u6280\u672f / SPooling \u6280\u672f\uff1a 5.1.7 \u8bbe\u5907\u7684\u5206\u914d\u4e0e\u56de\u6536 \u00b6 \u8bbe\u5907\u5206\u914d\u65f6\u5e94\u8003\u8651\u7684\u56e0\u7d20 - \u8bbe\u5907\u7684\u56fa\u6709\u5c5e\u6027 - \u8bbe\u5907\u5206\u914d\u7b97\u6cd5 - \u8bbe\u5907\u5206\u914d\u4e2d\u7684\u5b89\u5168\u6027\uff1a \u5b89\u5168\u5206\u914d\u65b9\u5f0f\uff1a\u4f18\u70b9\u662f\u4e0d\u4f1a\u6b7b\u9501\uff0c\u7f3a\u70b9\u662fCPU\u548cIO\u53ea\u80fd\u4e32\u884c\u5de5\u4f5c \u4e0d\u5b89\u5168\u5206\u914d\u65b9\u5f0f\uff1a\u4f18\u70b9\u662f\u8fdb\u7a0b\u7684\u8ba1\u7b97\u4efb\u52a1\u548cIO\u53ef\u4ee5\u5e76\u884c\u5904\u7406\uff0c\u7f3a\u70b9\u662f\u53ef\u80fd\u6b7b\u9501 \u8bbe\u5907\u7684\u5206\u914d\u65b9\u5f0f\uff1a \u72ec\u5360\u8bbe\u5907\uff1a\u8fdb\u7a0b\u72ec\u5360\u8bbe\u5907 \u5171\u4eab\u8bbe\u5907\uff1a\u53ef\u4ee5\u540c\u65f6\u5206\u914d\u7ed9\u591a\u4e2a\u8bbe\u5907 \u865a\u62df\u8bbe\u5907\uff1aspooling \u6280\u672f \u9759\u6001\u5206\u914d\u4e0e\u52a8\u6001\u5206\u914d - \u9759\u6001\u5206\u914d\uff1a\u8fdb\u7a0b\u8fd0\u884c\u524d\u4e3a\u5176\u5206\u914d\u6240\u6709\u7684\u8d44\u6e90\uff0c\u7834\u574f\u4e86 \u8bf7\u6c42\u548c\u4fdd\u6301\u6761\u4ef6\uff0c\u4e0d\u4f1a\u6b7b\u9501 - \u52a8\u6001\u5206\u914d\uff1a\u8fdb\u7a0b\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u52a8\u6001\u7533\u8bf7\u8bbe\u5907\u8d44\u6e90 \u8bbe\u5907\u5206\u914d\u7ba1\u7406\u4e2d\u7684\u6570\u636e\u7ed3\u6784 DCT COCT CHCT SDT \u8bbe\u5907\u5206\u914d\u7684\u6b65\u9aa4 \u8bbe\u5907\u5206\u914d\u6b65\u9aa4\u7684\u6539\u8fdb\uff1a\u52a0\u4e0a\u903b\u8f91\u8bbe\u5907\u540d\u5230\u7269\u7406\u8bbe\u5907\u540d\u7684\u6620\u5c04 \u603b\u7ed3\uff1a 5.1.8 \u7f13\u51b2\u533a\u7ba1\u7406 \u00b6 \u7f13\u51b2\u533a\u7684\u4f5c\u7528\uff1a - \u7f13\u548cCPU\u548cIO\u8bbe\u5907\u4e4b\u95f4\u901f\u5ea6\u4e0d\u5339\u914d\u7684\u77db\u76fe - \u51cf\u5c11\u5bf9CPU\u7684\u4e2d\u65ad\u9891\u7387\uff0c\u653e\u5bbd\u5bf9CPU\u4e2d\u65ad\u76f8\u5e94\u65f6\u95f4\u7684\u9650\u5236 - \u89e3\u51b3\u6570\u636e\u9897\u7c92\u5ea6\u4e0d\u5339\u914d\u7684\u95ee\u9898\uff1a\u5426\u5219IO\u8bbe\u5907\u6ca1\u8f93\u51fa\u5b8c\u4e00\u4e2a\u5b57\u7b26\u90fd\u8981\u60f3CPU\u53d1\u9001\u4e2d\u65ad\u4fe1\u53f7 - \u63d0\u9ad8CPU\u548cIO\u8bbe\u5907\u4e4b\u95f4\u7684\u5e76\u884c\u6027 \u5355\u7f13\u51b2\uff1a \u53cc\u7f13\u51b2\uff1a \u7ed3\u8bba\uff1aMax(T, C+M) \u4f7f\u7528\u5355/\u53cc\u7f13\u51b2\u533a\u5728\u901a\u4fe1\u4e2d\u7684\u533a\u522b\uff1a\u5355\u7f13\u51b2\u53ea\u80fd\u534a\u53cc\u5de5\uff0c\u53cc\u7f13\u51b2\u53ef\u4ee5\u5168\u53cc\u5de5 \u5faa\u73af\u7f13\u51b2\u533a\uff1a \u7f13\u51b2\u6c60\uff1a \u603b\u7ed3\uff1a","title":"\u64cd\u4f5c\u7cfb\u7edf"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#_1","text":"\u738b\u9053\u8ba1\u7b97\u673a\u8003\u7814 \u6570\u636e\u7ed3\u6784_\u54d4\u54e9\u54d4\u54e9_bilibili","title":"\u64cd\u4f5c\u7cfb\u7edf"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#0","text":"0.2 \u8fdb\u7a0b \u4e3a\u4ec0\u4e48\u8981\u5f15\u5165\u8fdb\u7a0b\uff1a\u5728\u591a\u9053\u7a0b\u5e8f\u7684\u80cc\u666f\u4e0b\u5982\u679c\u53ea\u6709\u7a0b\u5e8f\u65e0\u6cd5\u5f88\u597d\u7684\u5b9e\u73b0\u5e76\u53d1\uff0c\u56e0\u4e3a\u7a0b\u5e8f\u662f\u9759\u6001\u7684\u6982\u5ff5\uff0c\u65e0\u6cd5\u63cf\u8ff0\u7a0b\u5e8f\u5728\u5185\u5b58\u4e2d\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u5f15\u5165\u8fdb\u7a0b\u3002 \u4ec0\u4e48\u662f\u8fdb\u7a0b\uff1f\u8fdb\u7a0b\u7684\u7ec4\u6210\uff1a\u8fdb\u7a0b\u662f\u7a0b\u5e8f\u4e00\u6b21\u6267\u884c\u7684\u52a8\u6001\u8fc7\u7a0b\uff1b\u8fdb\u7a0b\u5b9e\u4f53\u7531\u7a0b\u5e8f\u6bb5\uff0c\u6570\u636e\u6bb5\uff0cPCB\u7ec4\u6210\uff1b \u7ebf\u7a0b\u7684\u6982\u5ff5\uff1a... \u8fdb\u7a0b\u4e2d\u4f7f\u7528\u7279\u6743\u6307\u4ee4\u8981\u628a PSW \u7684\u4e00\u4e2a\u72b6\u6001\u4f4d\u6539\u6210 \u6838\u5fc3\u6001\uff0c\u800c\u7ebf\u7a0b\u7684\u7528\u6237\u7ea7\u7ebf\u7a0b\u548c\u6838\u5fc3\u7ea7\u7ebf\u7a0b\u5206\u522b\u5bf9\u5e94\u7528\u6237\u7a7a\u95f4\u548c\u6838\u5fc3\u7a7a\u95f4\uff0c\u662f\u5bf9\u5185\u5b58\u7684\u5212\u5206 \u76f8\u5173\u94fe\u63a51 \u76f8\u5173\u94fe\u63a52 \u4e3a\u4ec0\u4e48\u8981\u5904\u7406\u673a\u8c03\u5ea6\uff1a\u589e\u52a0 CPU \u7684\u5229\u7528\u7387\uff0c\u4e0d\u540c\u7684\u8c03\u5ea6\u7b97\u6cd5\u53ef\u4ee5\u6ee1\u8db3\u4e0d\u540c\u7684\u8981\u6c42 \u666e\u901a\u7684\u4fe1\u53f7\u91cf\u673a\u5236\uff08\u7528 while\uff09\u662f\u4e0d\u6ee1\u8db3\u8ba9\u6743\u7b49\u5f85\u7684\uff0c\u7b49\u5f85\u8d44\u6e90\u7684\u8fdb\u7a0b\u4efb\u7136\u4f1a\u5360\u7528 CPU \u8d44\u6e90\uff1b\u7ba1\u7a0b\u4e2d x.wait\uff1a\u5c06\u6b63\u5728\u8bbf\u95ee\u7ba1\u7a0b\u7684\u8fdb\u7a0b\u653e\u5230 x \u7684\u7b49\u5f85\u961f\u5217\u4e0a\uff0c\u5e76\u91ca\u653e\u7ba1\u7a0b\uff1bx.signal\uff1a\u4ece\u963b\u585e\u961f\u5217\u4e2d\u5524\u9192\u56e0 x \u88ab\u963b\u585e\u7684\u8fdb\u7a0b\uff1b\u8fd9\u4e2a\u961f\u5217\u662f\u5728\u7ba1\u7a0b\u4e2d\u7684\uff0c\u4e0d\u540c\u7684 x \u5bf9\u5e94\u4e0d\u540c\u7684\u961f\u5217 \u6b7b\u9501\uff1a\u5404\u4e2a\u8fdb\u7a0b\u4e92\u76f8\u7b49\u5f85\u5bf9\u65b9\u624b\u91cc\u7684\u8d44\u6e90\uff1b\u53d1\u751f\u6b7b\u9501\u7684\u8fdb\u7a0b\u4e00\u5b9a\u5904\u4e8e\u963b\u585e\u6001\uff1b\u81f3\u5c11\u6709 2 \u4e2a\u6216 2 \u4e2a\u4ee5\u4e0a\u7684\u8fdb\u7a0b\u540c\u65f6\u6b7b\u9501 \u6b7b\u9501\u72b6\u6001\u4e00\u5b9a\u662f\u4e0d\u5b89\u5168\u7684\uff1b\u8d44\u6e90\u5206\u914d\u56fe\u6ca1\u6709\u73af\u8def\u4e00\u5b9a\u4e0d\u4f1a\u51fa\u73b0\u6b7b\u9501 0.3 \u5185\u5b58\u7ba1\u7406 \u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u81ea\u5df1\u7684\u9875\u8868\uff0c\u9875\u8868\u5730\u5740\u4e00\u5f00\u59cb\u653e\u5728 PCB \u4e2d\uff0c\u88ab\u8c03\u5ea6\u65f6\u653e\u5230 PTR \u4e2d","title":"0. \u603b\u7ed3"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#1","text":"","title":"1. \u64cd\u4f5c\u7cfb\u7edf"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#11","text":"\u88f8\u673a \u64cd\u4f5c\u7cfb\u7edf \u8f6f\u4ef6 \u64cd\u4f5c\u7cfb\u7edf\u7684\u5b9a\u4e49\uff1a\uff08\u7b80\u5355\u5b9a\u4e49\uff09\u63a7\u5236\u548c\u7ba1\u7406\u6574\u4e2a\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u786c\u4ef6\u548c\u8f6f\u4ef6\u8d44\u6e90\uff0c\u5e76\u4e3a\u7528\u6237\u548c\u5176\u4ed6\u8f6f\u4ef6\u63d0\u4f9b\u63a5\u53e3\u4e0e\u73af\u5883\u7684\u7a0b\u5e8f\u96c6\u5408","title":"1.1 \u64cd\u4f5c\u7cfb\u7edf\u7684\u6982\u5ff5"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#12","text":"\u63d0\u4f9b\u7684\u529f\u80fd\uff1a \u4f5c\u4e3a\u7cfb\u7edf\u8d44\u6e90\u7684\u7ba1\u7406\u8005 \u5904\u7406\u673a\u7ba1\u7406 \u5b58\u50a8\u5668\u7ba1\u7406 \u6587\u4ef6\u7ba1\u7406 \u8bbe\u5907\u7ba1\u7406 \u4f5c\u4e3a\u7528\u6237\u548c\u8ba1\u7b97\u673a\u786c\u4ef6\u4e4b\u95f4\u7684\u63a5\u53e3 \u547d\u4ee4\u63a5\u53e3\uff1a\u8054\u673a\u547d\u4ee4\u63a5\u53e3/\u4ea4\u4e92\u5f0f\u63a5\u53e3\uff0c\u8131\u673a\u547d\u4ee4\u63a5\u53e3 \u7a0b\u5e8f\u63a5\u53e3\uff1a\u7cfb\u7edf\u8c03\u7528\uff08\u7cfb\u7edf\u8c03\u7528\u7684\u76ee\u7684\u662f\u8bf7\u6c42\u7cfb\u7edf\u670d\u52a1\uff0c\u53ea\u80fd\u901a\u8fc7\u7528\u6237\u7a0b\u5e8f\u95f4\u63a5\u4f7f\u7528\uff0c\u662f\u64cd\u4f5c\u7cfb\u7edf\u4e3a\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u5185\u6838\u529f\u80fd\u63d0\u4f9b\u7684\u63a5\u53e3\uff09\uff0cGUI\u56fe\u5f62\u7528\u6237\u754c\u9762\u662f\u5f53\u524d\u6700\u6d41\u884c\u7684 \u4f5c\u4e3a\u6700\u63a5\u8fd1\u786c\u4ef6\u7684\u5c42\u6b21\uff0c\u5b9e\u73b0\u5bf9\u786c\u4ef6\u673a\u5668\u7684\u6269\u5c55","title":"1.2 \u64cd\u4f5c\u7cfb\u7edf\u7684\u529f\u80fd\u548c\u76ee\u6807"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#13","text":"\u5e76\u53d1: \u5b8f\u89c2\u540c\u65f6\u53d1\u751f \u5171\u4eab: \u8d44\u6e90\u5171\u4eab\uff1a\u4e92\u65a5\u5171\u4eab\uff0c\u540c\u65f6\u5171\u4eab \u865a\u62df: \u6307\u628a\u4e00\u4e2a\u7269\u7406\u5b9e\u4f53\u53d8\u4e3a\u903b\u8f91\u4e0a\u7684\u5bf9\u5e94\u7269\uff0c\u65f6\u5206\u590d\u7528\u6280\u672f\uff08\u865a\u62df\u5904\u7406\u5668\uff09\uff0c\u7a7a\u5206\u590d\u7528\u6280\u672f\uff08\u865a\u62df\u5b58\u50a8\u5668\uff09 \u5f02\u6b65: \u591a\u9053\u73af\u5883\u4e0b\u5141\u8bb8\u591a\u4e2a\u7a0b\u5e8f\u5e76\u53d1\u6267\u884c\uff0c\u8d70\u8d70\u505c\u505c\uff0c\u4ee5\u4e0d\u53ef\u9884\u77e5\u7684\u901f\u5ea6\u524d\u8fdb \u5e76\u53d1\u5171\u4eab\u4e92\u4e3a\u6761\u4ef6 \u5e76\u53d1\u548c\u5171\u4eab\u662f\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e24\u4e2a\u6700\u57fa\u672c\u7684\u7279\u5f81","title":"1.3 \u64cd\u4f5c\u7cfb\u7edf\u7684\u7279\u5f81"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#14","text":"\u624b\u5de5\u64cd\u4f5c\u9636\u6bb5\uff1acpu\u5229\u7528\u7387\u4f4e\uff0c\u7528\u6237\u72ec\u5360\u5168\u673a \u6279\u5904\u7406\u9636\u6bb5\uff1a\u6ca1\u6709\u4ea4\u4e92 \u5355\u9053\u6279\u5904\u7406: \u8d44\u6e90\u5229\u7528\u7387\u63d0\u5347\uff0c\u6709\u5f88\u591a\u4e8b\u4ef6\u7b49\u5f85I/O \u591a\u9053\u6279\u5904\u7406: \u591a\u9053\u7a0b\u5e8f\u5e76\u53d1\u6267\u884c\uff0c\u5171\u4eab\u8ba1\u7b97\u673a\u8d44\u6e90;\u6ca1\u6709\u4eba\u673a\u4ea4\u4e92\uff0c\u7528\u6237\u54cd\u5e94\u65f6\u95f4\u957f \u5206\u65f6\u64cd\u4f5c\u7cfb\u7edf: \u7279\u70b9\uff1a\u540c\u65f6\u6027\uff0c\u4ea4\u4e92\u6027\uff0c\u72ec\u7acb\u6027\uff0c\u53ca\u65f6\u6027\uff0c\u7f3a\u70b9\uff1a\u4e0d\u80fd\u4f18\u5148\u5904\u7406\u4e00\u4e9b\u7d27\u6025\u4efb\u52a1 \u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf: \u80fd\u591f\u4f18\u5148\u54cd\u5e94\u4e00\u4e9b\u7d27\u6025\u4efb\u52a1:\u786c\u5b9e\u65f6\uff0c\u8f6f\u5b9e\u65f6 \u7f51\u7edc\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5206\u5e03\u5f0f\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4e2a\u4eba\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf","title":"1.4 \u64cd\u4f5c\u7cfb\u7edf\u7684\u53d1\u5c55\u548c\u5206\u7c7b"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#15-os","text":"\u6307\u4ee4\uff1a\u7279\u6743\u6307\u4ee4\uff0c\u975e\u7279\u6743\u6307\u4ee4 \u4e24\u79cd\u5904\u7406\u5668\u72b6\u6001\uff1a\u7528\u6237\u6001\uff08\u76ee\u6001\uff09\uff0c\u6838\u5fc3\u6001(\u7ba1\u6001) \u4e24\u79cd\u7a0b\u5e8f\uff1a\u5185\u6838\u7a0b\u5e8f\uff0c\u5e94\u7528\u7a0b\u5e8f \u64cd\u4f5c\u7cfb\u7edf\u7684\u5185\u6838 \u65f6\u949f\u7ba1\u7406 \u4e2d\u65ad\u5904\u7406 \u539f\u8bed \u5bf9\u7cfb\u7edf\u8d44\u6e90\u8fdb\u884c\u7ba1\u7406\u7684\u529f\u80fd\uff1a\u8fdb\u7a0b\uff0c\u5b58\u50a8\u5668\uff0c\u8bbe\u5907\u7ba1\u7406","title":"1.5 OS \u8fd0\u884c\u673a\u5236\u548c\u4f53\u7cfb\u7ed3\u6784"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#16","text":"\u4e2d\u65ad\u7684\u6982\u5ff5: \u53d1\u751f\u4e2d\u65ad\u65f6\uff0cCPU\u8fdb\u5165\u6838\u5fc3\u6001\uff1b\u64cd\u4f5c\u7cfb\u7edf\u5bf9\u4e2d\u65ad\u8fdb\u884c\u5904\u7406 \u7528\u6237\u6001 \u5230 \u6838\u5fc3\u6001 \u662f\u901a\u8fc7\u4e2d\u65ad\u5b9e\u73b0\u7684 \u6838\u5fc3\u6001 \u5230 \u7528\u6237\u6001 \u662f\u901a\u8fc7\u6267\u884c\u4e00\u4e2a\u7279\u6743\u6307\u4ee4\uff0c\u6539\u53d8\u7a0b\u5e8f\u72b6\u6001\u5b57 \u4e2d\u65ad\u7684\u5206\u7c7b\uff1a \u5185\u4e2d\u65ad\uff1a\u5f02\u5e38\u3001\u4f8b\u5916\u3001\u9677\u5165,\u4e0e\u5f53\u524d\u6267\u884c\u7684\u6307\u4ee4\u6709\u5173 \u8f6f\u4ef6\u4e2d\u65ad\uff1a\u6545\u969c\uff0c\u81ea\u9677 \u786c\u4ef6\u4e2d\u65ad\uff1a\u7ec8\u6b62 \u5916\u4e2d\u65ad\uff1a\u4e2d\u65ad, \u6765\u81eaCPU\u7684\u5916\u90e8 \u5916\u4e2d\u65ad\u7684\u5904\u7406\u8fc7\u7a0b: \u6267\u884c\u5b8c\u6bcf\u4e2a\u6307\u4ee4\u540e\uff0c\u68c0\u67e5\u662f\u5426\u6709\u5916\u90e8\u4e2d\u65ad \u5982\u679c\u6709\uff0c\u4fdd\u62a4\u88ab\u4e2d\u65ad\u8fdb\u7a0b\u7684CPU\u73af\u5883 \u8fdb\u884c\u4e2d\u65ad\u5904\u7406 \u6062\u590d\u539f\u8fdb\u7a0b\u7684CPU\u73af\u5883\u5e76\u9000\u51fa\u4e2d\u65ad\uff0c\u7ee7\u7eed\u6267\u884c","title":"1.6 \u4e2d\u65ad\u548c\u5f02\u5e38"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#17","text":"\u4ec0\u4e48\u662f\u7cfb\u7edf\u8c03\u7528\uff0c\u6709\u4ec0\u4e48\u4f5c\u7528\uff1f \u7528\u6237\u901a\u8fc7\u8f6f\u4ef6\u95f4\u63a5\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\uff0c\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u6765\u7ba1\u7406\u8d44\u6e90 \u7cfb\u7edf\u8c03\u7528\u5206\u7c7b\uff1a - \u8bbe\u5907\u7ba1\u7406 - \u6587\u4ef6\u7ba1\u7406 - \u8fdb\u7a0b\u7ba1\u7406 - \u8fdb\u7a0b\u901a\u4fe1 - \u5185\u5b58\u7ba1\u7406 \u7cfb\u7edf\u8c03\u7528\u548c\u5e93\u51fd\u6570\u7684\u533a\u522b\uff1a\u5e93\u51fd\u6570\u662f\u5bf9\u7cfb\u7edf\u8c03\u7528\u7684\u5c01\u88c5 \u7cfb\u7edf\u8c03\u7528\u5728\u6838\u5fc3\u6001\u6267\u884c \u8bbf\u7ba1\u6307\u4ee4\u5f15\u8d77\u8bbf\u7ba1\u4e2d\u65ad\uff0c\u64cd\u4f5c\u7cfb\u7edf\u8f6c\u4e3a\u6838\u5fc3\u6001 \u7cfb\u7edf\u8c03\u7528\u80cc\u540e\u7684\u8fc7\u7a0b\uff1a\u4f20\u9012\u7cfb\u7edf\u8c03\u7528\u53c2\u6570->\u6267\u884c\u9677\u5165\u6307\u4ee4\uff08\u7528\u6237\u6001\uff09->\u6267\u884c\u7cfb\u7edf\u8c03\u7528\u76f8\u5e94\u670d\u52a1\u7a0b\u5e8f\uff08\u6838\u5fc3\u6001\uff09->\u8fd4\u56de\u7528\u6237\u7a0b\u5e8f \u9677\u5165\u6307\u4ee4\u53ea\u80fd\u5728\u7528\u6237\u6001\u4e0b\u6267\u884c","title":"1.7 \u7cfb\u7edf\u8c03\u7528"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#18","text":"\u7ed3\u6784\uff1a \u5206\u5c42\u6cd5\uff1a\u5355\u5411\u4f9d\u8d56\uff0c\u4f18\uff1a\u4fbf\u4e8e\u8c03\u8bd5\u548c\u9a8c\u8bc1\uff0c\u52a3\uff1a\u6548\u7387\u4f4e \u6a21\u5757\u5316\uff1a \u5b8f\u5185\u6838\uff1a \u5fae\u5185\u6838\uff1a\u53ea\u4fdd\u7559\u6700\u57fa\u672c\u7684\u529f\u80fd \u5fae\u5185\u6838\u7684\u57fa\u672c\u529f\u80fd\uff1a\u8fdb\u7a0b\u7ebf\u7a0b\u7ba1\u7406\uff0c\u4f4e\u7ea7\u5b58\u50a8\u5668\u7ba1\u7406\uff08\u5982\u5730\u5740\u53d8\u6362\u673a\u6784\uff09\uff0c\u4e2d\u65ad\u548c\u9677\u5165\u5904\u7406 \u7279\u70b9\uff1a\u6269\u5c55\u6027\u548c\u7075\u6d3b\u6027\uff0c\u53ef\u9760\u6027\u548c\u5b89\u5168\u6027\uff0c\u53ef\u79fb\u690d\u6027\uff0c\u5206\u5e03\u5f0f\u8ba1\u7b97 \u5f15\u5bfc\uff1a \u6fc0\u6d3bCPU\uff0c\u8bfb\u53d6ROM\u4e2d\u7684boot\u7a0b\u5e8f\uff0c\u5c06\u6307\u4ee4\u5bc4\u5b58\u5668\u7f6e\u4e3aBIOS\u7684\u7b2c\u4e00\u6761\u6307\u4ee4 \u786c\u4ef6\u81ea\u68c0 \u52a0\u8f7d\u5e26\u6709\u64cd\u4f5c\u7cfb\u7edf\u7684\u786c\u76d8\uff0c\uff08\u662f\u52a0\u8f7d\u786c\u76d8 \u52a0\u8f7dMBR \u626b\u63cf\u786c\u76d8\u5206\u533a\u8868\uff0cMBR\u5305\u542b\u786c\u76d8\u5206\u533a\u8868\uff0c\u786c\u76d8\u5206\u533a\u533a\u5206\u4e3a\u6d3b\u52a8\u5206\u533a\u548c\u975e\u6d3b\u52a8\u5206\u533a \u52a0\u8f7d\u5206\u533a\u5f15\u5bfc\u8bb0\u5f55PBR\uff0c\u5373\u6d3b\u52a8\u6247\u533a\u7684\u7b2c\u4e00\u4e2a\u6247\u533a \u52a0\u8f7d\u542f\u52a8\u7ba1\u7406\u5668 \u52a0\u8f7d\u64cd\u4f5c\u7cfb\u7edf \u865a\u62df\u673a\uff1a \u7b2c\u4e00\u7c7b\u865a\u62df\u673a\u7ba1\u7406\u7a0b\u5e8f \u7b2c\u4e8c\u7c7b\u865a\u62df\u673a\u7ba1\u7406\u7a0b\u5e8f","title":"1.8 \u64cd\u4f5c\u7cfb\u7edf\u7ed3\u6784\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5f15\u5bfc\uff0c\u865a\u62df\u673a"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#2","text":"","title":"2 \u8fdb\u7a0b"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#21","text":"","title":"2.1 \u8fdb\u7a0b"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#211","text":"\u5b9a\u4e49\uff1a\u7a0b\u5e8f\u6bb5\u3001\u6570\u636e\u6bb5\u3001PCB\u4e09\u90e8\u5206\u7ec4\u6210\u4e86\u8fdb\u7a0b\u5b9e\u4f53 \uff1b\u8fdb\u7a0b\u662f\u7a0b\u5e8f\u7684\u4e00\u6b21\u6267\u884c\uff0c\u662f\u8fdb\u884c\u8d44\u6e90\u5206\u914d\u548c\u8c03\u5ea6\u7684\u57fa\u672c\u5355\u4f4d \u8fdb\u7a0b\u5b9e\u4f53\u662f\u9759\u6001\u7684\uff0c\u8fdb\u7a0b\u662f\u52a8\u6001\u7684 PCB\uff1a - \u8fdb\u7a0b\u63cf\u8ff0\u4fe1\u606f - \u8fdb\u7a0b\u63a7\u5236\u548c\u7ba1\u7406\u4fe1\u606f - \u8d44\u6e90\u5206\u914d\u6e05\u5355 - \u5904\u7406\u673a\u76f8\u5173\u4fe1\u606f \u8fdb\u7a0b\u7684\u7ec4\u7ec7\uff1a - \u94fe\u63a5\u65b9\u5f0f\uff1a\u6267\u884c\u6307\u9488\uff0c\u5c31\u7eea\u961f\u5217\u6307\u9488\uff0c\u963b\u585e\u961f\u5217\u6307\u9488 - \u7d22\u5f15\u65b9\u5f0f\uff1a\u6267\u884c\u6307\u9488\uff0c\u5c31\u7eea\u8868\u6307\u9488\uff0c\u963b\u585e\u8868\u6307\u9488 \u8fdb\u7a0b\u7684\u7279\u5f81 - \u52a8\u6001\u6027 - \u5e76\u53d1\u6027 - \u72ec\u7acb\u6027 - \u5f02\u6b65\u6027","title":"2.1.1 \u8fdb\u7a0b\u6982\u8ff0"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#212","text":"\u4e09\u6001\uff1a\u8fd0\u884c\u6001\uff0c\u5c31\u7eea\u6001\uff0c\u963b\u585e\u6001 \u4e94\u6001\uff1a\u521b\u5efa\u6001\uff0c\u7ec8\u6b62\u6001 \u8fdb\u7a0b\u7684\u8f6c\u6362\uff1a","title":"2.1.2 \u8fdb\u7a0b\u7684\u72b6\u6001\u548c\u8f6c\u6362"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#213","text":"\u5b9e\u73b0\u5bf9\u8fdb\u7a0b\u72b6\u6001\u7684\u8f6c\u6362 \u7528\u539f\u8bed\u5b9e\u73b0\u8fdb\u7a0b\u63a7\u5236\uff1a\u901a\u8fc7\u5173 \u4e2d\u65ad\u548c\u5f00\u4e2d\u65ad\u5b9e\u73b0\u539f\u8bed \u5173\u4e2d\u65ad\u548c\u5f00\u4e2d\u65ad\u53ea\u53ef\u4ee5\u5728\u6838\u5fc3\u6001\u4e0b\u9762\u6267\u884c \u8fdb\u7a0b\u63a7\u5236\u76f8\u5173\u7684\u539f\u8bed\u505a\u76843\u7c7b\u4e8b\u60c5\uff1a - \u66f4\u65b0PCB\u4fe1\u606f - \u5c06PCB\u63d2\u5165\u5408\u9002\u961f\u5217 - \u5206\u914d\u3001\u56de\u6536\u8d44\u6e90 \u8fdb\u7a0b\u7684\u521b\u5efa\uff1a\u521b\u5efa\u539f\u8bed - \u7533\u8bf7\u7a7a\u767dPCB - \u4e3a\u65b0\u8fdb\u7a0b\u5206\u914d\u6240\u9700\u8d44\u6e90 - \u521d\u59cb\u5316PCB - \u5c06 PCB\u63d2\u5165\u5c31\u7eea\u961f\u5217 \u8fdb\u7a0b\u7ec8\u6b62\uff1a\u64a4\u9500\u539f\u8bed - \u4ecePCB\u96c6\u5408\u4e2d\u627e\u5230\u7ec8\u6b62\u8fdb\u7a0b\u7684PCB - \u82e5\u7a0b\u5e8f\u6b63\u5728\u8fd0\u884c\uff0c\u7acb\u5373\u5265\u593aCPU\uff0c\u5c06CPU\u5206\u914d\u7ed9\u5176\u4ed6\u8fdb\u7a0b - \u7ec8\u6b62\u5176\u6240\u6709\u5b50\u8fdb\u7a0b - \u5c06\u8be5\u8fdb\u7a0b\u62e5\u6709\u7684\u8d44\u6e90\u5f52\u8fd8\u7ed9\u7236\u8fdb\u7a0b\u6216\u64cd\u4f5c\u7cfb\u7edf - \u5220\u9664 PCB \u8fdb\u7a0b\u7684\u963b\u585e\u548c\u5524\u9192\uff1a\u963b\u585e\u539f\u8bed\uff0c\u5524\u9192\u539f\u8bed \u8fdb\u7a0b\u7684\u5207\u6362\uff1a\u5207\u6362\u539f\u8bed","title":"2.1.3 \u8fdb\u7a0b\u63a7\u5236"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#214","text":"PV\u64cd\u4f5c\u65f6\u4f4e\u7ea7\u901a\u4fe1\uff0c\u9ad8\u7ea7\u901a\u4fe1\u6307\u4ee5\u9ad8\u6548\u7387\u4f20\u9012\u5927\u91cf\u6570\u636e \u5171\u4eab\u5b58\u50a8\uff1a\u5bf9\u5171\u4eab\u7a7a\u95f4\u7684\u8bbf\u95ee\u662f\u4e92\u65a5\u7684 \u57fa\u4e8e\u6570\u636e\u7ed3\u6784\u7684\u5171\u4eab\uff1a\u4f4e\u7ea7\u901a\u4fe1 \u57fa\u4e8e\u5b58\u50a8\u533a\u7684\u5171\u4eab\uff1a\u9ad8\u7ea7\u901a\u4fe1 \u7ba1\u9053\u901a\u4fe1: \u4e00\u4e2a\u7ba1\u9053\u53ea\u80fd\u91c7\u7528\u534a\u53cc\u5de5\u901a\u4fe1,\u5404\u8fdb\u7a0b\u4e92\u65a5\u7684\u8bbf\u95ee\u7ba1\u9053\uff1b\u7ba1\u9053\u5199\u6ee1\u624d\u5141\u8bb8\u8bfb\uff0c\u8bfb\u5b8c\u624d\u5141\u8bb8\u5199 \u6d88\u606f\u4f20\u9012\uff1a\u76f4\u63a5\u901a\u4fe1\u65b9\u5f0f\uff0c\u95f4\u63a5\u901a\u4fe1\u65b9\u5f0f","title":"2.1.4 \u8fdb\u7a0b\u901a\u4fe1"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#215","text":"\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u540c\u6837\u6709\u201c\u540c\u65f6\u201c\u505a\u5f88\u591a\u4e8b\u60c5 \u7ebf\u7a0b\u662f\u57fa\u672c\u7684CPU\u6267\u884c\u5355\u5143 \u5f15\u5165\u7ebf\u7a0b\u540e\uff0c\u8fdb\u7a0b\u662f\u8d44\u6e90\u5206\u914d\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u7ebf\u7a0b\u662f\u8c03\u5ea6\u7684\u57fa\u672c\u5355\u4f4d TCB \u7ebf\u7a0b\u57fa\u672c\u4e0d\u62e5\u6709\u7cfb\u7edf\u8d44\u6e90\uff0c\u540c\u4e00\u8fdb\u7a0b\u7684\u7ebf\u7a0b\u5171\u4eab\u8fdb\u7a0b\u8d44\u6e90 \u540c\u4e00\u8fdb\u7a0b\u7684\u7ebf\u7a0b\u5207\u6362\u4e0d\u4f1a\u5f15\u8d77\u8fdb\u7a0b\u5207\u6362\uff0c\u5207\u6362\u7ebf\u7a0b\u7684\u5f00\u9500\u5c0f \u7ebf\u7a0b\u7684\u5b9e\u73b0\u65b9\u5f0f\uff1a - \u7528\u6237\u7ea7\u7ebf\u7a0b\uff1a\u963b\u585e\u4f1a\u5bfc\u81f4\u6574\u4e2a\u8fdb\u7a0b\u7684\u963b\u585e\uff1b\u5207\u6362\u4ee3\u4ef7\u5c0f\uff1b\u5141\u8bb8\u6bcf\u4e2a\u8fdb\u7a0b\u81ea\u5b9a\u4e49\u8c03\u5ea6\u7b97\u6cd5 - \u5185\u6838\u7ea7\u7ebf\u7a0b\uff1a\u540c\u4e00\u8fdb\u7a0b\u7684\u7ebf\u7a0b\u5207\u6362\u9700\u8981\u4ece\u7528\u6237\u6001\u8f6c\u5230\u6838\u5fc3\u6001\uff0c\u5f00\u9500\u5927\uff1b\u5185\u6838\u7ebf\u7a0b\u963b\u585e\u65f6\u4e0d\u4f1a\u5bfc\u81f4\u6574\u4e2a\u8fdb\u7a0b\u963b\u585e\uff1b - \u7ec4\u5408\u65b9\u5f0f \u591a\u7ebf\u7a0b\u6a21\u578b\uff1a - \u591a\u5bf9\u4e00\uff1a\u591a\u4e2a\u7528\u6237\u7ea7\u7ebf\u7a0b\u5bf9\u4e00\u4e2a\u5185\u6838\u7ea7\u7ebf\u7a0b\uff0c\u7f3a\u70b9\u662f\u5e76\u53d1\u5ea6\u4e0d\u9ad8 - \u4e00\u5bf9\u4e00\uff1a\u7f3a\u70b9\u662f\u5360\u7528\u5185\u6838\u7ea7\u7ebf\u7a0b\u591a - \u591a\u5bf9\u591a\uff1a","title":"2.1.5 \u7ebf\u7a0b"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#22","text":"","title":"2.2 \u5904\u7406\u673a"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#223","text":"\u8c03\u5ea6\u7684\u4e09\u4e2a\u5c42\u6b21\uff1a - \u9ad8\u7ea7\u8c03\u5ea6\uff1a\u4f5c\u4e1a\u8c03\u5ea6 - \u4e2d\u7ea7\u8c03\u5ea6\uff1a\u6302\u8d77 - \u4f4e\u7ea7\u8c03\u5ea6\uff1a\u8fdb\u7a0b\u8c03\u5ea6,\u662f\u64cd\u4f5c\u7cfb\u7edf\u6700\u57fa\u672c\u7684\u4e00\u79cd\u8c03\u5ea6 \u4e03\u6001\u6a21\u578b\uff1a","title":"2.2.3 \u5904\u7406\u673a\u8c03\u5ea6\u7684\u6982\u5ff5"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#223_1","text":"\u8fdb\u7a0b\u8c03\u5ea6\u7684\u65f6\u673a\uff1a\u5f53\u524d\u8fd0\u884c\u8fdb\u7a0b\u4e3b\u52a8\u6216\u88ab\u52a8\u653e\u5f03\u5904\u7406\u673a \u4e0d\u80fd\u8fdb\u884c\u8fdb\u7a0b\u8c03\u5ea6\u4e0e\u5207\u6362\u7684\u60c5\u51b5\uff1a - \u5904\u7406\u4e2d\u65ad\u8fc7\u7a0b\u4e2d - \u8fdb\u7a0b\u5728\u64cd\u4f5c\u7cfb\u7edf\u7684\u5185\u6838\u7a0b\u5e8f\u4e34\u754c\u533a - \u539f\u5b50\u64cd\u4f5c\u8fc7\u7a0b\u4e2d \u8fdb\u7a0b\u5728\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u7a0b\u5e8f\u4e34\u754c\u533a\u4e2d\u4e0d\u80fd\u8fdb\u884c\u8c03\u5ea6\u548c\u5207\u6362 \u6b63\u786e \u8fdb\u7a0b\u5904\u4e8e\u4e34\u754c\u533a\u65f6\u4e0d\u80fd\u8fdb\u884c\u5904\u7406\u673a\u8c03\u5ea6 \u9519\u8bef \u4e34\u754c\u8d44\u6e90 \u4e34\u754c\u533a\uff1a\u8bbf\u95ee\u4e34\u754c\u8d44\u6e90\u7684\u90a3\u6bb5\u4ee3\u7801 \u8fdb\u7a0b\u8c03\u5ea6\u7684\u65b9\u5f0f\uff1a - \u975e\u5265\u593a\u5f0f\uff0c\u975e\u62a2\u5360\u65b9\u5f0f - \u5265\u593a\u5f0f\uff0c\u62a2\u5360\u5f0f \u8fdb\u7a0b\u5207\u6362\u7684\u8fc7\u7a0b\uff1a - \u5bf9\u539f\u6765\u8fd0\u884c\u7684\u8fdb\u7a0b\u7684\u5404\u79cd\u6570\u636e\u7684\u4fdd\u62a4 - \u5bf9\u65b0\u7684\u8fdb\u7a0b\u5404\u79cd\u6570\u636e\u7684\u6062\u590d","title":"2.2.3 \u8fdb\u7a0b\u8c03\u5ea6\u7684\u8fc7\u7a0b\uff0c\u5b9e\u9645\uff0c\u65b9\u5f0f"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#224","text":"CPU \u5229\u7528\u7387\uff1a \u5fd9\u7387\u65f6\u95f4 / \u603b\u65f6\u95f4 \u7cfb\u7edf\u541e\u5410\u91cf\uff1a\u603b\u5171\u5b8c\u6210\u4e86\u591a\u5c11\u9053\u4f5c\u4e1a / \u603b\u5171\u82b1\u4e86\u591a\u5c11\u65f6\u95f4 \u5468\u8f6c\u65f6\u95f4\uff1a\u4f5c\u4e1a\u88ab\u63d0\u4ea4\u7ed9\u7cfb\u7edf\u5230\u5b8c\u6210\u7684\u65f6\u95f4 \u5e73\u5747\u5468\u8f6c\u65f6\u95f4\uff1a\u5468\u8f6c\u65f6\u95f4\u4e4b\u548c / \u4f5c\u4e1a\u6570 \u5e26\u6743\u5468\u8f6c\u65f6\u95f4\uff1a\u4f5c\u4e1a\u5468\u8f6c\u65f6\u95f4 / \u4f5c\u4e1a\u5b9e\u9645\u8fd0\u884c\u65f6\u95f4 >= 1 \u5e73\u5747\u5e26\u6743\u5468\u8f6c\u65f6\u95f4 \u7b49\u5f85\u65f6\u95f4\uff1a\u5904\u4e8e\u7b49\u5f85\u5904\u7406\u673a\u72b6\u6001\u65f6\u95f4\u4e4b\u548c \u5e73\u5747\u7b49\u5f85\u65f6\u95f4 \u54cd\u5e94\u65f6\u95f4\uff1a\u7528\u6237\u63d0\u4ea4\u8bf7\u6c42\u5230\u9996\u6b21\u4ea7\u751f\u54cd\u5e94\u6240\u7528\u7684\u65f6\u95f4","title":"2.2.4 \u8c03\u5ea6\u7b97\u6cd5\u7684\u8bc4\u4ef7\u6307\u6807"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#225","text":"\u4e0b\u9762\u7684\u7b97\u6cd5\u9002\u5408\u6279\u5904\u7406\u7cfb\u7edf\uff1a \u5148\u6765\u5148\u670d\u52a1 FCFS: - \u4f5c\u4e1a\u8c03\u5ea6\u548c\u8fdb\u7a0b\u8c03\u5ea6\u90fd\u53ef\u4ee5 - \u975e\u62a2\u5360\uff0c\u62a2\u5360\u5f0f\u7684\u7b49\u4e8e\u6700\u77ed\u5269\u4f59\u65f6\u95f4\u4f18\u5148 - \u5bf9\u957f\u4f5c\u4e1a\u6709\u5229\uff0c\u5bf9\u77ed\u4f5c\u4e1a\u4e0d\u5229 - \u4e0d\u4f1a\u5bfc\u81f4\u9965\u997f \u77ed\u4f5c\u4e1a\u4f18\u5148 SJF / \u77ed\u8fdb\u7a0b\u4f18\u5148 SPF: - \u4f5c\u4e1a\u8c03\u5ea6\u548c\u8fdb\u7a0b\u8c03\u5ea6\u90fd\u53ef\u4ee5 - \u4e00\u822c\u662f\u975e\u62a2\u5360\u5f0f\uff0c\u4e5f\u6709\u62a2\u5360\u5f0f\u7684\u7248\u672c\uff0c\u6700\u77ed\u5269\u4f59\u65f6\u95f4\u4f18\u5148 SRTN - \u4e00\u822c\u6765\u8bf4\uff0cSJF / SRTN \u7684\u5e73\u5747\u7b49\u5f85\u65f6\u95f4\u3001\u5e73\u5747\u5468\u8f6c\u65f6\u95f4\u6700\u5c11 - \u5bf9\u77ed\u4f5c\u4e1a\u6709\u5229\uff0c\u957f\u4f5c\u4e1a\u4e0d\u5229 - \u4f1a\u5bfc\u81f4\u9965\u997f \u9ad8\u54cd\u5e94\u6bd4\u4f18\u5148 HRRN - \u4f5c\u4e1a\u8c03\u5ea6\uff0c\u8fdb\u7a0b\u8c03\u5ea6\u90fd\u53ef\u4ee5 - \u54cd\u5e94\u6bd4 = (\u7b49\u5f85\u65f6\u95f4+\u8981\u6c42\u670d\u52a1\u65f6\u95f4) / \u8981\u6c42\u670d\u52a1\u65f6\u95f4 >= 1 - \u975e\u62a2\u5360\u5f0f - \u4e0d\u4f1a\u5bfc\u81f4\u9965\u997f \u4e0b\u9762\u7684\u7b97\u6cd5\u9002\u5408\u4ea4\u4e92\u5f0f\u7cfb\u7edf\uff1a \u65f6\u95f4\u7247\u8f6e\u8f6c\u8c03\u5ea6\u7b97\u6cd5 RR - \u5206\u65f6\u64cd\u4f5c\u7cfb\u7edf - \u7528\u4e8e\u8fdb\u7a0b\u8c03\u5ea6 - \u5c5e\u4e8e\u62a2\u5360\u5f0f\u7b97\u6cd5 - \u5982\u679c\u65f6\u95f4\u7247\u6ca1\u7528\u5b8c\u4f46\u662f\u8fdb\u7a0b\u5b8c\u6210\u4e86\u4f1a\u63d0\u524d\u7ed3\u675f - \u5982\u679c\u65f6\u95f4\u7247\u592a\u5927\uff0c\u4f1a\u9000\u5316\u4e3a FCFS\uff1b\u65f6\u95f4\u7247\u592a\u5c0f\u5207\u6362\u4f1a\u8fc7\u4e8e\u9891\u7e41 - \u4e0d\u4f1a\u5bfc\u81f4\u9965\u997f \u4f18\u5148\u7ea7\u8c03\u5ea6\u7b97\u6cd5 - \u8c03\u5ea6\u9009\u62e9\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u4f5c\u4e1a/\u8fdb\u7a0b - \u4f5c\u4e1a\u8c03\u5ea6/\u8fdb\u7a0b\u8c03\u5ea6\u90fd\u53ef\u4ee5 - \u62a2\u5360\u5f0f\u548c\u975e\u62a2\u5360\u5f0f\u90fd\u6709 - \u5c31\u7eea\u961f\u5217\u672a\u5fc5\u53ea\u6709\u4e00\u4e2a - \u9759\u6001\u4f18\u5148\u7ea7\u548c\u52a8\u6001\u4f18\u5148\u7ea7 - \u4f1a\u5bfc\u81f4\u9965\u997f \u591a\u7ea7\u53cd\u9988\u961f\u5217\u8c03\u5ea6\u7b97\u6cd5 - \u7528\u4e8e\u8fdb\u7a0b\u8c03\u5ea6 - \u62a2\u5360\u5f0f\uff1b\u6307\u5982\u679c\u5728\u8fd0\u884c\u65f6\u4f18\u5148\u7ea7\u66f4\u9ad8\u7684\u961f\u5217\u4e2d\u6709\u8fdb\u7a0b\u4e86\uff0c\u4f1a\u88ab\u62a2\u5360\uff0c\u4e14\u88ab\u62a2\u5360\u7684\u8fdb\u7a0b\u8fd8\u662f\u653e\u5230\u539f\u6765\u7684\u961f\u5c3e\uff0c\u4e0d\u4f1a\u4e0b\u653e - \u6bcf\u4e2a\u961f\u5217\u8bbe\u7f6e\u7684\u65f6\u95f4\u7247\u4e0d\u540c - \u4f1a\u5bfc\u81f4\u9965\u997f","title":"2.2.5 \u8c03\u5ea6\u7b97\u6cd5"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#23","text":"\u4e3a\u4e86\u5b9e\u73b0\u4e34\u754c\u8d44\u6e90\u7684\u4e92\u65a5\u8bbf\u95ee\uff0c\u9700\u8981\u9075\u5faa\u4ee5\u4e0b\u539f\u5219\uff1a - \u7a7a\u95f2\u8ba9\u8fdb - \u5fd9\u5219\u7b49\u5f85 - \u6709\u9650\u7b49\u5f85\uff1a\u5bf9\u8bf7\u6c42\u8bbf\u95ee\u7684\u8fdb\u7a0b\u8981\u4fdd\u8bc1\u80fd\u5728\u6709\u9650\u65f6\u95f4\u5185\u8fdb\u5165\u4e34\u754c\u533a - \u8ba9\u6743\u7b49\u5f85\uff1a\u5982\u679c\u8fdb\u7a0b\u4e0d\u80fd\u8fdb\u5165\u4e34\u754c\u533a\u9700\u8981\u7acb\u5373\u91ca\u653e\u5904\u7406\u673a","title":"2.3 \u8fdb\u7a0b\u540c\u6b65\u3001\u8fdb\u7a0b\u4e92\u65a5"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#231","text":"\u8f6f\u4ef6\u5b9e\u73b0\uff1a - \u5355\u6807\u5fd7\u6cd5\uff1a\u7528\u4e00\u4e2a\u6807\u5fd7\u8868\u793a\u51e0\u53f7\u8fdb\u7a0b\u53ef\u4ee5\u8fdb\u5165\u4e34\u754c\u533a\uff0c\u4e24\u4e2a\u8fdb\u7a0b\u8f6e\u6d41\u8fdb\u5165\uff1b\u5982\u679c\u67d0\u8fdb\u7a0b\u4e00\u76f4\u4e0d\u8fdb\u5165\u4e34\u754c\u533a\u5c31\u8fdd\u80cc\u201c\u7a7a\u95f2\u8ba9\u8fdb\u201d\u539f\u5219 - \u53cc\u6807\u5fd7\u5148\u68c0\u67e5\u6cd5\uff1a\u5148\u68c0\u67e5\u5176\u4ed6\u8fdb\u7a0b\u662f\u5426\u5728\u4e34\u754c\u533a\uff0c\u8fdd\u80cc\u201c\u5fd9\u5219\u7b49\u5f85\u201d\u539f\u5219\uff1b\u53ef\u80fd\u4f1a\u67092\u4e2a\u8fdb\u7a0b\u540c\u65f6\u8bbf\u95ee\u4e34\u754c\u533a\uff0c\u56e0\u4e3a\u68c0\u67e5\u548c\u4e0a\u9501\u4e0d\u662f\u4e00\u6c14\u5475\u6210\u7684 - \u53cc\u6807\u5fd7\u540e\u68c0\u67e5\u6cd5\uff1a\u5148\u4e0a\u9501\uff0c\u540e\u68c0\u67e5\uff1b\u4f1a\u6709\u6b7b\u9501\uff0c\u90fd\u65e0\u6cd5\u8fdb\u5165\u4e34\u754c\u533a\uff1b - Peterson \u7b97\u6cd5\uff1a\u7528 flag \u8868\u793a\u67d0\u8fdb\u7a0b\u60f3\u8981\u8fdb\u5165\u4e34\u754c\u533a\uff0c\u5e76\u7528 turn \u8868\u793a\u5148\u8ba9\u51e0\u53f7\u8fdb\u7a0b\u8fdb\u5165\u4e34\u754c\u533a\uff1b\u5728\u8bbf\u95ee\u4e34\u754c\u8d44\u6e90\u524d flag \u7f6e\u4e3a true\uff0c\u5e76\u628a turn \u8bbe\u4e3a\u53e6\u4e00\u4e2a\u8fdb\u7a0b \u786c\u4ef6\u5b9e\u73b0\uff1a - \u4e2d\u65ad\u5c4f\u853d\uff1a\u7f3a\u70b9\u662f\u4e0d\u9002\u5408\u591a\u5904\u7406\u673a\uff0c\u4e0d\u9002\u5408\u7528\u6237\u8fdb\u7a0b - TestAndSet/TS/TSL\uff1awhile\u4e2d\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u7ed9\u4e34\u754c\u8d44\u6e90\u4e0a\u9501\uff0c\u51fd\u6570\u8fd4\u56de\u4e0a\u9501\u524d\u6b64\u8d44\u6e90\u662f\u5426\u88ab\u4e0a\u9501\uff1b\u8fd9\u4e2a\u51fd\u6570\u662f\u539f\u5b50\u64cd\u4f5c\uff1b\u7f3a\u70b9\u662f\u4e0d\u6ee1\u8db3\u8ba9\u6743\u7b49\u5f85\uff0c\u4ecd\u7136\u5360\u7528\u5904\u7406\u673a\u8d44\u6e90 - Swap/Exchange/XCHG\uff1a\u548c TSL \u6ca1\u533a\u522b\uff1b\u7f3a\u70b9\u662f\u8ba9\u6743\u7b49\u5f85\uff0c\u4ecd\u7136\u5360\u7528\u5904\u7406\u673a\u8d44\u6e90","title":"2.3.1 \u8fdb\u7a0b\u4e92\u65a5\u7684\u5b9e\u73b0\u65b9\u6cd5"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#232","text":"\u4f7f\u7528\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u539f\u8bed\u5bf9\u4fe1\u53f7\u91cf\u8fdb\u884c\u64cd\u4f5c: wait(S) signal(S) \u6216\u8005 P V \u64cd\u4f5c \u5bf9\u4fe1\u53f7\u91cf\u7684\u64cd\u4f5c\u53ea\u6709\uff1a\u521d\u59cb\u5316\uff0cP\uff0cV \u6574\u578b\u4fe1\u53f7\u91cf\uff1a\u8868\u793a\u7cfb\u7edf\u4e2d\u7684\u67d0\u79cd\u8d44\u6e90\u6570\u91cf\uff1b\u4e0d\u6ee1\u8db3\u8ba9\u6743\u7b49\u5f85\uff0c\u4ecd\u4f1a\u5360\u7528\u5904\u7406\u673a\u8d44\u6e90\uff1b \u8bb0\u5f55\u578b\u4fe1\u53f7\u91cf\uff1a\u5269\u4f59\u8d44\u6e90\u6570+\u7b49\u5f85\u961f\u5217\uff1bwait\u4e2d\u5148\u51cf\u4e00\uff0c\u518d\u68c0\u67e5\u662f\u5426\u6709\u8d44\u6e90\uff0c\u6ca1\u6709(<0)\u5c31\u963b\u585e\uff1bsignal\u4e2d\u5148\u52a0\u4e00\uff0c\u7136\u540e\u68c0\u67e5\u662f\u5426\u6709\u963b\u585e\u8fdb\u7a0b\uff0c\u6709(<=0)\u5c31\u91ca\u653e\u4e00\u4e2a\u963b\u585e\u8fdb\u7a0b","title":"2.3.2 \u4fe1\u53f7\u91cf\u673a\u5236"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#233","text":"\u5b9e\u73b0\u4e92\u65a5\uff1a - \u8bbe\u7f6e\u540c\u6b65\u4fe1\u53f7\u91cf semaphore mutex\uff0c\u521d\u59cb\u503c\u4e3a 1 - \u6210\u5bf9\u4f7f\u7528PV\u64cd\u4f5c \u5b9e\u73b0\u540c\u6b65\uff1a - \u8bbe\u7f6e\u540c\u6b65\u4fe1\u53f7\u91cfsemaphore S\uff0c\u521d\u59cb\u503c\u4e3a0 - \u5728\u524d\u64cd\u4f5c\u4e4b\u540e\u6267\u884cV - \u5728\u540e\u64cd\u4f5c\u4e4b\u524d\u6267\u884cP \u4fe1\u53f7\u91cf\u673a\u5236\u5b9e\u73b0\u524d\u9a71\u5173\u7cfb\uff1a - \u4e3a\u6bcf\u4e00\u5bf9\u524d\u9a71\u5173\u7cfb\u5404\u8bbe\u7f6e\u4e00\u4e2a\u540c\u6b65\u53d8\u91cf - \u5728\u524d\u64cd\u4f5c\u4e4b\u540e\u6267\u884cV\uff0c\u53ef\u80fd\u6709\u591a\u4e2aV - \u5728\u540e\u64cd\u4f5c\u4e4b\u524d\u6267\u884cP\uff0c\u53ef\u80fd\u6709\u591a\u4e2aP","title":"2.3.3 \u4fe1\u53f7\u91cf\u673a\u5236\u5b9e\u73b0\u8fdb\u7a0b\u4e92\u65a5\uff0c\u540c\u6b65"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#234","text":"\u5bf9 mutex \u7684 P \u64cd\u4f5c\u9700\u8981\u5728 \u540c\u6b65\u4fe1\u53f7\u91cf P \u64cd\u4f5c\u91cc\u9762","title":"2.3.4 \u751f\u4ea7\u8005\uff0c\u6d88\u8d39\u8005"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#235","text":"\u5403\u6c34\u679c\u95ee\u9898 \u8fd9\u79cd\u60c5\u51b5\u53ef\u4ee5\u4e0d\u9700\u8981\u4e92\u65a5\u578b\u53f7\u91cf mutex,\u5982\u679c\u7f13\u51b2\u533a\u7684\u5927\u5c0f\u5927\u4e8e 1 \u5c31\u9700\u8981\u8bbe\u7f6e\u4e92\u65a5\u4fe1\u53f7\u91cf\uff0c\u5426\u5219\u53ef\u80fd\u53d1\u751f\u7f13\u51b2\u533a\u7684\u8986\u76d6\u95ee\u9898","title":"2.3.5 \u591a\u751f\u4ea7\u8005\uff0c\u591a\u6d88\u8d39\u8005"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#236","text":"\u9700\u89814\u4e2a\u540c\u6b65\u4fe1\u53f7\u91cf: \u5206\u522b\u8868\u793a\u4e09\u79cd\u7ec4\u5408\u7684 \u548c \u8868\u793a\u62bd\u70df\u662f\u5426\u5b8c\u6210\u7684","title":"2.3.6 \u5438\u70df\u8005\u95ee\u9898"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#237","text":"\u7528\u4e00\u4e2a mutex \u6765\u4fdd\u8bc1\u8bfb \u8fdb\u7a0b\u7684\u52a0\u9501\u89e3\u9501 \u548c \u4fee\u6539count \u662f\u539f\u5b50\u64cd\u4f5c \u4e0b\u9762\u7684\u4ee3\u7801\u662f \u8bfb\u8005 \u4f18\u5148\uff0c\u5199\u8005\u53ef\u80fd\u4f1a\u9965\u997f \u4e0b\u9762\u7684\u4ee3\u7801\u662f \u5199\u8005 \u4f18\u5148","title":"2.3.7 \u8bfb\u8005\u3001\u5199\u8005\u95ee\u9898"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#238","text":"\u9632\u6b62\u6b7b\u9501\u7684\u65b9\u6cd5\uff1a - \u6700\u591a\u5141\u8bb84\u4e2a\u54f2\u5b66\u5bb6\u540c\u65f6\u8fdb\u9910\uff0c\u7528\u4e00\u4e2a\u521d\u59cb\u503c\u4e3a 4 \u7684\u540c\u6b65\u4fe1\u53f7\u91cf - \u5947\u6570\u53f7\u54f2\u5b66\u5bb6\u5148\u62ff\u5de6\u8fb9\u7684\u7b77\u5b50\uff0c\u800c\u5076\u6570\u53f7\u54f2\u5b66\u5bb6\u76f8\u53cd\uff1b\u7528 if \u6765\u5224\u65ad\u4e00\u4e0b - \u4ec5\u5f53\u4e00\u4e2a\u54f2\u5b66\u5bb6\u5de6\u53f3\u4e24\u53ea\u7b77\u5b50\u53ef\u7528\u65f6\u624d\u5141\u8bb8\u4ed6\u6293\u8d77\u7b77\u5b50\uff08\u8fd9\u4e2a\u8868\u8ff0\u4e0d\u662f\u5f88\u51c6\u786e\uff09\uff1b\u57282\u4e2a\u62ff\u7b77\u5b50\u7684 P \u64cd\u4f5c\u5916\u9762\u7528\u4e00\u4e2a mutex \u7684 PV \u64cd\u4f5c\u5305\u8d77\u6765\uff0c\u5982\u679c\u6709\u4eba\u6ca1\u62ff\u5230 2 \u652f\u7b77\u5b50\u5176\u4ed6\u6240\u6709\u4eba\u90fd\u4e0d\u53ef\u4ee5\u62ff\uff0c\u76f4\u5230\u4ed6\u62ff\u5230\uff1b\u4ee3\u7801\u770b\u4e0b\u56fe","title":"2.3.8 \u54f2\u5b66\u5bb6\u8fdb\u9910\u95ee\u9898"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#239","text":"\u4fe1\u53f7\u91cf\u673a\u5236\u7f16\u5199\u7a0b\u5e8f\u56f0\u96be\uff0c\u6613\u51fa\u9519\uff1b\u7ba1\u7a0b\u4e5f\u662f\u4e00\u79cd\u540c\u6b65\u673a\u5236 \u7ba1\u7a0b\u7684\u7ec4\u6210\uff08\u7c7b\uff09 - \u5171\u4eab\u6570\u636e\u7ed3\u6784 - \u4e00\u7ec4\u8fc7\u7a0b - \u5bf9\u5171\u4eab\u6570\u636e\u8bbe\u7f6e\u521d\u59cb\u503c\u7684\u8bed\u53e5 - \u7ba1\u7a0b\u6709\u4e00\u4e2a\u540d\u5b57 \u901a\u8fc7\u76f4\u63a5\u8c03\u7528\u7ba1\u7a0b\u7684\u65b9\u6cd5\u8bbf\u95ee\u5171\u4eab\u6570\u636e\uff0c\u4e92\u65a5\u548c\u5171\u4eab\u7684\u4ee3\u7801\u5728\u7ba1\u7a0b\u4e2d\u5c01\u88c5\u597d\u4e86 \u53ea\u6709\u901a\u8fc7\u7ba1\u7a0b\u7279\u5b9a\u7684 \u5165\u53e3 \u624d\u80fd\u8bbf\u95ee\u5171\u4eab\u6570\u636e \u7ba1\u7a0b\u6709\u5f88\u591a\u5165\u53e3\uff0c\u4f46\u6bcf\u6b21\u53ea\u80fd\u5f00\u653e\u5176\u4e2d\u4e00\u4e2a \u5165\u53e3\uff0c\u5e76\u4e14\u53ea\u80fd\u8ba9\u4e00\u4e2a\u8fdb\u7a0b\u6216\u8005\u7ebf\u7a0b\u8fdb\u5165 \u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u8fdb\u5165\u7ba1\u57ce\u540e\u56e0\u4e3a\u5176\u4ed6\u539f\u56e0\u963b\u585e\uff0c\u90a3\u4e48\u5176\u4ed6\u8fdb\u7a0b\u5c31\u6682\u65f6\u65e0\u6cd5\u8bbf\u95ee\u6b64\u7ba1\u7a0b\uff1b\u53ef\u4ee5\u5728\u7ba1\u7a0b\u4e2d\u8bbe\u7f6e \u6761\u4ef6\u53d8\u91cfcondititon \u4ee5\u53ca \u7b49\u5f85/\u5524\u9192\u64cd\u4f5c\uff0c\u8ba9\u4e00\u4e2a\u8fdb\u7a0b\u963b\u585e\u6216\u8005\u7ebf\u7a0b\u5728\u6761\u4ef6\u53d8\u91cf\u4e0a\u7b49\u5f85\uff0c\u6b64\u65f6\u8fdb\u7a0b\u4f1a\u91ca\u653e\u7ba1\u7a0b\u7684\u4f7f\u7528\u6743\uff1b\u901a\u8fc7\u5524\u9192\u64cd\u4f5c\u5c06\u7b49\u5f85\u5728\u6761\u4ef6\u53d8\u91cf\u4e0a\u7684\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u5524\u9192\uff1bx.wait\uff1a\u5c06\u6b63\u5728\u8bbf\u95ee\u7ba1\u7a0b\u7684\u8fdb\u7a0b\u653e\u5230 x \u7684\u7b49\u5f85\u961f\u5217\u4e0a\uff0c\u5e76\u91ca\u653e\u7ba1\u7a0b\uff1bx.signal\uff1a\u4ece\u963b\u585e\u961f\u5217\u4e2d\u5524\u9192\u56e0 x \u88ab\u963b\u585e\u7684\u8fdb\u7a0b","title":"2.3.9 \u7ba1\u7a0b"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#24","text":"","title":"2.4 \u6b7b\u9501"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#241","text":"\u6b7b\u9501\uff1a\u5404\u4e2a\u8fdb\u7a0b\u4e92\u76f8\u7b49\u5f85\u5bf9\u65b9\u624b\u91cc\u7684\u8d44\u6e90\uff1b\u53d1\u751f\u6b7b\u9501\u7684\u8fdb\u7a0b\u4e00\u5b9a\u5904\u4e8e\u963b\u585e\u6001\uff1b\u81f3\u5c11\u6709 2 \u4e2a\u6216 2 \u4e2a\u4ee5\u4e0a\u7684\u8fdb\u7a0b\u540c\u65f6\u6b7b\u9501 \u9965\u997f\uff1a\u7531\u4e8e\u957f\u671f\u5f97\u4e0d\u5230\u60f3\u8981\u7684\u8d44\u6e90\u800c\u65e0\u6cd5\u63a8\u8fdb\uff1b\u4e00\u4e2a\u8fdb\u7a0b\u4e5f\u53ef\u80fd\u53d1\u751f\u6b7b\u9501 \u6b7b\u5faa\u73af\uff1a\u8df3\u4e0d\u51fa\u5faa\u73af\uff1b\u53ef\u4ee5\u662f\u8fd0\u884c\u6001 \u6b7b\u9501\u7684\u5fc5\u8981\u6761\u4ef6\uff1a - \u4e92\u65a5\u6761\u4ef6 - \u4e0d\u53ef\u5265\u593a\u6761\u4ef6 - \u8bf7\u6c42\u548c\u4fdd\u6301\u6761\u4ef6\uff1a\u8fdb\u7a0b\u5df2\u7ecf\u4fdd\u6301\u4e86\u4e00\u4e2a\u8d44\u6e90\uff0c\u4f46\u53c8\u63d0\u51fa\u4e86\u65b0\u7684\u8d44\u6e90\u8bf7\u6c42 - \u5faa\u73af\u7b49\u5f85\u6761\u4ef6\uff1a\u5b58\u5728\u4e00\u79cd\u8fdb\u7a0b\u8d44\u6e90\u7684\u5faa\u73af\u7b49\u5f85\u94fe\uff1b\u6ce8\u610f\u7684\u662f\u53d1\u751f\u6b7b\u9501\u4e00\u5b9a\u6709\u5faa\u73af\u7b49\u5f85\uff0c\u4f46\u662f\u53d1\u751f\u5faa\u73af\u7b49\u5f85\u4e0d\u4e00\u5b9a\u6709\u6b7b\u9501 \u4ec0\u4e48\u65f6\u5019\u4f1a\u6709\u6b7b\u9501\uff1a - \u5bf9\u7cfb\u7edf\u8d44\u6e90\u7684\u7ade\u4e89 - \u8fdb\u7a0b\u63a8\u8fdb\u987a\u5e8f\u975e\u6cd5 - \u4fe1\u53f7\u91cf\u7684\u4f7f\u7528\u4e0d\u5f53 \u6b7b\u9501\u7684\u5904\u7406\u7b56\u7565\uff1a - \u9884\u9632\u6b7b\u9501 - \u907f\u514d\u6b7b\u9501 - \u6b7b\u9501\u7684\u68c0\u67e5\u548c\u89e3\u9664","title":"2.4.1 \u6b7b\u9501\u7684\u6982\u5ff5"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#242","text":"\u7834\u574f\u6b7b\u9501\u7684\u5fc5\u8981\u6761\u4ef6 - \u7834\u574f\u4e92\u65a5\u6761\u4ef6\uff1a\u628a\u4e92\u65a5\u7684\u8fdb\u7a0b\u6539\u9020\u4e3a\u5141\u8bb8\u5171\u4eab\u4f7f\u7528 - \u7834\u574f\u4e0d\u53ef\u5265\u593a\u6761\u4ef6\uff1a - \u5f53\u67d0\u8fdb\u7a0b\u8bf7\u6c42\u8d44\u6e90\u5f97\u4e0d\u5230\u6ee1\u8db3\u65f6\u9700\u8981\u7acb\u5373\u91ca\u653e\u4fdd\u6301\u7684\u6240\u6709\u8d44\u6e90 - \u67d0\u8fdb\u7a0b\u9700\u8981\u7684\u8d44\u6e90\u88ab\u5176\u4ed6\u8fdb\u7a0b\u5360\u6709\u65f6\u53ef\u4ee5\u7531\u64cd\u4f5c\u7cfb\u7edf\u534f\u52a9\u628a\u60f3\u8981\u7684\u8d44\u6e90\u5f3a\u884c\u5265\u593a \u7834\u574f\u8bf7\u6c42\u548c\u4fdd\u6301\u6761\u4ef6\uff1a\u8fdb\u7a0b\u8fd0\u884c\u524d\u4e00\u6b21\u7533\u8bf7\u5b8c\u6240\u9700\u8981\u7684\u5168\u90e8\u8d44\u6e90 \u7834\u574f\u5faa\u73af\u7b49\u5f85\u6761\u4ef6\uff1a\u91c7\u7528\u987a\u5e8f\u8d44\u6e90\u5206\u914d\u6cd5","title":"2.4.2 \u9884\u9632\u6b7b\u9501"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#243","text":"\u5b89\u5168\u5e8f\u5217 \u5904\u4e8e\u5b89\u5168\u72b6\u6001\u4e00\u5b9a\u4e0d\u4f1a\u53d1\u751f\u6b7b\u9501\uff1b\u5982\u679c\u8fdb\u5165\u4e0d\u5b89\u5168\u72b6\u6001\uff0c\u53ef\u80fd\u53d1\u751f\u6b7b\u9501\uff1b\u53d1\u751f\u6b7b\u9501\u4e00\u5b9a\u662f\u5728\u4e0d\u5b89\u5168\u72b6\u6001 \u94f6\u884c\u5bb6\u7b97\u6cd5\uff1a - \u5148\u5224\u65ad request \u7684\u8d44\u6e90\u662f\u5426 \u5c0f\u4e8e\u7b49\u4e8e need \u8d44\u6e90\uff0c\u5927\u4e8e\u8ba4\u4e3a\u51fa\u9519 - \u5982\u679c available \u8d44\u6e90\u5c0f\u4e8e request \u8868\u793a\u6ca1\u6709\u8db3\u591f\u7684\u8d44\u6e90\uff1b - \u6709\u8db3\u591f\u8d44\u6e90\u5c31\u9610\u91ca\u5206\u914d\u8d44\u6e90\uff0c\u5e76\u6267\u884c\u5b89\u5168\u6027\u7b97\u6cd5","title":"2.4.3 \u907f\u514d\u6b7b\u9501"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#244","text":"\u6b7b\u9501\u7684\u68c0\u6d4b\uff0c\u5fc5\u987b\uff1a - \u7528\u67d0\u79cd\u6570\u636e\u7ed3\u6784\u6765\u4fdd\u5b58\u8d44\u6e90\u7684\u8bf7\u6c42\u548c\u5206\u914d\u4fe1\u606f\uff0c\u5982\u8d44\u6e90\u5206\u914d\u56fe - \u63d0\u4f9b\u4e00\u79cd\u7b97\u6cd5\uff0c\u5229\u7528\u4e0a\u8ff0\u4fe1\u606f\u6765\u68c0\u6d4b\u7cfb\u7edf\u662f\u5426\u5df2\u8fdb\u5165\u6b7b\u9501\u72b6\u6001 \u5982\u679c\u4e0d\u80fd\u6d88\u9664\u6240\u6709\u7684\u8fb9\u5c31\u662f\u53d1\u751f\u4e86\u6b7b\u9501 \u6b7b\u9501\u7684\u89e3\u9664\uff1a - \u7528\u6b7b\u9501\u68c0\u6d4b\u7b97\u6cd5\u5316\u7b80\u8d44\u6e90\u5206\u914d\u56fe\u540e\uff0c\u8fd8\u8fde\u7740\u8fb9\u7684\u5c31\u662f\u6b7b\u9501\u8fdb\u7a0b - \u89e3\u9664\u6b7b\u9501\u7684\u4e3b\u8981\u65b9\u6cd5\uff1a - \u8d44\u6e90\u5265\u593a\u6cd5 - \u64a4\u9500\u8fdb\u7a0b\u6cd5 - \u8fdb\u7a0b\u56de\u9000\u6cd5","title":"2.4.4 \u6b7b\u9501\u7684\u68c0\u6d4b\u548c\u89e3\u9664"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#3","text":"","title":"3 \u5185\u5b58\u7ba1\u7406"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#31","text":"","title":"3.1 \u5185\u5b58"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#311","text":"\u7a0b\u5e8f\u6267\u884c\u524d\u9700\u8981\u653e\u5230\u5185\u5b58\u4e2d\u624d\u80fd\u88abCPU\u5904\u7406 \u5185\u5b58\u5730\u5740\uff1a\u6309\u5b57\u8282\u7f16\u5740\uff0c\u6309\u5b57\u957f\u7f16\u5740 \u903b\u8f91\u5730\u5740 / \u7269\u7406\u5730\u5740\uff0c\u903b\u8f91\u5730\u5740->\u7269\u7406\u5730\u5740\uff1a\u91cd\u5b9a\u4f4d \u7a0b\u5e8f\u53d8\u6210\u5728\u5185\u5b58\u4e2d\u6267\u884c\u7684\u7a0b\u5e8f\u7684\u6b65\u9aa4\uff1a\u7f16\u8bd1\uff0c\u94fe\u63a5\uff0c\u88c5\u5165 \u94fe\u63a5\u7684\u65b9\u5f0f\uff1a\u94fe\u63a5\u540e\u5f62\u6210\u5b8c\u6574\u7684\u903b\u8f91\u5730\u5740 \u9759\u6001\u94fe\u63a5 \u88c5\u5165\u65f6\u52a8\u6001\u94fe\u63a5\uff1a\u4f18\u70b9\u662f\u4fbf\u4e8e\u4fee\u6539\u548c\u66f4\u65b0\uff0c\u4fbf\u4e8e\u5b9e\u73b0\u5bf9\u76ee\u6807\u6a21\u5757\u7684\u5171\u4eab \u8fd0\u884c\u65f6\u52a8\u6001\u94fe\u63a5\uff1a\u8fd0\u884c\u65f6\u9700\u8981\u67d0\u4e2a\u6a21\u5757\u518d\u8fdb\u884c\u94fe\u63a5\uff1b\u4f18\u70b9\u662f\u80fd\u591f\u52a0\u5feb\u7a0b\u5e8f\u7684\u88c5\u5165\u8fc7\u7a0b\uff0c\u8282\u7701\u5185\u5b58\u7a7a\u95f4 \u88c5\u5165\u7684\u65b9\u5f0f\uff1a\u88c5\u5165\u540e\u5f62\u6210\u7269\u7406\u5730\u5740 - \u7edd\u5bf9\u88c5\u5165\uff1a\u88c5\u5165\u65f6\u76f4\u63a5\u5199\u6210\u7edd\u5bf9\u5730\u5740\uff1b\u53ea\u9002\u7528\u4e8e\u5355\u9053\u7a0b\u5e8f\u73af\u5883 - \u53ef\u91cd\u5b9a\u4f4d\u88c5\u5165\uff1a\u4e5f\u53eb\u9759\u6001\u91cd\u5b9a\u4f4d\uff0c\u5728\u88c5\u5165\u65f6\u5bf9\u903b\u8f91\u5730\u5740\u8fdb\u884c\u91cd\u5b9a\u4f4d\uff0c\u53d8\u6210\u7edd\u5bf9\u5730\u5740\uff1b\u8fd0\u884c\u671f\u95f4\u4e0d\u80fd\u518d\u79fb\u52a8\uff1b\u5fc5\u987b\u5206\u914d\u8981\u6c42\u7684\u5168\u90e8\u5185\u5b58\u7a7a\u95f4 - \u52a8\u6001\u8fd0\u884c\u65f6\u88c5\u5165\uff1a\u4e5f\u53eb\u52a8\u6001\u91cd\u5b9a\u4f4d\uff0c\u5730\u5740\u8f6c\u6362\u4f1a\u63a8\u8fdf\u5230\u7a0b\u5e8f\u6267\u884c\u65f6\u8fdb\u884c\uff1b\u9700\u8981\u91cd\u5b9a\u4f4d\u5bc4\u5b58\u5668\u7684\u652f\u6301\uff1b\u5141\u8bb8\u7a0b\u5e8f\u5728\u5185\u5b58\u4e2d\u53d1\u751f\u79fb\u52a8","title":"3.1.1 \u5185\u5b58\u57fa\u7840\u77e5\u8bc6"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#312","text":"\u5185\u5b58\u7a7a\u95f4\u7684\u5206\u914d\u548c\u56de\u6536 \u865a\u62df\u5185\u5b58\u5bf9\u5185\u5b58\u8fdb\u884c\u6269\u5145 \u8986\u76d6\u6280\u672f \u4ea4\u6362\u6280\u672f \u865a\u62df\u5b58\u50a8\u6280\u672f \u63d0\u4f9b\u5730\u5740\u8f6c\u6362\u529f\u80fd:\u4e09\u79cd\u88c5\u5165\u65b9\u5f0f \u5185\u5b58\u5171\u4eab\uff1a\u53ea\u8bfb\u533a\u57df\u624d\u53ef\u4ee5\u5171\u4eab\uff0c\u6bd4\u5982\u53ef\u91cd\u5165\u4ee3\u7801 \u5185\u5b58\u4fdd\u62a4\uff1a\u4e24\u79cd\u529e\u6cd5 \u4e0a\u9650\u5bc4\u5b58\u5668\u548c\u4e0b\u9650\u5bc4\u5b58\u5668 \u91cd\u5b9a\u4f4d\u5bc4\u5b58\u5668\u548c\u754c\u5730\u5740\u5bc4\u5b58\u5668\uff08\u754c\u5730\u5740\u5bc4\u5b58\u5668\u6765\u5224\u65ad\u903b\u8f91\u5730\u5740\u7684\u8303\u56f4\uff09","title":"3.1.2 \u5185\u5b58\u7ba1\u7406"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#313","text":"\u8986\u76d6\uff1a - \u7a0b\u5e8f\u5206\u4e3a\u591a\u4e2a\u6bb5\uff0c\u5e38\u7528\u7684\u6bb5\u5e38\u9a7b\u5185\u5b58\u4e2d - \u5185\u5b58\u4e2d\u5206\u4e3a\u4e00\u4e2a \u56fa\u5b9a\u533a \u548c \u82e5\u5e72\u4e2a \u8986\u76d6\u533a - \u5e38\u9a7b\u7684\u6bb5\u653e\u5728\u56fa\u5b9a\u533a\u4e2d\uff0c\u4e0d\u5e38\u7528\u7684\u6bb5\u653e\u5728\u8986\u76d6\u533a\uff0c\u9700\u8981\u65f6\u8c03\u5165\u5185\u5b58 - \u7f3a\u70b9\uff1a\u5bf9\u7528\u6237\u4e0d\u900f\u660e\uff0c\u589e\u52a0\u7528\u6237\u7f16\u7a0b\u8d1f\u62c5 \u4ea4\u6362\u6280\u672f / \u5bf9\u6362\u6280\u672f\uff1a - \u5185\u5b58\u7d27\u5f20\u65f6\u5c06\u67d0\u4e9b\u8fdb\u7a0b\u6682\u65f6\u6362\u51fa\u5916\u5b58 \u6216\u8005 \u628a\u5916\u5b58\u4e2d\u67d0\u4e9b\u5df2\u7ecf\u5177\u5907\u8fd0\u884c\u6761\u4ef6\u7684\u8fdb\u7a0b\u6362\u5165\u5185\u5b58\uff1b\u88ab\u6362\u51fa\u5916\u5b58\u7684\u8fdb\u7a0b\u7684PCB\u8fd8\u662f\u5728\u5185\u5b58\u4e2d\u7684 - \u4e2d\u7ea7\u8c03\u5ea6\uff1a\u88ab\u66ff\u6362\u5230\u5916\u5b58\u7684\u8fdb\u7a0b\u72b6\u6001\u4e3a\u6302\u8d77 \u78c1\u76d8\u5b58\u50a8\u7a7a\u95f4\uff1a - \u5bf9\u6362\u533a\uff08I/O\u5feb\uff0c\u8fde\u7eed\u5206\u914d\u65b9\u5f0f\uff09\uff0c\u6587\u4ef6\u533a\uff08\u79bb\u6563\u5206\u914d\uff09 - \u8fdb\u7a0b\u8fd0\u884c\u65f6\u53d1\u73b0\u5185\u5b58\u5403\u7d27\u65f6\u8fdb\u884c\u4ea4\u6362\uff1b\u5982\u8bb8\u591a\u8fdb\u7a0b\u8fd0\u884c\u65f6\u53d1\u751f\u7f3a\u9875\uff1b\u5982\u679c\u7f3a\u9875\u7387\u660e\u663e\u4e0b\u964d\uff0c\u5c31\u6682\u505c\u6362\u51fa - \u4f18\u5148\u6362\u51fa\u963b\u585e\u8fdb\u7a0b\uff0c\u4f18\u5148\u6362\u51fa\u4f18\u5148\u7ea7\u4f4e\u7684\u8fdb\u7a0b","title":"3.1.3 \u8986\u76d6\u548c\u4ea4\u6362"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#314","text":"\u5185\u90e8\u788e\u7247\uff1a\u5206\u914d\u7ed9\u8fdb\u7a0b\u7684\u5185\u5b58\u533a\u57df\u6709\u4e9b\u6ca1\u6709\u7528\u4e0a \u5916\u90e8\u788e\u7247\uff1a\u5185\u5b58\u4e2d\u6709\u4e9b\u7a7a\u95f2\u533a\u57df\u592a\u5c0f\u800c\u96be\u4ee5\u5229\u7528 \u5355\u4e00\u8fde\u7eed\u5206\u914d \u5206\u4e3a\u7cfb\u7edf\u533a\uff0c\u7528\u6237\u533a \u53ea\u80fd\u6709\u4e00\u9053\u7528\u6237\u7a0b\u5e8f \u4f18\u70b9\uff1a\u5b9e\u73b0\u7b80\u5355\u4e0d\u4e00\u5b9a\u9700\u8981\u5185\u5b58\u4fdd\u62a4\uff1b\u7f3a\u70b9\uff1a\u5229\u7528\u7387\u4f4e\uff0c\u53ea\u80fd\u7528\u4e8e\u5355\u7528\u6237\uff0c\u5355\u4efb\u52a1\u7684\u64cd\u4f5c\u7cfb\u7edf \u6709\u5185\u90e8\u788e\u7247\uff0c\u65e0\u5916\u90e8\u788e\u7247 \u56fa\u5b9a\u5206\u533a\u5206\u914d \u5c06\u7528\u6237\u533a\u5206\u4e3a\u82e5\u5e72\u5206\u533a\uff0c\u6709\u5206\u533a\u5927\u5c0f\u76f8\u7b49\u548c\u5206\u533a\u5927\u5c0f\u4e0d\u540c\u7684\u65b9\u5f0f \u5206\u533a\u8bf4\u660e\u8868 \u4f18\u70b9\uff1a\u5b9e\u73b0\u7b80\u5355\uff1b\u7f3a\u70b9\uff1a\u7528\u6237\u7a0b\u5e8f\u592a\u5927\u65f6\u9700\u8981\u7528\u8986\u76d6\u6280\u672f\uff0c\u4f1a\u964d\u4f4e\u6027\u80fd \u6709\u5185\u90e8\u788e\u7247\uff0c\u65e0\u5916\u90e8\u788e\u7247 \u52a8\u6001\u5206\u533a\u5206\u914d / \u53ef\u53d8\u5206\u533a\u5206\u914d \u4e0d\u9884\u5148\u5212\u5206\u5185\u5b58\u5206\u533a \u4f7f\u7528\u6570\u636e\u7ed3\u6784\u8bb0\u5f55\u5185\u5b58\u4f7f\u7528\u60c5\u51b5\uff1a\u7a7a\u95f2\u5206\u533a\u8868\uff0c\u7a7a\u95f2\u5206\u533a\u94fe \u5206\u914d\u7b97\u6cd5\uff1a\u4e0b\u4e00\u8282\u5185\u5bb9 \u5206\u533a\u7684\u5206\u914d\u548c\u56de\u6536 \u6ca1\u6709\u5185\u90e8\u788e\u7247\uff0c\u6709\u5916\u90e8\u788e\u7247 \u89e3\u51b3\u5916\u90e8\u788e\u7247\uff1a\u7d27\u51d1","title":"3.1.4 \u8fde\u7eed\u5206\u914d\u7ba1\u7406\u65b9\u5f0f"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#315","text":"\u9996\u6b21\u9002\u5e94\u7b97\u6cd5 first fit \u4ece\u4f4e\u5730\u5740\u5f00\u59cb\u9012\u589e\u67e5\u627e \u7a7a\u95f2\u5206\u533a\u8868\u6309\u7167\u5730\u5740\u4ece\u5c0f\u5230\u5927\u6392 \u6700\u4f73\u9002\u5e94\u7b97\u6cd5 best fit \u7a7a\u95f2\u5206\u533a\u8868\u6309\u5206\u533a\u5927\u5c0f\u4ece\u5c0f\u5230\u5927\u6392 \u627e\u5230\u7b2c\u4e00\u4e2a\u6ee1\u8db3\u8981\u6c42\u7684\uff0c\u5373\u5206\u533a\u5927\u5c0f\u6ee1\u8db3\u4e14\u5927\u5c0f\u6700\u5c0f\u7684\u5206\u533a \u7f3a\u70b9\uff1a\u4f1a\u4ea7\u751f\u5f88\u591a\u5916\u90e8\u788e\u7247 \u6700\u574f\u9002\u5e94\u7b97\u6cd5 worst fit \u7a7a\u95f2\u5206\u533a\u8868\u6309\u5206\u533a\u5927\u5c0f\u4ece\u5927\u5230\u5c0f\u6392 \u7f3a\u70b9\uff1a\u4e4b\u540e\u6709\u5927\u8fdb\u7a0b\u6ca1\u6709\u7a7a\u95f4\u5206\u914d \u90bb\u8fd1\u9002\u5e94\u7b97\u6cd5 next fit \u7a7a\u95f2\u5206\u533a\u6309\u7167\u5730\u5740\u4ece\u5c0f\u5230\u5927\u6392 \u7a7a\u95f2\u5206\u533a\u94fe\u9700\u8981\u8bbe\u7f6e\u4e3a\u5faa\u73af\u94fe\u8868 \u6bcf\u6b21\u4ece\u4e0a\u6b21\u67e5\u627e\u7ed3\u675f\u7684\u4f4d\u7f6e\u5f00\u59cb\u5f80\u540e\u67e5\u627e","title":"3.1.5 \u52a8\u6001\u5206\u533a\u5206\u914d\u7b97\u6cd5"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#316","text":"\u975e\u8fde\u7eed\u5206\u914d\u7ba1\u7406\u65b9\u5f0f\uff1a - \u57fa\u672c\u5206\u9875\u5b58\u50a8\u7ba1\u7406 - \u57fa\u672c\u5206\u6bb5\u5b58\u50a8\u7ba1\u7406 - \u6bb5\u9875\u5f0f\u5b58\u50a8\u7ba1\u7406 \u5c06\u5185\u5b58\u5206\u4e3a\u5927\u5c0f\u76f8\u7b49\u7684\u5206\u533a\uff1a - \u9875\u6846 / \u9875\u5e27 / \u5185\u5b58\u5757 / \u7269\u7406\u5757 - \u9875\u6846\u53f7 / \u5185\u5b58\u5757\u53f7 / \u9875\u5e27\u53f7 / \u7269\u7406\u5757\u53f7 \u5c06\u7528\u6237\u8fdb\u7a0b\u4e5f\u5206\u4e3a\u4e5f\u9875\u6846\u5927\u5c0f\u4e00\u6837\u7684\u533a\u57df\uff0c\u79f0\u4e3a \u9875 \u6216 \u9875\u9762\uff08\u6700\u540e\u4e00\u4e2a\u9875\u53ef\u80fd\u6ca1\u6709\u6ee1\uff09 \u903b\u8f91\u5730\u5740\u5230\u7269\u7406 \u5730\u5740\u7684\u8f6c\u6362\uff1a - \u8ba1\u7b97\u903b\u8f91\u5730\u5740\u5bf9\u5e94\u7684\u9875\u53f7 - \u8be5\u9875\u53f7\u5728\u5185\u5b58\u4e2d\u7684\u8d77\u59cb\u5730\u5740 - \u903b\u8f91\u5730\u5740\u5728\u5185\u9762\u5185\u7684\u504f\u79fb\u91cf - \u7269\u7406\u5730\u5740 = \u8d77\u59cb\u5730\u5740 + \u504f\u79fb\u91cf \u903b\u8f91\u5730\u5740\u7ed3\u6784\uff1a \u9875\u8868\uff1a\u9875\u53f7\u5230\u5757\u53f7\u7684\u5bf9\u5e94\u5173\u7cfb \u6bcf\u4e2a\u9875\u8868\u9879\u9700\u8981\u7684\u5b57\u8282\u6570\u4e3a \u5185\u5b58\u4e2d\u5757\u6570 \u9700\u8981\u7684\u5b57\u8282\u6570","title":"3.1.6 \u57fa\u672c\u5206\u9875\u5b58\u50a8\u7ba1\u7406\u7684\u57fa\u672c\u6982\u5ff5"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#317","text":"\u9875\u8868\u5bc4\u5b58\u5668 PTR\uff0c\u5b58\u653e\u9875\u8868\u5728\u5185\u5b58\u4e2d\u7684\u8d77\u59cb\u5730\u5740F\u548c\u9875\u8868\u957f\u5ea6M\uff1b \u8fdb\u7a0b\u672a\u6267\u884c\u65f6\uff0c\u9875\u8868\u8d77\u59cb\u5730\u5740\u548c\u957f\u5ea6\u653e\u5728\u5728 PCB \u4e2d\uff0c\u5f53\u8fdb\u7a0b\u88ab\u8c03\u5ea6\u65f6\u624d\u4f1a\u653e\u5230\u9875\u8868\u5bc4\u5b58\u5668\u4e2d \u9875\u5f0f\u7ba1\u7406\u4e2d\u5730\u5740\u662f\u4e00\u7ef4\u7684\uff1b\u5730\u5740\u53d8\u6362\u8fc7\u7a0b\u9700\u8981\u8bbf\u95ee2\u6b21\u5185\u5b58\uff1a\u7b2c\u4e00\u6b21\u67e5\u9875\u8868\uff0c\u7b2c\u4e8c\u6b21\u8bbf\u95ee\u76ee\u6807\u5185\u5b58\u5355\u5143 \u5982\u679c\u4e00\u4e2a\u9875\u8868\u9879\u53ea\u9700\u8981\u8981 3B \u5c31\u53ef\u4ee5\u8868\u793a\uff0c\u8fd8\u662f\u4f1a\u8ba9\u5176\u4f7f\u7528 4B\uff0c\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u8ba9\u6bcf\u4e2a\u9875\u9762\u6070\u597d\u53ef\u4ee5\u88c5\u7684\u4e0b\u6574\u6570\u4e2a\u9875\u8868\u9879","title":"3.1.7 \u57fa\u672c\u5730\u5740\u53d8\u6362\u673a\u6784"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#318","text":"\u5c40\u90e8\u6027\u539f\u7406\uff1a - \u65f6\u95f4\u5c40\u90e8\u6027 - \u7a7a\u95f4\u5c40\u90e8\u6027 \u5feb\u8868\uff1aTLB - \u5185\u5b58\u4e2d\u7684\u9875\u8868\u88ab\u79f0\u4e3a\u6162\u8868 - \u662f\u9875\u8868\u7684\u4e00\u90e8\u5206\u526f\u672c - \u5982\u679c\u5feb\u8868\u547d\u4e2d\uff0c\u5219\u53ea\u9700\u8981\u4e00\u6b21\u8bbf\u5b58;\u5426\u5219\u8fd8\u662f\u9700\u89812\u6b21 - \u6709\u7684\u7cfb\u7edf\u652f\u6301\u5feb\u8868\u548c\u6162\u8868\u540c\u65f6\u67e5\u8be2","title":"3.1.8 \u5177\u6709\u5feb\u8868\u7684\u5730\u5740\u53d8\u6362\u673a\u6784"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#319","text":"\u5355\u7ea7\u9875\u8868\u7684\u95ee\u9898\uff1a - \u9875\u8868\u5fc5\u987b\u8fde\u7eed\u5b58\u653e\uff0c\u9875\u8868\u5f88\u5927\u65f6\u9700\u8981\u5360\u7528\u591a\u4e2a\u8fde\u7eed\u7684\u9875\u6846 - \u6ca1\u6709\u5fc5\u8981\u8ba9\u6574\u4e2a\u9875\u8868\u5e38\u9a7b\u5185\u5b58\uff1b\u56e0\u4e3a\u8fdb\u7a0b\u4e00\u6bb5\u65f6\u95f4\u5185\u53ef\u80fd\u53ea\u9700\u8981\u8bbf\u95ee\u51e0\u4e2a\u7279\u5b9a\u7684\u9875\u9762 \u95ee\u9898\u7684\u89e3\u51b3\uff1a - \u4e3a\u79bb\u6563\u5206\u914d\u7684\u9875\u8868\u518d\u5efa\u7acb\u4e00\u5f20\u9875\u8868\uff0c\u79f0\u4e3a\u9875\u76ee\u5f55\u8868\u6216\u5916\u5c42\u9875\u8868\u6216\u9876\u5c42\u9875\u8868 - \u865a\u62df\u5b58\u50a8\u6280\u672f\uff08\u540e\u9762\u7684\u7ae0\u8282\u7684\u5185\u5bb9\uff09 \u9700\u8981\u6ce8\u610f\u7684\u7ec6\u8282\uff1a - \u91c7\u7528\u591a\u7ea7\u9875\u8868\u65f6\uff0c\u5404\u7ea7\u9875\u8868\u7684\u5927\u5c0f\u4e0d\u80fd\u8d85\u8fc7\u4e00\u4e2a\u9875\u9762 - \u5047\u8bbe\u6ca1\u6709\u5feb\u8868\uff0c\u9700\u8981\u8bbf\u5b583\u6b21","title":"3.1.9 \u4e24\u7ea7\u9875\u8868"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#3110","text":"\u5206\u6bb5\uff1a\u6309\u7167\u7a0b\u5e8f\u7684\u903b\u8f91\u5212\u5206\u4e3a\u82e5\u5e72\u6bb5\uff0c\u6bcf\u6bb5\u4ece0\u5f00\u59cb\u7f16\u5740 \u6bb5\u8868\uff1a - \u6bb5\u8868\u9879\u7684\u5185\u5bb9\uff1a\u6bb5\u53f7\uff08\u4e0d\u4f1a\u5360\u6bb5\u8868\u7684\u7a7a\u95f4\uff09\uff0c\u6bb5\u957f\uff0c\u57fa\u5740 - \u6bcf\u4e2a\u6bb5\u8868\u9879\u7684\u957f\u5ea6\u662f\u76f8\u540c\u7684 - \u6bb5\u8868\u7684\u5730\u5740\u548c\u957f\u5ea6\u5b58\u5728\u5728\u6bb5\u8868\u5bc4\u5b58\u5668\u4e2d \u5730\u5740\u53d8\u5316\uff1a \u5206\u6bb5\uff0c\u5206\u9875\u7684\u5bf9\u6bd4\uff1a - \u9875\u5bf9\u7528\u6237\u662f\u4e0d\u53ef\u89c1\u7684\uff0c\u6bb5\u5bf9\u7528\u6237\u662f\u53ef\u89c1\u7684 - \u9875\u7684\u5927\u5c0f\u662f\u56fa\u5b9a\u7684 - \u5bf9\u7528\u6237\u6765\u8bf4\uff0c\u5206\u9875\u5730\u5740\u7a7a\u95f4\u662f\u4e00\u7ef4\u7684\uff0c\u5206\u6bb5\u5730\u5740\u7a7a\u95f4\u662f\u4e8c\u7ef4\u7684 - \u5206\u6bb5\u6bd4\u5206\u9875\u5bb9\u6613\u5b9e\u73b0\u4fe1\u606f\u5171\u4eab\u548c\u4fdd\u62a4\uff08\u4e0d\u80fd\u88ab\u4fee\u6539\u7684\u4ee3\u7801\u79f0\u4e3a\u7eaf\u4ee3\u7801\uff0c\u4e0d\u5c5e\u4e8e\u4e34\u754c\u8d44\u6e90\uff0c\u53ef\u4ee5\u5171\u4eab\uff09 - \u8bbf\u5b58\u6b21\u6570\uff1a\u65e0\u5feb\u8868\uff0c\u5355\u7ea7\u9875\u8868\u8981\u4e24\u6b21\uff0c\u5206\u6bb5\u8981\u4e24\u6b21 - \u5206\u6bb5\u7cfb\u7edf\u4e2d\u4e5f\u53ef\u4ee5\u5f15\u5165\u5feb\u8868\u673a\u5236","title":"3.1.10 \u57fa\u672c\u5206\u6bb5\u5b58\u50a8\u7ba1\u7406\u65b9\u5f0f"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#3111","text":"\u5206\u9875\u3001\u5206\u6bb5\u7684\u4f18\u7f3a\u70b9\uff1a \u5730\u5740\u7ed3\u6784\uff1a \u6bb5\u8868 + \u9875\u8868\uff1a \u4e00\u4e2a\u8fdb\u7a0b\u5bf9\u5e94\u4e00\u4e2a\u6bb5\u8868\uff08\u6bb5\u53f7\uff0c\u6bb5\u957f\uff0c\u9875\u8868\u5b58\u653e\u5757\u53f7\uff09\uff0c\u4e00\u4e2a\u6bb5\u5bf9\u5e94\u4e00\u4e2a\u9875\u8868\uff08\u9875\u53f7\uff0c\u5185\u5b58\u5757\u53f7\uff09\uff1b \u6bb5\u8868\u7684\u8d77\u59cb\u5730\u5740\u548c\u957f\u5ea6\u5b58\u653e\u5728\u6bb5\u8868\u5bc4\u5b58\u5668\u4e2d \u5730\u5740\u8f6c\u6362\uff1a\u5982\u679c\u6ca1\u6709\u5feb\u8868\u9700\u8981\u4e09\u6b21\u8bbf\u5b58\uff1b \u5feb\u8868\u547d\u4e2d\u53ea\u9700\u8981\u4e00\u6b21\u8bbf\u5b58","title":"3.1.11 \u6bb5\u9875\u5f0f\u7ba1\u7406"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#32","text":"","title":"3.2 \u865a\u62df\u5185\u5b58"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#321","text":"\u5c40\u90e8\u6027\u539f\u7406\uff1a - \u65f6\u95f4\u5c40\u90e8\u6027 - \u7a7a\u95f4\u5c40\u90e8\u6027 \u4f20\u7edf\u5b58\u50a8\u5668\u7ba1\u7406\u65b9\u5f0f\u7684\u7279\u70b9\uff1a \u4e00\u6b21\u6027 \u9a7b\u7559\u6027 \u865a\u62df\u5185\u5b58\u7279\u5f81\uff1a \u591a\u6b21\u6027 \u5bf9\u6362\u6027 \u865a\u62df\u6027 \u865a\u62df\u5185\u5b58\u7684\u5b9e\u73b0\uff1a\u8bf7\u6c42\u8c03\u9875\u529f\u80fd\uff0c\u9875\u9762\u7f6e\u6362\u529f\u80fd - \u8bf7\u6c42\u5206\u9875\u5b58\u50a8\u7ba1\u7406 - \u8bf7\u6c42\u5206\u6bb5\u5b58\u50a8\u7ba1\u7406 - \u8bf7\u6c42\u6bb5\u9875\u5f0f\u5b58\u50a8\u7ba1\u7406","title":"3.2.1 \u865a\u62df\u5185\u5b58\u7684\u57fa\u672c\u6982\u5ff5"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#322","text":"\u64cd\u4f5c\u7cfb\u7edf\u8981\u63d0\u4f9b\u7684\u529f\u80fd\uff1a - \u8bf7\u6c42\u8c03\u9875\u529f\u80fd - \u9875\u9762\u7f6e\u6362 \u8bf7\u6c42\u5206\u9875\u7ba1\u7406\u65b9\u5f0f\uff1a - \u9875\u8868\u673a\u5236 - \u7f3a\u9875\u4e2d\u65ad\u673a\u6784 - \u5730\u5740\u53d8\u6362\u673a\u6784 \u9875\u8868\u673a\u5236\uff1a\u8bf7\u6c42\u5206\u9875\u7684\u9875\u8868\u589e\u52a0\u7684\u5185\u5bb9 - \u72b6\u6001\u4f4d\uff1a1 \u8868\u793a\u8c03\u5165\u5185\u5b58 - \u8bbf\u95ee\u5b57\u6bb5\uff1a\u4f9b\u7f6e\u6362\u7b97\u6cd5\u53c2\u8003 - \u4fee\u6539\u4f4d\uff1a\u8c03\u5165\u5185\u5b58\u540e\u662f\u5426\u88ab\u4fee\u6539\u8fc7 - \u5916\u5b58\u5730\u5740 \u7f3a\u9875\u4e2d\u65ad\u673a\u6784\uff1a - \u8981\u8bbf\u95ee\u7684\u9875\u9762\u4e0d\u5728\u5185\u5b58\u4e2d\u65f6\uff0c\u5c31\u4ea7\u751f\u7f3a\u9875\u4e2d\u65ad\uff0c\u6b64\u65f6\u7f3a\u9875\u7684\u8fdb\u7a0b\u963b\u585e\uff0c\u653e\u5165\u963b\u585e\u961f\u5217\uff0c\u8c03\u9875\u5b8c\u6210\u540e\u518d\u5c06\u5176\u5524\u9192\uff0c\u653e\u56de\u5c31\u7eea\u961f\u5217 - \u5982\u679c\u6709\u7a7a\u95f2\u5757\uff0c\u5c31\u5206\u914d\u4e00\u4e2a\u7a7a\u95f2\u5757 - \u5982\u679c\u6ca1\u6709\u7a7a\u95f2\u5757\u5c31\u7531\u9875\u9762\u7f6e\u6362\u7b97\u6cd5\u9009\u62e9\u4e00\u4e2a\u9875\u9762\u6dd8\u6c70\uff1b\u5982\u679c\u4fee\u6539\u8fc7\u8981\u5c06\u5176\u5199\u56de\u5916\u5b58\uff0c\u6ca1\u4fee\u6539\u8fc7\u4e0d\u9700\u8981 - \u7f3a\u9875\u4e2d\u65ad\u662f\u5185\u4e2d\u65ad\u7684\u6545\u969c - \u5982\u679c\u5728\u5feb\u8868\u4e2d\u8868\u793a\u80af\u5b9a\u5728\u5185\u5b58\u4e2d - \u65b0\u589e\u7684\u6b65\u9aa4\uff1a - \u8bf7\u6c42\u8c03\u9875 - \u9875\u9762\u7f6e\u6362 - \u4fee\u6539\u66f4\u65b0\u9875\u8868","title":"3.2.2 \u8bf7\u6c42\u5206\u9875\u7ba1\u7406\u65b9\u5f0f"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#323","text":"\u9875\u9762\u7f6e\u6362\u7b97\u6cd5\uff1a\u8ffd\u6c42\u5c11\u7684\u7f3a\u9875\u7387 - \u6700\u4f73\u7f6e\u6362\u7b97\u6cd5 OPT \u6bcf\u6b21\u6dd8\u6c70\u7684\u9875\u9762\u662f\u4ee5\u540e\u6700\u957f\u65f6\u95f4\u5185\u4e0d\u518d\u88ab\u8bbf\u95ee\u7684\u9875\u9762 - \u5148\u8fdb\u5148\u51fa\u7f6e\u6362\u7b97\u6cd5 FIFO - \u6700\u8fd1\u6700\u4e45\u672a\u4f7f\u7528\u7f6e\u6362\u7b97\u6cd5 LRU \u5728\u8bbf\u95ee\u5b57\u6bb5\u4e2d\u8bbe\u7f6e\u81ea\u4e0a\u6b21\u88ab\u8bbf\u95ee\u4ee5\u6765\u6240\u7ecf\u5386\u7684\u65f6\u95f4 - \u65f6\u949f\u7f6e\u6362\u7b97\u6cd5 CLOCK \u4e5f\u53eb \u6700\u8fd1\u672a\u7528\u7b97\u6cd5 NRU \u8981\u6ce8\u610f\u8bbf\u95ee\u7684\u65f6\u5019\u65f6\u949f\u6307\u9488\u662f\u4e0d\u4f1a\u53d8\u7684 \u5982\u679c\u8bbf\u95ee\u4f4d\u90fd\u662f 1\uff0c\u5219\u626b\u63cf\u5b8c\u4e00\u8f6e\u540e\u628a\u6240\u6709\u8bbf\u95ee\u4f4d\u7f6e 0 \u6700\u591a\u8fdb\u884c 2 \u8f6e\u626b\u63cf - \u6539\u8fdb\u578b\u7684\u65f6\u949f\u7f6e\u6362\u7b97\u6cd5 \u7528\uff08\u8bbf\u95ee\u4f4d\uff0c\u4fee\u6539\u4f4d\uff09\u8868\u793a\u5404\u9875\u9762\u7684\u72b6\u6001 \u7b2c\u4e00\u8f6e\u626b\u63cf\u627e\uff080\uff0c0\uff09 \u7b2c\u4e8c\u8f6e\u626b\u63cf\u627e\uff080\uff0c1\uff09\uff0c\u626b\u63cf\u65f6\u8981\u628a\u8bbf\u95ee\u4f4d\u7f6e 0\uff0c\u5982\u679c\u6ca1\u627e\u5230\u8bbf\u95ee\u4f4d\u5168\u90e8\u7f6e0 \u7b2c\u4e09\u8f6e\u626b\u63cf\u627e\uff080\uff0c0\uff09 \u7b2c\u56db\u8f6e\u626b\u63cf\u627e\uff080\uff0c1\uff09 Belady \u5f02\u5e38\uff1a\u4e3a\u8fdb\u7a0b\u5206\u914d\u7684\u7269\u7406\u5757\u6570\u589e\u5927\u65f6\uff0c\u7f3a\u9875\u7684\u6b21\u6570\u4e0d\u51cf\u53cd\u589e\u7684\u5f02\u5e38\u73b0\u8c61\uff1b\u53ea\u6709FIFO\u624d\u4f1a\u6709","title":"3.2.3 \u9875\u9762\u7f6e\u6362\u7b97\u6cd5"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#324","text":"\u9a7b\u7559\u96c6\uff1a\u8bf7\u6c42\u5206\u9875\u5b58\u50a8\u7ba1\u7406\u4e2d\u7ed9\u8fdb\u7a0b\u5206\u914d\u7684\u7269\u7406\u5757\u7684\u96c6\u5408\uff1b\u4e0d\u80fd\u592a\u5927\uff0c\u4e5f\u4e0d\u80fd\u592a\u5c0f \u9875\u9762\u5206\u914d\uff1a - \u56fa\u5b9a\u5206\u914d\uff1a - \u53ef\u53d8\u5206\u914d\uff1a\u9a7b\u7559\u96c6\u5927\u5c0f\u53ef\u53d8 \u7f6e\u6362\u7b56\u7565\uff1a - \u5c40\u90e8\u7f6e\u6362\uff1a\u53d1\u751f\u7f3a\u9875\u65f6\u53ea\u80fd\u9009\u81ea\u5df1\u8fdb\u7a0b\u7684\u7269\u7406\u5757\u8fdb\u884c\u7f6e\u6362 - \u5168\u5c40\u7f6e\u6362\uff1a\u53ef\u4ee5\u5c06\u7a7a\u95f2\u7684\u7269\u7406\u5757\u5206\u914d\u7ed9\u7f3a\u9875\u8fdb\u7a0b\uff0c\u4e5f\u53ef\u4ee5\u5c06\u522b\u7684\u8fdb\u7a0b\u6301\u6709\u7684\u7269\u7406\u5757\u7f6e\u6362\u5230\u5916\u5b58\uff0c\u518d\u5206\u914d\u7ed9\u7f3a\u9875\u8fdb\u7a0b \u4e0d\u5b58\u5728\u56fa\u5b9a\u5206\u914d+\u5168\u5c40\u7f6e\u6362 \u53ef\u53d8\u5206\u914d\u5168\u5c40\u7f6e\u6362\uff1a\u53ea\u8981\u7f3a\u9875\u5c31\u5206\u914d\u65b0\u7684\u7269\u7406\u5757 \u53ef\u53d8\u5206\u914d\u5c40\u90e8\u7f6e\u6362\uff1a\u66f4\u5177\u53d1\u751f\u7f3a\u9875\u7684\u9891\u7387\u52a8\u6001\u589e\u52a0\u6216\u51cf\u5c11\u8fdb\u7a0b\u7684\u7269\u7406\u5757 \u7269\u7406\u5757\u8c03\u5165\u7b97\u6cd5\uff1a \u5e73\u5747\u5206\u914d\u7b97\u6cd5\uff1a\u7a7a\u95f2\u5757\u5e73\u5747\u5206\u914d\u7ed9\u5404\u8fdb\u7a0b \u6309\u6bd4\u4f8b\u5206\u914d\u7b97\u6cd5\uff1a\u6309\u7167\u8fdb\u7a0b\u5927\u5c0f\u6309\u6bd4\u4f8b\u5206\u914d \u4f18\u5148\u6743\u5206\u914d\u7b97\u6cd5\uff1a\u4f18\u5148\u7ea7\u5927\u7684\u5206\u914d\u591a\u4e00\u4e9b\u7684\u7269\u7406\u5757 \u4f55\u65f6\u8c03\u5165\u9875\u9762\uff1a - \u9884\u8c03\u9875\u7b56\u7565\uff1a\u8fd0\u884c\u524d\u8c03\u5165 - \u8bf7\u6c42\u8c03\u9875\u7b56\u7565\uff1a\u8fd0\u884c\u65f6\u8c03\u5165 \u4ece\u4f55\u5904\u8c03\u5165\u9875\u9762\uff1a\u5916\u5b58\u4e2d\u5bf9\u6362\u533a\uff08\u8fde\u7eed\u5206\u914d\uff09\u7684\u901f\u5ea6\u6bd4\u6587\u4ef6\u533a\uff08\u79bb\u6563\u5206\u914d\uff09\u5feb","title":"3.2.4 \u9875\u9762\u5206\u914d\u7b56\u7565"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#325","text":"\u6296\u52a8 / \u98a0\u7c38\uff1a\u9891\u7e41\u7684\u9875\u9762\u8c03\u5ea6\u884c\u4e3a;\u539f\u56e0\uff1a\u5206\u914d\u7ed9\u8fdb\u7a0b\u7684\u7269\u7406\u5757\u4e0d\u591f\uff1b\u539f\u56e0\u662f\u540c\u65f6\u8fd0\u884c\u7684\u8fdb\u7a0b\u592a\u591a\uff0c\u4ece\u800c\u5206\u914d\u7ed9\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u7269\u7406\u5757\u592a\u5c11 \u5de5\u4f5c\u96c6\uff1a - \u67d0\u6bb5\u65f6\u95f4\u95f4\u9694\u91cc\uff0c\u8fdb\u7a0b\u5b9e\u9645\u8bbf\u95ee\u9875\u9762\u7684\u96c6\u5408; - \u8bbe\u5b9a\u4e00\u4e2a\u7a97\u53e3\u5c3a\u5bf8\uff0c\u4ece\u5f53\u524d\u8bbf\u95ee\u7684\u9875\u9762\u5f80\u524d\u770b\u7a97\u53e3\u5c3a\u5bf8\u7684\u5927\u5c0f\u4e2a\u9875\u9762\uff0c\u8fd9\u4e2a\u96c6\u5408\u5c31\u662f\u5de5\u4f5c\u96c6\uff1b - \u5de5\u4f5c\u96c6\u7684\u5927\u5c0f\u53ef\u80fd\u5c0f\u4e8e\u7a97\u53e3\u5c3a\u5bf8 - \u4e00\u822c\u6765\u8bf4\uff0c\u9a7b\u7559\u96c6\u7684\u5927\u5c0f\u4e0d\u80fd\u5c0f\u4e8e\u5de5\u4f5c\u96c6\u5927\u5c0f \u865a\u62df\u5b58\u50a8\u5668\u6027\u80fd\u5f71\u54cd\u56e0\u7d20\uff1a \u9875\u9762\u5927\uff1a\u7f3a\u9875\u7387\u4f4e\uff0c\u51cf\u5c0f\u9875\u8868\u957f\u5ea6\uff0c\u4f46\u662f\u788e\u7247\u591a \u9875\u9762\u5c0f\uff1a\u7f3a\u9875\u7387\u9ad8\uff0c\u51cf\u5c11\u788e\u7247\uff0c\u63d0\u9ad8\u5185\u5b58\u5229\u7528\u7387\uff0c\u4f46\u662f\u9875\u8868\u957f *\u5730\u5740\u7ffb\u8bd1\uff1a\u4e0e\u8ba1\u7ec4\u76f8\u5173","title":"3.2.5 \u6296\u52a8\u548c\u5de5\u4f5c\u96c6"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#4","text":"","title":"4 \u6587\u4ef6\u7ba1\u7406"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#41","text":"","title":"4.1 \u6587\u4ef6"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#411","text":"","title":"4.1.1 \u521d\u8bc6\u6587\u4ef6\u7ba1\u7406"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#412","text":"FCB \u7684\u6709\u5e8f\u96c6\u5408\u5c31\u662f\u6587\u4ef6\u76ee\u5f55\uff0c\u4e00\u4e2a FCB \u662f\u6587\u4ef6\u76ee\u5f55\u9879 \u6587\u4ef6\u76ee\u5f55\uff1a \u6587\u4ef6\u63a7\u5236\u5757\uff1a FCB\uff0c\u76ee\u5f55\u6587\u4ef6\u4e2d\u7684\u4e00\u6761\u8bb0\u5f55\u5c31\u662f\u4e00\u4e2a FCB \u8bb0\u5f55\u4e2d\u6700\u91cd\u8981\u6700\u57fa\u672c\u7684\u662f\u6587\u4ef6\u540d\u548c\u6587\u4ef6\u5b58\u653e\u7684\u7269\u7406\u5730\u5740 \u5bf9\u76ee\u5f55\u7684\u64cd\u4f5c\uff1a\u641c\u7d22\uff0c\u521b\u5efa\u6587\u4ef6\uff0c\u5220\u9664\u6587\u4ef6\uff0c\u663e\u793a\u76ee\u5f55\uff0c\u4fee\u6539\u76ee\u5f55 \u76ee\u5f55\u7ed3\u6784 \u5355\u7ea7\u76ee\u5f55\u7ed3\u6784\uff1a\u4e0d\u5141\u8bb8\u6587\u4ef6\u91cd\u540d\uff1b\u4e0d\u9002\u7528\u591a\u7528\u6237\u7cfb\u7edf \u4e24\u7ea7\u76ee\u5f55\u7ed3\u6784\uff1a\u4e3b\u6587\u4ef6\u76ee\u5f55\u548c\u7528\u6237\u6587\u4ef6\u76ee\u5f55 \u591a\u7ea7\u76ee\u5f55\u7ed3\u6784\uff1a\u6811\u5f62\u76ee\u5f55\u7ed3\u6784\uff1b\u7edd\u5bf9\u8def\u5f84\uff0c\u76f8\u5bf9\u8def\u5f84\uff1b \u65e0\u73af\u56fe\u76ee\u5f55\u7ed3\u6784\uff1a\u5171\u4eab\u8ba1\u6570\u5668\uff1b\u65b9\u4fbf\u5b9e\u73b0\u6587\u4ef6\u5171\u4eab \u7d22\u5f15\u7ed3\u70b9\uff1aFCB\u7684\u6539\u8fdb\uff1b\u628a FCB \u9664\u6587\u4ef6\u540d\u4e4b\u5916\u7684\u4fe1\u606f\u653e\u5728\u7d22\u5f15\u7ed3\u70b9\u4e2d\uff0c\u76ee\u5f55\u8868\u53ea\u7559\u6587\u4ef6\u540d\u548c\u6307\u5411\u7d22\u5f15\u7ed3\u70b9\u7684\u6307\u9488","title":"4.1.2 \u6587\u4ef6\u76ee\u5f55"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#413","text":"\u6587\u4ef6\u7684\u903b\u8f91\u7ed3\u6784\uff1a\u7528\u6237\u89c6\u89d2\u7684\u7ed3\u6784 - \u65e0\u7ed3\u6784\u6587\u4ef6 / \u6d41\u5f0f\u6587\u4ef6\uff1a\u5982 txt - \u6709\u7ed3\u6784\u6587\u4ef6 / \u8bb0\u5f55\u5f0f\u6587\u4ef6\uff1a\u5982\u6570\u636e\u5e93\u8868\uff0c\u6bcf\u6761\u8bb0\u5f55\u6709\u4e00\u4e2a\u6570\u636e\u9879\u53ef\u4ee5\u4f5c\u4e3a\u5173\u952e\u5b57 \u5b9a\u957f\u8bb0\u5f55 \u53ef\u53d8\u957f\u8bb0\u5f55 \u6709\u7ed3\u6784\u6587\u4ef6\u7684\u903b\u8f91\u7ed3\u6784\uff1a - \u987a\u5e8f\u6587\u4ef6 - \u7d22\u5f15\u6587\u4ef6\uff1a\u5efa\u7acb\u7d22\u5f15\u8868 - \u7d22\u5f15\u987a\u5e8f\u6587\u4ef6","title":"4.1.3 \u6587\u4ef6\u7684\u903b\u8f91\u7ed3\u6784"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#414","text":"OS \u5bf9\u78c1\u76d8\u5757\u7684\u7ba1\u7406\uff1a - \u5bf9\u975e\u7a7a\u95f2\u78c1\u76d8\u5757\u7684\u7ba1\u7406\uff1a\u6587\u4ef6\u7684\u7269\u7406\u7ed3\u6784/\u6587\u4ef6\u5206\u914d\u65b9\u5f0f - \u5bf9\u7a7a\u95f2\u78c1\u76d8\u5757\u7684\u7ba1\u7406\uff1a\u6587\u4ef6\u5b58\u50a8\u7a7a\u95f4\u7ba1\u7406 \u6587\u4ef6\u5757\u3001\u78c1\u76d8\u5757\u7684\u5927\u5c0f\u548c\u5185\u5b58\u5757/\u9875\u9762\u4e00\u6837\u5927;\u6240\u4ee5\u6587\u4ef6\u7684\u903b\u8f91\u5730\u5740\u53ef\u4ee5\u8868\u793a\u4e3a\uff08\u903b\u8f91\u5757\u53f7\uff0c\u5757\u5185\u5730\u5740\uff09 \u6587\u4ef6\u7684\u7269\u7406\u7ed3\u6784 / \u6587\u4ef6\u5206\u914d\u65b9\u5f0f\uff1a - \u8fde\u7eed\u5206\u914d\uff1a \u6bcf\u4e2a\u6587\u4ef6\u5728\u78c1\u76d8\u4e0a\u5360\u6709\u8fde\u7eed\u7684\u5757\uff1b \u7269\u7406\u5757\u53f7=\u8d77\u59cb\u5757\u53f7\uff08\u67e5\u8868\uff09+\u903b\u8f91\u5757\u53f7\uff1b \u62d3\u5c55\u6587\u4ef6\u4e0d\u65b9\u4fbf - \u94fe\u63a5\u5206\u914d \u9690\u5f0f\u94fe\u63a5 \u663e\u793a\u94fe\u63a5\uff1a\u6587\u4ef6\u5206\u914d\u8868 FAT;\u56e0\u4e3a\u53ea\u9700\u8981\u67e5\u627eFAT\uff0c\u6240\u4ee5\u4e5f\u7b97\u662f\u652f\u6301\u968f\u673a\u8bbf\u95ee\uff1b\u4e00\u4e2a\u78c1\u76d8\u4e00\u5f20 FAT - \u7d22\u5f15\u5206\u914d: \u4e3a\u6bcf\u4e2a\u6587\u4ef6\u5efa\u7acb\u4e00\u5f20\u7d22\u5f15\u8868\uff0c\u662f\u903b\u8f91\u5757\u53f7\u5230\u7269\u7406\u5757\u53f7\u7684\u6620\u5c04\uff1b \u7d22\u5f15\u8868\u4e2d\u7684\u5185\u5bb9\u4e5f\u5b58\u653e\u5728\u4e00\u4e2a\u78c1\u76d8\u5757\u4e2d\uff0c\u53eb\u7d22\u5f15\u5757\uff1b \u76ee\u5f55\u4e2d\u9700\u8981\u8bb0\u5f55\u6bcf\u4e2a\u6587\u4ef6\u7684\u7d22\u5f15\u5757\uff1b \u5982\u679c\u4e00\u4e2a\u78c1\u76d8\u5757\u5b58\u4e0d\u4e0b\u67d0\u6587\u4ef6\u7684\u7d22\u5f15\u8868\u7684\u89e3\u51b3\u65b9\u6848\uff1a \u94fe\u63a5\u65b9\u6848\uff1a\u4e00\u4e2a\u6587\u4ef6\u9700\u8981\u7684\u7d22\u5f15\u5757\u7279\u522b\u591a\u65f6\u6548\u7387\u4f4e \u591a\u5c42\u7d22\u5f15\uff1a\u76ee\u5f55\u4e2d\u8bb0\u5f55\u9876\u7ea7\u7d22\u5f15\u8868\u7684\u78c1\u76d8\u5757 \u6df7\u5408\u7d22\u5f15 \u8fde\u7eed\u5206\u914d\uff1a \u94fe\u63a5\u5206\u914d\uff1a \u7d22\u5f15\u5206\u914d\uff1a \u603b\u7ed3\uff1a","title":"4.1.4 \u6587\u4ef6\u7684\u7269\u7406\u7ed3\u6784"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#415","text":"\u5b58\u50a8\u7a7a\u95f4\u7684\u5212\u5206\u4e0e\u521d\u59cb\u5316\uff1a \u7ba1\u7406\u65b9\u5f0f\uff1a - \u7a7a\u95f2\u8868\u6cd5 - \u7a7a\u95f2\u94fe\u8868\u6cd5 \u7a7a\u95f2\u76d8\u5757\u94fe:\u5206\u914d\u548c\u56de\u6536\u7684\u65f6\u5019\u90fd\u662f\u4fee\u6539\u94fe\u5934\u548c\u94fe\u5c3e\u6307\u9488\uff1b\u9002\u5408\u79bb\u6563\u5206\u914d \u7a7a\u95f2\u76d8\u533a\u94fe\uff1a - \u4f4d\u793a\u56fe\u6cd5\uff1a\u7528\u4e8c\u8fdb\u5236\u4f4d\u8868\u793a\uff1b\uff08\u5b57\u53f7\uff0c\u4f4d\u53f7\uff09\u548c \u76d8\u5757\u53f7 \u4e4b\u95f4\u7684\u76f8\u4e92\u8f6c\u6362 - \u6210\u7ec4\u94fe\u63a5\u6cd5","title":"4.1.5 \u6587\u4ef6\u5b58\u50a8\u7a7a\u95f4\u7ba1\u7406"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#416","text":"","title":"4.1.6 \u6587\u4ef6\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#417","text":"\u6587\u4ef6\u5171\u4eab\uff1a\u5171\u4eab\u610f\u5473\u7740\u53ea\u6709\u4e00\u4efd\u6587\u4ef6 - \u57fa\u4e8e\u7d22\u5f15\u7ed3\u70b9\u7684\u5171\u4eab\u65b9\u5f0f\uff08\u786c\u94fe\u63a5\uff09 - \u57fa\u4e8e\u7b26\u53f7\u94fe\u7684\u5171\u4eab\u65b9\u5f0f\uff08\u8f6f\u94fe\u63a5\uff09","title":"4.1.7 \u6587\u4ef6\u5171\u4eab"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#418","text":"\u6587\u4ef6\u4fdd\u62a4\uff1a - \u53e3\u4ee4\u4fdd\u62a4 - \u52a0\u5bc6\u4fdd\u62a4 - \u8bbf\u95ee\u63a7\u5236\uff1a\u8bbf\u95ee\u63a7\u5236\u8868\uff0c\u7cbe\u7b80\u7684\u8bbf\u95ee\u63a7\u5236\u8868\uff08\u5206\u7ec4\uff09","title":"4.1.8 \u6587\u4ef6\u4fdd\u62a4"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#419","text":"","title":"4.1.9 \u6587\u4ef6\u7cfb\u7edf\u7684\u5c42\u6b21\u7ed3\u6784"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#42","text":"","title":"4.2 \u78c1\u76d8"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#421","text":"\u78c1\u76d8\u3001\u78c1\u9053\u3001\u6247\u533a \u76d8\u9762\u3001\u67f1\u9762 \uff08\u67f1\u9762\u53f7\u3001\u76d8\u9762\u53f7\u3001\u6247\u533a\u53f7\uff09 \u78c1\u76d8\u7684\u5206\u7c7b\uff1a - \u6d3b\u52a8\u5934\u78c1\u76d8\u3001\u56fa\u5b9a\u5934\u78c1\u76d8 - \u53ef\u6362\u76d8\u78c1\u76d8\u3001\u56fa\u5b9a\u76d8\u78c1\u76d8","title":"4.2.1 \u78c1\u76d8\u7684\u7ed3\u6784"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#422","text":"\u5bfb\u627e\u65f6\u95f4\uff1a\u542f\u52a8\u78c1\u5934\u81c2+\u79fb\u52a8\u78c1\u5934 \u5ef6\u8fdf\u65f6\u95f4\uff1a\u65cb\u8f6c\u78c1\u76d8\u5230\u6307\u5b9a\u6247\u533a\uff0c \\(T_r=(1/2)*(1/r)=1/2r\\) \uff0cr\u4e3a\u78c1\u76d8\u8f6c\u901f \u4f20\u8f93\u65f6\u95f4\uff1a\u8bfb\u5165\u6216\u5199\u5165\u65f6\u95f4\uff0c \\(T_t=(1/r)*(b/N)=b/(rN)\\) \uff0cb\u4e3a\u8bfb/\u5199\u7684\u5b57\u8282\u6570\uff0cN\u4e3a\u78c1\u9053\u4e0a\u7684\u5b57\u8282\u6570 \u78c1\u76d8\u8c03\u5ea6\u7b97\u6cd5\uff1a - \u5148\u6765\u5148\u670d\u52a1 / FCFS\uff1a - \u6700\u77ed\u5bfb\u627e\u65f6\u95f4\u4f18\u5148 / SSTF\uff1a\u53ef\u80fd\u4f1a\u9965\u997f - \u626b\u63cf\u7b97\u6cd5 / SCAN / \u7535\u68af\u7b97\u6cd5\uff1a \u4e0d\u4f1a\u6709\u9965\u997f - LOOK \u8c03\u5ea6\u7b97\u6cd5\uff1a\u626b\u63cf\u7b97\u6cd5\u63d0\u524d\u6539\u53d8\u78c1\u5934\u79fb\u52a8\u65b9\u5411 - C-SCAN\u7b97\u6cd5\uff1a\u53ea\u6709\u5f80\u67d0\u4e2a\u65b9\u5411\u79fb\u52a8\u624d\u5904\u7406\u8bf7\u6c42\uff0c\u5373\u5230\u5934\u540e\u91cc\u9762\u56de\u5230\u8d77\u70b9\uff0c\u4e2d\u9014\u4e0d\u5904\u7406 - C-LOOK\u7b97\u6cd5\uff1a","title":"4.2.2 \u78c1\u76d8\u8c03\u5ea6\u7b97\u6cd5"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#423","text":"\u78c1\u76d8\u5730\u5740\u7684\u7ed3\u6784\u8bbe\u8ba1\uff1a\uff08\u67f1\u9762\u53f7\u3001\u76d8\u9762\u53f7\u3001\u6247\u533a\u53f7\uff09\uff1b\u5982\u679c\u662f\uff08\u76d8\u9762\u53f7\u3001\u67f1\u9762\u53f7\u3001\u6247\u533a\u53f7\uff09\uff0c\u5728\u8fde\u7eed\u8bfb\u53d6\u6570\u636e\u65f6\u79fb\u52a8\u78c1\u5934\u7684\u6b21\u6570\u4f1a\u591a \u4ea4\u66ff\u7f16\u53f7\uff1a\u5982\u679c\u7f16\u53f7\u662f\u8fde\u7eed\u7684\uff0c\u5728\u5230\u8fbe\u4e0b\u4e00\u4e2a\u6247\u533a\u65f6\u6ca1\u6cd5\u7acb\u5373\u8bfb\u597d\u6570\u636e\uff0c\u5c31\u9700\u8981\u518d\u8f6c\u4e00\u5708 \u9519\u4f4d\u547d\u540d\uff1a\u4e0d\u540c\u7684\u76d8\u9762\u662f\u4e00\u8d77\u8f6c\u7684\uff0c\u548c\u4ea4\u66ff\u7f16\u53f7\u7684\u539f\u56e0\u7c7b\u4f3c\uff0c\u8bfb\u53d6\u4e0b\u4e00\u4e2a\u76d8\u9762\u6247\u533a\u65f6\u5982\u679c\u662f\u9519\u4f4d\u547d\u540d\u7684\uff0c\u53ef\u4ee5\u5c11\u8f6c\u4e00\u4e9b\u5c31\u8bfb\u5230\u8981\u8bfb\u7684\u6570\u636e","title":"4.2.3 \u51cf\u5c11\u78c1\u76d8\u5ef6\u65f6\u65f6\u95f4\u7684\u65b9\u6cd5"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#424","text":"\u6b65\u9aa4\uff1a \u4f4e\u7ea7\u683c\u5f0f\u5316 / \u7269\u7406\u683c\u5f0f\u5316\uff1a\u5934\u3001\u6570\u636e\u533a\u3001\u5c3e \u5206\u533a\uff1a \u903b\u8f91\u683c\u5f0f\u5316\uff1a\u5982\u521b\u5efa\u4f4d\u793a\u56fe\uff0c\u7a7a\u95f2\u5206\u533a\u8868 \u5f15\u5bfc\u5757\uff1a \u574f\u5757\u7684\u7ba1\u7406\uff1a","title":"4.2.4 \u78c1\u76d8\u521d\u59cb\u5316"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#io","text":"","title":"IO"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#51-io","text":"","title":"5.1 IO\u8bbe\u5907"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#511-io","text":"\u6309\u4f7f\u7528\u7279\u6027\u5206\u7c7b\uff1a - \u4eba\u673a\u4ea4\u4e92\u7c7b\u5916\u90e8\u8bbe\u5907 - \u5b58\u50a8\u8bbe\u5907 - \u7f51\u7edc\u901a\u4fe1\u8bbe\u5907 \u6309\u4f20\u8f93\u901f\u7387\uff1a - \u4f4e\u901f - \u4e2d\u901f - \u9ad8\u901f \u6309\u4fe1\u606f\u4ea4\u6362\u7684\u5355\u4f4d\uff1a - \u5757\u8bbe\u5907\uff1a\u4f20\u8f93\u5feb\uff0c\u53ef\u5bfb\u5740 - \u5b57\u7b26\u8bbe\u5907\uff1a\u4f20\u8f93\u6162\uff0c\u4e0d\u53ef\u5bfb\u5740\uff0c\u5e38\u4f7f\u7528\u4e2d\u65ad\u9a71\u52a8\u65b9\u5f0f","title":"5.1.1 IO\u8bbe\u5907\u7684\u6982\u5ff5\u548c\u5206\u7c7b"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#512-io","text":"IO\u8bbe\u5907\u7531 \u673a\u68b0\u90e8\u4ef6 \u548c \u7535\u5b50\u90e8\u4ef6\uff08IO\u63a7\u5236\u5668\uff0c\u8bbe\u5907\u63a7\u5236\u5668\uff09\u7ec4\u6210 IO\u63a7\u5236\u5668\u7684\u529f\u80fd\uff1a IO\u63a7\u5236\u5668\u7684\u7ec4\u6210\uff1a","title":"5.1.2 IO\u63a7\u5236\u5668"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#513-io","text":"\u7a0b\u5e8f\u63a7\u5236\uff1a \u4e2d\u65ad\u9a71\u52a8\u65b9\u5f0f\uff1a DMA\u65b9\u5f0f\uff1a \u901a\u9053\u63a7\u63a7\u5236\u65b9\u5f0f\uff1a \u603b\u7ed3\uff1a","title":"5.1.3 IO\u63a7\u5236\u65b9\u5f0f"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#514-io","text":"\u7528\u6237\u5c42\u8f6f\u4ef6 \u8bbe\u5907\u72ec\u7acb\u6027\u8f6f\u4ef6\uff1a\u53c8\u79f0\u8bbe\u5907\u65e0\u5173\u6027\u8f6f\u4ef6 \u4e3b\u8981\u5b9e\u73b0\u7684\u529f\u80fd\uff1a 1 \u5411\u4e0a\u5c42\u63d0\u4f9b\u540c\u4e00\u7684\u8c03\u7528\u63a5\u53e3 \u5982 read/write 2 \u8bbe\u5907\u7684\u4fdd\u62a4 / \u6587\u4ef6\u7684\u4fdd\u62a4\uff1a\u8bbf\u95ee\u6743\u9650 3 \u5dee\u9519\u5904\u7406 4 \u8bbe\u5907\u7684\u5206\u914d\u548c\u56de\u6536 5 \u6570\u636e\u7f13\u51b2\u533a\u5904\u7406 6 \u5efa\u7acb\u903b\u8f91\u8bbe\u5907\u540d\u5230\u7269\u7406\u8bbe\u5907\u540d\u7684\u6620\u5c04\u5173\u7cfb\uff1a \u903b\u8f91\u8bbe\u5907\u8868 LUT\uff1a\u6574\u4e2a\u7cfb\u7edf\u8bbe\u7f6e\u4e00\u5f20LUT \u6216\u8005 \u4e3a\u6bcf\u4e2a\u7528\u6237\u8bbe\u7f6e\u4e00\u5f20LUT \u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f \u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f \u786c\u4ef6","title":"5.1.4 IO\u8f6f\u4ef6\u5c42\u6b21\u7ed3\u6784"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#515-io","text":"","title":"5.1.5 IO\u6838\u5fc3\u5b50\u7cfb\u7edf"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#516","text":"\u8131\u673a\u6280\u672f\uff1a\u8131\u79bb\u4e3b\u673a\u63a7\u5236\u8fdb\u884c IO \u5047\u8131\u673a\u6280\u672f / SPooling \u6280\u672f\uff1a","title":"5.1.6 \u5047\u8131\u673a\u6280\u672f"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#517","text":"\u8bbe\u5907\u5206\u914d\u65f6\u5e94\u8003\u8651\u7684\u56e0\u7d20 - \u8bbe\u5907\u7684\u56fa\u6709\u5c5e\u6027 - \u8bbe\u5907\u5206\u914d\u7b97\u6cd5 - \u8bbe\u5907\u5206\u914d\u4e2d\u7684\u5b89\u5168\u6027\uff1a \u5b89\u5168\u5206\u914d\u65b9\u5f0f\uff1a\u4f18\u70b9\u662f\u4e0d\u4f1a\u6b7b\u9501\uff0c\u7f3a\u70b9\u662fCPU\u548cIO\u53ea\u80fd\u4e32\u884c\u5de5\u4f5c \u4e0d\u5b89\u5168\u5206\u914d\u65b9\u5f0f\uff1a\u4f18\u70b9\u662f\u8fdb\u7a0b\u7684\u8ba1\u7b97\u4efb\u52a1\u548cIO\u53ef\u4ee5\u5e76\u884c\u5904\u7406\uff0c\u7f3a\u70b9\u662f\u53ef\u80fd\u6b7b\u9501 \u8bbe\u5907\u7684\u5206\u914d\u65b9\u5f0f\uff1a \u72ec\u5360\u8bbe\u5907\uff1a\u8fdb\u7a0b\u72ec\u5360\u8bbe\u5907 \u5171\u4eab\u8bbe\u5907\uff1a\u53ef\u4ee5\u540c\u65f6\u5206\u914d\u7ed9\u591a\u4e2a\u8bbe\u5907 \u865a\u62df\u8bbe\u5907\uff1aspooling \u6280\u672f \u9759\u6001\u5206\u914d\u4e0e\u52a8\u6001\u5206\u914d - \u9759\u6001\u5206\u914d\uff1a\u8fdb\u7a0b\u8fd0\u884c\u524d\u4e3a\u5176\u5206\u914d\u6240\u6709\u7684\u8d44\u6e90\uff0c\u7834\u574f\u4e86 \u8bf7\u6c42\u548c\u4fdd\u6301\u6761\u4ef6\uff0c\u4e0d\u4f1a\u6b7b\u9501 - \u52a8\u6001\u5206\u914d\uff1a\u8fdb\u7a0b\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u52a8\u6001\u7533\u8bf7\u8bbe\u5907\u8d44\u6e90 \u8bbe\u5907\u5206\u914d\u7ba1\u7406\u4e2d\u7684\u6570\u636e\u7ed3\u6784 DCT COCT CHCT SDT \u8bbe\u5907\u5206\u914d\u7684\u6b65\u9aa4 \u8bbe\u5907\u5206\u914d\u6b65\u9aa4\u7684\u6539\u8fdb\uff1a\u52a0\u4e0a\u903b\u8f91\u8bbe\u5907\u540d\u5230\u7269\u7406\u8bbe\u5907\u540d\u7684\u6620\u5c04 \u603b\u7ed3\uff1a","title":"5.1.7 \u8bbe\u5907\u7684\u5206\u914d\u4e0e\u56de\u6536"},{"location":"%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#518","text":"\u7f13\u51b2\u533a\u7684\u4f5c\u7528\uff1a - \u7f13\u548cCPU\u548cIO\u8bbe\u5907\u4e4b\u95f4\u901f\u5ea6\u4e0d\u5339\u914d\u7684\u77db\u76fe - \u51cf\u5c11\u5bf9CPU\u7684\u4e2d\u65ad\u9891\u7387\uff0c\u653e\u5bbd\u5bf9CPU\u4e2d\u65ad\u76f8\u5e94\u65f6\u95f4\u7684\u9650\u5236 - \u89e3\u51b3\u6570\u636e\u9897\u7c92\u5ea6\u4e0d\u5339\u914d\u7684\u95ee\u9898\uff1a\u5426\u5219IO\u8bbe\u5907\u6ca1\u8f93\u51fa\u5b8c\u4e00\u4e2a\u5b57\u7b26\u90fd\u8981\u60f3CPU\u53d1\u9001\u4e2d\u65ad\u4fe1\u53f7 - \u63d0\u9ad8CPU\u548cIO\u8bbe\u5907\u4e4b\u95f4\u7684\u5e76\u884c\u6027 \u5355\u7f13\u51b2\uff1a \u53cc\u7f13\u51b2\uff1a \u7ed3\u8bba\uff1aMax(T, C+M) \u4f7f\u7528\u5355/\u53cc\u7f13\u51b2\u533a\u5728\u901a\u4fe1\u4e2d\u7684\u533a\u522b\uff1a\u5355\u7f13\u51b2\u53ea\u80fd\u534a\u53cc\u5de5\uff0c\u53cc\u7f13\u51b2\u53ef\u4ee5\u5168\u53cc\u5de5 \u5faa\u73af\u7f13\u51b2\u533a\uff1a \u7f13\u51b2\u6c60\uff1a \u603b\u7ed3\uff1a","title":"5.1.8 \u7f13\u51b2\u533a\u7ba1\u7406"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/","text":"\u6570\u636e\u5e93\u7cfb\u7edf \u00b6 \u7b2c\u4e00\u7ae0 \u6570\u636e\u5e93\u6982\u89c8 \u00b6 \u6570\u636e\u5e93\u53d1\u5c55\u4e09\u9636\u6bb5 \u00b6 \u4eba\u5de5\u7ba1\u7406\u9636\u6bb5\uff1a\u4e0d\u80fd\u957f\u671f\u4fdd\u5b58\uff0c\u4e0d\u5177\u6709\u72ec\u7acb\u6027\uff0c\u4e0d\u5171\u4eab \u6587\u4ef6\u7cfb\u7edf\u9636\u6bb5\uff1a\u957f\u671f\u4fdd\u5b58\uff0c\u72ec\u7acb\u6027\u5dee\uff0c\u5171\u4eab\u6027\u5dee\uff0c\u5197\u4f59\u5ea6\u5927\uff0c \u6570\u636e\u5e93\u7cfb\u7edf\u9636\u6bb5\uff1a\u7279\u70b9\uff1a1.\u6570\u636e\u7ed3\u6784\u5316 2.\u5171\u4eab\u6027\u9ad8\uff0c\u5197\u4f59\u5ea6\u4f4e\uff0c\u6613\u4e8e\u6269\u5145 3.\u6570\u636e\u72ec\u7acb\u6027\u9ad8 4.\u6570\u636e\u7edf\u4e00\u7ba1\u7406\u4e0e\u63a7\u5236 \u6570\u636e\u5e93\u7cfb\u7edf\u7ec4\u6210 \u00b6 \u6570\u636e\u5e93 \u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\uff08DBMS\uff09 \u6570\u636e\u5e93\u7684\u5e94\u7528\u7a0b\u5e8f \u6570\u636e\u5e93\u7cfb\u7edf\u7684\u4eba\u5458\uff1a\u7ba1\u7406\u5458\uff08DBA\uff09 ... \u4e09\u7ea7\u6a21\u5f0f\u4e0e\u4e8c\u7ea7\u6620\u50cf \u00b6 \u4e09\u7ea7\u6a21\u5f0f\uff1a\u5916\u6a21\u5f0f\uff0c\u6a21\u5f0f\uff0c\u5185\u6a21\u5f0f \u6a21\u5f0f\uff1a\u4e5f\u79f0\u903b\u8f91\u6a21\u5f0f\uff0c\u4e00\u4e2a\u6570\u636e\u5e93\u53ea\u6709\u4e00\u4e2a\u6a21\u5f0f\uff0c\u662f\u6570\u636e\u5e93\u5168\u4f53\u6570\u636e\u7684\u903b\u8f91\u7ed3\u6784\u548c\u7279\u5f81\u7684\u63cf\u8ff0 \u5916\u6a21\u5f0f\uff1a\u4e5f\u79f0\u5b50\u6a21\u5f0f\u6216\u7528\u6237\u6a21\u5f0f\uff0c\u662f\u6a21\u5f0f\u7684\u5b50\u96c6\uff0c\u4e00\u4e2a\u6570\u636e\u5e93\u53ef\u4ee5\u6709\u591a\u4e2a\u5916\u6a21\u5f0f \u5185\u6a21\u5f0f\uff1a\u4e5f\u79f0\u5b58\u50a8\u6a21\u5f0f\uff0c\u53ea\u6709\u4e00\u4e2a\u5185\u6a21\u5f0f\uff0c\u662f\u6570\u636e\u7269\u7406\u7ed3\u6784\u548c\u5b58\u50a8\u65b9\u5f0f\u7684\u63cf\u8ff0 \u4e8c\u7ea7\u6620\u50cf\uff1a \u5916\u6a21\u5f0f/\u6a21\u5f0f\u6620\u50cf\uff1a\u6a21\u5f0f\u6539\u53d8\u65f6\uff0c\u5bf9\u6620\u50cf\u505a\u51fa\u76f8\u5e94\u7684\u6539\u53d8\u53ef\u4ee5\u4f7f\u5916\u6a21\u5f0f\u4fdd\u6301\u4e0d\u53d8\uff0c\u4fdd\u8bc1\u6570\u636e\u548c\u7a0b\u5e8f\u7684\u903b\u8f91\u72ec\u7acb\u6027 \u6a21\u5f0f/\u5185\u6a21\u5f0f\u6620\u50cf\uff1a\u5185\u6a21\u5f0f\u6539\u53d8\u65f6\uff0c\u5bf9\u6620\u50cf\u505a\u51fa\u76f8\u5e94\u7684\u6539\u53d8\u53ef\u4ee5\u4f7f\u6a21\u5f0f\u4fdd\u6301\u4e0d\u53d8\uff0c\u4fdd\u8bc1\u6570\u636e\u7684\u7269\u7406\u72ec\u7acb\u6027 \u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf \u00b6 \u529f\u80fd\uff1a\u6570\u636e\u5b9a\u4e49\uff0c\u6570\u636e\u64cd\u7eb5\uff0c\u6570\u636e\u5e93\u7684\u4e8b\u52a1\u7ba1\u7406\u548c\u8fd0\u884c\u7ba1\u7406\uff0c\u6570\u636e\u5e93\u7684\u521b\u5efa\u548c\u7ef4\u62a4 \u6570\u636e\u6a21\u578b \u00b6 \u5206\u7c7b\uff1a\u6982\u5ff5\u6570\u636e\u6a21\u578b\uff0c\u903b\u8f91\u6570\u636e\u6a21\u578b\uff0c\u7269\u7406\u6570\u636e\u6a21\u578b \u6982\u5ff5\u6570\u636e\u6a21\u578b\uff1aER\u56fe ER\u6a21\u578b\u4e09\u8981\u7d20\uff1a\u5b9e\u4f53\uff0c\u5c5e\u6027\uff0c\u8054\u7cfb \u903b\u8f91\u6570\u636e\u6a21\u578b\uff08\u4e00\u822c\u90fd\u76f4\u63a5\u53eb\u6570\u636e\u6a21\u578b\uff09\uff1a\u5c42\u6b21\u6a21\u578b\uff0c\u7f51\u72b6\u6a21\u578b\uff0c\u5173\u7cfb\u6a21\u578b\uff0c\u9762\u5411\u5bf9\u8c61\u6a21\u578b \u6570\u636e\u6a21\u578b\u4e09\u8981\u7d20\uff1a\u6570\u636e\u7ed3\u6784\uff0c\u6570\u636e\u64cd\u4f5c\uff0c\u6570\u636e\u5b8c\u6574\u6027\u7ea6\u675f \u5c42\u6b21\u6a21\u578b\u662f\u4e00\u68f5\u6811\uff0c\u5173\u7cfb\u6a21\u578b\u662f\u4e00\u5f20\u4e8c\u7ef4\u8868 \u7b2c\u4e8c\u7ae0 \u5173\u7cfb\u6570\u636e\u5e93\u6a21\u578b \u00b6 \u5173\u7cfb\u7684\u6027\u8d28 \u00b6 \u5217\u662f\u540c\u8d28\u7684\uff0c\u5373\u6570\u636e\u7c7b\u578b\u76f8\u540c \u4e0d\u540c\u7684\u5217\u53ef\u4ee5\u51fa\u5176\u540c\u4e00\u4e2a\u57df\uff0c\u4f46\u5c5e\u6027\u540d\u8981\u4e0d\u540c \u5217\u7684\u987a\u5e8f\u53ef\u4ee5\u4efb\u610f\u4ea4\u6362 \u4efb\u610f\u4e24\u4e2a\u5143\u7ec4\u4e0d\u53ef\u4ee5\u5b8c\u5168\u76f8\u540c \u5143\u7ec4\u987a\u5e8f\u53ef\u4ee5\u4efb\u610f \u5206\u91cf\u5fc5\u987b\u53d6\u539f\u5b50\u503c\uff0c\u5373\u8981\u6c42\u6bcf\u4e2a\u5206\u91cf\u90fd\u662f\u4e0d\u53ef\u518d\u5206\u7684\u6570\u636e\u9879 \u5173\u7cfb\u6570\u636e\u7ed3\u6784 \u00b6 \u4e00\u4e2a\u5173\u7cfb\u5c31\u662f\u4e00\u4e2a\u89c4\u8303\u5316\u7684\u4e8c\u7ef4\u8868\uff0c\u7b1b\u5361\u5c14\u79ef\u7684\u6709\u610f\u4e49\u7684\u6709\u9650\u5b50\u96c6 \u4e00\u4e2a\u5173\u7cfb\u7531\u5173\u7cfb\u540d\uff0c\u5173\u7cfb\u6a21\u5f0f\uff0c\u5173\u7cfb\u5b9e\u4f8b\u7ec4\u6210 \u5143\u7ec4\uff0c\u5c5e\u6027\uff0c\u7801\uff0c\u57df\uff0c\u5206\u91cf\uff0c\u5173\u7cfb\u6a21\u5f0f \u5019\u9009\u7801\uff1a\u552f\u4e00\u6027\uff0c\u6700\u5c0f\u6027 \u8d85\u7801\uff1a\u53ef\u4ee5\u552f\u4e00\u7684\u786e\u5b9a\u4e00\u884c\uff0c\u5019\u9009\u7801\u662f\u8d85\u7801\u7684\u5b50\u96c6 \u4e3b\u7801\uff1a\u5982\u679c\u7531\u591a\u4e2a\u5019\u9009\u7801\uff0c\u9009\u4e00\u4e2a \u4e3b\u5c5e\u6027\uff1a\u5305\u542b\u5728\u5019\u9009\u7801\u4e2d\u7684\u5404\u5c5e\u6027 \u5916\u7801 \u5173\u7cfb\u6570\u636e\u8bed\u8a00\u7684\u5206\u7c7b \u00b6 \u5173\u7cfb\u4ee3\u6570\uff0c\u5173\u7cfb\u6f14\u7b97\uff0c\u57df\u6f14\u7b97\uff0cSQL \u5173\u7cfb\u64cd\u4f5c & \u5173\u7cfb\u4ee3\u6570 \u00b6 \u4f20\u7edf\u7684\u96c6\u5408\u8fd0\u7b97\uff1a\u7b1b\u5361\u5c14\u79ef\uff0c\u5e76\uff0c\u4ea4\uff0c\u5dee \u4e13\u95e8\u7684\u5173\u7cfb\u8fd0\u7b97\uff1a\u9009\u62e9\uff0c\u6295\u5f71\uff0c\u8fde\u63a5\uff08\u7b49\u503c\uff0c\u81ea\u7136\u8fde\u63a5\uff0c\u5916\u8fde\u63a5\uff0c\u5de6\u5916\uff0c\u53f3\u5916\uff09\uff0c\u9664\u6cd5 \u6570\u636e\u5b8c\u6574\u6027 \u00b6 \u5b9e\u4f53\u5b8c\u6574\u6027 \u53c2\u7167\u5b8c\u6574\u6027 \u7528\u6237\u81ea\u5b9a\u4e49\u5b8c\u6574\u6027 \u5217\u7ea7\u5b8c\u6574\u6027\u7ea6\u675f\u53ea\u80fd\u6d89\u53ca\u4e00\u4e2a\u5c5e\u6027\uff0c\u8868\u7ea7\u53ef\u4ee5\u6d89\u53ca\u591a\u4e2a\u5c5e\u6027 \u7b2c\u4e09\u7ae0 SQL\u8bed\u8a00 \u00b6 SQL\u6982\u8ff0 \u00b6 \u7279\u70b9\uff1a\u7efc\u5408\u7edf\u4e00\uff0c\u9ad8\u5ea6\u975e\u8fc7\u7a0b\u5316\uff0c\u9762\u5411\u96c6\u5408\u7684\u64cd\u4f5c\u65b9\u5f0f\uff0c\u4ee5\u540c\u4e00\u79cd\u8bed\u6cd5\u7ed3\u6784\u63d0\u4f9b\u4e24\u79cd\u4f7f\u7528\u65b9\u5f0f\uff0c\u8bed\u8a00\u7b80\u6d01\u6613\u5b66\u6613\u7528 \u6570\u636e\u5b9a\u4e49\uff08DDL\uff09\uff0c\u6570\u636e\u64cd\u7eb5\uff08DML\uff09\uff0c\u6570\u636e\u63a7\u5236\uff08DCL\uff09 \u5df4\u79d1\u65af\u8303\u5f0f\uff08BNF\uff09 \u00b6 <> \u5fc5\u9009\u9879 [ ] \u53ef\u4ee5\u51fa\u73b0\u4e00\u6b21\u6216\u4e0d\u51fa\u73b0 { } \u53ef\u4ee5\u591a\u6b21\u51fa\u73b0\u6216\u4e0d\u51fa\u73b0 | \u591a\u9009\u4e00 \u6570\u636e\u5b9a\u4e49 \u00b6 \u6570\u636e\u5e93 \u00b6 create database < \u6570\u636e\u5e93\u540d > use < \u6570\u636e\u5e93\u540d > alter database < \u6570\u636e\u5e93\u540d > drop database < \u6570\u636e\u5e93\u540d > \u57fa\u672c\u8868 \u00b6 \u5b9a\u4e49 create table < \u8868\u540d > ( < \u5217\u540d >< \u6570\u636e\u7c7b\u578b > [ < \u5217\u7ea7\u5b8c\u6574\u6027\u7ea6\u675f > ] { , < \u5217\u540d >< \u6570\u636e\u7c7b\u578b > [ < \u5217\u7ea7\u5b8c\u6574\u6027\u7ea6\u675f > ] } [, < \u8868\u7ea7\u5b8c\u6574\u6027\u7ea6\u675f > ] ) \u5217\u7ea7\u7ea6\u675f\uff1a not null, default, unique, check, primary key, foreign key foreign key: foreign key (<\u5217\u540d>) references <\u5916\u8868\u540d>(<\u5916\u8868\u5217\u540d>) \u4fee\u6539 alter table < \u8868\u540d > alter column < \u5217\u540d > < \u65b0\u6570\u636e\u7c7b\u578b > [ null | not null ] | add < \u5217\u540d > < \u6570\u636e\u7c7b\u578b > [ \u7ea6\u675f ] | drop column < \u5217\u540d > | add [ constraint < \u7ea6\u675f\u540d > ] < \u7ea6\u675f\u5b9a\u4e49 > | drop constraint < \u7ea6\u675f\u540d > \u5220\u9664 drop table < \u57fa\u672c\u8868\u540d > \u7d22\u5f15 \u00b6 \u5206\u7c7b\uff1a\u805a\u7c07\u7d22\u5f15\u548c\u975e\u805a\u7c07\u7d22\u5f15 \u9ed8\u8ba4\u975e\u805a\u7c07\uff0c\u805a\u7c07\u7d22\u5f15\u53ea\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a \u805a\u7c07\u7d22\u5f15\uff1a\u7d22\u5f15\u9879\u987a\u5e8f\u548c\u7269\u7406\u987a\u5e8f\u4e00\u81f4 \u5b9a\u4e49 create [ unique ][ clustered | notclustered ] index < \u7d22\u5f15\u540d > on < \u57fa\u672c\u8868\u540d > ( < \u5217\u540d > [ asc | desc ] [ { ,( < \u5217\u540d > [ asc | desc ] } ...]) \u5220\u9664 drop index < \u8868\u540d > . < \u7d22\u5f15\u540d > \u6570\u636e\u67e5\u8be2 \u00b6 select [ all | distinct ] < \u76ee\u6807\u5217\u8868\u8fbe\u5f0f > [, < \u76ee\u6807\u5217\u8868\u8fbe\u5f0f > ]... from < \u8868\u540d\u6216\u89c6\u56fe\u540d > [, < \u8868\u540d\u6216\u89c6\u56fe\u540d > ]... [ where < \u6761\u4ef6\u8868\u8fbe\u5f0f > ] [ group by < \u5217\u540d 1 > ] [ having < \u6761\u4ef6\u8868\u8fbe\u5f0f > ] -- having \u7528\u4e8e\u6307\u5b9a\u5206\u7ec4\u8fc7\u6ee4\u6761\u4ef6 [ order by < \u5217\u540d 2 > [ asc | desc ]] \u66f4\u6539\u7ed3\u679c\u5217\u6807\u9898 \u00b6 select \u5ba2\u6237\u7f16\u53f7 as cno from CustomerInfo select 'cno' = \u5ba2\u6237\u7f16\u53f7 # = \u5217\u540d\u5fc5\u987b\u5199\u53f3\u8fb9 from CustomerInfo \u66ff\u6362\u67e5\u8be2\u7ed3\u679c\u4e2d\u7684\u6570\u636e \u00b6 select < \u5217\u540d > = case when \u6761\u4ef6 1 then \u8868\u8fbe\u5f0f 1 ... else \u8868\u8fbe\u5f0f end from < \u8868\u540d > where < \u6761\u4ef6\u8868\u8fbe\u5f0f > \u53bb\u9664\u91cd\u590d\u884c \u00b6 select unique < \u5217\u540d > from < \u8868\u540d > \u6a21\u7cca\u67e5\u8be2 \u00b6 % \u8868\u793a\u4efb\u610f\u957f\u5ea6\u7684\u5b57\u7b26\u4e32 _ \u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26 select * from < \u8868\u540d > where < \u5217\u540d > like '\u6c5f\u82cf%' \u5982\u679c\u67e5\u8be2\u7684\u6761\u4ef6\u4e2d\u5305\u542b\u901a\u914d\u7b26\u9700\u8981\u8f6c\u4e49\uff1a escape\\ where \u5fae\u4fe1\u53f7 like 'wxid\\_%' escape '\\' \u7a7a\u503c\u6bd4\u8f83 \u00b6 < \u8868\u8fbe\u5f0f > is [ not ] null \u5bf9\u7ed3\u679c\u96c6\u6392\u5e8f \u00b6 [ order by < \u5217\u540d > [ asc | desc ]] [, < \u5217\u540d > [ asc | desc ]]...] # \u9ed8\u8ba4 asc \u5347\u5e8f \u5bf9\u7ed3\u679c\u96c6\u5206\u7c7b \u00b6 group by < \u8868\u8fbe\u5f0f > # eg select \u5546\u54c1\u7c7b\u522b , count ( \u5546\u54c1\u7f16\u53f7 ) as '\u79cd\u6570' from GoodsInfo group by \u5546\u54c1\u7c7b\u522b having\u7b5b\u9009 \u00b6 having \u8bed\u53e5\u7528\u5728 group by \u5b50\u53e5\u540e\u6765\u8fdb\u884c\u7b5b\u9009\uff0c\u53ea\u8f93\u51fa\u7b26\u5408\u6761\u4ef6\u7684 [ having < \u6761\u4ef6 > ] # eg select \u5546\u54c1\u7c7b\u522b , count ( \u5546\u54c1\u7f16\u53f7 ) as '\u79cd\u6570' from GoodsInfo group by \u5546\u54c1\u7c7b\u522b having count ( * ) > 1 \u805a\u5408\u51fd\u6570 \u00b6 \u805a\u5408\u51fd\u6570 \u4e0d\u5141\u8bb8 \u5d4c\u5957 sum | avg () max | min () count () # eg select count ( \u5ba2\u6237\u7f16\u53f7 ) as '\u5ba2\u6237\u6570' from OrderList \u8fde\u63a5\u67e5\u8be2 \u00b6 \u8fde\u63a5\u8c13\u8bcd from < \u8868 1 > [ \u8868 1 \u522b\u540d ], < \u8868 2 > [ \u8868 2 \u522b\u540d ][, < \u8868 3 > [ \u8868 3 \u522b\u540d ]...] \u4ee5join\u5173\u952e\u5b57\u8fde\u63a5 # \u5185\u8fde\u63a5 \u9ed8\u8ba4\u5185\u8fde\u63a5 inner join ( inner\u53ef\u4ee5\u4e0d\u5199 ) select ... # 2 \u4e2a\u8868 from < \u8868 1 > join < \u8868 2 > on < \u6761\u4ef6 > where ... select ... # 3 \u4e2a\u8868 from < \u8868 1 > join < \u8868 2 > join < \u8868 3 > on < \u6761\u4ef6 1 > on < \u6761\u4ef6 2 > where ... # \u5916\u8fde\u63a5 outer join # \u5de6\u5916 : left outer join \u53f3\u5916 : right outer join \u5b8c\u5168\u5916 : full outer join \u5d4c\u5957\u67e5\u8be2 \u00b6 \u5b50\u67e5\u8be2\u4e0d\u80fd\u5305\u542b order by \uff0c\u5373 order by \u53ea\u80fd\u5bf9\u6700\u7ec8\u67e5\u8be2\u6392\u5e8f \u5e26 in \u7684\u5b50\u67e5\u8be2 \u00b6 where \u6240\u5728\u7701\u5e02 in ( \u5b50\u67e5\u8be2 ) \u5e26\u6bd4\u8f83\u8fd0\u7b97\u7b26\u7684\u5b50\u67e5\u8be2 \u00b6 where \u6570\u91cf > ( \u5b50\u67e5\u8be2 ) # \u8fd9\u91cc\u7684\u5b50\u67e5\u8be2\u8981\u6c42\u7ed3\u679c\u53ea\u6709\u4e00\u4e2a \u5e26 ALL / ANY \u8c13\u8bcd\u7684\u5b50\u67e5\u8be2 \u00b6 \u7528\u4ee5\u89e3\u9664\u6bd4\u8f83\u8fd0\u7b97\u7b26\u8981\u6c42\u5b50\u67e5\u8be2\u7684\u7ed3\u679c\u96c6\u5143\u7d20\u53ea\u80fd\u6709\u4e00\u4e2a\u7684\u9650\u5236 where \u6570\u91cf > all ( \u5b50\u67e5\u8be2 ) # \u7b49\u6548\u4e8e where \u6570\u91cf > ( \u5e26 MAX \u7684\u5b50\u67e5\u8be2 ) # \u5f53\u7136\u8fd9\u91cc\u5b50\u67e5\u8be2\u53ea\u80fd\u67e5\u8be2\u4e00\u5217 \u5e26 EXISTS \u8c13\u8bcd\u7684\u5b50\u67e5\u8be2 \u00b6 [ not ] exists ( \u5b50\u67e5\u8be2 ) \u96c6\u5408\u67e5\u8be2 \u00b6 select \u8bed\u53e5\u7684\u67e5\u8be2\u7ed3\u679c\u662f\u7ed3\u679c\u96c6\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fdb\u884c\u96c6\u5408\u8fd0\u7b97 \u5e76 UNION \u4ea4 INTERSECT \u5dee EXCEPT \u8fd9\u91cc\u7684\u7ed3\u679c\u96c6\u5217\u6570\u5fc5\u987b\u76f8\u540c\uff0c\u5bf9\u5e94\u5217\u7684\u6570\u636e\u7c7b\u578b\u4e5f\u5fc5\u987b\u76f8\u540c select ... union select ... select ... intersect select ... \u6570\u636e\u66f4\u65b0\uff08\u63d2\u5165&\u4fee\u6539&\u5220\u9664\uff09 \u00b6 \u6570\u636e\u63d2\u5165 \u00b6 # \u63d2\u5165\u5143\u7ec4 insert into < \u8868\u540d > [( < \u5217 1 > [, < \u5217 2 > ...])] values ( < \u5e38\u91cf 1 > [, < \u5e38\u91cf 2 > ...]) # \u63d2\u5165\u5b50\u67e5\u8be2 insert into < \u8868\u540d > [( < \u5217 1 > [, < \u5217 2 > ...])] < \u5b50\u67e5\u8be2 > \u6570\u636e\u4fee\u6539 \u00b6 update < \u8868\u540d > [[ as ] < \u522b\u540d > ] set < \u5217\u540d > = < \u5e38\u91cf > [, < \u5217\u540d > = < \u5e38\u91cf > ...] [ where < \u6761\u4ef6\u8868\u8fbe\u5f0f > ] \u6570\u636e\u5220\u9664 \u00b6 delete [ from ] < \u8868\u540d > [ where < \u6761\u4ef6\u8868\u8fbe\u5f0f > ] \u89c6\u56fe \u00b6 \u865a\u8868\uff0c\u53ef\u4ee5\u7528\u4ee5\u4fdd\u62a4\u6570\u636e\u5b89\u5168\u548c\u6ee1\u8db3\u4e0d\u540c\u7528\u6237\u7684\u9700\u6c42 \u521b\u5efa\u89c6\u56fe \u00b6 create view < \u89c6\u56fe\u540d > [( < \u5217\u540d > [, < \u5217\u540d > ])] as < select \u67e5\u8be2\u8bed\u53e5 > \u4fee\u6539\u89c6\u56fe \u00b6 alter view < \u89c6\u56fe\u540d > [( < \u5217\u540d > [, < \u5217\u540d > ])] as < select \u67e5\u8be2\u8bed\u53e5 > \u5220\u9664\u89c6\u56fe \u00b6 drop view < \u89c6\u56fe\u540d > \u89c6\u56fe\u67e5\u8be2 \u00b6 \u548c \u57fa\u672c\u8868 \u4e00\u81f4 \u89c6\u56fe\u66f4\u65b0 \u00b6 \u9632\u6b62\u51fa\u73b0\u8303\u56f4\u5916\u7684\u6570\u636e\u53ef\u4ee5\u5728\u5b9a\u4e49\u89c6\u56fe\u65f6\u52a0\u4e0a with check option \u63d2\u5165\u6570\u636e\uff0c\u4fee\u6539\u6570\u636e\uff0c\u5220\u9664\u6570\u636e\u90fd\u548c \u57fa\u672c\u8868 \u4e00\u81f4 \u4f46\u6709\u5f88\u591a\u9650\u5236\uff0c\u5982\u679c\u66f4\u65b0\u6210\u529f\u4e86\u4f1a\u6620\u5c04\u5230\u57fa\u672c\u8868 \u7b2c\u56db\u7ae0 \u6570\u636e\u5e93\u8bbe\u8ba1 \u00b6 \u5e7f\u4e49\uff1a\u6570\u636e\u5e93\u53ca\u5176\u5e94\u7528\u7cfb\u7edf\u7684\u8bbe\u8ba1\uff0c\u5373\u8bbe\u8ba1\u6574\u4e2a\u7684\u6570\u636e\u5e93\u5e94\u7528\u7cfb\u7edf \u72ed\u4e49\uff1a\u6570\u636e\u5e93\u672c\u8eab\u7684\u8bbe\u8ba1\uff0c\u5373\u8bbe\u8ba1\u6570\u636e\u5e93\u7684\u5404\u7ea7\u6a21\u5f0f\u5e76\u5efa\u7acb\u6570\u636e\u5e93 \u6570\u636e\u5e93\u8bbe\u8ba1\u7684 6 \u4e2a\u9636\u6bb5\uff1a \u9700\u6c42\u5206\u6790\u9636\u6bb5\uff1a\u6570\u636e\u6d41\u56fe\uff0c\u6570\u636e\u5b57\u5178 \u6982\u5ff5\u7ed3\u6784\u8bbe\u8ba1\u9636\u6bb5\uff1a\u6982\u5ff5\u6570\u636e\u6a21\u578b ER \u56fe \u903b\u8f91\u7ed3\u6784\u8bbe\u8ba1\u9636\u6bb5 \u7269\u7406\u7ed3\u6784\u8bbe\u8ba1\u9636\u6bb5 \u6570\u636e\u5e93\u5b9e\u65bd\u9636\u6bb5 \u6570\u636e\u5e93\u8fd0\u884c\u4e0e\u7ef4\u62a4\u9636\u6bb5 \u6982\u5ff5\u7ed3\u6784\u8bbe\u8ba1 \u00b6 \u81ea\u9876\u5411\u4e0b\uff0c\u81ea\u5e95\u5411\u4e0a\uff0cER\u8bbe\u8ba1\u65b9\u6cd5\uff0cEER\u8bbe\u8ba1\u65b9\u6cd5 \u7531\u5c40\u90e8\u89c6\u56fe\u5230\u5168\u5c40\u6982\u5ff5\u7ed3\u6784\uff1a\u4e00\u6b21\u96c6\u6210\uff0c\u591a\u6b21\u96c6\u6210 \u96c6\u6210\u5305\u62ec\uff1a\u5408\u5e76\uff0c\u6d88\u9664\u5197\u4f59 \u5408\u5e76\u7684\u4e09\u79cd\u7c7b\u578b\u7684\u51b2\u7a81\uff1a\u547d\u540d\u51b2\u7a81\uff0c\u5c5e\u6027\u51b2\u7a81\uff0c\u6982\u5ff5\u51b2\u7a81 \u903b\u8f91\u7ed3\u6784\u8bbe\u8ba1 \u00b6 \u6b65\u9aa4\uff1a \u5c06\u6982\u5ff5\u6a21\u578b\u8f6c\u5316\u4e3a\u4e00\u822c\u7684\u5173\u7cfb\uff0c\u7f51\u72b6\uff0c\u5c42\u6b21\u6a21\u578b \u5bf9\u6570\u636e\u6a21\u578b\u8fdb\u884c\u4f18\u5316 \u8bbe\u8ba1\u7528\u6237\u5916\u6a21\u5f0f \u4e8c\u5143\u5173\u7cfb\uff1a1\u5bf91\uff0c1\u5bf9\u591a\uff0c\u591a\u5bf9\u591a \u7b2c\u4e94\u7ae0 \u5173\u7cfb\u89c4\u8303\u5316\u7406\u8bba \u00b6 \u6570\u636e\u5197\u4f59\u548c\u64cd\u4f5c\u5f02\u5e38 \u00b6 \u6570\u636e\u5197\u4f59\uff1a\u540c\u4e00\u6570\u636e\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u6570\u636e\u6587\u4ef6\u4e2d\u91cd\u590d\u50a8\u5b58 \u6570\u636e\u5197\u4f59\u4f1a\u5bfc\u81f4\u7684\u64cd\u4f5c\u5f02\u5e38\uff1a\u63d2\u5165\u5f02\u5e38\uff0c\u5220\u9664\u5f02\u5e38\uff0c\u4fee\u6539\u5f02\u5e38 \u51fd\u6570\u4f9d\u8d56 \u00b6 \u5206\u7c7b\uff1a \u5e73\u51e1\u51fd\u6570\u4f9d\u8d56\u548c\u975e\u5e73\u51e1\u51fd\u6570\u4f9d\u8d56 \u90e8\u5206\u51fd\u6570\u4f9d\u8d56\u4e0e\u5b8c\u5168\u51fd\u6570\u4f9d\u8d56 \u4f20\u9012\u51fd\u6570\u4f9d\u8d56 \u591a\u503c\u4f9d\u8d56\uff0c\u5e73\u51e1\u591a\u503c\u4f9d\u8d56 \u8303\u5f0f \u00b6 \u7b2c\u4e00\u8303\u5f0f\uff1a\u6bcf\u4e2a\u5173\u7cfb\u6a21\u5f0f\u5fc5\u5b9a\u5c5e\u4e8e1NF \u7b2c\u4e8c\u8303\u5f0f\uff1a\u6ca1\u6709\u90e8\u5206\u51fd\u6570\u4f9d\u8d56\uff0c\u5c5e\u4e8e2NF \u7b2c\u4e09\u8303\u5f0f\uff1a\u4e0d\u5b58\u5728\u4f20\u9012\u51fd\u6570\u4f9d\u8d56\uff0c\u5c5e\u4e8e3NF BC\u8303\u5f0f\uff1a\u6bcf\u4e2a\u51b3\u5b9a\u56e0\u7d20\u90fd\u542b\u6709\u5019\u9009\u7801 \u7b2c\u56db\u8303\u5f0f\uff1a\u6240\u6709\u7684\u975e\u5e73\u51e1\u591a\u503c\u4f9d\u8d56\u7684\u51b3\u5b9a\u56e0\u7d20\u90fd\u542b\u6709\u7801 \u6570\u636e\u4f9d\u8d56\u516c\u7406\u7cfb\u7edf \u00b6 \u903b\u8f91\u8574\u542b \u00b6 \u8bbe\u53c8\u6ee1\u8db3\u51fd\u6570\u4f9d\u8d56\u96c6 F \u7684\u5173\u7cfb\u6a21\u5f0f \\(R<U, F>\\) \uff0c\u5bf9\u4e8e R \u7684\u4efb\u4e00\u5173\u7cfb r\uff0c\u82e5\u4e00\u4e2a\u5173\u7cfb\u4e2d\u51fd\u6570\u4f9d\u8d56 \\(X\\rightarrow Y\\) \u90fd\u6210\u7acb\uff0c\u5219\u79f0\u903b\u8f91\u8574\u542b \\(X\\rightarrow Y\\) \uff0c\u8bb0\u4e3a \\(F\\Rightarrow X\\rightarrow Y\\) Armstrong \u516c\u7406\u7cfb\u7edf \u00b6 \u7528\u9014\uff1a\u6c42\u7ed9\u5b9a\u5173\u7cfb\u6a21\u5f0f\u7684\u7801\uff0c\u4ece\u4e00\u7ec4\u51fd\u6570\u4f9d\u8d56\u6c42\u5f97\u8574\u542b\u7684\u51fd\u6570\u4f9d\u8d56 \u5bf9\u4e8e\u5173\u7cfb\u6a21\u5f0f \\(R<U,F>\\) \uff0c\u6709\u4e00\u4e0b\u5b9a\u5f8b \u81ea\u53cd\u5f8b\uff1a\u82e5 \\(Y\\subseteq X \\subseteq U\\) \uff0c\u5219 \\(F\\Rightarrow X\\rightarrow Y\\) \u589e\u5e7f\u5f8b\uff1a\u82e5 \\(F\\Rightarrow X\\rightarrow Y\\) \uff0c\u4e14 \\(Z\\subseteq U\\) \uff0c\u5219 \\(F\\Rightarrow ZX\\rightarrow ZY\\) \u4f20\u9012\u5f8b\uff1a\u82e5 \\(F\\Rightarrow X\\rightarrow Y\\) \u53ca \\(F\\Rightarrow Y\\rightarrow Z\\) \uff0c\u5219 \\(F\\Rightarrow X\\rightarrow Z\\) \u63a8\u7406\u53ef\u5f97\u4ee5\u4e0b\u89c4\u5219 \u5408\u5e76\u89c4\u5219\uff1a\u82e5 \\(X\\rightarrow Y,X\\rightarrow Z\\) \uff0c\u5219 \\(X\\rightarrow YZ\\) \u4f2a\u4f20\u9012\u89c4\u5219\uff1a\u82e5 \\(X\\rightarrow Y,WY\\rightarrow Z\\) \uff0c\u5219\u6709 \\(WX\\rightarrow Z\\) \u5206\u89e3\u89c4\u5219\uff1a\u82e5 \\(X\\rightarrow Y\\) \uff0c\u4e14 \\(Z\\subseteq Y\\) \uff0c\u5219\u6709 \\(X\\rightarrow Z\\) \u51fd\u6570\u4f9d\u8d56\u96c6\u7684\u95ed\u5305 \u00b6 \\(X^+_F\\) \u79f0\u4e3a\u5c5e\u6027\u96c6 \\(X\\) \u5173\u4e8e\u51fd\u6570\u4f9d\u8d56\u96c6 \\(F\\) \u7684\u95ed\u5305 \u6c42 \\(X^+_F\\) \u7684\u65b9\u6cd5\uff1a\u5728\u51fd\u6570\u4f9d\u8d56 \\(F\\) \u627e\u5de6\u4fa7\u662f X \u7684\u5b50\u96c6\u7684\u4f9d\u8d56\u5e76\u4e0d\u65ad\u6269\u5927 \\(X\\) \u8fd9\u4e2a\u96c6\u5408\uff0c\u76f4\u5230\u4e0d\u80fd\u6269\u5927\u4e3a\u6b62 \u6700\u5c0f\u4f9d\u8d56\u96c6 \u00b6 \u51fd\u6570\u4f9d\u8d56\u96c6\u7b49\u4ef7\uff1a\u5982\u679c \\(G^+=F^+\\) \uff0c\u5219\u79f0\u51fd\u6570\u4f9d\u8d56\u96c6 \\(G\\) \u548c \\(F\\) \u7b49\u4ef7 / \u4e92\u4e3a\u8986\u76d6 \u6700\u5c0f\u4f9d\u8d56\u96c6\uff1a\u5982\u679c\u51fd\u6570\u4f9d\u8d56\u96c6 \\(F\\) \u6ee1\u8db3 $F $ \u4e2d\u4efb\u4e00\u51fd\u6570\u4f9d\u8d56\u7684\u53f3\u90e8\u4ec5\u6709\u5355\u4e00\u5c5e\u6027 \\(F\\) \u4e2d\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u51fd\u6570\u4f9d\u8d56 \\(X\\rightarrow A\\) \uff0c\u4f7f\u5f97 \\(F\\) \u4e0e \\(F-\\{X\\rightarrow A\\}\\) \u7b49\u4ef7 \\(F\\) \u4e2d\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u51fd\u6570\u4f9d\u8d56 \\(X\\rightarrow A\\) \uff0c \\(X\\) \u6709\u771f\u5b50\u96c6 \\(Z\\) \u4f7f\u5f97 \\(F\\) \u4e0e \\(F-\\{X\\rightarrow A\\}\\cup \\{Z\\rightarrow A\\}\\) \u7b49\u4ef7 \u5219\u79f0 \\(F\\) \u662f\u6700\u5c0f\u4f9d\u8d56\u96c6 \u6216 \u6700\u5c0f\u8986\u76d6\uff0c\u8bb0\u4e3a \\(F_{min}\\) \uff0c\u5373\u8981\u6c42\u51fd\u6570\u4f9d\u8d56\u96c6\u662f\u6700\u5c0f\u7684 \u6c42\u51fd\u6570\u4f9d\u8d56\u96c6 \\(F\\) \u7684 \\(F_{min}\\) \u7684\u65b9\u6cd5 \u5148\u5c06\u51fd\u6570\u4f9d\u8d56\u53f3\u4fa7\u53f3\u4fa7\u662f\u591a\u5c5e\u6027\u7684\u5206\u89e3\u5f00\u591a\u4e2a\u51fd\u6570\u4f9d\u8d56 \u7136\u540e\u9010\u4e00\u68c0\u67e5\u6bcf\u4e00\u4e2a\u51fd\u6570\u4f9d\u8d56\uff0c\u68c0\u67e5\u8fd9\u4e2a\u51fd\u6570\u4f9d\u8d56\u662f\u5426\u53ef\u53bb \u6700\u540e\u9010\u4e00\u68c0\u67e5\u6bcf\u4e00\u4e2a\u51fd\u6570\u4f9d\u8d56\u7684\u5de6\u4fa7\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5c5e\u6027\uff0c\u68c0\u67e5\u5355\u4e2a\u5c5e\u6027\u662f\u5426\u53ef\u53bb \u5176\u4ed6\u8003\u70b9\uff1a\u8ba1\u7b97\u7801\u7684\u7b97\u6cd5 \u6a21\u5f0f\u5206\u89e3 \u00b6 \u65e0\u635f\u8fde\u63a5\u6027 \u00b6 \u638c\u63e1\u5224\u65ad\u6a21\u5f0f\u5206\u89e3\u65e0\u635f\u8fde\u63a5\u6027\u7684\u7b97\u6cd5\uff0c\u7565 \u51fd\u6570\u4f9d\u8d56\u4fdd\u6301 \u00b6 \u7565 \u7b2c\u516d\u7ae0 \u6570\u636e\u5e93\u5e94\u7528\u5f00\u53d1 \u00b6 T-SQL \u00b6 \u53d8\u91cf \u00b6 declare @< \u5c40\u90e8\u53d8\u91cf\u540d > < \u6570\u636e\u7c7b\u578b > [, @< \u5c40\u90e8\u53d8\u91cf\u540d > < \u6570\u636e\u7c7b\u578b > ...] # \u58f0\u660e set @< \u5c40\u90e8\u53d8\u91cf\u540d > = < \u8868\u8fbe\u5f0f > # \u8d4b\u503c select @< \u5c40\u90e8\u53d8\u91cf\u540d > = < \u8868\u8fbe\u5f0f > [, @< \u5c40\u90e8\u53d8\u91cf\u540d > = < \u8868\u8fbe\u5f0f > ] # select \u53ef\u4ee5\u4e00\u6b21\u8d4b\u503c\u591a\u4e2a\u53d8\u91cf set @< \u5c40\u90e8\u53d8\u91cf\u540d > = ( select \u67e5\u8be2 ) # \u67e5\u8be2\u7ed3\u679c\u8d4b\u503c print \u5b57\u7b26\u4e32 | \u5c40\u90e8\u53d8\u91cf | \u5168\u5c40\u53d8\u91cf | \u51fd\u6570 # \u8f93\u51fa \u6d41\u7a0b\u63a7\u5236\u8bed\u53e5 \u00b6 begin...end begin # \u4e00\u4e2a begin ... end \u662f\u4e00\u4e2a\u8bed\u53e5\u5757 SQL\u8bed\u53e51 SQL\u8bed\u53e52 ... end if...else if < \u6761\u4ef6\u8868\u8fbe\u5f0f > { \u8bed\u53e5 1 | \u8bed\u53e5\u5757 1 } # \u91cc\u9762\u6709 begin ... end [ else { \u8bed\u53e5 2 | \u8bed\u53e5\u5757 2 } ] while while < \u903b\u8f91\u8868\u8fbe\u5f0f > { \u8bed\u53e5 1 | \u8bed\u53e5\u5757 1 } # \u91cc\u9762\u6709 begin ... end break / continue / return \u7565 \u51fd\u6570 \u00b6 \u5185\u7f6e\u51fd\u6570 \u00b6 \u7565 \u7528\u6237\u81ea\u5b9a\u4e49\u51fd\u6570 \u00b6 \u6807\u91cf\u51fd\u6570 create function [ < \u6240\u6709\u8005 > .] < \u51fd\u6570\u540d > ([ { @< \u53c2\u6570\u540d > [ as ] < \u53c2\u6570\u7c7b\u578b > [ =< \u9ed8\u8ba4\u503c > ] } [,....] ]) returns < \u8fd4\u56de\u53c2\u6570\u7c7b\u578b > [ as ] begin < \u51fd\u6570\u4f53 > return < \u8fd4\u56de\u503c\u8868\u8fbe\u5f0f > end \u6807\u91cf\u51fd\u6570\u7684\u8c03\u7528 select @< \u53d8\u91cf\u540d > = dbo . < \u51fd\u6570\u540d > ( \u5b9e\u53c2 1 ,..., \u5b9e\u53c2 n ) # \u65b9\u5f0f 1 select exec @< \u53d8\u91cf\u540d > = dbo . < \u51fd\u6570\u540d > \u5b9e\u53c2 1 ,..., \u5b9e\u53c2 n # \u65b9\u5f0f 2 exec \u5185\u5d4c\u8868\u503c\u51fd\u6570 create function [ < \u6240\u6709\u8005 > .] < \u51fd\u6570\u540d > ([ { @< \u53c2\u6570\u540d > [ as ] < \u53c2\u6570\u7c7b\u578b > [ =< \u9ed8\u8ba4\u503c > ] } [,....] ]) returns table [ as ] begin return ( < select > \u8bed\u53e5 ) end \u5185\u5d4c\u8868\u503c\u51fd\u6570\u7684\u8c03\u7528 # \u53ea\u80fd\u901a\u8fc7 select select * from < \u51fd\u6570\u540d > ( \u53c2\u6570\u8868 ) \u591a\u8bed\u53e5\u8868\u503c\u51fd\u6570 create function [ < \u6240\u6709\u8005 > .] < \u51fd\u6570\u540d > ([ { @< \u53c2\u6570\u540d > [ as ] < \u53c2\u6570\u7c7b\u578b > [ =< \u9ed8\u8ba4\u503c > ] } [,....] ]) returns @ reuturn_variable table < \u8868\u7684\u5b9a\u4e49 > [ as ] begin < \u51fd\u6570\u4f53 > return end \u591a\u8bed\u53e5\u8868\u503c\u51fd\u6570 # \u53ea\u80fd\u901a\u8fc7 select select * from < \u51fd\u6570\u540d > ( \u53c2\u6570\u8868 ) \u5220\u9664\u51fd\u6570 drop function { [ < \u6240\u6709\u8005 > .] < \u51fd\u6570\u540d > } [,... n ] \u6e38\u6807 \u00b6 \u6e38\u6807\u7c7b\u578b \u00b6 \u9759\u6001\u6e38\u6807 \u53ea\u8bfb \u52a8\u6001\u6e38\u6807 \u80fd\u591f\u53cd\u6620\u5bf9\u7ed3\u679c\u96c6\u4e2d\u6240\u505a\u7684\u66f4\u6539 \u53ea\u8fdb\u6e38\u6807 \u53ea\u652f\u6301\u4ece\u5934\u5230\u5c3e\u63d0\u53d6\u6570\u636e \u952e\u96c6\u9a71\u52a8\u6e38\u6807 \u53ef\u4ee5\u4fee\u6539\u57fa\u672c\u8868\u4e2d\u975e\u5173\u952e\u5b57\u5217\u7684\u503c\uff0c\u4f46\u4e0d\u53ef\u4ee5\u63d2\u5165\u6570\u636e \u58f0\u660e\u6e38\u6807 \u00b6 declare < \u6e38\u6807\u540d > cursor [ local | global ] -- \u6e38\u6807\u4f5c\u7528\u57df [ forword_only | scroll ] -- \u6e38\u6807\u79fb\u52a8\u65b9\u5411 [ static | keyset | dynamic | fast_forward ] -- \u6e38\u6807\u7c7b\u578b [ read_only | scroll_locks | optimistic ] -- \u8bbf\u95ee\u5c5e\u6027 [ type_warning ] -- \u7c7b\u578b\u8f6c\u6362\u8b66\u544a for < select\u8bed\u53e5 > [ for update [ of < \u5217\u540d > [,... n ]] -- \u53ef\u4fee\u6539\u7684\u5217 \u6253\u5f00\u6e38\u6807 \u00b6 open { { [ global ] < \u6e38\u6807\u540d > } | @< \u6e38\u6807\u53d8\u91cf\u540d > } -- eg select '\u6e38\u6807 KH_cur \u6570\u636e\u884c\u6570' = @@ CURSOR_ROWS \u8bfb\u53d6\u6e38\u6807 \u00b6 fetch [ [ next | prior | first | last | absolute { n |@ nvar } | relative { n |@ nvar } ] from ] { { [ global ] < \u6e38\u6807\u540d > } | @< \u6e38\u6807\u53d8\u91cf\u540d > } [ into @ variable_name [,... n ]] \u5173\u95ed\u6e38\u6807 \u00b6 close { { [ global ] < \u6e38\u6807\u540d > } |@< \u6e38\u6807\u53d8\u91cf\u540d > } \u91ca\u653e\u6e38\u6807 \u00b6 deallocate { { [ global ] < \u6e38\u6807\u540d > } |@< \u6e38\u6807\u53d8\u91cf\u540d > } \u6e38\u6807\u53d8\u91cf \u00b6 \u7565 \u6e38\u6807\u51fd\u6570 \u00b6 CURSOR_STATUS ( 'loacl' | 'global' | 'variable' , '\u6e38\u6807\u540d' | '\u6e38\u6807\u53d8\u91cf\u540d' ) -- eg set @ statusVar = CURSOR_STATUS ( 'local' , 'CUR' ) \u5b58\u50a8\u8fc7\u7a0b \u00b6 \u5b58\u50a8\u8fc7\u7a0b\u7f16\u8bd1\u548c\u4f18\u5316\u540e\u5b58\u653e\u5728\u6570\u636e\u5e93\u670d\u52a1\u5668\u4e0a\uff0c\u6267\u884c\u4e00\u6b21\u540e\u5b58\u653e\u5728 \u9ad8\u7f13 \u4e2d \u4f18\u70b9\uff1a \u63d0\u9ad8\u7cfb\u7edf\u6027\u80fd \u4ee3\u7801\u590d\u7528\uff0c\u6267\u884c\u6548\u7387\u9ad8 \u5b58\u50a8\u8fc7\u7a0b\u7684\u5b9a\u4e49 \u00b6 create proc [ edure ] < \u5b58\u50a8\u8fc7\u7a0b\u540d > [ { @< \u53c2\u6570 >< \u6570\u636e\u7c7b\u578b > } [ = default ][ output ]] [,... n1 ] as < SQL\u8bed\u53e5 > [... n2 ] \u5b58\u50a8\u8fc7\u7a0b\u7684\u6267\u884c \u00b6 [ exec [ ute ]] < \u5b58\u50a8\u8fc7\u7a0b\u540d > [[ @< \u53c2\u6570\u540d >= ] { < \u503c >|@< \u53d8\u91cf > [ output ] | [ default ] } [,... n ]] -- deaflut \u8868\u793a\u7528\u9ed8\u8ba4\u503c \u5220\u9664\u540c\u540d\u5b58\u50a8\u8fc7\u7a0b \u00b6 if exists ( select name from sysobjects where name = 'eg' and type = 'P' ) drop procedure eg -- \u5220\u9664\u51fd\u6570\u7b49\u540c\u7406 \u4fee\u6539\u5b58\u50a8\u8fc7\u7a0b \u00b6 alter proc [ edure ] < \u5b58\u50a8\u8fc7\u7a0b\u540d > [ { @< \u53c2\u6570 >< \u6570\u636e\u7c7b\u578b > } [ = default ][ output ]] [,... n1 ] as < SQL\u8bed\u53e5 > [... n2 ] \u5220\u9664\u5b58\u50a8\u8fc7\u7a0b \u00b6 drop proc [ edure ] { < \u5b58\u50a8\u8fc7\u7a0b\u540d > } [,... n ] \u89e6\u53d1\u5668 \u00b6 \u89e6\u53d1\u5668\u7684\u5206\u7c7b \u00b6 \u89e6\u53d1\u7c7b\u578b\uff1ainsert / update / delete \u89e6\u53d1\u65b9\u5f0f\uff1aafter / instead of \u521b\u5efa\u89e6\u53d1\u5668 \u00b6 create trigger < \u89e6\u53d1\u5668\u540d > on { < \u57fa\u672c\u8868 >|< \u89c6\u56fe > } -- \u6307\u5b9a\u89e6\u53d1\u5668\u540d\u53ca\u64cd\u4f5c\u5bf9\u8c61 { for | after | instead of } { [ delete ][,][ insert ][,][ update ] } -- \u5b9a\u4e49\u89e6\u53d1\u5668\u7684\u7c7b\u578b\uff0c\u9ed8\u8ba4\u662f after as [ if update ( < \u5217\u540d > )[ { and | or } update ( < \u5217\u540d > )] [,... n ] ] < SQL\u8bed\u53e5 > [,... n ] -- \u53ef\u5305\u542b\u4e00\u6761\u6216\u591a\u6761SQL\u8bed\u53e5 \u89e6\u53d1\u5668\u7684\u7981\u6b62\u4e0e\u542f\u7528 \u00b6 alter table { enable | disable } < \u89e6\u53d1\u5668\u540d > \u4fee\u6539\u89e6\u53d1\u5668 \u00b6 alter trigger < \u89e6\u53d1\u5668\u540d > on { < \u57fa\u672c\u8868 >|< \u89c6\u56fe > } -- \u6307\u5b9a\u89e6\u53d1\u5668\u540d\u53ca\u64cd\u4f5c\u5bf9\u8c61 { for | after | instead of } { [ delete ][,][ insert ][,][ update ] } -- \u5b9a\u4e49\u89e6\u53d1\u5668\u7684\u7c7b\u578b\uff0c\u9ed8\u8ba4\u662f after as [ if update ( < \u5217\u540d > )[ { and | or } update ( < \u5217\u540d > )] [,... n ] ] < SQL\u8bed\u53e5 > [,... n ] -- \u53ef\u5305\u542b\u4e00\u6761\u6216\u591a\u6761SQL\u8bed\u53e5 \u5220\u9664\u89e6\u53d1\u5668 \u00b6 drop trigger { < \u89e6\u53d1\u5668\u540d > } [,... n ] \u6570\u636e\u5e93\u8bbf\u95ee\u63a5\u53e3 \u00b6 \u5f00\u653e\u6570\u636e\u5e93\u8fde\u63a5(ODBC) \u00b6 \u7ec4\u6210\uff1aODBC\u6570\u636e\u5e93\u5e94\u7528\u7a0b\u5e8f\uff0c\u9a71\u52a8\u7a0b\u5e8f\u7ba1\u7406\u5668\uff0c\u9a71\u52a8\u7a0b\u5e8f\uff0c\u6570\u636e\u6e90 5\u9636\u6bb5\uff1a\u914d\u7f6e\u6570\u636e\u6e90\uff0c\u8fde\u63a5\u6570\u636e\u6e90\uff0c\u521d\u59cb\u5316\u5e94\u7528\u7a0b\u5e8f\uff0cSQL\u5904\u7406\uff0c\u5904\u7406\u7ed3\u675f \u4f18\u70b9\uff1a\u4ee5\u7edf\u4e00\u7684\u65b9\u5f0f\u5904\u7406\u6240\u6709\u6570\u636e\u5e93 JDBC \u00b6 \u7ec4\u6210\uff1aJava\u5e94\u7528\u7a0b\u5e8f\uff0cJDBC\u9a71\u52a8\u7a0b\u5e8f\u7ba1\u7406\u5668\uff0cJDBC\u9a71\u52a8\u7a0b\u5e8f\uff0c\u6570\u636e\u5e93 ADO.NET \u00b6 \u6570\u636e\u5e93\u5e94\u7528\u7cfb\u7edf\u4f53\u7cfb\u7ed3\u6784 \u00b6 \u4f53\u7cfb\u7ed3\u6784\uff1a\u5355\u7528\u6237\u6a21\u5f0f\uff0c\u4e3b\u4ece\u5f0f\u591a\u7528\u6237\u6a21\u5f0f\uff0cC/S\u6a21\u5f0f\uff0cB/S\u6a21\u5f0f \u7b2c\u4e03\u7ae0 \u6570\u636e\u5e93\u4fdd\u62a4 \u00b6 \u5bf9\u6570\u636e\u5e93\u7684\u7834\u574f \u00b6 \u975e\u6cd5\u7528\u6237 \u975e\u6cd5\u6570\u636e \u5404\u79cd\u6545\u969c \u591a\u7528\u6237\u7684\u5e76\u53d1\u8bbf\u95ee \u6570\u636e\u5e93\u5b89\u5168 \u00b6 SQLServer \u2014\u2014 \u7528\u6237\u6743\u9650\u64cd\u4f5c - \u5f90\u6797\u4fca \u6570\u636e\u5e93\u7684\u5b89\u5168\u63a7\u5236 \u7528\u6237\u8bc6\u522b\u4e0e\u9274\u522b -- \u521b\u5efa\u767b\u5f55\u540d create login < \u767b\u5f55\u540d > with password = '<\u5bc6\u7801>' , default_database = < \u5173\u8054\u7684\u6570\u636e\u5e93 > -- \u521b\u5efa\u7528\u6237\u540d create user < \u7528\u6237\u540d > for login < \u767b\u5f55\u540d > # \u767b\u5f55\u540d\u4e0e\u7528\u6237\u540d\u5173\u8054 \u8bbf\u95ee\u63a7\u5236 -- \u6388\u6743 grant < \u6743\u9650 > [, < \u6743\u9650 > ...] # all privileges on < \u5bf9\u8c61\u7c7b\u578b > < \u5bf9\u8c61\u540d > [, < \u5bf9\u8c61\u7c7b\u578b > < \u5bf9\u8c61\u540d > ...] to < \u7528\u6237 > [, < \u7528\u6237 > ...] [ with grant option ] # \u5141\u8bb8\u8f6c\u6388 -- \u6536\u56de\u6743\u9650 revoke < \u6743\u9650 > [, < \u6743\u9650 > ...] on < \u5bf9\u8c61\u7c7b\u578b > < \u5bf9\u8c61\u540d > [, < \u5bf9\u8c61\u7c7b\u578b > < \u5bf9\u8c61\u540d > ...] from < \u7528\u6237 > [, < \u7528\u6237 > ...] [ cascade ] # cascade \u8868\u793a\u7ea7\u8054\u56de\u6536 \u89c6\u56fe\u673a\u5236 \u5b89\u5168\u5ba1\u8ba1\u673a\u5236 SQL Server\u7684\u5b89\u5168\u673a\u5236 \u8eab\u4efd\u9a8c\u8bc1\u6a21\u5f0f \u767b\u5f55\u548c\u7528\u6237 \u6743\u9650\u7ba1\u7406 \u89d2\u8272\u7ba1\u7406 \u6570\u636e\u5e93\u5b8c\u6574\u6027 \u00b6 \u51c6\u786e\u6027\uff0c\u6709\u6548\u6027\uff0c\u76f8\u5bb9\u6027 \u6570\u636e\u5e93\u5b8c\u6574\u6027\u63a7\u5236 \u00b6 \u5b9e\u4f53\u5b8c\u6574\u6027 \u53c2\u7167\u5b8c\u6574\u6027 \u7528\u6237\u81ea\u5b9a\u4e49\u5b8c\u6574\u6027 SQL Server \u7684\u5b8c\u6574\u6027\u673a\u5236 \u00b6 \u7ea6\u675f Constraint \u00b6 not null primary key check foreign key default unique check \u7ea6\u675f \u7ea6\u675f\u5b57\u6bb5\u6240\u5141\u8bb8\u7684\u8303\u56f4 [ constraint < \u7ea6\u675f\u540d > ] check ( < \u6761\u4ef6 > ) unique \u7ea6\u675f [ constraint < \u7ea6\u675f\u540d > ] unique \u89c4\u5219 Rule \u00b6 \u521b\u5efa\u89c4\u5219 create rule < \u89c4\u5219\u540d > as < \u6761\u4ef6\u8868\u8fbe\u5f0f > \u7ed1\u5b9a\u89c4\u5219 [ exec [ ute ]] sp_bindrule [ @ rulename = ] '<\u89c4\u5219\u540d>' ,[ @ objanme ] '<\u7ed1\u5b9a\u5bf9\u8c61\u540d>' \u89e3\u7ed1\u89c4\u5219 [ exec [ ute ]] sp_unbindrule [ @ objanme ] '<\u7ed1\u5b9a\u5bf9\u8c61\u540d>' \u5220\u9664\u89c4\u5219 drop rule < \u89c4\u5219\u540d > [,...] \u9ed8\u8ba4 Default \u00b6 \u7565 \u5e76\u53d1\u63a7\u5236 \u00b6 \u4e8b\u52a1\uff1a\u662f\u7528\u6237\u5b9a\u4e49\u7684\u4e00\u4e2a\u6570\u636e\u5e93\u64cd\u4f5c\u5e8f\u5217\uff0c\u8981\u4e48\u5168\u505a\uff0c\u8981\u4e48\u90fd\u4e0d\u505a\uff0c\u662f\u4e00\u4e2a\u4e0d\u53ef\u5206\u5272\u7684\u5de5\u4f5c\u5355\u4f4d\uff0c\u662fDBMS\u7684\u57fa\u672c\u5355\u4f4d \u4e8b\u52a1\u7684 ACID \u6027\u8d28 \u00b6 \u539f\u5b50\u6027 \u4e00\u81f4\u6027 \u9694\u79bb\u6027 \u6301\u4e45\u6027 \u4e8b\u52a1\u7684\u6d3b\u52a8\u8fc7\u7a0b \u00b6 4 \u4e2a\u72b6\u6001 \u4e8b\u52a1\u5f00\u59cb \u4e8b\u52a1\u8bfb / \u5199 \u4e8b\u52a1\u63d0\u4ea4 (COMMIT) \u4e8b\u52a1\u56de\u6eda (ROLLBACK) \u4e8b\u52a1\u7684\u5e76\u53d1\u6267\u884c \u00b6 \u4e22\u5931\u66f4\u65b0 \u8bfb \u201c\u810f\u201d \u6570\u636e \u4e0d\u53ef\u91cd\u590d\u8bfb \u5e76\u53d1\u8c03\u5ea6\u7684\u53ef\u4e32\u884c\u6027 \u00b6 \u4e8b\u52a1\u7684\u5e76\u53d1\u8c03\u5ea6\u662f\u6b63\u786e\u7684\u5f53\u4e14\u4ec5\u5f53\u5176\u7ed3\u679c\u4e0e\u4e32\u884c\u8c03\u5ea6\u6267\u884c\u7684\u7ed3\u679c\u76f8\u540c\uff0c\u53ef\u4e32\u884c\u5316\u662f\u5e76\u53d1\u63a7\u5236\u7684\u6b63\u786e\u6027\u7684\u51c6\u5219 \u5c01\u9501 \u00b6 \u5c01\u9501\u7c7b\u578b\uff1a \u6392\u4ed6\u9501\uff1a\u5199\u9501\u6216 X \u9501\uff0c\u81ea\u5df1\u53ef\u8bfb\u53ef\u5199\uff0c\u5176\u4ed6\u4e8b\u52a1\u65e0\u6cd5\u5bf9\u6570\u636e\u8fdb\u884c\u52a0\u9501\u6216\u64cd\u4f5c \u5171\u4eab\u9501\uff1a\u8bfb\u9501\u6216 S \u9501\uff0c\u81ea\u5df1\u53ea\u53ef\u8bfb\uff0c\u5176\u4ed6\u4e8b\u52a1\u53ea\u80fd\u52a0 S \u9501 \u5c01\u9501\u534f\u8bae\uff1a \u4e00\u7ea7\u5c01\u9501\u534f\u8bae\uff1a\u5bf9\u6570\u636e\u8fdb\u884c\u5199\u64cd\u4f5c\u65f6\u5fc5\u987b\u52a0X\u9501\uff0c\u4e8b\u52a1\u7ed3\u675f\u91ca\u653e\uff0c\u89e3\u51b3\u2018\u4e22\u5931\u66f4\u65b0\u2019 \u4e8c\u7ea7\u5c01\u9501\u534f\u8bae\uff1a\u4e00\u7ea7\u5c01\u9501\u534f\u8bae\u518d\u52a0\u4e0a\u5728\u8bfb\u6570\u636e\u524d\u52a0\u4e0a S \u9501\uff0c\u8bfb\u5b8c\u5373\u91ca\u653e\uff0c\u8fdb\u4e00\u6b65\u89e3\u51b3\u2018\u8bfb\u810f\u6570\u636e\u2019 \u4e09\u7ea7\u5c01\u9501\u534f\u8bae\uff1a\u4e00\u7ea7\u5c01\u9501\u534f\u8bae\u518d\u52a0\u4e0a\u5728\u8bfb\u6570\u636e\u524d\u52a0\u4e0a S \u9501\uff0c\u4e8b\u52a1\u7ed3\u675f\u91ca\u653e\uff0c\u8fdb\u4e00\u6b65\u89e3\u51b3\u2018\u4e0d\u53ef\u91cd\u590d\u5ea6\u2019 \u4e24\u6bb5\u9501\u534f\u8bae\uff1a\u6240\u6709\u4e8b\u52a1\u5fc5\u987b\u5206\u4e24\u4e2a\u9636\u6bb5\u5bf9\u6570\u636e\u52a0\u9501\u548c\u89e3\u9501\uff0c\u5373\u540c\u610f\u4e0a\u9501\uff0c\u7136\u540e\u518d\u7edf\u4e00\u89e3\u9501 \u6d3b\u9501 & \u6b7b\u9501\uff1a \u6d3b\u9501\uff1a\u5728\u5c01\u9501\u8fc7\u7a0b\u4e2d\u67d0\u4e2a\u4e8b\u52a1\u6c38\u8fdc\u5904\u4e8e\u7b49\u5f85\u7684\u72b6\u6001\u800c\u5f97\u4e0d\u5230\u5c01\u9501\u673a\u4f1a \u89e3\u51b3\u65b9\u6cd5\uff1a\u5148\u6765\u5148\u670d\u52a1 \u6b7b\u9501\uff1a\u82e5\u5e72\u4e8b\u52a1\u90fd\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\uff0c\u76f8\u4e92\u7b49\u5f85\u5bf9\u65b9\u91ca\u653e\u9501 \u89e3\u51b3\u65b9\u6cd5\uff1a\u9884\u9632\u6cd5\uff1a\u987a\u5e8f\u7533\u8bf7\u6cd5\uff0c\u4e00\u6b21\u7533\u8bf7\u6cd5 \u200b \u89e3\u9664\u6cd5\uff1a\u5b9a\u65f6\u6cd5\uff0c\u6b7b\u9501\u68c0\u6d4b\u6cd5 \u6570\u636e\u5e93\u6062\u590d \u00b6 \u6545\u969c\u79cd\u7c7b \u00b6 \u7cfb\u7edf\u6545\u969c \u4e8b\u52a1\u6545\u969c \u4ecb\u8d28\u6545\u969c \u8ba1\u7b97\u673a\u75c5\u6bd2 \u8bef\u64cd\u4f5c \u81ea\u7136\u707e\u5bb3 \u76d7\u7a83 \u6570\u636e\u5e93\u6062\u590d\u6280\u672f \u00b6 \u628a\u6570\u636e\u5e93\u4ece\u9519\u8bef\u72b6\u6001\u6062\u590d\u5230\u67d0\u4e2a\u6b63\u786e\u7684\u72b6\u6001 \u6570\u636e\u5e93\u6062\u590d\u673a\u5236\u7684\u4e24\u4e2a\u65b9\u9762\uff1a\u4e00\u662f\u5efa\u7acb\u5197\u4f59\u6570\u636e\uff0c\u4e8c\u662f\u7cfb\u7edf\u51fa\u73b0\u6545\u969c\u540e\u5229\u7528\u5197\u4f59\u6570\u636e\u5c06\u6570\u636e\u5e93\u6062\u590d\u5230\u67d0\u4e2a\u6b63\u5e38\u7684\u72b6\u6001 \u5907\u4efd\uff1a\u6570\u636e\u8f6c\u5b58\uff0c\u767b\u5f55\u65e5\u5fd7\u6587\u4ef6 \u53c2\u8003 \u00b6 \u6570\u636e\u5e93\u57fa\u7840\u6559\u7a0b\uff08\u7b2c\u4e09\u7248\uff09 \u987e\u97f5\u534e \u7535\u5b50\u5de5\u4e1a\u51fa\u7248\u793e","title":"\u6570\u636e\u5e93\u7cfb\u7edf"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_1","text":"","title":"\u6570\u636e\u5e93\u7cfb\u7edf"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_2","text":"","title":"\u7b2c\u4e00\u7ae0 \u6570\u636e\u5e93\u6982\u89c8"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_3","text":"\u4eba\u5de5\u7ba1\u7406\u9636\u6bb5\uff1a\u4e0d\u80fd\u957f\u671f\u4fdd\u5b58\uff0c\u4e0d\u5177\u6709\u72ec\u7acb\u6027\uff0c\u4e0d\u5171\u4eab \u6587\u4ef6\u7cfb\u7edf\u9636\u6bb5\uff1a\u957f\u671f\u4fdd\u5b58\uff0c\u72ec\u7acb\u6027\u5dee\uff0c\u5171\u4eab\u6027\u5dee\uff0c\u5197\u4f59\u5ea6\u5927\uff0c \u6570\u636e\u5e93\u7cfb\u7edf\u9636\u6bb5\uff1a\u7279\u70b9\uff1a1.\u6570\u636e\u7ed3\u6784\u5316 2.\u5171\u4eab\u6027\u9ad8\uff0c\u5197\u4f59\u5ea6\u4f4e\uff0c\u6613\u4e8e\u6269\u5145 3.\u6570\u636e\u72ec\u7acb\u6027\u9ad8 4.\u6570\u636e\u7edf\u4e00\u7ba1\u7406\u4e0e\u63a7\u5236","title":"\u6570\u636e\u5e93\u53d1\u5c55\u4e09\u9636\u6bb5"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_4","text":"\u6570\u636e\u5e93 \u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\uff08DBMS\uff09 \u6570\u636e\u5e93\u7684\u5e94\u7528\u7a0b\u5e8f \u6570\u636e\u5e93\u7cfb\u7edf\u7684\u4eba\u5458\uff1a\u7ba1\u7406\u5458\uff08DBA\uff09 ...","title":"\u6570\u636e\u5e93\u7cfb\u7edf\u7ec4\u6210"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_5","text":"\u4e09\u7ea7\u6a21\u5f0f\uff1a\u5916\u6a21\u5f0f\uff0c\u6a21\u5f0f\uff0c\u5185\u6a21\u5f0f \u6a21\u5f0f\uff1a\u4e5f\u79f0\u903b\u8f91\u6a21\u5f0f\uff0c\u4e00\u4e2a\u6570\u636e\u5e93\u53ea\u6709\u4e00\u4e2a\u6a21\u5f0f\uff0c\u662f\u6570\u636e\u5e93\u5168\u4f53\u6570\u636e\u7684\u903b\u8f91\u7ed3\u6784\u548c\u7279\u5f81\u7684\u63cf\u8ff0 \u5916\u6a21\u5f0f\uff1a\u4e5f\u79f0\u5b50\u6a21\u5f0f\u6216\u7528\u6237\u6a21\u5f0f\uff0c\u662f\u6a21\u5f0f\u7684\u5b50\u96c6\uff0c\u4e00\u4e2a\u6570\u636e\u5e93\u53ef\u4ee5\u6709\u591a\u4e2a\u5916\u6a21\u5f0f \u5185\u6a21\u5f0f\uff1a\u4e5f\u79f0\u5b58\u50a8\u6a21\u5f0f\uff0c\u53ea\u6709\u4e00\u4e2a\u5185\u6a21\u5f0f\uff0c\u662f\u6570\u636e\u7269\u7406\u7ed3\u6784\u548c\u5b58\u50a8\u65b9\u5f0f\u7684\u63cf\u8ff0 \u4e8c\u7ea7\u6620\u50cf\uff1a \u5916\u6a21\u5f0f/\u6a21\u5f0f\u6620\u50cf\uff1a\u6a21\u5f0f\u6539\u53d8\u65f6\uff0c\u5bf9\u6620\u50cf\u505a\u51fa\u76f8\u5e94\u7684\u6539\u53d8\u53ef\u4ee5\u4f7f\u5916\u6a21\u5f0f\u4fdd\u6301\u4e0d\u53d8\uff0c\u4fdd\u8bc1\u6570\u636e\u548c\u7a0b\u5e8f\u7684\u903b\u8f91\u72ec\u7acb\u6027 \u6a21\u5f0f/\u5185\u6a21\u5f0f\u6620\u50cf\uff1a\u5185\u6a21\u5f0f\u6539\u53d8\u65f6\uff0c\u5bf9\u6620\u50cf\u505a\u51fa\u76f8\u5e94\u7684\u6539\u53d8\u53ef\u4ee5\u4f7f\u6a21\u5f0f\u4fdd\u6301\u4e0d\u53d8\uff0c\u4fdd\u8bc1\u6570\u636e\u7684\u7269\u7406\u72ec\u7acb\u6027","title":"\u4e09\u7ea7\u6a21\u5f0f\u4e0e\u4e8c\u7ea7\u6620\u50cf"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_6","text":"\u529f\u80fd\uff1a\u6570\u636e\u5b9a\u4e49\uff0c\u6570\u636e\u64cd\u7eb5\uff0c\u6570\u636e\u5e93\u7684\u4e8b\u52a1\u7ba1\u7406\u548c\u8fd0\u884c\u7ba1\u7406\uff0c\u6570\u636e\u5e93\u7684\u521b\u5efa\u548c\u7ef4\u62a4","title":"\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_7","text":"\u5206\u7c7b\uff1a\u6982\u5ff5\u6570\u636e\u6a21\u578b\uff0c\u903b\u8f91\u6570\u636e\u6a21\u578b\uff0c\u7269\u7406\u6570\u636e\u6a21\u578b \u6982\u5ff5\u6570\u636e\u6a21\u578b\uff1aER\u56fe ER\u6a21\u578b\u4e09\u8981\u7d20\uff1a\u5b9e\u4f53\uff0c\u5c5e\u6027\uff0c\u8054\u7cfb \u903b\u8f91\u6570\u636e\u6a21\u578b\uff08\u4e00\u822c\u90fd\u76f4\u63a5\u53eb\u6570\u636e\u6a21\u578b\uff09\uff1a\u5c42\u6b21\u6a21\u578b\uff0c\u7f51\u72b6\u6a21\u578b\uff0c\u5173\u7cfb\u6a21\u578b\uff0c\u9762\u5411\u5bf9\u8c61\u6a21\u578b \u6570\u636e\u6a21\u578b\u4e09\u8981\u7d20\uff1a\u6570\u636e\u7ed3\u6784\uff0c\u6570\u636e\u64cd\u4f5c\uff0c\u6570\u636e\u5b8c\u6574\u6027\u7ea6\u675f \u5c42\u6b21\u6a21\u578b\u662f\u4e00\u68f5\u6811\uff0c\u5173\u7cfb\u6a21\u578b\u662f\u4e00\u5f20\u4e8c\u7ef4\u8868","title":"\u6570\u636e\u6a21\u578b"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_8","text":"","title":"\u7b2c\u4e8c\u7ae0 \u5173\u7cfb\u6570\u636e\u5e93\u6a21\u578b"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_9","text":"\u5217\u662f\u540c\u8d28\u7684\uff0c\u5373\u6570\u636e\u7c7b\u578b\u76f8\u540c \u4e0d\u540c\u7684\u5217\u53ef\u4ee5\u51fa\u5176\u540c\u4e00\u4e2a\u57df\uff0c\u4f46\u5c5e\u6027\u540d\u8981\u4e0d\u540c \u5217\u7684\u987a\u5e8f\u53ef\u4ee5\u4efb\u610f\u4ea4\u6362 \u4efb\u610f\u4e24\u4e2a\u5143\u7ec4\u4e0d\u53ef\u4ee5\u5b8c\u5168\u76f8\u540c \u5143\u7ec4\u987a\u5e8f\u53ef\u4ee5\u4efb\u610f \u5206\u91cf\u5fc5\u987b\u53d6\u539f\u5b50\u503c\uff0c\u5373\u8981\u6c42\u6bcf\u4e2a\u5206\u91cf\u90fd\u662f\u4e0d\u53ef\u518d\u5206\u7684\u6570\u636e\u9879","title":"\u5173\u7cfb\u7684\u6027\u8d28"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_10","text":"\u4e00\u4e2a\u5173\u7cfb\u5c31\u662f\u4e00\u4e2a\u89c4\u8303\u5316\u7684\u4e8c\u7ef4\u8868\uff0c\u7b1b\u5361\u5c14\u79ef\u7684\u6709\u610f\u4e49\u7684\u6709\u9650\u5b50\u96c6 \u4e00\u4e2a\u5173\u7cfb\u7531\u5173\u7cfb\u540d\uff0c\u5173\u7cfb\u6a21\u5f0f\uff0c\u5173\u7cfb\u5b9e\u4f8b\u7ec4\u6210 \u5143\u7ec4\uff0c\u5c5e\u6027\uff0c\u7801\uff0c\u57df\uff0c\u5206\u91cf\uff0c\u5173\u7cfb\u6a21\u5f0f \u5019\u9009\u7801\uff1a\u552f\u4e00\u6027\uff0c\u6700\u5c0f\u6027 \u8d85\u7801\uff1a\u53ef\u4ee5\u552f\u4e00\u7684\u786e\u5b9a\u4e00\u884c\uff0c\u5019\u9009\u7801\u662f\u8d85\u7801\u7684\u5b50\u96c6 \u4e3b\u7801\uff1a\u5982\u679c\u7531\u591a\u4e2a\u5019\u9009\u7801\uff0c\u9009\u4e00\u4e2a \u4e3b\u5c5e\u6027\uff1a\u5305\u542b\u5728\u5019\u9009\u7801\u4e2d\u7684\u5404\u5c5e\u6027 \u5916\u7801","title":"\u5173\u7cfb\u6570\u636e\u7ed3\u6784"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_11","text":"\u5173\u7cfb\u4ee3\u6570\uff0c\u5173\u7cfb\u6f14\u7b97\uff0c\u57df\u6f14\u7b97\uff0cSQL","title":"\u5173\u7cfb\u6570\u636e\u8bed\u8a00\u7684\u5206\u7c7b"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_12","text":"\u4f20\u7edf\u7684\u96c6\u5408\u8fd0\u7b97\uff1a\u7b1b\u5361\u5c14\u79ef\uff0c\u5e76\uff0c\u4ea4\uff0c\u5dee \u4e13\u95e8\u7684\u5173\u7cfb\u8fd0\u7b97\uff1a\u9009\u62e9\uff0c\u6295\u5f71\uff0c\u8fde\u63a5\uff08\u7b49\u503c\uff0c\u81ea\u7136\u8fde\u63a5\uff0c\u5916\u8fde\u63a5\uff0c\u5de6\u5916\uff0c\u53f3\u5916\uff09\uff0c\u9664\u6cd5","title":"\u5173\u7cfb\u64cd\u4f5c &amp; \u5173\u7cfb\u4ee3\u6570"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_13","text":"\u5b9e\u4f53\u5b8c\u6574\u6027 \u53c2\u7167\u5b8c\u6574\u6027 \u7528\u6237\u81ea\u5b9a\u4e49\u5b8c\u6574\u6027 \u5217\u7ea7\u5b8c\u6574\u6027\u7ea6\u675f\u53ea\u80fd\u6d89\u53ca\u4e00\u4e2a\u5c5e\u6027\uff0c\u8868\u7ea7\u53ef\u4ee5\u6d89\u53ca\u591a\u4e2a\u5c5e\u6027","title":"\u6570\u636e\u5b8c\u6574\u6027"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#sql","text":"","title":"\u7b2c\u4e09\u7ae0 SQL\u8bed\u8a00"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#sql_1","text":"\u7279\u70b9\uff1a\u7efc\u5408\u7edf\u4e00\uff0c\u9ad8\u5ea6\u975e\u8fc7\u7a0b\u5316\uff0c\u9762\u5411\u96c6\u5408\u7684\u64cd\u4f5c\u65b9\u5f0f\uff0c\u4ee5\u540c\u4e00\u79cd\u8bed\u6cd5\u7ed3\u6784\u63d0\u4f9b\u4e24\u79cd\u4f7f\u7528\u65b9\u5f0f\uff0c\u8bed\u8a00\u7b80\u6d01\u6613\u5b66\u6613\u7528 \u6570\u636e\u5b9a\u4e49\uff08DDL\uff09\uff0c\u6570\u636e\u64cd\u7eb5\uff08DML\uff09\uff0c\u6570\u636e\u63a7\u5236\uff08DCL\uff09","title":"SQL\u6982\u8ff0"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#bnf","text":"<> \u5fc5\u9009\u9879 [ ] \u53ef\u4ee5\u51fa\u73b0\u4e00\u6b21\u6216\u4e0d\u51fa\u73b0 { } \u53ef\u4ee5\u591a\u6b21\u51fa\u73b0\u6216\u4e0d\u51fa\u73b0 | \u591a\u9009\u4e00","title":"\u5df4\u79d1\u65af\u8303\u5f0f\uff08BNF\uff09"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_14","text":"","title":"\u6570\u636e\u5b9a\u4e49"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_15","text":"create database < \u6570\u636e\u5e93\u540d > use < \u6570\u636e\u5e93\u540d > alter database < \u6570\u636e\u5e93\u540d > drop database < \u6570\u636e\u5e93\u540d >","title":"\u6570\u636e\u5e93"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_16","text":"\u5b9a\u4e49 create table < \u8868\u540d > ( < \u5217\u540d >< \u6570\u636e\u7c7b\u578b > [ < \u5217\u7ea7\u5b8c\u6574\u6027\u7ea6\u675f > ] { , < \u5217\u540d >< \u6570\u636e\u7c7b\u578b > [ < \u5217\u7ea7\u5b8c\u6574\u6027\u7ea6\u675f > ] } [, < \u8868\u7ea7\u5b8c\u6574\u6027\u7ea6\u675f > ] ) \u5217\u7ea7\u7ea6\u675f\uff1a not null, default, unique, check, primary key, foreign key foreign key: foreign key (<\u5217\u540d>) references <\u5916\u8868\u540d>(<\u5916\u8868\u5217\u540d>) \u4fee\u6539 alter table < \u8868\u540d > alter column < \u5217\u540d > < \u65b0\u6570\u636e\u7c7b\u578b > [ null | not null ] | add < \u5217\u540d > < \u6570\u636e\u7c7b\u578b > [ \u7ea6\u675f ] | drop column < \u5217\u540d > | add [ constraint < \u7ea6\u675f\u540d > ] < \u7ea6\u675f\u5b9a\u4e49 > | drop constraint < \u7ea6\u675f\u540d > \u5220\u9664 drop table < \u57fa\u672c\u8868\u540d >","title":"\u57fa\u672c\u8868"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_17","text":"\u5206\u7c7b\uff1a\u805a\u7c07\u7d22\u5f15\u548c\u975e\u805a\u7c07\u7d22\u5f15 \u9ed8\u8ba4\u975e\u805a\u7c07\uff0c\u805a\u7c07\u7d22\u5f15\u53ea\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a \u805a\u7c07\u7d22\u5f15\uff1a\u7d22\u5f15\u9879\u987a\u5e8f\u548c\u7269\u7406\u987a\u5e8f\u4e00\u81f4 \u5b9a\u4e49 create [ unique ][ clustered | notclustered ] index < \u7d22\u5f15\u540d > on < \u57fa\u672c\u8868\u540d > ( < \u5217\u540d > [ asc | desc ] [ { ,( < \u5217\u540d > [ asc | desc ] } ...]) \u5220\u9664 drop index < \u8868\u540d > . < \u7d22\u5f15\u540d >","title":"\u7d22\u5f15"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_18","text":"select [ all | distinct ] < \u76ee\u6807\u5217\u8868\u8fbe\u5f0f > [, < \u76ee\u6807\u5217\u8868\u8fbe\u5f0f > ]... from < \u8868\u540d\u6216\u89c6\u56fe\u540d > [, < \u8868\u540d\u6216\u89c6\u56fe\u540d > ]... [ where < \u6761\u4ef6\u8868\u8fbe\u5f0f > ] [ group by < \u5217\u540d 1 > ] [ having < \u6761\u4ef6\u8868\u8fbe\u5f0f > ] -- having \u7528\u4e8e\u6307\u5b9a\u5206\u7ec4\u8fc7\u6ee4\u6761\u4ef6 [ order by < \u5217\u540d 2 > [ asc | desc ]]","title":"\u6570\u636e\u67e5\u8be2"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_19","text":"select \u5ba2\u6237\u7f16\u53f7 as cno from CustomerInfo select 'cno' = \u5ba2\u6237\u7f16\u53f7 # = \u5217\u540d\u5fc5\u987b\u5199\u53f3\u8fb9 from CustomerInfo","title":"\u66f4\u6539\u7ed3\u679c\u5217\u6807\u9898"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_20","text":"select < \u5217\u540d > = case when \u6761\u4ef6 1 then \u8868\u8fbe\u5f0f 1 ... else \u8868\u8fbe\u5f0f end from < \u8868\u540d > where < \u6761\u4ef6\u8868\u8fbe\u5f0f >","title":"\u66ff\u6362\u67e5\u8be2\u7ed3\u679c\u4e2d\u7684\u6570\u636e"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_21","text":"select unique < \u5217\u540d > from < \u8868\u540d >","title":"\u53bb\u9664\u91cd\u590d\u884c"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_22","text":"% \u8868\u793a\u4efb\u610f\u957f\u5ea6\u7684\u5b57\u7b26\u4e32 _ \u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26 select * from < \u8868\u540d > where < \u5217\u540d > like '\u6c5f\u82cf%' \u5982\u679c\u67e5\u8be2\u7684\u6761\u4ef6\u4e2d\u5305\u542b\u901a\u914d\u7b26\u9700\u8981\u8f6c\u4e49\uff1a escape\\ where \u5fae\u4fe1\u53f7 like 'wxid\\_%' escape '\\'","title":"\u6a21\u7cca\u67e5\u8be2"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_23","text":"< \u8868\u8fbe\u5f0f > is [ not ] null","title":"\u7a7a\u503c\u6bd4\u8f83"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_24","text":"[ order by < \u5217\u540d > [ asc | desc ]] [, < \u5217\u540d > [ asc | desc ]]...] # \u9ed8\u8ba4 asc \u5347\u5e8f","title":"\u5bf9\u7ed3\u679c\u96c6\u6392\u5e8f"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_25","text":"group by < \u8868\u8fbe\u5f0f > # eg select \u5546\u54c1\u7c7b\u522b , count ( \u5546\u54c1\u7f16\u53f7 ) as '\u79cd\u6570' from GoodsInfo group by \u5546\u54c1\u7c7b\u522b","title":"\u5bf9\u7ed3\u679c\u96c6\u5206\u7c7b"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#having","text":"having \u8bed\u53e5\u7528\u5728 group by \u5b50\u53e5\u540e\u6765\u8fdb\u884c\u7b5b\u9009\uff0c\u53ea\u8f93\u51fa\u7b26\u5408\u6761\u4ef6\u7684 [ having < \u6761\u4ef6 > ] # eg select \u5546\u54c1\u7c7b\u522b , count ( \u5546\u54c1\u7f16\u53f7 ) as '\u79cd\u6570' from GoodsInfo group by \u5546\u54c1\u7c7b\u522b having count ( * ) > 1","title":"having\u7b5b\u9009"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_26","text":"\u805a\u5408\u51fd\u6570 \u4e0d\u5141\u8bb8 \u5d4c\u5957 sum | avg () max | min () count () # eg select count ( \u5ba2\u6237\u7f16\u53f7 ) as '\u5ba2\u6237\u6570' from OrderList","title":"\u805a\u5408\u51fd\u6570"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_27","text":"\u8fde\u63a5\u8c13\u8bcd from < \u8868 1 > [ \u8868 1 \u522b\u540d ], < \u8868 2 > [ \u8868 2 \u522b\u540d ][, < \u8868 3 > [ \u8868 3 \u522b\u540d ]...] \u4ee5join\u5173\u952e\u5b57\u8fde\u63a5 # \u5185\u8fde\u63a5 \u9ed8\u8ba4\u5185\u8fde\u63a5 inner join ( inner\u53ef\u4ee5\u4e0d\u5199 ) select ... # 2 \u4e2a\u8868 from < \u8868 1 > join < \u8868 2 > on < \u6761\u4ef6 > where ... select ... # 3 \u4e2a\u8868 from < \u8868 1 > join < \u8868 2 > join < \u8868 3 > on < \u6761\u4ef6 1 > on < \u6761\u4ef6 2 > where ... # \u5916\u8fde\u63a5 outer join # \u5de6\u5916 : left outer join \u53f3\u5916 : right outer join \u5b8c\u5168\u5916 : full outer join","title":"\u8fde\u63a5\u67e5\u8be2"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_28","text":"\u5b50\u67e5\u8be2\u4e0d\u80fd\u5305\u542b order by \uff0c\u5373 order by \u53ea\u80fd\u5bf9\u6700\u7ec8\u67e5\u8be2\u6392\u5e8f","title":"\u5d4c\u5957\u67e5\u8be2"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#in","text":"where \u6240\u5728\u7701\u5e02 in ( \u5b50\u67e5\u8be2 )","title":"\u5e26 in \u7684\u5b50\u67e5\u8be2"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_29","text":"where \u6570\u91cf > ( \u5b50\u67e5\u8be2 ) # \u8fd9\u91cc\u7684\u5b50\u67e5\u8be2\u8981\u6c42\u7ed3\u679c\u53ea\u6709\u4e00\u4e2a","title":"\u5e26\u6bd4\u8f83\u8fd0\u7b97\u7b26\u7684\u5b50\u67e5\u8be2"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#all-any","text":"\u7528\u4ee5\u89e3\u9664\u6bd4\u8f83\u8fd0\u7b97\u7b26\u8981\u6c42\u5b50\u67e5\u8be2\u7684\u7ed3\u679c\u96c6\u5143\u7d20\u53ea\u80fd\u6709\u4e00\u4e2a\u7684\u9650\u5236 where \u6570\u91cf > all ( \u5b50\u67e5\u8be2 ) # \u7b49\u6548\u4e8e where \u6570\u91cf > ( \u5e26 MAX \u7684\u5b50\u67e5\u8be2 ) # \u5f53\u7136\u8fd9\u91cc\u5b50\u67e5\u8be2\u53ea\u80fd\u67e5\u8be2\u4e00\u5217","title":"\u5e26 ALL / ANY \u8c13\u8bcd\u7684\u5b50\u67e5\u8be2"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#exists","text":"[ not ] exists ( \u5b50\u67e5\u8be2 )","title":"\u5e26 EXISTS \u8c13\u8bcd\u7684\u5b50\u67e5\u8be2"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_30","text":"select \u8bed\u53e5\u7684\u67e5\u8be2\u7ed3\u679c\u662f\u7ed3\u679c\u96c6\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fdb\u884c\u96c6\u5408\u8fd0\u7b97 \u5e76 UNION \u4ea4 INTERSECT \u5dee EXCEPT \u8fd9\u91cc\u7684\u7ed3\u679c\u96c6\u5217\u6570\u5fc5\u987b\u76f8\u540c\uff0c\u5bf9\u5e94\u5217\u7684\u6570\u636e\u7c7b\u578b\u4e5f\u5fc5\u987b\u76f8\u540c select ... union select ... select ... intersect select ...","title":"\u96c6\u5408\u67e5\u8be2"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_31","text":"","title":"\u6570\u636e\u66f4\u65b0\uff08\u63d2\u5165&amp;\u4fee\u6539&amp;\u5220\u9664\uff09"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_32","text":"# \u63d2\u5165\u5143\u7ec4 insert into < \u8868\u540d > [( < \u5217 1 > [, < \u5217 2 > ...])] values ( < \u5e38\u91cf 1 > [, < \u5e38\u91cf 2 > ...]) # \u63d2\u5165\u5b50\u67e5\u8be2 insert into < \u8868\u540d > [( < \u5217 1 > [, < \u5217 2 > ...])] < \u5b50\u67e5\u8be2 >","title":"\u6570\u636e\u63d2\u5165"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_33","text":"update < \u8868\u540d > [[ as ] < \u522b\u540d > ] set < \u5217\u540d > = < \u5e38\u91cf > [, < \u5217\u540d > = < \u5e38\u91cf > ...] [ where < \u6761\u4ef6\u8868\u8fbe\u5f0f > ]","title":"\u6570\u636e\u4fee\u6539"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_34","text":"delete [ from ] < \u8868\u540d > [ where < \u6761\u4ef6\u8868\u8fbe\u5f0f > ]","title":"\u6570\u636e\u5220\u9664"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_35","text":"\u865a\u8868\uff0c\u53ef\u4ee5\u7528\u4ee5\u4fdd\u62a4\u6570\u636e\u5b89\u5168\u548c\u6ee1\u8db3\u4e0d\u540c\u7528\u6237\u7684\u9700\u6c42","title":"\u89c6\u56fe"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_36","text":"create view < \u89c6\u56fe\u540d > [( < \u5217\u540d > [, < \u5217\u540d > ])] as < select \u67e5\u8be2\u8bed\u53e5 >","title":"\u521b\u5efa\u89c6\u56fe"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_37","text":"alter view < \u89c6\u56fe\u540d > [( < \u5217\u540d > [, < \u5217\u540d > ])] as < select \u67e5\u8be2\u8bed\u53e5 >","title":"\u4fee\u6539\u89c6\u56fe"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_38","text":"drop view < \u89c6\u56fe\u540d >","title":"\u5220\u9664\u89c6\u56fe"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_39","text":"\u548c \u57fa\u672c\u8868 \u4e00\u81f4","title":"\u89c6\u56fe\u67e5\u8be2"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_40","text":"\u9632\u6b62\u51fa\u73b0\u8303\u56f4\u5916\u7684\u6570\u636e\u53ef\u4ee5\u5728\u5b9a\u4e49\u89c6\u56fe\u65f6\u52a0\u4e0a with check option \u63d2\u5165\u6570\u636e\uff0c\u4fee\u6539\u6570\u636e\uff0c\u5220\u9664\u6570\u636e\u90fd\u548c \u57fa\u672c\u8868 \u4e00\u81f4 \u4f46\u6709\u5f88\u591a\u9650\u5236\uff0c\u5982\u679c\u66f4\u65b0\u6210\u529f\u4e86\u4f1a\u6620\u5c04\u5230\u57fa\u672c\u8868","title":"\u89c6\u56fe\u66f4\u65b0"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_41","text":"\u5e7f\u4e49\uff1a\u6570\u636e\u5e93\u53ca\u5176\u5e94\u7528\u7cfb\u7edf\u7684\u8bbe\u8ba1\uff0c\u5373\u8bbe\u8ba1\u6574\u4e2a\u7684\u6570\u636e\u5e93\u5e94\u7528\u7cfb\u7edf \u72ed\u4e49\uff1a\u6570\u636e\u5e93\u672c\u8eab\u7684\u8bbe\u8ba1\uff0c\u5373\u8bbe\u8ba1\u6570\u636e\u5e93\u7684\u5404\u7ea7\u6a21\u5f0f\u5e76\u5efa\u7acb\u6570\u636e\u5e93 \u6570\u636e\u5e93\u8bbe\u8ba1\u7684 6 \u4e2a\u9636\u6bb5\uff1a \u9700\u6c42\u5206\u6790\u9636\u6bb5\uff1a\u6570\u636e\u6d41\u56fe\uff0c\u6570\u636e\u5b57\u5178 \u6982\u5ff5\u7ed3\u6784\u8bbe\u8ba1\u9636\u6bb5\uff1a\u6982\u5ff5\u6570\u636e\u6a21\u578b ER \u56fe \u903b\u8f91\u7ed3\u6784\u8bbe\u8ba1\u9636\u6bb5 \u7269\u7406\u7ed3\u6784\u8bbe\u8ba1\u9636\u6bb5 \u6570\u636e\u5e93\u5b9e\u65bd\u9636\u6bb5 \u6570\u636e\u5e93\u8fd0\u884c\u4e0e\u7ef4\u62a4\u9636\u6bb5","title":"\u7b2c\u56db\u7ae0 \u6570\u636e\u5e93\u8bbe\u8ba1"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_42","text":"\u81ea\u9876\u5411\u4e0b\uff0c\u81ea\u5e95\u5411\u4e0a\uff0cER\u8bbe\u8ba1\u65b9\u6cd5\uff0cEER\u8bbe\u8ba1\u65b9\u6cd5 \u7531\u5c40\u90e8\u89c6\u56fe\u5230\u5168\u5c40\u6982\u5ff5\u7ed3\u6784\uff1a\u4e00\u6b21\u96c6\u6210\uff0c\u591a\u6b21\u96c6\u6210 \u96c6\u6210\u5305\u62ec\uff1a\u5408\u5e76\uff0c\u6d88\u9664\u5197\u4f59 \u5408\u5e76\u7684\u4e09\u79cd\u7c7b\u578b\u7684\u51b2\u7a81\uff1a\u547d\u540d\u51b2\u7a81\uff0c\u5c5e\u6027\u51b2\u7a81\uff0c\u6982\u5ff5\u51b2\u7a81","title":"\u6982\u5ff5\u7ed3\u6784\u8bbe\u8ba1"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_43","text":"\u6b65\u9aa4\uff1a \u5c06\u6982\u5ff5\u6a21\u578b\u8f6c\u5316\u4e3a\u4e00\u822c\u7684\u5173\u7cfb\uff0c\u7f51\u72b6\uff0c\u5c42\u6b21\u6a21\u578b \u5bf9\u6570\u636e\u6a21\u578b\u8fdb\u884c\u4f18\u5316 \u8bbe\u8ba1\u7528\u6237\u5916\u6a21\u5f0f \u4e8c\u5143\u5173\u7cfb\uff1a1\u5bf91\uff0c1\u5bf9\u591a\uff0c\u591a\u5bf9\u591a","title":"\u903b\u8f91\u7ed3\u6784\u8bbe\u8ba1"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_44","text":"","title":"\u7b2c\u4e94\u7ae0 \u5173\u7cfb\u89c4\u8303\u5316\u7406\u8bba"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_45","text":"\u6570\u636e\u5197\u4f59\uff1a\u540c\u4e00\u6570\u636e\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u6570\u636e\u6587\u4ef6\u4e2d\u91cd\u590d\u50a8\u5b58 \u6570\u636e\u5197\u4f59\u4f1a\u5bfc\u81f4\u7684\u64cd\u4f5c\u5f02\u5e38\uff1a\u63d2\u5165\u5f02\u5e38\uff0c\u5220\u9664\u5f02\u5e38\uff0c\u4fee\u6539\u5f02\u5e38","title":"\u6570\u636e\u5197\u4f59\u548c\u64cd\u4f5c\u5f02\u5e38"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_46","text":"\u5206\u7c7b\uff1a \u5e73\u51e1\u51fd\u6570\u4f9d\u8d56\u548c\u975e\u5e73\u51e1\u51fd\u6570\u4f9d\u8d56 \u90e8\u5206\u51fd\u6570\u4f9d\u8d56\u4e0e\u5b8c\u5168\u51fd\u6570\u4f9d\u8d56 \u4f20\u9012\u51fd\u6570\u4f9d\u8d56 \u591a\u503c\u4f9d\u8d56\uff0c\u5e73\u51e1\u591a\u503c\u4f9d\u8d56","title":"\u51fd\u6570\u4f9d\u8d56"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_47","text":"\u7b2c\u4e00\u8303\u5f0f\uff1a\u6bcf\u4e2a\u5173\u7cfb\u6a21\u5f0f\u5fc5\u5b9a\u5c5e\u4e8e1NF \u7b2c\u4e8c\u8303\u5f0f\uff1a\u6ca1\u6709\u90e8\u5206\u51fd\u6570\u4f9d\u8d56\uff0c\u5c5e\u4e8e2NF \u7b2c\u4e09\u8303\u5f0f\uff1a\u4e0d\u5b58\u5728\u4f20\u9012\u51fd\u6570\u4f9d\u8d56\uff0c\u5c5e\u4e8e3NF BC\u8303\u5f0f\uff1a\u6bcf\u4e2a\u51b3\u5b9a\u56e0\u7d20\u90fd\u542b\u6709\u5019\u9009\u7801 \u7b2c\u56db\u8303\u5f0f\uff1a\u6240\u6709\u7684\u975e\u5e73\u51e1\u591a\u503c\u4f9d\u8d56\u7684\u51b3\u5b9a\u56e0\u7d20\u90fd\u542b\u6709\u7801","title":"\u8303\u5f0f"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_48","text":"","title":"\u6570\u636e\u4f9d\u8d56\u516c\u7406\u7cfb\u7edf"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_49","text":"\u8bbe\u53c8\u6ee1\u8db3\u51fd\u6570\u4f9d\u8d56\u96c6 F \u7684\u5173\u7cfb\u6a21\u5f0f \\(R<U, F>\\) \uff0c\u5bf9\u4e8e R \u7684\u4efb\u4e00\u5173\u7cfb r\uff0c\u82e5\u4e00\u4e2a\u5173\u7cfb\u4e2d\u51fd\u6570\u4f9d\u8d56 \\(X\\rightarrow Y\\) \u90fd\u6210\u7acb\uff0c\u5219\u79f0\u903b\u8f91\u8574\u542b \\(X\\rightarrow Y\\) \uff0c\u8bb0\u4e3a \\(F\\Rightarrow X\\rightarrow Y\\)","title":"\u903b\u8f91\u8574\u542b"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#armstrong","text":"\u7528\u9014\uff1a\u6c42\u7ed9\u5b9a\u5173\u7cfb\u6a21\u5f0f\u7684\u7801\uff0c\u4ece\u4e00\u7ec4\u51fd\u6570\u4f9d\u8d56\u6c42\u5f97\u8574\u542b\u7684\u51fd\u6570\u4f9d\u8d56 \u5bf9\u4e8e\u5173\u7cfb\u6a21\u5f0f \\(R<U,F>\\) \uff0c\u6709\u4e00\u4e0b\u5b9a\u5f8b \u81ea\u53cd\u5f8b\uff1a\u82e5 \\(Y\\subseteq X \\subseteq U\\) \uff0c\u5219 \\(F\\Rightarrow X\\rightarrow Y\\) \u589e\u5e7f\u5f8b\uff1a\u82e5 \\(F\\Rightarrow X\\rightarrow Y\\) \uff0c\u4e14 \\(Z\\subseteq U\\) \uff0c\u5219 \\(F\\Rightarrow ZX\\rightarrow ZY\\) \u4f20\u9012\u5f8b\uff1a\u82e5 \\(F\\Rightarrow X\\rightarrow Y\\) \u53ca \\(F\\Rightarrow Y\\rightarrow Z\\) \uff0c\u5219 \\(F\\Rightarrow X\\rightarrow Z\\) \u63a8\u7406\u53ef\u5f97\u4ee5\u4e0b\u89c4\u5219 \u5408\u5e76\u89c4\u5219\uff1a\u82e5 \\(X\\rightarrow Y,X\\rightarrow Z\\) \uff0c\u5219 \\(X\\rightarrow YZ\\) \u4f2a\u4f20\u9012\u89c4\u5219\uff1a\u82e5 \\(X\\rightarrow Y,WY\\rightarrow Z\\) \uff0c\u5219\u6709 \\(WX\\rightarrow Z\\) \u5206\u89e3\u89c4\u5219\uff1a\u82e5 \\(X\\rightarrow Y\\) \uff0c\u4e14 \\(Z\\subseteq Y\\) \uff0c\u5219\u6709 \\(X\\rightarrow Z\\)","title":"Armstrong \u516c\u7406\u7cfb\u7edf"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_50","text":"\\(X^+_F\\) \u79f0\u4e3a\u5c5e\u6027\u96c6 \\(X\\) \u5173\u4e8e\u51fd\u6570\u4f9d\u8d56\u96c6 \\(F\\) \u7684\u95ed\u5305 \u6c42 \\(X^+_F\\) \u7684\u65b9\u6cd5\uff1a\u5728\u51fd\u6570\u4f9d\u8d56 \\(F\\) \u627e\u5de6\u4fa7\u662f X \u7684\u5b50\u96c6\u7684\u4f9d\u8d56\u5e76\u4e0d\u65ad\u6269\u5927 \\(X\\) \u8fd9\u4e2a\u96c6\u5408\uff0c\u76f4\u5230\u4e0d\u80fd\u6269\u5927\u4e3a\u6b62","title":"\u51fd\u6570\u4f9d\u8d56\u96c6\u7684\u95ed\u5305"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_51","text":"\u51fd\u6570\u4f9d\u8d56\u96c6\u7b49\u4ef7\uff1a\u5982\u679c \\(G^+=F^+\\) \uff0c\u5219\u79f0\u51fd\u6570\u4f9d\u8d56\u96c6 \\(G\\) \u548c \\(F\\) \u7b49\u4ef7 / \u4e92\u4e3a\u8986\u76d6 \u6700\u5c0f\u4f9d\u8d56\u96c6\uff1a\u5982\u679c\u51fd\u6570\u4f9d\u8d56\u96c6 \\(F\\) \u6ee1\u8db3 $F $ \u4e2d\u4efb\u4e00\u51fd\u6570\u4f9d\u8d56\u7684\u53f3\u90e8\u4ec5\u6709\u5355\u4e00\u5c5e\u6027 \\(F\\) \u4e2d\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u51fd\u6570\u4f9d\u8d56 \\(X\\rightarrow A\\) \uff0c\u4f7f\u5f97 \\(F\\) \u4e0e \\(F-\\{X\\rightarrow A\\}\\) \u7b49\u4ef7 \\(F\\) \u4e2d\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u51fd\u6570\u4f9d\u8d56 \\(X\\rightarrow A\\) \uff0c \\(X\\) \u6709\u771f\u5b50\u96c6 \\(Z\\) \u4f7f\u5f97 \\(F\\) \u4e0e \\(F-\\{X\\rightarrow A\\}\\cup \\{Z\\rightarrow A\\}\\) \u7b49\u4ef7 \u5219\u79f0 \\(F\\) \u662f\u6700\u5c0f\u4f9d\u8d56\u96c6 \u6216 \u6700\u5c0f\u8986\u76d6\uff0c\u8bb0\u4e3a \\(F_{min}\\) \uff0c\u5373\u8981\u6c42\u51fd\u6570\u4f9d\u8d56\u96c6\u662f\u6700\u5c0f\u7684 \u6c42\u51fd\u6570\u4f9d\u8d56\u96c6 \\(F\\) \u7684 \\(F_{min}\\) \u7684\u65b9\u6cd5 \u5148\u5c06\u51fd\u6570\u4f9d\u8d56\u53f3\u4fa7\u53f3\u4fa7\u662f\u591a\u5c5e\u6027\u7684\u5206\u89e3\u5f00\u591a\u4e2a\u51fd\u6570\u4f9d\u8d56 \u7136\u540e\u9010\u4e00\u68c0\u67e5\u6bcf\u4e00\u4e2a\u51fd\u6570\u4f9d\u8d56\uff0c\u68c0\u67e5\u8fd9\u4e2a\u51fd\u6570\u4f9d\u8d56\u662f\u5426\u53ef\u53bb \u6700\u540e\u9010\u4e00\u68c0\u67e5\u6bcf\u4e00\u4e2a\u51fd\u6570\u4f9d\u8d56\u7684\u5de6\u4fa7\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5c5e\u6027\uff0c\u68c0\u67e5\u5355\u4e2a\u5c5e\u6027\u662f\u5426\u53ef\u53bb \u5176\u4ed6\u8003\u70b9\uff1a\u8ba1\u7b97\u7801\u7684\u7b97\u6cd5","title":"\u6700\u5c0f\u4f9d\u8d56\u96c6"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_52","text":"","title":"\u6a21\u5f0f\u5206\u89e3"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_53","text":"\u638c\u63e1\u5224\u65ad\u6a21\u5f0f\u5206\u89e3\u65e0\u635f\u8fde\u63a5\u6027\u7684\u7b97\u6cd5\uff0c\u7565","title":"\u65e0\u635f\u8fde\u63a5\u6027"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_54","text":"\u7565","title":"\u51fd\u6570\u4f9d\u8d56\u4fdd\u6301"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_55","text":"","title":"\u7b2c\u516d\u7ae0 \u6570\u636e\u5e93\u5e94\u7528\u5f00\u53d1"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#t-sql","text":"","title":"T-SQL"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_56","text":"declare @< \u5c40\u90e8\u53d8\u91cf\u540d > < \u6570\u636e\u7c7b\u578b > [, @< \u5c40\u90e8\u53d8\u91cf\u540d > < \u6570\u636e\u7c7b\u578b > ...] # \u58f0\u660e set @< \u5c40\u90e8\u53d8\u91cf\u540d > = < \u8868\u8fbe\u5f0f > # \u8d4b\u503c select @< \u5c40\u90e8\u53d8\u91cf\u540d > = < \u8868\u8fbe\u5f0f > [, @< \u5c40\u90e8\u53d8\u91cf\u540d > = < \u8868\u8fbe\u5f0f > ] # select \u53ef\u4ee5\u4e00\u6b21\u8d4b\u503c\u591a\u4e2a\u53d8\u91cf set @< \u5c40\u90e8\u53d8\u91cf\u540d > = ( select \u67e5\u8be2 ) # \u67e5\u8be2\u7ed3\u679c\u8d4b\u503c print \u5b57\u7b26\u4e32 | \u5c40\u90e8\u53d8\u91cf | \u5168\u5c40\u53d8\u91cf | \u51fd\u6570 # \u8f93\u51fa","title":"\u53d8\u91cf"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_57","text":"begin...end begin # \u4e00\u4e2a begin ... end \u662f\u4e00\u4e2a\u8bed\u53e5\u5757 SQL\u8bed\u53e51 SQL\u8bed\u53e52 ... end if...else if < \u6761\u4ef6\u8868\u8fbe\u5f0f > { \u8bed\u53e5 1 | \u8bed\u53e5\u5757 1 } # \u91cc\u9762\u6709 begin ... end [ else { \u8bed\u53e5 2 | \u8bed\u53e5\u5757 2 } ] while while < \u903b\u8f91\u8868\u8fbe\u5f0f > { \u8bed\u53e5 1 | \u8bed\u53e5\u5757 1 } # \u91cc\u9762\u6709 begin ... end break / continue / return \u7565","title":"\u6d41\u7a0b\u63a7\u5236\u8bed\u53e5"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_58","text":"","title":"\u51fd\u6570"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_59","text":"\u7565","title":"\u5185\u7f6e\u51fd\u6570"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_60","text":"\u6807\u91cf\u51fd\u6570 create function [ < \u6240\u6709\u8005 > .] < \u51fd\u6570\u540d > ([ { @< \u53c2\u6570\u540d > [ as ] < \u53c2\u6570\u7c7b\u578b > [ =< \u9ed8\u8ba4\u503c > ] } [,....] ]) returns < \u8fd4\u56de\u53c2\u6570\u7c7b\u578b > [ as ] begin < \u51fd\u6570\u4f53 > return < \u8fd4\u56de\u503c\u8868\u8fbe\u5f0f > end \u6807\u91cf\u51fd\u6570\u7684\u8c03\u7528 select @< \u53d8\u91cf\u540d > = dbo . < \u51fd\u6570\u540d > ( \u5b9e\u53c2 1 ,..., \u5b9e\u53c2 n ) # \u65b9\u5f0f 1 select exec @< \u53d8\u91cf\u540d > = dbo . < \u51fd\u6570\u540d > \u5b9e\u53c2 1 ,..., \u5b9e\u53c2 n # \u65b9\u5f0f 2 exec \u5185\u5d4c\u8868\u503c\u51fd\u6570 create function [ < \u6240\u6709\u8005 > .] < \u51fd\u6570\u540d > ([ { @< \u53c2\u6570\u540d > [ as ] < \u53c2\u6570\u7c7b\u578b > [ =< \u9ed8\u8ba4\u503c > ] } [,....] ]) returns table [ as ] begin return ( < select > \u8bed\u53e5 ) end \u5185\u5d4c\u8868\u503c\u51fd\u6570\u7684\u8c03\u7528 # \u53ea\u80fd\u901a\u8fc7 select select * from < \u51fd\u6570\u540d > ( \u53c2\u6570\u8868 ) \u591a\u8bed\u53e5\u8868\u503c\u51fd\u6570 create function [ < \u6240\u6709\u8005 > .] < \u51fd\u6570\u540d > ([ { @< \u53c2\u6570\u540d > [ as ] < \u53c2\u6570\u7c7b\u578b > [ =< \u9ed8\u8ba4\u503c > ] } [,....] ]) returns @ reuturn_variable table < \u8868\u7684\u5b9a\u4e49 > [ as ] begin < \u51fd\u6570\u4f53 > return end \u591a\u8bed\u53e5\u8868\u503c\u51fd\u6570 # \u53ea\u80fd\u901a\u8fc7 select select * from < \u51fd\u6570\u540d > ( \u53c2\u6570\u8868 ) \u5220\u9664\u51fd\u6570 drop function { [ < \u6240\u6709\u8005 > .] < \u51fd\u6570\u540d > } [,... n ]","title":"\u7528\u6237\u81ea\u5b9a\u4e49\u51fd\u6570"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_61","text":"","title":"\u6e38\u6807"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_62","text":"\u9759\u6001\u6e38\u6807 \u53ea\u8bfb \u52a8\u6001\u6e38\u6807 \u80fd\u591f\u53cd\u6620\u5bf9\u7ed3\u679c\u96c6\u4e2d\u6240\u505a\u7684\u66f4\u6539 \u53ea\u8fdb\u6e38\u6807 \u53ea\u652f\u6301\u4ece\u5934\u5230\u5c3e\u63d0\u53d6\u6570\u636e \u952e\u96c6\u9a71\u52a8\u6e38\u6807 \u53ef\u4ee5\u4fee\u6539\u57fa\u672c\u8868\u4e2d\u975e\u5173\u952e\u5b57\u5217\u7684\u503c\uff0c\u4f46\u4e0d\u53ef\u4ee5\u63d2\u5165\u6570\u636e","title":"\u6e38\u6807\u7c7b\u578b"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_63","text":"declare < \u6e38\u6807\u540d > cursor [ local | global ] -- \u6e38\u6807\u4f5c\u7528\u57df [ forword_only | scroll ] -- \u6e38\u6807\u79fb\u52a8\u65b9\u5411 [ static | keyset | dynamic | fast_forward ] -- \u6e38\u6807\u7c7b\u578b [ read_only | scroll_locks | optimistic ] -- \u8bbf\u95ee\u5c5e\u6027 [ type_warning ] -- \u7c7b\u578b\u8f6c\u6362\u8b66\u544a for < select\u8bed\u53e5 > [ for update [ of < \u5217\u540d > [,... n ]] -- \u53ef\u4fee\u6539\u7684\u5217","title":"\u58f0\u660e\u6e38\u6807"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_64","text":"open { { [ global ] < \u6e38\u6807\u540d > } | @< \u6e38\u6807\u53d8\u91cf\u540d > } -- eg select '\u6e38\u6807 KH_cur \u6570\u636e\u884c\u6570' = @@ CURSOR_ROWS","title":"\u6253\u5f00\u6e38\u6807"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_65","text":"fetch [ [ next | prior | first | last | absolute { n |@ nvar } | relative { n |@ nvar } ] from ] { { [ global ] < \u6e38\u6807\u540d > } | @< \u6e38\u6807\u53d8\u91cf\u540d > } [ into @ variable_name [,... n ]]","title":"\u8bfb\u53d6\u6e38\u6807"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_66","text":"close { { [ global ] < \u6e38\u6807\u540d > } |@< \u6e38\u6807\u53d8\u91cf\u540d > }","title":"\u5173\u95ed\u6e38\u6807"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_67","text":"deallocate { { [ global ] < \u6e38\u6807\u540d > } |@< \u6e38\u6807\u53d8\u91cf\u540d > }","title":"\u91ca\u653e\u6e38\u6807"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_68","text":"\u7565","title":"\u6e38\u6807\u53d8\u91cf"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_69","text":"CURSOR_STATUS ( 'loacl' | 'global' | 'variable' , '\u6e38\u6807\u540d' | '\u6e38\u6807\u53d8\u91cf\u540d' ) -- eg set @ statusVar = CURSOR_STATUS ( 'local' , 'CUR' )","title":"\u6e38\u6807\u51fd\u6570"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_70","text":"\u5b58\u50a8\u8fc7\u7a0b\u7f16\u8bd1\u548c\u4f18\u5316\u540e\u5b58\u653e\u5728\u6570\u636e\u5e93\u670d\u52a1\u5668\u4e0a\uff0c\u6267\u884c\u4e00\u6b21\u540e\u5b58\u653e\u5728 \u9ad8\u7f13 \u4e2d \u4f18\u70b9\uff1a \u63d0\u9ad8\u7cfb\u7edf\u6027\u80fd \u4ee3\u7801\u590d\u7528\uff0c\u6267\u884c\u6548\u7387\u9ad8","title":"\u5b58\u50a8\u8fc7\u7a0b"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_71","text":"create proc [ edure ] < \u5b58\u50a8\u8fc7\u7a0b\u540d > [ { @< \u53c2\u6570 >< \u6570\u636e\u7c7b\u578b > } [ = default ][ output ]] [,... n1 ] as < SQL\u8bed\u53e5 > [... n2 ]","title":"\u5b58\u50a8\u8fc7\u7a0b\u7684\u5b9a\u4e49"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_72","text":"[ exec [ ute ]] < \u5b58\u50a8\u8fc7\u7a0b\u540d > [[ @< \u53c2\u6570\u540d >= ] { < \u503c >|@< \u53d8\u91cf > [ output ] | [ default ] } [,... n ]] -- deaflut \u8868\u793a\u7528\u9ed8\u8ba4\u503c","title":"\u5b58\u50a8\u8fc7\u7a0b\u7684\u6267\u884c"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_73","text":"if exists ( select name from sysobjects where name = 'eg' and type = 'P' ) drop procedure eg -- \u5220\u9664\u51fd\u6570\u7b49\u540c\u7406","title":"\u5220\u9664\u540c\u540d\u5b58\u50a8\u8fc7\u7a0b"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_74","text":"alter proc [ edure ] < \u5b58\u50a8\u8fc7\u7a0b\u540d > [ { @< \u53c2\u6570 >< \u6570\u636e\u7c7b\u578b > } [ = default ][ output ]] [,... n1 ] as < SQL\u8bed\u53e5 > [... n2 ]","title":"\u4fee\u6539\u5b58\u50a8\u8fc7\u7a0b"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_75","text":"drop proc [ edure ] { < \u5b58\u50a8\u8fc7\u7a0b\u540d > } [,... n ]","title":"\u5220\u9664\u5b58\u50a8\u8fc7\u7a0b"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_76","text":"","title":"\u89e6\u53d1\u5668"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_77","text":"\u89e6\u53d1\u7c7b\u578b\uff1ainsert / update / delete \u89e6\u53d1\u65b9\u5f0f\uff1aafter / instead of","title":"\u89e6\u53d1\u5668\u7684\u5206\u7c7b"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_78","text":"create trigger < \u89e6\u53d1\u5668\u540d > on { < \u57fa\u672c\u8868 >|< \u89c6\u56fe > } -- \u6307\u5b9a\u89e6\u53d1\u5668\u540d\u53ca\u64cd\u4f5c\u5bf9\u8c61 { for | after | instead of } { [ delete ][,][ insert ][,][ update ] } -- \u5b9a\u4e49\u89e6\u53d1\u5668\u7684\u7c7b\u578b\uff0c\u9ed8\u8ba4\u662f after as [ if update ( < \u5217\u540d > )[ { and | or } update ( < \u5217\u540d > )] [,... n ] ] < SQL\u8bed\u53e5 > [,... n ] -- \u53ef\u5305\u542b\u4e00\u6761\u6216\u591a\u6761SQL\u8bed\u53e5","title":"\u521b\u5efa\u89e6\u53d1\u5668"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_79","text":"alter table { enable | disable } < \u89e6\u53d1\u5668\u540d >","title":"\u89e6\u53d1\u5668\u7684\u7981\u6b62\u4e0e\u542f\u7528"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_80","text":"alter trigger < \u89e6\u53d1\u5668\u540d > on { < \u57fa\u672c\u8868 >|< \u89c6\u56fe > } -- \u6307\u5b9a\u89e6\u53d1\u5668\u540d\u53ca\u64cd\u4f5c\u5bf9\u8c61 { for | after | instead of } { [ delete ][,][ insert ][,][ update ] } -- \u5b9a\u4e49\u89e6\u53d1\u5668\u7684\u7c7b\u578b\uff0c\u9ed8\u8ba4\u662f after as [ if update ( < \u5217\u540d > )[ { and | or } update ( < \u5217\u540d > )] [,... n ] ] < SQL\u8bed\u53e5 > [,... n ] -- \u53ef\u5305\u542b\u4e00\u6761\u6216\u591a\u6761SQL\u8bed\u53e5","title":"\u4fee\u6539\u89e6\u53d1\u5668"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_81","text":"drop trigger { < \u89e6\u53d1\u5668\u540d > } [,... n ]","title":"\u5220\u9664\u89e6\u53d1\u5668"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_82","text":"","title":"\u6570\u636e\u5e93\u8bbf\u95ee\u63a5\u53e3"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#odbc","text":"\u7ec4\u6210\uff1aODBC\u6570\u636e\u5e93\u5e94\u7528\u7a0b\u5e8f\uff0c\u9a71\u52a8\u7a0b\u5e8f\u7ba1\u7406\u5668\uff0c\u9a71\u52a8\u7a0b\u5e8f\uff0c\u6570\u636e\u6e90 5\u9636\u6bb5\uff1a\u914d\u7f6e\u6570\u636e\u6e90\uff0c\u8fde\u63a5\u6570\u636e\u6e90\uff0c\u521d\u59cb\u5316\u5e94\u7528\u7a0b\u5e8f\uff0cSQL\u5904\u7406\uff0c\u5904\u7406\u7ed3\u675f \u4f18\u70b9\uff1a\u4ee5\u7edf\u4e00\u7684\u65b9\u5f0f\u5904\u7406\u6240\u6709\u6570\u636e\u5e93","title":"\u5f00\u653e\u6570\u636e\u5e93\u8fde\u63a5(ODBC)"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#jdbc","text":"\u7ec4\u6210\uff1aJava\u5e94\u7528\u7a0b\u5e8f\uff0cJDBC\u9a71\u52a8\u7a0b\u5e8f\u7ba1\u7406\u5668\uff0cJDBC\u9a71\u52a8\u7a0b\u5e8f\uff0c\u6570\u636e\u5e93","title":"JDBC"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#adonet","text":"","title":"ADO.NET"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_83","text":"\u4f53\u7cfb\u7ed3\u6784\uff1a\u5355\u7528\u6237\u6a21\u5f0f\uff0c\u4e3b\u4ece\u5f0f\u591a\u7528\u6237\u6a21\u5f0f\uff0cC/S\u6a21\u5f0f\uff0cB/S\u6a21\u5f0f","title":"\u6570\u636e\u5e93\u5e94\u7528\u7cfb\u7edf\u4f53\u7cfb\u7ed3\u6784"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_84","text":"","title":"\u7b2c\u4e03\u7ae0 \u6570\u636e\u5e93\u4fdd\u62a4"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_85","text":"\u975e\u6cd5\u7528\u6237 \u975e\u6cd5\u6570\u636e \u5404\u79cd\u6545\u969c \u591a\u7528\u6237\u7684\u5e76\u53d1\u8bbf\u95ee","title":"\u5bf9\u6570\u636e\u5e93\u7684\u7834\u574f"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_86","text":"SQLServer \u2014\u2014 \u7528\u6237\u6743\u9650\u64cd\u4f5c - \u5f90\u6797\u4fca \u6570\u636e\u5e93\u7684\u5b89\u5168\u63a7\u5236 \u7528\u6237\u8bc6\u522b\u4e0e\u9274\u522b -- \u521b\u5efa\u767b\u5f55\u540d create login < \u767b\u5f55\u540d > with password = '<\u5bc6\u7801>' , default_database = < \u5173\u8054\u7684\u6570\u636e\u5e93 > -- \u521b\u5efa\u7528\u6237\u540d create user < \u7528\u6237\u540d > for login < \u767b\u5f55\u540d > # \u767b\u5f55\u540d\u4e0e\u7528\u6237\u540d\u5173\u8054 \u8bbf\u95ee\u63a7\u5236 -- \u6388\u6743 grant < \u6743\u9650 > [, < \u6743\u9650 > ...] # all privileges on < \u5bf9\u8c61\u7c7b\u578b > < \u5bf9\u8c61\u540d > [, < \u5bf9\u8c61\u7c7b\u578b > < \u5bf9\u8c61\u540d > ...] to < \u7528\u6237 > [, < \u7528\u6237 > ...] [ with grant option ] # \u5141\u8bb8\u8f6c\u6388 -- \u6536\u56de\u6743\u9650 revoke < \u6743\u9650 > [, < \u6743\u9650 > ...] on < \u5bf9\u8c61\u7c7b\u578b > < \u5bf9\u8c61\u540d > [, < \u5bf9\u8c61\u7c7b\u578b > < \u5bf9\u8c61\u540d > ...] from < \u7528\u6237 > [, < \u7528\u6237 > ...] [ cascade ] # cascade \u8868\u793a\u7ea7\u8054\u56de\u6536 \u89c6\u56fe\u673a\u5236 \u5b89\u5168\u5ba1\u8ba1\u673a\u5236 SQL Server\u7684\u5b89\u5168\u673a\u5236 \u8eab\u4efd\u9a8c\u8bc1\u6a21\u5f0f \u767b\u5f55\u548c\u7528\u6237 \u6743\u9650\u7ba1\u7406 \u89d2\u8272\u7ba1\u7406","title":"\u6570\u636e\u5e93\u5b89\u5168"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_87","text":"\u51c6\u786e\u6027\uff0c\u6709\u6548\u6027\uff0c\u76f8\u5bb9\u6027","title":"\u6570\u636e\u5e93\u5b8c\u6574\u6027"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_88","text":"\u5b9e\u4f53\u5b8c\u6574\u6027 \u53c2\u7167\u5b8c\u6574\u6027 \u7528\u6237\u81ea\u5b9a\u4e49\u5b8c\u6574\u6027","title":"\u6570\u636e\u5e93\u5b8c\u6574\u6027\u63a7\u5236"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#sql-server","text":"","title":"SQL Server \u7684\u5b8c\u6574\u6027\u673a\u5236"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#constraint","text":"not null primary key check foreign key default unique check \u7ea6\u675f \u7ea6\u675f\u5b57\u6bb5\u6240\u5141\u8bb8\u7684\u8303\u56f4 [ constraint < \u7ea6\u675f\u540d > ] check ( < \u6761\u4ef6 > ) unique \u7ea6\u675f [ constraint < \u7ea6\u675f\u540d > ] unique","title":"\u7ea6\u675f Constraint"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#rule","text":"\u521b\u5efa\u89c4\u5219 create rule < \u89c4\u5219\u540d > as < \u6761\u4ef6\u8868\u8fbe\u5f0f > \u7ed1\u5b9a\u89c4\u5219 [ exec [ ute ]] sp_bindrule [ @ rulename = ] '<\u89c4\u5219\u540d>' ,[ @ objanme ] '<\u7ed1\u5b9a\u5bf9\u8c61\u540d>' \u89e3\u7ed1\u89c4\u5219 [ exec [ ute ]] sp_unbindrule [ @ objanme ] '<\u7ed1\u5b9a\u5bf9\u8c61\u540d>' \u5220\u9664\u89c4\u5219 drop rule < \u89c4\u5219\u540d > [,...]","title":"\u89c4\u5219 Rule"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#default","text":"\u7565","title":"\u9ed8\u8ba4 Default"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_89","text":"\u4e8b\u52a1\uff1a\u662f\u7528\u6237\u5b9a\u4e49\u7684\u4e00\u4e2a\u6570\u636e\u5e93\u64cd\u4f5c\u5e8f\u5217\uff0c\u8981\u4e48\u5168\u505a\uff0c\u8981\u4e48\u90fd\u4e0d\u505a\uff0c\u662f\u4e00\u4e2a\u4e0d\u53ef\u5206\u5272\u7684\u5de5\u4f5c\u5355\u4f4d\uff0c\u662fDBMS\u7684\u57fa\u672c\u5355\u4f4d","title":"\u5e76\u53d1\u63a7\u5236"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#acid","text":"\u539f\u5b50\u6027 \u4e00\u81f4\u6027 \u9694\u79bb\u6027 \u6301\u4e45\u6027","title":"\u4e8b\u52a1\u7684 ACID \u6027\u8d28"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_90","text":"4 \u4e2a\u72b6\u6001 \u4e8b\u52a1\u5f00\u59cb \u4e8b\u52a1\u8bfb / \u5199 \u4e8b\u52a1\u63d0\u4ea4 (COMMIT) \u4e8b\u52a1\u56de\u6eda (ROLLBACK)","title":"\u4e8b\u52a1\u7684\u6d3b\u52a8\u8fc7\u7a0b"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_91","text":"\u4e22\u5931\u66f4\u65b0 \u8bfb \u201c\u810f\u201d \u6570\u636e \u4e0d\u53ef\u91cd\u590d\u8bfb","title":"\u4e8b\u52a1\u7684\u5e76\u53d1\u6267\u884c"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_92","text":"\u4e8b\u52a1\u7684\u5e76\u53d1\u8c03\u5ea6\u662f\u6b63\u786e\u7684\u5f53\u4e14\u4ec5\u5f53\u5176\u7ed3\u679c\u4e0e\u4e32\u884c\u8c03\u5ea6\u6267\u884c\u7684\u7ed3\u679c\u76f8\u540c\uff0c\u53ef\u4e32\u884c\u5316\u662f\u5e76\u53d1\u63a7\u5236\u7684\u6b63\u786e\u6027\u7684\u51c6\u5219","title":"\u5e76\u53d1\u8c03\u5ea6\u7684\u53ef\u4e32\u884c\u6027"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_93","text":"\u5c01\u9501\u7c7b\u578b\uff1a \u6392\u4ed6\u9501\uff1a\u5199\u9501\u6216 X \u9501\uff0c\u81ea\u5df1\u53ef\u8bfb\u53ef\u5199\uff0c\u5176\u4ed6\u4e8b\u52a1\u65e0\u6cd5\u5bf9\u6570\u636e\u8fdb\u884c\u52a0\u9501\u6216\u64cd\u4f5c \u5171\u4eab\u9501\uff1a\u8bfb\u9501\u6216 S \u9501\uff0c\u81ea\u5df1\u53ea\u53ef\u8bfb\uff0c\u5176\u4ed6\u4e8b\u52a1\u53ea\u80fd\u52a0 S \u9501 \u5c01\u9501\u534f\u8bae\uff1a \u4e00\u7ea7\u5c01\u9501\u534f\u8bae\uff1a\u5bf9\u6570\u636e\u8fdb\u884c\u5199\u64cd\u4f5c\u65f6\u5fc5\u987b\u52a0X\u9501\uff0c\u4e8b\u52a1\u7ed3\u675f\u91ca\u653e\uff0c\u89e3\u51b3\u2018\u4e22\u5931\u66f4\u65b0\u2019 \u4e8c\u7ea7\u5c01\u9501\u534f\u8bae\uff1a\u4e00\u7ea7\u5c01\u9501\u534f\u8bae\u518d\u52a0\u4e0a\u5728\u8bfb\u6570\u636e\u524d\u52a0\u4e0a S \u9501\uff0c\u8bfb\u5b8c\u5373\u91ca\u653e\uff0c\u8fdb\u4e00\u6b65\u89e3\u51b3\u2018\u8bfb\u810f\u6570\u636e\u2019 \u4e09\u7ea7\u5c01\u9501\u534f\u8bae\uff1a\u4e00\u7ea7\u5c01\u9501\u534f\u8bae\u518d\u52a0\u4e0a\u5728\u8bfb\u6570\u636e\u524d\u52a0\u4e0a S \u9501\uff0c\u4e8b\u52a1\u7ed3\u675f\u91ca\u653e\uff0c\u8fdb\u4e00\u6b65\u89e3\u51b3\u2018\u4e0d\u53ef\u91cd\u590d\u5ea6\u2019 \u4e24\u6bb5\u9501\u534f\u8bae\uff1a\u6240\u6709\u4e8b\u52a1\u5fc5\u987b\u5206\u4e24\u4e2a\u9636\u6bb5\u5bf9\u6570\u636e\u52a0\u9501\u548c\u89e3\u9501\uff0c\u5373\u540c\u610f\u4e0a\u9501\uff0c\u7136\u540e\u518d\u7edf\u4e00\u89e3\u9501 \u6d3b\u9501 & \u6b7b\u9501\uff1a \u6d3b\u9501\uff1a\u5728\u5c01\u9501\u8fc7\u7a0b\u4e2d\u67d0\u4e2a\u4e8b\u52a1\u6c38\u8fdc\u5904\u4e8e\u7b49\u5f85\u7684\u72b6\u6001\u800c\u5f97\u4e0d\u5230\u5c01\u9501\u673a\u4f1a \u89e3\u51b3\u65b9\u6cd5\uff1a\u5148\u6765\u5148\u670d\u52a1 \u6b7b\u9501\uff1a\u82e5\u5e72\u4e8b\u52a1\u90fd\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\uff0c\u76f8\u4e92\u7b49\u5f85\u5bf9\u65b9\u91ca\u653e\u9501 \u89e3\u51b3\u65b9\u6cd5\uff1a\u9884\u9632\u6cd5\uff1a\u987a\u5e8f\u7533\u8bf7\u6cd5\uff0c\u4e00\u6b21\u7533\u8bf7\u6cd5 \u200b \u89e3\u9664\u6cd5\uff1a\u5b9a\u65f6\u6cd5\uff0c\u6b7b\u9501\u68c0\u6d4b\u6cd5","title":"\u5c01\u9501"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_94","text":"","title":"\u6570\u636e\u5e93\u6062\u590d"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_95","text":"\u7cfb\u7edf\u6545\u969c \u4e8b\u52a1\u6545\u969c \u4ecb\u8d28\u6545\u969c \u8ba1\u7b97\u673a\u75c5\u6bd2 \u8bef\u64cd\u4f5c \u81ea\u7136\u707e\u5bb3 \u76d7\u7a83","title":"\u6545\u969c\u79cd\u7c7b"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_96","text":"\u628a\u6570\u636e\u5e93\u4ece\u9519\u8bef\u72b6\u6001\u6062\u590d\u5230\u67d0\u4e2a\u6b63\u786e\u7684\u72b6\u6001 \u6570\u636e\u5e93\u6062\u590d\u673a\u5236\u7684\u4e24\u4e2a\u65b9\u9762\uff1a\u4e00\u662f\u5efa\u7acb\u5197\u4f59\u6570\u636e\uff0c\u4e8c\u662f\u7cfb\u7edf\u51fa\u73b0\u6545\u969c\u540e\u5229\u7528\u5197\u4f59\u6570\u636e\u5c06\u6570\u636e\u5e93\u6062\u590d\u5230\u67d0\u4e2a\u6b63\u5e38\u7684\u72b6\u6001 \u5907\u4efd\uff1a\u6570\u636e\u8f6c\u5b58\uff0c\u767b\u5f55\u65e5\u5fd7\u6587\u4ef6","title":"\u6570\u636e\u5e93\u6062\u590d\u6280\u672f"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_97","text":"\u6570\u636e\u5e93\u57fa\u7840\u6559\u7a0b\uff08\u7b2c\u4e09\u7248\uff09 \u987e\u97f5\u534e \u7535\u5b50\u5de5\u4e1a\u51fa\u7248\u793e","title":"\u53c2\u8003"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","text":"\u6570\u636e\u7ed3\u6784 \u00b6 \u7b97\u6cd5\u53ef\u89c6\u5316 \u5177\u4f53\u5b9e\u73b0\u65b9\u5f0f\u53ef\u80fd\u6709\u51fa\u5165 \u738b\u9053\u8ba1\u7b97\u673a\u8003\u7814 \u6570\u636e\u7ed3\u6784_\u54d4\u54e9\u54d4\u54e9_bilibili 1 \u7eea\u8bba \u00b6 1.1 \u6570\u636e\u7ed3\u6784\u57fa\u672c\u6982\u5ff5 \u00b6 \u6570\u636e\u7ed3\u6784\u4e09\u8981\u7d20\uff1a \u903b\u8f91\u7ed3\u6784 \u7269\u7406\u7ed3\u6784 \u6570\u636e\u7684\u8fd0\u7b97 \u6570\u636e\u903b\u8f91\u7ed3\u6784\uff1a \u96c6\u5408 \u7ebf\u6027 \u6811\u5f62 \u56fe \u6570\u636e\u5b58\u50a8\u7ed3\u6784\uff1a \u987a\u5e8f\u5b58\u50a8 \u94fe\u5f0f\u5b58\u50a8 \u7d22\u5f15\u5b58\u50a8 \u6563\u5217\u5b58\u50a8\uff08\u54c8\u5e0c\u5b58\u50a8\uff09 1.2 \u7b97\u6cd5\u7684\u57fa\u672c\u6982\u5ff5 \u00b6 \u7b97\u6cd5\u4e94\u4e2a\u7279\u6027\uff1a \u6709\u7a77\u6027 \u786e\u5b9a\u6027 \u53ef\u884c\u6027 \u8f93\u5165 \u8f93\u51fa \u597d\u7b97\u6cd5\u7684\u7279\u8d28\uff1a \u6b63\u786e\u6027 \u53ef\u8bfb\u6027 \u5065\u58ee\u6027 \u9ad8\u6548\u7387\u548c\u4f4e\u5b58\u50a8 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u5e38\u5bf9\u5e42\u6307\u9636 \\(O(n^3)<O(2^n)<O(n!)<O(n^n)\\) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u7a7a\u95f4\u590d\u6742\u5ea6\u662f\u6307\u7b97\u6cd5\u9700\u8981\u7684\u8f85\u52a9\u7a7a\u95f4\u7684\u590d\u6742\u5ea6 \u9012\u5f52\u65f6\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c \\(O(mn)\\) \uff0c \\(O(m)\\) \u662f\u6bcf\u6b21\u9012\u5f52\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c \\(O(n)\\) \u662f\u9012\u5f52\u6df1\u5ea6\u590d\u6742\u5ea6 2 \u7ebf\u6027\u8868 \u00b6 2.1 \u7ebf\u6027\u8868\u7684\u57fa\u672c\u6982\u5ff5\u548c\u57fa\u672c\u64cd\u4f5c \u00b6 \u7ebf\u6027\u8868\u7684\u57fa\u672c\u64cd\u4f5c\uff1a\u521b\u9500\uff0c\u589e\u5220\u6539\u67e5 2.2 \u987a\u5e8f\u8868 \u00b6 \u987a\u5e8f\u5b58\u50a8\u7684\u7ebf\u6027\u8868 \u5b9e\u73b0\u65b9\u5f0f\uff1a\u9759\u6001\u5206\u914d\uff0c\u52a8\u6001\u5206\u914d 2.3 \u94fe\u8868 \u00b6 \u5355\u94fe\u8868\uff1a\u5e26\u5934\u7ed3\u70b9\u548c\u4e0d\u5e26\u5934\u7ed3\u70b9 \u4e0d\u5e26\u5934\u7ed3\u70b9\u65f6\uff0c\u5bf9\u7b2c\u4e00\u4f4d\u7ed3\u70b9\u64cd\u4f5c\u6709\u65f6\u8981\u7279\u6b8a\u5904\u7406 \u6307\u5b9a\u7ed3\u70b9\u7684\u524d\u63d2\u64cd\u4f5c\uff08\u7ed9\u4e00\u4e2a\u7ed3\u70b9\u548c\u8981\u63d2\u5165\u7684\u6570\u636e\uff09\uff0c\u53ef\u4ee5\u5728\u7ed3\u70b9\u540e\u9762\u63d2\u5165\u7136\u540e\u4ea4\u6362\u4e24\u8005\u7684\u6570\u636e \u6307\u5b9a\u7ed3\u70b9\u7684\u5220\u9664\u64cd\u4f5c\uff0c\u5f97\u5230\u540e\u7ee7\u7ed3\u70b9\u7684\u6570\u636e\u5e76\u5220\u9664\u540e\u7ee7\u7ed3\u70b9 \u5934\u63d2\u53ef\u4ee5\u7528\u4e8e\u94fe\u8868\u7684\u9006\u7f6e \u53cc\u94fe\u8868 \u5faa\u73af\u94fe\u8868 \u5faa\u73af\u5355\u94fe\u8868 \u5faa\u73af\u53cc\u94fe\u8868 \u9759\u6001\u94fe\u8868 3 \u6808\u548c\u961f\u5217 \u00b6 3.1 \u6808 \u00b6 LIFO \u6808\u7684\u5b9e\u73b0\uff1a \u987a\u5e8f\u5b9e\u73b0 \u521d\u59cb\u5316 top = -1 \u521d\u59cb\u5316 top = 0 \u5171\u4eab\u6808 \u94fe\u5f0f\u5b9e\u73b0\uff0c\u7528\u5355\u94fe\u8868\u5b9e\u73b0\uff0c\u5934\u63d2\uff0c\u5934\u5220 \u5361\u7279\u5170\u6570\uff1a $$ \\frac{1}{n+1}C^n_{2n} $$ 3.2 \u961f\u5217 \u00b6 FIFO \u961f\u5217\u7684\u5b9e\u73b0: \u987a\u5e8f\u5b9e\u73b0 \u8bbe\u7f6e\u961f\u9996\u548c\u961f\u5c3e\u6307\u9488\uff0c\u961f\u5c3e\u6307\u5411\u961f\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a \u5224\u65ad\u4e3a\u7a7a\uff0c rear == front \u5224\u65ad\u961f\u5217\u7a7a\u6216\u6ee1 (rear + 1) % size == front\uff08\u5faa\u73af\u961f\u5217\uff09\uff0c\u7559\u4e00\u4e2a\u4f4d\u7f6e\u7684\u539f\u56e0\u662f\u4e3a\u4e86\u4e0d\u548c\u5224\u65ad\u4e3a\u7a7a\u51b2\u7a81 \u5b9a\u4e49\u961f\u5217\u957f\u5ea6\u7684\u53d8\u91cf\uff0c\u5b9a\u4e49\u7684\u8bdd\u961f\u5217\u53ef\u4ee5\u591a\u4e00\u4e2a\u7a7a\u95f4\uff0c\u4e14\u4e00\u4e2a int \u5360\u7528\u7684\u7a7a\u95f4\u5f88\u53ef\u80fd\u6bd4\u5b58\u50a8\u7684\u961f\u5217\u5143\u7d20\u5c0f \u5b9a\u4e49 tag \u8868\u793a\u4e0a\u4e00\u6b21\u64cd\u4f5c\u662f\u63d2\u5165\u8fd8\u662f\u5220\u9664\uff0c0 \u8868\u793a\u5220\u9664\uff0c1 \u8868\u793a\u63d2\u5165\uff1btag \u521d\u59cb\u5316\u4e3a 0\uff08\u53ea\u6709\u63d2\u5165\u624d\u53ef\u80fd\u5bfc\u81f4\u961f\u7a7a\uff09 \u961f\u5217\u5143\u7d20\u4e2a\u6570 \uff1a(rear + size - front) % size \u94fe\u5f0f\u5b9e\u73b0 \u5b9a\u4e49\u5934\u6307\u9488\u548c\u5c3e\u6307\u9488 \u5c3e\u63d2\u9996\u5220 \u53cc\u7aef\u961f\u5217\uff1a \u961f\u9996\u548c\u961f\u5c3e\u90fd\u53ef\u4ee5\u63d2\u5165\u548c\u5220\u9664 \u8f93\u5165\u53d7\u9650\u7684\u53cc\u7aef\u961f\u5217\uff1a\u4e00\u7aef\u63d2\u5165\uff0c\u53cc\u7aef\u8f93\u51fa \u8f93\u51fa\u53d7\u9650\u7684\u53cc\u7aef\u961f\u5217\uff0c\u4e00\u7aef\u8f93\u51fa\uff0c\u53cc\u7aef\u8f93\u51fa 3.3 \u6808\u548c\u961f\u5217\u7684\u5e94\u7528 \u00b6 \u6808\u7684\u5e94\u7528\uff1a \u62ec\u53f7\u5339\u914d \u8868\u8fbe\u5f0f\u6c42\u503c \u6ce2\u5170\u8868\u8fbe\u5f0f\uff08\u524d\u7f00\u8868\u8fbe\u5f0f\uff09\uff0c\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\uff08\u540e\u7f00\u8868\u8fbe\u5f0f\uff09\uff1b \u8ba1\u7b97\u540e\u7f00\u8868\u8fbe\u5f0f\u65f6\u6808\u4e2d\u5b58\u653e\u64cd\u4f5c\u6570\uff0c\u4ece\u5de6\u5f80\u53f3\u626b\u63cf\u540e\u7f00\u8868\u8fbe\u5f0f\uff1b \u8ba1\u7b97\u524d\u7f00\u8868\u8fbe\u5f0f\u65f6\u5b58\u653e\u64cd\u4f5c\u6570\uff0c\u4ece\u53f3\u5f80\u5de6\u626b\u63cf\u524d\u7f00\u8868\u8fbe\u5f0f\uff0c\u9700\u8981\u6ce8\u610f\u9664\u6cd5\u548c\u51cf\u6cd5\u65f6\u64cd\u4f5c\u6570\u8fd0\u7b97\u7684\u987a\u5e8f\u548c\u540e\u7f00\u8868\u8fbe\u5f0f\u4e0d\u4e00\u6837\uff1b \u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6362\u540e\u7f00\u8868\u8fbe\u5f0f\u65f6\u6808\u4e2d\u5b58\u653e\u8fd0\u7b97\u7b26\u548c\u62ec\u53f7\uff0c\u5f39\u51fa\u4f18\u5148\u7ea7\u5927\u4e8e\u6216\u7b49\u4e8e\u8981\u538b\u6808\u7684\u8fd0\u7b97\u7b26\uff0c\u9047\u5230\u53f3\u62ec\u53f7\u5c31\u90fd\u5f39\u51fa\u76f4\u5230\u9047\u5230\u5de6\u62ec\u53f7 \u4e2d\u7f00\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\uff1a\u4e2d\u7f00\u8f6c\u540e\u7f00\uff0c\u8ba1\u7b97\u540e\u7f00\uff1b\u8981\u7528\u5230 2 \u4e2a\u6808\u4e00\u8d77\u64cd\u4f5c \u9012\u5f52\uff0c\u51fd\u6570\u8c03\u7528\u65f6\u5728\u6808\u4e2d\u538b\u5165\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\u548c\u51fd\u6570\u4e2d\u9700\u8981\u7684\u53d8\u91cf \u961f\u5217\u7684\u5e94\u7528\uff1a \u6811\u7684\u5c42\u6b21\u904d\u5386 \u56fe\u7684bfs \u64cd\u4f5c\u7cfb\u7edf\u5206\u914d\u7cfb\u7edf\u8d44\u6e90\uff0cFCFS\uff0cfirst come first server 3.4 \u7279\u6b8a\u77e9\u9635\u538b\u7f29\u5b58\u50a8 \u00b6 \u4e8c\u7ef4\u6570\u7ec4\u7684\u884c\u4f18\u5148\u548c\u5217\u4f18\u5148 \u5bf9\u79f0\u77e9\u9635\uff1a\u53ea\u5b58\u50a8\u5bf9\u89d2\u7ebf\u548c\u4e0a\u6216\u4e0b\u4e09\u89d2\u533a\uff0c\u7136\u540e\u7528\u884c\u4f18\u5148\u6216\u8005\u5217\u4f18\u5148\u5b58\u50a8 \u4e09\u89d2\u77e9\u9635\uff1a\u548c\u5bf9\u79f0\u77e9\u9635\u7c7b\u4f3c\uff0c\u4e0a\u4e09\u89d2\u77e9\u9635\u591a\u5b58\u50a8\u4e00\u4e2a\u4e0b\u4e09\u89d2\u4e2d\u7684\u5e38\u6570\uff0c\u4e0b\u4e09\u89d2\u7c7b\u4f3c \u4e09\u5bf9\u89d2\u77e9\u9635\uff08\u5e26\u72b6\u77e9\u9635\uff09\uff1a\u53ea\u5b58\u50a8 \\(|i-j| <= 1\\) \u7684\u5143\u7d20\uff0c\u9664\u4e86\u7b2c\u4e00\u884c\u548c\u6700\u540e\u4e00\u884c\u6bcf\u884c\u90fd\u6709\u4e09\u4e2a\u5143\u7d20 \u7a00\u758f\u77e9\u9635\uff1a\u4e09\u5143\u7ec4\uff0c\u5341\u5b57\u94fe\u8868 4 \u4e32 \u00b6 4.1 \u4e32\u7684\u5b58\u50a8\u7ed3\u6784 \u00b6 \u987a\u5e8f\u5b58\u50a8 \u94fe\u5f0f\u5b58\u50a8 4.2 \u4e32\u7684\u6a21\u5f0f\u5339\u914d \u00b6 \u4e3b\u4e32\uff0c\u5b50\u4e32\uff0c\u6a21\u5f0f\u4e32 \u6734\u7d20\u7684\u5339\u914d\u7b97\u6cd5\u590d\u6742\u5ea6\uff1a \\(O(mn)\\) KMP\uff1a\u5b57\u7b26\u4e32\u4e0b\u6807\u4ece 0 \u5f00\u59cb // \u5b57\u7b26\u4e32\u4e0b\u6807\u4ece 0 \u5f00\u59cb // next void getNext ( char * p , int * next ) { next [ 0 ] = -1 ; int i = 0 , j = -1 ; while ( i < strlen ( p )) if ( j == -1 || p [ i ] == p [ j ]){ i ++ , j ++ ; next [ i ] = j ; } else j = next [ j ]; } // KMP // \u4e3b\u4f53\u5b57\u7b26\u4e32 \u5339\u914d\u5b57\u7b26\u4e32 int KMP ( char * s , char * p ){ int i = 0 ; int j = 0 ; while ( i < strlen ( s ) && j < strlen ( p )) if ( j == -1 || s [ i ] == p [ j ]) i ++ , j ++ ; else j = next [ j ]; // \u8fd4\u56de\u5b58\u5728\u4e0e p \u76f8\u540c\u7684\u5b57\u4e32\u7684\u4f4d\u7f6e if ( j == strlen ( p )) return i - j ; else return -1 ; } KMP \u4f18\u5316\uff1anextval \u6570\u7ec4 5 \u6811 \u00b6 \u8981\u6ce8\u610f\u4e0d\u8981\u628a\u6811\u7684\u6027\u8d28\uff0c\u4e8c\u53c9\u6811\u7684\u6027\u8d28\uff0c\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u6027\u8d28\u641e\u6df7\uff0c\u5f53\u7136\uff0c\u4e8c\u53c9\u6811\u4e5f\u6709\u6811\u7684\u6027\u8d28\uff0c\u5b8c\u5168\u4e8c\u53c9\u6811\u4e5f\u6709\u4e8c\u53c9\u6811\u7684\u6027\u8d28 5.1 \u6811\u7684\u57fa\u7840\u77e5\u8bc6\u548c\u6027\u8d28 \u00b6 \u57fa\u7840\u77e5\u8bc6\uff1a \u6811\u7684\u6982\u5ff5 \u7956\u5148\u8282\u70b9\uff0c\u5b50\u5b59\u7ed3\u70b9\uff0c\u7236\u8282\u70b9\uff0c\u5b69\u5b50\u7ed3\u70b9\uff0c\u5144\u5f1f\u7ed3\u70b9\uff0c\u5802\u5144\u5f1f\u7ed3\u70b9 \u8def\u5f84\uff08\u4ece\u4e0a\u5230\u4e0b,\u5144\u5f1f\u7ed3\u70b9\u4e4b\u95f4\u4e0d\u5b58\u5728\u8def\u5f84\uff09\uff0c\u8def\u5f84\u957f\u5ea6\uff0c\u6811\u7684\u8def\u5f84\u957f\u5ea6\uff08\u6839\u5230\u6240\u6709\u7ed3\u70b9\u8def\u5f84\u957f\u5ea6\u4e4b\u548c\uff09 \u7ed3\u70b9\u7684\u5c42\u6b21\uff08\u6df1\u5ea6\uff09\uff0c\u5ea6\uff0c\u6811\u7684\u9ad8\u5ea6\uff08\u6df1\u5ea6\uff09\uff0c\u6811\u7684\u5ea6\uff08\u5404\u7ed3\u70b9\u7684\u5ea6\u7684\u6700\u5927\u503c\uff09 \u6709\u5e8f\u6811\uff08\u4e0d\u53ef\u4ee5\u4ea4\u6362\uff09\uff0c\u65e0\u5e8f\u6811 \u68ee\u6797 \u6811\u7684\u6027\u8d28 \u7ed3\u70b9\u6570 = \u603b\u5ea6\u6570 + 1 \u5ea6\u4e3a m \u7684\u6811 \u548c m \u53c9\u6811\u7684\u533a\u522b\uff0cm \u53c9\u6811\u7684\u5ea6\u4e0d\u4e00\u5b9a\u4e3a m \u5ea6\u4e3a m \u7684\u6811\u7b2c i \u5c42\u81f3\u591a\u6709 \\(m^{i-1}\\) \u5404\u7ed3\u70b9 \u9ad8\u5ea6\u4e3a h \u7684 m \u53c9\u6811\u81f3\u591a\u6709 \\(\\frac{m^h-1}{m-1}\\) \u9ad8\u5ea6\u4e3a h \u7684 m \u53c9\u6811\u81f3\u5c11\u6709 h \u4e2a\u7ed3\u70b9\uff0c\u9ad8\u5ea6\u4e3a h\uff0c\u5ea6\u4e3a m \u7684\u6811\u81f3\u5c11\u6709 h+m-1 \u4e2a\u7ed3\u70b9 n \u4e2a\u7ed3\u70b9\u7684 m \u53c9\u6811\u7684\u6700\u5c0f\u9ad8\u5ea6 \\(ceil(\\ \\ log_m(n(m-1)+1)\\ \\ )\\) 5.2 \u4e8c\u53c9\u6811 \u00b6 \u4e8c\u53c9\u6811\u7279\u70b9\uff1a \u6bcf\u4e2a\u8282\u70b9\u81f3\u591a\u53ea\u6709\u4e24\u68f5\u5b50\u6811 \u4e8c\u53c9\u6811\u662f\u6709\u5e8f\u6811 \u7279\u6b8a\u7684\u4e8c\u53c9\u6811: \u6ee1\u4e8c\u53c9\u6811\uff0c\u4e0d\u5b58\u5728\u5ea6\u4e3a 1 \u7684\u7ed3\u70b9 \u5b8c\u5168\u4e8c\u53c9\u6811 \uff0c\u81f3\u591a\u53ea\u6709\u4e00\u4e2a\u5ea6\u4e3a 1 \u7684\u7ed3\u70b9\uff0c\u53ea\u6709\u4e00\u4e2a\u5b69\u5b50\u7684\u7ed3\u70b9\u4e00\u5b9a\u662f\u6709\u5de6\u5b69\u5b50 \u4e8c\u53c9\u6392\u5e8f\u6811 \u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u4e0d\u8981\u6c42\u662f\u4e8c\u53c9\u6392\u5e8f\u6811 \u4e8c\u53c9\u6811\u6027\u8d28\uff1a \u6811\u7684\u6027\u8d28 \\(n=n_0+n_1+n_2,n=2n_2+n_1+1\\) \u5f97\u5230 \\(n_0 = n_2 + 1\\) \u5b8c\u5168\u4e8c\u53c9\u6811\u6027\u8d28\uff1a \u9ad8\u5ea6 \\(h=ceil(\\ log_2(n+1)\\ ) \u6216 floor(\\ log_2n\\ )+1\\) \\(n_1=0\u62161\\) \\(n_0=n_2+1\\) \u5f97 \\(n_0+n_2\\) \u4e00\u5b9a\u662f\u5947\u6570 \u82e5\u5b8c\u5168\u4e8c\u53c9\u6811\u6709 2k \u4e2a\u7ed3\u70b9\uff0c\u5219 \\(n_1=1,n_0=k,n_2=k-1\\) \uff0c\u82e5\u5b8c\u5168\u4e8c\u53c9\u6811\u6709 2k-1 \u4e2a\u7ed3\u70b9\uff0c\u5219 \\(n_1=0,n_0=k,n_2=k-1\\) \u4e8c\u53c9\u6811\u7684\u5b58\u50a8\u7ed3\u6784 \u987a\u5e8f\u5b58\u50a8 \u94fe\u5f0f\u5b58\u50a8 n\u4e2a\u7ed3\u70b9\u6709 2n \u4e2a\u6307\u9488\uff0cn-1 \u4e2a\u6ca1\u6709\u6307\u5411 NULL\uff0c\u6240\u4ee5\u6709 n+1 \u4e2a\u6307\u5411 NULL \u4e8c\u53c9\u94fe\u8868\uff0c\u4e09\u53c9\u94fe\u8868\uff08\u5e26\u7236\u7ed3\u70b9\uff09 5.3 \u4e8c\u53c9\u6811\u7684\u904d\u5386 \u00b6 \u5c42\u6b21\u904d\u5386\uff1a\u961f\u5217 \u5148\u5e8f\u904d\u5386\uff1a\u524d\u7f00\u8868\u8fbe\u5f0f \u4e2d\u5e8f\u904d\u5386\u4e2d\uff1a\u4e2d\u7f00\u8868\u8fbe\u5f0f\uff08\u65e0\u62ec\u53f7\uff09 \u540e\u5e8f\u904d\u5386\uff1a\u540e\u7f00\u8868\u8fbe\u5f0f \u975e\u9012\u5f52\u7684\u4ee3\u7801\u5b9e\u73b0\u65b9\u5f0f\uff1a\u5229\u7528\u6808\uff1b\u540e\u7eed\u904d\u5386\u7684\u975e\u9012\u5f52\u6bd4\u8f83\u96be \u7531\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 \u524d\u5e8f+\u4e2d\u5e8f \u540e\u5e8f+\u4e2d\u5e8f \u5c42\u5e8f+\u4e2d\u5e8f 5.4 \u7ebf\u7d22\u4e8c\u53c9\u6811 \u00b6 \u4e8c\u53c9\u6811\u7684\u7ebf\u7d22\u5316\u548c\u7ebf\u7d22\u4e8c\u53c9\u6811\u7684\u904d\u5386\u7684\u4ee3\u7801 \u589e\u52a0 2 \u4e2a\u6807\u5fd7\u4f4d\u8868\u793a\u5de6\u53f3\u5b69\u5b50\u6307\u9488\u662f\u5426\u662f\u7ebf\u7d22\uff0c\u6ce8\u610f\u5728\u7ebf\u7d22\u4e8c\u53c9\u6811\u904d\u5386\u65f6\u904d\u5386\u5de6\u53f3\u5b50\u6811\u65f6\u8981\u5224\u65ad\u662f\u5426\u662f\u524d\u540e\u7ee7\uff08\u5982\u679c\u4e0d\u5224\u65ad\uff0c\u5728\u524d\u5e8f\u904d\u5386\u65f6\u4f1a\u7ed5\u5708\uff09 \u4e2d\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811 \u5148\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811 \u540e\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811 \u4e2d\u5e8f\u524d\u9a71\uff0c\u4e2d\u5e8f\u540e\u7ee7 \u524d\u5e8f\u524d\u9a71\uff0c\u524d\u5e8f\u540e\u7ee7 \u540e\u5e8f\u524d\u9a71\uff0c\u540e\u5e8f\u540e\u7ee7 \u4e8c\u53c9\u6811\u7684\u7ebf\u7d22\u5316\uff1a \u524d\u5e8f\u7ebf\u7d22\u5316\u65f6\u8981\u6ce8\u610f\u5224\u65ad tag\uff1b \u51fd\u6570\u4f53\u4e3b\u8981\u7531 2 \u4e2a\u7ebf\u7d22\u5316\u5de6\u53f3\u5b50\u6811\u7684\u9012\u5f52\u8c03\u7528\u7ec4\u6210\uff0c\u8fd8\u6709\u5229\u7528\u53c2\u6570\u7684 pre \u5efa\u7acb pre \u7684\u540e\u7ee7 \u548c \u5f53\u524d\u7ed3\u70b9\u7684\u524d\u9a71\uff1b\u4e0d\u540c\u7684\u904d\u5386\u65b9\u5f0f\u987a\u5e8f\u4e0d\u540c \u7ebf\u7d22\u4e8c\u53c9\u6811\u4e2d\u627e\u524d\u5e8f\u548c\u540e\u7ee7\uff1a \u4e2d\u5e8f \u5148\u5e8f\uff1a\u627e\u524d\u9a71\u7ed3\u70b9\u5982\u679c\u6ca1\u6709\u7236\u8282\u70b9\u627e\u4e0d\u5230\uff0c\u5982\u679c\u6709\u7236\u8282\u70b9\u9700\u8981\u5206\u56db\u79cd\u60c5\u51b5\uff08\u7b2c\u56db\u79cd\u6839\u7ed3\u70b9\uff09 \u540e\u5e8f\uff1a\u627e\u540e\u7ee7\u5e8f\u4e5f\u9700\u8981\u4e09\u53c9\u94fe\u8868\uff0c\u5206\u56db\u79cd\u60c5\u51b5\uff08\u7b2c\u56db\u79cd\u6839\u7ed3\u70b9\uff09 5.5 \u6811\u7684\u5b58\u50a8\u7ed3\u6784\u548c\u904d\u5386 \u00b6 \u5b58\u50a8\u7ed3\u6784\uff1a \u53cc\u4eb2\u8868\u793a\u6cd5\uff08\u987a\u5e8f\u5b58\u50a8\uff09\uff0c\u589e\u52a0\u7ed3\u70b9\uff0c\u5220\u9664\u7ed3\u70b9 \u5b69\u5b50\u8868\u793a\u6cd5\uff08\u987a\u5e8f+\u94fe\u5f0f\uff09 \u5b69\u5b50\u5144\u5f1f\u8868\u793a\u6cd5\uff08\u94fe\u5f0f\u5b58\u50a8\uff09\uff0c\u4e24\u4e2a\u6307\u9488\uff1a\u7b2c\u4e00\u4e2a\u5b69\u5b50\u548c\u53f3\u5144\u5f1f\u6307\u9488\uff08\u6811\u548c\u4e8c\u53c9\u6811\u7684\u8f6c\u6362\uff0c\u68ee\u6797\u548c\u4e8c\u53c9\u6811\u7684\u8f6c\u6362\uff09 \u6811\u7684\u904d\u5386\uff1a \u5148\u6839\u904d\u5386\uff08\u548c\u8f6c\u6362\u4e3a\u4e8c\u53c9\u6811\u540e\u7684\u5148\u5e8f\u904d\u5386\u4e00\u6837 \uff09 \u540e\u6839\u904d\u5386\uff08\u548c\u8f6c\u6362\u4e3a\u4e8c\u53c9\u6811\u540e\u7684\u4e2d\u5e8f\u904d\u5386\u4e00\u6837 \uff09 \u5c42\u6b21\u904d\u5386\uff08\u961f\u5217\uff0cbfs\uff09 \u68ee\u6797\u7684\u904d\u5386\uff1a \u5148\u5e8f\u904d\u5386\uff0c\u4f9d\u5e8f\u5bf9\u5b50\u6811\u8fdb\u884c\u5148\u5e8f\u904d\u5386\uff08\u548c\u8f6c\u6362\u4e3a\u4e8c\u53c9\u6811\u540e\u7684\u5148\u5e8f\u904d\u5386\u4e00\u6837 \uff09 \u4e2d\u5e8f\u904d\u5386\uff0c\u4f9d\u5e8f\u5bf9\u5b50\u6811\u8fdb\u884c\u540e\u6839\u904d\u5386\uff08\u548c\u8f6c\u6362\u4e3a\u4e8c\u53c9\u6811\u540e\u7684\u4e2d \u5e8f\u904d\u5386\u4e00\u6837 \uff09 5.6 \u4e8c\u53c9\u6392\u5e8f\u6811\uff0c\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u54c8\u592b\u66fc\u6811 \u00b6 \u4e8c\u53c9\u6392\u5e8f\u6811\uff08BST\uff09\uff1a \u6784\u9020\uff0c\u67e5\u627e\uff0c\u589e\u52a0 \u5220\u9664\uff1a\u8981\u5220\u9664\u7684\u7ed3\u70b9\u65f6\u53f6\u5b50\u8282\u70b9\uff0c\u53ea\u6709\u5de6\u5b50\u6811\uff0c\u53ea\u6709\u53f3\u5b50\u6811\uff0c\u5de6\u53f3\u5b50\u6811\u90fd\u6709\uff08\u628a\u53f3\u5b50\u6811\u6700\u5c0f\u7684\u6570\u6216\u8005\u5de6\u5b50\u6811\u6700\u5927\u7684\u6570\u642c\u4e0a\u6765\uff0c\u5373\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u76f4\u63a5\u524d\u9a71\u548c\u76f4\u63a5\u540e\u7ee7\uff09 \u5e73\u5747\u67e5\u627e\u957f\u5ea6\uff08ASL\uff09\uff0c\u67e5\u627e\u5931\u8d25\u7684ASL \u5e73\u8861\u4e8c\u53c9\u6811\uff08AVL\uff0c\u53d1\u660e\u4eba\u9996\u5b57\u6bcd\u7ec4\u6210 \u6216\u8005 BBT\uff09\uff1a\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u7279\u6b8a\u5f62\u5f0f\uff0c\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u4e0d\u8d85\u8fc7 1 \u5e73\u8861\u56e0\u5b50\uff0c\u7ed3\u70b9\u7684\u5e73\u8861\u56e0\u5b50=\u5de6\u5b50\u6811\u9ad8-\u53f3\u5b50\u6811\u9ad8\uff0cAVL \u4e2d\u6240\u6709\u7ed3\u70b9\u7684\u5e73\u8861\u56e0\u5b50\u53ea\u6709 -1\uff0c0\uff0c1 \u6700\u5c0f\u4e0d\u5e73\u8861\u5b50\u6811 \u8c03\u6574\u6700\u5c0f\u4e0d\u5e73\u8861\u5b50\u6811 LL\uff0c\u53f3\u65cb RR\uff0c\u5de6\u65cb LR\uff0c\u5148\u5de6\u65cb\uff0c\u518d\u53f3\u65cb RL\uff0c\u5148\u53f3\u65cb\uff0c\u518d\u5de6\u65cb \u67e5\u627e\u6548\u7387\u5206\u6790\uff1a \\(O(log_2n)\\) : \u5047\u8bbe \\(n_h\\) \u8868\u793a\u9ad8\u5ea6\u4e3a \\(h\\) \u7684\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u7684\u6700\u5c11\u7ed3\u70b9\u6570\uff0c\u6709 \\(n_0=0, n_1=1, n_2=2, n_h=n_{h-1}+n_{h-2}+1\\) \u54c8\u592b\u66fc\u6811\uff08\u662f\u4e8c\u53c9\u6811\uff09\uff1a \u7ed3\u70b9\u7684\u6743\uff0c\u7ed3\u70b9\u7684\u5e26\u6743\u8def\u5f84\u957f\u5ea6\uff1a\u6839\u5230\u7ed3\u70b9\u7684\u8def\u5f84\u957f\u5ea6 x \u7ed3\u70b9\u6743\u503c\uff0c\u6811\u7684\u5e26\u6743\u8def\u5f84\u957f\u5ea6\uff08WPL\uff09\uff1a\u6811\u4e2d\u6240\u6709\u53f6\u5b50\u7ed3\u70b9\u7684\u5e26\u6743\u8def\u5f84\u957f\u5ea6\u4e4b\u548c \u54c8\u592b\u66fc\u6811\uff1aWPL\u6700\u5c0f\u7684\u4e8c\u53c9\u6811\uff0c\u4e5f\u79f0\u6700\u4f18\u4e8c\u53c9\u6811 \u54c8\u592b\u66fc\u6811\u7684\u6784\u9020\uff1a\u5148\u9009 2 \u4e2a\u6743\u503c\u6700\u5c0f\u7684\u7ed3\u70b9\u52a0\u8d77\u6765\u53d8\u6210\u4e00\u4e2a\u65b0\u7684\u7ed3\u70b9 ..... \u54c8\u592b\u66fc\u6811\u7684\u603b\u7ed3\u70b9\u6811\u4e3a \\(2n-1\\) \uff0cn \u4e2a\u53f6\u5b50\u7ed3\u70b9\uff0c\u591a\u51fa\u6765 n-1 \u4e2a\u65b0\u7ed3\u70b9\uff1b\u54c8\u592b\u66fc\u6811\u4e0d\u5b58\u5728\u5ea6\u4e3a 1 \u7684\u7ed3\u70b9\uff1b\u54c8\u592b\u66fc\u6811\u5e76\u4e0d\u552f\u4e00\uff0c\u4f46 WPL \u4e00\u5b9a\u6700\u4f18 \u54c8\u592b\u66fc\u7f16\u7801\uff0c\u975e\u524d\u7f00\u7f16\u7801\u4f1a\u6709\u6b67\u4e49 5.7 \u7ea2\u9ed1\u6811 \u00b6 \u7ea2\u9ed1\u6811\u662f\u6ee1\u8db3\u4ee5\u4e0b\u7ea2\u9ed1\u6027\u8d28\u7684\u4e8c\u53c9\u6392\u5e8f\u6811\uff08\u4e0d\u662f\u4e8c\u53c9\u5e73\u8861\u6811\uff09\uff1a \u6bcf\u4e2a\u7ed3\u70b9\u662f\u7ea2\u8272\u6216\u8005\u9ed1\u8272\u7684 \u6839\u7ed3\u70b9\u662f\u9ed1\u8272\u7684 \u53f6\u7ed3\u70b9\uff08\u865a\u6784\u7ed3\u70b9\uff0cNULL\uff09\u90fd\u662f\u9ed1\u8272\u7684 \u4e0d\u5b58\u5728\u76f8\u90bb\u7684\u7ea2\u7ed3\u70b9 \u5bf9\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u4ece\u8be5\u7ed3\u70b9\u5230\u4efb\u4e00\u53f6\u7ed3\u70b9\u7684\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u9ed1\u7ed3\u70b9\u7684\u6570\u91cf\u76f8\u540c\uff08\u9ed1\u9ad8\uff09\uff1b\u6839\u7684\u9ed1\u9ad8\u662f\u7ea2\u9ed1\u6811\u7684\u9ed1\u9ad8 \u7ed3\u8bba1\uff1a \u4ece\u6839\u5230\u53f6\u7ed3\u70b9\u7684\u6700\u957f\u8def\u5f84\u4e0d\u5927\u4e8e\u6700\u77ed\u8def\u5f84\u76842\u500d \u4ece\u6839\u5230\u4efb\u4e00\u53f6\u7ed3\u70b9\u7684\u7b80\u5355\u8def\u5f84\u6700\u77ed\u65f6\uff0c\u8fd9\u6761\u8def\u5f84\u5fc5\u7136\u5168\u662f\u9ed1\u7ed3\u70b9 \u5f53\u67d0\u6761\u8def\u5f84\u6700\u957f\u65f6\uff0c\u8fd9\u6761\u8def\u5f84\u662f\u7531\u9ed1\u7ed3\u70b9\u548c\u7ea2\u7ed3\u70b9\u76f8\u95f4\u6784\u6210\u7684\uff0c\u7ea2\u7ed3\u70b9\u548c\u9ed1\u7ed3\u70b9\u7684\u6570\u91cf\u76f8\u540c \u7ed3\u8bba2\uff1a \u6709n\u4e2a\u5185\u90e8\u7ed3\u70b9\u7684\u7ea2\u9ed1\u6811\u7684\u9ad8\u5ea6 \\(h<=2log_2(n+1)\\) \uff1b\u8bc1\uff1a\u6839\u7684\u9ed1\u9ad8\u81f3\u5c11\u4e3a h/2\uff0c\u4e8e\u662f\u6709 \\(n>=2^{h/2}-1\\) \u5373\u53ef \u7efc\u4e0a\uff1a\u7ea2\u9ed1\u6811\u662f\u9002\u5ea6\u5e73\u8861\u7684\uff0c\u7531AVL\u7684\u9ad8\u5ea6\u5e73\u8861\u53d8\u6210\u4e86\u4efb\u4e00\u7ed3\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u4e0d\u76f8\u5dee2\u500d \u7ea2\u9ed1\u6811\u7684\u63d2\u5165\u7ed3\u70b9 \\(z\\) \uff1a \u7528\u4e8c\u53c9\u67e5\u627e\u6811\u63d2\u5165\u6cd5\u63d2\u5165\uff0c\u5e76\u628a \\(z\\) \u6d82\u6210\u7ea2\u8272\uff0c\u5982\u679c \\(z\\) \u7236\u7ed3\u70b9\u662f\u9ed1\u8272\u7684\uff0c\u65e0\u9700\u505a\u8c03\u6574 \u5982\u679c \\(z\\) \u662f\u6839\u7ed3\u70b9\uff0c\u6d82\u9ed1\u7136\u540e\u6811\u7684\u9ed1\u9ad8 \u52a0\u4e00 \u5982\u679c \\(z\\) \u4e0d\u662f\u6839\u7ed3\u70b9\uff0c\u5e76\u4e14 \\(z.p\\) \u662f\u7ea2\u8272\u7684\uff08 \\(z.p.p\\) \u662f\u9ed1\u8272\u7684\uff09\uff0c\u5206\u4e3a\u4ee5\u4e0b\u4e09\u79cd\u60c5\u51b5\uff1a \u60c5\u51b5\u4e00\uff1a \\(z\\) \u7684\u53d4\u7ed3\u70b9 \\(y\\) \u662f\u9ed1\u8272\u7684\uff0c\u4e14 \\(z\\) \u662f\u53f3\u5b69\u5b50\uff1b\u89e3\u51b3\u529e\u6cd5\uff1a\u5148\u5de6\u65cb\uff08\u53d8\u6210\u4e86\u60c5\u51b5\u4e8c\uff09\uff0c\u518d\u53f3\u65cb \u60c5\u51b5\u4e8c\uff1a \\(z\\) \u7684\u53d4\u7ed3\u70b9 \\(y\\) \u662f\u9ed1\u8272\u7684\uff0c\u4e14 \\(z\\) \u662f\u5de6\u5b69\u5b50\uff1b\u89e3\u51b3\u529e\u6cd5\uff1a\u53f3\u65cb\uff0c \\(z.p\\) \u548c \\(z.p.p\\) \u8981\u4e92\u6362\u989c\u8272 \u5982\u679c \\(z.p\\) \u662f \\(z.p.p\\) \u7684\u53f3\u5b69\u5b50\uff0c\u5219\u548c\u4e0a\u9762\u7684\u4e24\u79cd\u60c5\u51b5\u662f\u5bf9\u79f0\u7684 \u60c5\u51b5\u4e09\uff1a\u5982\u679c \\(z\\) \u7684\u53d4\u7ed3\u70b9 \\(y\\) \u662f\u7ea2\u8272\u7684\uff1b\u4e0d\u7ba1 \\(z\\) \u662f\u5de6\u5b69\u5b50\u8fd8\u662f\u53f3\u5b69\u5b50\uff0c\u628a\u7237\u7ed3\u70b9\u53d8\u6210\u7ea2\u8272\uff0c\u628a\u7236\u7ed3\u70b9\u548c\u53d4\u7ed3\u70b9\u53d8\u6210\u9ed1\u8272\uff0c\u7136\u540e\u7237\u7ed3\u70b9\u53d8\u6210\u65b0\u7684 \\(z\\) \u7ee7\u7eed\u5904\u7406\uff0c\u5373 \\(z\\) \u4e0a\u79fb\u4e86\u4e24\u5c42 \u7ea2\u9ed1\u6811\u7684\u5220\u9664\uff1a \u53ef\u4ee5\u53c2\u8003\u7684blog \u7528\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u5220\u9664\u7ed3\u70b9\u7684\u529e\u6cd5 \u7b2c1\u79cd\u60c5\u51b5\uff1a\u5982\u679c\u88ab\u5220\u9664\u7ed3\u70b9\u6709\u5de6\u53f3\u5b69\u5b50\uff0c\u5c31\u628a\u5176\u4e2d\u5e8f\u904d\u5386\u7684\u540e\u7ee7\uff08\u6216\u8005\u524d\u9a71\uff09\u7ed3\u70b9\u7684\u6570\u503c\u4e0e\u5176\u66ff\u6362\uff0c\u95ee\u9898\u53d8\u6362\u6210\u4e0b\u97622\u4e2d\u60c5\u51b5 \u7b2c2\u79cd\u60c5\u51b5\uff1a\u5f85\u5220\u7ed3\u70b9\u53ea\u6709\u5de6\u5b69\u5b50\u6216\u8005\u53f3\u5b69\u5b50\uff0c\u90a3\u4e48\u53ea\u6709\u53ef\u80fd\u5f85\u5220\u9664\u7684\u662f\u9ed1\u8272\uff0c\u5de6\u5b69\u5b50\u6216\u8005\u53f3\u5b69\u5b50\u662f\u4e00\u4e2a\u7ea2\u8272\u7ed3\u70b9\uff0c\u628a\u7ed3\u70b9\u5220\u4e86\u7136\u540e\u628a\u5b69\u5b50\u6362\u4e0a\u6765\u53d8\u6210\u9ed1\u8272\u5373\u53ef \u7b2c3\u79cd\u60c5\u51b5\uff1a\u5f85\u5220\u7ed3\u70b9\u6ca1\u6709\u5b69\u5b50 \u5f85\u5220\u7ed3\u70b9\u6ca1\u6709\u5b69\u5b50\u5e76\u4e14\u662f\u7ea2\u8272\u7684\uff0c\u76f4\u63a5\u5220\u9664\u5373\u53ef \u5f85\u5220\u7ed3\u70b9\u662f\u9ed1\u8272\u7684\uff0c\u5220\u9664\u5f85\u5220\u7ed3\u70b9\u540e\u53d8\u6210 null \u7ed3\u70b9\u518d\u5957\u4e00\u5c42\u9ed1\u8272 \uff08\u6216\u8005\u662f\u53cc\u9ed1\u7ed3\u70b9\uff09\u4ee3\u66ff\uff0c\u53eb\u505a \\(x\\) \uff0c\u95ee\u9898\u53d8\u4e3a\u5982\u4f55\u628a\u591a\u7684\u90a3\u5c42\u9ed1\u8272\u6d88\u53bb\uff0c\u533a\u522b\u5728\u4e8e \\(x\\) \u7684\u5144\u5f1f\u7ed3\u70b9 \\(w\\) \u4ee5\u53ca \\(w\\) \u7684\u5b69\u5b50\u7ed3\u70b9\u7684\u989c\u8272 \u60c5\u51b51\uff1a \\(w\\) \u662f\u7ea2\u8272\u7684\uff0c\u90a3\u4e48 \\(w\\) \u5fc5\u7136\u662f\u6709\u9ed1\u8272\u5de6\u53f3\u5b69\u5b50\uff0c\u5904\u7406\u529e\u6cd5\u662f\u4ea4\u6362 \\(x.p\\) \u548c \\(w\\) \u7684\u989c\u8272\uff0c\u65e2\u7136\u540e\u8fdb\u884c\u4e00\u6b21\u5355\u5411\u65cb\u8f6c\uff0c\u95ee\u9898\u53d8\u4e3a\u60c5\u51b52\uff0c3 \u6216 4 \u60c5\u51b52\uff1a \\(w\\) \u662f\u9ed1\u8272\u7684\uff0c \\(w\\) \u7684\u5de6\u5b69\u5b50\u662f\u7ea2\u8272\u7684\uff0c \\(w\\) \u7684\u53f3\u5b69\u5b50\u662f\u9ed1\u8272\u7684\uff1b\u5373\u7ea2\u8272\u7ed3\u70b9\u662f\u7237\u7ed3\u70b9\u7684\u53f3\u5b69\u5b50\u7684\u5de6\u5b69\u5b50\uff0c\u5904\u7406\u529e\u6cd5\u662f\u5148\u4ea4\u6362 \\(w\\) \u548c\u5176\u5de6\u5b69\u5b50\u7684\u989c\u8272\u518d RL\uff0c\u5176\u4e2d\u53f3\u65cb\u8fc7\u540e\u5176\u5b9e\u5c31\u53d8\u6210\u4e86\u60c5\u51b53 \u60c5\u51b53\uff1a \\(w\\) \u662f\u9ed1\u8272\u7684\uff0c \\(w\\) \u7684\u53f3\u5b69\u5b50\u662f\u7ea2\u8272\u7684\uff1b\u5904\u7406\u529e\u6cd5\u662f\u5148\u4ea4\u6362 \\(w\\) \u548c \\(x.p\\) \u7684\u989c\u8272\uff0c\u518d\u628a \\(w\\) \u53f3\u5b69\u5b50\u53d8\u4e3a\u9ed1\u8272\u518d RR(\u5de6\u5355\u65cb)\uff0c\u7136\u540e \\(x\\) \u53ef\u4ee5\u53d8\u56de\u6b63\u5e38\u9ed1\u8272 \u60c5\u51b54\uff1a \\(w\\) \u662f\u9ed1\u8272\u7684\u4e14\u4e24\u4e2a\u5b69\u5b50\u7ed3\u70b9\u4e5f\u90fd\u662f\u9ed1\u8272\uff08\u6216\u8005\u8bf4\u65e0\u7ea2\u8272\u5b50\u7ed3\u70b9\uff09\u7684\u5904\u7406\u529e\u6cd5\u662f\u628a \\(w\\) \u548c \\(x\\) \u53bb\u6389\u4e00\u5c42\u9ed1\u8272\uff0c\u7ed9 \\(x.p\\) \u52a0\u4e0a\u4e00\u5c42\u9ed1\u8272\u4f5c\u4e3a\u65b0\u7684 \\(x\\) \u53bb\u5904\u7406\uff08\u5982\u679c \\(x.p\\) \u662f\u7ea2\u8272\u7684\u5c31\u76f4\u63a5\u6d82\u9ed1\uff0c\u5982\u679c\u662f\u9ed1\u8272\u7684\u5c31\u4f5c\u4e3a\u53cc\u9ed1\u7ed3\u70b9\u7ee7\u7eed\u5904\u7406\uff09\uff1b\u5982\u679c\u4e00\u76f4\u5904\u7406\u5230\u6839\u7ed3\u70b9\uff0c\u628a\u591a\u7684\u4e00\u5c42\u9ed1\u8272\u76f4\u63a5\u820d\u53bb \u5176\u4ed6\u5bf9\u79f0\u60c5\u51b5\u7c7b\u4f3c 6 \u56fe \u00b6 6.1 \u56fe\u7684\u57fa\u672c\u6982\u5ff5 \u00b6 \u7ebf\u6027\u8868\u53ef\u4ee5\u662f\u7a7a\u8868\uff0c\u6811\u53ef\u4ee5\u662f\u7a7a\u6811\uff0c\u56fe\u4e0d\u53ef\u4ee5\u662f\u7a7a\uff0c\u5373 V \u4e00\u5b9a\u662f\u975e\u7a7a\u96c6\uff0cE \u53ef\u4ee5\u4e3a\u7a7a\u96c6 \u65e0\u5411\u56fe\uff0c\u6709\u5411\u56fe\uff1a\u9876\u70b9\u7684\u6709\u5e8f\u548c\u65e0\u5e8f\uff1b\u5f27\uff08\u6709\u5411\u8fb9\uff09 \u7b80\u5355\u56fe\uff1a\u65e0\u91cd\u8fb9\uff0c\u65e0\u73af\uff1b\u591a\u91cd\u56fe\uff1a\u975e\u7b80\u5355\u56fe \u5b8c\u5168\u56fe\uff1a\u4e5f\u79f0\u7b80\u5355\u5b8c\u5168\u56fe\uff0c\u6709\u5411\u4e0e\u65e0\u5411 \u5b50\u56fe\uff1a\u4ece V \u4e2d\u53d6\u5b50\u96c6\uff0cE \u505a\u76f8\u5e94\u7684\u5b50\u96c6\uff1b\u751f\u6210\u5b50\u56fe\uff1a \\(V(G')=V(G)\\) \u8fde\u901a\uff1a\u65e0\u5411\u56fe\u4e2d v \u548c w\u6709\u8def\u5f84\u5b58\u5728\uff1b\u5f3a\u8fde\u901a\uff1a\u65e0\u5411\u56fe\u4e2d v \u548c w\u6709\u8def\u5f84\u5b58\u5728\uff0cw \u5230 v \u6709\u8def\u5f84\u5b58\u5728 \u8fde\u901a\u56fe\uff08\u65e0\u5411\u56fe\uff09\uff0cn \u4e2a\u70b9\u6700\u5c11\u6709 n-1 \u6761\u8fb9\uff0c\u6700\u591a\u6709 \\(C_{n-1}^2\\) \u5373\uff08 \\(\\frac{(n-1)(n-2)}{2}\\) \uff09\u6761\u8fb9\uff0cn-1\u4e2a\u9876\u70b9\u6784\u6210\u5b8c\u5168\u56fe \u5f3a\u8fde\u901a\u56fe\uff08\u6709\u5411\u56fe\uff09\uff0cn \u4e2a\u70b9\u6700\u5c11\u6709 n \u6761\u8fb9 \u8fde\u901a\u5206\u91cf\uff1a\u65e0\u5411\u56fe\u4e2d\u7684\u6781\u5927\u8fde\u901a\u5b50\u56fe\u79f0\u4e3a\u8fde\u901a\u5206\u91cf \u5f3a\u8fde\u901a\u5206\u91cf\uff1a\u6709\u5411\u56fe\u4e2d\u7684\u6781\u5927\u5f3a\u8fde\u901a\u5b50\u56fe\u79f0\u4e3a\u8fde\u901a\u5206\u91cf \u751f\u6210\u6811\uff1a\u8fde\u901a\u56fe\u4e2d\uff0c\u5305\u542b\u8fde\u901a\u56fe\u7684\u5168\u90e8\u9876\u70b9\uff0c\u4e14\u662f\u6781\u5c0f\u8fde\u901a\u5b50\u56fe\uff1b\u5c11\u4e00\u6761\u8fb9\u5c31\u975e\u8fde\u901a\uff0c\u591a\u5c31\u6709\u73af \u751f\u6210\u68ee\u6797\uff1a\u975e\u8fde\u901a\u56fe\u4e2d\uff0c\u8fde\u901a\u5206\u91cf\u7684\u751f\u6210\u6811\u6784\u6210\u4e86\u751f\u6210\u68ee\u6797 \u90bb\u63a5\uff0c\u5173\u8054\uff1a\u65e0\u5411\u56fe\u4e2d \\((v, v')\\) \uff0c \\(v,v'\\) \u4e92\u4e3a\u90bb\u63a5\u70b9\uff0c \\((v, v')\\) \u548c \\(v,v'\\) \u76f8\u5173\u8054\uff1b\u6709\u5411\u56fe\u4e2d \\(<v, v'>\\) \uff0c\u79f0 \\(v\\) \u90bb\u63a5\u5230 \\(v'\\) \uff0c \\(<v, v'>\\) \u548c \\(v,v'\\) \u76f8\u5173\u8054 \u5ea6\uff08TD\uff09\uff0c\u51fa\u5ea6\uff08OD\uff09\uff0c\u5165\u5ea6\uff08ID\uff09\uff1b\u6709\u5411\u56fe\u7684\u5ea6\u4e3a \u5165\u5ea6 + \u51fa\u5ea6 \u65e0\u5411\u56fe\uff1a \\(\\sum TD(V_i)=2|E|\\) \u6709\u5411\u56fe\uff1a \\(\\sum OD(V_i)=\\sum ID(V_i)=|E|\\) \u8fb9\u7684\u6743\uff0c\u5e26\u6743\u56fe\uff08\u4e5f\u53eb\u7f51\uff09\uff0c\u5e26\u6743\u8def\u5f84\u957f\u5ea6 \u8def\u5f84\uff1a\u9876\u70b9\u5e8f\u5217 \u56de\u8def \u7b80\u5355\u8def\u5f84\uff1a\u9876\u70b9\u4e0d\u91cd\u590d\u51fa\u73b0\uff1b\u7b80\u5355\u56de\u8def\uff1a\u9664\u4e86\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u9876\u70b9\u4e0d\u91cd\u590d \u8ddd\u79bb\uff1a\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u6216\u65e0\u7a77 \u7a00\u758f\u56fe\uff0c\u7a20\u5bc6\u56fe \u6811\uff1a\u4e0d\u5b58\u5728\u56de\u8def\u4e14\u8fde\u901a\u7684\u56fe\uff1b\u68ee\u6797\uff1a \u6709\u5411\u6811\uff1a\u53ea\u6709\u4e00\u4e2a\u9876\u70b9\u7684\u5165\u5ea6\u4e3a0\uff0c\u5176\u4ed6\u9876\u70b9\u7684\u5165\u5ea6\u90fd\u4e3a 1 6.2 \u56fe\u7684\u8868\u793a\u6cd5\u548c\u57fa\u672c\u64cd\u4f5c \u00b6 \u90bb\u63a5\u77e9\u9635\u6cd5\uff08\u7a7a\u95f4\u590d\u6742\u5ea6 \\(O(v^2)\\) \uff09\uff0c\u5047\u8bbe\u77e9\u9635\u4e3a \\(A\\) \uff0c\u5219 \\(A*A\\) \u8868\u793a\u8def\u5f84\u957f\u5ea6\u4e3a 2 \u7684\u8def\u5f84\u6570\u76ee\uff0c \\(A^n\\) \u8868\u793a\u8def\u5f84\u957f\u5ea6\u4e3a n \u90bb\u63a5\u8868\uff08\u7a7a\u95f4\u590d\u6742\u5ea6\u6709\u5411\u56fe \\(O(V+E)\\) \uff0c\u65e0\u5411\u56fe \\(O(V+2E)\\) \uff09 \u5341\u5b57\u94fe\u8868\uff08\u5b58\u50a8\u6709\u5411\u56fe\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 \\(O(V+E)\\) \uff09 \u90bb\u63a5\u591a\u91cd\u8868\uff08\u5b58\u50a8\u65e0\u5411\u56fe\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 \\(O(V+E)\\) \uff09 6.3 bfs && dfs \u00b6 bfs\uff1a\u961f\u5217\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 \\(O(V)\\) \uff08\u961f\u5217\u7684\u957f\u5ea6\uff09 \u65f6\u95f4\u590d\u6742\u5ea6 \u90bb\u63a5\u77e9\u9635 \\(O(V^2)\\) \uff0c\u90bb\u63a5\u8868 \\(O(V+E)\\) \u5e7f\u5ea6\u4f18\u5148\u751f\u6210\u6811\uff08\u4e0d\u662f\u6700\u5c0f\u7684\uff0c\u4e14\u5982\u679c\u7528\u90bb\u63a5\u8868\u4e0d\u552f\u4e00\uff09 \u5e7f\u5ea6\u4f18\u5148\u751f\u6210\u68ee\u6797\uff08\u56fe\u4e2d\u6709\u591a\u4e2a\u8fde\u901a\u5206\u91cf\u65f6\uff09 dfs\uff1a\u7a7a\u95f4\u590d\u6742\u5ea6 \\(O(V)\\) \uff08\u51fd\u6570\u9012\u5f52\u8c03\u7528\u6808\uff09 \u65f6\u95f4\u590d\u6742\u5ea6 \u90bb\u63a5\u77e9\u9635 \\(O(V^2)\\) \uff0c\u90bb\u63a5\u8868 \\(O(V+E)\\) \u6df1\u5ea6\u4f18\u5148\u751f\u6210\u6811\uff08\u4e0d\u662f\u6700\u5c0f\u7684\uff0c\u4e14\u5982\u679c\u7528\u90bb\u63a5\u8868\u4e0d\u552f\u4e00\uff09 \u6df1\u5ea6\u4f18\u5148\u751f\u6210\u68ee\u6797\uff08\u56fe\u4e2d\u6709\u591a\u4e2a\u8fde\u901a\u5206\u91cf\u65f6\uff09 \u5224\u73af\u7528 \u62d3\u6251\u6392\u5e8f \u548c dfs\uff0c\u5982\u679c\u5728 dfs \u8981\u8bbf\u95ee\u7684\u5143\u7d20\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u5e76\u4e14\u8fd8\u5728\u6808\u4e2d\u65f6\uff0c\u8bf4\u660e\u6709\u73af\uff1bbfs \u4e0d\u884c\u7684\u539f\u56e0\u662f\u53ef\u80fd\u6709\u591a\u4e2a\u7ed3\u70b9\u6307\u5411\u8be5\u7ed3\u70b9\uff0c\u4e0d\u4e00\u5b9a\u662f\u56e0\u4e3a\u6709\u73af 6.4 \u6700\u5c0f\u751f\u6210\u6811\u548c\u6700\u77ed\u8def \u00b6 \u6700\u5c0f\u751f\u6210\u6811\uff08MST\uff09\uff0c\u975e\u8fde\u901a\u56fe\u53ea\u6709\u751f\u6210\u68ee\u6797 Prim\uff1a \\(O(V^2)\\) Kruskal\uff08\u5e76\u67e5\u96c6\uff09\uff1a \\(O(ElogE)\\) \u6700\u77ed\u8def\u5f84 \u5404\u9876\u70b9\u95f4\u6700\u77ed\u8def Floyd\uff08\u5e26\u6743\u56fe\uff0c\u65e0\u6743\u56fe\uff09\uff0c\u53ef\u4ee5\u7528 path \u8bb0\u5f55\u4e2d\u8f6c\u70b9\u6765\u8bb0\u5f55\u8def\u5f84\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(V^3)\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 \\(O(V^2)\\) \u5355\u6e90\u6700\u77ed\u8def\u95ee\u9898 BFS\uff08\u65e0\u6743\u56fe\uff09 Dijkstra\uff08\u5e26\u6743\u56fe\uff0c\u65e0\u6743\u56fe\uff09\uff0c\u6ce8\u610f\u4e0e Prime \u7b97\u6cd5\u7684\u533a\u522b\u5728 dis \u7684\u542b\u4e49\u548c\u677e\u5f1b\u64cd\u4f5c\uff1b\u8bb0\u5f55\u6bcf\u4e2a\u7ed3\u70b9\u7684\u524d\u9a71\u6765\u8bb0\u5f55\u8def\u5f84\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(V^2)\\) \u3002\u4e0d\u9002\u7528\u4e8e\u8d1f\u6743\u8fb9 6.5 \u6709\u5411\u65e0\u73af\u56fe\u4e0e\u5e94\u7528 \u00b6 \u6709\u5411\u65e0\u73af\u56fe\uff08DAG\uff0cDirected acyclic graph\uff09 \u63cf\u8ff0\u8868\u8fbe\u5f0f\uff0c\u5e76\u8fdb\u884c\u56fe\u7684\u4f18\u5316 AOV \u7f51\uff08Activity On Vertex NetWork\uff09\uff0c\u7528 vertex \u8868\u793a\u6d3b\u52a8 \u62d3\u6251\u6392\u5e8f\uff1a \u7b97\u6cd5\uff1a\u5165\u5ea6\u7684\u7edf\u8ba1\u53ef\u4ee5\u7528\u4e00\u4e2a\u6570\u7ec4indegree\u5b9e\u73b0\uff0cE\u662f\u5220\u9664\u7ed3\u70b9\u65f6\u66f4\u65b0indegree\u9700\u8981\u7684\u65f6\u95f4\uff0c\u7528\u961f\u5217\u6216\u6808\u8bb0\u5f55indegree\u4e3a0\u7684\u7ed3\u70b9 \u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u90bb\u63a5\u8868 \\(O(V+E)\\) \uff0c\u90bb\u63a5\u77e9\u9635 \\(O(V^2)\\) \uff1b\u9006\u62d3\u6251\u6392\u5e8f\uff08\u6bcf\u6b21\u5220\u9664\u51fa\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9\uff09\uff1a\u90bb\u63a5\u8868 \\(O(VE)\\) \uff0c\u90bb\u63a5\u77e9\u9635 \\(O(V^2)\\) \uff0c\u9006\u90bb\u63a5\u8868 \\(O(V+E)\\) \uff1b\u4f7f\u7528\u9006\u90bb\u63a5\u8868\u5373\u53ef\u5b9e\u73b0\u62d3\u6251\u6392\u5e8f\u7684\u6b63\u9006\uff1b\u4f7f\u7528 dfs \u6c42\u62d3\u6251\u5e8f \u7528DFS\u89e3\u62d3\u6251\u6392\u5e8f AOE \u7f51\uff08Activity On Edge NetWork\uff09\uff0c\u7528 edge \u8868\u793a\u6d3b\u52a8\uff0c\u7ed3\u70b9\u8868\u793a\u4e8b\u4ef6\uff0c\u53ea\u6709\u4e00\u4e2a\u5165\u5ea6\u4e3a 0 \u7684\u9876\u70b9\uff08\u6e90\u70b9\uff09\uff0c\u4e00\u4e2a\u51fa\u5ea6\u4e3a 0 \u7684\u9876\u70b9\uff08\u6c47\u70b9\uff09\uff1b\u6e90\u70b9\u5230\u6c47\u70b9\u7684\u6700\u957f\u8def\u5f84\u53eb\u5173\u952e\u8def\u5f84\uff08\u53ef\u80fd\u6709\u591a\u6761\uff09\uff0c\u4e0a\u9762\u7684\u6d3b\u52a8\u53eb\u5173\u952e\u6d3b\u52a8 \u4e8b\u4ef6\u7684\u6700\u65e9\u53d1\u751f\u65f6\u95f4\uff08ve\uff0c\u6309\u7167\u62d3\u6251\u5e8f\u6c42 max\uff09\uff0c\u6d3b\u52a8\u7684\u6700\u65e9\u5f00\u59cb\u65f6\u95f4\uff08e\uff0c\u5f27\u8d77\u59cb\u70b9\u7684 ve\uff09 \u4e8b\u4ef6\u6700\u8fdf\u53d1\u751f\u65f6\u95f4\uff08vl\uff0c\u6309\u7167\u9006\u62d3\u6251\u5e8f\u6c42 min\uff09\uff0c\u6d3b\u52a8\u6700\u8fdf\u5f00\u59cb\u65f6\u95f4\uff08l\uff09\uff08 min\uff08\u5f27\u7ec8\u70b9\u4e8b\u4ef6\u7684\u6700\u8fdf\u53d1\u751f\u65f6\u95f4-\u6d3b\u52a8\u65f6\u95f4\uff09 \uff09 \u6d3b\u52a8\u7684\u65f6\u95f4\u4f59\u91cf\uff08d\uff09\uff0c\u6d3b\u52a8\u7684\u6700\u65e9\u5f00\u59cb\u65f6\u95f4\u548c\u6700\u8fdf\u5f00\u59cb\u65f6\u95f4\u76f8\u540c\u7684\u6d3b\u52a8\uff08d=0\uff09\u662f\u5173\u952e\u6d3b\u52a8 6.6 \u5e76\u67e5\u96c6 \u00b6 int fa [ MAXN ]; void init ( int n ) { for ( int i = 0 ; i < n ; i ++ ) fa [ i ] = i ; } int find ( int x ) { if ( fa [ x ] != x ) fa [ x ] = find ( fa [ x ]); return fa [ x ]; } void unite ( int x , int y ) { int fx = find ( a ); int fy = find ( b ); fa [ fx ] = fy ; } bool same ( int x , int y ) { return find ( x ) == find ( y ); } 7 \u67e5\u627e \u00b6 7.1 \u57fa\u672c\u6982\u5ff5 \u00b6 \u67e5\u627e\uff0c\u67e5\u627e\u8868\uff08\u6570\u636e\u96c6\u5408\uff09\uff0c\u5173\u952e\u5b57\uff08\u552f\u4e00\u6807\u8bc6\u6570\u636e\u7684\u503c\uff09 \u9759\u6001\u67e5\u627e\u8868\uff08\u53ea\u4f1a\u67e5\u627e\uff09\uff0c\u52a8\u6001\u67e5\u627e\u8868\uff08\u4f1a\u8fdb\u884c\u63d2\u5165\u548c\u5220\u9664\uff09,\u9759\u6001\u67e5\u627e\u8868\u7528\u987a\u5e8f\u5b58\u50a8\uff0c\u52a8\u6001\u67e5\u627e\u8868\u7528\u4e8c\u53c9\u6392\u5e8f\u6811 \u5e73\u5747\u67e5\u627e\u957f\u5ea6 ASL 7.2 \u67e5\u627e\u7b97\u6cd5 \u00b6 \u987a\u5e8f\u67e5\u627e \u54e8\u5175\uff08\u653e\u5728 a[0]\uff0c\u4ece\u5c3e\u90e8\u5f80\u524d\u67e5\u627e\uff09 \u5206\u6790ASL\uff0c \\(ASL_{\u6210\u529f}=(n+1)/2,ASL_{\u5931\u8d25}=n+1\\) \u987a\u5e8f\u67e5\u627e\u7684\u4f18\u5316 \u6709\u5e8f\u8868\u7684\u987a\u5e8f\u67e5\u627e\u53ef\u4ee5\u63d0\u524d\u505c\u6b62\uff0c\u7528\u5224\u5b9a\u6811\u5206\u6790\uff0c \\(ASL_{\u5931\u8d25}=n/2+n/(n+1)\\) \u88ab\u67e5\u627e\u6982\u7387\u5927\u7684\u653e\u5728\u9760\u524d\u7684\u4f4d\u7f6e \u6298\u534a\u67e5\u627e \u4ec5\u9002\u7528\u4e8e\u6709\u5e8f\u7684\u987a\u5e8f\u8868 \u67e5\u627e\u6548\u7387\u5206\u6790 ASL\uff0c \\(O(long_2n)\\) \u6298\u534a\u67e5\u627e\u5224\u5b9a\u6811\u7684\u6811\u9ad8 \\(h=ceil(log_2(n+1))\\) \uff0c\u4e14\u662f\u4e8c\u53c9\u6392\u5e8f\u6811\uff0c\u4e14\u5e73\u8861\uff0c\u5931\u8d25\u7ed3\u70b9\u6709 n+1 \u5206\u5757\u67e5\u627e / \u7d22\u5f15\u987a\u5e8f\u67e5\u627e \u5757\u5185\u65e0\u5e8f\uff0c\u5757\u95f4\u6709\u5e8f \u5148\u67e5\u7d22\u5f15\u8868\uff0c\u53ef\u987a\u5e8f\uff0c\u53ef\u4e8c\u5206\uff08\u5f88\u9ebb\u70e6\uff09 \u67e5\u627e\u6548\u7387\u5206\u6790\uff0c\u6709 b \u5757\uff0c\u6bcf\u5757 s \u4e2a\u5143\u7d20 \u987a\u5e8f\u67e5\u627e\u7d22\u5f15\u8868\uff0c \\(ASL=\\frac{b+1}{2}+\\frac{s+1}{2}\\) \uff0c\u5f53 \\(s=\\sqrt{n}\\) \u65f6\uff0cASL \u6700\u5c0f = \\(\\sqrt{n} + 1\\) \u6298\u534a\u67e5\u627e\u7d22\u5f15\u8868\uff0c \\(ASL=ceil(log_2(b+1))+\\frac{s+1}{2}\\) 7.3 B\u6811 \u00b6 \u4e8c\u53c9\u67e5\u627e\u6811\u53d8\u4e3a m \u53c9\u67e5\u627e\u6811\uff0c\u7ed3\u70b9\u4e2d\u7684\u5173\u952e\u5b57\u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e8c\u5206 struct Node { Elemtype keys [ 4 ]; // \u6700\u591a4\u4e2a\u5173\u952e\u5b57 struct Node * child [ 5 ]; // 4\u4e2a\u5173\u952e\u5b57\u6700\u591a5\u4e2a\u5206\u53c9\uff0c\u6700\u591a5\u4e2a\u5b69\u5b50 int num ; // \u8bb0\u5f55\u7ed3\u70b9\u4e2d\u6709\u51e0\u4e2a\u5173\u952e\u5b57 } \u4fdd\u8bc1\u67e5\u627e\u6548\u7387\uff1a \u89c4\u5b9a m \u53c9\u67e5\u627e\u6811\u4e2d\u9664\u4e86\u6839\u7ed3\u70b9\u5916\uff0c\u4efb\u4f55\u7ed3\u70b9\u81f3\u5c11\u6709 \\(ceil(m/2)\\) \u4e2a\u5206\u53c9\uff0c \\(ceil(m/2)-1\\) \u4e2a\u5173\u952e\u5b57 \u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u7ed3\u70b9\u5176\u5b50\u6811\u7684\u9ad8\u5ea6\u8981\u76f8\u540c B\u6811\u5b9a\u4e49\uff1a \u542b n \u4e2a\u5173\u952e\u5b57\u7684 m \u9636 B \u6811\u7684\u6700\u5c0f\u9ad8\u5ea6\uff1a $$ n<=(m-1)(1+m+m^2+...+m^h) \\ h >= log_m(n+1) $$ \u6700\u5927\u9ad8\u5ea6\uff1a \u601d\u8def\u4e00\uff1a \u8ba9\u5404\u5c42\u5206\u53c9\u5c3d\u53ef\u80fd\u7684\u5c0f\uff0c\u7b2c\u4e00\u5c42 2 \u4e2a\u5206\u53c9\uff0c\u5176\u4ed6\u7ed3\u70b9 \\(ceil(m/2)\\) \u5206\u53c9\uff0c\u6240\u4ee5\u5404\u5c42\u7ed3\u70b9\u6570\uff1a \\(1,2,2ceil(m/2),...2ceil(m/2)^{h-2}\\) \uff0c\u5219 \\(h+1\\) \u5c42\u5171\u6709\u53f6\u5b50\u7ed3\u70b9\uff08\u5931\u8d25\u7ed3\u70b9\uff09 \\(2ceil(m/2)^{h-1}\\) \uff1b\u56e0\u4e3a n \u4e2a\u5173\u952e\u5b57\u7684B\u6811\u5fc5\u6709 n+1 \u4e2a\u53f6\u5b50\u7ed3\u70b9\uff08n\u4e2a\u6570\u5b57\u5206\u6210\u4e86 n+1 \u4e2a\u533a\u95f4\uff09\uff0c\u6240\u4ee5 \\(n+1>=2ceil(m/2)^{h-1}\\) \uff0c\u5f97 \\(h<=log_{ceil(m/2)}\\frac{n+1}{2}+1\\) \u601d\u8def\u4e8c\uff1a\u8bbe \\(k=ceil(m/2)\\) \u6700\u5c11\u7ed3\u70b9\u6570 \u6700\u5c11\u5173\u952e\u5b57\u6570 \u7b2c\u4e00\u5c42 1 1 \u7b2c\u4e8c\u5c42 2 2(k-1) \u7b2c\u4e09\u5c42 2k 2k(k-1) .... ... ... \u7b2ch\u5c42 \\(2k^{h-2}\\) \\(2k^{h-2}(k-1)\\) h \u5c42 m \u9636 B \u6570\u81f3\u5c11\u5305\u542b\u5173\u952e\u5b57\u603b\u6570 \\(1+2(k-1)+...+2k^{h-2}(k-1)=1+2(k^{h-1}-1) <= n\\) \uff0c\u5f97 \\(h<=log_{ceil(m/2)}\\frac{n+1}{2}+1\\) B \u6811\u7684\u63d2\u5165\uff08\u738b\u9053\u89c6\u9891P73\uff0c\u4e66P297\uff09\uff1a \u5982\u679c\u53ea\u6709\u6839\u7ed3\u70b9\uff0c\u5c31\u63d2\u5165\u6839\u7ed3\u70b9\uff0c\u6ee1\u4e86\u5c31\u5206\u88c2\u6210 3 \u4e2a\u7ed3\u70b9\uff081\u4e2a\u6839\u7ed3\u70b9 2 \u4e2a\u5b50\u7ed3\u70b9\uff0c\u6839\u7ed3\u70b9\u4e0a\u4f20\uff09 \u65b0\u5143\u7d20\u4e00\u5b9a\u8981\u63d2\u5165\u6700\u5e95\u5c42\u7684\u7ec8\u7aef\u7ed3\u70b9\uff08\u4fdd\u6301\u5931\u8d25\u7ed3\u70b9\u5728\u6700\u5e95\u5c42\u7684\u7279\u6027\uff09\uff0c\u6ee1\u4e86\u4e5f\u662f\u5206\u88c2 B \u6811\u7684\u5220\u9664\uff08\u738b\u9053\u89c6\u9891P73\uff0c\u4e66P298\uff09\uff1a \u8981\u5220\u9664\u7684\u5173\u952e\u5b57\u5728\u7ec8\u7aef\u7ed3\u70b9\uff0c\u7ed3\u70b9\u4e2d\u5173\u952e\u5b57\u5927\u4e8e \\(ceil(m/2)\\) \u5c31\u76f4\u63a5\u5220\u9664 \u5982\u679c\u4e0d\u5728\u7ec8\u7aef\u7ed3\u70b9\u4e2d\u5c31\u76f4\u63a5\u7528\u524d\u9a71\u6216\u8005\u76f4\u63a5\u540e\u7ee7\uff08\u662f\u5728\u7ec8\u7aef\u7ed3\u70b9\u4e2d\u7684\uff09\u4ee3\u66ff\uff0c\u66ff\u4ee3\u4e0d\u5f71\u54cd \u5173\u952e\u5b57\u5927\u4e8e \\(ceil(m/2)\\) \u7684\u6761\u4ef6\uff09\uff0c\u5982\u679c\u5c0f\u4e8e\u4e86\u5c31\u8ba9\u540e\u7ee7\u7684\u540e\u7ee7\uff08\u7236\u8282\u70b9\u4e0b\u6765\uff0c\u540e\u7ee7\u7684\u540e\u7ee7\u5f53\u7236\u8282\u70b9\uff09\u6216\u8005\u524d\u9a71\u7684\u524d\u9a71\uff08\u7236\u8282\u70b9\u4e0b\u6765\uff0c\u524d\u9a71\u7684\u524d\u9a71\u5f53\u7236\u8282\u70b9\uff09\u6765\u586b\u8865\uff0c\u6ca1\u7684\u501f\u5c31\u5408\u5e76 7.4 B+\u6811 \u00b6 \u7c7b\u6bd4\u5206\u5757\u67e5\u627e \u5b9a\u4e492\uff1a\u975e\u53f6\uff08\u5f62\u5bb9\u8bcd\uff09\u6839\u7ed3\u70b9 B+\u6811\u7684\u67e5\u627e\u9664\u4e86\u6309\u7167\u5c42\u6b21\u5f80\u4e0b\u67e5\u627e\u4e5f\u53ef\u4ee5\u6309\u6307\u9488P\u987a\u5e8f\u67e5\u627e B+\u6811\u548cB\u6811\u7684\u5bf9\u6bd4 m\u9636B+\u6811\uff1a \u7ed3\u70b9\u4e2dn\u4e2a\u5173\u952e\u5b57\u5bf9\u5e94n\u4e2a\u5b50\u6811 \u9664\u6839\u7ed3\u70b9\u5916\u7684\u7ed3\u70b9\u7684\u5173\u952e\u5b57\u6570 \\([\\ ceil(m/2),m\\ ]\\) \u53f6\u5b50\u7ed3\u70b9\u5305\u542b\u5168\u90e8\u7684\u5173\u952e\u5b57\uff0c\u975e\u53f6\u5b50\u7ed3\u70b9\u4e2d\u51fa\u73b0\u8fc7\u7684\u5173\u952e\u5b57\u4e5f\u4f1a\u5728\u53f6\u5b50\u7ed3\u70b9\u4e2d \u6240\u6709\u975e\u53f6\u5b50\u7ed3\u70b9\u53ea\u8d77\u5230\u7d22\u5f15\u4f5c\u7528\uff0c\u4e0d\u5305\u542b\u8be5\u5173\u952e\u5b57\u7684\u5bf9\u5e94\u8bb0\u5f55\u7684\u5b58\u50a8\u5730\u5740 m\u9636B\u6811\uff1a \u7ed3\u70b9\u4e2dn\u4e2a\u5173\u952e\u5b57\u5bf9\u5e94n+1\u4e2a\u5b50\u6811 \u9664\u6839\u7ed3\u70b9\u5916\u7684\u7ed3\u70b9\u7684\u5173\u952e\u5b57\u6570 \\([\\ ceil(m/2)-1, m-1\\ ]\\) \u5404\u7ed3\u70b9\u7684\u5173\u952e\u5b57\u4e0d\u91cd\u590d \u7ed3\u70b9\u5305\u542b\u4e86\u5173\u952e\u5b57\u5bf9\u5e94\u7684\u8bb0\u5f55\u7684\u5b58\u50a8\u5730\u5740 7.5 \u6563\u5217\u67e5\u627e \u00b6 \u6563\u5217\u8868=\u54c8\u5e0c\u8868\uff0c\u6563\u5217\u51fd\u6570=\u54c8\u5e0c\u51fd\u6570\uff0c\u540c\u4e49\u8bcd\uff0c\u51b2\u7a81\uff0c\u805a\u96c6 \u67e5\u627e\u957f\u5ea6\uff08\u5982\u679c\u662f\u7a7a\uff0c\u67e5\u627e\u957f\u5ea6=0\uff09\uff0c\u8ba1\u7b97 \\(ASL_{\u6210\u529f}\\) \uff0c \\(ASL_{\u5931\u8d25}\\) \uff08\u6ce8\u610f\u8ba1\u7b97\u5931\u8d25\u7684\u65f6\u5019\u4e3b\u8981\u548c\u54c8\u5e0c\u51fd\u6570\u6709\u5173\u548c\u5f53\u524d\u8868\u5185\u72b6\u6001\u6709\u5173\uff09 \u88c5\u586b\u56e0\u5b50 \\(\\alpha\\) =\u8868\u4e2d\u8bb0\u5f55\u6570/\u6563\u5217\u8868\u957f\u5ea6 \u5e38\u89c1\u6563\u5217\u51fd\u6570\uff1a \u9664\u7559\u4f59\u6570\u6cd5\uff0c\u6563\u5217\u8868\u957f\u5ea6\u4e3a m\uff0c\u9664\u6570\u53d6\u4e0d\u5927\u4e8e m \u7684\u6700\u5927\u8d28\u6570 p\uff0c\u4f1a\u8ba9\u54c8\u5e0c\u6570\u503c\u57df\u5c0f\u4e8e\u6563\u5217\u8868\u957f\u5ea6\uff0c\u518d\u7528\u5f00\u653e\u5b9a\u5740\u6cd5\u53ef\u4ee5\u6062\u590d \u76f4\u63a5\u5b9a\u5740\u6cd5\uff0c\u505a\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362 H(key) = a*key+b \u6570\u5b57\u5206\u6790\u6cd5\uff0c\u9009\u53d6\u6570\u7801\u5206\u5e03\u5747\u5300\u7684\u82e5\u5e72\u4f4d\u4f5c\u4e3a\u6563\u5217\u5730\u5740 \u5e73\u65b9\u53d6\u4e2d\u6cd5\uff0c\u53d6\u5e73\u65b9\u503c\u7684\u4e2d\u95f4\u51e0\u4f4d\u4f5c\u4e3a\u6563\u5217\u5730\u5740 \u5904\u7406\u51b2\u7a81\u7684\u65b9\u6cd5\uff1a \u62c9\u94fe\u6cd5\uff0c\u5c0f\u4f18\u5316\uff1a\u4f7f\u94fe\u8868\u6709\u5e8f\uff0c\u5982\u679c\u67e5\u627e\u5931\u8d25\u53ef\u4ee5\u63d0\u524d\u8fd4\u56de \u5f00\u653e\u5b9a\u5740\u6cd5 \\(H_i=(H(key)+d_i)\\%m\\) \uff0c\u67e5\u627e\u5931\u8d25\u65f6\u5bf9\u7a7a\u4f4d\u7f6e\u7684\u5224\u65ad\u4e5f\u7b97\u4e00\u6b21\u6bd4\u8f83\uff1b\u5728\u5220\u9664\u7ed3\u70b9\u65f6\u8981\u505a\u6807\u8bb0\uff0c\u4ee5\u4fbf\u540e\u9762\u67e5\u627e\u65f6\u7ee7\u7eed\u63a2\u6d4b \u7ebf\u6027\u63a2\u6d4b\u6cd5\uff0c \\(d_i=0,1,2,3,4...\\) \u5e73\u65b9\u63a2\u6d4b\u6cd5\uff08\u4e8c\u6b21\u63a2\u6d4b\u6cd5\uff09\uff0c \\(d_i=0,1,-1,4,-4,9,-9...,k^2,-k^2\\) \uff0c \\(k<=m/2\\) \uff0c\u6563\u5217\u8868\u957f\u5ea6 m \u5fc5\u987b\u662f\u4e00\u4e2a\u53ef\u4ee5\u8868\u793a\u6210 4j+3 \u7684\u7d20\u6570\u624d\u53ef\u4ee5\u63a2\u6d4b\u5230\u6240\u6709\u7d20\u6570 \u4f2a\u968f\u673a\u5e8f\u5217\u6cd5 \u518d\u6563\u5217\u6cd5\uff0c\u591a\u51c6\u5907\u51e0\u4e2a\u6563\u5217\u51fd\u6570 \u6ce8\u610f\u5728\u5220\u9664\u65f6\u8981\u505a\u6807\u8bb0\uff0c\u4e0d\u7136\u4e0b\u6b21\u67e5\u627e\u65f6\u53ef\u80fd\u4f1a\u6709\u95ee\u9898 8 \u6392\u5e8f \u00b6 \u8fd9\u90e8\u5206\u8981\u6ce8\u610f\u4ee3\u7801 8.1 \u57fa\u672c\u6982\u5ff5 \u00b6 \u7a7a\u95f4\u548c\u65f6\u95f4\u590d\u6742\u5ea6 \u7b97\u6cd5\u7684\u7a33\u5b9a\u6027 \u5206\u7c7b\uff1a \u5185\u90e8\u6392\u5e8f\uff0c\u6570\u636e\u90fd\u5728\u5185\u5b58\u4e2d\uff0c\u5173\u6ce8\u65f6\u95f4\u7a7a\u95f4\u590d\u6742\u5ea6 \u5916\u90e8\u6392\u5e8f\uff0c\u6570\u636e\u592a\u591a\uff0c\u65e0\u6cd5\u5168\u90e8\u653e\u5165\u5185\u5b58\uff0c\u8fd8\u8981\u5173\u6ce8\u4f7f\u8bfb/\u5199\u78c1\u76d8\u6b21\u6570\u66f4\u5c11 8.2 \u63d2\u5165\u6392\u5e8f\uff1a\u63d2\u5165\u6392\u5e8f\u548c\u5e0c\u5c14\u6392\u5e8f \u00b6 \u63d2\u5165\u6392\u5e8f\uff1a \u6bcf\u6b21\u5c06\u5f85\u6392\u5e8f\u7684\u8bb0\u5f55\u6309\u7167\u5173\u952e\u5b57\u5927\u5c0f\u63d2\u5165\u524d\u9762\u5df2\u6392\u597d\u7684\u5b50\u5e8f\u5217\u4e2d \u5982\u679c\u6709\u54e8\u5175\uff0c\u54e8\u5175\u7528\u6765\u590d\u5236\u5f85\u6392\u5e8f\u7684\u8bb0\u5f55 \u7a7a\u95f4\u590d\u6742\u5ea6 \\(O(1)\\) \uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n^2)\\) \u7a33\u5b9a\u6027\uff1a\u7a33\u5b9a \u4f18\u5316\uff1f\uff1a\u5bf9\u524d\u9762\u5df2\u6392\u597d\u7684\u5b50\u5e8f\u5217\u7528\u6298\u534a\u67e5\u627e\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u7a33\u5b9a\u6027\u5728\u627e\u5230\u4e4b\u540e\u8fd8\u8981\u7ee7\u7eed\u627e\u76f4\u5230 low>high\uff0c\u7136\u540e\u628a [low, i-1] \u5185\u7684\u5143\u7d20\u53f3\u79fb\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n^2)\\) \u5982\u679c\u7528\u94fe\u8868\u5b58\u50a8\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n^2)\\) \u5e0c\u5c14\u6392\u5e8f\uff1a\u5bf9\u63d2\u5165\u6392\u5e8f\u7684\u4f18\u5316\uff1b\u7531\u90e8\u5206\u6709\u5e8f\u903c\u8fd1\u5168\u5c40\u6709\u5e8f \u7531\u589e\u91cf \\(d\\) \u5206\u6210\u591a\u4e2a\u5b50\u8868\u540e\u5bf9\u5b50\u8868\u63d2\u5165\u6392\u5e8f\uff0c\u7136\u540e\u7f29\u5c0f\u589e\u91cf \\(d\\) \u76f4\u5230 \\(d=1\\) \uff1b \\(d\\) \u5efa\u8bae\u521d\u503c\u4e3a \\(n/2\\) \uff0c\u7136\u540e\u6bcf\u6b21 \\(d_{i+1}=d_i/2\\) \uff1b \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a \\(O(1)\\) \uff1b\u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(O(n^{1.3}) \u5230 O(n^2)\\) \u7a33\u5b9a\u6027\uff1a\u4e0d\u7a33\u5b9a \u53ea\u80fd\u57fa\u4e8e\u987a\u5e8f\u8868 8.3 \u4ea4\u6362\u6392\u5e8f\uff1a\u5192\u6ce1\u6392\u5e8f\u548c\u5feb\u901f\u6392\u5e8f \u00b6 \u5192\u6ce1\u6392\u5e8f\uff1a \u6bcf\u8f6e\u90fd\u627e\u5230\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6570\u653e\u5230\u6700\u524d\u9762\uff08\u6216\u8005\u627e\u6700\u5927\u7684\u653e\u540e\u9762\uff09 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(O(n^2)\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a \\(O(1)\\) \u7a33\u5b9a\u6027\uff1a\u7a33\u5b9a \u5192\u6ce1\u6392\u5e8f\u9002\u5408\u94fe\u8868 \u4f18\u5316\uff1a\u67d0\u4e00\u8d9f\u6ca1\u6709\u4ea4\u6362\u5c31\u53ef\u4ee5\u63d0\u524d\u7ed3\u675f \u5feb\u901f\u6392\u5e8f\uff08\u91cd\u8981 \uff09\uff1a \u5728\u8868\u4e2d\u4efb\u53d6\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u67a2\u8f74\u6216\u57fa\u51c6\uff0c\u5212\u5206\u4e3a\u5de6\u53f3 2 \u90e8\u5206\uff08\u5b9e\u73b0\u65f6\u6709\u4e00\u4e2a low \u548c high \u4e0d\u65ad\u5411\u5185\u79fb\u52a8\uff09\uff0c\u7136\u540e\u9012\u5f52 \u5982\u679c\u8868\u539f\u672c\u5c31\u662f\u6709\u5e8f\u6216\u8005\u9006\u5e8f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(O(n^2)\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a \\(O(n)\\) \uff1b\u5982\u679c\u57fa\u51c6\u5143\u7d20\u9009\u7684\u597d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(O(nlog_2n)\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a \\(O(log_2n)\\) \u67a2\u8f74\u7684\u9009\u53d6\uff0c\u9009\u53d6\u5934\u4e2d\u5c3e\u4e09\u4e2a\u5143\u7d20\u9009\u4e2d\u95f4\u7684\uff0c\u6216\u8005\u968f\u673a\u9009\u62e9 \u7a33\u5b9a\u6027\uff1a\u4e0d\u7a33\u5b9a \u4e00\u8d9f\u6392\u5e8f\uff1a\u53ef\u4ee5\u786e\u5b9a\u591a\u4e2a\u5143\u7d20\u7684\u6700\u7ec8\u4f4d\u7f6e\uff08\u6bd4\u5982\u7b2c\u4e00\u8d9f\u786e\u5b9a1\u4e2a\uff0c\u7b2c\u4e8c\u8d9f\u53ef\u4ee5\u786e\u5b9a2\u4e2a\uff09\uff1b\u4e00\u6b21\u5212\u5206\uff08partition\uff09\uff1a\u53ea\u53ef\u4ee5\u786e\u5b9a\u4e00\u4e2a\u5143\u7d20\u7684\u6700\u7ec8\u4f4d\u7f6e 8.4 \u9009\u62e9\u6392\u5e8f\uff1a\u7b80\u5355\u9009\u62e9\u6392\u5e8f\u548c\u5806\u6392\u5e8f \u00b6 \u9009\u62e9\u6392\u5e8f\uff1a \u5728\u5f85\u6392\u5e8f\u7684\u8868\u4e2d\u627e\u5230\u6700\u5c0f\u7684\uff0c\u7136\u540e\u548c\u5f85\u6392\u5e8f\u7684\u8868\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u8c03\u6362 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a \\(O(1)\\) \uff0c\u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\((O(n^2))\\) \uff0c\u4e14\u65e0\u6cd5\u63d0\u524d\u505c\u6b62\uff0c\u5373\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u53d8\uff1b\u6392\u5e8f\u8fc7\u7a0b\u4e2d\u79fb\u52a8\u6b21\u6570\u5f88\u5c11 \u7a33\u5b9a\u6027\uff1a\u4e0d\u7a33\u5b9a \u53ef\u4ee5\u9002\u7528\u4e8e\u94fe\u8868 \u5806\u6392\u5e8f\uff08\u91cd\u8981\uff09\uff1a \u5229\u7528\u5927\u6839\u5806\u6216\u5c0f\u6839\u5806\u5b9e\u73b0\uff1b\u5927\u6839\u5806\uff08\u5927\u9876\u5806\uff09\uff1a\u6839\u7ed3\u70b9\u7684\u6570\u5927\u4e8e\u5de6\u53f3\u5b50\u6811 \u5efa\u7acb\u5927\u6839\u5806\uff0c\u68c0\u67e5\u975e\u7ec8\u7aef\u7ed3\u70b9\u7684\u7f16\u53f7 \\(i<=floor(n/2)\\) \uff1b\u7f16\u53f7\u4ece\u5927\u5230\u5c0f\u68c0\u67e5\uff0c\u5982\u679c\u4e0d \u6bd4\u81ea\u5df1\u5b69\u5b50\u7ed3\u70b9\u90fd\u5927\uff0c\u4e0e 2 \u4e2a\u5b69\u5b50\u4e2d\u5927\u7684\u4ea4\u6362\uff0c\u4ea4\u6362\u540e\u8fd8\u8981\u5411\u4e0b\u68c0\u67e5\uff08\u53ef\u80fd\u4f1a\u7834\u574f\u4e0b\u9762\u7684\u5806\u7684\u6027\u8d28\uff09\uff1b\u6ce8\u610f\u5efa\u7acb\u5927\u6839\u5806\u65f6\u8868\u7684\u4e0b\u6807\u4e00\u822c\u4ece 1 \u5f00\u59cb\u65b9\u4fbf\u8ba1\u7b97\u5b69\u5b50\u7684\u4e0b\u6807 \u5806\u6392\u5e8f\uff1a\u6bcf\u4e00\u8d9f\u5c06\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u6362\u5230\u5806\u9876\uff1b\u518d\u8c03\u6574\u5927\u6839\u5806\uff08\u5c0f\u5143\u7d20\u4e0b\u5760\uff09 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(O(nlog_2n)\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a \\(O(1)\\) \u5efa\u7acb\u521d\u59cb\u5927\u6839\u5806\u7684\u590d\u6742\u5ea6\uff1a \\(O(n)\\) \uff0c\u4e0d\u8d85\u8fc7 4n \u7a33\u5b9a\u6027\uff1a\u4e0d\u7a33\u5b9a \u5806\u7684\u63d2\u5165\u548c\u5220\u9664\uff1a\u4ee5\u5c0f\u6839\u5806\u4e3a\u4f8b \u63d2\u5165\uff1a\u653e\u5728\u8868\u5c3e\uff08\u5806\u4f4e\uff09\uff0c\u5f80\u4e0a\u63d0 \u5220\u9664\uff1a\u7528\u5806\u5e95\uff08\u8868\u5c3e\uff09\u7684\u5143\u7d20\u66ff\u6362\u5220\u9664\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u5411\u4e0b\u5760\uff1b\u8981\u6ce8\u610f\u4e0b\u5760\u7684\u65f6\u5019\u5982\u679c\u67092\u4e2a\u5b69\u5b50\uff0c\u6bcf\u6b21\u4e0b\u5760\u90fd\u8981\u5bf9\u6bd42\u6b21\uff0c\u4e00\u4e2a\u5b69\u5b50\u53ea\u9700\u8981\u5bf9\u6bd4\u4e00\u6b21 8.5 \u5f52\u5e76\u6392\u5e8f\u548c\u57fa\u6570\u6392\u5e8f \u00b6 \u5f52\u5e76\u6392\u5e8f\uff1a\u4e00\u822c\u90fd\u662f 2 \u8def\u5f52\u5e76 \u5c06\u539f\u5e8f\u5217\u62c6\u6210 2 \u90e8\u5206\u8fdb\u884c\u9012\u5f52\u5f52\u5e76\u6392\u5e8f \u4ee3\u7801\u5b9e\u73b0\u65f6\u6709\u4e09\u4e2a\u6307\u9488\uff08int\u578b\uff09\uff0clow\uff0cmid\uff0chigh\uff0c\u5f00\u65b0\u7684\u7a7a\u95f4\u590d\u5236\u8fc7\u53bb\uff0c\u5728\u539f\u5217\u8868\u4e2d\u5f52\u5e76 2 \u4e2a\u51fd\u6570 MergeSort \u548c Merge \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(O(nlog_2n)\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a \\(O(n)\\) \uff08merge\u4e2d\u7684\u8f85\u52a9\u7a7a\u95f4\uff09 \u7a33\u5b9a\u6027\uff1a\u7a33\u5b9a \u57fa\u6570\u6392\u5e8f\uff1a\u6309\u4e2a\u4f4d\u5148\u6392\u597d\uff0c\u518d\u6309\u5341\u4f4d\u6392\u597d \u3002\u3002\u3002\u3002 \u57fa\u6570 \\(r\\) \uff1a\u6bd4\u5982\u5341\u8fdb\u5236\u5c31\u662f 10\uff0c\u8868\u793a\u6709 10 \u79cd\u4e0d\u540c\u7684\u53d6\u503c \u6392\u5e8f\u65f6\u9700\u8981\u8bbe\u7f6e \\(r\\) \u4e2a\u8f85\u52a9\u961f\u5217\uff0c \\(Q_{r-1},...,Q_0\\) \uff0c\u6309\u7167\u6743\u91cd\u4f4e\u7684\u5230\u6743\u91cd\u9ad8\u7684\u987a\u5e8f\uff0c\u8fdb\u884c \\(d\\) \u6b21\u5206\u914d\u518d\u6536\u96c6\uff0c \\(d\\) \u8868\u793a\u6709\u51e0\u4f4d \u65f6\u95f4\u590d\u6742\u5ea6 \\(O(d(n+r))\\) \uff0c\u4e00\u8d9f\u5206\u914d \\(O(n)\\) \uff0c\u4e00\u8d9f\u6536\u96c6 \\(O(r)\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 \\(O(r)\\) \uff0c\u5373 r \u4e2a\u8f85\u52a9\u961f\u5217 \u7a33\u5b9a\u6027\uff1a\u7a33\u5b9a \u5e94\u7528\uff1a\u6309\u7167\u5b66\u751f\u5e74\u9f84\u9012\u51cf\u6392\u5e8f\uff0c\u6743\u91cd \u5e74>\u6708>\u65e5\uff0c\u5e74\u6708\u65e5\u8d8a\u5927\uff0c\u5e74\u9f84\u8d8a\u5c0f\uff1b\u6240\u4ee5\u7b2c\u4e00\u8eba\u6309\u5206\u914d\uff0c\u6536\u96c6\u6309 \u65e5 \u9012\u589e\uff0c\u5373\u5148\u6536\u96c6 \u65e5 \u5c0f\u7684\u3002\u3002\u3002\u57fa\u6570 \\(r\\) \u5728\u5e74\u6708\u65e5\u662f\u4e0d\u540c\u7684 \u57fa\u6570\u6392\u5e8f\u64c5\u957f\u89e3\u51b3\u7684\u95ee\u9898\uff1a\u6570\u636e\u53ef\u4ee5\u65b9\u4fbf\u7684\u62c6\u5206\u4e3a d \u7ec4\uff0c\u5e76\u4e14 d \u548c r \u5c0f\u7684 8.7 \u5916\u90e8\u6392\u5e8f \u00b6 \u5916\u90e8\u6392\u5e8f\uff1a \u5916\u5b58\u548c\u5185\u5b58\u4ee5\u5757\u4e3a\u5355\u4f4d\u8bfb\u5199 \u6784\u9020\u521d\u59cb\u7684\u5f52\u5e76\u6bb5\uff1a\u5728\u5185\u5b58\u4e2d\u5f00\u4e09\u5757\u7684\u7a7a\u95f4\uff0c\u6bcf\u6b21\u8bfb\u5165\u8fde\u7eed\u7684 2 \u5757\u8fdb\u884c\u5f52\u5e76\u6392\u5e8f\uff0c\u7136\u540e\u5199\u56de\u53bb\uff0c\u5047\u8bbe\u6709 n \u5757\uff0c\u5219\u5f97\u5230 n/2 \u4e2a\u5f52\u5e76\u6bb5\uff0c\u4e00\u5171\u8bfb\u5199\u4e86 2n \u6b21\uff1b\u7136\u540e\u4e0d\u65ad\u7684\u5f52\u5e76\u6210\u66f4\u5927\u7684\u6bb5\uff08\u8fd9\u91cc\u8981\u77e5\u9053\u600e\u4e48\u7528\u5185\u5b58\u4e2d\u4e09\u5757\u7684\u7a7a\u95f4\u53bb\u5f52\u5e76\uff0c\u5916\u5b58\u9700\u8981\u5f00\u989d\u5916\u7684\u7a7a\u95f4\uff09 \u5916\u90e8\u6392\u5e8f\u7684\u65f6\u95f4\u5f00\u9500=\u8bfb\u5199\u5916\u5b58\u7684\u65f6\u95f4+\u5185\u90e8\u6392\u5e8f\u7684\u65f6\u95f4\uff08\u751f\u6210\u521d\u59cb\u5f52\u5e76\u6bb5\uff09+\u5185\u90e8\u5f52\u5e76\u6240\u9700\u65f6\u95f4\uff1b\u65f6\u95f4\u4e3b\u8981\u82b1\u5728\u4e86\u8bfb\u5199\u5916\u5b58\u4e0a \u603b\u8bfb\u5199\u78c1\u76d8\u6b21\u6570 = \u6587\u4ef6\u603b\u5757\u6570 *2* (\u5f52\u5e76\u8d9f\u6570 + 1)\uff08\u6784\u9020\u521d\u59cb\u5f52\u5e76\u6bb5+\u5f52\u5e76\u7684\u8d9f\u6570\uff09 \u4f18\u5316\u601d\u8def1\uff1a\u51cf\u5c11\u5f52\u5e76\u7684\u8d9f\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u8def\u5f52\u5e76\uff0c\u5185\u5b58\u9700\u8981\u66f4\u591a\u7684\u7f13\u51b2\u533a\uff0c\u7a7a\u95f4\u6362\u65f6\u95f4\uff1b\u5047\u8bbe\u6709 r \u4e2a\u521d\u59cb\u5f52\u5e76\u6bb5\uff0c\u505a k \u8def\u5f52\u5e76 \u4f18\u5316\u601d\u8def2\uff1a\u589e\u52a0\u521d\u59cb\u5f52\u5e76\u6bb5\u7684\u5927\u5c0f\uff08\u5185\u5b58\u9700\u8981\u7684\u5757\u6570\u8981\u53d8\u5927\uff09\uff0c\u5373\u51cf\u5c11\u521d\u59cb\u5f52\u5e76\u6bb5\u7684\u6570\u91cf r \u8d25\u8005\u6811\uff1a k \u8def\u5f52\u5e76 k \u8fc7\u5927\u65f6\u4f1a\u5bfc\u81f4\u9009\u51fa\u4e00\u4e2a\u6700\u5c0f\u5143\u7d20\u9700\u8981\u5bf9\u6bd4 k-1 \u6b21\uff0c\u8d25\u8005\u6811\u53ef\u4ee5\u4f18\u5316\u8fd9\u4e2a\uff1b\u8d25\u8005\u6811\u7684\u7ed3\u70b9\u5b58\u653e\u5931\u8d25\u8005\uff0c\u6700\u540e\u591a\u4e00\u4e2a\u989d\u5916\u7684\u7ed3\u70b9\u5b58\u50a8\u51a0\u519b \u6709\u4e86\u8d25\u8005\u6811\uff0c\u9009\u51fa\u6700\u5c0f\u5143\u7d20\u53ea\u9700\u8981\u5bf9\u6bd4\u5173\u952e\u5b57 \\(ceil(log_2k)\\) \u6b21 \u7f6e\u6362\u9009\u62e9\u6392\u5e8f\uff1a \u539f\u672c\u7684\u529e\u6cd5\uff0c\u5982\u679c\u5185\u5b58\u53ef\u5bb9\u7eb3 \\(l\\) \u4e2a\u8bb0\u5f55\uff0c\u6587\u4ef6\u4e00\u5171\u6709 \\(n\\) \u4e2a\u8bb0\u5f55\uff0c\u5219\u521d\u59cb\u5f52\u5e76\u6bb5\u7684\u6570\u91cf \\(r = n/l\\) \uff1b \u7f6e\u6362\u9009\u62e9\u6392\u5e8f\u65f6\u8bb0\u5f55\u5df2\u7ecf\u8f93\u51fa\u7684\u6700\u5c0f\u6570\u503c \\(min\\) \uff0c\u6bcf\u6b21\u8f93\u51fa\u6700\u5c0f\u7684\u4e14\u5927\u4e8e \\(min\\) \u7684\u6570\uff0c\u66f4\u65b0 \\(min\\) \u518d\u8bfb\u5165\u65b0\u7684\uff1b\u5c0f\u4e8e \\(min\\) \u7684\u7559\u5728\u5185\u5b58\u5185\uff0c\u76f4\u5230\u5185\u5b58\u5185\u7684\u90fd\u5c0f\u4e8e \\(min\\) \uff1b\u8fd9\u6837\u505a\u6bcf\u6b21\u5f97\u5230\u7684\u521d\u59cb\u5f52\u5e76\u6bb5\u957f\u5ea6\u5e76\u4e0d\u4e00\u5b9a\u76f8\u540c \u6700\u4f73\u5f52\u5e76\u6811 \u4e8c\u8def\u5f52\u5e76\u548c\u591a\u8def\u5f52\u5e76\u539f\u7406\u76f8\u540c\uff0c\u90fd\u662f\u6784\u9020\u54c8\u592b\u66fc\u6811\uff1b\u5bf9\u4e8e k \u53c9\u5f52\u5e76\uff0c\u5982\u679c\u521d\u59cb\u5f52\u5e76\u6bb5\u6570\u91cf\u65e0\u6cd5\u4e25\u683c\u6784\u6210 k \u53c9\u5f52\u5e76\u6811\uff0c\u9700\u8981\u8865\u5145\u957f\u5ea6\u4e3a 0 \u7684 \"\u865a\u6bb5\" \u603b\u7ed3 \u00b6 \u4e32 \u00b6 next[i] \u7684\u503c\u548c \u6a21\u5f0f\u4e32\u4e2d i \u524d\u7684\u5b50\u4e32\u7684\u6700\u5927\u76f8\u540c\u524d\u540e\u7f00\u957f\u5ea6 k \u51b3\u5b9a\uff0c\u5982\u679c\u4e32\u7d22\u5f15\u75311\u5f00\u59cb\uff0c\u5c31\u662f k+1\uff0c\u5426\u5219\u5c31\u662f k\uff1b \u8ba1\u7b97 next \u7684\u8fc7\u7a0b\u53ef\u4ee5\u7406\u89e3\u4e3a \u6a21\u5f0f\u4e32\u81ea\u5df1\u5339\u914d\u81ea\u5df1\u7684\u8fc7\u7a0b \u6811 \u00b6 \u54c8\u592b\u66fc\u6811\u53ef\u4ee5\u5f97\u5230\u4e00\u79cd\u524d\u7f00\u7f16\u7801\uff0c\u4e14\u5e26\u6743\u8def\u5f84\u957f\u5ea6\u662f\u6700\u5c0f\u7684\uff08WPL\uff09;\u4e14\u54c8\u592b\u66fc\u6811\u65e0\u5ea6\u4e3a1\u7684\u7ed3\u70b9\uff0c \\(n_0=n_2+1\\) \u4f1a\u5f88\u6709\u7528 \u5e76\u67e5\u96c6\u662f\u4e00\u79cd\u7b80\u5355\u7684\u96c6\u5408\u8868\u793a\uff0cfind \u5982\u679c\u4e0d\u505a\u8def\u5f84\u538b\u7f29\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u4e8c\u53c9\u6392\u5e8f\u6811\u548c\u5e73\u8861\u4e8c\u53c9\u6811 \u7ea2\u9ed1\u6811\u7684\u5b9a\u4e49\uff0c\u63d2\u5165\u548c\u5220\u9664 \u56fe \u00b6 topological order\uff1a\u62d3\u6251\u5e8f\uff0ctopological sequence\uff1a\u62d3\u6251\u5e8f\u5217 \u57fa\u672c\u6982\u5ff5 \u5224\u65ad\u6709\u5411\u56fe\u662f\u5426\u6709\u73af\uff1adfs\uff0c\u62d3\u6251\u6392\u5e8f\uff0c\u6c42\u5173\u952e\u8def\u5f84 \u67e5\u627e \u00b6 B \u6811 \u548c B+ \u6811\u7684\u533a\u522b\uff08\u81f3\u591a\uff0c\u81f3\u5c11\uff09 B\u6811\u4e2d\u7ed3\u70b9\u548c\u5173\u952e\u5b57\u7684\u533a\u522b \u6392\u5e8f \u00b6 \u76f4\u63a5\u63d2\u5165\u6392\u5e8f \u6bd4 \u6298\u534a\u63d2\u5165\u6392\u5e8f\u7684\u6bd4\u8f83\u6b21\u6570\u591a\u4e86 \u5e0c\u5c14\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \u5806\u6392\u7684\u521d\u59cb\u5316\uff0c\u63d2\u5165\uff0c\u5220\u9664\uff1b\u8981\u6ce8\u610f\u5c0f\u5143\u7d20\u4e0b\u5760\u65f6\u8981\u4e0b\u5760\u591a\u6b21 \u9009\u62e9\u6392\u5e8f\u6bd4\u8f83\u6b21\u6570\u662f\u56fa\u5b9a\u7684\uff0c\u5f52\u5e76\u6392\u5e8f\u6bd4\u8f83\u6b21\u6570\u7684\u6570\u91cf\u7ea7\u662f\u56fa\u5b9a\u7684 \u57fa\u6570\u6392\u5e8f LSD\uff08\u6700\u4f4e\u4f4d\u4f18\u5148\uff09 \u7684\u610f\u601d\u662f\u5148\u4ece\u6700\u4f4e\u4e3a\u5f00\u59cb\u6392\uff0c\u800c\u4e0d\u662f\u6700\u4f4e\u4f4d\u7684\u91cd\u8981\u6027\u6700\u5927 \u5916\u90e8\u6392\u5e8f\u5e38\u7528\u5f52\u5e76\u6392\u5e8f \u603b\u7684\u9700\u8981\u6ce8\u610f\u7684\u70b9\uff1a \u7a33\u5b9a\u7684\u6392\u5e8f\uff1a\u63d2\u5165\uff0c\u5192\u6ce1\uff0c\u5f52\u5e76\uff0c\u57fa\u6570 \u6bcf\u4e2a\u7b97\u6cd5\u7684\u65f6\u95f4\u7a7a\u95f4\u590d\u6742\u5ea6 \u6700\u597d\u60c5\u51b5\u4e0b\u5b9e\u8df5\u590d\u6742\u5ea6\u53ef\u4ee5\u5230\u8fbe\u7ebf\u6027\uff1a\u5192\u6ce1\u6392\u5e8f\uff0c\u76f4\u63a5\u63d2\u5165 \u6392\u5e8f\u6709\u591a\u4e2a\u6761\u4ef6\u662f\uff0c\u5148\u6bd4\u8f83\u91cd\u8981\u6027\u5c0f\u7684\uff0c\u518d\u7528\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5\u6bd4\u8f83\u91cd\u8981\u6027\u5927\u7684","title":"\u6570\u636e\u7ed3\u6784"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_1","text":"\u7b97\u6cd5\u53ef\u89c6\u5316 \u5177\u4f53\u5b9e\u73b0\u65b9\u5f0f\u53ef\u80fd\u6709\u51fa\u5165 \u738b\u9053\u8ba1\u7b97\u673a\u8003\u7814 \u6570\u636e\u7ed3\u6784_\u54d4\u54e9\u54d4\u54e9_bilibili","title":"\u6570\u636e\u7ed3\u6784"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#1","text":"","title":"1 \u7eea\u8bba"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#11","text":"\u6570\u636e\u7ed3\u6784\u4e09\u8981\u7d20\uff1a \u903b\u8f91\u7ed3\u6784 \u7269\u7406\u7ed3\u6784 \u6570\u636e\u7684\u8fd0\u7b97 \u6570\u636e\u903b\u8f91\u7ed3\u6784\uff1a \u96c6\u5408 \u7ebf\u6027 \u6811\u5f62 \u56fe \u6570\u636e\u5b58\u50a8\u7ed3\u6784\uff1a \u987a\u5e8f\u5b58\u50a8 \u94fe\u5f0f\u5b58\u50a8 \u7d22\u5f15\u5b58\u50a8 \u6563\u5217\u5b58\u50a8\uff08\u54c8\u5e0c\u5b58\u50a8\uff09","title":"1.1 \u6570\u636e\u7ed3\u6784\u57fa\u672c\u6982\u5ff5"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#12","text":"\u7b97\u6cd5\u4e94\u4e2a\u7279\u6027\uff1a \u6709\u7a77\u6027 \u786e\u5b9a\u6027 \u53ef\u884c\u6027 \u8f93\u5165 \u8f93\u51fa \u597d\u7b97\u6cd5\u7684\u7279\u8d28\uff1a \u6b63\u786e\u6027 \u53ef\u8bfb\u6027 \u5065\u58ee\u6027 \u9ad8\u6548\u7387\u548c\u4f4e\u5b58\u50a8 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u5e38\u5bf9\u5e42\u6307\u9636 \\(O(n^3)<O(2^n)<O(n!)<O(n^n)\\) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u7a7a\u95f4\u590d\u6742\u5ea6\u662f\u6307\u7b97\u6cd5\u9700\u8981\u7684\u8f85\u52a9\u7a7a\u95f4\u7684\u590d\u6742\u5ea6 \u9012\u5f52\u65f6\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c \\(O(mn)\\) \uff0c \\(O(m)\\) \u662f\u6bcf\u6b21\u9012\u5f52\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c \\(O(n)\\) \u662f\u9012\u5f52\u6df1\u5ea6\u590d\u6742\u5ea6","title":"1.2 \u7b97\u6cd5\u7684\u57fa\u672c\u6982\u5ff5"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#2","text":"","title":"2 \u7ebf\u6027\u8868"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#21","text":"\u7ebf\u6027\u8868\u7684\u57fa\u672c\u64cd\u4f5c\uff1a\u521b\u9500\uff0c\u589e\u5220\u6539\u67e5","title":"2.1 \u7ebf\u6027\u8868\u7684\u57fa\u672c\u6982\u5ff5\u548c\u57fa\u672c\u64cd\u4f5c"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#22","text":"\u987a\u5e8f\u5b58\u50a8\u7684\u7ebf\u6027\u8868 \u5b9e\u73b0\u65b9\u5f0f\uff1a\u9759\u6001\u5206\u914d\uff0c\u52a8\u6001\u5206\u914d","title":"2.2 \u987a\u5e8f\u8868"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#23","text":"\u5355\u94fe\u8868\uff1a\u5e26\u5934\u7ed3\u70b9\u548c\u4e0d\u5e26\u5934\u7ed3\u70b9 \u4e0d\u5e26\u5934\u7ed3\u70b9\u65f6\uff0c\u5bf9\u7b2c\u4e00\u4f4d\u7ed3\u70b9\u64cd\u4f5c\u6709\u65f6\u8981\u7279\u6b8a\u5904\u7406 \u6307\u5b9a\u7ed3\u70b9\u7684\u524d\u63d2\u64cd\u4f5c\uff08\u7ed9\u4e00\u4e2a\u7ed3\u70b9\u548c\u8981\u63d2\u5165\u7684\u6570\u636e\uff09\uff0c\u53ef\u4ee5\u5728\u7ed3\u70b9\u540e\u9762\u63d2\u5165\u7136\u540e\u4ea4\u6362\u4e24\u8005\u7684\u6570\u636e \u6307\u5b9a\u7ed3\u70b9\u7684\u5220\u9664\u64cd\u4f5c\uff0c\u5f97\u5230\u540e\u7ee7\u7ed3\u70b9\u7684\u6570\u636e\u5e76\u5220\u9664\u540e\u7ee7\u7ed3\u70b9 \u5934\u63d2\u53ef\u4ee5\u7528\u4e8e\u94fe\u8868\u7684\u9006\u7f6e \u53cc\u94fe\u8868 \u5faa\u73af\u94fe\u8868 \u5faa\u73af\u5355\u94fe\u8868 \u5faa\u73af\u53cc\u94fe\u8868 \u9759\u6001\u94fe\u8868","title":"2.3 \u94fe\u8868"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#3","text":"","title":"3 \u6808\u548c\u961f\u5217"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#31","text":"LIFO \u6808\u7684\u5b9e\u73b0\uff1a \u987a\u5e8f\u5b9e\u73b0 \u521d\u59cb\u5316 top = -1 \u521d\u59cb\u5316 top = 0 \u5171\u4eab\u6808 \u94fe\u5f0f\u5b9e\u73b0\uff0c\u7528\u5355\u94fe\u8868\u5b9e\u73b0\uff0c\u5934\u63d2\uff0c\u5934\u5220 \u5361\u7279\u5170\u6570\uff1a $$ \\frac{1}{n+1}C^n_{2n} $$","title":"3.1 \u6808"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#32","text":"FIFO \u961f\u5217\u7684\u5b9e\u73b0: \u987a\u5e8f\u5b9e\u73b0 \u8bbe\u7f6e\u961f\u9996\u548c\u961f\u5c3e\u6307\u9488\uff0c\u961f\u5c3e\u6307\u5411\u961f\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a \u5224\u65ad\u4e3a\u7a7a\uff0c rear == front \u5224\u65ad\u961f\u5217\u7a7a\u6216\u6ee1 (rear + 1) % size == front\uff08\u5faa\u73af\u961f\u5217\uff09\uff0c\u7559\u4e00\u4e2a\u4f4d\u7f6e\u7684\u539f\u56e0\u662f\u4e3a\u4e86\u4e0d\u548c\u5224\u65ad\u4e3a\u7a7a\u51b2\u7a81 \u5b9a\u4e49\u961f\u5217\u957f\u5ea6\u7684\u53d8\u91cf\uff0c\u5b9a\u4e49\u7684\u8bdd\u961f\u5217\u53ef\u4ee5\u591a\u4e00\u4e2a\u7a7a\u95f4\uff0c\u4e14\u4e00\u4e2a int \u5360\u7528\u7684\u7a7a\u95f4\u5f88\u53ef\u80fd\u6bd4\u5b58\u50a8\u7684\u961f\u5217\u5143\u7d20\u5c0f \u5b9a\u4e49 tag \u8868\u793a\u4e0a\u4e00\u6b21\u64cd\u4f5c\u662f\u63d2\u5165\u8fd8\u662f\u5220\u9664\uff0c0 \u8868\u793a\u5220\u9664\uff0c1 \u8868\u793a\u63d2\u5165\uff1btag \u521d\u59cb\u5316\u4e3a 0\uff08\u53ea\u6709\u63d2\u5165\u624d\u53ef\u80fd\u5bfc\u81f4\u961f\u7a7a\uff09 \u961f\u5217\u5143\u7d20\u4e2a\u6570 \uff1a(rear + size - front) % size \u94fe\u5f0f\u5b9e\u73b0 \u5b9a\u4e49\u5934\u6307\u9488\u548c\u5c3e\u6307\u9488 \u5c3e\u63d2\u9996\u5220 \u53cc\u7aef\u961f\u5217\uff1a \u961f\u9996\u548c\u961f\u5c3e\u90fd\u53ef\u4ee5\u63d2\u5165\u548c\u5220\u9664 \u8f93\u5165\u53d7\u9650\u7684\u53cc\u7aef\u961f\u5217\uff1a\u4e00\u7aef\u63d2\u5165\uff0c\u53cc\u7aef\u8f93\u51fa \u8f93\u51fa\u53d7\u9650\u7684\u53cc\u7aef\u961f\u5217\uff0c\u4e00\u7aef\u8f93\u51fa\uff0c\u53cc\u7aef\u8f93\u51fa","title":"3.2 \u961f\u5217"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#33","text":"\u6808\u7684\u5e94\u7528\uff1a \u62ec\u53f7\u5339\u914d \u8868\u8fbe\u5f0f\u6c42\u503c \u6ce2\u5170\u8868\u8fbe\u5f0f\uff08\u524d\u7f00\u8868\u8fbe\u5f0f\uff09\uff0c\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\uff08\u540e\u7f00\u8868\u8fbe\u5f0f\uff09\uff1b \u8ba1\u7b97\u540e\u7f00\u8868\u8fbe\u5f0f\u65f6\u6808\u4e2d\u5b58\u653e\u64cd\u4f5c\u6570\uff0c\u4ece\u5de6\u5f80\u53f3\u626b\u63cf\u540e\u7f00\u8868\u8fbe\u5f0f\uff1b \u8ba1\u7b97\u524d\u7f00\u8868\u8fbe\u5f0f\u65f6\u5b58\u653e\u64cd\u4f5c\u6570\uff0c\u4ece\u53f3\u5f80\u5de6\u626b\u63cf\u524d\u7f00\u8868\u8fbe\u5f0f\uff0c\u9700\u8981\u6ce8\u610f\u9664\u6cd5\u548c\u51cf\u6cd5\u65f6\u64cd\u4f5c\u6570\u8fd0\u7b97\u7684\u987a\u5e8f\u548c\u540e\u7f00\u8868\u8fbe\u5f0f\u4e0d\u4e00\u6837\uff1b \u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6362\u540e\u7f00\u8868\u8fbe\u5f0f\u65f6\u6808\u4e2d\u5b58\u653e\u8fd0\u7b97\u7b26\u548c\u62ec\u53f7\uff0c\u5f39\u51fa\u4f18\u5148\u7ea7\u5927\u4e8e\u6216\u7b49\u4e8e\u8981\u538b\u6808\u7684\u8fd0\u7b97\u7b26\uff0c\u9047\u5230\u53f3\u62ec\u53f7\u5c31\u90fd\u5f39\u51fa\u76f4\u5230\u9047\u5230\u5de6\u62ec\u53f7 \u4e2d\u7f00\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\uff1a\u4e2d\u7f00\u8f6c\u540e\u7f00\uff0c\u8ba1\u7b97\u540e\u7f00\uff1b\u8981\u7528\u5230 2 \u4e2a\u6808\u4e00\u8d77\u64cd\u4f5c \u9012\u5f52\uff0c\u51fd\u6570\u8c03\u7528\u65f6\u5728\u6808\u4e2d\u538b\u5165\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\u548c\u51fd\u6570\u4e2d\u9700\u8981\u7684\u53d8\u91cf \u961f\u5217\u7684\u5e94\u7528\uff1a \u6811\u7684\u5c42\u6b21\u904d\u5386 \u56fe\u7684bfs \u64cd\u4f5c\u7cfb\u7edf\u5206\u914d\u7cfb\u7edf\u8d44\u6e90\uff0cFCFS\uff0cfirst come first server","title":"3.3 \u6808\u548c\u961f\u5217\u7684\u5e94\u7528"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#34","text":"\u4e8c\u7ef4\u6570\u7ec4\u7684\u884c\u4f18\u5148\u548c\u5217\u4f18\u5148 \u5bf9\u79f0\u77e9\u9635\uff1a\u53ea\u5b58\u50a8\u5bf9\u89d2\u7ebf\u548c\u4e0a\u6216\u4e0b\u4e09\u89d2\u533a\uff0c\u7136\u540e\u7528\u884c\u4f18\u5148\u6216\u8005\u5217\u4f18\u5148\u5b58\u50a8 \u4e09\u89d2\u77e9\u9635\uff1a\u548c\u5bf9\u79f0\u77e9\u9635\u7c7b\u4f3c\uff0c\u4e0a\u4e09\u89d2\u77e9\u9635\u591a\u5b58\u50a8\u4e00\u4e2a\u4e0b\u4e09\u89d2\u4e2d\u7684\u5e38\u6570\uff0c\u4e0b\u4e09\u89d2\u7c7b\u4f3c \u4e09\u5bf9\u89d2\u77e9\u9635\uff08\u5e26\u72b6\u77e9\u9635\uff09\uff1a\u53ea\u5b58\u50a8 \\(|i-j| <= 1\\) \u7684\u5143\u7d20\uff0c\u9664\u4e86\u7b2c\u4e00\u884c\u548c\u6700\u540e\u4e00\u884c\u6bcf\u884c\u90fd\u6709\u4e09\u4e2a\u5143\u7d20 \u7a00\u758f\u77e9\u9635\uff1a\u4e09\u5143\u7ec4\uff0c\u5341\u5b57\u94fe\u8868","title":"3.4 \u7279\u6b8a\u77e9\u9635\u538b\u7f29\u5b58\u50a8"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#4","text":"","title":"4 \u4e32"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#41","text":"\u987a\u5e8f\u5b58\u50a8 \u94fe\u5f0f\u5b58\u50a8","title":"4.1 \u4e32\u7684\u5b58\u50a8\u7ed3\u6784"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#42","text":"\u4e3b\u4e32\uff0c\u5b50\u4e32\uff0c\u6a21\u5f0f\u4e32 \u6734\u7d20\u7684\u5339\u914d\u7b97\u6cd5\u590d\u6742\u5ea6\uff1a \\(O(mn)\\) KMP\uff1a\u5b57\u7b26\u4e32\u4e0b\u6807\u4ece 0 \u5f00\u59cb // \u5b57\u7b26\u4e32\u4e0b\u6807\u4ece 0 \u5f00\u59cb // next void getNext ( char * p , int * next ) { next [ 0 ] = -1 ; int i = 0 , j = -1 ; while ( i < strlen ( p )) if ( j == -1 || p [ i ] == p [ j ]){ i ++ , j ++ ; next [ i ] = j ; } else j = next [ j ]; } // KMP // \u4e3b\u4f53\u5b57\u7b26\u4e32 \u5339\u914d\u5b57\u7b26\u4e32 int KMP ( char * s , char * p ){ int i = 0 ; int j = 0 ; while ( i < strlen ( s ) && j < strlen ( p )) if ( j == -1 || s [ i ] == p [ j ]) i ++ , j ++ ; else j = next [ j ]; // \u8fd4\u56de\u5b58\u5728\u4e0e p \u76f8\u540c\u7684\u5b57\u4e32\u7684\u4f4d\u7f6e if ( j == strlen ( p )) return i - j ; else return -1 ; } KMP \u4f18\u5316\uff1anextval \u6570\u7ec4","title":"4.2 \u4e32\u7684\u6a21\u5f0f\u5339\u914d"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#5","text":"\u8981\u6ce8\u610f\u4e0d\u8981\u628a\u6811\u7684\u6027\u8d28\uff0c\u4e8c\u53c9\u6811\u7684\u6027\u8d28\uff0c\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u6027\u8d28\u641e\u6df7\uff0c\u5f53\u7136\uff0c\u4e8c\u53c9\u6811\u4e5f\u6709\u6811\u7684\u6027\u8d28\uff0c\u5b8c\u5168\u4e8c\u53c9\u6811\u4e5f\u6709\u4e8c\u53c9\u6811\u7684\u6027\u8d28","title":"5 \u6811"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#51","text":"\u57fa\u7840\u77e5\u8bc6\uff1a \u6811\u7684\u6982\u5ff5 \u7956\u5148\u8282\u70b9\uff0c\u5b50\u5b59\u7ed3\u70b9\uff0c\u7236\u8282\u70b9\uff0c\u5b69\u5b50\u7ed3\u70b9\uff0c\u5144\u5f1f\u7ed3\u70b9\uff0c\u5802\u5144\u5f1f\u7ed3\u70b9 \u8def\u5f84\uff08\u4ece\u4e0a\u5230\u4e0b,\u5144\u5f1f\u7ed3\u70b9\u4e4b\u95f4\u4e0d\u5b58\u5728\u8def\u5f84\uff09\uff0c\u8def\u5f84\u957f\u5ea6\uff0c\u6811\u7684\u8def\u5f84\u957f\u5ea6\uff08\u6839\u5230\u6240\u6709\u7ed3\u70b9\u8def\u5f84\u957f\u5ea6\u4e4b\u548c\uff09 \u7ed3\u70b9\u7684\u5c42\u6b21\uff08\u6df1\u5ea6\uff09\uff0c\u5ea6\uff0c\u6811\u7684\u9ad8\u5ea6\uff08\u6df1\u5ea6\uff09\uff0c\u6811\u7684\u5ea6\uff08\u5404\u7ed3\u70b9\u7684\u5ea6\u7684\u6700\u5927\u503c\uff09 \u6709\u5e8f\u6811\uff08\u4e0d\u53ef\u4ee5\u4ea4\u6362\uff09\uff0c\u65e0\u5e8f\u6811 \u68ee\u6797 \u6811\u7684\u6027\u8d28 \u7ed3\u70b9\u6570 = \u603b\u5ea6\u6570 + 1 \u5ea6\u4e3a m \u7684\u6811 \u548c m \u53c9\u6811\u7684\u533a\u522b\uff0cm \u53c9\u6811\u7684\u5ea6\u4e0d\u4e00\u5b9a\u4e3a m \u5ea6\u4e3a m \u7684\u6811\u7b2c i \u5c42\u81f3\u591a\u6709 \\(m^{i-1}\\) \u5404\u7ed3\u70b9 \u9ad8\u5ea6\u4e3a h \u7684 m \u53c9\u6811\u81f3\u591a\u6709 \\(\\frac{m^h-1}{m-1}\\) \u9ad8\u5ea6\u4e3a h \u7684 m \u53c9\u6811\u81f3\u5c11\u6709 h \u4e2a\u7ed3\u70b9\uff0c\u9ad8\u5ea6\u4e3a h\uff0c\u5ea6\u4e3a m \u7684\u6811\u81f3\u5c11\u6709 h+m-1 \u4e2a\u7ed3\u70b9 n \u4e2a\u7ed3\u70b9\u7684 m \u53c9\u6811\u7684\u6700\u5c0f\u9ad8\u5ea6 \\(ceil(\\ \\ log_m(n(m-1)+1)\\ \\ )\\)","title":"5.1 \u6811\u7684\u57fa\u7840\u77e5\u8bc6\u548c\u6027\u8d28"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#52","text":"\u4e8c\u53c9\u6811\u7279\u70b9\uff1a \u6bcf\u4e2a\u8282\u70b9\u81f3\u591a\u53ea\u6709\u4e24\u68f5\u5b50\u6811 \u4e8c\u53c9\u6811\u662f\u6709\u5e8f\u6811 \u7279\u6b8a\u7684\u4e8c\u53c9\u6811: \u6ee1\u4e8c\u53c9\u6811\uff0c\u4e0d\u5b58\u5728\u5ea6\u4e3a 1 \u7684\u7ed3\u70b9 \u5b8c\u5168\u4e8c\u53c9\u6811 \uff0c\u81f3\u591a\u53ea\u6709\u4e00\u4e2a\u5ea6\u4e3a 1 \u7684\u7ed3\u70b9\uff0c\u53ea\u6709\u4e00\u4e2a\u5b69\u5b50\u7684\u7ed3\u70b9\u4e00\u5b9a\u662f\u6709\u5de6\u5b69\u5b50 \u4e8c\u53c9\u6392\u5e8f\u6811 \u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u4e0d\u8981\u6c42\u662f\u4e8c\u53c9\u6392\u5e8f\u6811 \u4e8c\u53c9\u6811\u6027\u8d28\uff1a \u6811\u7684\u6027\u8d28 \\(n=n_0+n_1+n_2,n=2n_2+n_1+1\\) \u5f97\u5230 \\(n_0 = n_2 + 1\\) \u5b8c\u5168\u4e8c\u53c9\u6811\u6027\u8d28\uff1a \u9ad8\u5ea6 \\(h=ceil(\\ log_2(n+1)\\ ) \u6216 floor(\\ log_2n\\ )+1\\) \\(n_1=0\u62161\\) \\(n_0=n_2+1\\) \u5f97 \\(n_0+n_2\\) \u4e00\u5b9a\u662f\u5947\u6570 \u82e5\u5b8c\u5168\u4e8c\u53c9\u6811\u6709 2k \u4e2a\u7ed3\u70b9\uff0c\u5219 \\(n_1=1,n_0=k,n_2=k-1\\) \uff0c\u82e5\u5b8c\u5168\u4e8c\u53c9\u6811\u6709 2k-1 \u4e2a\u7ed3\u70b9\uff0c\u5219 \\(n_1=0,n_0=k,n_2=k-1\\) \u4e8c\u53c9\u6811\u7684\u5b58\u50a8\u7ed3\u6784 \u987a\u5e8f\u5b58\u50a8 \u94fe\u5f0f\u5b58\u50a8 n\u4e2a\u7ed3\u70b9\u6709 2n \u4e2a\u6307\u9488\uff0cn-1 \u4e2a\u6ca1\u6709\u6307\u5411 NULL\uff0c\u6240\u4ee5\u6709 n+1 \u4e2a\u6307\u5411 NULL \u4e8c\u53c9\u94fe\u8868\uff0c\u4e09\u53c9\u94fe\u8868\uff08\u5e26\u7236\u7ed3\u70b9\uff09","title":"5.2 \u4e8c\u53c9\u6811"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#53","text":"\u5c42\u6b21\u904d\u5386\uff1a\u961f\u5217 \u5148\u5e8f\u904d\u5386\uff1a\u524d\u7f00\u8868\u8fbe\u5f0f \u4e2d\u5e8f\u904d\u5386\u4e2d\uff1a\u4e2d\u7f00\u8868\u8fbe\u5f0f\uff08\u65e0\u62ec\u53f7\uff09 \u540e\u5e8f\u904d\u5386\uff1a\u540e\u7f00\u8868\u8fbe\u5f0f \u975e\u9012\u5f52\u7684\u4ee3\u7801\u5b9e\u73b0\u65b9\u5f0f\uff1a\u5229\u7528\u6808\uff1b\u540e\u7eed\u904d\u5386\u7684\u975e\u9012\u5f52\u6bd4\u8f83\u96be \u7531\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 \u524d\u5e8f+\u4e2d\u5e8f \u540e\u5e8f+\u4e2d\u5e8f \u5c42\u5e8f+\u4e2d\u5e8f","title":"5.3 \u4e8c\u53c9\u6811\u7684\u904d\u5386"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#54","text":"\u4e8c\u53c9\u6811\u7684\u7ebf\u7d22\u5316\u548c\u7ebf\u7d22\u4e8c\u53c9\u6811\u7684\u904d\u5386\u7684\u4ee3\u7801 \u589e\u52a0 2 \u4e2a\u6807\u5fd7\u4f4d\u8868\u793a\u5de6\u53f3\u5b69\u5b50\u6307\u9488\u662f\u5426\u662f\u7ebf\u7d22\uff0c\u6ce8\u610f\u5728\u7ebf\u7d22\u4e8c\u53c9\u6811\u904d\u5386\u65f6\u904d\u5386\u5de6\u53f3\u5b50\u6811\u65f6\u8981\u5224\u65ad\u662f\u5426\u662f\u524d\u540e\u7ee7\uff08\u5982\u679c\u4e0d\u5224\u65ad\uff0c\u5728\u524d\u5e8f\u904d\u5386\u65f6\u4f1a\u7ed5\u5708\uff09 \u4e2d\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811 \u5148\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811 \u540e\u5e8f\u7ebf\u7d22\u4e8c\u53c9\u6811 \u4e2d\u5e8f\u524d\u9a71\uff0c\u4e2d\u5e8f\u540e\u7ee7 \u524d\u5e8f\u524d\u9a71\uff0c\u524d\u5e8f\u540e\u7ee7 \u540e\u5e8f\u524d\u9a71\uff0c\u540e\u5e8f\u540e\u7ee7 \u4e8c\u53c9\u6811\u7684\u7ebf\u7d22\u5316\uff1a \u524d\u5e8f\u7ebf\u7d22\u5316\u65f6\u8981\u6ce8\u610f\u5224\u65ad tag\uff1b \u51fd\u6570\u4f53\u4e3b\u8981\u7531 2 \u4e2a\u7ebf\u7d22\u5316\u5de6\u53f3\u5b50\u6811\u7684\u9012\u5f52\u8c03\u7528\u7ec4\u6210\uff0c\u8fd8\u6709\u5229\u7528\u53c2\u6570\u7684 pre \u5efa\u7acb pre \u7684\u540e\u7ee7 \u548c \u5f53\u524d\u7ed3\u70b9\u7684\u524d\u9a71\uff1b\u4e0d\u540c\u7684\u904d\u5386\u65b9\u5f0f\u987a\u5e8f\u4e0d\u540c \u7ebf\u7d22\u4e8c\u53c9\u6811\u4e2d\u627e\u524d\u5e8f\u548c\u540e\u7ee7\uff1a \u4e2d\u5e8f \u5148\u5e8f\uff1a\u627e\u524d\u9a71\u7ed3\u70b9\u5982\u679c\u6ca1\u6709\u7236\u8282\u70b9\u627e\u4e0d\u5230\uff0c\u5982\u679c\u6709\u7236\u8282\u70b9\u9700\u8981\u5206\u56db\u79cd\u60c5\u51b5\uff08\u7b2c\u56db\u79cd\u6839\u7ed3\u70b9\uff09 \u540e\u5e8f\uff1a\u627e\u540e\u7ee7\u5e8f\u4e5f\u9700\u8981\u4e09\u53c9\u94fe\u8868\uff0c\u5206\u56db\u79cd\u60c5\u51b5\uff08\u7b2c\u56db\u79cd\u6839\u7ed3\u70b9\uff09","title":"5.4 \u7ebf\u7d22\u4e8c\u53c9\u6811"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#55","text":"\u5b58\u50a8\u7ed3\u6784\uff1a \u53cc\u4eb2\u8868\u793a\u6cd5\uff08\u987a\u5e8f\u5b58\u50a8\uff09\uff0c\u589e\u52a0\u7ed3\u70b9\uff0c\u5220\u9664\u7ed3\u70b9 \u5b69\u5b50\u8868\u793a\u6cd5\uff08\u987a\u5e8f+\u94fe\u5f0f\uff09 \u5b69\u5b50\u5144\u5f1f\u8868\u793a\u6cd5\uff08\u94fe\u5f0f\u5b58\u50a8\uff09\uff0c\u4e24\u4e2a\u6307\u9488\uff1a\u7b2c\u4e00\u4e2a\u5b69\u5b50\u548c\u53f3\u5144\u5f1f\u6307\u9488\uff08\u6811\u548c\u4e8c\u53c9\u6811\u7684\u8f6c\u6362\uff0c\u68ee\u6797\u548c\u4e8c\u53c9\u6811\u7684\u8f6c\u6362\uff09 \u6811\u7684\u904d\u5386\uff1a \u5148\u6839\u904d\u5386\uff08\u548c\u8f6c\u6362\u4e3a\u4e8c\u53c9\u6811\u540e\u7684\u5148\u5e8f\u904d\u5386\u4e00\u6837 \uff09 \u540e\u6839\u904d\u5386\uff08\u548c\u8f6c\u6362\u4e3a\u4e8c\u53c9\u6811\u540e\u7684\u4e2d\u5e8f\u904d\u5386\u4e00\u6837 \uff09 \u5c42\u6b21\u904d\u5386\uff08\u961f\u5217\uff0cbfs\uff09 \u68ee\u6797\u7684\u904d\u5386\uff1a \u5148\u5e8f\u904d\u5386\uff0c\u4f9d\u5e8f\u5bf9\u5b50\u6811\u8fdb\u884c\u5148\u5e8f\u904d\u5386\uff08\u548c\u8f6c\u6362\u4e3a\u4e8c\u53c9\u6811\u540e\u7684\u5148\u5e8f\u904d\u5386\u4e00\u6837 \uff09 \u4e2d\u5e8f\u904d\u5386\uff0c\u4f9d\u5e8f\u5bf9\u5b50\u6811\u8fdb\u884c\u540e\u6839\u904d\u5386\uff08\u548c\u8f6c\u6362\u4e3a\u4e8c\u53c9\u6811\u540e\u7684\u4e2d \u5e8f\u904d\u5386\u4e00\u6837 \uff09","title":"5.5 \u6811\u7684\u5b58\u50a8\u7ed3\u6784\u548c\u904d\u5386"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#56","text":"\u4e8c\u53c9\u6392\u5e8f\u6811\uff08BST\uff09\uff1a \u6784\u9020\uff0c\u67e5\u627e\uff0c\u589e\u52a0 \u5220\u9664\uff1a\u8981\u5220\u9664\u7684\u7ed3\u70b9\u65f6\u53f6\u5b50\u8282\u70b9\uff0c\u53ea\u6709\u5de6\u5b50\u6811\uff0c\u53ea\u6709\u53f3\u5b50\u6811\uff0c\u5de6\u53f3\u5b50\u6811\u90fd\u6709\uff08\u628a\u53f3\u5b50\u6811\u6700\u5c0f\u7684\u6570\u6216\u8005\u5de6\u5b50\u6811\u6700\u5927\u7684\u6570\u642c\u4e0a\u6765\uff0c\u5373\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u76f4\u63a5\u524d\u9a71\u548c\u76f4\u63a5\u540e\u7ee7\uff09 \u5e73\u5747\u67e5\u627e\u957f\u5ea6\uff08ASL\uff09\uff0c\u67e5\u627e\u5931\u8d25\u7684ASL \u5e73\u8861\u4e8c\u53c9\u6811\uff08AVL\uff0c\u53d1\u660e\u4eba\u9996\u5b57\u6bcd\u7ec4\u6210 \u6216\u8005 BBT\uff09\uff1a\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u7279\u6b8a\u5f62\u5f0f\uff0c\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u4e0d\u8d85\u8fc7 1 \u5e73\u8861\u56e0\u5b50\uff0c\u7ed3\u70b9\u7684\u5e73\u8861\u56e0\u5b50=\u5de6\u5b50\u6811\u9ad8-\u53f3\u5b50\u6811\u9ad8\uff0cAVL \u4e2d\u6240\u6709\u7ed3\u70b9\u7684\u5e73\u8861\u56e0\u5b50\u53ea\u6709 -1\uff0c0\uff0c1 \u6700\u5c0f\u4e0d\u5e73\u8861\u5b50\u6811 \u8c03\u6574\u6700\u5c0f\u4e0d\u5e73\u8861\u5b50\u6811 LL\uff0c\u53f3\u65cb RR\uff0c\u5de6\u65cb LR\uff0c\u5148\u5de6\u65cb\uff0c\u518d\u53f3\u65cb RL\uff0c\u5148\u53f3\u65cb\uff0c\u518d\u5de6\u65cb \u67e5\u627e\u6548\u7387\u5206\u6790\uff1a \\(O(log_2n)\\) : \u5047\u8bbe \\(n_h\\) \u8868\u793a\u9ad8\u5ea6\u4e3a \\(h\\) \u7684\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u7684\u6700\u5c11\u7ed3\u70b9\u6570\uff0c\u6709 \\(n_0=0, n_1=1, n_2=2, n_h=n_{h-1}+n_{h-2}+1\\) \u54c8\u592b\u66fc\u6811\uff08\u662f\u4e8c\u53c9\u6811\uff09\uff1a \u7ed3\u70b9\u7684\u6743\uff0c\u7ed3\u70b9\u7684\u5e26\u6743\u8def\u5f84\u957f\u5ea6\uff1a\u6839\u5230\u7ed3\u70b9\u7684\u8def\u5f84\u957f\u5ea6 x \u7ed3\u70b9\u6743\u503c\uff0c\u6811\u7684\u5e26\u6743\u8def\u5f84\u957f\u5ea6\uff08WPL\uff09\uff1a\u6811\u4e2d\u6240\u6709\u53f6\u5b50\u7ed3\u70b9\u7684\u5e26\u6743\u8def\u5f84\u957f\u5ea6\u4e4b\u548c \u54c8\u592b\u66fc\u6811\uff1aWPL\u6700\u5c0f\u7684\u4e8c\u53c9\u6811\uff0c\u4e5f\u79f0\u6700\u4f18\u4e8c\u53c9\u6811 \u54c8\u592b\u66fc\u6811\u7684\u6784\u9020\uff1a\u5148\u9009 2 \u4e2a\u6743\u503c\u6700\u5c0f\u7684\u7ed3\u70b9\u52a0\u8d77\u6765\u53d8\u6210\u4e00\u4e2a\u65b0\u7684\u7ed3\u70b9 ..... \u54c8\u592b\u66fc\u6811\u7684\u603b\u7ed3\u70b9\u6811\u4e3a \\(2n-1\\) \uff0cn \u4e2a\u53f6\u5b50\u7ed3\u70b9\uff0c\u591a\u51fa\u6765 n-1 \u4e2a\u65b0\u7ed3\u70b9\uff1b\u54c8\u592b\u66fc\u6811\u4e0d\u5b58\u5728\u5ea6\u4e3a 1 \u7684\u7ed3\u70b9\uff1b\u54c8\u592b\u66fc\u6811\u5e76\u4e0d\u552f\u4e00\uff0c\u4f46 WPL \u4e00\u5b9a\u6700\u4f18 \u54c8\u592b\u66fc\u7f16\u7801\uff0c\u975e\u524d\u7f00\u7f16\u7801\u4f1a\u6709\u6b67\u4e49","title":"5.6 \u4e8c\u53c9\u6392\u5e8f\u6811\uff0c\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u54c8\u592b\u66fc\u6811"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#57","text":"\u7ea2\u9ed1\u6811\u662f\u6ee1\u8db3\u4ee5\u4e0b\u7ea2\u9ed1\u6027\u8d28\u7684\u4e8c\u53c9\u6392\u5e8f\u6811\uff08\u4e0d\u662f\u4e8c\u53c9\u5e73\u8861\u6811\uff09\uff1a \u6bcf\u4e2a\u7ed3\u70b9\u662f\u7ea2\u8272\u6216\u8005\u9ed1\u8272\u7684 \u6839\u7ed3\u70b9\u662f\u9ed1\u8272\u7684 \u53f6\u7ed3\u70b9\uff08\u865a\u6784\u7ed3\u70b9\uff0cNULL\uff09\u90fd\u662f\u9ed1\u8272\u7684 \u4e0d\u5b58\u5728\u76f8\u90bb\u7684\u7ea2\u7ed3\u70b9 \u5bf9\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u4ece\u8be5\u7ed3\u70b9\u5230\u4efb\u4e00\u53f6\u7ed3\u70b9\u7684\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u9ed1\u7ed3\u70b9\u7684\u6570\u91cf\u76f8\u540c\uff08\u9ed1\u9ad8\uff09\uff1b\u6839\u7684\u9ed1\u9ad8\u662f\u7ea2\u9ed1\u6811\u7684\u9ed1\u9ad8 \u7ed3\u8bba1\uff1a \u4ece\u6839\u5230\u53f6\u7ed3\u70b9\u7684\u6700\u957f\u8def\u5f84\u4e0d\u5927\u4e8e\u6700\u77ed\u8def\u5f84\u76842\u500d \u4ece\u6839\u5230\u4efb\u4e00\u53f6\u7ed3\u70b9\u7684\u7b80\u5355\u8def\u5f84\u6700\u77ed\u65f6\uff0c\u8fd9\u6761\u8def\u5f84\u5fc5\u7136\u5168\u662f\u9ed1\u7ed3\u70b9 \u5f53\u67d0\u6761\u8def\u5f84\u6700\u957f\u65f6\uff0c\u8fd9\u6761\u8def\u5f84\u662f\u7531\u9ed1\u7ed3\u70b9\u548c\u7ea2\u7ed3\u70b9\u76f8\u95f4\u6784\u6210\u7684\uff0c\u7ea2\u7ed3\u70b9\u548c\u9ed1\u7ed3\u70b9\u7684\u6570\u91cf\u76f8\u540c \u7ed3\u8bba2\uff1a \u6709n\u4e2a\u5185\u90e8\u7ed3\u70b9\u7684\u7ea2\u9ed1\u6811\u7684\u9ad8\u5ea6 \\(h<=2log_2(n+1)\\) \uff1b\u8bc1\uff1a\u6839\u7684\u9ed1\u9ad8\u81f3\u5c11\u4e3a h/2\uff0c\u4e8e\u662f\u6709 \\(n>=2^{h/2}-1\\) \u5373\u53ef \u7efc\u4e0a\uff1a\u7ea2\u9ed1\u6811\u662f\u9002\u5ea6\u5e73\u8861\u7684\uff0c\u7531AVL\u7684\u9ad8\u5ea6\u5e73\u8861\u53d8\u6210\u4e86\u4efb\u4e00\u7ed3\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u4e0d\u76f8\u5dee2\u500d \u7ea2\u9ed1\u6811\u7684\u63d2\u5165\u7ed3\u70b9 \\(z\\) \uff1a \u7528\u4e8c\u53c9\u67e5\u627e\u6811\u63d2\u5165\u6cd5\u63d2\u5165\uff0c\u5e76\u628a \\(z\\) \u6d82\u6210\u7ea2\u8272\uff0c\u5982\u679c \\(z\\) \u7236\u7ed3\u70b9\u662f\u9ed1\u8272\u7684\uff0c\u65e0\u9700\u505a\u8c03\u6574 \u5982\u679c \\(z\\) \u662f\u6839\u7ed3\u70b9\uff0c\u6d82\u9ed1\u7136\u540e\u6811\u7684\u9ed1\u9ad8 \u52a0\u4e00 \u5982\u679c \\(z\\) \u4e0d\u662f\u6839\u7ed3\u70b9\uff0c\u5e76\u4e14 \\(z.p\\) \u662f\u7ea2\u8272\u7684\uff08 \\(z.p.p\\) \u662f\u9ed1\u8272\u7684\uff09\uff0c\u5206\u4e3a\u4ee5\u4e0b\u4e09\u79cd\u60c5\u51b5\uff1a \u60c5\u51b5\u4e00\uff1a \\(z\\) \u7684\u53d4\u7ed3\u70b9 \\(y\\) \u662f\u9ed1\u8272\u7684\uff0c\u4e14 \\(z\\) \u662f\u53f3\u5b69\u5b50\uff1b\u89e3\u51b3\u529e\u6cd5\uff1a\u5148\u5de6\u65cb\uff08\u53d8\u6210\u4e86\u60c5\u51b5\u4e8c\uff09\uff0c\u518d\u53f3\u65cb \u60c5\u51b5\u4e8c\uff1a \\(z\\) \u7684\u53d4\u7ed3\u70b9 \\(y\\) \u662f\u9ed1\u8272\u7684\uff0c\u4e14 \\(z\\) \u662f\u5de6\u5b69\u5b50\uff1b\u89e3\u51b3\u529e\u6cd5\uff1a\u53f3\u65cb\uff0c \\(z.p\\) \u548c \\(z.p.p\\) \u8981\u4e92\u6362\u989c\u8272 \u5982\u679c \\(z.p\\) \u662f \\(z.p.p\\) \u7684\u53f3\u5b69\u5b50\uff0c\u5219\u548c\u4e0a\u9762\u7684\u4e24\u79cd\u60c5\u51b5\u662f\u5bf9\u79f0\u7684 \u60c5\u51b5\u4e09\uff1a\u5982\u679c \\(z\\) \u7684\u53d4\u7ed3\u70b9 \\(y\\) \u662f\u7ea2\u8272\u7684\uff1b\u4e0d\u7ba1 \\(z\\) \u662f\u5de6\u5b69\u5b50\u8fd8\u662f\u53f3\u5b69\u5b50\uff0c\u628a\u7237\u7ed3\u70b9\u53d8\u6210\u7ea2\u8272\uff0c\u628a\u7236\u7ed3\u70b9\u548c\u53d4\u7ed3\u70b9\u53d8\u6210\u9ed1\u8272\uff0c\u7136\u540e\u7237\u7ed3\u70b9\u53d8\u6210\u65b0\u7684 \\(z\\) \u7ee7\u7eed\u5904\u7406\uff0c\u5373 \\(z\\) \u4e0a\u79fb\u4e86\u4e24\u5c42 \u7ea2\u9ed1\u6811\u7684\u5220\u9664\uff1a \u53ef\u4ee5\u53c2\u8003\u7684blog \u7528\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u5220\u9664\u7ed3\u70b9\u7684\u529e\u6cd5 \u7b2c1\u79cd\u60c5\u51b5\uff1a\u5982\u679c\u88ab\u5220\u9664\u7ed3\u70b9\u6709\u5de6\u53f3\u5b69\u5b50\uff0c\u5c31\u628a\u5176\u4e2d\u5e8f\u904d\u5386\u7684\u540e\u7ee7\uff08\u6216\u8005\u524d\u9a71\uff09\u7ed3\u70b9\u7684\u6570\u503c\u4e0e\u5176\u66ff\u6362\uff0c\u95ee\u9898\u53d8\u6362\u6210\u4e0b\u97622\u4e2d\u60c5\u51b5 \u7b2c2\u79cd\u60c5\u51b5\uff1a\u5f85\u5220\u7ed3\u70b9\u53ea\u6709\u5de6\u5b69\u5b50\u6216\u8005\u53f3\u5b69\u5b50\uff0c\u90a3\u4e48\u53ea\u6709\u53ef\u80fd\u5f85\u5220\u9664\u7684\u662f\u9ed1\u8272\uff0c\u5de6\u5b69\u5b50\u6216\u8005\u53f3\u5b69\u5b50\u662f\u4e00\u4e2a\u7ea2\u8272\u7ed3\u70b9\uff0c\u628a\u7ed3\u70b9\u5220\u4e86\u7136\u540e\u628a\u5b69\u5b50\u6362\u4e0a\u6765\u53d8\u6210\u9ed1\u8272\u5373\u53ef \u7b2c3\u79cd\u60c5\u51b5\uff1a\u5f85\u5220\u7ed3\u70b9\u6ca1\u6709\u5b69\u5b50 \u5f85\u5220\u7ed3\u70b9\u6ca1\u6709\u5b69\u5b50\u5e76\u4e14\u662f\u7ea2\u8272\u7684\uff0c\u76f4\u63a5\u5220\u9664\u5373\u53ef \u5f85\u5220\u7ed3\u70b9\u662f\u9ed1\u8272\u7684\uff0c\u5220\u9664\u5f85\u5220\u7ed3\u70b9\u540e\u53d8\u6210 null \u7ed3\u70b9\u518d\u5957\u4e00\u5c42\u9ed1\u8272 \uff08\u6216\u8005\u662f\u53cc\u9ed1\u7ed3\u70b9\uff09\u4ee3\u66ff\uff0c\u53eb\u505a \\(x\\) \uff0c\u95ee\u9898\u53d8\u4e3a\u5982\u4f55\u628a\u591a\u7684\u90a3\u5c42\u9ed1\u8272\u6d88\u53bb\uff0c\u533a\u522b\u5728\u4e8e \\(x\\) \u7684\u5144\u5f1f\u7ed3\u70b9 \\(w\\) \u4ee5\u53ca \\(w\\) \u7684\u5b69\u5b50\u7ed3\u70b9\u7684\u989c\u8272 \u60c5\u51b51\uff1a \\(w\\) \u662f\u7ea2\u8272\u7684\uff0c\u90a3\u4e48 \\(w\\) \u5fc5\u7136\u662f\u6709\u9ed1\u8272\u5de6\u53f3\u5b69\u5b50\uff0c\u5904\u7406\u529e\u6cd5\u662f\u4ea4\u6362 \\(x.p\\) \u548c \\(w\\) \u7684\u989c\u8272\uff0c\u65e2\u7136\u540e\u8fdb\u884c\u4e00\u6b21\u5355\u5411\u65cb\u8f6c\uff0c\u95ee\u9898\u53d8\u4e3a\u60c5\u51b52\uff0c3 \u6216 4 \u60c5\u51b52\uff1a \\(w\\) \u662f\u9ed1\u8272\u7684\uff0c \\(w\\) \u7684\u5de6\u5b69\u5b50\u662f\u7ea2\u8272\u7684\uff0c \\(w\\) \u7684\u53f3\u5b69\u5b50\u662f\u9ed1\u8272\u7684\uff1b\u5373\u7ea2\u8272\u7ed3\u70b9\u662f\u7237\u7ed3\u70b9\u7684\u53f3\u5b69\u5b50\u7684\u5de6\u5b69\u5b50\uff0c\u5904\u7406\u529e\u6cd5\u662f\u5148\u4ea4\u6362 \\(w\\) \u548c\u5176\u5de6\u5b69\u5b50\u7684\u989c\u8272\u518d RL\uff0c\u5176\u4e2d\u53f3\u65cb\u8fc7\u540e\u5176\u5b9e\u5c31\u53d8\u6210\u4e86\u60c5\u51b53 \u60c5\u51b53\uff1a \\(w\\) \u662f\u9ed1\u8272\u7684\uff0c \\(w\\) \u7684\u53f3\u5b69\u5b50\u662f\u7ea2\u8272\u7684\uff1b\u5904\u7406\u529e\u6cd5\u662f\u5148\u4ea4\u6362 \\(w\\) \u548c \\(x.p\\) \u7684\u989c\u8272\uff0c\u518d\u628a \\(w\\) \u53f3\u5b69\u5b50\u53d8\u4e3a\u9ed1\u8272\u518d RR(\u5de6\u5355\u65cb)\uff0c\u7136\u540e \\(x\\) \u53ef\u4ee5\u53d8\u56de\u6b63\u5e38\u9ed1\u8272 \u60c5\u51b54\uff1a \\(w\\) \u662f\u9ed1\u8272\u7684\u4e14\u4e24\u4e2a\u5b69\u5b50\u7ed3\u70b9\u4e5f\u90fd\u662f\u9ed1\u8272\uff08\u6216\u8005\u8bf4\u65e0\u7ea2\u8272\u5b50\u7ed3\u70b9\uff09\u7684\u5904\u7406\u529e\u6cd5\u662f\u628a \\(w\\) \u548c \\(x\\) \u53bb\u6389\u4e00\u5c42\u9ed1\u8272\uff0c\u7ed9 \\(x.p\\) \u52a0\u4e0a\u4e00\u5c42\u9ed1\u8272\u4f5c\u4e3a\u65b0\u7684 \\(x\\) \u53bb\u5904\u7406\uff08\u5982\u679c \\(x.p\\) \u662f\u7ea2\u8272\u7684\u5c31\u76f4\u63a5\u6d82\u9ed1\uff0c\u5982\u679c\u662f\u9ed1\u8272\u7684\u5c31\u4f5c\u4e3a\u53cc\u9ed1\u7ed3\u70b9\u7ee7\u7eed\u5904\u7406\uff09\uff1b\u5982\u679c\u4e00\u76f4\u5904\u7406\u5230\u6839\u7ed3\u70b9\uff0c\u628a\u591a\u7684\u4e00\u5c42\u9ed1\u8272\u76f4\u63a5\u820d\u53bb \u5176\u4ed6\u5bf9\u79f0\u60c5\u51b5\u7c7b\u4f3c","title":"5.7 \u7ea2\u9ed1\u6811"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#6","text":"","title":"6 \u56fe"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#61","text":"\u7ebf\u6027\u8868\u53ef\u4ee5\u662f\u7a7a\u8868\uff0c\u6811\u53ef\u4ee5\u662f\u7a7a\u6811\uff0c\u56fe\u4e0d\u53ef\u4ee5\u662f\u7a7a\uff0c\u5373 V \u4e00\u5b9a\u662f\u975e\u7a7a\u96c6\uff0cE \u53ef\u4ee5\u4e3a\u7a7a\u96c6 \u65e0\u5411\u56fe\uff0c\u6709\u5411\u56fe\uff1a\u9876\u70b9\u7684\u6709\u5e8f\u548c\u65e0\u5e8f\uff1b\u5f27\uff08\u6709\u5411\u8fb9\uff09 \u7b80\u5355\u56fe\uff1a\u65e0\u91cd\u8fb9\uff0c\u65e0\u73af\uff1b\u591a\u91cd\u56fe\uff1a\u975e\u7b80\u5355\u56fe \u5b8c\u5168\u56fe\uff1a\u4e5f\u79f0\u7b80\u5355\u5b8c\u5168\u56fe\uff0c\u6709\u5411\u4e0e\u65e0\u5411 \u5b50\u56fe\uff1a\u4ece V \u4e2d\u53d6\u5b50\u96c6\uff0cE \u505a\u76f8\u5e94\u7684\u5b50\u96c6\uff1b\u751f\u6210\u5b50\u56fe\uff1a \\(V(G')=V(G)\\) \u8fde\u901a\uff1a\u65e0\u5411\u56fe\u4e2d v \u548c w\u6709\u8def\u5f84\u5b58\u5728\uff1b\u5f3a\u8fde\u901a\uff1a\u65e0\u5411\u56fe\u4e2d v \u548c w\u6709\u8def\u5f84\u5b58\u5728\uff0cw \u5230 v \u6709\u8def\u5f84\u5b58\u5728 \u8fde\u901a\u56fe\uff08\u65e0\u5411\u56fe\uff09\uff0cn \u4e2a\u70b9\u6700\u5c11\u6709 n-1 \u6761\u8fb9\uff0c\u6700\u591a\u6709 \\(C_{n-1}^2\\) \u5373\uff08 \\(\\frac{(n-1)(n-2)}{2}\\) \uff09\u6761\u8fb9\uff0cn-1\u4e2a\u9876\u70b9\u6784\u6210\u5b8c\u5168\u56fe \u5f3a\u8fde\u901a\u56fe\uff08\u6709\u5411\u56fe\uff09\uff0cn \u4e2a\u70b9\u6700\u5c11\u6709 n \u6761\u8fb9 \u8fde\u901a\u5206\u91cf\uff1a\u65e0\u5411\u56fe\u4e2d\u7684\u6781\u5927\u8fde\u901a\u5b50\u56fe\u79f0\u4e3a\u8fde\u901a\u5206\u91cf \u5f3a\u8fde\u901a\u5206\u91cf\uff1a\u6709\u5411\u56fe\u4e2d\u7684\u6781\u5927\u5f3a\u8fde\u901a\u5b50\u56fe\u79f0\u4e3a\u8fde\u901a\u5206\u91cf \u751f\u6210\u6811\uff1a\u8fde\u901a\u56fe\u4e2d\uff0c\u5305\u542b\u8fde\u901a\u56fe\u7684\u5168\u90e8\u9876\u70b9\uff0c\u4e14\u662f\u6781\u5c0f\u8fde\u901a\u5b50\u56fe\uff1b\u5c11\u4e00\u6761\u8fb9\u5c31\u975e\u8fde\u901a\uff0c\u591a\u5c31\u6709\u73af \u751f\u6210\u68ee\u6797\uff1a\u975e\u8fde\u901a\u56fe\u4e2d\uff0c\u8fde\u901a\u5206\u91cf\u7684\u751f\u6210\u6811\u6784\u6210\u4e86\u751f\u6210\u68ee\u6797 \u90bb\u63a5\uff0c\u5173\u8054\uff1a\u65e0\u5411\u56fe\u4e2d \\((v, v')\\) \uff0c \\(v,v'\\) \u4e92\u4e3a\u90bb\u63a5\u70b9\uff0c \\((v, v')\\) \u548c \\(v,v'\\) \u76f8\u5173\u8054\uff1b\u6709\u5411\u56fe\u4e2d \\(<v, v'>\\) \uff0c\u79f0 \\(v\\) \u90bb\u63a5\u5230 \\(v'\\) \uff0c \\(<v, v'>\\) \u548c \\(v,v'\\) \u76f8\u5173\u8054 \u5ea6\uff08TD\uff09\uff0c\u51fa\u5ea6\uff08OD\uff09\uff0c\u5165\u5ea6\uff08ID\uff09\uff1b\u6709\u5411\u56fe\u7684\u5ea6\u4e3a \u5165\u5ea6 + \u51fa\u5ea6 \u65e0\u5411\u56fe\uff1a \\(\\sum TD(V_i)=2|E|\\) \u6709\u5411\u56fe\uff1a \\(\\sum OD(V_i)=\\sum ID(V_i)=|E|\\) \u8fb9\u7684\u6743\uff0c\u5e26\u6743\u56fe\uff08\u4e5f\u53eb\u7f51\uff09\uff0c\u5e26\u6743\u8def\u5f84\u957f\u5ea6 \u8def\u5f84\uff1a\u9876\u70b9\u5e8f\u5217 \u56de\u8def \u7b80\u5355\u8def\u5f84\uff1a\u9876\u70b9\u4e0d\u91cd\u590d\u51fa\u73b0\uff1b\u7b80\u5355\u56de\u8def\uff1a\u9664\u4e86\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u9876\u70b9\u4e0d\u91cd\u590d \u8ddd\u79bb\uff1a\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u6216\u65e0\u7a77 \u7a00\u758f\u56fe\uff0c\u7a20\u5bc6\u56fe \u6811\uff1a\u4e0d\u5b58\u5728\u56de\u8def\u4e14\u8fde\u901a\u7684\u56fe\uff1b\u68ee\u6797\uff1a \u6709\u5411\u6811\uff1a\u53ea\u6709\u4e00\u4e2a\u9876\u70b9\u7684\u5165\u5ea6\u4e3a0\uff0c\u5176\u4ed6\u9876\u70b9\u7684\u5165\u5ea6\u90fd\u4e3a 1","title":"6.1 \u56fe\u7684\u57fa\u672c\u6982\u5ff5"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#62","text":"\u90bb\u63a5\u77e9\u9635\u6cd5\uff08\u7a7a\u95f4\u590d\u6742\u5ea6 \\(O(v^2)\\) \uff09\uff0c\u5047\u8bbe\u77e9\u9635\u4e3a \\(A\\) \uff0c\u5219 \\(A*A\\) \u8868\u793a\u8def\u5f84\u957f\u5ea6\u4e3a 2 \u7684\u8def\u5f84\u6570\u76ee\uff0c \\(A^n\\) \u8868\u793a\u8def\u5f84\u957f\u5ea6\u4e3a n \u90bb\u63a5\u8868\uff08\u7a7a\u95f4\u590d\u6742\u5ea6\u6709\u5411\u56fe \\(O(V+E)\\) \uff0c\u65e0\u5411\u56fe \\(O(V+2E)\\) \uff09 \u5341\u5b57\u94fe\u8868\uff08\u5b58\u50a8\u6709\u5411\u56fe\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 \\(O(V+E)\\) \uff09 \u90bb\u63a5\u591a\u91cd\u8868\uff08\u5b58\u50a8\u65e0\u5411\u56fe\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 \\(O(V+E)\\) \uff09","title":"6.2 \u56fe\u7684\u8868\u793a\u6cd5\u548c\u57fa\u672c\u64cd\u4f5c"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#63-bfs-dfs","text":"bfs\uff1a\u961f\u5217\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 \\(O(V)\\) \uff08\u961f\u5217\u7684\u957f\u5ea6\uff09 \u65f6\u95f4\u590d\u6742\u5ea6 \u90bb\u63a5\u77e9\u9635 \\(O(V^2)\\) \uff0c\u90bb\u63a5\u8868 \\(O(V+E)\\) \u5e7f\u5ea6\u4f18\u5148\u751f\u6210\u6811\uff08\u4e0d\u662f\u6700\u5c0f\u7684\uff0c\u4e14\u5982\u679c\u7528\u90bb\u63a5\u8868\u4e0d\u552f\u4e00\uff09 \u5e7f\u5ea6\u4f18\u5148\u751f\u6210\u68ee\u6797\uff08\u56fe\u4e2d\u6709\u591a\u4e2a\u8fde\u901a\u5206\u91cf\u65f6\uff09 dfs\uff1a\u7a7a\u95f4\u590d\u6742\u5ea6 \\(O(V)\\) \uff08\u51fd\u6570\u9012\u5f52\u8c03\u7528\u6808\uff09 \u65f6\u95f4\u590d\u6742\u5ea6 \u90bb\u63a5\u77e9\u9635 \\(O(V^2)\\) \uff0c\u90bb\u63a5\u8868 \\(O(V+E)\\) \u6df1\u5ea6\u4f18\u5148\u751f\u6210\u6811\uff08\u4e0d\u662f\u6700\u5c0f\u7684\uff0c\u4e14\u5982\u679c\u7528\u90bb\u63a5\u8868\u4e0d\u552f\u4e00\uff09 \u6df1\u5ea6\u4f18\u5148\u751f\u6210\u68ee\u6797\uff08\u56fe\u4e2d\u6709\u591a\u4e2a\u8fde\u901a\u5206\u91cf\u65f6\uff09 \u5224\u73af\u7528 \u62d3\u6251\u6392\u5e8f \u548c dfs\uff0c\u5982\u679c\u5728 dfs \u8981\u8bbf\u95ee\u7684\u5143\u7d20\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u5e76\u4e14\u8fd8\u5728\u6808\u4e2d\u65f6\uff0c\u8bf4\u660e\u6709\u73af\uff1bbfs \u4e0d\u884c\u7684\u539f\u56e0\u662f\u53ef\u80fd\u6709\u591a\u4e2a\u7ed3\u70b9\u6307\u5411\u8be5\u7ed3\u70b9\uff0c\u4e0d\u4e00\u5b9a\u662f\u56e0\u4e3a\u6709\u73af","title":"6.3 bfs &amp;&amp; dfs"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#64","text":"\u6700\u5c0f\u751f\u6210\u6811\uff08MST\uff09\uff0c\u975e\u8fde\u901a\u56fe\u53ea\u6709\u751f\u6210\u68ee\u6797 Prim\uff1a \\(O(V^2)\\) Kruskal\uff08\u5e76\u67e5\u96c6\uff09\uff1a \\(O(ElogE)\\) \u6700\u77ed\u8def\u5f84 \u5404\u9876\u70b9\u95f4\u6700\u77ed\u8def Floyd\uff08\u5e26\u6743\u56fe\uff0c\u65e0\u6743\u56fe\uff09\uff0c\u53ef\u4ee5\u7528 path \u8bb0\u5f55\u4e2d\u8f6c\u70b9\u6765\u8bb0\u5f55\u8def\u5f84\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(V^3)\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 \\(O(V^2)\\) \u5355\u6e90\u6700\u77ed\u8def\u95ee\u9898 BFS\uff08\u65e0\u6743\u56fe\uff09 Dijkstra\uff08\u5e26\u6743\u56fe\uff0c\u65e0\u6743\u56fe\uff09\uff0c\u6ce8\u610f\u4e0e Prime \u7b97\u6cd5\u7684\u533a\u522b\u5728 dis \u7684\u542b\u4e49\u548c\u677e\u5f1b\u64cd\u4f5c\uff1b\u8bb0\u5f55\u6bcf\u4e2a\u7ed3\u70b9\u7684\u524d\u9a71\u6765\u8bb0\u5f55\u8def\u5f84\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(V^2)\\) \u3002\u4e0d\u9002\u7528\u4e8e\u8d1f\u6743\u8fb9","title":"6.4 \u6700\u5c0f\u751f\u6210\u6811\u548c\u6700\u77ed\u8def"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#65","text":"\u6709\u5411\u65e0\u73af\u56fe\uff08DAG\uff0cDirected acyclic graph\uff09 \u63cf\u8ff0\u8868\u8fbe\u5f0f\uff0c\u5e76\u8fdb\u884c\u56fe\u7684\u4f18\u5316 AOV \u7f51\uff08Activity On Vertex NetWork\uff09\uff0c\u7528 vertex \u8868\u793a\u6d3b\u52a8 \u62d3\u6251\u6392\u5e8f\uff1a \u7b97\u6cd5\uff1a\u5165\u5ea6\u7684\u7edf\u8ba1\u53ef\u4ee5\u7528\u4e00\u4e2a\u6570\u7ec4indegree\u5b9e\u73b0\uff0cE\u662f\u5220\u9664\u7ed3\u70b9\u65f6\u66f4\u65b0indegree\u9700\u8981\u7684\u65f6\u95f4\uff0c\u7528\u961f\u5217\u6216\u6808\u8bb0\u5f55indegree\u4e3a0\u7684\u7ed3\u70b9 \u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u90bb\u63a5\u8868 \\(O(V+E)\\) \uff0c\u90bb\u63a5\u77e9\u9635 \\(O(V^2)\\) \uff1b\u9006\u62d3\u6251\u6392\u5e8f\uff08\u6bcf\u6b21\u5220\u9664\u51fa\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9\uff09\uff1a\u90bb\u63a5\u8868 \\(O(VE)\\) \uff0c\u90bb\u63a5\u77e9\u9635 \\(O(V^2)\\) \uff0c\u9006\u90bb\u63a5\u8868 \\(O(V+E)\\) \uff1b\u4f7f\u7528\u9006\u90bb\u63a5\u8868\u5373\u53ef\u5b9e\u73b0\u62d3\u6251\u6392\u5e8f\u7684\u6b63\u9006\uff1b\u4f7f\u7528 dfs \u6c42\u62d3\u6251\u5e8f \u7528DFS\u89e3\u62d3\u6251\u6392\u5e8f AOE \u7f51\uff08Activity On Edge NetWork\uff09\uff0c\u7528 edge \u8868\u793a\u6d3b\u52a8\uff0c\u7ed3\u70b9\u8868\u793a\u4e8b\u4ef6\uff0c\u53ea\u6709\u4e00\u4e2a\u5165\u5ea6\u4e3a 0 \u7684\u9876\u70b9\uff08\u6e90\u70b9\uff09\uff0c\u4e00\u4e2a\u51fa\u5ea6\u4e3a 0 \u7684\u9876\u70b9\uff08\u6c47\u70b9\uff09\uff1b\u6e90\u70b9\u5230\u6c47\u70b9\u7684\u6700\u957f\u8def\u5f84\u53eb\u5173\u952e\u8def\u5f84\uff08\u53ef\u80fd\u6709\u591a\u6761\uff09\uff0c\u4e0a\u9762\u7684\u6d3b\u52a8\u53eb\u5173\u952e\u6d3b\u52a8 \u4e8b\u4ef6\u7684\u6700\u65e9\u53d1\u751f\u65f6\u95f4\uff08ve\uff0c\u6309\u7167\u62d3\u6251\u5e8f\u6c42 max\uff09\uff0c\u6d3b\u52a8\u7684\u6700\u65e9\u5f00\u59cb\u65f6\u95f4\uff08e\uff0c\u5f27\u8d77\u59cb\u70b9\u7684 ve\uff09 \u4e8b\u4ef6\u6700\u8fdf\u53d1\u751f\u65f6\u95f4\uff08vl\uff0c\u6309\u7167\u9006\u62d3\u6251\u5e8f\u6c42 min\uff09\uff0c\u6d3b\u52a8\u6700\u8fdf\u5f00\u59cb\u65f6\u95f4\uff08l\uff09\uff08 min\uff08\u5f27\u7ec8\u70b9\u4e8b\u4ef6\u7684\u6700\u8fdf\u53d1\u751f\u65f6\u95f4-\u6d3b\u52a8\u65f6\u95f4\uff09 \uff09 \u6d3b\u52a8\u7684\u65f6\u95f4\u4f59\u91cf\uff08d\uff09\uff0c\u6d3b\u52a8\u7684\u6700\u65e9\u5f00\u59cb\u65f6\u95f4\u548c\u6700\u8fdf\u5f00\u59cb\u65f6\u95f4\u76f8\u540c\u7684\u6d3b\u52a8\uff08d=0\uff09\u662f\u5173\u952e\u6d3b\u52a8","title":"6.5 \u6709\u5411\u65e0\u73af\u56fe\u4e0e\u5e94\u7528"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#66","text":"int fa [ MAXN ]; void init ( int n ) { for ( int i = 0 ; i < n ; i ++ ) fa [ i ] = i ; } int find ( int x ) { if ( fa [ x ] != x ) fa [ x ] = find ( fa [ x ]); return fa [ x ]; } void unite ( int x , int y ) { int fx = find ( a ); int fy = find ( b ); fa [ fx ] = fy ; } bool same ( int x , int y ) { return find ( x ) == find ( y ); }","title":"6.6 \u5e76\u67e5\u96c6"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#7","text":"","title":"7 \u67e5\u627e"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#71","text":"\u67e5\u627e\uff0c\u67e5\u627e\u8868\uff08\u6570\u636e\u96c6\u5408\uff09\uff0c\u5173\u952e\u5b57\uff08\u552f\u4e00\u6807\u8bc6\u6570\u636e\u7684\u503c\uff09 \u9759\u6001\u67e5\u627e\u8868\uff08\u53ea\u4f1a\u67e5\u627e\uff09\uff0c\u52a8\u6001\u67e5\u627e\u8868\uff08\u4f1a\u8fdb\u884c\u63d2\u5165\u548c\u5220\u9664\uff09,\u9759\u6001\u67e5\u627e\u8868\u7528\u987a\u5e8f\u5b58\u50a8\uff0c\u52a8\u6001\u67e5\u627e\u8868\u7528\u4e8c\u53c9\u6392\u5e8f\u6811 \u5e73\u5747\u67e5\u627e\u957f\u5ea6 ASL","title":"7.1 \u57fa\u672c\u6982\u5ff5"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#72","text":"\u987a\u5e8f\u67e5\u627e \u54e8\u5175\uff08\u653e\u5728 a[0]\uff0c\u4ece\u5c3e\u90e8\u5f80\u524d\u67e5\u627e\uff09 \u5206\u6790ASL\uff0c \\(ASL_{\u6210\u529f}=(n+1)/2,ASL_{\u5931\u8d25}=n+1\\) \u987a\u5e8f\u67e5\u627e\u7684\u4f18\u5316 \u6709\u5e8f\u8868\u7684\u987a\u5e8f\u67e5\u627e\u53ef\u4ee5\u63d0\u524d\u505c\u6b62\uff0c\u7528\u5224\u5b9a\u6811\u5206\u6790\uff0c \\(ASL_{\u5931\u8d25}=n/2+n/(n+1)\\) \u88ab\u67e5\u627e\u6982\u7387\u5927\u7684\u653e\u5728\u9760\u524d\u7684\u4f4d\u7f6e \u6298\u534a\u67e5\u627e \u4ec5\u9002\u7528\u4e8e\u6709\u5e8f\u7684\u987a\u5e8f\u8868 \u67e5\u627e\u6548\u7387\u5206\u6790 ASL\uff0c \\(O(long_2n)\\) \u6298\u534a\u67e5\u627e\u5224\u5b9a\u6811\u7684\u6811\u9ad8 \\(h=ceil(log_2(n+1))\\) \uff0c\u4e14\u662f\u4e8c\u53c9\u6392\u5e8f\u6811\uff0c\u4e14\u5e73\u8861\uff0c\u5931\u8d25\u7ed3\u70b9\u6709 n+1 \u5206\u5757\u67e5\u627e / \u7d22\u5f15\u987a\u5e8f\u67e5\u627e \u5757\u5185\u65e0\u5e8f\uff0c\u5757\u95f4\u6709\u5e8f \u5148\u67e5\u7d22\u5f15\u8868\uff0c\u53ef\u987a\u5e8f\uff0c\u53ef\u4e8c\u5206\uff08\u5f88\u9ebb\u70e6\uff09 \u67e5\u627e\u6548\u7387\u5206\u6790\uff0c\u6709 b \u5757\uff0c\u6bcf\u5757 s \u4e2a\u5143\u7d20 \u987a\u5e8f\u67e5\u627e\u7d22\u5f15\u8868\uff0c \\(ASL=\\frac{b+1}{2}+\\frac{s+1}{2}\\) \uff0c\u5f53 \\(s=\\sqrt{n}\\) \u65f6\uff0cASL \u6700\u5c0f = \\(\\sqrt{n} + 1\\) \u6298\u534a\u67e5\u627e\u7d22\u5f15\u8868\uff0c \\(ASL=ceil(log_2(b+1))+\\frac{s+1}{2}\\)","title":"7.2 \u67e5\u627e\u7b97\u6cd5"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#73-b","text":"\u4e8c\u53c9\u67e5\u627e\u6811\u53d8\u4e3a m \u53c9\u67e5\u627e\u6811\uff0c\u7ed3\u70b9\u4e2d\u7684\u5173\u952e\u5b57\u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e8c\u5206 struct Node { Elemtype keys [ 4 ]; // \u6700\u591a4\u4e2a\u5173\u952e\u5b57 struct Node * child [ 5 ]; // 4\u4e2a\u5173\u952e\u5b57\u6700\u591a5\u4e2a\u5206\u53c9\uff0c\u6700\u591a5\u4e2a\u5b69\u5b50 int num ; // \u8bb0\u5f55\u7ed3\u70b9\u4e2d\u6709\u51e0\u4e2a\u5173\u952e\u5b57 } \u4fdd\u8bc1\u67e5\u627e\u6548\u7387\uff1a \u89c4\u5b9a m \u53c9\u67e5\u627e\u6811\u4e2d\u9664\u4e86\u6839\u7ed3\u70b9\u5916\uff0c\u4efb\u4f55\u7ed3\u70b9\u81f3\u5c11\u6709 \\(ceil(m/2)\\) \u4e2a\u5206\u53c9\uff0c \\(ceil(m/2)-1\\) \u4e2a\u5173\u952e\u5b57 \u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u7ed3\u70b9\u5176\u5b50\u6811\u7684\u9ad8\u5ea6\u8981\u76f8\u540c B\u6811\u5b9a\u4e49\uff1a \u542b n \u4e2a\u5173\u952e\u5b57\u7684 m \u9636 B \u6811\u7684\u6700\u5c0f\u9ad8\u5ea6\uff1a $$ n<=(m-1)(1+m+m^2+...+m^h) \\ h >= log_m(n+1) $$ \u6700\u5927\u9ad8\u5ea6\uff1a \u601d\u8def\u4e00\uff1a \u8ba9\u5404\u5c42\u5206\u53c9\u5c3d\u53ef\u80fd\u7684\u5c0f\uff0c\u7b2c\u4e00\u5c42 2 \u4e2a\u5206\u53c9\uff0c\u5176\u4ed6\u7ed3\u70b9 \\(ceil(m/2)\\) \u5206\u53c9\uff0c\u6240\u4ee5\u5404\u5c42\u7ed3\u70b9\u6570\uff1a \\(1,2,2ceil(m/2),...2ceil(m/2)^{h-2}\\) \uff0c\u5219 \\(h+1\\) \u5c42\u5171\u6709\u53f6\u5b50\u7ed3\u70b9\uff08\u5931\u8d25\u7ed3\u70b9\uff09 \\(2ceil(m/2)^{h-1}\\) \uff1b\u56e0\u4e3a n \u4e2a\u5173\u952e\u5b57\u7684B\u6811\u5fc5\u6709 n+1 \u4e2a\u53f6\u5b50\u7ed3\u70b9\uff08n\u4e2a\u6570\u5b57\u5206\u6210\u4e86 n+1 \u4e2a\u533a\u95f4\uff09\uff0c\u6240\u4ee5 \\(n+1>=2ceil(m/2)^{h-1}\\) \uff0c\u5f97 \\(h<=log_{ceil(m/2)}\\frac{n+1}{2}+1\\) \u601d\u8def\u4e8c\uff1a\u8bbe \\(k=ceil(m/2)\\) \u6700\u5c11\u7ed3\u70b9\u6570 \u6700\u5c11\u5173\u952e\u5b57\u6570 \u7b2c\u4e00\u5c42 1 1 \u7b2c\u4e8c\u5c42 2 2(k-1) \u7b2c\u4e09\u5c42 2k 2k(k-1) .... ... ... \u7b2ch\u5c42 \\(2k^{h-2}\\) \\(2k^{h-2}(k-1)\\) h \u5c42 m \u9636 B \u6570\u81f3\u5c11\u5305\u542b\u5173\u952e\u5b57\u603b\u6570 \\(1+2(k-1)+...+2k^{h-2}(k-1)=1+2(k^{h-1}-1) <= n\\) \uff0c\u5f97 \\(h<=log_{ceil(m/2)}\\frac{n+1}{2}+1\\) B \u6811\u7684\u63d2\u5165\uff08\u738b\u9053\u89c6\u9891P73\uff0c\u4e66P297\uff09\uff1a \u5982\u679c\u53ea\u6709\u6839\u7ed3\u70b9\uff0c\u5c31\u63d2\u5165\u6839\u7ed3\u70b9\uff0c\u6ee1\u4e86\u5c31\u5206\u88c2\u6210 3 \u4e2a\u7ed3\u70b9\uff081\u4e2a\u6839\u7ed3\u70b9 2 \u4e2a\u5b50\u7ed3\u70b9\uff0c\u6839\u7ed3\u70b9\u4e0a\u4f20\uff09 \u65b0\u5143\u7d20\u4e00\u5b9a\u8981\u63d2\u5165\u6700\u5e95\u5c42\u7684\u7ec8\u7aef\u7ed3\u70b9\uff08\u4fdd\u6301\u5931\u8d25\u7ed3\u70b9\u5728\u6700\u5e95\u5c42\u7684\u7279\u6027\uff09\uff0c\u6ee1\u4e86\u4e5f\u662f\u5206\u88c2 B \u6811\u7684\u5220\u9664\uff08\u738b\u9053\u89c6\u9891P73\uff0c\u4e66P298\uff09\uff1a \u8981\u5220\u9664\u7684\u5173\u952e\u5b57\u5728\u7ec8\u7aef\u7ed3\u70b9\uff0c\u7ed3\u70b9\u4e2d\u5173\u952e\u5b57\u5927\u4e8e \\(ceil(m/2)\\) \u5c31\u76f4\u63a5\u5220\u9664 \u5982\u679c\u4e0d\u5728\u7ec8\u7aef\u7ed3\u70b9\u4e2d\u5c31\u76f4\u63a5\u7528\u524d\u9a71\u6216\u8005\u76f4\u63a5\u540e\u7ee7\uff08\u662f\u5728\u7ec8\u7aef\u7ed3\u70b9\u4e2d\u7684\uff09\u4ee3\u66ff\uff0c\u66ff\u4ee3\u4e0d\u5f71\u54cd \u5173\u952e\u5b57\u5927\u4e8e \\(ceil(m/2)\\) \u7684\u6761\u4ef6\uff09\uff0c\u5982\u679c\u5c0f\u4e8e\u4e86\u5c31\u8ba9\u540e\u7ee7\u7684\u540e\u7ee7\uff08\u7236\u8282\u70b9\u4e0b\u6765\uff0c\u540e\u7ee7\u7684\u540e\u7ee7\u5f53\u7236\u8282\u70b9\uff09\u6216\u8005\u524d\u9a71\u7684\u524d\u9a71\uff08\u7236\u8282\u70b9\u4e0b\u6765\uff0c\u524d\u9a71\u7684\u524d\u9a71\u5f53\u7236\u8282\u70b9\uff09\u6765\u586b\u8865\uff0c\u6ca1\u7684\u501f\u5c31\u5408\u5e76","title":"7.3 B\u6811"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#74-b","text":"\u7c7b\u6bd4\u5206\u5757\u67e5\u627e \u5b9a\u4e492\uff1a\u975e\u53f6\uff08\u5f62\u5bb9\u8bcd\uff09\u6839\u7ed3\u70b9 B+\u6811\u7684\u67e5\u627e\u9664\u4e86\u6309\u7167\u5c42\u6b21\u5f80\u4e0b\u67e5\u627e\u4e5f\u53ef\u4ee5\u6309\u6307\u9488P\u987a\u5e8f\u67e5\u627e B+\u6811\u548cB\u6811\u7684\u5bf9\u6bd4 m\u9636B+\u6811\uff1a \u7ed3\u70b9\u4e2dn\u4e2a\u5173\u952e\u5b57\u5bf9\u5e94n\u4e2a\u5b50\u6811 \u9664\u6839\u7ed3\u70b9\u5916\u7684\u7ed3\u70b9\u7684\u5173\u952e\u5b57\u6570 \\([\\ ceil(m/2),m\\ ]\\) \u53f6\u5b50\u7ed3\u70b9\u5305\u542b\u5168\u90e8\u7684\u5173\u952e\u5b57\uff0c\u975e\u53f6\u5b50\u7ed3\u70b9\u4e2d\u51fa\u73b0\u8fc7\u7684\u5173\u952e\u5b57\u4e5f\u4f1a\u5728\u53f6\u5b50\u7ed3\u70b9\u4e2d \u6240\u6709\u975e\u53f6\u5b50\u7ed3\u70b9\u53ea\u8d77\u5230\u7d22\u5f15\u4f5c\u7528\uff0c\u4e0d\u5305\u542b\u8be5\u5173\u952e\u5b57\u7684\u5bf9\u5e94\u8bb0\u5f55\u7684\u5b58\u50a8\u5730\u5740 m\u9636B\u6811\uff1a \u7ed3\u70b9\u4e2dn\u4e2a\u5173\u952e\u5b57\u5bf9\u5e94n+1\u4e2a\u5b50\u6811 \u9664\u6839\u7ed3\u70b9\u5916\u7684\u7ed3\u70b9\u7684\u5173\u952e\u5b57\u6570 \\([\\ ceil(m/2)-1, m-1\\ ]\\) \u5404\u7ed3\u70b9\u7684\u5173\u952e\u5b57\u4e0d\u91cd\u590d \u7ed3\u70b9\u5305\u542b\u4e86\u5173\u952e\u5b57\u5bf9\u5e94\u7684\u8bb0\u5f55\u7684\u5b58\u50a8\u5730\u5740","title":"7.4 B+\u6811"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#75","text":"\u6563\u5217\u8868=\u54c8\u5e0c\u8868\uff0c\u6563\u5217\u51fd\u6570=\u54c8\u5e0c\u51fd\u6570\uff0c\u540c\u4e49\u8bcd\uff0c\u51b2\u7a81\uff0c\u805a\u96c6 \u67e5\u627e\u957f\u5ea6\uff08\u5982\u679c\u662f\u7a7a\uff0c\u67e5\u627e\u957f\u5ea6=0\uff09\uff0c\u8ba1\u7b97 \\(ASL_{\u6210\u529f}\\) \uff0c \\(ASL_{\u5931\u8d25}\\) \uff08\u6ce8\u610f\u8ba1\u7b97\u5931\u8d25\u7684\u65f6\u5019\u4e3b\u8981\u548c\u54c8\u5e0c\u51fd\u6570\u6709\u5173\u548c\u5f53\u524d\u8868\u5185\u72b6\u6001\u6709\u5173\uff09 \u88c5\u586b\u56e0\u5b50 \\(\\alpha\\) =\u8868\u4e2d\u8bb0\u5f55\u6570/\u6563\u5217\u8868\u957f\u5ea6 \u5e38\u89c1\u6563\u5217\u51fd\u6570\uff1a \u9664\u7559\u4f59\u6570\u6cd5\uff0c\u6563\u5217\u8868\u957f\u5ea6\u4e3a m\uff0c\u9664\u6570\u53d6\u4e0d\u5927\u4e8e m \u7684\u6700\u5927\u8d28\u6570 p\uff0c\u4f1a\u8ba9\u54c8\u5e0c\u6570\u503c\u57df\u5c0f\u4e8e\u6563\u5217\u8868\u957f\u5ea6\uff0c\u518d\u7528\u5f00\u653e\u5b9a\u5740\u6cd5\u53ef\u4ee5\u6062\u590d \u76f4\u63a5\u5b9a\u5740\u6cd5\uff0c\u505a\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362 H(key) = a*key+b \u6570\u5b57\u5206\u6790\u6cd5\uff0c\u9009\u53d6\u6570\u7801\u5206\u5e03\u5747\u5300\u7684\u82e5\u5e72\u4f4d\u4f5c\u4e3a\u6563\u5217\u5730\u5740 \u5e73\u65b9\u53d6\u4e2d\u6cd5\uff0c\u53d6\u5e73\u65b9\u503c\u7684\u4e2d\u95f4\u51e0\u4f4d\u4f5c\u4e3a\u6563\u5217\u5730\u5740 \u5904\u7406\u51b2\u7a81\u7684\u65b9\u6cd5\uff1a \u62c9\u94fe\u6cd5\uff0c\u5c0f\u4f18\u5316\uff1a\u4f7f\u94fe\u8868\u6709\u5e8f\uff0c\u5982\u679c\u67e5\u627e\u5931\u8d25\u53ef\u4ee5\u63d0\u524d\u8fd4\u56de \u5f00\u653e\u5b9a\u5740\u6cd5 \\(H_i=(H(key)+d_i)\\%m\\) \uff0c\u67e5\u627e\u5931\u8d25\u65f6\u5bf9\u7a7a\u4f4d\u7f6e\u7684\u5224\u65ad\u4e5f\u7b97\u4e00\u6b21\u6bd4\u8f83\uff1b\u5728\u5220\u9664\u7ed3\u70b9\u65f6\u8981\u505a\u6807\u8bb0\uff0c\u4ee5\u4fbf\u540e\u9762\u67e5\u627e\u65f6\u7ee7\u7eed\u63a2\u6d4b \u7ebf\u6027\u63a2\u6d4b\u6cd5\uff0c \\(d_i=0,1,2,3,4...\\) \u5e73\u65b9\u63a2\u6d4b\u6cd5\uff08\u4e8c\u6b21\u63a2\u6d4b\u6cd5\uff09\uff0c \\(d_i=0,1,-1,4,-4,9,-9...,k^2,-k^2\\) \uff0c \\(k<=m/2\\) \uff0c\u6563\u5217\u8868\u957f\u5ea6 m \u5fc5\u987b\u662f\u4e00\u4e2a\u53ef\u4ee5\u8868\u793a\u6210 4j+3 \u7684\u7d20\u6570\u624d\u53ef\u4ee5\u63a2\u6d4b\u5230\u6240\u6709\u7d20\u6570 \u4f2a\u968f\u673a\u5e8f\u5217\u6cd5 \u518d\u6563\u5217\u6cd5\uff0c\u591a\u51c6\u5907\u51e0\u4e2a\u6563\u5217\u51fd\u6570 \u6ce8\u610f\u5728\u5220\u9664\u65f6\u8981\u505a\u6807\u8bb0\uff0c\u4e0d\u7136\u4e0b\u6b21\u67e5\u627e\u65f6\u53ef\u80fd\u4f1a\u6709\u95ee\u9898","title":"7.5 \u6563\u5217\u67e5\u627e"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#8","text":"\u8fd9\u90e8\u5206\u8981\u6ce8\u610f\u4ee3\u7801","title":"8 \u6392\u5e8f"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#81","text":"\u7a7a\u95f4\u548c\u65f6\u95f4\u590d\u6742\u5ea6 \u7b97\u6cd5\u7684\u7a33\u5b9a\u6027 \u5206\u7c7b\uff1a \u5185\u90e8\u6392\u5e8f\uff0c\u6570\u636e\u90fd\u5728\u5185\u5b58\u4e2d\uff0c\u5173\u6ce8\u65f6\u95f4\u7a7a\u95f4\u590d\u6742\u5ea6 \u5916\u90e8\u6392\u5e8f\uff0c\u6570\u636e\u592a\u591a\uff0c\u65e0\u6cd5\u5168\u90e8\u653e\u5165\u5185\u5b58\uff0c\u8fd8\u8981\u5173\u6ce8\u4f7f\u8bfb/\u5199\u78c1\u76d8\u6b21\u6570\u66f4\u5c11","title":"8.1 \u57fa\u672c\u6982\u5ff5"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#82","text":"\u63d2\u5165\u6392\u5e8f\uff1a \u6bcf\u6b21\u5c06\u5f85\u6392\u5e8f\u7684\u8bb0\u5f55\u6309\u7167\u5173\u952e\u5b57\u5927\u5c0f\u63d2\u5165\u524d\u9762\u5df2\u6392\u597d\u7684\u5b50\u5e8f\u5217\u4e2d \u5982\u679c\u6709\u54e8\u5175\uff0c\u54e8\u5175\u7528\u6765\u590d\u5236\u5f85\u6392\u5e8f\u7684\u8bb0\u5f55 \u7a7a\u95f4\u590d\u6742\u5ea6 \\(O(1)\\) \uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n^2)\\) \u7a33\u5b9a\u6027\uff1a\u7a33\u5b9a \u4f18\u5316\uff1f\uff1a\u5bf9\u524d\u9762\u5df2\u6392\u597d\u7684\u5b50\u5e8f\u5217\u7528\u6298\u534a\u67e5\u627e\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u7a33\u5b9a\u6027\u5728\u627e\u5230\u4e4b\u540e\u8fd8\u8981\u7ee7\u7eed\u627e\u76f4\u5230 low>high\uff0c\u7136\u540e\u628a [low, i-1] \u5185\u7684\u5143\u7d20\u53f3\u79fb\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n^2)\\) \u5982\u679c\u7528\u94fe\u8868\u5b58\u50a8\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n^2)\\) \u5e0c\u5c14\u6392\u5e8f\uff1a\u5bf9\u63d2\u5165\u6392\u5e8f\u7684\u4f18\u5316\uff1b\u7531\u90e8\u5206\u6709\u5e8f\u903c\u8fd1\u5168\u5c40\u6709\u5e8f \u7531\u589e\u91cf \\(d\\) \u5206\u6210\u591a\u4e2a\u5b50\u8868\u540e\u5bf9\u5b50\u8868\u63d2\u5165\u6392\u5e8f\uff0c\u7136\u540e\u7f29\u5c0f\u589e\u91cf \\(d\\) \u76f4\u5230 \\(d=1\\) \uff1b \\(d\\) \u5efa\u8bae\u521d\u503c\u4e3a \\(n/2\\) \uff0c\u7136\u540e\u6bcf\u6b21 \\(d_{i+1}=d_i/2\\) \uff1b \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a \\(O(1)\\) \uff1b\u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(O(n^{1.3}) \u5230 O(n^2)\\) \u7a33\u5b9a\u6027\uff1a\u4e0d\u7a33\u5b9a \u53ea\u80fd\u57fa\u4e8e\u987a\u5e8f\u8868","title":"8.2 \u63d2\u5165\u6392\u5e8f\uff1a\u63d2\u5165\u6392\u5e8f\u548c\u5e0c\u5c14\u6392\u5e8f"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#83","text":"\u5192\u6ce1\u6392\u5e8f\uff1a \u6bcf\u8f6e\u90fd\u627e\u5230\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6570\u653e\u5230\u6700\u524d\u9762\uff08\u6216\u8005\u627e\u6700\u5927\u7684\u653e\u540e\u9762\uff09 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(O(n^2)\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a \\(O(1)\\) \u7a33\u5b9a\u6027\uff1a\u7a33\u5b9a \u5192\u6ce1\u6392\u5e8f\u9002\u5408\u94fe\u8868 \u4f18\u5316\uff1a\u67d0\u4e00\u8d9f\u6ca1\u6709\u4ea4\u6362\u5c31\u53ef\u4ee5\u63d0\u524d\u7ed3\u675f \u5feb\u901f\u6392\u5e8f\uff08\u91cd\u8981 \uff09\uff1a \u5728\u8868\u4e2d\u4efb\u53d6\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u67a2\u8f74\u6216\u57fa\u51c6\uff0c\u5212\u5206\u4e3a\u5de6\u53f3 2 \u90e8\u5206\uff08\u5b9e\u73b0\u65f6\u6709\u4e00\u4e2a low \u548c high \u4e0d\u65ad\u5411\u5185\u79fb\u52a8\uff09\uff0c\u7136\u540e\u9012\u5f52 \u5982\u679c\u8868\u539f\u672c\u5c31\u662f\u6709\u5e8f\u6216\u8005\u9006\u5e8f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(O(n^2)\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a \\(O(n)\\) \uff1b\u5982\u679c\u57fa\u51c6\u5143\u7d20\u9009\u7684\u597d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(O(nlog_2n)\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a \\(O(log_2n)\\) \u67a2\u8f74\u7684\u9009\u53d6\uff0c\u9009\u53d6\u5934\u4e2d\u5c3e\u4e09\u4e2a\u5143\u7d20\u9009\u4e2d\u95f4\u7684\uff0c\u6216\u8005\u968f\u673a\u9009\u62e9 \u7a33\u5b9a\u6027\uff1a\u4e0d\u7a33\u5b9a \u4e00\u8d9f\u6392\u5e8f\uff1a\u53ef\u4ee5\u786e\u5b9a\u591a\u4e2a\u5143\u7d20\u7684\u6700\u7ec8\u4f4d\u7f6e\uff08\u6bd4\u5982\u7b2c\u4e00\u8d9f\u786e\u5b9a1\u4e2a\uff0c\u7b2c\u4e8c\u8d9f\u53ef\u4ee5\u786e\u5b9a2\u4e2a\uff09\uff1b\u4e00\u6b21\u5212\u5206\uff08partition\uff09\uff1a\u53ea\u53ef\u4ee5\u786e\u5b9a\u4e00\u4e2a\u5143\u7d20\u7684\u6700\u7ec8\u4f4d\u7f6e","title":"8.3 \u4ea4\u6362\u6392\u5e8f\uff1a\u5192\u6ce1\u6392\u5e8f\u548c\u5feb\u901f\u6392\u5e8f"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#84","text":"\u9009\u62e9\u6392\u5e8f\uff1a \u5728\u5f85\u6392\u5e8f\u7684\u8868\u4e2d\u627e\u5230\u6700\u5c0f\u7684\uff0c\u7136\u540e\u548c\u5f85\u6392\u5e8f\u7684\u8868\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u8c03\u6362 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a \\(O(1)\\) \uff0c\u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\((O(n^2))\\) \uff0c\u4e14\u65e0\u6cd5\u63d0\u524d\u505c\u6b62\uff0c\u5373\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u53d8\uff1b\u6392\u5e8f\u8fc7\u7a0b\u4e2d\u79fb\u52a8\u6b21\u6570\u5f88\u5c11 \u7a33\u5b9a\u6027\uff1a\u4e0d\u7a33\u5b9a \u53ef\u4ee5\u9002\u7528\u4e8e\u94fe\u8868 \u5806\u6392\u5e8f\uff08\u91cd\u8981\uff09\uff1a \u5229\u7528\u5927\u6839\u5806\u6216\u5c0f\u6839\u5806\u5b9e\u73b0\uff1b\u5927\u6839\u5806\uff08\u5927\u9876\u5806\uff09\uff1a\u6839\u7ed3\u70b9\u7684\u6570\u5927\u4e8e\u5de6\u53f3\u5b50\u6811 \u5efa\u7acb\u5927\u6839\u5806\uff0c\u68c0\u67e5\u975e\u7ec8\u7aef\u7ed3\u70b9\u7684\u7f16\u53f7 \\(i<=floor(n/2)\\) \uff1b\u7f16\u53f7\u4ece\u5927\u5230\u5c0f\u68c0\u67e5\uff0c\u5982\u679c\u4e0d \u6bd4\u81ea\u5df1\u5b69\u5b50\u7ed3\u70b9\u90fd\u5927\uff0c\u4e0e 2 \u4e2a\u5b69\u5b50\u4e2d\u5927\u7684\u4ea4\u6362\uff0c\u4ea4\u6362\u540e\u8fd8\u8981\u5411\u4e0b\u68c0\u67e5\uff08\u53ef\u80fd\u4f1a\u7834\u574f\u4e0b\u9762\u7684\u5806\u7684\u6027\u8d28\uff09\uff1b\u6ce8\u610f\u5efa\u7acb\u5927\u6839\u5806\u65f6\u8868\u7684\u4e0b\u6807\u4e00\u822c\u4ece 1 \u5f00\u59cb\u65b9\u4fbf\u8ba1\u7b97\u5b69\u5b50\u7684\u4e0b\u6807 \u5806\u6392\u5e8f\uff1a\u6bcf\u4e00\u8d9f\u5c06\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u6362\u5230\u5806\u9876\uff1b\u518d\u8c03\u6574\u5927\u6839\u5806\uff08\u5c0f\u5143\u7d20\u4e0b\u5760\uff09 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(O(nlog_2n)\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a \\(O(1)\\) \u5efa\u7acb\u521d\u59cb\u5927\u6839\u5806\u7684\u590d\u6742\u5ea6\uff1a \\(O(n)\\) \uff0c\u4e0d\u8d85\u8fc7 4n \u7a33\u5b9a\u6027\uff1a\u4e0d\u7a33\u5b9a \u5806\u7684\u63d2\u5165\u548c\u5220\u9664\uff1a\u4ee5\u5c0f\u6839\u5806\u4e3a\u4f8b \u63d2\u5165\uff1a\u653e\u5728\u8868\u5c3e\uff08\u5806\u4f4e\uff09\uff0c\u5f80\u4e0a\u63d0 \u5220\u9664\uff1a\u7528\u5806\u5e95\uff08\u8868\u5c3e\uff09\u7684\u5143\u7d20\u66ff\u6362\u5220\u9664\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u5411\u4e0b\u5760\uff1b\u8981\u6ce8\u610f\u4e0b\u5760\u7684\u65f6\u5019\u5982\u679c\u67092\u4e2a\u5b69\u5b50\uff0c\u6bcf\u6b21\u4e0b\u5760\u90fd\u8981\u5bf9\u6bd42\u6b21\uff0c\u4e00\u4e2a\u5b69\u5b50\u53ea\u9700\u8981\u5bf9\u6bd4\u4e00\u6b21","title":"8.4 \u9009\u62e9\u6392\u5e8f\uff1a\u7b80\u5355\u9009\u62e9\u6392\u5e8f\u548c\u5806\u6392\u5e8f"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#85","text":"\u5f52\u5e76\u6392\u5e8f\uff1a\u4e00\u822c\u90fd\u662f 2 \u8def\u5f52\u5e76 \u5c06\u539f\u5e8f\u5217\u62c6\u6210 2 \u90e8\u5206\u8fdb\u884c\u9012\u5f52\u5f52\u5e76\u6392\u5e8f \u4ee3\u7801\u5b9e\u73b0\u65f6\u6709\u4e09\u4e2a\u6307\u9488\uff08int\u578b\uff09\uff0clow\uff0cmid\uff0chigh\uff0c\u5f00\u65b0\u7684\u7a7a\u95f4\u590d\u5236\u8fc7\u53bb\uff0c\u5728\u539f\u5217\u8868\u4e2d\u5f52\u5e76 2 \u4e2a\u51fd\u6570 MergeSort \u548c Merge \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(O(nlog_2n)\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a \\(O(n)\\) \uff08merge\u4e2d\u7684\u8f85\u52a9\u7a7a\u95f4\uff09 \u7a33\u5b9a\u6027\uff1a\u7a33\u5b9a \u57fa\u6570\u6392\u5e8f\uff1a\u6309\u4e2a\u4f4d\u5148\u6392\u597d\uff0c\u518d\u6309\u5341\u4f4d\u6392\u597d \u3002\u3002\u3002\u3002 \u57fa\u6570 \\(r\\) \uff1a\u6bd4\u5982\u5341\u8fdb\u5236\u5c31\u662f 10\uff0c\u8868\u793a\u6709 10 \u79cd\u4e0d\u540c\u7684\u53d6\u503c \u6392\u5e8f\u65f6\u9700\u8981\u8bbe\u7f6e \\(r\\) \u4e2a\u8f85\u52a9\u961f\u5217\uff0c \\(Q_{r-1},...,Q_0\\) \uff0c\u6309\u7167\u6743\u91cd\u4f4e\u7684\u5230\u6743\u91cd\u9ad8\u7684\u987a\u5e8f\uff0c\u8fdb\u884c \\(d\\) \u6b21\u5206\u914d\u518d\u6536\u96c6\uff0c \\(d\\) \u8868\u793a\u6709\u51e0\u4f4d \u65f6\u95f4\u590d\u6742\u5ea6 \\(O(d(n+r))\\) \uff0c\u4e00\u8d9f\u5206\u914d \\(O(n)\\) \uff0c\u4e00\u8d9f\u6536\u96c6 \\(O(r)\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 \\(O(r)\\) \uff0c\u5373 r \u4e2a\u8f85\u52a9\u961f\u5217 \u7a33\u5b9a\u6027\uff1a\u7a33\u5b9a \u5e94\u7528\uff1a\u6309\u7167\u5b66\u751f\u5e74\u9f84\u9012\u51cf\u6392\u5e8f\uff0c\u6743\u91cd \u5e74>\u6708>\u65e5\uff0c\u5e74\u6708\u65e5\u8d8a\u5927\uff0c\u5e74\u9f84\u8d8a\u5c0f\uff1b\u6240\u4ee5\u7b2c\u4e00\u8eba\u6309\u5206\u914d\uff0c\u6536\u96c6\u6309 \u65e5 \u9012\u589e\uff0c\u5373\u5148\u6536\u96c6 \u65e5 \u5c0f\u7684\u3002\u3002\u3002\u57fa\u6570 \\(r\\) \u5728\u5e74\u6708\u65e5\u662f\u4e0d\u540c\u7684 \u57fa\u6570\u6392\u5e8f\u64c5\u957f\u89e3\u51b3\u7684\u95ee\u9898\uff1a\u6570\u636e\u53ef\u4ee5\u65b9\u4fbf\u7684\u62c6\u5206\u4e3a d \u7ec4\uff0c\u5e76\u4e14 d \u548c r \u5c0f\u7684","title":"8.5 \u5f52\u5e76\u6392\u5e8f\u548c\u57fa\u6570\u6392\u5e8f"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#87","text":"\u5916\u90e8\u6392\u5e8f\uff1a \u5916\u5b58\u548c\u5185\u5b58\u4ee5\u5757\u4e3a\u5355\u4f4d\u8bfb\u5199 \u6784\u9020\u521d\u59cb\u7684\u5f52\u5e76\u6bb5\uff1a\u5728\u5185\u5b58\u4e2d\u5f00\u4e09\u5757\u7684\u7a7a\u95f4\uff0c\u6bcf\u6b21\u8bfb\u5165\u8fde\u7eed\u7684 2 \u5757\u8fdb\u884c\u5f52\u5e76\u6392\u5e8f\uff0c\u7136\u540e\u5199\u56de\u53bb\uff0c\u5047\u8bbe\u6709 n \u5757\uff0c\u5219\u5f97\u5230 n/2 \u4e2a\u5f52\u5e76\u6bb5\uff0c\u4e00\u5171\u8bfb\u5199\u4e86 2n \u6b21\uff1b\u7136\u540e\u4e0d\u65ad\u7684\u5f52\u5e76\u6210\u66f4\u5927\u7684\u6bb5\uff08\u8fd9\u91cc\u8981\u77e5\u9053\u600e\u4e48\u7528\u5185\u5b58\u4e2d\u4e09\u5757\u7684\u7a7a\u95f4\u53bb\u5f52\u5e76\uff0c\u5916\u5b58\u9700\u8981\u5f00\u989d\u5916\u7684\u7a7a\u95f4\uff09 \u5916\u90e8\u6392\u5e8f\u7684\u65f6\u95f4\u5f00\u9500=\u8bfb\u5199\u5916\u5b58\u7684\u65f6\u95f4+\u5185\u90e8\u6392\u5e8f\u7684\u65f6\u95f4\uff08\u751f\u6210\u521d\u59cb\u5f52\u5e76\u6bb5\uff09+\u5185\u90e8\u5f52\u5e76\u6240\u9700\u65f6\u95f4\uff1b\u65f6\u95f4\u4e3b\u8981\u82b1\u5728\u4e86\u8bfb\u5199\u5916\u5b58\u4e0a \u603b\u8bfb\u5199\u78c1\u76d8\u6b21\u6570 = \u6587\u4ef6\u603b\u5757\u6570 *2* (\u5f52\u5e76\u8d9f\u6570 + 1)\uff08\u6784\u9020\u521d\u59cb\u5f52\u5e76\u6bb5+\u5f52\u5e76\u7684\u8d9f\u6570\uff09 \u4f18\u5316\u601d\u8def1\uff1a\u51cf\u5c11\u5f52\u5e76\u7684\u8d9f\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u8def\u5f52\u5e76\uff0c\u5185\u5b58\u9700\u8981\u66f4\u591a\u7684\u7f13\u51b2\u533a\uff0c\u7a7a\u95f4\u6362\u65f6\u95f4\uff1b\u5047\u8bbe\u6709 r \u4e2a\u521d\u59cb\u5f52\u5e76\u6bb5\uff0c\u505a k \u8def\u5f52\u5e76 \u4f18\u5316\u601d\u8def2\uff1a\u589e\u52a0\u521d\u59cb\u5f52\u5e76\u6bb5\u7684\u5927\u5c0f\uff08\u5185\u5b58\u9700\u8981\u7684\u5757\u6570\u8981\u53d8\u5927\uff09\uff0c\u5373\u51cf\u5c11\u521d\u59cb\u5f52\u5e76\u6bb5\u7684\u6570\u91cf r \u8d25\u8005\u6811\uff1a k \u8def\u5f52\u5e76 k \u8fc7\u5927\u65f6\u4f1a\u5bfc\u81f4\u9009\u51fa\u4e00\u4e2a\u6700\u5c0f\u5143\u7d20\u9700\u8981\u5bf9\u6bd4 k-1 \u6b21\uff0c\u8d25\u8005\u6811\u53ef\u4ee5\u4f18\u5316\u8fd9\u4e2a\uff1b\u8d25\u8005\u6811\u7684\u7ed3\u70b9\u5b58\u653e\u5931\u8d25\u8005\uff0c\u6700\u540e\u591a\u4e00\u4e2a\u989d\u5916\u7684\u7ed3\u70b9\u5b58\u50a8\u51a0\u519b \u6709\u4e86\u8d25\u8005\u6811\uff0c\u9009\u51fa\u6700\u5c0f\u5143\u7d20\u53ea\u9700\u8981\u5bf9\u6bd4\u5173\u952e\u5b57 \\(ceil(log_2k)\\) \u6b21 \u7f6e\u6362\u9009\u62e9\u6392\u5e8f\uff1a \u539f\u672c\u7684\u529e\u6cd5\uff0c\u5982\u679c\u5185\u5b58\u53ef\u5bb9\u7eb3 \\(l\\) \u4e2a\u8bb0\u5f55\uff0c\u6587\u4ef6\u4e00\u5171\u6709 \\(n\\) \u4e2a\u8bb0\u5f55\uff0c\u5219\u521d\u59cb\u5f52\u5e76\u6bb5\u7684\u6570\u91cf \\(r = n/l\\) \uff1b \u7f6e\u6362\u9009\u62e9\u6392\u5e8f\u65f6\u8bb0\u5f55\u5df2\u7ecf\u8f93\u51fa\u7684\u6700\u5c0f\u6570\u503c \\(min\\) \uff0c\u6bcf\u6b21\u8f93\u51fa\u6700\u5c0f\u7684\u4e14\u5927\u4e8e \\(min\\) \u7684\u6570\uff0c\u66f4\u65b0 \\(min\\) \u518d\u8bfb\u5165\u65b0\u7684\uff1b\u5c0f\u4e8e \\(min\\) \u7684\u7559\u5728\u5185\u5b58\u5185\uff0c\u76f4\u5230\u5185\u5b58\u5185\u7684\u90fd\u5c0f\u4e8e \\(min\\) \uff1b\u8fd9\u6837\u505a\u6bcf\u6b21\u5f97\u5230\u7684\u521d\u59cb\u5f52\u5e76\u6bb5\u957f\u5ea6\u5e76\u4e0d\u4e00\u5b9a\u76f8\u540c \u6700\u4f73\u5f52\u5e76\u6811 \u4e8c\u8def\u5f52\u5e76\u548c\u591a\u8def\u5f52\u5e76\u539f\u7406\u76f8\u540c\uff0c\u90fd\u662f\u6784\u9020\u54c8\u592b\u66fc\u6811\uff1b\u5bf9\u4e8e k \u53c9\u5f52\u5e76\uff0c\u5982\u679c\u521d\u59cb\u5f52\u5e76\u6bb5\u6570\u91cf\u65e0\u6cd5\u4e25\u683c\u6784\u6210 k \u53c9\u5f52\u5e76\u6811\uff0c\u9700\u8981\u8865\u5145\u957f\u5ea6\u4e3a 0 \u7684 \"\u865a\u6bb5\"","title":"8.7 \u5916\u90e8\u6392\u5e8f"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_2","text":"","title":"\u603b\u7ed3"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_3","text":"next[i] \u7684\u503c\u548c \u6a21\u5f0f\u4e32\u4e2d i \u524d\u7684\u5b50\u4e32\u7684\u6700\u5927\u76f8\u540c\u524d\u540e\u7f00\u957f\u5ea6 k \u51b3\u5b9a\uff0c\u5982\u679c\u4e32\u7d22\u5f15\u75311\u5f00\u59cb\uff0c\u5c31\u662f k+1\uff0c\u5426\u5219\u5c31\u662f k\uff1b \u8ba1\u7b97 next \u7684\u8fc7\u7a0b\u53ef\u4ee5\u7406\u89e3\u4e3a \u6a21\u5f0f\u4e32\u81ea\u5df1\u5339\u914d\u81ea\u5df1\u7684\u8fc7\u7a0b","title":"\u4e32"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_4","text":"\u54c8\u592b\u66fc\u6811\u53ef\u4ee5\u5f97\u5230\u4e00\u79cd\u524d\u7f00\u7f16\u7801\uff0c\u4e14\u5e26\u6743\u8def\u5f84\u957f\u5ea6\u662f\u6700\u5c0f\u7684\uff08WPL\uff09;\u4e14\u54c8\u592b\u66fc\u6811\u65e0\u5ea6\u4e3a1\u7684\u7ed3\u70b9\uff0c \\(n_0=n_2+1\\) \u4f1a\u5f88\u6709\u7528 \u5e76\u67e5\u96c6\u662f\u4e00\u79cd\u7b80\u5355\u7684\u96c6\u5408\u8868\u793a\uff0cfind \u5982\u679c\u4e0d\u505a\u8def\u5f84\u538b\u7f29\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u4e8c\u53c9\u6392\u5e8f\u6811\u548c\u5e73\u8861\u4e8c\u53c9\u6811 \u7ea2\u9ed1\u6811\u7684\u5b9a\u4e49\uff0c\u63d2\u5165\u548c\u5220\u9664","title":"\u6811"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_5","text":"topological order\uff1a\u62d3\u6251\u5e8f\uff0ctopological sequence\uff1a\u62d3\u6251\u5e8f\u5217 \u57fa\u672c\u6982\u5ff5 \u5224\u65ad\u6709\u5411\u56fe\u662f\u5426\u6709\u73af\uff1adfs\uff0c\u62d3\u6251\u6392\u5e8f\uff0c\u6c42\u5173\u952e\u8def\u5f84","title":"\u56fe"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_6","text":"B \u6811 \u548c B+ \u6811\u7684\u533a\u522b\uff08\u81f3\u591a\uff0c\u81f3\u5c11\uff09 B\u6811\u4e2d\u7ed3\u70b9\u548c\u5173\u952e\u5b57\u7684\u533a\u522b","title":"\u67e5\u627e"},{"location":"%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_7","text":"\u76f4\u63a5\u63d2\u5165\u6392\u5e8f \u6bd4 \u6298\u534a\u63d2\u5165\u6392\u5e8f\u7684\u6bd4\u8f83\u6b21\u6570\u591a\u4e86 \u5e0c\u5c14\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \u5806\u6392\u7684\u521d\u59cb\u5316\uff0c\u63d2\u5165\uff0c\u5220\u9664\uff1b\u8981\u6ce8\u610f\u5c0f\u5143\u7d20\u4e0b\u5760\u65f6\u8981\u4e0b\u5760\u591a\u6b21 \u9009\u62e9\u6392\u5e8f\u6bd4\u8f83\u6b21\u6570\u662f\u56fa\u5b9a\u7684\uff0c\u5f52\u5e76\u6392\u5e8f\u6bd4\u8f83\u6b21\u6570\u7684\u6570\u91cf\u7ea7\u662f\u56fa\u5b9a\u7684 \u57fa\u6570\u6392\u5e8f LSD\uff08\u6700\u4f4e\u4f4d\u4f18\u5148\uff09 \u7684\u610f\u601d\u662f\u5148\u4ece\u6700\u4f4e\u4e3a\u5f00\u59cb\u6392\uff0c\u800c\u4e0d\u662f\u6700\u4f4e\u4f4d\u7684\u91cd\u8981\u6027\u6700\u5927 \u5916\u90e8\u6392\u5e8f\u5e38\u7528\u5f52\u5e76\u6392\u5e8f \u603b\u7684\u9700\u8981\u6ce8\u610f\u7684\u70b9\uff1a \u7a33\u5b9a\u7684\u6392\u5e8f\uff1a\u63d2\u5165\uff0c\u5192\u6ce1\uff0c\u5f52\u5e76\uff0c\u57fa\u6570 \u6bcf\u4e2a\u7b97\u6cd5\u7684\u65f6\u95f4\u7a7a\u95f4\u590d\u6742\u5ea6 \u6700\u597d\u60c5\u51b5\u4e0b\u5b9e\u8df5\u590d\u6742\u5ea6\u53ef\u4ee5\u5230\u8fbe\u7ebf\u6027\uff1a\u5192\u6ce1\u6392\u5e8f\uff0c\u76f4\u63a5\u63d2\u5165 \u6392\u5e8f\u6709\u591a\u4e2a\u6761\u4ef6\u662f\uff0c\u5148\u6bd4\u8f83\u91cd\u8981\u6027\u5c0f\u7684\uff0c\u518d\u7528\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5\u6bd4\u8f83\u91cd\u8981\u6027\u5927\u7684","title":"\u6392\u5e8f"},{"location":"%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA/","text":"\u6982\u7387\u8bba \u00b6 https://www.bilibili.com/video/BV1wq4y1v7Cz?spm_id_from=333.999.0.0 \u7b2c\u4e00\u7ae0 \u6982\u7387\u8bba\u7684\u57fa\u672c\u6982\u5ff5 \u00b6 1.1 \u4e8b\u4ef6 \u00b6 1.2 \u6982\u7387 \u00b6 1.3\u53e4\u5178\u4e0e\u51e0\u4f55\u6982\u578b \u00b6 1.4 \u6761\u4ef6\u6982\u7387 \u00b6 1.5 \u4e8b\u4ef6\u7684\u72ec\u7acb\u6027\uff0c\u8d1d\u52aa\u529b\u6982\u578b \u00b6 \u7b2c\u4e8c\u7ae0 \u968f\u673a\u53d8\u91cf\u53ca\u5176\u5206\u5e03 \u00b6","title":"\u6982\u7387\u8bba"},{"location":"%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA/#_1","text":"https://www.bilibili.com/video/BV1wq4y1v7Cz?spm_id_from=333.999.0.0","title":"\u6982\u7387\u8bba"},{"location":"%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA/#_2","text":"","title":"\u7b2c\u4e00\u7ae0 \u6982\u7387\u8bba\u7684\u57fa\u672c\u6982\u5ff5"},{"location":"%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA/#11","text":"","title":"1.1 \u4e8b\u4ef6"},{"location":"%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA/#12","text":"","title":"1.2 \u6982\u7387"},{"location":"%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA/#13","text":"","title":"1.3\u53e4\u5178\u4e0e\u51e0\u4f55\u6982\u578b"},{"location":"%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA/#14","text":"","title":"1.4 \u6761\u4ef6\u6982\u7387"},{"location":"%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA/#15","text":"","title":"1.5 \u4e8b\u4ef6\u7684\u72ec\u7acb\u6027\uff0c\u8d1d\u52aa\u529b\u6982\u578b"},{"location":"%E7%AC%94%E8%AE%B0/%E6%A6%82%E7%8E%87%E8%AE%BA/#_3","text":"","title":"\u7b2c\u4e8c\u7ae0 \u968f\u673a\u53d8\u91cf\u53ca\u5176\u5206\u5e03"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/","text":"\u6c47\u7f16\u8bed\u8a00\u5b66\u4e60\u7b14\u8bb0 \u00b6 b\u7ad9\u5c0f\u7532\u9c7c win10\u914d\u7f6e\u6c47\u7f16\u73af\u5883 \u00b6 https://blog.csdn.net/weixin_42109012/article/details/102726296 1 \u57fa\u7840\u77e5\u8bc6 \u00b6 \u6c47\u7f16\u8bed\u8a00\u7684\u7ec4\u6210 \u200b 1.\u6c47\u7f16\u6307\u4ee4\uff08\u673a\u5668\u7801\u7684\u52a9\u8bb0\u7b26\uff09 \u200b 2.\u4f2a\u6307\u4ee4\uff08\u7531\u7f16\u8bd1\u5668\u6267\u884c\uff09 \u200b 3.\u5176\u4ed6\u7b26\u53f7\uff08\u7531\u7f16\u8bd1\u5668\u8bc6\u522b\uff09 \u78c1\u76d8\u4e0d\u540c\u4e8e\u5185\u5b58\uff0c\u78c1\u76d8\u4e0a\u7684\u6570\u636e\u6216\u7a0b\u5e8f\u5982\u679c\u4e0d\u8bfb\u5165\u5185\u5b58\u4e2d\uff0c\u5c31\u65e0\u6cd5\u88abcpu\u4f7f\u7528 CPU\u8981\u60f3\u8fdb\u884c\u6570\u636e\u7684\u8bfb\u5199\uff0c\u5fc5\u987b\u548c\u5916\u90e8\u5668\u4ef6\uff08\u5373\u82af\u7247\uff09\u8fdb\u884c\u4e09\u7c7b\u4fe1\u606f\u7684\u4ea4\u4e92 \u200b 1.\u5730\u5740\u4fe1\u606f\uff1a\u5b58\u50a8\u5355\u5143\u7684\u5730\u5740 \u200b 2.\u63a7\u5236\u4fe1\u606f\uff1a\u82af\u7247\u7684\u9009\u62e9\uff0c\u8bfb\u6216\u5199\u547d\u4ee4 \u200b 3.\u6570\u636e\u4fe1\u606f\uff1a\u8bfb\u6216\u5199\u7684\u6570\u636e \u5404\u7c7b\u5b58\u50a8\u5668\u82af\u7247\u4ece\u529f\u80fd\u548c\u8fde\u63a5\u4e0a\u5206\u7c7b \u200b 1.\u968f\u673a\u5b58\u50a8\u5668RAM \u200b 2.\u88c5\u6709BIOS\u7684ROM \u200b 3.\u63a5\u53e3\u5361\u4e0a\u7684RAM \u6ce8\uff1a\u8d1f\u6570\u8865\u7801\u7684\u5b9a\u4e49 \u00b6 \u539f\u7801\u53d6\u53cd\u52a0\u4e00\u7684\u5b9a\u4e49\u5e76\u4e0d\u5177\u6709\u666e\u9002\u6027\uff0c\u6bd4\u59828\u4f4d\u4e8c\u8fdb\u5236\u4e2d\u7684-128 \u66f4\u52a0\u666e\u4e16\u7684\u5b9a\u4e49\uff1a\u4e00\u4e2a\u6570\u7684\u6a21\u51cf\u53bb\u5176\u7edd\u5bf9\u503c \u6a21\u7684\u5b9a\u4e49\uff1a1\u540e\u9762\u52a0\u4e0a\u53c2\u4e0e\u8fd0\u7b97\u7684\u4f4d\u6570 \u6240\u4ee5-128\u7684\u8865\u7801 = 100000000-10000000=10000000 2 \u5bc4\u5b58\u5668\uff08CPU\u5de5\u4f5c\u539f\u7406\uff09 \u00b6 CPU=\u8fd0\u7b97\u5668+\u63a7\u5236\u5668+\u5bc4\u5b58\u5668\uff0c\u5668\u4ef6\u4e4b\u95f4\u901a\u8fc7\u603b\u7ebf\u76f8\u8fde 8086CPU\u670914\u4e2a\u5bc4\u5b58\u5668\uff0c\u540d\u79f0\u5206\u522b\u4e3a\uff1a \u200b AX\uff0cBX\uff0cCX\uff0cDX\uff0cSI\uff0cDI\uff0cSP\uff0cBP\uff0cIP\uff0cCS\uff0cSS\uff0cDS\uff0cES\uff0cPSW \u901a\u7528\u5bc4\u5b58\u5668\u7528 x \u7ed3\u5c3e\uff0c\u6bb5\u5bc4\u5b58\u5668\u7528 s \u7ed3\u5c3e 2.1 \u901a\u7528\u5bc4\u5b58\u5668 \u00b6 8086CPU\u6240\u6709\u7684\u5bc4\u5b58\u5668\u90fd\u662f16\u4f4d\u7684\uff0c\u53ef\u4ee5\u5b58\u653e2\u4e2a\u5b57\u8282 AX\u3001BX\u3001CX\u3001DX\u901a\u5e38\u7528\u6765\u5b58\u653e\u4e00\u822c\u6027\u6570\u636e\uff0c\u88ab\u79f0\u4e3a\u901a\u7528\u5bc4\u5b58\u5668 \u8fdb\u5236\uff1aH\uff08\u5341\u516d\u8fdb\u5236\uff09\uff0cB\uff08\u4e8c\u8fdb\u5236\uff09 2.2 \u51e0\u6761\u6c47\u7f16\u6307\u4ee4 \u00b6 mov ax,18 ;AX=18 mov ah,78 ;AH=78 add ax,8 ;AX=AX+8 mov ax,bx ;AX=BX add ax,bx ;AX+=BX inc ax ;AX+=1 dec ax ;AX-=1 nop ;\u5360\u4e00\u4e2a\u5b57\u8282 2.3 \u7269\u7406\u5730\u5740\u548c\u903b\u8f91\u5730\u5740 \u00b6 \u903b\u8f91\u5730\u5740 (\u865a\u62df\u5730\u5740/\u76f8\u5bf9\u5730\u5740/\u6709\u6548\u5730\u5740)\uff1a\u7531\u6bb5\u5730\u5740\u548c\u504f\u79fb\u5730\u5740\u7ec4\u6210 \u7269\u7406\u5730\u5740 (\u5b9e\u9645\u5730\u5740/\u7edd\u5bf9\u5730\u5740)\uff1a\u6bb5\u5730\u5740 \\(\\times\\) 16+\u504f\u79fb\u5730\u5740 2.3 \u6bb5\u7684\u6982\u5ff5 \u00b6 \u4e00\u4e2a\u6bb5\u7684\u8d77\u59cb\u5730\u5740\u4e00\u5b9a\u662f16\u7684\u500d\u6570 \u4e00\u4e2a\u6bb5\u7684\u6700\u5927\u957f\u5ea6\u662f64K 2.4 \u6bb5\u5bc4\u5b58\u5668 \u00b6 \u63d0\u4f9b\u6bb5\u5730\u5740\u7684\u6bb5\u5bc4\u5b58\u5668 \u6bb5\u5bc4\u5b58\u5668 CS code segment DS data segment SS stack segment ES extra segment 2.4.1 CS / IP \u00b6 CS\uff1a\u4ee3\u7801\u6bb5\u5bc4\u5b58\u5668 IP\uff1a\u6307\u4ee4\u6307\u9488 \u5bc4\u5b58\u5668 8086CPU\u5de5\u4f5c\u8fc7\u7a0b\u7684\u7b80\u8981\u63cf\u8ff0 \u200b 1.\u4eceCS:IP\u6307\u5411\u5185\u5b58\u5355\u5143\uff0c\u8bfb\u53d6\u6307\u4ee4\uff0c\u8bfb\u53d6\u7684\u6307\u4ee4\u8fdb\u5165\u6307\u4ee4\u7f13\u51b2\u5668 \u200b 2.IP=IP+\u6240\u8bfb\u53d6\u6307\u4ee4\u7684\u957f\u5ea6\uff0c\u4ece\u800c\u6307\u5411\u4e0b\u4e00\u6761\u6307\u4ee4 \u200b 3.\u6267\u884c\u6307\u4ee4\uff0c\u8f6c\u5230\u6b65\u9aa41\uff0c\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b \u57288086CPU\u52a0\u7535\u542f\u52a8\u6216\u590d\u4f4d\u540e\uff08\u5373CPU\u521a\u5f00\u59cb\u5de5\u4f5c\u65f6\uff09CS\u548cIP\u88ab\u8bbe\u7f6e\u4e3a CS=FFFFH\uff0cIP=0000H \u5373\u57288086PC\u673a\u521a\u542f\u52a8\u65f6\uff0cCPU\u4ece\u5185\u5b58FFFF0H\u5355\u5143\u4e2d\u8bfb\u53d6\u6307\u4ee4\u6267\u884c\uff0cFFFF0H\u5355\u5143\u4e2d\u7684\u6307\u4ee4\u662f8086PC\u673a\u5f00\u673a\u540e\u6267\u884c\u7684\u7b2c\u4e00\u6761 2.4.2 jmp \u00b6 \u4e0d\u80fd\u901a\u8fc7 mov \u6539\u53d8CS\u548cIP \u540c\u65f6\u4fee\u6539CS/IP \u683c\u5f0f\uff1a jmp \u6bb5\u5730\u5740\uff1a\u504f\u79fb\u5730\u5740 ;eg jmp 2AE3:3 ;2AE33H jmp 3:0B16 ;00B46H \u4ec5\u4fee\u6539IP \u683c\u5f0f\uff1a jmp \u67d0\u4e00\u5408\u6cd5\u5bc4\u5b58\u5668 ;eg jmp ax ;\u7c7b\u4f3cmov IP,ax 2.5 DEBUG\u7684\u4f7f\u7528\u3010\u5b9e\u9a8c\u4e00\u3011 \u00b6 \u4e0d\u533a\u5206\u5927\u5c0f\u5199 r\u547d\u4ee4\uff1a\u67e5\u770b\u3001\u6539\u53d8CPU\u5bc4\u5b58\u5668\u7684\u5185\u5bb9 r\u540e\u9762\u52a0\u5bc4\u5b58\u5668\u7684\u540d\u79f0\u540e\u53ef\u4ee5\u6539\u53d8CPU\u5bc4\u5b58\u5668\u7684\u5185\u5bb9 d\u547d\u4ee4\uff1a\u67e5\u770b\u5185\u5b58\u4e2d\u7684\u5185\u5bb9\uff08\u53ef\u4ee5+\u5177\u4f53\u7684\u903b\u8f91\u5730\u5740+\u8303\u56f4\uff09 d fff0:0 d fff0:0 ff e\u547d\u4ee4\uff1a\u6539\u5199\u5185\u5b58\u4e2d\u7684\u5185\u5bb9 ;\u4ece\u4e00\u4e2a\u5355\u5143\u5f00\u59cb\u586b\u5199\u6570\u636e e B810:0000 01 01 02 02 03 03 04 04 u\u547d\u4ee4\uff1a\u5c06\u5185\u5b58\u6c47\u603b\u7684\u673a\u5668\u6307\u4ee4\u7ffb\u8bd1\u6210\u6c47\u7f16\u6307\u4ee4\uff08\u53ef\u4ee5+\u5177\u4f53\u7684\u903b\u8f91\u5730\u5740+\u67e5\u627e\u8303\u56f4\uff09 t\u547d\u4ee4\uff1a\u6267\u884c\u4e00\u6761\u673a\u5668\u6307\u4ee4 a\u547d\u4ee4\uff1a\u4ee5\u6c47\u7f16\u6307\u4ee4\u7684\u683c\u5f0f\u5728\u5185\u5b58\u4e2d\u5199\u5165\u4e00\u6761\u673a\u5668\u6307\u4ee4\uff08\u4e0d\u9700\u8981\u5199H\uff0ca+\u5730\u5740\uff09 q\u547d\u4ee4\uff1a\u53ef\u4ee5\u9000\u51fa g\u547d\u4ee4\uff1a\u8df3\u8fc7\uff08\u65ad\u70b9\uff09\uff0c \u52a0\u504f\u79fb\u5730\u5740\u8df3\u5230\u5177\u4f53\u7684\u67d0\u4e00\u884c p\u547d\u4ee4\uff1a cls\uff1a\u6e05\u5c4f 3 \u5bc4\u5b58\u5668\uff08\u5185\u5b58\u8bbf\u95ee\uff09 \u00b6 3.1 \u5185\u5b58\u4e2d\u5b57\u7684\u5b58\u50a8 \u00b6 \u6570\u636e\u7684\u5b58\u50a8\u65b9\u5f0f\uff1a\u5927\u7aef\u65b9\u5f0f\u548c\u5c0f\u7aef\u65b9\u5f0f\uff088086\u5904\u7406\u5668\u91c7\u7528\u5c0f\u7aef\u65b9\u5f0f\uff09 \u5927\u7aef\u65b9\u5f0f\uff1a\u9ad8\u5b57\u8282\u5b58\u50a8\u5728\u4f4e\u5730\u5740 \u5c0f\u7aef\u65b9\u5f0f\uff1a\u9ad8\u5b57\u8282\u5b58\u50a8\u5728\u9ad8\u5730\u5740 3.2 DS \u00b6 \u53ea\u6709\u5728 debug \u4e2d\u6dfb\u52a0\u6307\u4ee4\u65f6 [address] \u624d\u4f1a\u88ab\u8ba4\u4e3a\u662f\u504f\u79fb\u5730\u5740\uff0c\u5728 masm \u4e2d [address] \u4f1a\u88ab\u8ba4\u4e3a\u5c31\u662f address \u8fd9\u4e2a\u6570 mov bx,1000H mov ds,bx ;mov\u4e0d\u80fd\u76f4\u63a5\u628a\u6570\u636e\u9001\u5165\u6bb5\u5bc4\u5b58\u5668 mov bx,0 mov al,[bx] ;\u504f\u79fb\u5730\u5740\u4e3a0\u7684\u5355\u5143(1000:0)\u7684\u5185\u5bb9\u9001\u5165\u53ca\u5bc4\u5b58\u5668\uff0c mov\u6307\u4ee4\u7684\u4f20\u9001\u529f\u80fd \u5c06\u6570\u636e\u76f4\u63a5\u9001\u5165\u5bc4\u5b58\u5668\uff0cmov \u4e0d\u80fd\u76f4\u63a5\u628a\u6570\u636e\u9001\u5165\u6bb5\u5bc4\u5b58\u5668 \u6570\u636e -> \u901a\u7528\u5bc4\u5b58\u5668 -> \u6bb5\u5bc4\u5b58\u5668 \u5c06\u4e00\u4e2a\u5bc4\u5b58\u5668\u4e2d\u7684\u5185\u5bb9\u9001\u5165\u53e6\u4e00\u4e2a\u5bc4\u5b58\u5668 \u5c06\u4e00\u4e2a\u5185\u5b58\u5355\u5143\u4e2d\u7684\u5185\u5bb9\u9001\u5165\u4e00\u4e2a\u5bc4\u5b58\u5668 \u683c\u5f0f mov \u5bc4\u5b58\u5668\u540d, \u5185\u5b58\u5355\u5143 [...]\u8868\u793a\u504f\u79fb\u5730\u5740\uff0c\u6bb5\u5730\u5740\u662f ds \u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u9001\u5165\u5185\u5b58\u5355\u5143 mov [bx],al 3.3 mov / add / sub \u6307\u4ee4 \u00b6 \u6ce8\u610f \uff1a16\u4f4d\u6570\u7b2c\u4e00\u4e2a\u5b57\u662f\u5b57\u6bcd\u7684\u8981\u524d\u7f00\u52a0 0\uff0c \u5982 0FFFFH \u4e0b\u9762\u7684\u5bc4\u5b58\u5668\u90fd\u6307\u901a\u7528\u5bc4\u5b58\u5668 mov\u6307\u4ee4\u7684\u51e0\u79cd\u5f62\u5f0f, mov \u4e0d\u80fd\u76f4\u63a5\u7528\u6570\u636e\u4fee\u6539\u6bb5\u5bc4\u5b58\u5668\u7684\u503c mov \u5bc4\u5b58\u5668\uff0c\u6570\u636e mov \u5bc4\u5b58\u5668\uff0c\u5bc4\u5b58\u5668 mov \u5bc4\u5b58\u5668\uff0c\u5185\u5b58\u5355\u5143 mov \u5185\u5b58\u5355\u5143\uff0c\u5bc4\u5b58\u5668 mov \u6bb5\u5bc4\u5b58\u5668\uff0c\u5bc4\u5b58\u5668 mov \u5bc4\u5b58\u5668\uff0c\u6bb5\u5bc4\u5b58\u5668 sub/add \u4e0d\u80fd\u5bf9\u6bb5\u5bc4\u5b58\u5668\u64cd\u4f5c add \u5bc4\u5b58\u5668\uff0c\u6570\u636e add \u5bc4\u5b58\u5668\uff0c\u5bc4\u5b58\u5668 add \u5bc4\u5b58\u5668\uff0c\u5185\u5b58\u5355\u5143 add \u5185\u5b58\u5355\u5143\uff0c\u5bc4\u5b58\u5668 3.4 \u6808 \u00b6 FILO push ax ;ax\u4e2d\u7684\u6570\u636e\u5165\u6808 pop ax ;\u6808\u9876\u6570\u636e\u53d6\u51fa\u7ed9ax \u6808\u9876\u7684\u6700\u5927\u53d8\u5316\u8303\u56f4\u4e3a 0-FFFFH 3.4.1 SS / SP \u00b6 SS\uff1a\u5b58\u653e\u6808\u8ba2\u7684\u6bb5\u5730\u5740 SP\uff1a\u5b58\u653e\u6808\u8ba2\u7684\u504f\u79fb\u5730\u5740 push ax\u65f6\uff0c 1.sp=sp-2 \uff08\u6808\u5e95\u7684\u5730\u5740\u6bd4\u6808\u9876\u9ad8\uff09 2.\u5c06ax\u4e2d\u7684\u5185\u5bb9\u9001\u5165\u5230ss:sp\u6307\u5411\u7684\u5185\u5b58\u5355\u5143 \u6267\u884cpop ax\u65f6 1.\u5c06ss:sp\u6307\u5411\u7684\u5185\u5b58\u5355\u5143\u7684\u5185\u5bb9\u9001\u5165\u5230ax\u4e2d \u200b \u6ce8\u610f\uff1a\u8fd9\u91cc\u53d6\u51fa\u7684\u5185\u5bb9\u5728\u5185\u5b58\u4e2d\u8fd8\u662f\u5b58\u5728\u7684\uff0c\u5e76\u6ca1\u6709\u88ab\u91cd\u7f6e\uff0c\u4e0b\u4e00\u8f6epush\u4f1a\u8986\u76d6 2.sp=sp+2 \u6808\u7a7a\u65f6\uff0csp\u6307\u5411\u6808\u5e95\u7684\u4e0b\u4e00\u4e2a\u5355\u5143 8086cpu\u4e0d\u4fdd\u8bc1\u5bf9\u6808\u7684\u64cd\u4f5c\u4e0d\u4f1a\u8d8a\u754c 3.4.2 pop / push \u00b6 \u683c\u5f0f\uff1a pop / push \u5bc4\u5b58\u5668 pop / push \u5185\u5b58\u5355\u5143 ;eg push [0] pop [2] ;\u5c0610000H-1000FH\u8fd9\u6bb5\u7a7a\u95f4\u4f5c\u4e3a\u6808\u7a7a\u95f4 mov ax,1000 mov ss,ax mov sp,0010H ;\u6808\u8ba2\u7684\u5730\u5740\u5927,\u6307\u5411\u6808\u5e95\u7684\u4e0b\u4e00\u4e2a\u7a7a\u95f4\u5355\u5143\u7684\u5730\u5740 push ax push bx push ds 3.4.3 \u5bc4\u5b58\u5668\u7f6e\u96f6\u7684\u65b9\u6cd5 \u00b6 sub ax,ax mov ax,0 xor ax,ax ;\u5f02\u6216 4 \u7b2c\u4e00\u4e2a\u6c47\u7f16\u7a0b\u5e8f \u00b6 \u6e90\u7a0b\u5e8f\u7531 \u6c47\u7f16\u6307\u4ee4+\u4f2a\u6307\u4ee4+\u5b8f\u6307\u4ee4 \u7ec4\u6210 \u200b \u4f2a\u6307\u4ee4\uff1a\u7f16\u8bd1\u5668\u5904\u7406 \u200b \u6c47\u7f16\u6307\u4ee4\uff1a\u7f16\u8bd1\u4e3a\u673a\u5668\u7801 \u4f2a\u6307\u4ee4 \u200b 1.\u6ca1\u6709\u5bf9\u5e94\u7684\u673a\u5668\u7801\u7684\u6307\u4ee4\uff0c\u4e0d\u80fd\u7531CPU\u76f4\u63a5\u6267\u884c \u200b 2.\u4f2a\u6307\u4ee4\u662f\u7531\u7f16\u8bd1\u5668\u6765\u6267\u884c\u7684\u6307\u4ee4\uff0c\u7f16\u8bd1\u5668\u6839\u636e\u4f2a\u6307\u4ee4\u6765\u8fdb\u884c\u76f8\u5173\u7684\u7f16\u8bd1\u5de5\u4f5c 4.1 segment / ends \u00b6 segment\u548cends\u662f\u4e00\u5bf9\u6210\u5bf9\u4f7f\u7528\u7684\u4f2a\u6307\u4ee4 segment\u548cends\u7684\u529f\u80fd\u662f\u5b9a\u4e49\u4e00\u4e2a\u6bb5 \u200b segment\uff1a\u8bf4\u660e\u4e00\u4e2a\u6bb5\u5f00\u59cb \u200b ends\uff1a\u8bf4\u660e\u4e00\u4e2a\u6bb5\u7ed3\u675f \u4e00\u4e2a\u6bb5\u5fc5\u987b\u6709\u4e00\u4e2a\u540d\u79f0\u6765\u6807\u8bc6\uff0c\u4f7f\u7528\u683c\u5f0f\u4e3a \u200b \u6bb5\u540d segment \u200b \u6bb5\u540d ends 4.2 end \u00b6 \u7ed3\u675f\u5bf9\u7a0b\u5e8f\u7684\u7f16\u8bd1 \u7ed3\u5c3e\u52a0\u4e0a 4.3 assume \u00b6 \u5047\u8bbe\u67d0\u4e00\u6bb5\u5bc4\u5b58\u5668\u548c\u7a0b\u5e8f\u4e2d\u67d0\u4e00\u4e2a\u7528 segment/ends \u5b9a\u4e49\u7684\u6bb5\u76f8\u5173\u8054 assume cs:codesg codesg segment ... codesg ends end 4.4 \u7a0b\u5e8f\u8fd4\u56de \u00b6 DOS\u4e2d\u7684\u7a0b\u5e8f\u8fd0\u884c \u200b 1.DOS\u662f\u4e00\u4e2a\u5355\u4efb\u52a1\u64cd\u4f5c\u7cfb\u7edf \u200b 2.\u4e00\u4e2a\u7a0b\u5e8f\u7ed3\u675f\u540e\uff0c\u5c06CPU\u7684\u63a7\u5236\u6743\u4ea4\u8fd8\u7ed9\u662f\u4ed6\u5f97\u4ee5\u8fd0\u884c\u7684\u7a0b\u5e8f \u200b \u6211\u4eec\u79f0\u8fd9\u4e2a\u8fc7\u7a0b\u4e3a\uff1a\u7a0b\u5e8f\u8fd4\u56de assembly mov ax\uff0c4c00H int 21H ;interrupt debug\u4e2d\u8981\u7528p\u547d\u4ee4\u6267\u884c \u76ee\u7684 \u76f8\u5173\u6307\u4ee4 \u6307\u4ee4\u6027\u8d28 \u6307\u4ee4\u6267\u884c\u8005 \u6bb5\u7ed3\u675f ends \u4f2a\u6307\u4ee4 \u7f16\u8bd1\u5668 \u7a0b\u5e8f\u7ed3\u675f end \u4f2a\u6307\u4ee4 \u7f16\u8bd1\u5668 \u7a0b\u5e8f\u8fd4\u56de \u57284.4 \u6c47\u7f16\u6307\u4ee4 CPU 4.5 EXE\u7a0b\u5e8f\u52a0\u8f7d\u8fc7\u7a0b \u00b6 \u627e\u5230\u4e00\u6bb5\u8d77\u59cb\u5730\u5740\u4e3a SA\uff1a0000\u7684\u8db3\u591f\u7684\u7a7a\u95f4 \u5728\u8d77\u59cb\u7684256\u4e2a\u5b57\u8282\u4e2d\u521b\u5efaPSP\uff08DOS\u5229\u7528PSP\u548c\u52a0\u8f7d\u7a0b\u5e8f\u8fdb\u884c\u901a\u4fe1\uff09 \u5728PSP\u4e4b\u540e\uff0c\u5373\u8d77\u59cb\u5730\u5740\u4e3a SA+10H\uff1a0000\u5f00\u59cb\u5b58\u653e\u7a0b\u5e8f 5 [bx] \u548c loop \u6307\u4ee4 \u00b6 5.1 [bx] \u00b6 mov bx,0 mov ax,[bx] ;masm\u4e2d\u4e0d\u80fd\u76f4\u63a5 mov ax,[0]\uff0cdebug\u4e2d\u53ef\u4ee5 ;masm\u9700\u8981 mov ax,ds:[0] mov ax,ds:[1] mov ax,ds:[2] 5.2 \u63cf\u8ff0\u6027\u7b26\u53f7 ( ) \u00b6 (ax) \u8868\u793a ax \u4e2d\u7684\u5185\u5bb9 (ax) = 0010H (21000H) = 0010H (ax) = ((ds)*16+2) ;mov ax,[2] ((ds)*16+2) = (ax) ;mov [2],ax (ax) = (ax)+2 ;add ax,2 (ax) = (ax)+(bx) ;add ax,bx (sp) = (sp)-2 ;push ax ((ss)*16+(sp)) = (ax) (ax) = ((ss)*16+(sp)) ;pop ax (sp) = (sp)+2 5.3 loop \u00b6 \u683c\u5f0f\uff1a loop \u6807\u53f7 CPU\u6267\u884cloop\u6307\u4ee4\u7684\u65f6\u5019\uff0c\u8981\u8fdb\u884c\u4e24\u6b65\u64cd\u4f5c \u200b 1.(cx)=(cx)-1; \u200b 2.\u5224\u65adcx\u4e2d\u7684\u503c\uff0c\u82e5\u4e0d\u4e3a\u96f6\uff0c\u5219\u8f6c\u81f3\u6807\u53f7\u5904\u6267\u884c\u7a0b\u5e8f\u3002\u82e5\u4e3a\u96f6\uff0c \u5219\u5411\u4e0b\u6267\u884c\u3002 \u901a\u5e38\uff0cloop\u6307\u4ee4\u5b9e\u73b0\u5faa\u73af\uff0ccx\u4e2d\u5b58\u653e\u5faa\u73af\u7684\u6b21\u6570 5.4 \u6bb5\u524d\u7f00 \u00b6 mov ax,ds:[0] ;ds\u5c31\u662f\u6bb5\u524d\u7f00,\u4e5f\u53ef\u4ee5\u7528cs/ss/es 5.5 \u4e00\u6bb5\u5b89\u5168\u7684\u7a7a\u95f4 \u00b6 8086\u4e2d\uff0c\u968f\u610f\u5411\u4e00\u6bb5\u5185\u5b58\u7a7a\u95f4\u5199\u5165\u5185\u5bb9\u662f\u5f88\u5371\u9669\u7684 \u56e0\u4e3a\u8fd9\u6bb5\u7a7a\u95f4\u4e2d\u53ef\u80fd\u5b58\u653e\u7740\u91cd\u8981\u7684\u7cfb\u7edf\u6570\u636e\u6216\u4ee3\u7801 \u5728\u4e00\u822c\u7684PC\u673a\u4e2d\uff0cDOS\u65b9\u5f0f\u4e0b\uff0cDOS\u548c\u5176\u4ed6\u5408\u6cd5\u7684\u7a0b\u5e8f\u4e00\u822c\u90fd\u4e0d\u4f1a\u4f7f \u7528\u30100:200~0:2FF\u3011 6 \u5305\u542b\u591a\u4e2a\u6bb5\u7684\u7a0b\u5e8f \u00b6 6.1 \u5728\u4ee3\u7801\u6bb5\u4e2d\u4f7f\u7528\u6570\u636e \u00b6 dw\uff1adefine word db\uff1adefine byte dd\uff1adefine dword 6.2 \u5728\u4ee3\u7801\u6bb5\u4e2d\u4f7f\u7528\u6808 \u00b6 assume cs:codesg codesg segment dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h dw 0,0,0,0,0,0,0,0,0,0 ;\u8fd9\u6bb5\u7a7a\u95f4\u5f53\u4f5c\u6808 start: ... codesg ends end start 6.3 \u5c06\u6570\u636e/\u4ee3\u7801/\u6808/\u653e\u5165\u4e0d\u540c\u7684\u6bb5 \u00b6 ```assembly assume cs:code, ds:data, ss:stack data segment ... data ends stack segment ... stack ends code segment start:... mov ax, data mov ds, ax code ends end start ``` \u4e09\u4e2a\u4e0d\u540c\u7684\u6bb5\u7684\u6bb5\u57fa\u5730\u5740\u53d6\u51b3\u4e8e\u4ee3\u7801\u4e2d\u5199\u7684\u5148\u540e \u5148\u5199\u7684\u6bb5\u7684\u6bb5\u57fa\u5730\u5740\u5c0f\uff0c\u540e\u5199\u7684\u6bb5\u7684\u6bb5\u57fa\u5730\u5740\u5927 7 \u66f4\u7075\u6d3b\u5730\u5b9a\u4f4d\u5185\u5b58\u5730\u5740 \u00b6 7.1 and / or \u00b6 and\uff1a\u903b\u8f91\u4e0e\uff0c\u6307\u5b9a\u4f4d\u7f6e0 or\uff1a\u903b\u8f91\u6216\uff0c\u6307\u5b9a\u4f4d\u7f6e1 ;eg mov al,01100011b and al,00111011b ;\u6267\u884c\u540e al = 00100011b 7.2 \u4ee5\u5b57\u7b26\u7684\u5f62\u5f0f\u7ed9\u51fa\u6570\u636e \u00b6 db 'unIX' mov al,'a' 7.3 \u5927\u5c0f\u5199\u8f6c\u6362\u95ee\u9898 \u00b6 \u5c0f\u5199\u5b57\u6bcd = \u5927\u5199\u5b57\u6bcd+32 \u5c0f\u5199\u5b57\u6bcd = \u5927\u5199\u5b57\u6bcd+20H \u5927\u5199\u5b57\u6bcd\u4ece41H\u5f00\u59cb\uff0c\u5c0f\u5199\u5b57\u6bcd\u4ece61H\u5f00\u59cb \u5927\u5199 \u4e8c\u8fdb\u5236 \u5c0f\u5199 \u4e8c\u8fdb\u5236 A 01000001 a 01100001 B 01000010 b 01100010 C 01000011 c 01100011 D 01000100 d 01100100 ;\u5927\u5c0f\u5199\u8f6c\u6362 ;\u8f6c\u5c0f\u5199 or al,00100000b ;0x20 ; \u8f6c\u5927\u5199 and al,11011111b ;0xdf 7.4 [bx+idata] \u00b6 [bx+idata] \u8868\u793a\u4e00\u4e2a\u5185\u5b58\u5355\u5143\uff0c\u5b83\u7684\u504f\u79fb\u5730\u5740\u662f (bx)+idata mov ax,[bx+200] ;\u4e5f\u53ef\u4ee5\u5199\u6210\u5982\u4e0b\u683c\u5f0f mov ax,200[bx] mov ax,[bx].200 ;2\u4e2a\u957f\u5ea6\u76f8\u540c\u7684\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4ea7\u8f6c\u5927\u5199\uff0c\u7b2c\u4e8c\u4e2a\u8f6c\u5c0f\u5199 data segment db 'BaSiC' db 'MinIX' data ends ;\u53ef\u4ee5\u7528 bx \u548c bx+5 \u5206\u522b\u8868\u793a2\u6bb5\u6570\u636e\u7684\u8d77\u59cb\u5730\u5740\uff0c\u518d\u81ea\u52a0bx\u904d\u5386 mov ax,data mov ds,ax mov bx,0 mov cx,5 s: mov al,[bx] and al,11011111b mov [bx],al mov al,[bx+5] ans al,00100000b mov [bx+5],al inc bx loop s 7.5 SI / DI \u00b6 SI / DI \u9664\u4e86 \u4e0d\u80fd\u5206\u4e3a2\u4e2a8\u4f4d\u7684\u5bc4\u5b58\u5668 \u5916\uff0c\u4e0e BX \u5b8c\u5168\u76f8\u540c source index/ destination index mov ax,[bx+si] ;\u53ef\u4ee5\u5199\u6210\u5982\u4e0b\u683c\u5f0f mov ax,[bx][si] mov ax,[bx+si+200] ;\u4e5f\u53ef\u4ee5\u5199\u6210 mov ax,200[bx][si] mov ax,[bx].200[si] ;\u7ed3\u6784\u4f53\u4e2d\u7684\u6570\u7ec4 mov ax,[bx][si].200 ## 7.6 \u53cc\u5c42\u5faa\u73af loop \u53ea\u80fd\u4e0e cx \u5173\u8054 \u6240\u4ee5\u5728\u6267\u884c\u5185\u5c42\u5faa\u73af\u4e4b\u524d\u628a cx \u7684\u503c\u4fdd\u5b58\u8d77\u6765\uff0c\u5185\u5c42\u5faa\u73af\u7ed3\u675f\u540e\u518d\u628a cx \u7684\u503c\u8d4b\u503c\u56de\u53bb\uff0c\u7528\u5185\u5b58\u4e2d\u7684\u6808\u6765\u4fdd\u5b58 ;eg\u901a\u8fc7\u591a\u5c42\u5faa\u73af\u5c06\u5b57\u7b26\u4e32\u5c0f\u5199\u8f6c\u5927\u5199 assume ds:data,ss:stack,cs:code data segment db 'aaaaaa' db 'bbbbbb' db 'cccccc' data ends stack segment dw 0,0,0,0,0,0,0,0 stack ends code segment start: mov ax,stack mov ss,ax mov sp,16 ;16\u4e2a\u5b57\u8282\u7684\u6808\u7a7a\u95f4 mov ax,data mov ds,ax mov bx,0 ;bx\u662f\u6bcf\u884c\u9996\u5143\u7d20\u7684\u5730\u5740 mov cx,3 ;\u6700\u5916\u5c42\u5faa\u73af s0: push cx ;\u5165\u6808 mov si,0 ;si\u662f\u5bf9\u5217\u8fdb\u884c\u904d\u5386 mov cx,6 ;\u5185\u5c42\u5faa\u73af s1: mov al,[bx+si] and al,11011111b mov [bx+si],al inc si loop s1 add si,6 pop cx loop s0 mov ax,4c00h int 21h code ends end start 8 \u6570\u636e\u5904\u7406\u7684\u4e24\u4e2a\u57fa\u672c\u95ee\u9898 \u00b6 \u5b9a\u4e49\u63cf\u8ff0\u6027\u7b26\u53f7\uff1a reg / sreg 8.1 bp \u00b6 8086\u4e2d\u53ea\u6709 bx / si / di / bp \u53ef\u4ee5 \u7528\u5728 [ ] \u4e2d\u8fdb\u884c\u5bfb\u5740 \u518d [ ] \u4e2d\u53ea\u6709 \u56db\u79cd\u7ec4\u5408 \u53ef\u4ee5\u51fa\u73b0 (\u786c\u4ef6\u539f\u56e0): bx \u548c si\uff0cbx \u548c di\uff0cbp \u548c si\uff0cbp \u548c di \u5728 [ ] \u4e2d\u4f7f\u7528 bp\uff0c\u4e14\u6ca1\u6709\u663e\u6027\u7684\u7ed9\u51fa\u6bb5\u5730\u5740\u65f6\uff0c\u6bb5\u5730\u5740\u9ed8\u8ba4\u662f ss 8.2 \u6c47\u7f16\u8bed\u8a00\u4e2d\u6570\u636e\u4f4d\u7f6e\u7684\u8868\u8fbe \u00b6 \u7acb\u5373\u6570 idata \u5bc4\u5b58\u5668 \u5185\u5b58\uff0c\u6bb5\u5730\u5740(SA) + \u504f\u79fb\u5730\u5740(EA) ## 8.3 \u6307\u4ee4\u5904\u7406\u7684\u6570\u636e\u6709\u591a\u957f\uff1f \u901a\u8fc7\u5bc4\u5b58\u5668\u540d\u786e\u5b9a\u5904\u7406\u6570\u636e\u7684\u957f\u5ea6 \u5728\u6ca1\u6709\u5bc4\u5b58\u5668\u540d\u7684\u60c5\u51b5\u4e0b\uff0c\u7528 X ptr \u6307\u957f\u5ea6\uff0c X \u4e3a word / byte \u5176\u4ed6\uff0c\u6bd4\u5982 push \u53ea\u5bf9\u5b57\u64cd\u4f5c 8.4 div \u00b6 \u9664\u6cd5\u6307\u4ee4 \u9664\u6570\uff1a8\u4f4d\u6216\u800516\u4f4d\uff0c\u5728\u5bc4\u5b58\u5668\u6216\u8005\u5185\u5b58\u5355\u5143\u4e2d \u88ab\u9664\u6570\uff1a\uff08\u9ed8\u8ba4\uff09\u653e\u5728 AX \u6216 DX+AX\u4e2d \u9664\u6570 \u88ab\u9664\u6570 8\u4f4d 16\u4f4d(AX) 16\u4f4d 32\u4f4d(DX+AX) \u7ed3\u679c\uff1a \u8fd0\u7b97 8\u4f4d\u9664\u6570 16\u4f4d\u9664\u6570 \u5546 AL AX \u4f59\u6570 AH DX div\u6307\u4ee4\u683c\u5f0f\uff1a div reg div \u5185\u5b58\u5355\u5143 ;eg div byte ptr ds:[0] ;\u542b\u4e49: (al) = (ax) / ((ds)*16+0) \u7684\u5546 ; (ah) = (ax) / ((ds)*16+0) \u7684\u4f59\u6570 div word ptr es:[0] ;\u542b\u4e49: (ax) = ((dx)*10000H+(ax)) / (..) \u7684\u5546 ; (dx) = ...\u7684\u4f59\u6570 8.5 dup \u00b6 \u64cd\u4f5c\u7b26\uff0c\u7531\u7f16\u8bd1\u5668\u4e66\u522b\u5904\u7406\u7684\u7b26\u53f7\uff0c\u7528\u6765\u5bf9\u6570\u636e\u8fdb\u884c\u91cd\u590d \u683c\u5f0f\uff1a db \u91cd\u590d\u6b21\u6570 dup\uff08\u9700\u8981\u91cd\u590d\u7684\u5b57\u8282\u578b\u6570\u636e\uff09\uff0cdw\uff0cdd \u540c db 3 dup(0) ;3\u4e2a0 dup 3 duo(0,1,2) ;3\u4e2a 0,1,2 9 \u8f6c\u79fb\u6307\u4ee4\u7684\u539f\u7406 \u00b6 \u76f8\u5f53\u4e8eC\u4e2d\u7684 goto 8086 CPU\u4e2d\u7684\u8f6c\u79fb\u6307\u4ee4\u7684\u5206\u7c7b \u65e0\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\uff08\u5982 jmp\uff09 \u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4 \u5faa\u73af\u6307\u4ee4\uff08\u5982 loop\uff09 \u8fc7\u7a0b\uff08\u51fd\u6570\uff09 \u4e2d\u65ad 9.1 offset \u00b6 \u529f\u80fd\uff1a\u53d6\u5f97\u6807\u53f7\u7684\u504f\u79fb\u5730\u5740 9.2 jmp \u00b6 jmp \u53ef\u4ee5\u53ea\u4fee\u6539 ip\uff0c\u4e5f\u53ef\u4ee5\u540c\u65f6\u4fee\u6539 cs \u548c ip jmp \u6307\u4ee4\u8981\u7ed9\u51fa\u4e24\u79cd\u4fe1\u606f \u8f6c\u79fb\u7684\u76ee\u7684\u5730\u5740 \u8f6c\u79fb\u7684\u8ddd\u79bb\uff08\u6bb5\u95f4\u8f6c\u79fb\uff0c\u6bb5\u5185\u77ed\u8f6c\u79fb\uff0c\u6bb5\u5185\u8fd1\u8f6c\u79fb\uff09 9.2.1 \u4f9d\u636e\u4f4d\u79fb\u8fdb\u884c\u8f6c\u79fb\u7684 jmp \u6307\u4ee4 \u00b6 jmp short \u6807\u53f7 \u5b9e\u73b0\u7684\u662f \u6bb5\u5185\u77ed\u8f6c\u79fb \uff0c\u5b83\u5bf9ip\u7684\u4fee\u6539\u8303\u56f4\u4e3a-128~127 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u5411\u524d\u8f6c\u79fb\u65f6\u53ef\u4ee5\u6700\u591a\u8d8a\u8fc7128\u4e2a\u5b57\u8282\uff0c\u5411\u540e\u8f6c\u79fb\u53ef\u4ee5\u6700\u591a\u8d8a\u8fc7127\u4e2a\u5b57\u8282 CPU\u4e0d\u9700\u8981\u76ee\u7684\u5730\u5740\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5bf9ip\u7684\u4fee\u6539 jmp short s \u6307\u4ee4\u7684\u8bfb\u53d6\u548c\u6267\u884c\u8fc7\u7a0b\uff1a \u6bd4\u5982 jmp short s \u7684\u673a\u5668\u7801\u662f EB03 EB03 \u8fdb\u5165\u6307\u4ee4\u7f13\u51b2\u5668 ip += 2\uff0ccs\uff1aip\u6307\u5411\u4e0b\u4e00\u6761\u6307\u4ee4 \u7136\u540e ip += 3\uff0c\u8f6c\u79fb\u5230 s \u5904 jmp near ptr \u6807\u53f7 \u5b9e\u73b0 \u6bb5\u5185\u8fd1\u8f6c\u79fb \uff0cip = ip+16\u4f4d\u4f4d\u79fb\uff0c\u8303\u56f4\u662f -32769~32769 9.2.2 \u8f6c\u79fb\u7684\u76ee\u7684\u5730\u5740\u5728\u6307\u4ee4\u4e2d\u7684 jmp \u6307\u4ee4 \u00b6 jmp far ptr \u6807\u53f7 \u5b9e\u73b0\u7684\u662f \u6bb5\u95f4\u8f6c\u79fb \uff0c\u53c8\u79f0\u4e3a\u8fdc\u8f6c\u79fb(\u6bb5\u95f4\u8f6c\u79fb\u5e76\u4e0d\u4ee3\u8868\u5728\u4e0d\u540c\u7684\u6bb5\u4e2d\uff0c\u53ea\u662f\u8ddd\u79bb\u5f88\u8fdc) jmp far ptr s 9.2.3 \u8f6c\u79fb\u5730\u5740\u5728\u5bc4\u5b58\u5668\u4e2d\u7684 jmp \u6307\u4ee4 \u00b6 jmp 16\u4f4d\u5bc4\u5b58\u5668 \u529f\u80fd\uff1aip = \uff0816\u4f4d\u5bc4\u5b58\u5668\uff09 9.2.4 \u8f6c\u79fb\u5730\u5740\u5728\u5185\u5b58\u4e2d\u7684 jmp \u6307\u4ee4 \u00b6 jmp word ptr \u5185\u5b58\u5355\u5143\u5730\u5740\uff08\u6bb5\u5185\u8f6c\u79fb\uff09 \u529f\u80fd\uff1a\u5185\u5b58\u5355\u5143\u5730\u5740\u5f00\u59cb\u5904\u5b58\u653e\u7684\u5b57\u662f\u8f6c\u79fb\u76ee\u7684\u7684\u504f\u79fb\u5730\u5740 mov ax,0123H mov ds:[0],ax jmp word ptr ds:[0] ;jmp ax jmp dword ptr \u5185\u5b58\u5355\u5143\u5730\u5740\uff08\u6bb5\u95f4\u8f6c\u79fb\uff09 \u529f\u80fd\uff1a\u5185\u5b58\u5355\u5143\u5730\u5740\u5f00\u59cb\u5904\u5b58\u653e\u76842\u4e2a\u5b57\u4e2d\uff0c\u9ad8\u5730\u5740\u662f\u8f6c\u79fb\u76ee\u7684\u7684\u6bb5\u5730\u5740\uff0c\u4f4e\u5730\u5740\u662f\u8f6c\u79fb\u76ee\u6807\u7684\u504f\u79fb\u5730\u5740 9.3 jcxz \u00b6 \u6709\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\uff08\u6240\u6709\u7684\u6709\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\u90fd\u662f\u77ed\u8f6c\u79fb\uff1aloop\uff09 ip \u7684\u4fee\u6539\u8303\u56f4\u662f -127-128 \u683c\u5f0f\uff1ajcxz \u6807\u53f7\uff08\u5982\u679c (cx) = 0\uff0c\u5219\u8df3\u8f6c\u5230\u6807\u53f7\u5904\u6267\u884c\uff09 \u4ecejcxz\u7684\u529f\u80fd\u53ef\u4ee5\u770b\u51fa\uff0c\u5b83\u76f8\u5f53\u4e8e if ( ( cx ) == 0 ) jmp short \u6807\u53f7 9.4 loop \u00b6 loop\u6307\u4ee4\u4e3a\u5faa\u73af\u6307\u4ee4 9.5 \u5b9e\u9a8c\u516b \u00b6 assume cs:code code segment mov ax,4c00h int 21h start: mov ax,0 s: nop nop mov di,offset s mov si,offset s2 mov ax,cs:[si] mov cs:[di],ax s0: jmp short s s1: mov ax,0 int 21h mov ax,0 s2: jmp short s1 nop code ends \u6700\u7ec8\u8fd8\u662f\u4f1a\u8df3\u8f6c\u5230\u4ee3\u7801\u6bb5\u7684\u4e00\u5f00\u59cb\u7684\u7ed3\u675f\u7684\u4ee3\u7801\uff0c\u56e0\u4e3a s2 \u8df3\u8f6c\u7684\u4f4d\u79fb\uff0c\u800c\u4e0d\u662f s1 \u7684\u5177\u4f53\u5730\u5740 9.6 \u5b9e\u9a8c\u4e5d \u00b6 \u5728\u5c4f\u5e55\u4e0a\u5f69\u8272\u663e\u793a \u2018welcome to masm!' \u5177\u4f53\u770b\u6559\u6750 \u5c5e\u6027\u5b57\u8282\u683c\u5f0f\uff1a \u4f4d\u6570 \u6548\u679c 0 \u95ea\u70c1BL 1 \u80cc\u666fR 2 \u80cc\u666fG 3 \u80cc\u666fB 4 \u9ad8\u4eaeI 5 \u524d\u666fR 6 \u524d\u666fG 7 \u524d\u666fB 2.jmp\u6307\u4ee4\u8981\u7ed9\u51fa\u4e24\u79cd\u4fe1\u606f\uff1a 1.\u8f6c\u79fb\u7684\u76ee\u7684\u5730\u5740 2.\u8f6c\u79fb\u7684\u8ddd\u79bb\uff08\u6bb5\u95f4\u8f6c\u79fb\u3001\u6bb5\u5185\u77ed\u8f6c\u79fb\u3001\u6bb5\u5185\u8fd1\u8f6c\u79fb\uff09 9.3 \u4f9d\u636e\u4f4d\u79fb\u8fdb\u884c\u8f6c\u79fb\u7684jmp\u6307\u4ee4 1.jmp short \u6807\u53f7\u3010\u8f6c\u5230\u6807\u53f7\u5904\u6267\u884c\u6307\u4ee4,\u6bb5\u5185\u77ed\u8f6c\u79fb\u3011 \u6b64\u683c\u5f0f\u5b9e\u73b0\u7684\u662f\uff1a\u6bb5\u5185\u77ed\u8f6c\u79fb\uff0c\u5b83\u5bf9ip\u7684\u4fee\u6539\u8303\u56f4\u4e3a-128~127 2.\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u5411\u524d\u8f6c\u79fb\u65f6\u53ef\u4ee5\u6700\u591a\u8d8a\u8fc7128\u4e2a\u5b57\u8282\uff0c\u8d1f\u6570\u4f7f\u7528\u8865\u7801\u8868\u793a \u5411\u540e\u8f6c\u79fb\u53ef\u4ee5\u6700\u591a\u8d8a\u8fc7127\u4e2a\u5b57\u8282 3.CPU\u4e0d\u9700\u8981\u76ee\u7684\u5730\u5740\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5bf9ip\u7684\u4fee\u6539 jmp\u6307\u4ee4\u7684\u673a\u5668\u7801\u4e2d\u4e0d\u5305\u542b\u76ee\u7684\u5730\u5740\uff0c\u4f46\u662f\u53ef\u4ee5\u5b9e\u73b0\u8df3\u8f6c \u5b9e\u73b0\u7684\u65b9\u5f0f\uff0c\u662f\u5728\u539f\u5730\u5740\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u4e00\u4e2a\u504f\u79fb\u91cf\uff0c\u5373\u4f4d\u79fb 4.\u8fd8\u6709\u4e00\u79cd\u548c\u6307\u4ee4\u201cjmp short \u6807\u53f7\u201d\u529f\u80fd\u7c7b\u4f3c\u7684\u6307\u4ee4\u683c\u5f0f\uff1a jmp near ptr \u6807\u53f7\uff0c\u5b83\u5b9e\u73b0\u7684\u662f\u6bb5\u5185\u8fd1\u8f6c\u79fb \u529f\u80fd\u4e3a\uff1a(ip)=(ip)+16\u4f4d\u4f4d\u79fb jmp short \u6807\u53f7\u662f8\u4f4d\u7684\u4f4d\u79fb\uff0c\u800cjmp near ptr \u6807\u53f7\u662f16\u4f4d\u4f4d\u79fb 9.4 \u8f6c\u79fb\u7684\u76ee\u7684\u5730\u5740\u5728\u6307\u4ee4\u4e2d\u7684jmp\u6307\u4ee4 \u524d\u9762\u8bb2\u7684jmp\u6307\u4ee4\uff0c\u5176\u5bf9\u5e94\u7684\u673a\u5668\u7801\u4e2d\u5e76\u6ca1\u6709\u8f6c\u79fb\u7684\u76ee\u7684\u5730\u5740\uff0c\u800c\u662f\u76f8\u5bf9\u4e8e\u5f53\u524dip\u7684\u8f6c\u79fb\u4f4d\u79fb 1.\u6307\u4ee4\u201cjmp far ptr \u6807\u53f7\u201d \u5b9e\u73b0\u7684\u662f\u6bb5\u95f4\u8f6c\u79fb\uff0c\u53c8\u79f0\u4e3a\u8fdc\u8f6c\u79fb,\u8fd9\u65f6\u673a\u5668\u7801\u4e2d\u5e94\u8be5\u660e\u786e\u7ed9\u51fa\u3010\u6bb5\u5730\u5740\u3011 2.\u6307\u4ee4\u201cjmp far ptr \u6807\u53f7\u201d\u529f\u80fd\u5982\u4e0b\uff1a (CS)=\u6807\u53f7\u6240\u5728\u6bb5\u7684\u6bb5\u5730\u5740 (IP)=\u6807\u53f7\u6240\u5728\u6bb5\u4e2d\u7684\u504f\u79fb\u5730\u5740 far ptr \u6307\u660e\u4e86\u6307\u4ee4\u7528\u6807\u53f7\u7684\u6bb5\u5730\u5740\u548c\u504f\u79fb\u5730\u5740\u4fee\u6539cs\u548cip 9.5 \u8f6c\u79fb\u5730\u5740\u5728\u5bc4\u5b58\u5668\u4e2d\u7684jmp\u6307\u4ee4 \u6307\u4ee4\u683c\u5f0f\uff1ajmp 16\u4f4d\u5bc4\u5b58\u5668 \u529f\u80fd\uff1a\u4fee\u6539ip\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\uff0c\u628a16\u4f4d\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u9001\u5165\u5230ip\u5bc4\u5b58\u5668\u4e2d 9.6 \u8f6c\u79fb\u5730\u5740\u5728\u5185\u5b58\u4e2d\u7684jmp\u6307\u4ee4 \u8f6c\u79fb\u5730\u5740\u5728\u5185\u5b58\u4e2d\u7684jmp\u6307\u4ee4\u6709\u4e24\u79cd\u683c\u5f0f\uff1a 1.jmp word ptr \u5185\u5b58\u5355\u5143\u5730\u5740\uff08\u6bb5\u5185\u8f6c\u79fb\uff09 \u529f\u80fd\uff1a\u5c06\u5185\u5b58\u4e2d\u7684\u90a3\u4e2a\u5b57\u89c6\u4e3a\u4e00\u4e2a\u504f\u79fb\u5730\u5740\uff0c\u7136\u540e\u8df3\u8f6c\u5230\u90a3\u4e2a\u504f\u79fb\u5730\u5740 \u4e0e\u3010jmp \u5bc4\u5b58\u5668\u3011\u529f\u80fd\u76f8\u4f3c \u5185\u5b58\u5355\u5143\u5730\u5740\u53ef\u7528\u5bfb\u5740\u65b9\u5f0f\u7684\u4efb\u610f\u683c\u5f0f\u7ed9\u51fa 2.jmp dword ptr \u5185\u5b58\u5355\u5143\u5730\u5740\uff08\u6bb5\u95f4\u8f6c\u79fb\uff09 (ip)=(\u5185\u5b58\u5355\u5143\u5730\u5740) ;\u53cc\u5b57\u4e2d\u7684\u4f4e\u4f4d\u5b57\u662f\u7ed9ip\u7684 (cs)=(\u5185\u5b58\u5355\u5143\u5730\u5740+2) ;\u53cc\u5b57\u4e2d\u7684\u9ad8\u4f4d\u5b57\u662f\u7ed9cs\u7684 \u8ddf\u3010jmp \u6bb5\u5730\u5740:\u504f\u79fb\u5730\u5740\u3011\u529f\u80fd\u7c7b\u4f3c \u5185\u5b58\u5355\u5143\u5730\u5740\u53ef\u7528\u5bfb\u5740\u65b9\u5f0f\u7684\u4efb\u610f\u683c\u5f0f\u7ed9\u51fa **\u8865\u5145\uff1a\u4e0d\u80fd\u76f4\u63a5\u5411\u5185\u5b58\u5355\u5143\u4e2d\u52a0\u5165\u7acb\u5373\u6570 \u8981\u901a\u8fc7\u5bc4\u5b58\u5668\uff0c\u628a\u7acb\u5373\u6570\u52a0\u8fdb\u53bb 9.7 jcxz\u6307\u4ee4 1.\u6709\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\uff0c\u6240\u6709\u7684\u6709\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\u90fd\u662f\u77ed\u8f6c\u79fb \u5bf9\u5e94\u7684\u673a\u5668\u7801\u4e2d\u5305\u542b\u8f6c\u79fb\u7684\u4f4d\u79fb\uff0c\u800c\u4e0d\u662f\u76ee\u7684\u5730\u5740\u3002\u5bf9ip\u7684\u4fee\u6539\u8303\u56f4\u90fd\u4e3a\uff1a-128~127 **\u53e6\u4e00\u4e2a\u6709\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\u3010loop\u6307\u4ee4\u3011 2.\u6307\u4ee4\u683c\u5f0f\uff1ajcxz \u6807\u53f7 \u5982\u679c\uff08cx\uff09=0\uff0c\u5219\u8df3\u8f6c\u5230\u6807\u53f7\u5904\u6267\u884c 3.jcxz \u6807\u53f7 \u6307\u4ee4\u7684\u64cd\u4f5c\uff1a 1.\u5f53(cx)=0\u65f6\uff0c(ip)=(ip)+8\u4f4d\u4f4d\u79fb 2.\u5f53(cx)!=0\u65f6\uff0c\u4ec0\u4e48\u4e5f\u4e0d\u505a\uff08\u7a0b\u5e8f\u7ee7\u7eed\u5411\u4e0b\u6267\u884c\uff09 9.8 loop\u6307\u4ee4 1.\u5faa\u73af\u6307\u4ee4\uff0c\u6240\u6709\u7684\u5faa\u73af\u6307\u4ee4\u90fd\u662f\u77ed\u8f6c\u79fb\uff0c\u5728\u5bf9\u5e94\u7684\u673a\u5668\u7801\u4e2d\u5305\u542b\u8f6c\u79fb\u7684\u4f4d\u79fb 2.\u6307\u4ee4\u683c\u5f0f\uff1aloop \u6807\u53f7 3.\u6307\u4ee4\u7684\u5185\u90e8\u64cd\u4f5c 1.cx=cx-1 2.\u5982\u679ccx!=0\uff0c(ip)=(ip)+8\u4f4d\u4f4d\u79fb\uff0c\u8df3\u8f6c 3.(cx)=0\uff0c\u4ec0\u4e48\u4e5f\u4e0d\u505a\uff0c\u7a0b\u5e8f\u5411\u4e0b\u6267\u884c cx\u7528\u6765\u63a7\u5236\u5faa\u73af\u7684\u6b21\u6570 9.9 \u6839\u636e\u4f4d\u79fb\u8fdb\u884c\u8f6c\u79fb\u7684\u610f\u4e49 1.\u6839\u636e\u4f4d\u79fb\u8fdb\u884c\u8f6c\u79fb\uff0c\u8fd9\u6837\u8bbe\u8ba1\uff0c\u65b9\u4fbf\u4e86\u7a0b\u5e8f\u6bb5\u5728\u5185\u5b58\u4e2d\u7684\u6d6e\u52a8\u88c5\u914d \u53ef\u4ee5\u5b9e\u73b0\u4ee3\u7801\u7684\u590d\u7528 2.\u5982\u679c\u5728\u673a\u5668\u7801\u4e2d\u76f4\u63a5\u7ed9\u51fa\u3010\u6bb5\u5730\u5740:\u504f\u79fb\u5730\u5740\u3011\uff0c \u8fd9\u6bb5\u7a0b\u5e8f\u5728\u5185\u5b58\u4e2d\u6362\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u4f1a\u8fd0\u884c\u4e0d\u6b63\u786e 3.\u6bb5\u5185\u8fd1\u8f6c\u79fb\u3001\u6bb5\u5185\u77ed\u8f6c\u79fb\u90fd\u662f\u6839\u636e\u4f4d\u79fb\u8fdb\u884c\u8f6c\u79fb\uff0c\u4e00\u5171\u6709\u56db\u79cd\u65b9\u5f0f 1.jmp short ptr \u6807\u53f7 2.jmp near ptr \u6807\u53f7 3.jcxz \u6807\u53f7 4.loop \u6807\u53f7 9.10 \u7f16\u8bd1\u5668\u5bf9\u8f6c\u79fb\u4f4d\u79fb\u8d85\u754c\u7684\u68c0\u6d4b \u6ce8\u610f\uff0c\u6839\u636e\u4f4d\u79fb\u8fdb\u884c\u8f6c\u79fb\u7684\u6307\u4ee4\uff0c\u4ed6\u4eec\u7684\u8f6c\u79fb\u8303\u56f4\u4f1a\u53d7\u5230\u9650\u5236 \u5982\u679c\u5728\u6e90\u7a0b\u5e8f\u4e2d\u51fa\u73b0\u4e86\u8f6c\u79fb\u8303\u56f4\u8d85\u754c\u7684\u95ee\u9898\uff0c\u5728\u7f16\u8bd1\u7684\u65f6\u5019\uff0c\u7f16\u8bd1\u5668\u5c06\u62a5\u9519 \u3010\u5b9e\u9a8c\u516b\u3001\u4e5d\u3011\u3010\u8fd9\u4e2a\u5b9e\u9a8c\u8981\u91cd\u70b9\u770b\u3011 10 call\u548cret\u6307\u4ee4 \u00b6 call \u548c ret \u90fd\u662f\u8f6c\u79fb\u6307\u4ee4\uff0c\u4ed6\u4eec\u90fd\u4fee\u6539 ip\uff0c\u6216\u540c\u65f6\u4fee\u6539 cs \u548c ip 10.1 ret / retf \u00b6 ret\u6307\u4ee4\u7528\u6808\u4e2d\u7684\u6570\u636e\u4fee\u6539 ip\uff0c\u4ece\u800c\u5b9e\u73b0\u8fd1\u8f6c\u79fb \u6267\u884c ret \u6307\u4ee4 \u65f6 \uff0ccpu \u8fdb\u884c\u7684\u64cd\u4f5c\uff1a (ip) = ((ss)*16+(sp)) (sp) = (sp)+2 retf\u6307\u4ee4\u7528\u6808\u4e2d\u7684\u6570\u636e\u4fee\u6539 cs \u548c ip\uff0c\u4ece\u800c\u5b9e\u73b0\u8fdc\u8f6c\u79fb \u6267\u884c retf\u6307\u4ee4 \u65f6\uff0ccpu\u8fdb\u884c\u7684\u64cd\u4f5c\uff1a (ip) = ((ss)*16+(sp)) (sp) = (sp)+2 (cs) = ((ss)*16+(sp)) (sp) = (sp)+2 10.2 call \u00b6 \u6267\u884c call\u6307\u4ee4 \u65f6\uff0ccpu\u8fdb\u884c\u7684\u64cd\u4f5c\uff1a \u5c06\u5f53\u524d\u7684 ip \u6216 cs \u548c ip \u538b\u5165\u6808\u4e2d \u8f6c\u79fb\uff08jmp\uff09 call \u6307\u4ee4\u4e0d\u80fd\u5b9e\u73b0\u77ed\u8f6c\u79fb 10.3 \u4f9d\u636e\u4f4d\u79fb\u8fdb\u884c\u8f6c\u79fb\u7684call\u6307\u4ee4 \u00b6 \u683c\u5f0f\uff1a call \u6807\u53f7\uff08\u5c06\u5f53\u524d\u7684 ip \u538b\u6808\u540e\uff0c\u8f6c\u79fb\u5230\u6807\u53f7\u51fa\u8fdb\u884c\u6267\u884c\uff09 16\u4f4d\u4f4d\u79fb = \u201c\u6807\u53f7\u201d\u5904\u7684\u5730\u5740-call\u6307\u4ee4\u540e\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u5730\u5740 10.4 \u4f9d\u636e\u76ee\u7684\u5730\u5740\u5728\u6307\u4ee4\u4e2d\u7684call\u6307\u4ee4 \u00b6 \u683c\u5f0f\uff1a call far ptr \u6807\u53f7 \uff08\u5b9e\u73b0\u7684\u662f\u6bb5\u95f4\u8f6c\u79fb\uff09 \u6267\u884c\u8fd9\u79cd\u683c\u5f0f\u65f6\uff0ccpu\u7684\u64cd\u4f5c\uff1a (sp) = (sp)-2 ((ss)*16+(sp)) = (cs) (sp) = (sp)-2 ((ss)*16+(sp)) = (ip) (cs) = \u6807\u53f7\u6bb5\u5730\u5740 (ip) = \u6807\u53f7\u504f\u79fb\u5730\u5740 \u76f8\u5f53\u4e8e push cs push ip jmp far ptr \u6807\u53f7 10.5 \u8f6c\u79fb\u5730\u5740\u5728\u5bc4\u5b58\u5668\u4e2d\u7684call\u6307\u4ee4 \u00b6 \u683c\u5f0f\uff1a call 16\u4f4d\u5bc4\u5b58\u5668 \u5177\u4f53\u64cd\u4f5c\uff1a (sp) = (sp)-2 ((ss)*16+(sp)) = (ip) (ip) = (16\u4f4d\u5bc4\u5b58\u5668) \u76f8\u5f53\u4e8e push ip jmp 16\u4f4d\u5bc4\u5b58\u5668 10.6 \u8f6c\u79fb\u5730\u5740\u5728\u5185\u5b58\u4e2d\u7684call\u6307\u4ee4 \u00b6 \u67092\u79cd\u683c\u5f0f\uff1a call word ptr \u5185\u5b58\u5355\u5143\u5730\u5740 \u5177\u4f53\u64cd\u4f5c\uff1a push ip jmp word ptr \u5185\u5b58\u5355\u5143\u5730\u5740 call dword ptr \u5185\u5b58\u5355\u5143\u5730\u5740 \u5177\u4f53\u64cd\u4f5c\uff1a push cs push ip jmp dword ptr \u5185\u5b58\u5355\u5143\u5730\u5740\uff08\u5185\u5b58\u5355\u5143\u4e2d\u9ad8\u4f4d\u7684\u65f6 cs\uff0c\u5730\u4f4d\u7684\u662f ip\uff09 10.7 call \u548c ret \u7684\u914d\u5408\u4f7f\u7528 \u00b6 \u4e24\u8005\u914d\u5408\u4f7f\u7528\u53ef\u5b9e\u73b0\u5b50\u7a0b\u5e8f\uff0c\u5c31\u662f\u51fd\u6570\u8c03\u7528 \u5b50\u7a0b\u5e8f\u683c\u5f0f code segment main: ... call sub1 ... mov 4c00h int 21h sub1: ... ret sub2: ... ret code ends end main 10.8 mul \u00b6 \u4e58\u6cd5\u6307\u4ee4 \u76f8\u4e58\u7684\u4e24\u4e2a\u6570\uff0c\u8981\u4e48\u90fd\u662f 8 \u4f4d\u7684\uff0c\u8981\u4e48\u90fd\u662f 16 \u4f4d\u7684 8\u4f4d\uff1aal \u548c\u4e00\u4e2a 8 \u4f4d\u5bc4\u5b58\u5668 \u6216\u8005 \u5185\u5b58\u5b57\u8282\u5355\u5143\u4e2d \u7ed3\u679c\u5728 ax \u4e2d 16\u4f4d\uff1a ax \u548c\u4e00\u4e2a 16 \u4f4d\u5bc4\u5b58\u5668 \u6216\u8005 \u5185\u5b58\u5b57\u5355\u5143\u4e2d \u7ed3\u679c\u5728 dx\uff08\u9ad8\u4f4d\uff09 \u548c ax\uff08\u4f4e\u4f4d\uff09 \u4e2d \u683c\u5f0f\uff1a mul \u5bc4\u5b58\u5668 mul \u5185\u5b58\u5355\u5143 10.9 \u53c2\u6570\u548c\u7ed3\u679c\u7684\u4f20\u9012\u95ee\u9898 \u00b6 \u7528\u5bc4\u5b58\u5668\u5b58\u653e \u5982\u679c\u53c2\u6570\u5f88\u591a\u5c31\u628a\u53c2\u6570\u653e\u5728\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u4f20\u9012\u5185\u5b58\u7a7a\u95f4\u7684\u9996\u5730\u5740 11 \u6807\u5fd7\u5bc4\u5b58\u5668 \u00b6 11.1 flag \u00b6 8086CPU\u7684\u6807\u5fd7\u5bc4\u5b58\u5668\u90fd\u662f 16 \u4f4d\uff0c\u5176\u4e2d\u5b58\u50a8\u7684\u4fe1\u606f\u88ab\u79f0\u4e3a\u7a0b\u5e8f\u72b6\u6001\u5b57 flag\u5bc4\u5b58\u5668\u662f\u6309\u4f4d\u8d77\u4f5c\u7528\u7684\uff0c\u6bcf\u4e00\u4f4d\u90fd\u6709\u4e13\u95e8\u7684\u542b\u4e49 8086CPU\u4e2d\u53ea\u67090\uff0c2\uff0c4\uff0c6\uff0c7\uff0c8\uff0c9\uff0c10\uff0c11\u4f4d\u6709\u7279\u6b8a\u542b\u4e49 \u4f4d\u6570 \u610f\u4e49 0\uff08CF\uff09 \u8fdb\u4f4d\u6807\u5fd7\u4f4d 2\uff08PF\uff09 \u5947\u5076\u6807\u5fd7\u4f4d 4\uff08AF\uff09 6\uff08ZF\uff09 \u96f6\u6807\u5fd7\u4f4d 7\uff08SF\uff09 \u7b26\u53f7\u6807\u5fd7\u4f4d 8\uff08TF\uff09 9\uff08IF\uff09 10\uff08DF\uff09 \u65b9\u5411\u6807\u5fd7\u4f4d 11\uff08OF\uff09 \u6ea2\u51fa\u6807\u5fd7\u4f4d ZF\uff08zero\uff09 mov ax,1 sub ax,1 ;zf = 1 PF\uff08parity\uff09 mov al,1 add al,10 ;\u7ed3\u679c\u4e3a(1011b)\uff0c\u67093\u4e2a\u5947\u6570\uff0cpf = 0 SF \uff08sign\uff09\uff0c\u5bf9\u6709\u7b26\u53f7\u6570\u800c\u8a00 mov al,10000001b add al,1 ;\u8d1f\u6570\uff0csf = 1 CF\uff08carry\uff09 \u8bb0\u5f55\u8fdb\u4f4d\u6216\u8005\u501f\u4f4d\uff0c\u5bf9\u65e0\u7b26\u53f7\u6570\u800c\u8a00 mov al,98h add al,al ;cf = 1 mov al,97h sub al,98h ;cf = 1\uff0c\u501f\u4f4d\uff0c\u7ed3\u679c\u662f197h-98h OF \u6ea2\u51fa\uff0c\u5bf9\u6709\u7b26\u53f7\u6570\u800c\u8a00 mov al,10001000b ;-120 add al,11110000b ;-16 ;\u7ed3\u679c\u662f-136\uff0c\u6ea2\u51fa DF\uff08direction\uff09 \u5728\u4e32\u5904\u7406\u6307\u4ee4\u4e2d\uff0c\u63a7\u5236\u6bcf\u6b21\u64cd\u4f5c\u540esi\uff0cdi\u7684\u589e\u51cf df = 0\uff1a\u6bcf\u6b21\u64cd\u4f5c\u540esi\uff0cdi\u9012\u589e df = 1\uff1a\u6bcf\u6b21\u64cd\u4f5c\u540esi\uff0cdi\u9012\u51cf movsb \u7684\u529f\u80fd\u662f \u5c06 ds:si \u6307\u5411\u7684\u5185\u5b58\u5355\u5143\u7684\u5b57\u8282\u9001\u5165 es:di \u4e2d\uff0c\u7136\u540e\u6839\u636e df\u4f4d\u7684\u503c\u5bf9 di\u548csi \u9012\u589e\u6216\u9012\u51cf1 movsw \u4f20\u9001\u5b57\uff0c si\u548cdi \u9012\u589e\u6216\u9012\u51cf2 rep movsb\u7684\u529f\u80fd\u662f\u6839\u636e cx \u7684\u503c\u91cd\u590d\u6267\u884c\u540e\u9762\u7684\u4e32\u4f20\u9001\u6307\u4ee4 8086CPU\u63d0\u4f9b\u4e86\u4e24\u6761\u6307\u4ee4\u5bf9 df \u8fdb\u884c\u8bbe\u7f6e\uff1a cld\uff1adf \u7f6e0\uff08clear std\uff1adf \u7f6e1\uff08set DEBUG \u4e2d\u7684\u8868\u793a \u6807\u5fd7 \u503c\u4e3a1\u7684\u6807\u8bb0 \u503c\u4e3a0\u7684\u6807\u8bb0 OF OV NV SF NG PL ZF ZR NZ PF PE PO CF CY NC DF DN UP 11.2 adc \u00b6 \u5e26\u8fdb\u4f4d\u7684\u52a0\u6cd5\u6307\u4ee4 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u8ba1\u7b97\u5927\u6570\u76f8\u52a0\u65f6\uff0c\u904d\u5386\u5927\u6570\u65f6\uff0c\u5982\u679c\u8981 si+2\uff0c\u6700\u597d\u8fdb\u884c2\u6b21 inc si\uff0c\u56e0\u4e3a inc \u4e0d\u4f1a\u5f71\u54cd cf adc ax,bx ;\u5b9e\u73b0\u7684\u529f\u80fd\u662f (ax) = (ax)+(bx)+cf add al,bl adc ah,bh ;\u7b49\u6548\u4e8eadd ax,bx 11.3 sbb \u00b6 \u5e26\u501f\u4f4d\u51cf\u6cd5\u6307\u4ee4 11.4 cmp \u00b6 \u6bd4\u8f83\u6307\u4ee4\uff0c\u529f\u80fd\u76f8\u5f53\u4e8e\u51cf\u6cd5\u6307\u4ee4\uff0c\u4f46\u662f\u4e0d\u4fdd\u5b58\u7ed3\u679c cmp \u6307\u4ee4\u6267\u884c\u540e\uff0c\u53ea\u4f1a\u5bf9\u6807\u5fd7\u5bc4\u5b58\u5668\u4ea7\u751f\u5f71\u54cd \u683c\u5f0f\uff1acmp \u64cd\u4f5c\u5bf9\u8c611\uff0c\u64cd\u4f5c\u5bf9\u8c612\uff08\u6267\u884c\u540e2\u4e2a\u64cd\u4f5c\u5bf9\u8c61\u4e0d\u4f1a\u6539\u53d8\uff09 ;cmp ax bx \u5728\u65e0\u7b26\u53f7\u6570\u7684\u60c5\u51b5\u4e0b\u5bf9\u6807\u5fd7\u5bc4\u5b58\u5668\u7684\u5f71\u54cd zf = 1 ;(ax) = (bx) zf = 0 ;(ax) != (bx) cf = 1 ;(ax) < (bx) cf = 0 ;(ax) >= (bx) zf = 0 \u4e14 cf = 0 ;(ax) > (bx) zf = 1 \u6216 cf = 1 ;(ax) <= (bx) ;cmp ax bx \u5728\u6709\u7b26\u53f7\u6570\u7684\u60c5\u51b5\u4e0b\u5bf9\u6807\u5fd7\u5bc4\u5b58\u5668\u7684\u5f71\u54cd ;\u8981\u540c\u65f6\u8003\u8651 sf \u548c of \u548c zf 11.5 \u68c0\u6d4b\u6bd4\u8f83\u7ed3\u679c\u7684\u6761\u4ef6\u8f6c\u79fb\u6307\u4ee4 \u00b6 \u65e0\u7b26\u53f7 \u6307\u4ee4 \u542b\u4e49 \u76f8\u5173\u6807\u5fd7\u4f4d je \u7b49\u4e8e\u5219\u8f6c\u79fb zf = 1 jne \u4e0d\u7b49\u4e8e\u5219\u8f6c\u79fb zf = 0 jb \u4f4e\u4e8e\u5219\u8f6c\u79fb cf = 1 jnb \u4e0d\u4f4e\u4e8e\u5219\u8f6c\u79fb cf = 0 ja \u9ad8\u4e8e\u5219\u8f6c\u79fb cf= 0,zf = 0 jna \u4e0d\u9ad8\u4e8e\u5219\u8f6c\u79fb cf = 1 \u6216 zf = 1 j: jmp e: euqal n: not b: below a: above 11.6 pushf / popf \u00b6 pushf\uff1a\u5c06\u6807\u5fd7\u5bc4\u5b58\u5668\u538b\u6808 popf\uff1a\u5f39\u51fa\u6808\u4e2d\u6570\u636e\u7ed9\u6807\u5fd7\u5bc4\u5b58\u5668 \u7b2c\u5341\u4e8c\u7ae0 \u5185\u4e2d\u65ad \u00b6 **\u5f15\u8a00\u548c\u7b80\u4ecb 1.\u4e2d\u65ad\u662fCPU\u5904\u7406\u5916\u90e8\u7a81\u53d1\u4e8b\u4ef6\u7684\u4e00\u4e2a\u91cd\u8981\u6280\u672f 2.\u5b83\u80fd\u4f7fCPU\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u5bf9\u5916\u90e8\u4e8b\u4ef6\u53d1\u51fa\u7684\u4e2d\u65ad\u8bf7\u6c42\u53ca\u65f6\u5730\u8fdb\u884c\u5904\u7406\uff0c\u5904\u7406\u5b8c\u6210\u540e \u53c8\u7acb\u5373\u8fd4\u56de\u65ad\u70b9\uff0c\u7ee7\u7eed\u8fdb\u884cCPU\u539f\u6765\u7684\u5de5\u4f5c\u3002 3.\u5f15\u8d77\u4e2d\u65ad\u7684\u539f\u56e0\u3010\u5373\uff1a\u53d1\u51fa\u4e2d\u65ad\u8bf7\u6c42\u7684\u6765\u6e90\u53eb\u4f5c\u4e2d\u65ad\u6e90\u3011 4.\u6839\u636e\u4e2d\u65ad\u6e90\u7684\u4e0d\u540c\uff0c\u53ef\u4ee5\u628a\u4e2d\u65ad\u5206\u4e3a\uff1a\u3010\u8f6f\u4ef6\u4e2d\u65ad\u3011\u548c\u3010\u786c\u4ef6\u4e2d\u65ad\u3011\u4e24\u5927\u7c7b \u800c\u786c\u4ef6\u4e2d\u65ad\u53c8\u53ef\u4ee5\u5206\u4e3a\u3010\u5916\u90e8\u4e2d\u65ad\u3011\u548c\u3010\u5185\u90e8\u4e2d\u65ad\u3011\u4e24\u7c7b 12.1 \u5185\u4e2d\u65ad\u7684\u4ea7\u751f 1.\u5916\u90e8\u4e2d\u65ad\u4e00\u822c\u662f\u6307\u8ba1\u7b97\u673a\u5916\u8bbe\u53d1\u51fa\u7684\u4e2d\u65ad\u8bf7\u6c42\uff0c\u5982\uff1a\u952e\u76d8\u4e2d\u65ad\u3001\u6253\u5370\u673a\u4e2d\u65ad\u3001\u5b9a\u65f6\u5668\u4e2d\u65ad\u3002 \u5916\u90e8\u4e2d\u65ad\u662f\u53ef\u4ee5\u5c4f\u853d\u7684\u4e2d\u65ad\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5229\u7528\u4e2d\u65ad\u63a7\u5236\u5668\u53ef\u4ee5\u5c4f\u853d\u8fd9\u4e9b\u5916\u90e8\u8bbe\u5907\u7684\u4e2d\u65ad\u8bf7\u6c42\u3002 2.\u5185\u90e8\u4e2d\u65ad\u662f\u6307\u56e0\u786c\u4ef6\u51fa\u9519\uff08\u5982\u7a81\u7136\u6389\u7535\u3001\u5947\u5076\u6821\u9a8c\u9519\u7b49\uff09\u6216\u8fd0\u7b97\u51fa\u9519\uff08\u9664\u6570\u4e3a\u96f6\u3001\u8fd0\u7b97\u6ea2\u51fa\u3001\u5355\u6b65\u4e2d\u65ad\uff09\u6240\u5f15\u8d77\u7684\u4e2d\u65ad\u3002 \u5185\u90e8\u4e2d\u65ad\u662f\u4e0d\u53ef\u5c4f\u853d\u7684\u4e2d\u65ad 3.\u8f6f\u4ef6\u4e2d\u65ad\u5176\u5b9e\u5e76\u4e0d\u662f\u771f\u6b63\u7684\u4e2d\u65ad\uff0c\u4ed6\u4eec\u53ea\u662f\u53ef\u88ab\u8c03\u7528\u6267\u884c\u7684\u4e00\u822c\u7a0b\u5e8f\uff0c DOS\u7684\u7cfb\u7edf\u529f\u80fd\u8c03\u7528\uff08int 21h\uff09\u90fd\u662f\u8f6f\u4ef6\u4e2d\u65ad 4.CPU\u4e3a\u4e86\u5904\u7406\u5e76\u53d1\u7684\u4e2d\u65ad\u8bf7\u6c42\uff0c\u89c4\u5b9a\u4e86\u4e2d\u65ad\u7684\u4f18\u5148\u6743\uff0c\u4f18\u5148\u6743\u7531\u9ad8\u5230\u4f4e\u7684\u987a\u5e8f\u662f\uff1a 1.\u9664\u6cd5\u9519\u3001\u6ea2\u51fa\u4e2d\u65ad\u3001\u8f6f\u4ef6\u4e2d\u65ad 2.\u4e0d\u53ef\u5c4f\u853d\u4e2d\u65ad 3.\u53ef\u5c4f\u853d\u4e2d\u65ad 4.\u5355\u6b65\u4e2d\u65ad 12.2 \u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7b80\u4ecb 1.CPU\u7684\u8bbe\u8ba1\u8005\u5fc5\u987b\u5728\u4e2d\u65ad\u4fe1\u606f\u548c\u5176\u5904\u7406\u7a0b\u5e8f\u7684\u5165\u53e3\u5730\u5740\u4e4b\u95f4\u5efa\u7acb\u67d0\u79cd\u8054\u7cfb \u4f7f\u5f97CPU\u6839\u636e\u4e2d\u65ad\u4fe1\u606f\u53ef\u4ee5\u627e\u5230\u8981\u6267\u884c\u7684\u5904\u7406\u7a0b\u5e8f\u3002 2.\u4e2d\u65ad\u4fe1\u606f\u4e2d\u5305\u542b\u6709\u8868\u793a\u4e2d\u65ad\u7684\u7c7b\u578b\u7801\u3002\u6839\u636eCPU\u7684\u8bbe\u8ba1\uff0c\u4e2d\u65ad\u7c7b\u578b\u7801\u7684\u4f5c\u7528\u5c31\u662f\u7528\u6765\u5b9a\u4f4d\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u3002 3.CPU\u75288\u4f4d\u7684\u4e2d\u65ad\u7c7b\u578b\u7801\u901a\u8fc7\u4e2d\u65ad\u5411\u91cf\u8868\u627e\u5230\u76f8\u5e94\u7684\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u5165\u53e3\u5730\u5740 \u5373\u4e2d\u65ad\u7c7b\u578b\u7801\u662f\u4e2d\u65ad\u5411\u91cf\u5728\u4e2d\u65ad\u5411\u91cf\u8868\u4e2d\u7684\u7d22\u5f15 12.3 \u4e2d\u65ad\u5411\u91cf\u8868\u3010\u4e2d\u65ad\u5411\u91cf\u8868\u5c31\u662f\u4e2d\u65ad\u5411\u91cf\u7684\u5217\u8868\u3011 1.\u4e2d\u65ad\u5411\u91cf\u8868\u5728\u5185\u5b58\u4e2d\u4fdd\u5b58\uff0c\u5176\u4e2d\u5b58\u653e\u7740256\u4e2a\u30102^8,8\u4f4d\u4e2d\u65ad\u7c7b\u578b\u7801\u3011\u4e2d\u65ad\u6e90\u6240\u5bf9\u5e94\u7684\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u5165\u53e3 \u5bf9\u4e8e8086PC\u673a\uff0c\u4e2d\u65ad\u5411\u91cf\u8868\u6307\u5b9a\u653e\u5728\u5185\u5b58\u5730\u57400\u5904 2.\u4ece0:0-0:03ffh\u76841024\u4e2a\u5b57\u8282\u3010256*4\uff0c\u7269\u7406\u5730\u5740\u4f7f\u7528\u6bb5\u5730\u5740\u548c\u504f\u79fb\u5730\u5740\u5b58\u653e\uff0c\u9700\u89814\u4e2a\u5b57\u8282\u3011\u4e2d\u5b58\u653e\u7740\u4e2d\u65ad\u5411\u91cf\u8868 12.4 \u4e2d\u65ad\u8fc7\u7a0b 1.\u53ef\u4ee5\u7528\u4e2d\u65ad\u7c7b\u578b\u7801\uff0c\u5728\u4e2d\u65ad\u5411\u91cf\u8868\u4e2d\u627e\u5230\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u5165\u53e3 \u627e\u5230\u8fd9\u4e2a\u5165\u53e3\u5730\u5740\u7684\u6700\u7ec8\u76ee\u7684\u662f\u7528\u5b83\u8bbe\u7f6ecs\u548cip\uff0c\u4f7fCPU\u6267\u884c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f 2.\u7528\u4e2d\u65ad\u7c7b\u578b\u7801\u627e\u5230\u4e2d\u65ad\u5411\u91cf\uff0c\u5e76\u7528\u5b83\u8bbe\u7f6ecs\u548cip\uff0c\u8fd9\u4e2a\u5de5\u4f5c\u65f6\u7531CPU\u7684\u786c\u4ef6\u81ea\u52a8\u5b8c\u6210\u7684 CPU\u786c\u4ef6\u5b8c\u6210\u8fd9\u4e2a\u5de5\u4f5c\u7684\u8fc7\u7a0b\u88ab\u79f0\u4e3a\u3010\u4e2d\u65ad\u8fc7\u7a0b\u3011 3.\u4e2d\u65ad\u8fc7\u7a0b 8086CPU\u7684\u4e2d\u65ad\u8fc7\u7a0b 1.\uff08\u4ece\u4e2d\u65ad\u4fe1\u606f\u4e2d\uff09\u53d6\u5f97\u4e2d\u65ad\u7c7b\u578b\u7801 2.\u6807\u5fd7\u5bc4\u5b58\u5668\u7684\u503c\u5165\u6808\uff08\u4fdd\u62a4\u6807\u5fd7\u4f4d\uff09 3.\u8bbe\u7f6e\u6807\u5fd7\u5bc4\u5b58\u5668\u7684\u7b2c8\u4f4dTF\u548c\u7b2c9\u4f4dIF\u8bbe\u7f6e\u4e3a0\uff08\u540e\u9762\u8bb2\u89e3\u672c\u6b65\u7684\u76ee\u7684\uff09 4.cs\u5185\u5bb9\u5165\u6808 5.ip\u5185\u5bb9\u5165\u6808 6.\u4ece\u5185\u5b58\u5730\u5740\u4e3a\u4e2d\u65ad\u7c7b\u578b\u7801*4\u548c\u4e2d\u65ad\u7c7b\u578b\u7801*4+2\u7684\u4e24\u4e2a\u5b50\u5355\u5143\u4e2d \u8bfb\u53d6\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u5165\u53e3\u5730\u5740\u8bbe\u7f6ecs\u548cip 4.\u4f7f\u7528\u6c47\u7f16\u8bed\u8a00\u63cf\u8ff0\u4e2d\u65ad\u8fc7\u7a0b\uff0c\u5982\u4e0b 1.\u53d6\u5f97\u4e2d\u65ad\u7c7b\u578b\u7801N 2.pushf 3.TF=0\uff0cIF=0 4.push cs 5.push ip 6.\uff08ip\uff09=\uff08N*4\uff09\uff0c\uff08cs\uff09=\uff08N*4+2\uff09 12.5 \u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f 1.\u7531\u4e8eCPU\u968f\u65f6\u90fd\u53ef\u80fd\u68c0\u6d4b\u5230\u4e2d\u65ad\u4fe1\u606f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0cCPU\u968f\u65f6\u90fd\u53ef\u80fd\u6267\u884c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\uff0c \u6240\u4ee5\uff0c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5fc5\u987b\u4e00\u81f4\u5b58\u50a8\u5728\u5185\u5b58\u67d0\u6bb5\u7a7a\u95f4\u4e2d 2.\u800c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u5165\u53e3\u5730\u5740\uff0c\u5373\u3010\u4e2d\u65ad\u5411\u91cf\u3011\uff0c\u5fc5\u987b\u5b58\u50a8\u5728\u5bf9\u5e94\u7684\u4e2d\u65ad\u5411\u91cf\u8868\u8868\u9879\u4e2d 3.\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u7f16\u5199\u65b9\u6cd5\u548c\u5b50\u7a0b\u5e8f\u7684\u6bd4\u8f83\u7c7b\u4f3c\uff0c\u4e0b\u9762\u662f\u5e38\u89c4\u7684\u6b65\u9aa4 1.\u4fdd\u5b58\u7528\u5230\u7684\u5bc4\u5b58\u5668 2.\u5904\u7406\u4e2d\u65ad 3.\u6062\u590d\u7528\u5230\u7684\u5bc4\u5b58\u5668 4.\u7528iret\u6307\u4ee4\u8fd4\u56de **iret\u6307\u4ee4\u7684\u529f\u80fd\u7528\u6c47\u7f16\u8bed\u6cd5\u63cf\u8ff0\u4e3a pop ip pop cs popf iret\u901a\u5e38\u548c\u786c\u4ef6\u81ea\u52a8\u5b8c\u6210\u7684\u4e2d\u65ad\u8fc7\u7a0b\u914d\u5408\u4f7f\u7528 iret\u6307\u4ee4\u6267\u884c\u540e\uff0cCPU\u56de\u5230\u6267\u884c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u524d\u7684\u6267\u884c\u70b9\u7ee7\u7eed\u6267\u884c\u7a0b\u5e8f 12.6 \u9664\u6cd5\u9519\u8bef\u4e2d\u65ad\u7684\u5904\u7406 \u5f53CPU\u6267\u884cdiv\u7b49\u9664\u6cd5\u6307\u4ee4\u7684\u65f6\u5019\uff0c\u5982\u679c\u53d1\u751f\u4e86\u9664\u6cd5\u6ea2\u51fa\u9519\u8bef\uff0c\u5c06\u4ea7\u751f\u4e2d\u65ad\u7c7b\u578b\u7801\u4e3a0\u7684\u7ec8\u7aef\u4fe1\u606f CPU\u5c06\u68c0\u6d4b\u5230\u8fd9\u4e2a\u4fe1\u606f\uff0c\u7136\u540e\u5f15\u53d1\u4e2d\u65ad\u7a0b\u5e8f\uff0c\u8f6c\u53bb\u6267\u884c0\u53f7\u4e2d\u65ad\u5bf9\u5e94\u7684\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f \u4f8b\u5982\uff1a mov ax 1000h mov bh\uff0c1 div bh \u6b64\u7a0b\u5e8f\u4f1a\u4ea7\u751f\u6ea2\u51fa \u8fd0\u884c\u4e4b\u540e\uff0c\u4f1a\u663e\u793a 12.7 \u7f16\u7a0b\u5904\u74060\u53f7\u4e2d\u65ad \u73b0\u5728\u91cd\u65b0\u7f16\u5199\u4e00\u4e2a0\u53f7\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\uff0c\u5b83\u7684\u529f\u80fd\u662f\u5728\u5c4f\u5e55\u4e2d\u95f4\u663e\u793a\u201cWelcome to here!\u201d\u7684\u5e7f\u544a\u8bcd\uff0c\u7136\u540e\u8fd4\u56de\u5230\u64cd\u4f5c\u7cfb\u7edf \u628a\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u653e\u5230\u5b89\u5168\u7a7a\u95f4\u4e2d \u4e2d\u65ad\u7a0b\u5e8f\u7684\u6846\u67b6 12.8 \u5b89\u88c5 \u8ba1\u7b97\u4e2d\u65ad\u7a0b\u5e8f\u7684\u957f\u5ea6\uff1aoffset \u6807\u53f71-offset \u6807\u53f72 \u5728\u4ee3\u7801\u6bb5\u4e2d\u5b58\u653e\u6570\u636e 12.9 do0 12.10 \u8bbe\u7f6e\u4e2d\u65ad\u5411\u91cf 12.11 \u5355\u6b65\u4e2d\u65ad \u5982\u679c\u68c0\u6d4b\u5230\u6807\u5fd7\u5bc4\u5b58\u5668\u7684tf\u4f4d\u4e3a1\uff0c\u5219\u4ea7\u751f\u5355\u6b65\u4e2d\u65ad\uff0c\u5f15\u53d1\u4e2d\u65ad\u8fc7\u7a0b 12.12 \u54cd\u5e94\u4e2d\u65ad\u7684\u7279\u6b8a\u60c5\u51b5 \u7b2c\u5341\u4e09\u7ae0 int\u6307\u4ee4 \u00b6 13.1 int\u6307\u4ee4 1.int\u683c\u5f0f\uff1aint n ;n\u4e3a\u4e2d\u65ad\u7c7b\u578b\u7801 \u5b83\u7684\u529f\u80fd\u662f\u5f15\u53d1\u4e2d\u65ad\u8fc7\u7a0b 2.CPU\u6267\u884cint n\u6307\u4ee4\uff0c\u76f8\u5f53\u4e8e\u5f15\u53d1\u4e00\u4e2an\u53f7\u4e2d\u65ad\u7684\u4e2d\u65ad\u8fc7\u7a0b\uff0c\u6267\u884c\u8fc7\u7a0b\u5982\u4e0b 1.\u53d6\u4e2d\u65ad\u7c7b\u578b\u7801 2.\u6807\u5fd7\u5bc4\u5b58\u5668\u5165\u6808\uff0cif=0\uff0ctf=0 3.cs\uff0cip\u5165\u6808 4.\u4ece\u6b64\u5904\u8f6c\u53bb\u6267\u884cn\u53f7\u4e2d\u65ad\u7684\u4e2d\u65ad\u5904\u7406\u8fc7\u7a0b 3.\u53ef\u4ee5\u5728\u7a0b\u5e8f\u4e2d\u4f7f\u7528int\u6307\u4ee4\u8c03\u7528\u4efb\u4f55\u4e00\u4e2a\u4e2d\u65ad\u7684\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f \u53ef\u4ee5\u7528int\u6307\u4ee4\u8c03\u7528\u8fd9\u4e9b\u5b50\u7a0b\u5e8f\uff0c\u4e5f\u53ef\u4ee5\u81ea\u5df1\u7f16\u5199\u4e00\u4e9b\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u4f9b\u522b\u4eba\u4f7f\u7528 13.2 \u7f16\u5199\u4f9b\u5e94\u7528\u7a0b\u5e8f\u8c03\u7528\u7684\u4e2d\u65ad\u4f8b\u7a0b \u3010\u5b9e\u4f8b1\u3011\u7f16\u5199\u3001\u5b89\u88c5\u4e2d\u65ad7ch\u7684\u4e2d\u65ad\u4f8b\u7a0b\uff0c\u5b9e\u73b0\u6c42\u4e00\u4e2aword\u578b\u6570\u636e\u7684\u5e73\u65b9 1.\u529f\u80fd\uff1a\u6c42\u4e00word\u578b\u6570\u636e\u7684\u5e73\u65b9 2.\u53c2\u6570\uff1a\uff08ax\uff09=\u8981\u8ba1\u7b97\u7684\u6570\u636e 3.\u8fd4\u56de\u503c\uff1adx\u3001ax\u4e2d\u5b58\u653e\u7ed3\u679c\u7684\u9ad816\u4f4d\u548c\u4f4e16\u4f4d 4.\u5e94\u7528\u4e3e\u4f8b\uff1a\u6c422*3456^2 ;\u7a0b\u5e8f1\uff1a\u8c03\u7528\u4e2d\u65ad\u7a0b\u5e8f\u8ba1\u7b97\u5e73\u65b9 code segment assume cs: code start: mov ax,3456; (ax)=3456 int 7ch;\u8c03\u7528\u4e2d\u65ad7ch\u7684\u4e2d\u65ad\u4f8b\u7a0b\uff0c\u8ba1\u7b97ax\u4e2d\u7684\u6570\u636e\u7684\u5e73\u65b9 add ax,ax adc dx,dx ;\u5b58\u653e\u7ed3\u679c\uff0c\u8bb2\u7ed3\u679c\u4e58\u4ee52 mov ax,4c00h int 21h code ends end start ;\u7a0b\u5e8f2\uff1a\u7f16\u5199\u4e2d\u65ad\u7a0b\u5e8f ;\u7a0b\u5e8f2\u4e2d\u8981\u505a\u4e09\u90e8\u5206\u5de5\u4f5c ; 1.\u7f16\u7a0b\u5b9e\u73b0\u6c42\u5e73\u65b9\u529f\u80fd\u7684\u7a0b\u5e8f ; 2.\u5b89\u88c5\u7a0b\u5e8f\uff0c\u6211\u4eec\u5c06\u5176\u5b89\u88c5\u57280:200\u5904 ; 3.\u8bbe\u7f6e\u4e2d\u65ad\u5411\u91cf\u8868\uff0c\u5c06\u7a0b\u5e8f\u7684\u5165\u53e3\u5730\u5740\u4fdd\u5b58\u57287ch\u8868\u9879\u4e2d\uff0c\u4f7f\u5176\u6210\u4e3a\u4e2d\u65ad7ch\u7684\u4e2d\u65ad\u4f8b\u7a0b\u3002 code segment assume cs:code start: mov ax,cs mov ds,ax mov si,offset sqr ;\u8bbe\u7f6eds:si\u6307\u5411\u6e90\u5730\u5740 mov ax,0 mov es,ax mov di,200h ;\u8bbe\u7f6ees:di\u6307\u5411\u76ee\u7684\u5730\u5740 mov cx,offset sqrend - offset sqr ;\u8bbe\u7f6ecx\u4e3a\u4f20\u8f93\u957f\u5ea6 cld ;\u8bbe\u7f6e\u4f20\u8f93\u65b9\u5411\u4e3a\u6b63 rep movsb mov ax,0 mov es,ax mov word ptr es:[7ch*4],200h ;\u8bbe\u7f6e\u4e2d\u65ad\u5411\u91cf\u5730\u5740\uff0c\u504f\u79fb\u5730\u5740 mov word ptr es:[7ch*4+2],0 ;\u8bbe\u7f6e\u4e2d\u65ad\u5411\u91cf\u5730\u5740\uff0c\u6bb5\u5730\u5740 mov ax,4c00h int 21h sqr: mul ax iret sqrend: nop code ends end start \u3010\u5b9e\u4f8b2\u3011\u7f16\u5199\u3001\u5b89\u88c5\u4e2d\u65ad7ch\u7684\u4e2d\u65ad\u4f8b\u7a0b\uff0c\u5b9e\u73b0\u5c06\u4e00\u4e2a\u5168\u662f\u5b57\u6bcd\uff0c\u4ee50\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\uff0c\u8f6c\u5316\u4e3a\u5927\u5199\u3002 code segment assume cs:code start: mov ax,cs mov ds,ax mov si,offset capital mov ax,0 mov es,ax mov di,200h mov cx,offset capitalend - offset capital cld rep movsb mov ax,0 mov es,ax mov word ptr es:[7ch*4],200h mov word ptr es:[7ch*4+2],0 mov ax,4c00h int 21h capital: push cx push si change: mov cl,[si] mov ch,0 jcxz ok and byte ptr [si],11011111b inc si jmp short change ok: pop si pop cx iret capitalend: nop code ends end start 13.3 \u5bf9int\u3001iret\u548c\u6808\u7684\u6df1\u5165\u7406\u89e3 \u3010\u95ee\u9898\u3011\u75287ch\u4e2d\u65ad\u4f8b\u7a0b\u5b8c\u6210loop\u6307\u4ee4\u7684\u529f\u80fd \u4e0d\u8981\u968f\u4fbf\u4fee\u6539sp\uff0c\u53ef\u4ee5\u4f7f\u7528bp\u8fdb\u884c\u95f4\u63a5\u8bbf\u95ee 13.4 BIOS\u548cDOS\u6240\u63d0\u4f9b\u7684\u4e2d\u65ad\u4f8b\u7a0b 13.5 BIOS\u548cDOS\u4e2d\u65ad\u4f8b\u7a0b\u7684\u5b89\u88c5\u8fc7\u7a0b 1.\u5f00\u673a\u540e\uff0cCPU\u4e00\u52a0\u7535\uff0c\u521d\u59cb\u5316\uff08cs\uff09=0ffffh\uff0cip=0\uff0c\u81ea\u52a8\u4eceffff:0\u5355\u5143\u5f00\u59cb\u6267\u884c\u7a0b\u5e8f ffff:0\u5904\u6709\u4e00\u6761\u8df3\u8f6c\u6307\u4ee4\uff0cCPU\u6267\u884c\u8be5\u6307\u4ee4\u540e\uff0c\u8f6c\u53bb\u6267\u884cbios\u4e2d\u7684\u786c\u4ef6\u7cfb\u7edf\u7684\u68c0\u6d4b\u548c\u521d\u59cb\u5316\u7a0b\u5e8f\u3002 2.\u521d\u59cb\u5316\u7a0b\u5e8f\u5c06\u5efa\u7acbbios\u6240\u652f\u6301\u7684\u4e2d\u65ad\u5411\u91cf\uff0c\u5373\u5c06bios\u63d0\u4f9b\u7684\u4e2d\u65ad\u4f8b\u7a0b\u7684\u5165\u53e3\u5730\u5740\u767b\u8bb0\u5728\u4e2d\u65ad\u5411\u91cf\u8868\u4e2d\u3002 3.\u786c\u4ef6\u7cfb\u7edf\u68c0\u6d4b\u548c\u521d\u59cb\u5316\u5b8c\u6210\u540e\uff0c\u8c03\u752819h\u8fdb\u884c\u64cd\u4f5c\u7cfb\u7edf\u7684\u5f15\u5bfc\u3002\u4ece\u6b64\u5c06\u8ba1\u7b97\u673a\u4ea4\u7531\u64cd\u4f5c\u7cfb\u7edf\u63a7\u5236\u3002 4.DOS\u542f\u52a8\u540e\uff0c\u9664\u5b8c\u6210\u5176\u4ed6\u5de5\u4f5c\u5916\uff0c\u8fd8\u5c06\u5b83\u6240\u63d0\u4f9b\u7684\u4e2d\u65ad\u4f8b\u7a0b\u88c5\u5165\u5185\u5b58\uff0c\u5e76\u5efa\u7acb\u76f8\u5e94\u7684\u4e2d\u65ad\u5411\u91cf 13.6 BIOS\u4e2d\u65ad\u4f8b\u7a0b\u7684\u5e94\u7528 1.int 10h\u4e2d\u65ad\u4f8b\u7a0b\u662fbios\u63d0\u4f9b\u7684\u4e2d\u65ad\u4f8b\u7a0b\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u591a\u4e2a\u548c\u5c4f\u5e55\u8f93\u51fa\u76f8\u5173\u7684\u5b50\u7a0b\u5e8f \u4e00\u822c\u6765\u8bf4\uff0c\u4e00\u4e2a\u4f9b\u7a0b\u5e8f\u5458\u8c03\u7528\u7684\u4e2d\u65ad\u4f8b\u7a0b\u4e2d\uff0c\u5f80\u5f80\u5305\u62ec\u591a\u4e2a\u5b50\u7a0b\u5e8f\uff0c\u4e2d\u65ad\u4f8b\u7a0b\u5185\u90e8\u7528\u4f20\u9012\u8fdb\u6765\u7684\u53c2\u6570\u6765\u51b3\u5b9a\u6267\u884c\u54ea\u4e2a\u5b50\u7a0b\u5e8f 2.bios\u548cdos\u63d0\u4f9b\u7684\u4e2d\u65ad\u4f8b\u7a0b\uff0c\u90fd\u7528ah\u6765\u4f20\u9012\u5185\u90e8\u5b50\u7a0b\u5e8f\u7684\u7f16\u53f7 13.7 DOS\u4e2d\u65ad\u4f8b\u7a0b\u5e94\u7528 int 21h\u4e2d\u65ad\u4f8b\u7a0b\u662fdos\u63d0\u4f9b\u7684\u4e2d\u65ad\u4f8b\u7a0b\uff0c\u5176\u4e2d\u5305\u542b\u4e86dos\u63d0\u4f9b\u7ed9\u7a0b\u5e8f\u5458\u9020\u7f16\u7a0b\u65f6\u8c03\u7528\u7684\u5b50\u7a0b\u5e8f \u3010\u5b9e\u9a8c13\u3011 **\u4ecb\u7ecd\u4e00\u672c\u6c47\u7f16\u8bed\u8a00\u7684\u4e66\u300aThe Art of Assembly Language\u300b \u7b2c\u5341\u56db\u7ae0 \u7aef\u53e3 \u00b6 CPU\u53ef\u4ee5\u76f4\u63a5\u8bfb\u51993\u4e2a\u5730\u65b9\u7684\u6570\u636e 1.CPU\u5185\u90e8\u7684\u5bc4\u5b58\u5668 2.\u5185\u5b58\u5355\u5143 3.\u7aef\u53e3 14.1 \u7aef\u53e3\u7684\u8bfb\u5199 1.\u5bf9\u7aef\u53e3\u7684\u8bfb\u5199\u4e0d\u80fd\u7528mov\u3001push\u3001pop\u7b49\u5185\u5b58\u8bfb\u5199\u6307\u4ee4 \u7aef\u53e3\u7684\u8bfb\u5199\u6307\u4ee4\u53ea\u6709\u4e24\u6761\uff1a\u3010in\u3011\u548c\u3010out\u3011\u5206\u522b\u7528\u4e8e\u4ece\u7aef\u53e3\u8bfb\u53d6\u6570\u636e\u548c\u5f80\u7aef\u53e3\u5199\u5165\u6570\u636e 2.CPU\u6267\u884c\u5185\u5b58\u8bbf\u95ee\u6307\u4ee4\u548c\u7aef\u53e3\u8bbf\u95ee\u6307\u4ee4\u65f6\uff0c\u603b\u7ebf\u4e0a\u7684\u4fe1\u606f\uff1a 1.\u8bbf\u95ee\u5185\u5b58 mov ax,ds:[8]; \u5047\u8bbe\u6267\u884c\u524d\uff08ds\uff09=0 \u6267\u884c\u65f6\uff0c\u4e0e\u603b\u7ebf\u76f8\u5173\u7684\u64cd\u4f5c\uff1a 1.CPU\u901a\u8fc7\u5730\u5740\u7ebf\u5c06\u5730\u5740\u4fe1\u606f8\u53d1\u51fa 2.CPU\u901a\u8fc7\u63a7\u5236\u7ebf\u53d1\u51fa\u5185\u5b58\u8bfb\u547d\u4ee4\uff0c\u9009\u4e2d\u5b58\u50a8\u5668\u82af\u7247\uff0c\u5e76\u901a\u77e5\u5b83\uff0c\u5c06\u8981\u4ece\u4e2d\u8bfb\u53d6\u6570\u636e 3.\u5b58\u50a8\u5668\u5c068\u53f7\u5355\u5143\u4e2d\u7684\u6570\u636e\u901a\u8fc7\u6570\u636e\u7ebf\u9001\u5165CPU 2.\u8bbf\u95ee\u7aef\u53e3 \u8fd9\u91cc\u7684\u3010\u7aef\u53e3\u3011\u662f\u5bf9\u786c\u4ef6\u5f00\u653e\u7684\u7aef\u53e3 in al,60h; \u4ece60h\u53f7\u7aef\u53e3\u8bfb\u5165\u4e00\u4e2a\u5b57\u8282 \u6267\u884c\u65f6\u4e0e\u603b\u7ebf\u76f8\u5173\u7684\u64cd\u4f5c 1.CPU\u901a\u8fc7\u5730\u5740\u7ebf\u5c06\u5730\u5740\u4fe1\u606f60h\u53d1\u51fa 2.CPU\u901a\u8fc7\u63a7\u5236\u7ebf\u53d1\u51fa\u7aef\u53e3\u8bfb\u547d\u4ee4\uff0c\u9009\u4e2d\u7aef\u53e3\u6240\u5728\u7684\u82af\u7247\uff0c\u5e76\u901a\u77e5\u5b83\uff0c\u5c06\u8981\u4ece\u4e2d\u8bfb\u53d6\u6570\u636e 3.\u7aef\u53e3\u6240\u5728\u7684\u82af\u7247\u5c0660h\u7aef\u53e3\u4e2d\u7684\u6570\u636e\u901a\u8fc7\u6570\u636e\u7ebf\u9001\u5165CPU **\u6ce8\u610f\uff1a\u5728in\u548cout\u6307\u4ee4\u4e2d\uff0c\u53ea\u80fd\u4f7f\u7528ax\u6216al\u6765\u5b58\u653e\u4ece\u7aef\u53e3\u4e2d\u8bfb\u5165\u7684\u6570\u636e\u6216\u8981\u53d1\u9001\u5230\u7aef\u53e3\u4e2d\u7684\u6570\u636e \u8bbf\u95ee8\u4f4d\u7aef\u53e3\u65f6\u7528al\uff0c\u8bbf\u95ee16\u4f4d\u7aef\u53e3\u65f6\u7528ax 3.\u5bf90-255\u4ee5\u5185\u7684\u7aef\u53e3\u8fdb\u884c\u8bfb\u5199 in al,20h ;\u4ece20h\u7aef\u53e3\u8bfb\u4e00\u4e2a\u5b57\u8282 out 20h,al ;\u5f8020h\u7aef\u53e3\u5199\u4e00\u4e2a\u5b57\u8282 4.\u5bf9256-65535\u7684\u7aef\u53e3\u8fdb\u884c\u8bfb\u5199\u65f6\uff0c\u7aef\u53e3\u53f7\u653e\u5728\u3010dx\u3011\u4e2d mov dx,3f8h ;\u5c06\u7aef\u53e3\u53f73f8\u9001\u5165dx in al,dx ;\u4ece3f8h\u7aef\u53e3\u8bfb\u4e00\u4e2a\u5b57\u8282 out dx,al ;\u4ece3f8h\u7aef\u53e3\u5199\u4e00\u4e2a\u5b57\u8282 14.2 CMOS RAM\u82af\u7247 1.PC\u673a\u4e2d\u6709\u4e00\u4e2aCMOS RAM\u82af\u7247\uff0c\u5176\u6709\u5982\u4e0b\u7279\u5f81 1.\u5305\u542b\u4e00\u4e2a\u5b9e\u65f6\u949f\u548c\u4e00\u4e2a\u6709128\u4e2a\u5b58\u50a8\u5355\u5143\u7684RAM\u5b58\u50a8\u5668\u3002\uff08\u65e9\u671f\u7684\u8ba1\u7b97\u673a\u4e3a64\u5b57\u8282\uff09 2.\u8be5\u82af\u7247\u9760\u7535\u6c60\u4f9b\u7535\u3002\u56e0\u6b64\uff0c\u5173\u673a\u540e\u5176\u5185\u90e8\u7684\u5b9e\u65f6\u949f\u4ecd\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\uff0cRAM\u4e2d\u7684\u4fe1\u606f\u4e0d\u4e22\u5931 3.128\u5b57\u8282\u7684RAM\u4e2d\uff0c\u5185\u90e8\u5b9e\u65f6\u949f\u5360\u75280-0dh\u5355\u5143\u6765\u4fdd\u5b58\u65f6\u95f4\u4fe1\u606f\uff0c\u5176\u4f59\u5927\u90e8\u5206\u5206\u5355\u5143\u7528\u4e8e \u4fdd\u5b58\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\uff0c\u4f9b\u7cfb\u7edf\u542f\u52a8\u65f6bios\u7a0b\u5e8f\u8bfb\u53d6 bios\u4e5f\u63d0\u4f9b\u4e86\u76f8\u5173\u7684\u7a0b\u5e8f\uff0c\u4f7f\u6211\u4eec\u53ef\u4ee5\u5728\u5f00\u673a\u7684\u65f6\u5019\u914d\u7f6eCMOS RAM\u4e2d\u7684\u7cfb\u7edf\u4fe1\u606f **\u8865\u5145\uff1aBIOS BIOS\u662f\u82f1\u6587\"Basic Input Output System\"\u7684\u7f29\u7565\u8bcd\uff0c\u76f4\u8bd1\u8fc7\u6765\u540e\u4e2d\u6587\u540d\u79f0\u5c31\u662f\"\u57fa\u672c\u8f93\u5165\u8f93\u51fa\u7cfb\u7edf\"\u3002 \u5728IBM PC\u517c\u5bb9\u7cfb\u7edf\u4e0a\uff0c\u662f\u4e00\u79cd\u4e1a\u754c\u6807\u51c6\u7684\u56fa\u4ef6\u63a5\u53e3\u3002BIOS\u8fd9\u4e2a\u5b57\u773c\u662f\u57281975\u5e74\u7b2c\u4e00\u6b21\u7531CP/M\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u51fa\u73b0\u3002 BIOS\u662f\u4e2a\u4eba\u7535\u8111\u542f\u52a8\u65f6\u52a0\u8f7d\u7684\u7b2c\u4e00\u4e2a\u8f6f\u4ef6 4.\u8be5\u82af\u7247\u5185\u90e8\u6709\u4e24\u4e2a\u7aef\u53e3\uff0c\u7aef\u53e3\u5730\u5740\u4e3a70h\u548c71h\u3002CPU\u901a\u8fc7\u8fd9\u4e24\u4e2a\u7aef\u53e3\u8bfb\u5199CMOS RAM\u3002 5.70h\u4e3a\u5730\u5740\u7aef\u53e3\uff0c\u5b58\u653e\u8981\u8bbf\u95ee\u7684CMOS RAM\u5355\u5143\u7684\u5730\u5740\uff1b71h\u4e3a\u6570\u636e\u7aef\u53e3\uff0c\u5b58\u653e\u4ece\u9009\u5b9a\u7684CMOS RAM\u5355\u5143\u4e2d\u8bfb\u53d6\u7684\u6570\u636e \u6216\u8981\u5199\u5165\u5230\u5176\u4e2d\u7684\u6570\u636e 2.\u6bd4\u5982\uff1a\u8bfbCMOS RAM\u76842\u53f7\u5355\u5143\uff1a 1.\u5c062\u9001\u5165\u7aef\u53e370h 2.\u4ece71h\u8bfb\u53d62\u53f7\u5355\u5143\u7684\u5185\u5bb9 14.3 shl\u548cshr\u6307\u4ee4 shl\u548cshr\u662f\u903b\u8f91\u79fb\u4f4d\u6307\u4ee4\uff0c\u540e\u9762\u7684\u8bfe\u7a0b\u4e2d\u6211\u4eec\u8981\u7528\u5230\u79fb\u4f4d\u6307\u4ee4 1.shl\u903b\u8f91\u5de6\u79fb\u6307\u4ee4\uff0c\u529f\u80fd\u4e3a\uff1a 1.\u5c06\u4e00\u4e2a\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\u4e2d\u7684\u6570\u636e\u5411\u5de6\u79fb\u4f4d 2.\u5c06\u6700\u540e\u79fb\u51fa\u7684\u79fb\u4f4d\u5199\u5165cf\u4e2d 3.\u6700\u4f4e\u4f4d\u75280\u8865\u5145 \u4f8b\u5982\u6709\u5982\u4e0b\u6307\u4ee4\uff1a mov al,01001000b shl al,1 ;\u5c06al\u4e2d\u7684\u6570\u636e\u5de6\u79fb\u4e00\u4f4d \u6267\u884c\u540e(al)=100100000b\uff0ccf=0. \u5982\u679c\u79fb\u52a8\u4f4d\u6570\u5927\u4e8e1\u65f6\uff0c\u5fc5\u987b\u5c06\u79fb\u52a8\u4f4d\u6570\u653e\u5728cl\u4e2d 2.shr\u903b\u8f91\u53f3\u79fb\u6307\u4ee4\uff0c\u4e0eshl\u521a\u597d\u76f8\u53cd 14.4 CMOS RAM\u4e2d\u5b58\u50a8\u7684\u65f6\u95f4\u4fe1\u606f \u5728CMOS RAM\u4e2d\u5b58\u653e\u7740\u5f53\u524d\u65f6\u95f4 \u79d2\uff1a00h \u5206\uff1a02h \u65f6\uff1a04h \u65e5\uff1a07h \u6708\uff1a08h \u5e74\uff1a09h \u8fd96\u4e2a\u4fe1\u606f\u7684\u957f\u5ea6\u90fd\u4e3a1\u4e2a\u5b57\u8282 \u8fd9\u4e9b\u6570\u636e\u4ee5BCD\u7801\u7684\u65b9\u5f0f\u5b58\u653e\uff0c\u4e00\u4e2a\u5b57\u8282\u53ef\u4ee5\u8868\u793a\u4e24\u4e2aBCD\u7801 CMOS RAM\u5b58\u50a8\u65f6\u95f4\u4fe1\u606f\u7684\u5355\u5143\u4e2d\u5b58\u50a8\u4e86\u7528\u4e24\u4e2aBCD\u7801\u8868\u793a\u7684\u4e24\u4e2a\u5341\u8fdb\u5236\u6570 \u9ad84\u4f4d\u7684BCD\u7801\u8868\u793a\u5341\u4f4d\uff0c\u4f4e\u56db\u4f4d\u7684BCD\u7801\u8868\u793a\u4e2a\u4f4d \u3010\u7f16\u7a0b\u3011\uff1a\u5728\u5c4f\u5e55\u4e2d\u95f4\u663e\u793a\u5f53\u524d\u7684\u6708\u4efd 1.CMOS RAM\u82af\u7247\u56de\u987e\uff1a 1.70h\u4e3a\u5730\u5740\u7aef\u53e3\uff0c\u5b58\u653e\u8981\u8bbf\u95ee\u7684CMOS RAM\u5355\u5143\u7684\u5730\u5740 2.71h\u4e3a\u6570\u636e\u7aef\u53e3\uff0c\u5b58\u653e\u4ece\u9009\u5b9a\u7684CMOS RAM\u5355\u5143\u4e2d\u3010\u8bfb\u53d6\u3011\u7684\u6570\u636e\uff0c\u6216\u3010\u5199\u5165\u3011\u5176\u4e2d\u7684\u6570\u636e 2.\u5206\u6790 \u8fd9\u4e2a\u7a0b\u5e8f\u4e3b\u8981\u505a\u4e24\u90e8\u5206\u5de5\u4f5c 1.\u4eceCMOS RAM\u76848\u53f7\u5355\u5143\u8bfb\u53d6\u5f53\u524d\u6708\u4efd\u7684BCD\u7801 \u8981\u8bfb\u53d6CMOS RAM\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u9996\u5148\u8981\u5411\u5730\u5740\u7aef\u53e370h\u5199\u5165\u8981\u8bbf\u95ee\u7684\u5355\u5143\u7684\u5730\u5740 mov al,8 out 70h,al \u7136\u540e\u4ece\u6570\u636e\u7aef\u53e371h\u4e2d\u53d6\u5f97\u6307\u5b9a\u5355\u5143\u4e2d\u7684\u6570\u636e in al,71h 2.\u5c06\u7528BCD\u7801\u8868\u793a\u7684\u6708\u4efd\u4ee5\u5341\u8fdb\u5236\u7684\u5f62\u5f0f\u663e\u793a\u5230\u5c4f\u5e55\u4e0a ;\u7f16\u7a0b\uff1a\u5728\u5c4f\u5e55\u4e2d\u95f4\u663e\u793a\u5f53\u524d\u7684\u6708\u4efd code segment assume cs:code start: mov al,8 out 70h,al in al,71h mov ah,al mov cl,4 shr ah,cl and al,00001111b add ah,30h add al,30h mov bx,0b800h ;\u663e\u5b58 mov es,bx mov byte ptr es:[160*12+40*2],ah ;\u663e\u793a\u6708\u4efd\u7684\u5341\u4f4d\u6570\u7801 mov byte ptr es:[160*12+40*2+2],al ;\u663e\u793a\u6708\u4efd\u7684\u4e2a\u4f4d\u6570\u7801 mov ax,4c00h int 21h code ends end start \u3010\u5b9e\u9a8c\u5341\u56db\u3011\u7f16\u7a0b\uff1a\u4ee5\u201c\u5e74/\u6708/\u65e5 \u65f6:\u5206:\u79d2\u201d\u7684\u683c\u5f0f\uff0c\u663e\u793a\u5f53\u524d\u65e5\u671f\u548c\u65f6\u95f4 \u7b2c\u5341\u4e94\u7ae0 \u5916\u4e2d\u65ad \u00b6 **CPU\u9664\u4e86\u6709\u8fd0\u7b97\u80fd\u529b\uff0c\u8fd8\u6709I/O\u80fd\u529b 15.1 \u63a5\u53e3\u82af\u7247\u548c\u7aef\u53e3 1.\u5728PC\u7cfb\u7edf\u7684\u63a5\u53e3\u5361\u548c\u4e3b\u677f\u4e0a\uff0c\u88c5\u6709\u5404\u79cd\u63a5\u53e3\u82af\u7247\uff0c\u8fd9\u4e9b\u5916\u8bbe\u63a5\u53e3\u82af\u7247\u7684\u5185\u90e8\u88c5\u6709\u82e5\u5e72\u5bc4\u5b58\u5668 CPU\u5c06\u8fd9\u4e9b\u5bc4\u5b58\u5668\u5f53\u505a\u3010\u7aef\u53e3\u3011\u8bbf\u95ee 2.\u5916\u8bbe\u7684\u8f93\u5165\u4e0d\u76f4\u63a5\u9001\u5165\u5185\u5b58\u548cCPU\uff0c\u800c\u662f\u9001\u5165\u76f8\u5173\u7684\u63a5\u53e3\u82af\u7247\u7684\u3010\u7aef\u53e3\u3011\u4e2d 3.CPU\u5411\u5916\u8bbe\u7684\u8f93\u51fa\u4e5f\u662f\u8981\u5148\u9001\u5165\u3010\u7aef\u53e3\u3011\u4e2d\uff0c\u518d\u7531\u76f8\u5173\u82af\u7247\u9001\u5165\u5230\u5916\u8bbe 4.CPU\u53ef\u4ee5\u5411\u5916\u8bbe\u8f93\u51fa\u63a7\u5236\u547d\u4ee4\uff0c\u8fd9\u4e9b\u63a7\u5236\u547d\u4ee4\u4e5f\u662f\u5148\u9001\u5230\u3010\u7aef\u53e3\u3011\u4e2d\uff0c\u7136\u540e\u76f8\u5173\u82af\u7247\u6839\u636e\u547d\u4ee4\u8fdb\u884c\u76f8\u5173\u5de5\u4f5c 5.\u53ef\u89c1\uff1aCPU\u4e0e\u5916\u90e8\u8bbe\u5907\u7684\u4ea4\u6d41\u662f\u901a\u8fc7\u3010\u7aef\u53e3\u3011\u8fdb\u884c\u7684 CPU\u5728\u6267\u884c\u5b8c\u5f53\u524d\u6307\u4ee4\u540e\uff0c\u53ef\u4ee5\u68c0\u6d4b\u5230\u53d1\u9001\u8fc7\u6765\u7684\u4e2d\u65ad\u4fe1\u606f\uff0c\u5f15\u53d1\u4e2d\u65ad\u8fc7\u7a0b\uff0c\u5904\u7406\u5916\u8bbe\u7684\u8f93\u5165 15.2 \u5916\u4e2d\u65ad\u4fe1\u606f 1.\u5728PC\u7cfb\u7edf\u4e2d\uff0c\u5916\u4e2d\u65ad\u6e90\u4e00\u5171\u6709\u4e24\u7c7b 1.\u53ef\u5c4f\u853d\u4e2d\u65ad 2.\u4e0d\u53ef\u5c4f\u853d\u4e2d\u65ad 2.\u53ef\u5c4f\u853d\u4e2d\u65ad\u662fCPU\u53ef\u4ee5\u4e0d\u54cd\u5e94\u7684\u5916\u4e2d\u65ad\u3002CPU\u662f\u5426\u54cd\u5e94\u53ef\u5c4f\u853d\u4e2d\u65ad \u8981\u770b\u6807\u5fd7\u5bc4\u5b58\u5668\u7684IF\u4f4d\u7684\u8bbe\u7f6e \u5f53CPU\u68c0\u6d4b\u5230\u53ef\u5c4f\u853d\u4e2d\u65ad\u4fe1\u606f\u65f6\uff1a 1.\u82e5IF=1\uff0c\u5219CPU\u5728\u6267\u884c\u5b8c\u5f53\u524d\u6307\u4ee4\u540e\u76f8\u5e94\u4e2d\u65ad\uff0c\u5f15\u53d1\u4e2d\u65ad\u8fc7\u7a0b 2.\u82e5IF=0\uff0c\u5219\u4e0d\u54cd\u5e94\u53ef\u5c4f\u853d\u4e2d\u65ad 3.\u53ef\u5c4f\u853d\u4e2d\u65ad\u6240\u5f15\u53d1\u7684\u4e2d\u65ad\u8fc7\u7a0b\uff0c\u9664\u5728\u7b2c\u4e00\u6b65\u7684\u5b9e\u73b0\u4e0a\u4e0e\u5185\u4e2d\u65ad\u6709\u6240\u4e0d\u540c\u5916\uff0c\u57fa\u672c\u4e0a\u548c\u5185\u4e2d\u65ad\u7684\u4e2d\u65ad\u8fc7\u7a0b\u76f8\u540c 4.\u56e0\u4e3a\u53ef\u5c4f\u853d\u4e2d\u65ad\u4fe1\u606f\u6765\u81ea\u4e8eCPU\u5916\u90e8\uff0c\u4e2d\u65ad\u7c7b\u578b\u7801\u662f\u901a\u8fc7\u6570\u636e\u603b\u7ebf\u9001\u5165CPU\u7684 \u800c\u5185\u4e2d\u65ad\u7684\u4e2d\u65ad\u7801\u662f\u5728CPU\u5185\u90e8\u4ea7\u751f\u7684 5.IF\u8bbe\u7f6e\u4e3a0\u7684\u539f\u56e0\uff1a\u5728\u8fdb\u5165\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u540e\uff0c\u7981\u6b62\u5176\u4ed6\u7684\u53ef\u5c4f\u853d\u4e2d\u65ad \u5f53\u7136\uff0c\u5982\u679c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u4e2d\u9700\u8981\u5904\u7406\u53ef\u5c4f\u853d\u4e2d\u65ad\uff0c\u53ef\u4ee5\u7528\u6307\u4ee4\u5c06IF\u8bbe\u7f6e\u4e3a1 6.8086CPU\u63d0\u4f9b\u7684\u8bbe\u7f6eIF\u7684\u6307\u4ee4\u5982\u4e0b\uff1a sti ;\u7528\u4e8e\u8bbe\u7f6eIF=1 cli ;\u7528\u4e8e\u8bbe\u7f6eIF=0 7.\u4e0d\u53ef\u5c4f\u853d\u4e2d\u65ad\u662fCPU\u5fc5\u987b\u76f8\u5e94\u7684\u5916\u4e2d\u65ad\u3002 \u5f53CPU\u68c0\u6d4b\u5230\u4e0d\u53ef\u5c4f\u853d\u4e2d\u65ad\u4fe1\u606f\u65f6\uff0c\u5219\u5728\u6267\u884c\u5b8c\u5f53\u524d\u6307\u4ee4\u540e \u7acb\u5373\u54cd\u5e94\uff0c\u5e94\u53d1\u4e2d\u65ad\u8fc7\u7a0b 8.8086CPU\u4e0d\u53ef\u5c4f\u853d\u4e2d\u65ad\u7684\u4e2d\u65ad\u7c7b\u578b\u7801\u56fa\u5b9a\u4e3a2\uff0c\u6240\u4ee5\u4e2d\u65ad\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u9700\u8981\u53d6\u4e2d\u65ad\u7c7b\u578b\u7801 9.\u4e0d\u53ef\u5c4f\u853d\u4e2d\u65ad\u7684\u4e2d\u65ad\u8fc7\u7a0b 1.\u6807\u5fd7\u5bc4\u5b58\u5668\u5165\u6808\uff0cIF=0\uff0cTF=0 2.CS\uff0cIP\u5165\u6808 3.\uff08IP\uff09=\uff088\uff09\uff0c\uff08CS\uff09=\uff080AH\uff09 ;\u56fa\u5b9a\u5730\u5740 10.\u51e0\u4e4e\u6240\u6709\u5916\u4e2d\u65ad\uff0c\u90fd\u662f\u53ef\u5c4f\u853d\u4e2d\u65ad\u3002\u5f53\u5916\u8bbe\u6709\u9700\u8981\u5904\u7406\u7684\u4e8b\u4ef6\u53d1\u751f\u65f6 \u76f8\u5173\u82af\u7247\u5411CPU\u53d1\u51fa\u53ef\u5c4f\u853d\u4e2d\u65ad\u4fe1\u606f\u3002 \u4e0d\u53ef\u5c4f\u853d\u4e2d\u65ad\u662f\u7cfb\u7edf\u4e2d\u6709\u5fc5\u987b\u5904\u7406\u7684\u7d27\u6025\u60c5\u51b5\u53d1\u751f\u65f6\u7528\u6765\u901a\u77e5CPU\u7684\u4e2d\u65ad\u4fe1\u606f\uff0c\u672c\u95e8\u8bfe\u7a0b\u4e2d\uff0c\u4e3b\u8981\u8ba8\u8bba\u53ef\u5c4f\u853d\u4e2d\u65ad 15.3 PC\u673a\u952e\u76d8\u7684\u5904\u7406\u8fc7\u7a0b 1.\u4e0b\u9762\u770b\u4e00\u4e2a\u952e\u76d8\u8f93\u5165\u7684\u5904\u7406\u8fc7\u7a0b\uff0c\u5e76\u4ee5\u6b64\u6765\u4f53\u4f1aPC\u673a\u5904\u7406\u5916\u8bbe\u8f93\u5165\u7684\u57fa\u672c\u65b9\u6cd5 1.\u952e\u76d8\u8f93\u5165 2.\u5f15\u53d19\u53f7\u4e2d\u65ad 3.\u6267\u884cint 9\u4e2d\u65ad\u4f8b\u7a0b 2.PC\u673a\u952e\u76d8\u7684\u5904\u7406\u8fc7\u7a0b 1.\u952e\u76d8\u4e0a\u6bcf\u4e00\u4e2a\u952e\u76f8\u5f53\u4e8e\u4e00\u4e2a\u5f00\u5173\uff0c\u952e\u76d8\u4e2d\u6709\u4e00\u4e2a\u82af\u7247\u5bf9\u952e\u76d8\u4e0a\u7684\u6bcf\u4e00\u89e6\u952e\u7684\u5f00\u5173\u72b6\u6001\u8fdb\u884c\u626b\u63cf\u3002 2.\u6309\u4e0b\u4e00\u4e2a\u952e\u65f6\uff0c\u5f00\u5173\u63a5\u901a\uff0c\u8be5\u82af\u7247\u5c31\u4ea7\u751f\u4e00\u4e2a\u626b\u63cf\u7801\uff0c\u626b\u63cf\u7801\u8bf4\u660e\u6309\u4e0b\u7684\u952e\u5728\u952e\u76d8\u4e0a\u7684\u4f4d\u7f6e \u626b\u63cf\u7801\u88ab\u9001\u5165\u4e3b\u677f\u4e0a\u7684\u76f8\u5173\u63a5\u53e3\u82af\u7247\u7684\u5bc4\u5b58\u5668\u4e2d\uff0c\u8be5\u5bc4\u5b58\u5668\u7684\u7aef\u53e3\u5730\u5740\u4e3a60H 3.\u677e\u5f00\u63a7\u4e0b\u7684\u952e\u65f6\uff0c\u4e5f\u4ea7\u751f\u4e00\u4e2a\u626b\u63cf\u7801\uff0c\u626b\u63cf\u7801\u8bf4\u660e\u4e86\u677e\u5f00\u7684\u952e\u5728\u952e\u76d8\u4e0a\u7684\u4f4d\u7f6e\uff0c\u677e\u5f00\u6309\u952e\u65f6 \u4ea7\u751f\u7684\u626b\u63cf\u7801\u4e5f\u88ab\u9001\u516560H\u7aef\u53e3\u4e2d\u3002 \u4e00\u822c\u6309\u4e0b\u4e00\u4e2a\u952e\u65f6\uff0c\u4ea7\u751f\u7684\u626b\u63cf\u7801\u79f0\u4e3a\u901a\u7801\uff0c\u677e\u5f00\u4e00\u4e2a\u952e\u4ea7\u751f\u7684\u626b\u63cf\u7801\u79f0\u4e3a\u65ad\u7801 \u626b\u63cf\u7801\u957f\u5ea6\u4e3a\u4e00\u4e2a\u5b57\u8282\uff0c\u901a\u7801\u7684\u7b2c\u4e03\u4f4d\u4e3a0\uff0c\u65ad\u7801\u7684\u7b2c\u4e03\u4f4d\u4e3a1 \u5373\uff1a\u65ad\u7801=\u901a\u7801+80H **BIOS\u63d0\u4f9b\u4e86int9\u4e2d\u65ad\u4f8b\u7a0b\uff0c\u7528\u6765\u8fdb\u884c\u57fa\u672c\u7684\u952e\u76d8\u8f93\u5165\u5904\u7406\uff0c\u4e3b\u8981\u7684\u5de5\u4f5c\u5982\u4e0b\uff1a 1.\u8bfb\u51fa60H\u7aef\u53e3\u4e2d\u7684\u626b\u63cf\u7801 2.\u5982\u679c\u662f\u5b57\u7b26\u952e\u7684\u626b\u63cf\u7801\uff0c\u5c06\u8be5\u626b\u63cf\u7801\u5bf9\u5e94\u7684\u5b57\u7b26\u7801\uff08\u5373\uff1aASCII\u7801\uff09\u9001\u5165\u5185\u5b58\u4e2d\u7684BIOS\u952e\u76d8\u7f13\u51b2\u533a 3\uff0c\u5982\u679c\u662f\u63a7\u5236\u952e\u548c\u5207\u6362\u952e\u7684\u626b\u63cf\u7801\uff0c\u5219\u5c06\u5176\u8f6c\u53d8\u4e3a\u72b6\u6001\u5b57\u8282\uff0c\u5199\u5165\u5185\u5b58\u4e2d\u5b58\u50a8\u72b6\u6001\u5b57\u8282\u7684\u5355\u5143 4.\u952e\u76d8\u7684\u8f93\u5165\u5230\u8fbe60H\u7aef\u53e3\u65f6\uff0c\u76f8\u5173\u7684\u82af\u7247\u4f1a\u5411CPU\u53d1\u51fa\u4e2d\u65ad\u7c7b\u578b\u7801\u4e3a9\u7684\u53ef\u5c4f\u853d\u4e2d\u65ad\u4fe1\u606f\u3002 5.CPU\u68c0\u6d4b\u5230\u4e2d\u65ad\u4fe1\u606f\u540e\uff0c\u5982\u679cIF=1\uff0c\u5219\u76f8\u5e94\u4e2d\u65ad\uff0c\u540c\u65f6\u5c06IF\u8bbe\u7f6e\u4e3a0\uff08\u4e0d\u8ba9\u5176\u4ed6\u53ef\u5c4f\u853d\u4e2d\u65ad\u8fdb\u884c\u5e72\u6270\uff09\uff0c\u5f15\u53d1\u4e2d\u65ad\u8fc7\u7a0b\uff0c\u8f6c\u53bb\u6267\u884cint9\u4e2d\u65ad\u4f8b\u7a0b 3.BIOS\u952e\u76d8\u7f13\u51b2\u533a\u662f\u7cfb\u7edf\u542f\u52a8\u540e\uff0cBIOS\u7528\u4e8e\u5b58\u653eint9\u4e2d\u65ad\u4f8b\u7a0b\u6240\u63a5\u53d7\u7684\u952e\u76d8\u8f93\u5165\u7684\u5185\u5b58\u533a 4.\u8be5\u5185\u5b58\u533a\u53ef\u4ee5\u5b58\u50a815\u4e2a\u952e\u76d8\u8f93\u5165\uff0cint9\u4e2d\u65ad\u4f8b\u7a0b\u9664\u4e86\u63a5\u6536\u626b\u63cf\u7801\u5916\uff0c\u8fd8\u8981\u4ea7\u751f\u548c\u626b\u63cf\u7801\u5bf9\u5e94\u7684\u5b57\u7b26\u7801\uff0c \u6240\u4ee5\u5728BIOS\u952e\u76d8\u7f13\u51b2\u533a\u4e2d\uff0c\u4e00\u4e2a\u952e\u76d8\u8f93\u5165\u7528\u4e00\u4e2a\u5b57\u5355\u5143\u5b58\u653e\uff0c\u9ad8\u5b57\u8282\u5b58\u653e\u626b\u63cf\u7801\uff0c\u4f4e\u5b57\u8282\u5b58\u653e\u5b57\u7b26\u7801 5.0040:17\u5355\u5143\u5b58\u50a8\u952e\u76d8\u72b6\u6001\u5b57\u8282\uff0c\u8be5\u5b57\u8282\u8bb0\u5f55\u4e86\u63a7\u5236\u952e\u548c\u5207\u6362\u952e\u7684\u72b6\u6001\u3002\u952e\u76d8\u72b6\u6001\u5b57\u8282\u5404\u4f4d\u8bb0\u5f55\u7684\u4fe1\u606f\u5982\u4e0b\uff1a 15.4 \u7f16\u5199int9\u4e2d\u65ad\u4f8b\u7a0b,\u5e76\u5b89\u88c5 \u68b3\u7406\u952e\u76d8\u8f93\u5165\u7684\u5904\u7406\u8fc7\u7a0b 1.\u952e\u76d8\u4ea7\u751f\u626b\u63cf\u7801 2.\u626b\u63cf\u7801\u9001\u516560H\u7aef\u53e3 3.\u4e00\u65e6\u4fa6\u6d4b\u523060H\u7aef\u53e3\u6709\u52a8\u9759\uff0c\u5f15\u53d19\u53f7\u4e2d\u65ad 4.CPU\u6267\u884cint9\u4e2d\u65ad\u4f8b\u7a0b\u5904\u7406\u8f93\u5165 \u4ee5\u4e0a\u7684\u8fc7\u7a0b\uff0c\u524d\u4e09\u6b65\u90fd\u7531\u786c\u4ef6\u7cfb\u7edf\u81ea\u52a8\u5b8c\u6210\uff0c\u80fd\u591f\u4fee\u6539\u7684\u53ea\u6709\u7b2c\u56db\u6b65\uff0c\u4fee\u6539int9\u4e2d\u65ad\u7a0b\u5e8f \u3010\u4efb\u52a1\u6f14\u793a\u3011\u5728\u5c4f\u5e55\u4e2d\u4f9d\u6b21\u663e\u793a\u201ca\u201d~\u201cz\u201d\u5e76\u53ef\u4ee5\u8ba9\u4eba\u770b\u6e05\u3002\u5728\u663e\u793a\u8fc7\u7a0b\u4e2d\uff0c\u6309\u4e0bEsc\u952e\u540e\uff0c\u8be5\u8868\u663e\u793a\u7684\u989c\u8272 ;\u7a0b\u5e8f1\uff1a\u5b9e\u73b0\u8fde\u7eed\u663e\u793a\u201ca\u201d~\u201cz\u201d ;\u7f16\u7a0b\uff1a\u5728\u5c4f\u5e55\u4e2d\u95f4\u4f9d\u6b21\u663e\u793a\u201ca\u201d~\u201cz\u201d\uff0c\u5e76\u53ef\u4ee5\u8ba9\u4eba\u770b\u6e05\u3002\u5728\u663e\u793a\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6309\u4e0b'Esc'\u952e\u540e\uff0c\u6539\u53d8\u663e\u793a\u7684\u989c\u8272\u3002 ;\u90e8\u5206\u529f\u80fd\u4ee3\u7801\uff1a stack segment db 128 dup (0) stack ends code segment assume cs:code start: mov ax,stack mov ss,ax mov sp,128 mov ax,0b800h mov es,ax mov ah,'a' s: mov es:[160*12+40*2],ah call delay inc ah cmp ah,'z' jna s mov ax,4c00h int 21h delay: push ax push dx mov dx,0010h ;\u5faa\u73af10000000h\u6b21 mov ax,0 s1: sub ax,1 sbb dx,0 cmp ax,0 jne s1 cmp dx,0 jne s1 pop dx pop ax ret code ends end start ;\u7a0b\u5e8f2\uff1a\u5b9e\u73b0\u6539\u53d8\u989c\u8272 ;\u7f16\u7a0b\uff1a\u5728\u5c4f\u5e55\u4e2d\u95f4\u4f9d\u6b21\u663e\u793a\u201ca\u201d~\u201cz\u201d\uff0c\u5e76\u53ef\u4ee5\u8ba9\u4eba\u770b\u6e05\u3002\u5728\u663e\u793a\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6309\u4e0b'Esc'\u952e\u540e\uff0c\u6539\u53d8\u663e\u793a\u7684\u989c\u8272\u3002 stack segment db 128 dup (0) stack ends data segment dw 0,0 data ends code segment assume cs:code start: mov ax,stack mov ss,ax mov sp,128 mov ax,data mov ds,ax mov ax,0 mov es,ax push es:[9*4] pop ds:[0] push es:[9*4+2] pop ds:[2] ;\u5c06\u539f\u6765\u7684int 9\u4e2d\u65ad\u4f8b\u7a0b\u7684\u5165\u53e3\u5730\u5740\u4fdd\u5b58\u5728ds:0\u3001ds:2\u5355\u5143\u4e2d mov word ptr es:[9*4],offset int9 mov es:[9*4+2],cs ;\u5728\u4e2d\u65ad\u5411\u91cf\u8868\u4e2d\u8bbe\u7f6e\u65b0\u7684int 9\u4e2d\u65ad\u4f8b\u7a0b\u7684\u5165\u53e3\u5730\u5740 mov ax,0b800h mov es,ax mov ah,'a' s: mov es:[160*12+40*2],ah call delay inc ah cmp ah,'z' jna s mov ax,0 mov es,ax push ds:[0] pop es:[9*4] push ds;[2] pop es;[9*4+2] ;\u5c06\u4e2d\u65ad\u5411\u91cf\u8868\u4e2dint 9\u4e2d\u65ad\u4f8b\u7a0b\u7684\u5165\u53e3\u6062\u590d\u4e3a\u539f\u6765\u7684\u5730\u5740 mov ax,4c00h int 21h delay: push ax push dx mov dx,0010h mov ax,0 s1: sub ax,1 sbb dx,0 cmp ax,0 jne s1 cmp dx,0 jne s1 pop dx pop ax ret ;------\u4ee5\u4e0b\u4e3a\u65b0\u7684int 9\u4e2d\u65ad\u4f8b\u7a0b-------------------- ;int9\u4e2d\u65ad\u4f8b\u7a0b\u662f\u5728\u8fdb\u884c\u952e\u76d8\u8f93\u5165\u4e4b\u540e\uff0c\u7531\u7cfb\u7edf\u81ea\u52a8\u8c03\u7528 int9: push ax push bx push es in al,60h pushf pushf pop bx and bh,11111100b push bx popf call dword ptr ds:[0] ;\u5bf9int\u6307\u4ee4\u8fdb\u884c\u6a21\u62df\uff0c\u8c03\u7528\u539f\u6765\u7684int 9\u4e2d\u65ad\u4f8b\u7a0b cmp al,1 jne int9ret mov ax,0b800h mov es,ax inc byte ptr es:[160*12+40*2+1] ;\u5c5e\u6027\u589e\u52a01\uff0c\u6539\u53d8\u989c\u8272 int9ret: pop es pop bx pop ax iret code ends end start \u7b2c\u5341\u516d\u7ae0 \u76f4\u63a5\u5b9a\u5740\u8868 \u00b6 16.1 \u63cf\u8ff0\u4e86\u5355\u5143\u957f\u5ea6\u7684\u6807\u53f7 1.\u672c\u7ae0\u8ba8\u8bba\u5982\u4f55\u6709\u6548\u5408\u7406\u5730\u7ec4\u7ec7\u6570\u636e\uff0c\u4ee5\u53ca\u76f8\u5173\u7684\u7f16\u7a0b\u6280\u672f 1.\u524d\u9762\u7684\u8bfe\u7a0b\u4e2d\uff0c\u6211\u4eec\u4e00\u76f4\u5728\u4ee3\u7801\u6bb5\u4e2d\u4f7f\u7528\u6807\u53f7\u6765\u6807\u8bb0\u6307\u4ee4\u3001\u6570\u636e\u3001\u6bb5\u7684\u8d77\u59cb\u5730\u5740 2.\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u6807\u53f7\uff0c\u8fd9\u79cd\u6807\u53f7\u4e0d\u4f46\u53ef\u4ee5\u8868\u793a\u5185\u5b58\u5355\u5143\u7684\u5730\u5740\uff0c\u8fd8\u8868\u793a\u4e86\u5185\u5b58\u5355\u5143\u7684\u957f\u5ea6 \u5373\uff1a\u8868\u793a\u5728\u6b64\u6807\u53f7\u5904\u7684\u5355\u5143\uff0c\u662f\u4e00\u4e2a\u5b57\u8282\u5355\u5143\uff0c\u8fd8\u662f\u5b57\u5355\u5143\u8fd8\u662f\u53cc\u5b57\u5355\u5143 2.\u4f8b\u5982 1.\u6807\u53f71 a : db 1,2,3,4,5,6,7,8 b : dw 0 \u6b64\u79cd\u6807\u53f7\u53ea\u80fd\u6807\u8bb0\u5730\u5740 \u6b64\u79cd\u52a0\u6709\u201c:\u201d\u7684\u5730\u5740\u6807\u53f7\uff0c\u53ea\u80fd\u5728\u4ee3\u7801\u6bb5\u4e2d\u4f7f\u7528\uff0c\u4e0d\u80fd\u5728\u5176\u4ed6\u6bb5\u4e2d\u4f7f\u7528 2.\u6807\u53f72 a db 1,2,3,4,5,6,7,8 ;\u6807\u53f7a\uff0c\u63cf\u8ff0\u4e86\u5730\u5740code:0,\u548c\u4ece\u8fd9\u4e2a\u5730\u5740\u5f00\u59cb\uff0c\u4ee5\u540e\u7684\u5185\u5b58\u5355\u5143\u90fd\u662f\u5b57\u8282\u5355\u5143 b dw 0 ;\u6807\u53f7b\u63cf\u8ff0\u4e86\u5730\u5740code:8\uff0c\u548c\u4ece\u8fd9\u4e2a\u5730\u5740\u5f00\u59cb\uff0c\u4ee5\u540e\u7684\u5185\u5b58\u5355\u5143\u90fd\u662f\u5b57\u5355\u5143 \u6b64\u79cd\u6807\u53f7\u65e2\u53ef\u4ee5\u6807\u8bb0\u5730\u5740\uff0c\u4e5f\u53ef\u4ee5\u8868\u793a\u6b64\u6807\u53f7\u5904\u7684\u5355\u5143 3.\u4f7f\u7528\u8fd9\u79cd\u5305\u542b\u5355\u5143\u957f\u5ea6\u7684\u6807\u53f7\uff0c\u53ef\u4ee5\u4f7f\u6211\u4eec\u4ee5\u7b80\u6d01\u7684\u5f62\u5f0f\u8bbf\u95ee\u5185\u5b58\u4e2d\u7684\u6570\u636e \u8fd9\u79cd\u6807\u53f7\u6b64\u540e\u79f0\u4e3a\u6570\u636e\u6807\u53f7\uff0c\u5b83\u6807\u8bb0\u4e86\u5b58\u50a8\u6570\u636e\u7684\u5355\u5143\u7684\u5730\u5740\u548c\u957f\u5ea6 4.\u6570\u636e\u6807\u53f7\u7684\u7528\u6cd5 \u6307\u4ee4\uff1amov ax,b ;\u76f8\u5f53\u4e8e\uff1amov ax,cs:[8] \u6307\u4ee4\uff1amov b,2 ;\u76f8\u5f53\u4e8e\uff1amov word ptr cs:[8],2 \u6307\u4ee4\uff1ainc b ;\u76f8\u5f53\u4e8e\uff1ainc word ptr cs:[8] \u6307\u4ee4\uff1amov al,a [si] ;\u76f8\u5f53\u4e8e\uff1amov al,cs:0[si] \u6307\u4ee4\uff1amov al,a[3] ;\u76f8\u5f53\u4e8e\uff1amov al,cs:0[3] \u6307\u4ee4\uff1amov al,a[bx+si+3] ;\u76f8\u5f53\u4e8e\uff1amov al,cs:0[bx+si+3] 16.2 \u5728\u5176\u4ed6\u6bb5\u4e2d\u4f7f\u7528\u6570\u636e\u6807\u53f7 1.\u6ce8\u610f\uff0c\u5982\u679c\u60f3\u5728\u4ee3\u7801\u6bb5\u4e2d\uff0c\u76f4\u63a5\u7528\u6570\u636e\u6807\u53f7\u8bbf\u95ee\u6570\u636e\uff0c \u5219\u9700\u8981\u7528\u4f2a\u6307\u4ee4assume \u5c06\u6807\u53f7\u6240\u5728\u7684\u6bb5\u548c\u4e00\u4e2a\u6bb5\u5bc4\u5b58\u5668\u8054\u7cfb\u8d77\u6765\u3002 \u5426\u5219\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u7684\u65f6\u5019\uff0c\u65e0\u6cd5\u786e\u5b9a\u6807\u53f7\u7684\u6bb5\u5730\u5740\u5728\u54ea\u4e00\u4e2a\u5bc4\u5b58\u5668\u4e2d\u3002 2. \u5f53\u7136\uff0c\u8fd9\u79cd\u8054\u7cfb\u662f\u7f16\u8bd1\u5668\u9700\u8981\u7684\uff0c\u4f46\u7edd\u5bf9\u4e0d\u662f\u8bf4\uff0c\u6211\u4eec\u56e0\u4e3a\u7f16\u8bd1\u5668\u7684\u5de5\u4f5c\u9700\u8981\uff0c \u7528assume\u6307\u4ee4\u5c06\u6bb5\u5bc4\u5b58\u5668\u548c\u67d0\u4e2a\u6bb5\u76f8\u8054\u7cfb\uff0c\u6bb5\u5bc4\u5b58\u5668\u4e2d\u5c31\u4f1a\u771f\u7684\u5b58\u653e\u8be5\u6bb5\u7684\u5730\u5740\u3002 3.\u6211\u4eec\u53ef\u4ee5\u5c06\u6570\u636e\u6807\u53f7\u5f53\u4f5c\u6570\u636e\u6765\u5b9a\u4e49\uff0c\u6b64\u65f6\uff0c\u7f16\u8bd1\u5668\u5c06\u6807\u53f7\u6240\u8868\u793a\u7684\u5730\u5740\u5f53\u4f5c\u6570\u636e\u7684\u503c\u3002 1.\u628a\u6570\u636e\u6807\u53f7\u5f53\u505a\u6570\u636e\u6765\u5b9a\u4e49\u65f6\uff0c\u4f7f\u7528\u3010dw\u3011\u5b9a\u4e49\u6570\u636e \u6bd4\u5982\uff1a data segment a db 1,2,3,4,5,6,7,8 b dw 0 c dw a,b ;\u6570\u636e\u6807\u53f7c\u5904\u5b58\u50a8\u7684\u4e24\u4e2a\u5b57\u578b\u6570\u636e\u4e3a\u6807\u53f7a\u3001b \u7684\u504f\u79fb\u5730\u5740\u3002 data ends \u6570\u636e\u6807\u53f7c\u5904\u5b58\u50a8\u7684\u4e24\u4e2a\u5b57\u578b\u6570\u636e\u4e3a\u6807\u53f7a\u3001b \u7684\u504f\u79fb\u5730\u5740\u3002 \u76f8\u5f53\u4e8e\uff1a data segment a db 1,2,3,4,5,6,7,8 b dw 0 c dw offset a, offset b data ends 2.\u628a\u6570\u636e\u6807\u53f7\u5f53\u505a\u6570\u636e\u6765\u5b9a\u4e49\u65f6\uff0c\u4f7f\u7528\u3010dd\u3011\u5b9a\u4e49\u6570\u636e \u518d\u6bd4\u5982\uff1a data segment a db 1,2,3,4,5,6,7,8 b dw 0 c dd a,b ;\u6570\u636e\u6807\u53f7c\u5904\u5b58\u50a8\u7684\u4e24\u4e2a\u53cc\u5b57\u578b\u6570\u636e\u4e3a\u6807\u53f7a\u7684\u504f\u79fb\u5730\u5740\u548c\u6bb5\u5730\u5740\u3001\u6807\u53f7b \u7684\u504f\u79fb\u5730\u5740\u548c\u6bb5\u5730\u5740\u3002 data ends \u6570\u636e\u6807\u53f7c\u5904\u5b58\u50a8\u7684\u4e24\u4e2a\u53cc\u5b57\u578b\u6570\u636e\u4e3a\u6807\u53f7a\u7684\u504f\u79fb\u5730\u5740\u548c\u6bb5\u5730\u5740\u3001\u6807\u53f7b \u7684\u504f\u79fb\u5730\u5740\u548c\u6bb5\u5730\u5740\u3002 \u76f8\u5f53\u4e8e\uff1a data segment a db 1,2,3,4,5,6,7,8 b dw 0 c dw offset a, seg a, offset b, seg b ;seg\u64cd\u4f5c\u7b26\uff0c\u529f\u80fd\u4e3a\u53d6\u5f97\u67d0\u4e00\u6807\u53f7\u7684\u6bb5\u5730\u5740\u3002 data ends seg\u64cd\u4f5c\u7b26\uff0c\u529f\u80fd\u4e3a\u53d6\u5f97\u67d0\u4e00\u6807\u53f7\u7684\u6bb5\u5730\u5740\u3002 16.3 \u76f4\u63a5\u5b9a\u5740\u8868 \u672c\u8282\u8bfe\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u201c\u67e5\u8868\u201d\u7684\u65b9\u6cd5\uff0c\u7f16\u5199\u76f8\u5173\u7a0b\u5e8f\u7684\u6280\u5de7 \u3010\u4efb\u52a1\u3011\u7f16\u5199\u5b50\u7a0b\u5e8f\uff0c\u4ee5\u5341\u516d\u8fdb\u5236\u7684\u5f62\u5f0f\u5728\u5c4f\u5e55\u4e2d\u95f4\u663e\u793a\u7ed9\u5b9a\u7684byte\u578b\u6570\u636e code segment assume cs:code start: mov al,0eh ;al\u4e2d\u5b58\u653e\u4e86byte\u578b\u6570\u636e call showbyte mov ax,4c00h int 21h ;\u5b50\u7a0b\u5e8f\uff1a ;\u7528al\u4f20\u9001\u8981\u663e\u793a\u7684\u6570\u636e showbyte: jmp short show table db '0123456789ABCDEF' ;\u5b57\u7b26\u8868 show: push bx ;\u4fdd\u62a4\u73b0\u573a push es mov ah,al shr ah,1 shr ah,1 shr ah,1 shr ah,1 ;\u53f3\u79fb4\u4f4d\uff0cah\u4e2d\u5f97\u5230\u9ad84\u4f4d\u7684\u503c and al,00001111b ;al\u4e2d\u4e3a\u4f4e4\u4f4d\u7684\u503c mov bl,ah mov bh,0 mov ah,table[bx] ;\u7528\u9ad84\u4f4d\u7684\u503c\u4f5c\u4e3a\u76f8\u5bf9\u4e8etable\u7684\u504f\u79fb\uff0c\u53d6\u5f97\u5bf9\u5e94\u7684\u5b57\u7b26 mov bx,0b800h mov es,bx mov es:[160*12+40*2],ah mov bl,al mov bh,0 mov al,table[bx] ;\u7528\u4f4e4\u4f4d\u7684\u503c\u4f5c\u4e3a\u76f8\u5bf9\u4e8etable\u7684\u504f\u79fb\uff0c\u53d6\u5f97\u5bf9\u5e94\u7684\u5b57\u7b26 mov es:[160*12+40*2+2],al pop es pop bx ret code ends end start 16.4 \u7a0b\u5e8f\u5165\u53e3\u5730\u5740\u7684\u76f4\u63a5\u5b9a\u5740\u8868 \u3010\u7f16\u7a0b\u3011\u5b9e\u73b0\u4e00\u4e2a\u5b50\u7a0b\u5e8fsetscreen\uff0c\u4e3a\u663e\u793a\u8f93\u51fa\u63d0\u4f9b\u5982\u4e0b\u529f\u80fd\uff1a 1.\u6e05\u5c4f 2.\u8bbe\u7f6e\u524d\u666f\u8272 3.\u8bbe\u7f6e\u80cc\u666f\u8272 4.\u5411\u4e0a\u6eda\u52a8\u4e00\u884c 1.\u5165\u53e3\u53c2\u6570\u8bf4\u660e\uff1a 1.\u7528ah\u5bc4\u5b58\u5668\u4f20\u9012\u529f\u80fd\u53f7 0\uff1a\u6e05\u5c4f\uff1b1\uff1a\u8bbe\u7f6e\u524d\u666f\u8272\uff1b2\uff1a\u8bbe\u7f6e\u80cc\u666f\u8272\uff1b3\uff1a\u5411\u4e0a\u6eda\u52a8\u4e00\u884c 2.\u5bf9\u4e8e2\u30013\u53f7\u529f\u80fd\uff0c\u7528al\u4f20\u9012\u989c\u8272\u503c al\u2208{0\uff0c1\uff0c2\uff0c3\uff0c4\uff0c5\uff0c6\uff0c7} 2.\u5404\u79cd\u529f\u80fd\u5982\u4f55\u5b9e\u73b0 1.\u6e05\u5c4f\uff1a \u5c06\u663e\u5b58\u4e2d\u5f53\u524d\u5c4f\u5e55\u4e2d\u7684\u5b57\u7b26\u8bbe\u4e3a\u7a7a\u683c\u7b26\uff1b 2.\u8bbe\u7f6e\u524d\u666f\u8272\uff1a \u8bbe\u7f6e\u663e\u5b58\u4e2d\u5f53\u524d\u5c4f\u5e55\u4e2d\u5904\u4e8e\u5947\u5730\u5740\u7684\u5c5e\u6027\u5b57\u8282\u7684\u7b2c0\u30011\u30012\u4f4d\uff1b 012\u4f4d\u5b58\u653e\u524d\u666f\u8272 3.\u8bbe\u7f6e\u80cc\u666f\u8272\uff1a \u8bbe\u7f6e\u663e\u5b58\u4e2d\u5f53\u524d\u5c4f\u5e55\u4e2d\u5904\u4e8e\u5947\u5730\u5740\u7684\u5c5e\u6027\u5b57\u8282\u7684\u7b2c4\u30015\u30016\u4f4d\uff1b 456\u4f4d\u5b58\u653e\u80cc\u666f\u8272 4.\u5411\u4e0a\u6eda\u52a8\u4e00\u884c\uff1a \u4f9d\u6b21\u5c06\u7b2c n+1\u884c\u7684\u5185\u5bb9\u590d\u5236\u5230\u7b2cn\u884c\u5904\uff1a\u6700\u540e\u4e00\u884c\u4e3a\u7a7a\u3002 ;\u529f\u80fd\u5b50\u7a0b\u5e8f1\uff1a\u6e05\u5c4f sub1: push bx ;\u4fdd\u62a4\u73b0\u573a,\u8c03\u7528\u5b50\u7a0b\u5e8f\u7684\u65f6\u5019\uff0c\u6ce8\u610f\u8981\u4fdd\u62a4\u73b0\u573a\uff0c\u8fd0\u884c\u5b50\u7a0b\u5e8f\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u4fee\u6539\u4e00\u4e9b\u5bc4\u5b58\u5668\u7684\u503c push cx push es mov bx,0b800h mov es,bx mov bx,0 mov cx,2000 sub1s: mov byte ptr es:[bx],' ' ;\u5faa\u574f2000\u6b21 add bx,2 loop sub1s pop es ;\u6062\u590d\u73b0\u573a pop cx pop bx ret ;\u529f\u80fd\u5b50\u7a0b\u5e8f2\uff1a\u8bbe\u7f6e\u524d\u666f sub2: push bx push cx push es mov bx,0b800h mov es,bx mov bx,1 mov cx,2000 sub2s: and byte ptr es:[bx],11111000b or es:[bx],al add bx,2 loop sub2s pop es pop cx pop bx ret ;\u529f\u80fd\u5b50\u7a0b\u5e8f3\uff1a\u8bbe\u7f6e\u80cc\u666f\u8272 sub3: push bx push cx push es mov cl,4 shl al,cl mov bx,0b800h mov es,bx mov bx,1 mov cx,2000 sub3s: and byte ptr es:[bx],10001111b or es:[bx],al add bx,2 loop sub2s pop es pop cx pop bx ret ;\u529f\u80fd\u5b50\u7a0b\u5e8f4\uff1a\u5411\u4e0a\u6eda\u52a8\u4e00\u884c sub4: push cx push si push di push es push ds mov si,0b800h mov es,si mov ds,si mov si,160 ;ds:si\u6307\u5411\u7b2cn+1\u884c\uff0c\u7b2c1\u884c mov di,0 ;es:di\u6307\u5411\u7b2cn\u884c\uff0c\u7b2c0\u884c cld mov cx,24;\u5171\u590d\u523624\u884c sub4s: push cx mov cx,160 rep movsb ;\u590d\u5236 pop cx loop sub4s mov cx,80 mov si,0 sub4s1: mov byte ptr es:[160*24+si],' ' ;\u6700\u540e\u4e00\u884c\u6e05\u7a7a add si,2 loop sub4s1 pop ds pop es pop di pop si pop cx ret ;sub4 ends 3.\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u529f\u80fd\u5b50\u7a0b\u5e8f\u7684\u5165\u53e3\u5730\u5740\u5b58\u50a8\u5728\u4e00\u4e2a\u8868\u4e2d\uff0c\u4ed6\u4eec\u5728\u8868\u4e2d\u7684\u4f4d\u7f6e\u548c\u529f\u80fd\u53f7\u76f8\u5bf9\u5e94 ;\u7f16\u7a0b\uff1a\u5b9e\u73b0\u4e00\u4e2a\u5b50\u7a0b\u5e8fsetscreen\uff0c\u4e3a\u663e\u793a\u8f93\u51fa\u63d0\u4f9b\u5982\u4e0b\u529f\u80fd\uff1a ;(1) \u6e05\u5c4f\u3002 ;(2) \u8bbe\u7f6e\u524d\u666f\u8272\u3002 ;(3) \u8bbe\u7f6e\u80cc\u666f\u8272\u3002 ;(4) \u5411\u4e0a\u6eda\u52a8\u4e00\u884c\u3002 ; ;\u5165\u53e3\u53c2\u6570\u8bf4\u660e\uff1a ;(1) \u7528 ah \u5bc4\u5b58\u5668\u4f20\u9012\u529f\u80fd\u53f7\uff1a0 \u8868\u793a\u6e05\u5c4f\uff0c1\u8868\u793a\u8bbe\u7f6e\u524d\u666f\u8272\uff0c2 \u8868\u793a\u8bbe\u7f6e\u80cc\u666f\u8272\uff0c3 \u8868\u793a\u5411\u4e0a\u6eda\u52a8\u4e00\u884c\uff1b ;(2) \u5bf9\u4e8e2\u30013\u53f7\u529f\u80fd\uff0c\u7528 al \u4f20\u9001\u989c\u8272\u503c\uff0c(al) \u2208{0,1,2,3,4,5,6,7} setscreen: jmp short set table dw sub1,sub2,sub3,sub4 set: push bx cmp ah,3 ;\u5224\u65ad\u4f20\u9012\u7684\u662f\u5426\u5927\u4e8e 3 ja sret mov bl,ah mov bh,0 add bx,bx ;\u6839\u636eah\u4e2d\u7684\u529f\u80fd\u53f7\u8ba1\u7b97\u5bf9\u5e94\u5b50\u7a0b\u5e8f\u7684\u5730\u5740\u5728table\u8868\u4e2d\u7684\u504f\u79fb call word ptr table[bx] ;\u8c03\u7528\u5bf9\u5e94\u7684\u529f\u80fd\u5b50\u7a0b\u5e8f\uff0c\u5b66\u4f1a\u672c\u53e5\u4ee3\u7801\uff0c\u662f\u672c\u7ae0\u8282\u7684\u3010\u7cbe\u9ad3\u3011 sret: pop bx iret ;\u529f\u80fd\u5b50\u7a0b\u5e8f1\uff1a\u6e05\u5c4f sub1: push bx push cx push es mov bx,0b800h mov es,bx mov bx,0 mov cx,2000 sub1s: mov byte ptr es:[bx],' ' add bx,2 loop sub1s pop es pop cx pop bx ret ;sub1 ends ;\u529f\u80fd\u5b50\u7a0b\u5e8f2\uff1a\u8bbe\u7f6e\u524d\u666f\u8272 sub2: push bx push cx push es mov bx,0b800h mov es,bx mov bx,1 mov cx,2000 sub2s: and byte ptr es:[bx],11111000b or es:[bx],al add bx,2 loop sub2s pop es pop cx pop bx ret ;sub2 ends ;\u529f\u80fd\u5b50\u7a0b\u5e8f3\uff1a\u8bbe\u7f6e\u80cc\u666f\u8272 sub3: push bx push cx push es mov cl,4 shl al,cl mov bx,0b800h mov es,bx mov bx,1 mov cx,2000 sub3s: and byte ptr es:[bx],10001111b or es:[bx],al add bx,2 loop sub2s pop es pop cx pop bx ret ; sub3 ends ;\u529f\u80fd\u5b50\u7a0b\u5e8f4\uff1a\u5411\u4e0a\u6eda\u52a8\u4e00\u884c sub4: push cx push si push di push es push ds mov si,0b800h mov es,si mov ds,si mov si,160 ;ds:si\u6307\u5411\u7b2cn+1\u884c mov di,0 ;es:di\u6307\u5411\u7b2cn\u884c cld mov cx,24;\u5171\u590d\u523624\u884c sub4s: push cx mov cx,160 rep movsb ;\u590d\u5236 pop cx loop sub4s mov cx,80 mov si,0 sub4s1: mov byte ptr es:[160*24+si],' ' ;\u6700\u540e\u4e00\u884c\u6e05\u7a7a add si,2 loop sub4s1 pop ds pop es pop di pop si pop cx ret ;sub4 ends \u7b2c\u5341\u4e03\u7ae0 \u4f7f\u7528BIOS\u8fdb\u5165\u952e\u76d8\u8f93\u5165\u548c\u78c1\u76d8\u8bfb\u5199 \u00b6 **\u5f15\u8a00 1.\u5927\u591a\u6570\u6709\u7528\u7684\u7a0b\u5e8f\u90fd\u9700\u8981\u5904\u7406\u7528\u6237\u7684\u8f93\u5165\uff0c\u952e\u76d8\u8f93\u5165\u662f\u6700\u57fa\u672c\u7684\u8f93\u5165\u3002 2.\u7a0b\u5e8f\u548c\u6570\u636e\u901a\u5e38\u9700\u8981\u957f\u671f\u5b58\u50a8\uff0c\u78c1\u76d8\u662f\u6700\u5e38\u7528\u7684\u5b58\u50a8\u8bbe\u5907\u3002 3.BIOS \u4e3a\u8fd9\u4e24\u79cd\u5916\u8bbe\u7684I/O\u63d0\u4f9b\u4e86\u6700\u57fa\u672c\u7684\u4e2d\u65ad\u4f8b\u7a0b\uff0c\u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u5bf9\u5b83\u4eec\u7684\u5e94\u7528\u548c\u76f8\u5173\u7684\u95ee\u9898\u8fdb\u884c\u8ba8\u8bba\u3002 17.1 int9\u4e2d\u65ad\u4f8b\u7a0b\u5bf9\u952e\u76d8\u8f93\u5165\u7684\u5904\u7406 CPU \u57289 \u53f7\u4e2d\u65ad\u53d1\u751f\u540e\uff0c\u6267\u884cint 9\u4e2d\u65ad\u4f8b\u7a0b\uff0c\u4ece60h \u7aef\u53e3\u8bfb\u51fa\u626b\u63cf\u7801\uff0c \u5e76\u5c06\u5176\u8f6c\u5316\u4e3a\u76f8\u5e94\u7684ASCII \u7801\u6216\u72b6\u6001\u4fe1\u606f\uff0c\u5b58\u50a8\u5728\u5185\u5b58\u7684\u6307\u5b9a\u7a7a\u95f4\uff08\u952e\u76d8\u7f13\u51b2\u533a\u6216\u72b6\u6001\u5b57\u8282\uff09\u4e2d\u3002 17.2 \u4f7f\u7528int16h\u4e2d\u65ad\u4f8b\u7a0b\u8bfb\u53d6\u952e\u76d8\u7f13\u51b2\u533a 1.BIOS\u63d0\u4f9b\u4e86int 16h \u4e2d\u65ad\u4f8b\u7a0b\u4f9b\u7a0b\u5e8f\u5458\u8c03\u7528\u3002 2.int 16h \u4e2d\u65ad\u4f8b\u7a0b\u4e2d\u5305\u542b\u7684\u4e00\u4e2a\u6700\u91cd\u8981\u7684\u529f\u80fd\u662f\u4ece\u952e\u76d8\u7f13\u51b2\u533a\u4e2d\u8bfb\u53d6\u4e00\u4e2a\u952e\u76d8\u8f93\u5165\uff0c\u8be5\u529f\u80fd\u7684\u7f16\u53f7\u4e3a0\u3002 3.\u4e0b\u9762\u7684\u6307\u4ee4\u4ece\u952e\u76d8\u7f13\u51b2\u533a\uff08\u7f13\u51b2\u533a\u7684\u6700\u4f4e\u4f4d\uff09\u4e2d\u8bfb\u53d6\u4e00\u4e2a\u952e\u76d8\u8f93\u5165\uff0c\u5e76\u4e14\u5c06\u5176\u4ece\u7f13\u51b2\u533a\u4e2d\u5220\u9664\uff1a mov ah,0 int 16h \u7ed3\u679c\uff1a(ah)=\u626b\u63cf\u7801\uff0c(al)=ASCII\u7801\u3002 4.int 16h \u4e2d\u65ad\u4f8b\u7a0b\u7684 0 \u53f7\u529f\u80fd\uff0c\u8fdb\u884c\u5982\u4e0b\u7684\u5de5\u4f5c\uff1a \uff081\uff09\u68c0\u6d4b\u952e\u76d8\u7f13\u51b2\u533a\u4e2d\u662f\u5426\u6709\u6570\u636e\uff1b \uff082\uff09\u6ca1\u6709\u5219\u7ee7\u7eed\u505a\u7b2c1 \u6b65\uff1b\uff08\u7f13\u51b2\u533a\u968f\u65f6\u6709\u53ef\u80fd\u8f93\u5165\u6570\u636e\uff09 \uff083\uff09\u8bfb\u53d6\u7f13\u51b2\u533a\u7b2c\u4e00\u4e2a\u5b57\u5355\u5143\u4e2d\u7684\u952e\u76d8\u8f93\u5165\uff1b \uff084\uff09\u5c06\u8bfb\u53d6\u7684\u626b\u63cf\u7801\u9001\u5165ah\uff0cASCII \u7801\u9001\u5165al\uff1b \uff085\uff09\u5c06\u5df1\u8bfb\u53d6\u7684\u952e\u76d8\u8f93\u5165\u4ece\u7f13\u51b2\u533a\u4e2d\u5220\u9664\u3002 5.\u53ef\u89c1\uff0cB1OS \u7684int 9 \u4e2d\u65ad\u4f8b\u7a0b\u548cint 16h \u4e2d\u65ad\u4f8b\u7a0b\u662f\u4e00\u5bf9\u76f8\u4e92\u914d\u5408\u7684\u7a0b\u5e8f\uff0c int 9 \u4e2d\u65ad\u4f8b\u7a0b\u5411\u952e\u76d8\u7f13\u51b2\u533a\u4e2d\u5199\u5165\uff0c int 16h \u4e2d\u65ad\u4f8b\u7a0b\u4ece\u7f13\u51b2\u533a\u4e2d\u8bfb\u51fa\u3002 \u5b83\u4eec\u5199\u5165\u548c\u8bfb\u51fa\u7684\u65f6\u673a\u4e0d\u540c\uff0cint 9 \u4e2d\u65ad\u4f8b\u7a0b\u5728\u6709\u952e\u6309\u4e0b\u7684\u65f6\u5019\u5411\u952e\u76d8\u7f13\u51b2\u533a\u4e2d\u5199\u5165\u6570\u636e\uff1b \u800cint 16h \u4e2d\u65ad\u4f8b\u7a0b\u662f\u5728\u5e94\u7528\u7a0b\u5e8f\u5bf9\u5176\u8fdb\u884c\u8c03\u7528\u7684\u65f6\u5019\uff0c\u5c06\u6570\u636e\u4ece\u952e\u76d8\u7f13\u51b2\u533a\u4e2d\u8bfb\u51fa\u3002 \u3010\u7f16\u7a0b\u3011\u63a5\u6536\u7528\u6237\u7684\u952e\u76d8\u8f93\u5165\uff0c\u8f93\u5165\u201cr\u201d\uff0c\u5c06\u5c4f\u5e55\u4e0a\u7684\u5b57\u7b26\u8bbe\u7f6e\u4e3a\u7ea2\u8272\uff1a\u8f93\u5165\u201cg\u201d\uff0c \u5c06\u5c4f\u5e55\u4e0a\u7684\u5b57\u7b26\u8bbe\u7f6e\u4e3a\u7eff\u8272\uff1b\u8f93\u5165\u201cb \u201d\uff0c\u5c06\u5c4f\u5e55\u4e0a\u7684\u5b57\u7b26\u8bbe\u7f6e\u4e3a\u84dd\u8272\u3002 ;\u7f16\u7a0b\uff1a ;\u63a5\u6536\u7528\u6237\u7684\u952e\u76d8\u8f93\u5165\uff0c\u8f93\u5165\u201cr\u201d\uff0c\u5c06\u5c4f\u5e55\u4e0a\u7684\u5b57\u7b26\u8bbe\u7f6e\u4e3a\u7ea2\u8272\uff1a\u8f93\u5165\u201cg\u201d\uff0c ;\u5c06\u5c4f\u5e55\u4e0a\u7684\u5b57\u7b26\u8bbe\u7f6e\u4e3a\u7eff\u8272\uff1b\u8f93\u5165\u201cb \u201d\uff0c\u5c06\u5c4f\u5e55\u4e0a\u7684\u5b57\u7b26\u8bbe\u7f6e\u4e3a\u84dd\u8272\u3002 ;A\u3001B\u3001C\u5904\u7684\u7a0b\u5e8f\u6307\u4ee4\u6bd4\u8f83\u6709\u6280\u5de7\uff0c\u8bf7\u8bfb\u8005\u81ea\u884c\u5206\u6790 code segment assume cs:code start: mov ah,0 int 16h ;int 16h 0\u53f7\u529f\u80fd\u5b9e\u73b0\u4ece\u952e\u76d8\u7f13\u51b2\u533a\u8bfb\u53d6\u4e00\u4e2a\u952e\u76d8\u8f93\u5165 mov ah,1 ;A cmp al,'r' je red cmp al,'g' je green cmp al,'b' je blue jmp short sret red: shl ah,1 ;B green: shl ah,1 ;C blue: mov bx,0b800h mov es,bx mov bx,1 mov cx,2000 s: and byte ptr es:[bx],11111000b ;\u8bbe\u7f6e\u989c\u8272 or es:[bx],ah ;\u8bbe\u7f6e\u989c\u8272 add bx,2 loop s sret: mov ax,4c00h int 21h code ends end start 17.3 \u5b57\u7b26\u4e32\u7684\u8f93\u5165 int 21h\u76840a\u53f7\u529f\u80fd\u53ef\u4ee5\u5b9e\u73b0\u5b57\u7b26\u4e32\u7684\u8f93\u5165 \u4e5f\u53ef\u4ee5\u7528int 16h\uff0c\u901a\u8fc7\u663e\u793a\u952e\u76d8\u7f13\u51b2\u533a\u4e2d\u7684\u5185\u5bb9\uff0c\u5b9e\u73b0\u5b57\u7b26\u4e32\u7684\u663e\u793a 1.\u4f7f\u7528int 16h\u663e\u793a\u5b57\u7b26\u4e32\u7a0b\u5e8f\u7684\u5904\u7406\u8fc7\u7a0b\u5982\u4e0b \u2460 \u8c03\u7528int 16h\u8bfb\u53d6\u952e\u76d8\u8f93\u5165\uff1b \u2461 \u5982\u679c\u662f\u5b57\u7b26\uff0c\u8fdb\u5165\u5b57\u7b26\u6808\uff0c\u663e\u793a\u5b57\u7b26\u6808\u4e2d\u7684\u6240\u6709\u5b57\u7b26\uff1b\u7ee7\u7eed\u6267\u884c\u2460 \uff1b \u2462 \u5982\u679c\u662f\u9000\u683c\u952e\uff0c\u4ece\u5b57\u7b26\u6808\u4e2d\u5f39\u51fa\u4e00\u4e2a\u5b57\u7b26\uff0c\u663e\u793a\u5b57\u7b26\u6808\u4e2d\u7684\u6240\u6709\u5b57\u7b26\uff1b\u7ee7\u7eed\u6267\u884c\u2460 \uff1b \u2463 \u5982\u679c\u662fEnter \u952e\uff0c\u5411\u5b57\u7b26\u6808\u4e2d\u538b\u51650\uff0c\u8fd4\u56de\u3002 2.\u5b50\u7a0b\u5e8f\uff1a\u5b57\u7b26\u6808\u7684\u5165\u6808\u3001\u51fa\u6808\u548c\u663e\u793a \u53c2\u6570\u8bf4\u660e (ah)=\u529f\u80fd\u53f7\uff0c0\u8868\u793a\u5165\u6808\uff0c1\u8868\u793a\u51fa\u6808\uff0c2\u8868\u793a\u663e\u793a\uff1b ds : si \u6307\u5411\u5b57\u7b26\u6808\u7a7a\u95f4\uff1b \u5bf9\u4e8e0 \u53f7\u529f\u80fd\uff1a(al)=\u5165\u6808\u5b57\u7b26\uff1b \u5bf9\u4e8e1 \u53f7\u529f\u80fd\uff1a(al)=\u8fd4\u56de\u7684\u5b57\u7b26\uff1b \u5bf9\u4e8e2 \u53f7\u529f\u80fd\uff1a(dh)\u3001(dl) =\u5b57\u7b26\u4e32\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\u7684\u884c\u3001\u5217\u4f4d\u7f6e\u3002 ;\u4f7f\u7528int 16h\u663e\u793a\u5b57\u7b26\u4e32\u7684\u5b50\u7a0b\u5e8f\uff1a\u5b57\u7b26\u6808 ;\u6700\u57fa\u672c\u7684\u5b57\u7b26\u4e32\u8f93\u5165\u7a0b\u5e8f\uff0c\u9700\u8981\u5177\u5907\u4e0b\u9762\u7684\u529f\u80fd\uff1a ;\uff081\uff09 \u5728\u8f93\u5165\u7684\u540c\u65f6\u9700\u8981\u663e\u793a\u8fd9\u4e2a\u5b57\u7b26\u4e32\uff1b ;\uff082\uff09\u4e00\u822c\u5728\u8f93\u5165\u56de\u8f66\u7b26\u540e\uff0c\u5b57\u7b26\u4e32\u8f93\u5165\u7ed3\u675f\uff1b ;\uff083\uff09\u80fd\u591f\u5220\u9664\u5df2\u7ecf\u8f93\u5165\u7684\u5b57\u7b26\u3002 ;\u7f16\u5199\u4e00\u4e2a\u63a5\u6536\u5b57\u7b26\u4e32\u7684\u8f93\u5165\u5b50\u7a0b\u5e8f\uff0c\u5b9e\u73b0\u4e0a\u9762\u4e09\u4e2a\u57fa\u672c\u529f\u80fd\u3002 ;\u56e0\u4e3a\u5728\u8f93\u5165\u7684\u8fc7\u7a0b\u4e2d\u9700\u8981\u663e\u793a\uff0c\u5b50\u7a0b\u5e8f\u7684\u53c2\u6570\u5982\u4e0b\uff1a ; (dh)\u3001(dl)=\u5b57\u7b26\u4e32\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\u7684\u884c\u3001\u5217\u4f4d\u7f6e\uff1b ; ds:si \u6307\u5411\u5b57\u7b26\u4e32\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u5b57\u7b26\u4e32\u4ee5O \u4e3a\u7ed3\u5c3e\u7b26\u3002 ;\u529f\u80fd\u5b50\u7a0b\u5e8f\u5b9e\u73b0 charstack: jmp short charstart table dw charpush,charpop,charshow top dw 0 ;\u6808\u9876 charstart: push bx push dx push di push es cmp ah,2 ja sret mov bl,ah mov bh,0 add bx,bx jmp word ptr table[bx] ;\u4f7f\u7528\u76f4\u63a5\u5b9a\u5740\u8868 charpush: mov bx,top mov [si][bx],al inc top jmp sret charpop: cmp top,0 je sret dec top mov bx,top mov al,[si][bx] jmp sret charshow: mov bx,0b800h mov es,bx mov al,160 mov ah,0 mul dh mov di,ax add dl,dl mov dh,0 add di,dx mov bx,0 charshows: cmp bx,top jne noempty mov byte ptr es:[di],' ' jmp sret noempty: mov al,[si][bx] mov es:[di],al mov byte ptr es:[di+2],' ' inc bx add di,2 jmp charshows sret: pop es pop di pop dx pop bx ret 17.4 \u5e94\u7528int13h\u4e2d\u65ad\u4f8b\u7a0b\u5bf9\u952e\u76d8\u8fdb\u884c\u8bfb\u5199 1.\u78c1\u76d8\u7684\u5b9e\u9645\u8bbf\u95ee\u7531\u78c1\u76d8\u63a7\u5236\u5668\u8fdb\u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236\u78c1\u76d8\u63a7\u5236\u5668\u6765\u8bbf\u95ee\u78c1\u76d8\u3002 2.\u6ce8\u610f\uff0c\u6211\u4eec\u53ea\u80fd\u4ee5\u6247\u533a\u4e3a\u5355\u4f4d\u5bf9\u78c1\u76d8\u8fdb\u884c\u8bfb\u5199\u3002 \u5728\u8bfb\u5199\u6247\u533a\u7684\u65f6\u5019\uff0c\u8981\u7ed9\u51fa\u9762\u53f7\u3001\u78c1\u9053\u53f7\u548c\u6247\u533a\u53f7\u3002\u9762\u53f7\u548c\u78c1\u9053\u53f7\u4ece0\u5f00\u59cb\uff0c\u800c\u6247\u533a\u53f7\u4ece1\u5f00\u59cb\u3002 3.BIOS\u63d0\u4f9b\u4e86\u5bf9\u6247\u533a\u8fdb\u884c\u8bfb\u5199\u7684\u4e2d\u65ad\u4f8b\u7a0b\uff0c\u8fd9\u4e9b\u4e2d\u65ad\u4f8b\u7a0b\u5b8c\u6210\u4e86\u8bb8\u591a\u590d\u6742\u7684\u548c\u786c\u4ef6\u76f8\u5173\u7684\u5de5\u4f5c\u3002 4.\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528BIOS\u4e2d\u65ad\u4f8b\u7a0b\u6765\u8bbf\u95ee\u78c1\u76d8\u3002 BIOS \u63d0\u4f9b\u7684\u8bbf\u95ee\u78c1\u76d8\u7684\u4e2d\u65ad\u4f8b\u7a0b\u4e3aint 13h \u3002 \u5982\u4e0b\uff0c\u8bfb\u53d60\u97620\u90531\u6247\u533a\u7684\u5185\u5bb9\u52300:200\uff1a","title":"\u6c47\u7f16\u8bed\u8a00\u5b66\u4e60\u7b14\u8bb0"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#_1","text":"b\u7ad9\u5c0f\u7532\u9c7c","title":"\u6c47\u7f16\u8bed\u8a00\u5b66\u4e60\u7b14\u8bb0"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#win10","text":"https://blog.csdn.net/weixin_42109012/article/details/102726296","title":"win10\u914d\u7f6e\u6c47\u7f16\u73af\u5883"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#1","text":"\u6c47\u7f16\u8bed\u8a00\u7684\u7ec4\u6210 \u200b 1.\u6c47\u7f16\u6307\u4ee4\uff08\u673a\u5668\u7801\u7684\u52a9\u8bb0\u7b26\uff09 \u200b 2.\u4f2a\u6307\u4ee4\uff08\u7531\u7f16\u8bd1\u5668\u6267\u884c\uff09 \u200b 3.\u5176\u4ed6\u7b26\u53f7\uff08\u7531\u7f16\u8bd1\u5668\u8bc6\u522b\uff09 \u78c1\u76d8\u4e0d\u540c\u4e8e\u5185\u5b58\uff0c\u78c1\u76d8\u4e0a\u7684\u6570\u636e\u6216\u7a0b\u5e8f\u5982\u679c\u4e0d\u8bfb\u5165\u5185\u5b58\u4e2d\uff0c\u5c31\u65e0\u6cd5\u88abcpu\u4f7f\u7528 CPU\u8981\u60f3\u8fdb\u884c\u6570\u636e\u7684\u8bfb\u5199\uff0c\u5fc5\u987b\u548c\u5916\u90e8\u5668\u4ef6\uff08\u5373\u82af\u7247\uff09\u8fdb\u884c\u4e09\u7c7b\u4fe1\u606f\u7684\u4ea4\u4e92 \u200b 1.\u5730\u5740\u4fe1\u606f\uff1a\u5b58\u50a8\u5355\u5143\u7684\u5730\u5740 \u200b 2.\u63a7\u5236\u4fe1\u606f\uff1a\u82af\u7247\u7684\u9009\u62e9\uff0c\u8bfb\u6216\u5199\u547d\u4ee4 \u200b 3.\u6570\u636e\u4fe1\u606f\uff1a\u8bfb\u6216\u5199\u7684\u6570\u636e \u5404\u7c7b\u5b58\u50a8\u5668\u82af\u7247\u4ece\u529f\u80fd\u548c\u8fde\u63a5\u4e0a\u5206\u7c7b \u200b 1.\u968f\u673a\u5b58\u50a8\u5668RAM \u200b 2.\u88c5\u6709BIOS\u7684ROM \u200b 3.\u63a5\u53e3\u5361\u4e0a\u7684RAM","title":"1 \u57fa\u7840\u77e5\u8bc6"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#_2","text":"\u539f\u7801\u53d6\u53cd\u52a0\u4e00\u7684\u5b9a\u4e49\u5e76\u4e0d\u5177\u6709\u666e\u9002\u6027\uff0c\u6bd4\u59828\u4f4d\u4e8c\u8fdb\u5236\u4e2d\u7684-128 \u66f4\u52a0\u666e\u4e16\u7684\u5b9a\u4e49\uff1a\u4e00\u4e2a\u6570\u7684\u6a21\u51cf\u53bb\u5176\u7edd\u5bf9\u503c \u6a21\u7684\u5b9a\u4e49\uff1a1\u540e\u9762\u52a0\u4e0a\u53c2\u4e0e\u8fd0\u7b97\u7684\u4f4d\u6570 \u6240\u4ee5-128\u7684\u8865\u7801 = 100000000-10000000=10000000","title":"\u6ce8\uff1a\u8d1f\u6570\u8865\u7801\u7684\u5b9a\u4e49"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#2-cpu","text":"CPU=\u8fd0\u7b97\u5668+\u63a7\u5236\u5668+\u5bc4\u5b58\u5668\uff0c\u5668\u4ef6\u4e4b\u95f4\u901a\u8fc7\u603b\u7ebf\u76f8\u8fde 8086CPU\u670914\u4e2a\u5bc4\u5b58\u5668\uff0c\u540d\u79f0\u5206\u522b\u4e3a\uff1a \u200b AX\uff0cBX\uff0cCX\uff0cDX\uff0cSI\uff0cDI\uff0cSP\uff0cBP\uff0cIP\uff0cCS\uff0cSS\uff0cDS\uff0cES\uff0cPSW \u901a\u7528\u5bc4\u5b58\u5668\u7528 x \u7ed3\u5c3e\uff0c\u6bb5\u5bc4\u5b58\u5668\u7528 s \u7ed3\u5c3e","title":"2 \u5bc4\u5b58\u5668\uff08CPU\u5de5\u4f5c\u539f\u7406\uff09"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#21","text":"8086CPU\u6240\u6709\u7684\u5bc4\u5b58\u5668\u90fd\u662f16\u4f4d\u7684\uff0c\u53ef\u4ee5\u5b58\u653e2\u4e2a\u5b57\u8282 AX\u3001BX\u3001CX\u3001DX\u901a\u5e38\u7528\u6765\u5b58\u653e\u4e00\u822c\u6027\u6570\u636e\uff0c\u88ab\u79f0\u4e3a\u901a\u7528\u5bc4\u5b58\u5668 \u8fdb\u5236\uff1aH\uff08\u5341\u516d\u8fdb\u5236\uff09\uff0cB\uff08\u4e8c\u8fdb\u5236\uff09","title":"2.1 \u901a\u7528\u5bc4\u5b58\u5668"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#22","text":"mov ax,18 ;AX=18 mov ah,78 ;AH=78 add ax,8 ;AX=AX+8 mov ax,bx ;AX=BX add ax,bx ;AX+=BX inc ax ;AX+=1 dec ax ;AX-=1 nop ;\u5360\u4e00\u4e2a\u5b57\u8282","title":"2.2 \u51e0\u6761\u6c47\u7f16\u6307\u4ee4"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#23","text":"\u903b\u8f91\u5730\u5740 (\u865a\u62df\u5730\u5740/\u76f8\u5bf9\u5730\u5740/\u6709\u6548\u5730\u5740)\uff1a\u7531\u6bb5\u5730\u5740\u548c\u504f\u79fb\u5730\u5740\u7ec4\u6210 \u7269\u7406\u5730\u5740 (\u5b9e\u9645\u5730\u5740/\u7edd\u5bf9\u5730\u5740)\uff1a\u6bb5\u5730\u5740 \\(\\times\\) 16+\u504f\u79fb\u5730\u5740","title":"2.3 \u7269\u7406\u5730\u5740\u548c\u903b\u8f91\u5730\u5740"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#23_1","text":"\u4e00\u4e2a\u6bb5\u7684\u8d77\u59cb\u5730\u5740\u4e00\u5b9a\u662f16\u7684\u500d\u6570 \u4e00\u4e2a\u6bb5\u7684\u6700\u5927\u957f\u5ea6\u662f64K","title":"2.3 \u6bb5\u7684\u6982\u5ff5"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#24","text":"\u63d0\u4f9b\u6bb5\u5730\u5740\u7684\u6bb5\u5bc4\u5b58\u5668 \u6bb5\u5bc4\u5b58\u5668 CS code segment DS data segment SS stack segment ES extra segment","title":"2.4 \u6bb5\u5bc4\u5b58\u5668"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#241-cs-ip","text":"CS\uff1a\u4ee3\u7801\u6bb5\u5bc4\u5b58\u5668 IP\uff1a\u6307\u4ee4\u6307\u9488 \u5bc4\u5b58\u5668 8086CPU\u5de5\u4f5c\u8fc7\u7a0b\u7684\u7b80\u8981\u63cf\u8ff0 \u200b 1.\u4eceCS:IP\u6307\u5411\u5185\u5b58\u5355\u5143\uff0c\u8bfb\u53d6\u6307\u4ee4\uff0c\u8bfb\u53d6\u7684\u6307\u4ee4\u8fdb\u5165\u6307\u4ee4\u7f13\u51b2\u5668 \u200b 2.IP=IP+\u6240\u8bfb\u53d6\u6307\u4ee4\u7684\u957f\u5ea6\uff0c\u4ece\u800c\u6307\u5411\u4e0b\u4e00\u6761\u6307\u4ee4 \u200b 3.\u6267\u884c\u6307\u4ee4\uff0c\u8f6c\u5230\u6b65\u9aa41\uff0c\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b \u57288086CPU\u52a0\u7535\u542f\u52a8\u6216\u590d\u4f4d\u540e\uff08\u5373CPU\u521a\u5f00\u59cb\u5de5\u4f5c\u65f6\uff09CS\u548cIP\u88ab\u8bbe\u7f6e\u4e3a CS=FFFFH\uff0cIP=0000H \u5373\u57288086PC\u673a\u521a\u542f\u52a8\u65f6\uff0cCPU\u4ece\u5185\u5b58FFFF0H\u5355\u5143\u4e2d\u8bfb\u53d6\u6307\u4ee4\u6267\u884c\uff0cFFFF0H\u5355\u5143\u4e2d\u7684\u6307\u4ee4\u662f8086PC\u673a\u5f00\u673a\u540e\u6267\u884c\u7684\u7b2c\u4e00\u6761","title":"2.4.1 CS / IP"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#242-jmp","text":"\u4e0d\u80fd\u901a\u8fc7 mov \u6539\u53d8CS\u548cIP \u540c\u65f6\u4fee\u6539CS/IP \u683c\u5f0f\uff1a jmp \u6bb5\u5730\u5740\uff1a\u504f\u79fb\u5730\u5740 ;eg jmp 2AE3:3 ;2AE33H jmp 3:0B16 ;00B46H \u4ec5\u4fee\u6539IP \u683c\u5f0f\uff1a jmp \u67d0\u4e00\u5408\u6cd5\u5bc4\u5b58\u5668 ;eg jmp ax ;\u7c7b\u4f3cmov IP,ax","title":"2.4.2 jmp"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#25-debug","text":"\u4e0d\u533a\u5206\u5927\u5c0f\u5199 r\u547d\u4ee4\uff1a\u67e5\u770b\u3001\u6539\u53d8CPU\u5bc4\u5b58\u5668\u7684\u5185\u5bb9 r\u540e\u9762\u52a0\u5bc4\u5b58\u5668\u7684\u540d\u79f0\u540e\u53ef\u4ee5\u6539\u53d8CPU\u5bc4\u5b58\u5668\u7684\u5185\u5bb9 d\u547d\u4ee4\uff1a\u67e5\u770b\u5185\u5b58\u4e2d\u7684\u5185\u5bb9\uff08\u53ef\u4ee5+\u5177\u4f53\u7684\u903b\u8f91\u5730\u5740+\u8303\u56f4\uff09 d fff0:0 d fff0:0 ff e\u547d\u4ee4\uff1a\u6539\u5199\u5185\u5b58\u4e2d\u7684\u5185\u5bb9 ;\u4ece\u4e00\u4e2a\u5355\u5143\u5f00\u59cb\u586b\u5199\u6570\u636e e B810:0000 01 01 02 02 03 03 04 04 u\u547d\u4ee4\uff1a\u5c06\u5185\u5b58\u6c47\u603b\u7684\u673a\u5668\u6307\u4ee4\u7ffb\u8bd1\u6210\u6c47\u7f16\u6307\u4ee4\uff08\u53ef\u4ee5+\u5177\u4f53\u7684\u903b\u8f91\u5730\u5740+\u67e5\u627e\u8303\u56f4\uff09 t\u547d\u4ee4\uff1a\u6267\u884c\u4e00\u6761\u673a\u5668\u6307\u4ee4 a\u547d\u4ee4\uff1a\u4ee5\u6c47\u7f16\u6307\u4ee4\u7684\u683c\u5f0f\u5728\u5185\u5b58\u4e2d\u5199\u5165\u4e00\u6761\u673a\u5668\u6307\u4ee4\uff08\u4e0d\u9700\u8981\u5199H\uff0ca+\u5730\u5740\uff09 q\u547d\u4ee4\uff1a\u53ef\u4ee5\u9000\u51fa g\u547d\u4ee4\uff1a\u8df3\u8fc7\uff08\u65ad\u70b9\uff09\uff0c \u52a0\u504f\u79fb\u5730\u5740\u8df3\u5230\u5177\u4f53\u7684\u67d0\u4e00\u884c p\u547d\u4ee4\uff1a cls\uff1a\u6e05\u5c4f","title":"2.5 DEBUG\u7684\u4f7f\u7528\u3010\u5b9e\u9a8c\u4e00\u3011"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#3","text":"","title":"3 \u5bc4\u5b58\u5668\uff08\u5185\u5b58\u8bbf\u95ee\uff09"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#31","text":"\u6570\u636e\u7684\u5b58\u50a8\u65b9\u5f0f\uff1a\u5927\u7aef\u65b9\u5f0f\u548c\u5c0f\u7aef\u65b9\u5f0f\uff088086\u5904\u7406\u5668\u91c7\u7528\u5c0f\u7aef\u65b9\u5f0f\uff09 \u5927\u7aef\u65b9\u5f0f\uff1a\u9ad8\u5b57\u8282\u5b58\u50a8\u5728\u4f4e\u5730\u5740 \u5c0f\u7aef\u65b9\u5f0f\uff1a\u9ad8\u5b57\u8282\u5b58\u50a8\u5728\u9ad8\u5730\u5740","title":"3.1 \u5185\u5b58\u4e2d\u5b57\u7684\u5b58\u50a8"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#32-ds","text":"\u53ea\u6709\u5728 debug \u4e2d\u6dfb\u52a0\u6307\u4ee4\u65f6 [address] \u624d\u4f1a\u88ab\u8ba4\u4e3a\u662f\u504f\u79fb\u5730\u5740\uff0c\u5728 masm \u4e2d [address] \u4f1a\u88ab\u8ba4\u4e3a\u5c31\u662f address \u8fd9\u4e2a\u6570 mov bx,1000H mov ds,bx ;mov\u4e0d\u80fd\u76f4\u63a5\u628a\u6570\u636e\u9001\u5165\u6bb5\u5bc4\u5b58\u5668 mov bx,0 mov al,[bx] ;\u504f\u79fb\u5730\u5740\u4e3a0\u7684\u5355\u5143(1000:0)\u7684\u5185\u5bb9\u9001\u5165\u53ca\u5bc4\u5b58\u5668\uff0c mov\u6307\u4ee4\u7684\u4f20\u9001\u529f\u80fd \u5c06\u6570\u636e\u76f4\u63a5\u9001\u5165\u5bc4\u5b58\u5668\uff0cmov \u4e0d\u80fd\u76f4\u63a5\u628a\u6570\u636e\u9001\u5165\u6bb5\u5bc4\u5b58\u5668 \u6570\u636e -> \u901a\u7528\u5bc4\u5b58\u5668 -> \u6bb5\u5bc4\u5b58\u5668 \u5c06\u4e00\u4e2a\u5bc4\u5b58\u5668\u4e2d\u7684\u5185\u5bb9\u9001\u5165\u53e6\u4e00\u4e2a\u5bc4\u5b58\u5668 \u5c06\u4e00\u4e2a\u5185\u5b58\u5355\u5143\u4e2d\u7684\u5185\u5bb9\u9001\u5165\u4e00\u4e2a\u5bc4\u5b58\u5668 \u683c\u5f0f mov \u5bc4\u5b58\u5668\u540d, \u5185\u5b58\u5355\u5143 [...]\u8868\u793a\u504f\u79fb\u5730\u5740\uff0c\u6bb5\u5730\u5740\u662f ds \u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u9001\u5165\u5185\u5b58\u5355\u5143 mov [bx],al","title":"3.2 DS"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#33-mov-add-sub","text":"\u6ce8\u610f \uff1a16\u4f4d\u6570\u7b2c\u4e00\u4e2a\u5b57\u662f\u5b57\u6bcd\u7684\u8981\u524d\u7f00\u52a0 0\uff0c \u5982 0FFFFH \u4e0b\u9762\u7684\u5bc4\u5b58\u5668\u90fd\u6307\u901a\u7528\u5bc4\u5b58\u5668 mov\u6307\u4ee4\u7684\u51e0\u79cd\u5f62\u5f0f, mov \u4e0d\u80fd\u76f4\u63a5\u7528\u6570\u636e\u4fee\u6539\u6bb5\u5bc4\u5b58\u5668\u7684\u503c mov \u5bc4\u5b58\u5668\uff0c\u6570\u636e mov \u5bc4\u5b58\u5668\uff0c\u5bc4\u5b58\u5668 mov \u5bc4\u5b58\u5668\uff0c\u5185\u5b58\u5355\u5143 mov \u5185\u5b58\u5355\u5143\uff0c\u5bc4\u5b58\u5668 mov \u6bb5\u5bc4\u5b58\u5668\uff0c\u5bc4\u5b58\u5668 mov \u5bc4\u5b58\u5668\uff0c\u6bb5\u5bc4\u5b58\u5668 sub/add \u4e0d\u80fd\u5bf9\u6bb5\u5bc4\u5b58\u5668\u64cd\u4f5c add \u5bc4\u5b58\u5668\uff0c\u6570\u636e add \u5bc4\u5b58\u5668\uff0c\u5bc4\u5b58\u5668 add \u5bc4\u5b58\u5668\uff0c\u5185\u5b58\u5355\u5143 add \u5185\u5b58\u5355\u5143\uff0c\u5bc4\u5b58\u5668","title":"3.3 mov / add / sub \u6307\u4ee4"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#34","text":"FILO push ax ;ax\u4e2d\u7684\u6570\u636e\u5165\u6808 pop ax ;\u6808\u9876\u6570\u636e\u53d6\u51fa\u7ed9ax \u6808\u9876\u7684\u6700\u5927\u53d8\u5316\u8303\u56f4\u4e3a 0-FFFFH","title":"3.4 \u6808"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#341-ss-sp","text":"SS\uff1a\u5b58\u653e\u6808\u8ba2\u7684\u6bb5\u5730\u5740 SP\uff1a\u5b58\u653e\u6808\u8ba2\u7684\u504f\u79fb\u5730\u5740 push ax\u65f6\uff0c 1.sp=sp-2 \uff08\u6808\u5e95\u7684\u5730\u5740\u6bd4\u6808\u9876\u9ad8\uff09 2.\u5c06ax\u4e2d\u7684\u5185\u5bb9\u9001\u5165\u5230ss:sp\u6307\u5411\u7684\u5185\u5b58\u5355\u5143 \u6267\u884cpop ax\u65f6 1.\u5c06ss:sp\u6307\u5411\u7684\u5185\u5b58\u5355\u5143\u7684\u5185\u5bb9\u9001\u5165\u5230ax\u4e2d \u200b \u6ce8\u610f\uff1a\u8fd9\u91cc\u53d6\u51fa\u7684\u5185\u5bb9\u5728\u5185\u5b58\u4e2d\u8fd8\u662f\u5b58\u5728\u7684\uff0c\u5e76\u6ca1\u6709\u88ab\u91cd\u7f6e\uff0c\u4e0b\u4e00\u8f6epush\u4f1a\u8986\u76d6 2.sp=sp+2 \u6808\u7a7a\u65f6\uff0csp\u6307\u5411\u6808\u5e95\u7684\u4e0b\u4e00\u4e2a\u5355\u5143 8086cpu\u4e0d\u4fdd\u8bc1\u5bf9\u6808\u7684\u64cd\u4f5c\u4e0d\u4f1a\u8d8a\u754c","title":"3.4.1 SS / SP"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#342-pop-push","text":"\u683c\u5f0f\uff1a pop / push \u5bc4\u5b58\u5668 pop / push \u5185\u5b58\u5355\u5143 ;eg push [0] pop [2] ;\u5c0610000H-1000FH\u8fd9\u6bb5\u7a7a\u95f4\u4f5c\u4e3a\u6808\u7a7a\u95f4 mov ax,1000 mov ss,ax mov sp,0010H ;\u6808\u8ba2\u7684\u5730\u5740\u5927,\u6307\u5411\u6808\u5e95\u7684\u4e0b\u4e00\u4e2a\u7a7a\u95f4\u5355\u5143\u7684\u5730\u5740 push ax push bx push ds","title":"3.4.2 pop / push"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#343","text":"sub ax,ax mov ax,0 xor ax,ax ;\u5f02\u6216","title":"3.4.3 \u5bc4\u5b58\u5668\u7f6e\u96f6\u7684\u65b9\u6cd5"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#4","text":"\u6e90\u7a0b\u5e8f\u7531 \u6c47\u7f16\u6307\u4ee4+\u4f2a\u6307\u4ee4+\u5b8f\u6307\u4ee4 \u7ec4\u6210 \u200b \u4f2a\u6307\u4ee4\uff1a\u7f16\u8bd1\u5668\u5904\u7406 \u200b \u6c47\u7f16\u6307\u4ee4\uff1a\u7f16\u8bd1\u4e3a\u673a\u5668\u7801 \u4f2a\u6307\u4ee4 \u200b 1.\u6ca1\u6709\u5bf9\u5e94\u7684\u673a\u5668\u7801\u7684\u6307\u4ee4\uff0c\u4e0d\u80fd\u7531CPU\u76f4\u63a5\u6267\u884c \u200b 2.\u4f2a\u6307\u4ee4\u662f\u7531\u7f16\u8bd1\u5668\u6765\u6267\u884c\u7684\u6307\u4ee4\uff0c\u7f16\u8bd1\u5668\u6839\u636e\u4f2a\u6307\u4ee4\u6765\u8fdb\u884c\u76f8\u5173\u7684\u7f16\u8bd1\u5de5\u4f5c","title":"4 \u7b2c\u4e00\u4e2a\u6c47\u7f16\u7a0b\u5e8f"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#41-segment-ends","text":"segment\u548cends\u662f\u4e00\u5bf9\u6210\u5bf9\u4f7f\u7528\u7684\u4f2a\u6307\u4ee4 segment\u548cends\u7684\u529f\u80fd\u662f\u5b9a\u4e49\u4e00\u4e2a\u6bb5 \u200b segment\uff1a\u8bf4\u660e\u4e00\u4e2a\u6bb5\u5f00\u59cb \u200b ends\uff1a\u8bf4\u660e\u4e00\u4e2a\u6bb5\u7ed3\u675f \u4e00\u4e2a\u6bb5\u5fc5\u987b\u6709\u4e00\u4e2a\u540d\u79f0\u6765\u6807\u8bc6\uff0c\u4f7f\u7528\u683c\u5f0f\u4e3a \u200b \u6bb5\u540d segment \u200b \u6bb5\u540d ends","title":"4.1 segment / ends"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#42-end","text":"\u7ed3\u675f\u5bf9\u7a0b\u5e8f\u7684\u7f16\u8bd1 \u7ed3\u5c3e\u52a0\u4e0a","title":"4.2 end"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#43-assume","text":"\u5047\u8bbe\u67d0\u4e00\u6bb5\u5bc4\u5b58\u5668\u548c\u7a0b\u5e8f\u4e2d\u67d0\u4e00\u4e2a\u7528 segment/ends \u5b9a\u4e49\u7684\u6bb5\u76f8\u5173\u8054 assume cs:codesg codesg segment ... codesg ends end","title":"4.3 assume"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#44","text":"DOS\u4e2d\u7684\u7a0b\u5e8f\u8fd0\u884c \u200b 1.DOS\u662f\u4e00\u4e2a\u5355\u4efb\u52a1\u64cd\u4f5c\u7cfb\u7edf \u200b 2.\u4e00\u4e2a\u7a0b\u5e8f\u7ed3\u675f\u540e\uff0c\u5c06CPU\u7684\u63a7\u5236\u6743\u4ea4\u8fd8\u7ed9\u662f\u4ed6\u5f97\u4ee5\u8fd0\u884c\u7684\u7a0b\u5e8f \u200b \u6211\u4eec\u79f0\u8fd9\u4e2a\u8fc7\u7a0b\u4e3a\uff1a\u7a0b\u5e8f\u8fd4\u56de assembly mov ax\uff0c4c00H int 21H ;interrupt debug\u4e2d\u8981\u7528p\u547d\u4ee4\u6267\u884c \u76ee\u7684 \u76f8\u5173\u6307\u4ee4 \u6307\u4ee4\u6027\u8d28 \u6307\u4ee4\u6267\u884c\u8005 \u6bb5\u7ed3\u675f ends \u4f2a\u6307\u4ee4 \u7f16\u8bd1\u5668 \u7a0b\u5e8f\u7ed3\u675f end \u4f2a\u6307\u4ee4 \u7f16\u8bd1\u5668 \u7a0b\u5e8f\u8fd4\u56de \u57284.4 \u6c47\u7f16\u6307\u4ee4 CPU","title":"4.4 \u7a0b\u5e8f\u8fd4\u56de"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#45-exe","text":"\u627e\u5230\u4e00\u6bb5\u8d77\u59cb\u5730\u5740\u4e3a SA\uff1a0000\u7684\u8db3\u591f\u7684\u7a7a\u95f4 \u5728\u8d77\u59cb\u7684256\u4e2a\u5b57\u8282\u4e2d\u521b\u5efaPSP\uff08DOS\u5229\u7528PSP\u548c\u52a0\u8f7d\u7a0b\u5e8f\u8fdb\u884c\u901a\u4fe1\uff09 \u5728PSP\u4e4b\u540e\uff0c\u5373\u8d77\u59cb\u5730\u5740\u4e3a SA+10H\uff1a0000\u5f00\u59cb\u5b58\u653e\u7a0b\u5e8f","title":"4.5 EXE\u7a0b\u5e8f\u52a0\u8f7d\u8fc7\u7a0b"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#5-bx-loop","text":"","title":"5 [bx] \u548c loop  \u6307\u4ee4"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#51-bx","text":"mov bx,0 mov ax,[bx] ;masm\u4e2d\u4e0d\u80fd\u76f4\u63a5 mov ax,[0]\uff0cdebug\u4e2d\u53ef\u4ee5 ;masm\u9700\u8981 mov ax,ds:[0] mov ax,ds:[1] mov ax,ds:[2]","title":"5.1 [bx]"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#52","text":"(ax) \u8868\u793a ax \u4e2d\u7684\u5185\u5bb9 (ax) = 0010H (21000H) = 0010H (ax) = ((ds)*16+2) ;mov ax,[2] ((ds)*16+2) = (ax) ;mov [2],ax (ax) = (ax)+2 ;add ax,2 (ax) = (ax)+(bx) ;add ax,bx (sp) = (sp)-2 ;push ax ((ss)*16+(sp)) = (ax) (ax) = ((ss)*16+(sp)) ;pop ax (sp) = (sp)+2","title":"5.2 \u63cf\u8ff0\u6027\u7b26\u53f7 ( )"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#53-loop","text":"\u683c\u5f0f\uff1a loop \u6807\u53f7 CPU\u6267\u884cloop\u6307\u4ee4\u7684\u65f6\u5019\uff0c\u8981\u8fdb\u884c\u4e24\u6b65\u64cd\u4f5c \u200b 1.(cx)=(cx)-1; \u200b 2.\u5224\u65adcx\u4e2d\u7684\u503c\uff0c\u82e5\u4e0d\u4e3a\u96f6\uff0c\u5219\u8f6c\u81f3\u6807\u53f7\u5904\u6267\u884c\u7a0b\u5e8f\u3002\u82e5\u4e3a\u96f6\uff0c \u5219\u5411\u4e0b\u6267\u884c\u3002 \u901a\u5e38\uff0cloop\u6307\u4ee4\u5b9e\u73b0\u5faa\u73af\uff0ccx\u4e2d\u5b58\u653e\u5faa\u73af\u7684\u6b21\u6570","title":"5.3 loop"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#54","text":"mov ax,ds:[0] ;ds\u5c31\u662f\u6bb5\u524d\u7f00,\u4e5f\u53ef\u4ee5\u7528cs/ss/es","title":"5.4 \u6bb5\u524d\u7f00"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#55","text":"8086\u4e2d\uff0c\u968f\u610f\u5411\u4e00\u6bb5\u5185\u5b58\u7a7a\u95f4\u5199\u5165\u5185\u5bb9\u662f\u5f88\u5371\u9669\u7684 \u56e0\u4e3a\u8fd9\u6bb5\u7a7a\u95f4\u4e2d\u53ef\u80fd\u5b58\u653e\u7740\u91cd\u8981\u7684\u7cfb\u7edf\u6570\u636e\u6216\u4ee3\u7801 \u5728\u4e00\u822c\u7684PC\u673a\u4e2d\uff0cDOS\u65b9\u5f0f\u4e0b\uff0cDOS\u548c\u5176\u4ed6\u5408\u6cd5\u7684\u7a0b\u5e8f\u4e00\u822c\u90fd\u4e0d\u4f1a\u4f7f \u7528\u30100:200~0:2FF\u3011","title":"5.5 \u4e00\u6bb5\u5b89\u5168\u7684\u7a7a\u95f4"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#6","text":"","title":"6 \u5305\u542b\u591a\u4e2a\u6bb5\u7684\u7a0b\u5e8f"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#61","text":"dw\uff1adefine word db\uff1adefine byte dd\uff1adefine dword","title":"6.1 \u5728\u4ee3\u7801\u6bb5\u4e2d\u4f7f\u7528\u6570\u636e"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#62","text":"assume cs:codesg codesg segment dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h dw 0,0,0,0,0,0,0,0,0,0 ;\u8fd9\u6bb5\u7a7a\u95f4\u5f53\u4f5c\u6808 start: ... codesg ends end start","title":"6.2 \u5728\u4ee3\u7801\u6bb5\u4e2d\u4f7f\u7528\u6808"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#63","text":"```assembly assume cs:code, ds:data, ss:stack data segment ... data ends stack segment ... stack ends code segment start:... mov ax, data mov ds, ax code ends end start ``` \u4e09\u4e2a\u4e0d\u540c\u7684\u6bb5\u7684\u6bb5\u57fa\u5730\u5740\u53d6\u51b3\u4e8e\u4ee3\u7801\u4e2d\u5199\u7684\u5148\u540e \u5148\u5199\u7684\u6bb5\u7684\u6bb5\u57fa\u5730\u5740\u5c0f\uff0c\u540e\u5199\u7684\u6bb5\u7684\u6bb5\u57fa\u5730\u5740\u5927","title":"6.3 \u5c06\u6570\u636e/\u4ee3\u7801/\u6808/\u653e\u5165\u4e0d\u540c\u7684\u6bb5"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#7","text":"","title":"7 \u66f4\u7075\u6d3b\u5730\u5b9a\u4f4d\u5185\u5b58\u5730\u5740"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#71-and-or","text":"and\uff1a\u903b\u8f91\u4e0e\uff0c\u6307\u5b9a\u4f4d\u7f6e0 or\uff1a\u903b\u8f91\u6216\uff0c\u6307\u5b9a\u4f4d\u7f6e1 ;eg mov al,01100011b and al,00111011b ;\u6267\u884c\u540e al = 00100011b","title":"7.1 and / or"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#72","text":"db 'unIX' mov al,'a'","title":"7.2 \u4ee5\u5b57\u7b26\u7684\u5f62\u5f0f\u7ed9\u51fa\u6570\u636e"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#73","text":"\u5c0f\u5199\u5b57\u6bcd = \u5927\u5199\u5b57\u6bcd+32 \u5c0f\u5199\u5b57\u6bcd = \u5927\u5199\u5b57\u6bcd+20H \u5927\u5199\u5b57\u6bcd\u4ece41H\u5f00\u59cb\uff0c\u5c0f\u5199\u5b57\u6bcd\u4ece61H\u5f00\u59cb \u5927\u5199 \u4e8c\u8fdb\u5236 \u5c0f\u5199 \u4e8c\u8fdb\u5236 A 01000001 a 01100001 B 01000010 b 01100010 C 01000011 c 01100011 D 01000100 d 01100100 ;\u5927\u5c0f\u5199\u8f6c\u6362 ;\u8f6c\u5c0f\u5199 or al,00100000b ;0x20 ; \u8f6c\u5927\u5199 and al,11011111b ;0xdf","title":"7.3 \u5927\u5c0f\u5199\u8f6c\u6362\u95ee\u9898"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#74-bxidata","text":"[bx+idata] \u8868\u793a\u4e00\u4e2a\u5185\u5b58\u5355\u5143\uff0c\u5b83\u7684\u504f\u79fb\u5730\u5740\u662f (bx)+idata mov ax,[bx+200] ;\u4e5f\u53ef\u4ee5\u5199\u6210\u5982\u4e0b\u683c\u5f0f mov ax,200[bx] mov ax,[bx].200 ;2\u4e2a\u957f\u5ea6\u76f8\u540c\u7684\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4ea7\u8f6c\u5927\u5199\uff0c\u7b2c\u4e8c\u4e2a\u8f6c\u5c0f\u5199 data segment db 'BaSiC' db 'MinIX' data ends ;\u53ef\u4ee5\u7528 bx \u548c bx+5 \u5206\u522b\u8868\u793a2\u6bb5\u6570\u636e\u7684\u8d77\u59cb\u5730\u5740\uff0c\u518d\u81ea\u52a0bx\u904d\u5386 mov ax,data mov ds,ax mov bx,0 mov cx,5 s: mov al,[bx] and al,11011111b mov [bx],al mov al,[bx+5] ans al,00100000b mov [bx+5],al inc bx loop s","title":"7.4 [bx+idata]"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#75-si-di","text":"SI / DI \u9664\u4e86 \u4e0d\u80fd\u5206\u4e3a2\u4e2a8\u4f4d\u7684\u5bc4\u5b58\u5668 \u5916\uff0c\u4e0e BX \u5b8c\u5168\u76f8\u540c source index/ destination index mov ax,[bx+si] ;\u53ef\u4ee5\u5199\u6210\u5982\u4e0b\u683c\u5f0f mov ax,[bx][si] mov ax,[bx+si+200] ;\u4e5f\u53ef\u4ee5\u5199\u6210 mov ax,200[bx][si] mov ax,[bx].200[si] ;\u7ed3\u6784\u4f53\u4e2d\u7684\u6570\u7ec4 mov ax,[bx][si].200 ## 7.6 \u53cc\u5c42\u5faa\u73af loop \u53ea\u80fd\u4e0e cx \u5173\u8054 \u6240\u4ee5\u5728\u6267\u884c\u5185\u5c42\u5faa\u73af\u4e4b\u524d\u628a cx \u7684\u503c\u4fdd\u5b58\u8d77\u6765\uff0c\u5185\u5c42\u5faa\u73af\u7ed3\u675f\u540e\u518d\u628a cx \u7684\u503c\u8d4b\u503c\u56de\u53bb\uff0c\u7528\u5185\u5b58\u4e2d\u7684\u6808\u6765\u4fdd\u5b58 ;eg\u901a\u8fc7\u591a\u5c42\u5faa\u73af\u5c06\u5b57\u7b26\u4e32\u5c0f\u5199\u8f6c\u5927\u5199 assume ds:data,ss:stack,cs:code data segment db 'aaaaaa' db 'bbbbbb' db 'cccccc' data ends stack segment dw 0,0,0,0,0,0,0,0 stack ends code segment start: mov ax,stack mov ss,ax mov sp,16 ;16\u4e2a\u5b57\u8282\u7684\u6808\u7a7a\u95f4 mov ax,data mov ds,ax mov bx,0 ;bx\u662f\u6bcf\u884c\u9996\u5143\u7d20\u7684\u5730\u5740 mov cx,3 ;\u6700\u5916\u5c42\u5faa\u73af s0: push cx ;\u5165\u6808 mov si,0 ;si\u662f\u5bf9\u5217\u8fdb\u884c\u904d\u5386 mov cx,6 ;\u5185\u5c42\u5faa\u73af s1: mov al,[bx+si] and al,11011111b mov [bx+si],al inc si loop s1 add si,6 pop cx loop s0 mov ax,4c00h int 21h code ends end start","title":"7.5 SI / DI"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#8","text":"\u5b9a\u4e49\u63cf\u8ff0\u6027\u7b26\u53f7\uff1a reg / sreg","title":"8 \u6570\u636e\u5904\u7406\u7684\u4e24\u4e2a\u57fa\u672c\u95ee\u9898"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#81-bp","text":"8086\u4e2d\u53ea\u6709 bx / si / di / bp \u53ef\u4ee5 \u7528\u5728 [ ] \u4e2d\u8fdb\u884c\u5bfb\u5740 \u518d [ ] \u4e2d\u53ea\u6709 \u56db\u79cd\u7ec4\u5408 \u53ef\u4ee5\u51fa\u73b0 (\u786c\u4ef6\u539f\u56e0): bx \u548c si\uff0cbx \u548c di\uff0cbp \u548c si\uff0cbp \u548c di \u5728 [ ] \u4e2d\u4f7f\u7528 bp\uff0c\u4e14\u6ca1\u6709\u663e\u6027\u7684\u7ed9\u51fa\u6bb5\u5730\u5740\u65f6\uff0c\u6bb5\u5730\u5740\u9ed8\u8ba4\u662f ss","title":"8.1 bp"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#82","text":"\u7acb\u5373\u6570 idata \u5bc4\u5b58\u5668 \u5185\u5b58\uff0c\u6bb5\u5730\u5740(SA) + \u504f\u79fb\u5730\u5740(EA) ## 8.3 \u6307\u4ee4\u5904\u7406\u7684\u6570\u636e\u6709\u591a\u957f\uff1f \u901a\u8fc7\u5bc4\u5b58\u5668\u540d\u786e\u5b9a\u5904\u7406\u6570\u636e\u7684\u957f\u5ea6 \u5728\u6ca1\u6709\u5bc4\u5b58\u5668\u540d\u7684\u60c5\u51b5\u4e0b\uff0c\u7528 X ptr \u6307\u957f\u5ea6\uff0c X \u4e3a word / byte \u5176\u4ed6\uff0c\u6bd4\u5982 push \u53ea\u5bf9\u5b57\u64cd\u4f5c","title":"8.2 \u6c47\u7f16\u8bed\u8a00\u4e2d\u6570\u636e\u4f4d\u7f6e\u7684\u8868\u8fbe"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#84-div","text":"\u9664\u6cd5\u6307\u4ee4 \u9664\u6570\uff1a8\u4f4d\u6216\u800516\u4f4d\uff0c\u5728\u5bc4\u5b58\u5668\u6216\u8005\u5185\u5b58\u5355\u5143\u4e2d \u88ab\u9664\u6570\uff1a\uff08\u9ed8\u8ba4\uff09\u653e\u5728 AX \u6216 DX+AX\u4e2d \u9664\u6570 \u88ab\u9664\u6570 8\u4f4d 16\u4f4d(AX) 16\u4f4d 32\u4f4d(DX+AX) \u7ed3\u679c\uff1a \u8fd0\u7b97 8\u4f4d\u9664\u6570 16\u4f4d\u9664\u6570 \u5546 AL AX \u4f59\u6570 AH DX div\u6307\u4ee4\u683c\u5f0f\uff1a div reg div \u5185\u5b58\u5355\u5143 ;eg div byte ptr ds:[0] ;\u542b\u4e49: (al) = (ax) / ((ds)*16+0) \u7684\u5546 ; (ah) = (ax) / ((ds)*16+0) \u7684\u4f59\u6570 div word ptr es:[0] ;\u542b\u4e49: (ax) = ((dx)*10000H+(ax)) / (..) \u7684\u5546 ; (dx) = ...\u7684\u4f59\u6570","title":"8.4 div"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#85-dup","text":"\u64cd\u4f5c\u7b26\uff0c\u7531\u7f16\u8bd1\u5668\u4e66\u522b\u5904\u7406\u7684\u7b26\u53f7\uff0c\u7528\u6765\u5bf9\u6570\u636e\u8fdb\u884c\u91cd\u590d \u683c\u5f0f\uff1a db \u91cd\u590d\u6b21\u6570 dup\uff08\u9700\u8981\u91cd\u590d\u7684\u5b57\u8282\u578b\u6570\u636e\uff09\uff0cdw\uff0cdd \u540c db 3 dup(0) ;3\u4e2a0 dup 3 duo(0,1,2) ;3\u4e2a 0,1,2","title":"8.5 dup"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#9","text":"\u76f8\u5f53\u4e8eC\u4e2d\u7684 goto 8086 CPU\u4e2d\u7684\u8f6c\u79fb\u6307\u4ee4\u7684\u5206\u7c7b \u65e0\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\uff08\u5982 jmp\uff09 \u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4 \u5faa\u73af\u6307\u4ee4\uff08\u5982 loop\uff09 \u8fc7\u7a0b\uff08\u51fd\u6570\uff09 \u4e2d\u65ad","title":"9 \u8f6c\u79fb\u6307\u4ee4\u7684\u539f\u7406"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#91-offset","text":"\u529f\u80fd\uff1a\u53d6\u5f97\u6807\u53f7\u7684\u504f\u79fb\u5730\u5740","title":"9.1 offset"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#92-jmp","text":"jmp \u53ef\u4ee5\u53ea\u4fee\u6539 ip\uff0c\u4e5f\u53ef\u4ee5\u540c\u65f6\u4fee\u6539 cs \u548c ip jmp \u6307\u4ee4\u8981\u7ed9\u51fa\u4e24\u79cd\u4fe1\u606f \u8f6c\u79fb\u7684\u76ee\u7684\u5730\u5740 \u8f6c\u79fb\u7684\u8ddd\u79bb\uff08\u6bb5\u95f4\u8f6c\u79fb\uff0c\u6bb5\u5185\u77ed\u8f6c\u79fb\uff0c\u6bb5\u5185\u8fd1\u8f6c\u79fb\uff09","title":"9.2 jmp"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#921-jmp","text":"jmp short \u6807\u53f7 \u5b9e\u73b0\u7684\u662f \u6bb5\u5185\u77ed\u8f6c\u79fb \uff0c\u5b83\u5bf9ip\u7684\u4fee\u6539\u8303\u56f4\u4e3a-128~127 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u5411\u524d\u8f6c\u79fb\u65f6\u53ef\u4ee5\u6700\u591a\u8d8a\u8fc7128\u4e2a\u5b57\u8282\uff0c\u5411\u540e\u8f6c\u79fb\u53ef\u4ee5\u6700\u591a\u8d8a\u8fc7127\u4e2a\u5b57\u8282 CPU\u4e0d\u9700\u8981\u76ee\u7684\u5730\u5740\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5bf9ip\u7684\u4fee\u6539 jmp short s \u6307\u4ee4\u7684\u8bfb\u53d6\u548c\u6267\u884c\u8fc7\u7a0b\uff1a \u6bd4\u5982 jmp short s \u7684\u673a\u5668\u7801\u662f EB03 EB03 \u8fdb\u5165\u6307\u4ee4\u7f13\u51b2\u5668 ip += 2\uff0ccs\uff1aip\u6307\u5411\u4e0b\u4e00\u6761\u6307\u4ee4 \u7136\u540e ip += 3\uff0c\u8f6c\u79fb\u5230 s \u5904 jmp near ptr \u6807\u53f7 \u5b9e\u73b0 \u6bb5\u5185\u8fd1\u8f6c\u79fb \uff0cip = ip+16\u4f4d\u4f4d\u79fb\uff0c\u8303\u56f4\u662f -32769~32769","title":"9.2.1 \u4f9d\u636e\u4f4d\u79fb\u8fdb\u884c\u8f6c\u79fb\u7684 jmp \u6307\u4ee4"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#922-jmp","text":"jmp far ptr \u6807\u53f7 \u5b9e\u73b0\u7684\u662f \u6bb5\u95f4\u8f6c\u79fb \uff0c\u53c8\u79f0\u4e3a\u8fdc\u8f6c\u79fb(\u6bb5\u95f4\u8f6c\u79fb\u5e76\u4e0d\u4ee3\u8868\u5728\u4e0d\u540c\u7684\u6bb5\u4e2d\uff0c\u53ea\u662f\u8ddd\u79bb\u5f88\u8fdc) jmp far ptr s","title":"9.2.2 \u8f6c\u79fb\u7684\u76ee\u7684\u5730\u5740\u5728\u6307\u4ee4\u4e2d\u7684 jmp \u6307\u4ee4"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#923-jmp","text":"jmp 16\u4f4d\u5bc4\u5b58\u5668 \u529f\u80fd\uff1aip = \uff0816\u4f4d\u5bc4\u5b58\u5668\uff09","title":"9.2.3 \u8f6c\u79fb\u5730\u5740\u5728\u5bc4\u5b58\u5668\u4e2d\u7684 jmp \u6307\u4ee4"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#924-jmp","text":"jmp word ptr \u5185\u5b58\u5355\u5143\u5730\u5740\uff08\u6bb5\u5185\u8f6c\u79fb\uff09 \u529f\u80fd\uff1a\u5185\u5b58\u5355\u5143\u5730\u5740\u5f00\u59cb\u5904\u5b58\u653e\u7684\u5b57\u662f\u8f6c\u79fb\u76ee\u7684\u7684\u504f\u79fb\u5730\u5740 mov ax,0123H mov ds:[0],ax jmp word ptr ds:[0] ;jmp ax jmp dword ptr \u5185\u5b58\u5355\u5143\u5730\u5740\uff08\u6bb5\u95f4\u8f6c\u79fb\uff09 \u529f\u80fd\uff1a\u5185\u5b58\u5355\u5143\u5730\u5740\u5f00\u59cb\u5904\u5b58\u653e\u76842\u4e2a\u5b57\u4e2d\uff0c\u9ad8\u5730\u5740\u662f\u8f6c\u79fb\u76ee\u7684\u7684\u6bb5\u5730\u5740\uff0c\u4f4e\u5730\u5740\u662f\u8f6c\u79fb\u76ee\u6807\u7684\u504f\u79fb\u5730\u5740","title":"9.2.4 \u8f6c\u79fb\u5730\u5740\u5728\u5185\u5b58\u4e2d\u7684 jmp \u6307\u4ee4"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#93-jcxz","text":"\u6709\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\uff08\u6240\u6709\u7684\u6709\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\u90fd\u662f\u77ed\u8f6c\u79fb\uff1aloop\uff09 ip \u7684\u4fee\u6539\u8303\u56f4\u662f -127-128 \u683c\u5f0f\uff1ajcxz \u6807\u53f7\uff08\u5982\u679c (cx) = 0\uff0c\u5219\u8df3\u8f6c\u5230\u6807\u53f7\u5904\u6267\u884c\uff09 \u4ecejcxz\u7684\u529f\u80fd\u53ef\u4ee5\u770b\u51fa\uff0c\u5b83\u76f8\u5f53\u4e8e if ( ( cx ) == 0 ) jmp short \u6807\u53f7","title":"9.3 jcxz"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#94-loop","text":"loop\u6307\u4ee4\u4e3a\u5faa\u73af\u6307\u4ee4","title":"9.4 loop"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#95","text":"assume cs:code code segment mov ax,4c00h int 21h start: mov ax,0 s: nop nop mov di,offset s mov si,offset s2 mov ax,cs:[si] mov cs:[di],ax s0: jmp short s s1: mov ax,0 int 21h mov ax,0 s2: jmp short s1 nop code ends \u6700\u7ec8\u8fd8\u662f\u4f1a\u8df3\u8f6c\u5230\u4ee3\u7801\u6bb5\u7684\u4e00\u5f00\u59cb\u7684\u7ed3\u675f\u7684\u4ee3\u7801\uff0c\u56e0\u4e3a s2 \u8df3\u8f6c\u7684\u4f4d\u79fb\uff0c\u800c\u4e0d\u662f s1 \u7684\u5177\u4f53\u5730\u5740","title":"9.5 \u5b9e\u9a8c\u516b"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#96","text":"\u5728\u5c4f\u5e55\u4e0a\u5f69\u8272\u663e\u793a \u2018welcome to masm!' \u5177\u4f53\u770b\u6559\u6750 \u5c5e\u6027\u5b57\u8282\u683c\u5f0f\uff1a \u4f4d\u6570 \u6548\u679c 0 \u95ea\u70c1BL 1 \u80cc\u666fR 2 \u80cc\u666fG 3 \u80cc\u666fB 4 \u9ad8\u4eaeI 5 \u524d\u666fR 6 \u524d\u666fG 7 \u524d\u666fB 2.jmp\u6307\u4ee4\u8981\u7ed9\u51fa\u4e24\u79cd\u4fe1\u606f\uff1a 1.\u8f6c\u79fb\u7684\u76ee\u7684\u5730\u5740 2.\u8f6c\u79fb\u7684\u8ddd\u79bb\uff08\u6bb5\u95f4\u8f6c\u79fb\u3001\u6bb5\u5185\u77ed\u8f6c\u79fb\u3001\u6bb5\u5185\u8fd1\u8f6c\u79fb\uff09 9.3 \u4f9d\u636e\u4f4d\u79fb\u8fdb\u884c\u8f6c\u79fb\u7684jmp\u6307\u4ee4 1.jmp short \u6807\u53f7\u3010\u8f6c\u5230\u6807\u53f7\u5904\u6267\u884c\u6307\u4ee4,\u6bb5\u5185\u77ed\u8f6c\u79fb\u3011 \u6b64\u683c\u5f0f\u5b9e\u73b0\u7684\u662f\uff1a\u6bb5\u5185\u77ed\u8f6c\u79fb\uff0c\u5b83\u5bf9ip\u7684\u4fee\u6539\u8303\u56f4\u4e3a-128~127 2.\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u5411\u524d\u8f6c\u79fb\u65f6\u53ef\u4ee5\u6700\u591a\u8d8a\u8fc7128\u4e2a\u5b57\u8282\uff0c\u8d1f\u6570\u4f7f\u7528\u8865\u7801\u8868\u793a \u5411\u540e\u8f6c\u79fb\u53ef\u4ee5\u6700\u591a\u8d8a\u8fc7127\u4e2a\u5b57\u8282 3.CPU\u4e0d\u9700\u8981\u76ee\u7684\u5730\u5740\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5bf9ip\u7684\u4fee\u6539 jmp\u6307\u4ee4\u7684\u673a\u5668\u7801\u4e2d\u4e0d\u5305\u542b\u76ee\u7684\u5730\u5740\uff0c\u4f46\u662f\u53ef\u4ee5\u5b9e\u73b0\u8df3\u8f6c \u5b9e\u73b0\u7684\u65b9\u5f0f\uff0c\u662f\u5728\u539f\u5730\u5740\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u4e00\u4e2a\u504f\u79fb\u91cf\uff0c\u5373\u4f4d\u79fb 4.\u8fd8\u6709\u4e00\u79cd\u548c\u6307\u4ee4\u201cjmp short \u6807\u53f7\u201d\u529f\u80fd\u7c7b\u4f3c\u7684\u6307\u4ee4\u683c\u5f0f\uff1a jmp near ptr \u6807\u53f7\uff0c\u5b83\u5b9e\u73b0\u7684\u662f\u6bb5\u5185\u8fd1\u8f6c\u79fb \u529f\u80fd\u4e3a\uff1a(ip)=(ip)+16\u4f4d\u4f4d\u79fb jmp short \u6807\u53f7\u662f8\u4f4d\u7684\u4f4d\u79fb\uff0c\u800cjmp near ptr \u6807\u53f7\u662f16\u4f4d\u4f4d\u79fb 9.4 \u8f6c\u79fb\u7684\u76ee\u7684\u5730\u5740\u5728\u6307\u4ee4\u4e2d\u7684jmp\u6307\u4ee4 \u524d\u9762\u8bb2\u7684jmp\u6307\u4ee4\uff0c\u5176\u5bf9\u5e94\u7684\u673a\u5668\u7801\u4e2d\u5e76\u6ca1\u6709\u8f6c\u79fb\u7684\u76ee\u7684\u5730\u5740\uff0c\u800c\u662f\u76f8\u5bf9\u4e8e\u5f53\u524dip\u7684\u8f6c\u79fb\u4f4d\u79fb 1.\u6307\u4ee4\u201cjmp far ptr \u6807\u53f7\u201d \u5b9e\u73b0\u7684\u662f\u6bb5\u95f4\u8f6c\u79fb\uff0c\u53c8\u79f0\u4e3a\u8fdc\u8f6c\u79fb,\u8fd9\u65f6\u673a\u5668\u7801\u4e2d\u5e94\u8be5\u660e\u786e\u7ed9\u51fa\u3010\u6bb5\u5730\u5740\u3011 2.\u6307\u4ee4\u201cjmp far ptr \u6807\u53f7\u201d\u529f\u80fd\u5982\u4e0b\uff1a (CS)=\u6807\u53f7\u6240\u5728\u6bb5\u7684\u6bb5\u5730\u5740 (IP)=\u6807\u53f7\u6240\u5728\u6bb5\u4e2d\u7684\u504f\u79fb\u5730\u5740 far ptr \u6307\u660e\u4e86\u6307\u4ee4\u7528\u6807\u53f7\u7684\u6bb5\u5730\u5740\u548c\u504f\u79fb\u5730\u5740\u4fee\u6539cs\u548cip 9.5 \u8f6c\u79fb\u5730\u5740\u5728\u5bc4\u5b58\u5668\u4e2d\u7684jmp\u6307\u4ee4 \u6307\u4ee4\u683c\u5f0f\uff1ajmp 16\u4f4d\u5bc4\u5b58\u5668 \u529f\u80fd\uff1a\u4fee\u6539ip\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\uff0c\u628a16\u4f4d\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u9001\u5165\u5230ip\u5bc4\u5b58\u5668\u4e2d 9.6 \u8f6c\u79fb\u5730\u5740\u5728\u5185\u5b58\u4e2d\u7684jmp\u6307\u4ee4 \u8f6c\u79fb\u5730\u5740\u5728\u5185\u5b58\u4e2d\u7684jmp\u6307\u4ee4\u6709\u4e24\u79cd\u683c\u5f0f\uff1a 1.jmp word ptr \u5185\u5b58\u5355\u5143\u5730\u5740\uff08\u6bb5\u5185\u8f6c\u79fb\uff09 \u529f\u80fd\uff1a\u5c06\u5185\u5b58\u4e2d\u7684\u90a3\u4e2a\u5b57\u89c6\u4e3a\u4e00\u4e2a\u504f\u79fb\u5730\u5740\uff0c\u7136\u540e\u8df3\u8f6c\u5230\u90a3\u4e2a\u504f\u79fb\u5730\u5740 \u4e0e\u3010jmp \u5bc4\u5b58\u5668\u3011\u529f\u80fd\u76f8\u4f3c \u5185\u5b58\u5355\u5143\u5730\u5740\u53ef\u7528\u5bfb\u5740\u65b9\u5f0f\u7684\u4efb\u610f\u683c\u5f0f\u7ed9\u51fa 2.jmp dword ptr \u5185\u5b58\u5355\u5143\u5730\u5740\uff08\u6bb5\u95f4\u8f6c\u79fb\uff09 (ip)=(\u5185\u5b58\u5355\u5143\u5730\u5740) ;\u53cc\u5b57\u4e2d\u7684\u4f4e\u4f4d\u5b57\u662f\u7ed9ip\u7684 (cs)=(\u5185\u5b58\u5355\u5143\u5730\u5740+2) ;\u53cc\u5b57\u4e2d\u7684\u9ad8\u4f4d\u5b57\u662f\u7ed9cs\u7684 \u8ddf\u3010jmp \u6bb5\u5730\u5740:\u504f\u79fb\u5730\u5740\u3011\u529f\u80fd\u7c7b\u4f3c \u5185\u5b58\u5355\u5143\u5730\u5740\u53ef\u7528\u5bfb\u5740\u65b9\u5f0f\u7684\u4efb\u610f\u683c\u5f0f\u7ed9\u51fa **\u8865\u5145\uff1a\u4e0d\u80fd\u76f4\u63a5\u5411\u5185\u5b58\u5355\u5143\u4e2d\u52a0\u5165\u7acb\u5373\u6570 \u8981\u901a\u8fc7\u5bc4\u5b58\u5668\uff0c\u628a\u7acb\u5373\u6570\u52a0\u8fdb\u53bb 9.7 jcxz\u6307\u4ee4 1.\u6709\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\uff0c\u6240\u6709\u7684\u6709\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\u90fd\u662f\u77ed\u8f6c\u79fb \u5bf9\u5e94\u7684\u673a\u5668\u7801\u4e2d\u5305\u542b\u8f6c\u79fb\u7684\u4f4d\u79fb\uff0c\u800c\u4e0d\u662f\u76ee\u7684\u5730\u5740\u3002\u5bf9ip\u7684\u4fee\u6539\u8303\u56f4\u90fd\u4e3a\uff1a-128~127 **\u53e6\u4e00\u4e2a\u6709\u6761\u4ef6\u8df3\u8f6c\u6307\u4ee4\u3010loop\u6307\u4ee4\u3011 2.\u6307\u4ee4\u683c\u5f0f\uff1ajcxz \u6807\u53f7 \u5982\u679c\uff08cx\uff09=0\uff0c\u5219\u8df3\u8f6c\u5230\u6807\u53f7\u5904\u6267\u884c 3.jcxz \u6807\u53f7 \u6307\u4ee4\u7684\u64cd\u4f5c\uff1a 1.\u5f53(cx)=0\u65f6\uff0c(ip)=(ip)+8\u4f4d\u4f4d\u79fb 2.\u5f53(cx)!=0\u65f6\uff0c\u4ec0\u4e48\u4e5f\u4e0d\u505a\uff08\u7a0b\u5e8f\u7ee7\u7eed\u5411\u4e0b\u6267\u884c\uff09 9.8 loop\u6307\u4ee4 1.\u5faa\u73af\u6307\u4ee4\uff0c\u6240\u6709\u7684\u5faa\u73af\u6307\u4ee4\u90fd\u662f\u77ed\u8f6c\u79fb\uff0c\u5728\u5bf9\u5e94\u7684\u673a\u5668\u7801\u4e2d\u5305\u542b\u8f6c\u79fb\u7684\u4f4d\u79fb 2.\u6307\u4ee4\u683c\u5f0f\uff1aloop \u6807\u53f7 3.\u6307\u4ee4\u7684\u5185\u90e8\u64cd\u4f5c 1.cx=cx-1 2.\u5982\u679ccx!=0\uff0c(ip)=(ip)+8\u4f4d\u4f4d\u79fb\uff0c\u8df3\u8f6c 3.(cx)=0\uff0c\u4ec0\u4e48\u4e5f\u4e0d\u505a\uff0c\u7a0b\u5e8f\u5411\u4e0b\u6267\u884c cx\u7528\u6765\u63a7\u5236\u5faa\u73af\u7684\u6b21\u6570 9.9 \u6839\u636e\u4f4d\u79fb\u8fdb\u884c\u8f6c\u79fb\u7684\u610f\u4e49 1.\u6839\u636e\u4f4d\u79fb\u8fdb\u884c\u8f6c\u79fb\uff0c\u8fd9\u6837\u8bbe\u8ba1\uff0c\u65b9\u4fbf\u4e86\u7a0b\u5e8f\u6bb5\u5728\u5185\u5b58\u4e2d\u7684\u6d6e\u52a8\u88c5\u914d \u53ef\u4ee5\u5b9e\u73b0\u4ee3\u7801\u7684\u590d\u7528 2.\u5982\u679c\u5728\u673a\u5668\u7801\u4e2d\u76f4\u63a5\u7ed9\u51fa\u3010\u6bb5\u5730\u5740:\u504f\u79fb\u5730\u5740\u3011\uff0c \u8fd9\u6bb5\u7a0b\u5e8f\u5728\u5185\u5b58\u4e2d\u6362\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u4f1a\u8fd0\u884c\u4e0d\u6b63\u786e 3.\u6bb5\u5185\u8fd1\u8f6c\u79fb\u3001\u6bb5\u5185\u77ed\u8f6c\u79fb\u90fd\u662f\u6839\u636e\u4f4d\u79fb\u8fdb\u884c\u8f6c\u79fb\uff0c\u4e00\u5171\u6709\u56db\u79cd\u65b9\u5f0f 1.jmp short ptr \u6807\u53f7 2.jmp near ptr \u6807\u53f7 3.jcxz \u6807\u53f7 4.loop \u6807\u53f7 9.10 \u7f16\u8bd1\u5668\u5bf9\u8f6c\u79fb\u4f4d\u79fb\u8d85\u754c\u7684\u68c0\u6d4b \u6ce8\u610f\uff0c\u6839\u636e\u4f4d\u79fb\u8fdb\u884c\u8f6c\u79fb\u7684\u6307\u4ee4\uff0c\u4ed6\u4eec\u7684\u8f6c\u79fb\u8303\u56f4\u4f1a\u53d7\u5230\u9650\u5236 \u5982\u679c\u5728\u6e90\u7a0b\u5e8f\u4e2d\u51fa\u73b0\u4e86\u8f6c\u79fb\u8303\u56f4\u8d85\u754c\u7684\u95ee\u9898\uff0c\u5728\u7f16\u8bd1\u7684\u65f6\u5019\uff0c\u7f16\u8bd1\u5668\u5c06\u62a5\u9519 \u3010\u5b9e\u9a8c\u516b\u3001\u4e5d\u3011\u3010\u8fd9\u4e2a\u5b9e\u9a8c\u8981\u91cd\u70b9\u770b\u3011","title":"9.6 \u5b9e\u9a8c\u4e5d"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#10-callret","text":"call \u548c ret \u90fd\u662f\u8f6c\u79fb\u6307\u4ee4\uff0c\u4ed6\u4eec\u90fd\u4fee\u6539 ip\uff0c\u6216\u540c\u65f6\u4fee\u6539 cs \u548c ip","title":"10 call\u548cret\u6307\u4ee4"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#101-ret-retf","text":"ret\u6307\u4ee4\u7528\u6808\u4e2d\u7684\u6570\u636e\u4fee\u6539 ip\uff0c\u4ece\u800c\u5b9e\u73b0\u8fd1\u8f6c\u79fb \u6267\u884c ret \u6307\u4ee4 \u65f6 \uff0ccpu \u8fdb\u884c\u7684\u64cd\u4f5c\uff1a (ip) = ((ss)*16+(sp)) (sp) = (sp)+2 retf\u6307\u4ee4\u7528\u6808\u4e2d\u7684\u6570\u636e\u4fee\u6539 cs \u548c ip\uff0c\u4ece\u800c\u5b9e\u73b0\u8fdc\u8f6c\u79fb \u6267\u884c retf\u6307\u4ee4 \u65f6\uff0ccpu\u8fdb\u884c\u7684\u64cd\u4f5c\uff1a (ip) = ((ss)*16+(sp)) (sp) = (sp)+2 (cs) = ((ss)*16+(sp)) (sp) = (sp)+2","title":"10.1 ret / retf"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#102-call","text":"\u6267\u884c call\u6307\u4ee4 \u65f6\uff0ccpu\u8fdb\u884c\u7684\u64cd\u4f5c\uff1a \u5c06\u5f53\u524d\u7684 ip \u6216 cs \u548c ip \u538b\u5165\u6808\u4e2d \u8f6c\u79fb\uff08jmp\uff09 call \u6307\u4ee4\u4e0d\u80fd\u5b9e\u73b0\u77ed\u8f6c\u79fb","title":"10.2 call"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#103-call","text":"\u683c\u5f0f\uff1a call \u6807\u53f7\uff08\u5c06\u5f53\u524d\u7684 ip \u538b\u6808\u540e\uff0c\u8f6c\u79fb\u5230\u6807\u53f7\u51fa\u8fdb\u884c\u6267\u884c\uff09 16\u4f4d\u4f4d\u79fb = \u201c\u6807\u53f7\u201d\u5904\u7684\u5730\u5740-call\u6307\u4ee4\u540e\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u5730\u5740","title":"10.3 \u4f9d\u636e\u4f4d\u79fb\u8fdb\u884c\u8f6c\u79fb\u7684call\u6307\u4ee4"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#104-call","text":"\u683c\u5f0f\uff1a call far ptr \u6807\u53f7 \uff08\u5b9e\u73b0\u7684\u662f\u6bb5\u95f4\u8f6c\u79fb\uff09 \u6267\u884c\u8fd9\u79cd\u683c\u5f0f\u65f6\uff0ccpu\u7684\u64cd\u4f5c\uff1a (sp) = (sp)-2 ((ss)*16+(sp)) = (cs) (sp) = (sp)-2 ((ss)*16+(sp)) = (ip) (cs) = \u6807\u53f7\u6bb5\u5730\u5740 (ip) = \u6807\u53f7\u504f\u79fb\u5730\u5740 \u76f8\u5f53\u4e8e push cs push ip jmp far ptr \u6807\u53f7","title":"10.4 \u4f9d\u636e\u76ee\u7684\u5730\u5740\u5728\u6307\u4ee4\u4e2d\u7684call\u6307\u4ee4"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#105-call","text":"\u683c\u5f0f\uff1a call 16\u4f4d\u5bc4\u5b58\u5668 \u5177\u4f53\u64cd\u4f5c\uff1a (sp) = (sp)-2 ((ss)*16+(sp)) = (ip) (ip) = (16\u4f4d\u5bc4\u5b58\u5668) \u76f8\u5f53\u4e8e push ip jmp 16\u4f4d\u5bc4\u5b58\u5668","title":"10.5 \u8f6c\u79fb\u5730\u5740\u5728\u5bc4\u5b58\u5668\u4e2d\u7684call\u6307\u4ee4"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#106-call","text":"\u67092\u79cd\u683c\u5f0f\uff1a call word ptr \u5185\u5b58\u5355\u5143\u5730\u5740 \u5177\u4f53\u64cd\u4f5c\uff1a push ip jmp word ptr \u5185\u5b58\u5355\u5143\u5730\u5740 call dword ptr \u5185\u5b58\u5355\u5143\u5730\u5740 \u5177\u4f53\u64cd\u4f5c\uff1a push cs push ip jmp dword ptr \u5185\u5b58\u5355\u5143\u5730\u5740\uff08\u5185\u5b58\u5355\u5143\u4e2d\u9ad8\u4f4d\u7684\u65f6 cs\uff0c\u5730\u4f4d\u7684\u662f ip\uff09","title":"10.6 \u8f6c\u79fb\u5730\u5740\u5728\u5185\u5b58\u4e2d\u7684call\u6307\u4ee4"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#107-call-ret","text":"\u4e24\u8005\u914d\u5408\u4f7f\u7528\u53ef\u5b9e\u73b0\u5b50\u7a0b\u5e8f\uff0c\u5c31\u662f\u51fd\u6570\u8c03\u7528 \u5b50\u7a0b\u5e8f\u683c\u5f0f code segment main: ... call sub1 ... mov 4c00h int 21h sub1: ... ret sub2: ... ret code ends end main","title":"10.7 call \u548c ret \u7684\u914d\u5408\u4f7f\u7528"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#108-mul","text":"\u4e58\u6cd5\u6307\u4ee4 \u76f8\u4e58\u7684\u4e24\u4e2a\u6570\uff0c\u8981\u4e48\u90fd\u662f 8 \u4f4d\u7684\uff0c\u8981\u4e48\u90fd\u662f 16 \u4f4d\u7684 8\u4f4d\uff1aal \u548c\u4e00\u4e2a 8 \u4f4d\u5bc4\u5b58\u5668 \u6216\u8005 \u5185\u5b58\u5b57\u8282\u5355\u5143\u4e2d \u7ed3\u679c\u5728 ax \u4e2d 16\u4f4d\uff1a ax \u548c\u4e00\u4e2a 16 \u4f4d\u5bc4\u5b58\u5668 \u6216\u8005 \u5185\u5b58\u5b57\u5355\u5143\u4e2d \u7ed3\u679c\u5728 dx\uff08\u9ad8\u4f4d\uff09 \u548c ax\uff08\u4f4e\u4f4d\uff09 \u4e2d \u683c\u5f0f\uff1a mul \u5bc4\u5b58\u5668 mul \u5185\u5b58\u5355\u5143","title":"10.8 mul"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#109","text":"\u7528\u5bc4\u5b58\u5668\u5b58\u653e \u5982\u679c\u53c2\u6570\u5f88\u591a\u5c31\u628a\u53c2\u6570\u653e\u5728\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u4f20\u9012\u5185\u5b58\u7a7a\u95f4\u7684\u9996\u5730\u5740","title":"10.9 \u53c2\u6570\u548c\u7ed3\u679c\u7684\u4f20\u9012\u95ee\u9898"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#11","text":"","title":"11 \u6807\u5fd7\u5bc4\u5b58\u5668"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#111-flag","text":"8086CPU\u7684\u6807\u5fd7\u5bc4\u5b58\u5668\u90fd\u662f 16 \u4f4d\uff0c\u5176\u4e2d\u5b58\u50a8\u7684\u4fe1\u606f\u88ab\u79f0\u4e3a\u7a0b\u5e8f\u72b6\u6001\u5b57 flag\u5bc4\u5b58\u5668\u662f\u6309\u4f4d\u8d77\u4f5c\u7528\u7684\uff0c\u6bcf\u4e00\u4f4d\u90fd\u6709\u4e13\u95e8\u7684\u542b\u4e49 8086CPU\u4e2d\u53ea\u67090\uff0c2\uff0c4\uff0c6\uff0c7\uff0c8\uff0c9\uff0c10\uff0c11\u4f4d\u6709\u7279\u6b8a\u542b\u4e49 \u4f4d\u6570 \u610f\u4e49 0\uff08CF\uff09 \u8fdb\u4f4d\u6807\u5fd7\u4f4d 2\uff08PF\uff09 \u5947\u5076\u6807\u5fd7\u4f4d 4\uff08AF\uff09 6\uff08ZF\uff09 \u96f6\u6807\u5fd7\u4f4d 7\uff08SF\uff09 \u7b26\u53f7\u6807\u5fd7\u4f4d 8\uff08TF\uff09 9\uff08IF\uff09 10\uff08DF\uff09 \u65b9\u5411\u6807\u5fd7\u4f4d 11\uff08OF\uff09 \u6ea2\u51fa\u6807\u5fd7\u4f4d ZF\uff08zero\uff09 mov ax,1 sub ax,1 ;zf = 1 PF\uff08parity\uff09 mov al,1 add al,10 ;\u7ed3\u679c\u4e3a(1011b)\uff0c\u67093\u4e2a\u5947\u6570\uff0cpf = 0 SF \uff08sign\uff09\uff0c\u5bf9\u6709\u7b26\u53f7\u6570\u800c\u8a00 mov al,10000001b add al,1 ;\u8d1f\u6570\uff0csf = 1 CF\uff08carry\uff09 \u8bb0\u5f55\u8fdb\u4f4d\u6216\u8005\u501f\u4f4d\uff0c\u5bf9\u65e0\u7b26\u53f7\u6570\u800c\u8a00 mov al,98h add al,al ;cf = 1 mov al,97h sub al,98h ;cf = 1\uff0c\u501f\u4f4d\uff0c\u7ed3\u679c\u662f197h-98h OF \u6ea2\u51fa\uff0c\u5bf9\u6709\u7b26\u53f7\u6570\u800c\u8a00 mov al,10001000b ;-120 add al,11110000b ;-16 ;\u7ed3\u679c\u662f-136\uff0c\u6ea2\u51fa DF\uff08direction\uff09 \u5728\u4e32\u5904\u7406\u6307\u4ee4\u4e2d\uff0c\u63a7\u5236\u6bcf\u6b21\u64cd\u4f5c\u540esi\uff0cdi\u7684\u589e\u51cf df = 0\uff1a\u6bcf\u6b21\u64cd\u4f5c\u540esi\uff0cdi\u9012\u589e df = 1\uff1a\u6bcf\u6b21\u64cd\u4f5c\u540esi\uff0cdi\u9012\u51cf movsb \u7684\u529f\u80fd\u662f \u5c06 ds:si \u6307\u5411\u7684\u5185\u5b58\u5355\u5143\u7684\u5b57\u8282\u9001\u5165 es:di \u4e2d\uff0c\u7136\u540e\u6839\u636e df\u4f4d\u7684\u503c\u5bf9 di\u548csi \u9012\u589e\u6216\u9012\u51cf1 movsw \u4f20\u9001\u5b57\uff0c si\u548cdi \u9012\u589e\u6216\u9012\u51cf2 rep movsb\u7684\u529f\u80fd\u662f\u6839\u636e cx \u7684\u503c\u91cd\u590d\u6267\u884c\u540e\u9762\u7684\u4e32\u4f20\u9001\u6307\u4ee4 8086CPU\u63d0\u4f9b\u4e86\u4e24\u6761\u6307\u4ee4\u5bf9 df \u8fdb\u884c\u8bbe\u7f6e\uff1a cld\uff1adf \u7f6e0\uff08clear std\uff1adf \u7f6e1\uff08set DEBUG \u4e2d\u7684\u8868\u793a \u6807\u5fd7 \u503c\u4e3a1\u7684\u6807\u8bb0 \u503c\u4e3a0\u7684\u6807\u8bb0 OF OV NV SF NG PL ZF ZR NZ PF PE PO CF CY NC DF DN UP","title":"11.1 flag"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#112-adc","text":"\u5e26\u8fdb\u4f4d\u7684\u52a0\u6cd5\u6307\u4ee4 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u8ba1\u7b97\u5927\u6570\u76f8\u52a0\u65f6\uff0c\u904d\u5386\u5927\u6570\u65f6\uff0c\u5982\u679c\u8981 si+2\uff0c\u6700\u597d\u8fdb\u884c2\u6b21 inc si\uff0c\u56e0\u4e3a inc \u4e0d\u4f1a\u5f71\u54cd cf adc ax,bx ;\u5b9e\u73b0\u7684\u529f\u80fd\u662f (ax) = (ax)+(bx)+cf add al,bl adc ah,bh ;\u7b49\u6548\u4e8eadd ax,bx","title":"11.2 adc"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#113-sbb","text":"\u5e26\u501f\u4f4d\u51cf\u6cd5\u6307\u4ee4","title":"11.3 sbb"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#114-cmp","text":"\u6bd4\u8f83\u6307\u4ee4\uff0c\u529f\u80fd\u76f8\u5f53\u4e8e\u51cf\u6cd5\u6307\u4ee4\uff0c\u4f46\u662f\u4e0d\u4fdd\u5b58\u7ed3\u679c cmp \u6307\u4ee4\u6267\u884c\u540e\uff0c\u53ea\u4f1a\u5bf9\u6807\u5fd7\u5bc4\u5b58\u5668\u4ea7\u751f\u5f71\u54cd \u683c\u5f0f\uff1acmp \u64cd\u4f5c\u5bf9\u8c611\uff0c\u64cd\u4f5c\u5bf9\u8c612\uff08\u6267\u884c\u540e2\u4e2a\u64cd\u4f5c\u5bf9\u8c61\u4e0d\u4f1a\u6539\u53d8\uff09 ;cmp ax bx \u5728\u65e0\u7b26\u53f7\u6570\u7684\u60c5\u51b5\u4e0b\u5bf9\u6807\u5fd7\u5bc4\u5b58\u5668\u7684\u5f71\u54cd zf = 1 ;(ax) = (bx) zf = 0 ;(ax) != (bx) cf = 1 ;(ax) < (bx) cf = 0 ;(ax) >= (bx) zf = 0 \u4e14 cf = 0 ;(ax) > (bx) zf = 1 \u6216 cf = 1 ;(ax) <= (bx) ;cmp ax bx \u5728\u6709\u7b26\u53f7\u6570\u7684\u60c5\u51b5\u4e0b\u5bf9\u6807\u5fd7\u5bc4\u5b58\u5668\u7684\u5f71\u54cd ;\u8981\u540c\u65f6\u8003\u8651 sf \u548c of \u548c zf","title":"11.4 cmp"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#115","text":"\u65e0\u7b26\u53f7 \u6307\u4ee4 \u542b\u4e49 \u76f8\u5173\u6807\u5fd7\u4f4d je \u7b49\u4e8e\u5219\u8f6c\u79fb zf = 1 jne \u4e0d\u7b49\u4e8e\u5219\u8f6c\u79fb zf = 0 jb \u4f4e\u4e8e\u5219\u8f6c\u79fb cf = 1 jnb \u4e0d\u4f4e\u4e8e\u5219\u8f6c\u79fb cf = 0 ja \u9ad8\u4e8e\u5219\u8f6c\u79fb cf= 0,zf = 0 jna \u4e0d\u9ad8\u4e8e\u5219\u8f6c\u79fb cf = 1 \u6216 zf = 1 j: jmp e: euqal n: not b: below a: above","title":"11.5 \u68c0\u6d4b\u6bd4\u8f83\u7ed3\u679c\u7684\u6761\u4ef6\u8f6c\u79fb\u6307\u4ee4"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#116-pushf-popf","text":"pushf\uff1a\u5c06\u6807\u5fd7\u5bc4\u5b58\u5668\u538b\u6808 popf\uff1a\u5f39\u51fa\u6808\u4e2d\u6570\u636e\u7ed9\u6807\u5fd7\u5bc4\u5b58\u5668","title":"11.6 pushf / popf"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#_3","text":"**\u5f15\u8a00\u548c\u7b80\u4ecb 1.\u4e2d\u65ad\u662fCPU\u5904\u7406\u5916\u90e8\u7a81\u53d1\u4e8b\u4ef6\u7684\u4e00\u4e2a\u91cd\u8981\u6280\u672f 2.\u5b83\u80fd\u4f7fCPU\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u5bf9\u5916\u90e8\u4e8b\u4ef6\u53d1\u51fa\u7684\u4e2d\u65ad\u8bf7\u6c42\u53ca\u65f6\u5730\u8fdb\u884c\u5904\u7406\uff0c\u5904\u7406\u5b8c\u6210\u540e \u53c8\u7acb\u5373\u8fd4\u56de\u65ad\u70b9\uff0c\u7ee7\u7eed\u8fdb\u884cCPU\u539f\u6765\u7684\u5de5\u4f5c\u3002 3.\u5f15\u8d77\u4e2d\u65ad\u7684\u539f\u56e0\u3010\u5373\uff1a\u53d1\u51fa\u4e2d\u65ad\u8bf7\u6c42\u7684\u6765\u6e90\u53eb\u4f5c\u4e2d\u65ad\u6e90\u3011 4.\u6839\u636e\u4e2d\u65ad\u6e90\u7684\u4e0d\u540c\uff0c\u53ef\u4ee5\u628a\u4e2d\u65ad\u5206\u4e3a\uff1a\u3010\u8f6f\u4ef6\u4e2d\u65ad\u3011\u548c\u3010\u786c\u4ef6\u4e2d\u65ad\u3011\u4e24\u5927\u7c7b \u800c\u786c\u4ef6\u4e2d\u65ad\u53c8\u53ef\u4ee5\u5206\u4e3a\u3010\u5916\u90e8\u4e2d\u65ad\u3011\u548c\u3010\u5185\u90e8\u4e2d\u65ad\u3011\u4e24\u7c7b 12.1 \u5185\u4e2d\u65ad\u7684\u4ea7\u751f 1.\u5916\u90e8\u4e2d\u65ad\u4e00\u822c\u662f\u6307\u8ba1\u7b97\u673a\u5916\u8bbe\u53d1\u51fa\u7684\u4e2d\u65ad\u8bf7\u6c42\uff0c\u5982\uff1a\u952e\u76d8\u4e2d\u65ad\u3001\u6253\u5370\u673a\u4e2d\u65ad\u3001\u5b9a\u65f6\u5668\u4e2d\u65ad\u3002 \u5916\u90e8\u4e2d\u65ad\u662f\u53ef\u4ee5\u5c4f\u853d\u7684\u4e2d\u65ad\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5229\u7528\u4e2d\u65ad\u63a7\u5236\u5668\u53ef\u4ee5\u5c4f\u853d\u8fd9\u4e9b\u5916\u90e8\u8bbe\u5907\u7684\u4e2d\u65ad\u8bf7\u6c42\u3002 2.\u5185\u90e8\u4e2d\u65ad\u662f\u6307\u56e0\u786c\u4ef6\u51fa\u9519\uff08\u5982\u7a81\u7136\u6389\u7535\u3001\u5947\u5076\u6821\u9a8c\u9519\u7b49\uff09\u6216\u8fd0\u7b97\u51fa\u9519\uff08\u9664\u6570\u4e3a\u96f6\u3001\u8fd0\u7b97\u6ea2\u51fa\u3001\u5355\u6b65\u4e2d\u65ad\uff09\u6240\u5f15\u8d77\u7684\u4e2d\u65ad\u3002 \u5185\u90e8\u4e2d\u65ad\u662f\u4e0d\u53ef\u5c4f\u853d\u7684\u4e2d\u65ad 3.\u8f6f\u4ef6\u4e2d\u65ad\u5176\u5b9e\u5e76\u4e0d\u662f\u771f\u6b63\u7684\u4e2d\u65ad\uff0c\u4ed6\u4eec\u53ea\u662f\u53ef\u88ab\u8c03\u7528\u6267\u884c\u7684\u4e00\u822c\u7a0b\u5e8f\uff0c DOS\u7684\u7cfb\u7edf\u529f\u80fd\u8c03\u7528\uff08int 21h\uff09\u90fd\u662f\u8f6f\u4ef6\u4e2d\u65ad 4.CPU\u4e3a\u4e86\u5904\u7406\u5e76\u53d1\u7684\u4e2d\u65ad\u8bf7\u6c42\uff0c\u89c4\u5b9a\u4e86\u4e2d\u65ad\u7684\u4f18\u5148\u6743\uff0c\u4f18\u5148\u6743\u7531\u9ad8\u5230\u4f4e\u7684\u987a\u5e8f\u662f\uff1a 1.\u9664\u6cd5\u9519\u3001\u6ea2\u51fa\u4e2d\u65ad\u3001\u8f6f\u4ef6\u4e2d\u65ad 2.\u4e0d\u53ef\u5c4f\u853d\u4e2d\u65ad 3.\u53ef\u5c4f\u853d\u4e2d\u65ad 4.\u5355\u6b65\u4e2d\u65ad 12.2 \u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7b80\u4ecb 1.CPU\u7684\u8bbe\u8ba1\u8005\u5fc5\u987b\u5728\u4e2d\u65ad\u4fe1\u606f\u548c\u5176\u5904\u7406\u7a0b\u5e8f\u7684\u5165\u53e3\u5730\u5740\u4e4b\u95f4\u5efa\u7acb\u67d0\u79cd\u8054\u7cfb \u4f7f\u5f97CPU\u6839\u636e\u4e2d\u65ad\u4fe1\u606f\u53ef\u4ee5\u627e\u5230\u8981\u6267\u884c\u7684\u5904\u7406\u7a0b\u5e8f\u3002 2.\u4e2d\u65ad\u4fe1\u606f\u4e2d\u5305\u542b\u6709\u8868\u793a\u4e2d\u65ad\u7684\u7c7b\u578b\u7801\u3002\u6839\u636eCPU\u7684\u8bbe\u8ba1\uff0c\u4e2d\u65ad\u7c7b\u578b\u7801\u7684\u4f5c\u7528\u5c31\u662f\u7528\u6765\u5b9a\u4f4d\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u3002 3.CPU\u75288\u4f4d\u7684\u4e2d\u65ad\u7c7b\u578b\u7801\u901a\u8fc7\u4e2d\u65ad\u5411\u91cf\u8868\u627e\u5230\u76f8\u5e94\u7684\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u5165\u53e3\u5730\u5740 \u5373\u4e2d\u65ad\u7c7b\u578b\u7801\u662f\u4e2d\u65ad\u5411\u91cf\u5728\u4e2d\u65ad\u5411\u91cf\u8868\u4e2d\u7684\u7d22\u5f15 12.3 \u4e2d\u65ad\u5411\u91cf\u8868\u3010\u4e2d\u65ad\u5411\u91cf\u8868\u5c31\u662f\u4e2d\u65ad\u5411\u91cf\u7684\u5217\u8868\u3011 1.\u4e2d\u65ad\u5411\u91cf\u8868\u5728\u5185\u5b58\u4e2d\u4fdd\u5b58\uff0c\u5176\u4e2d\u5b58\u653e\u7740256\u4e2a\u30102^8,8\u4f4d\u4e2d\u65ad\u7c7b\u578b\u7801\u3011\u4e2d\u65ad\u6e90\u6240\u5bf9\u5e94\u7684\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u5165\u53e3 \u5bf9\u4e8e8086PC\u673a\uff0c\u4e2d\u65ad\u5411\u91cf\u8868\u6307\u5b9a\u653e\u5728\u5185\u5b58\u5730\u57400\u5904 2.\u4ece0:0-0:03ffh\u76841024\u4e2a\u5b57\u8282\u3010256*4\uff0c\u7269\u7406\u5730\u5740\u4f7f\u7528\u6bb5\u5730\u5740\u548c\u504f\u79fb\u5730\u5740\u5b58\u653e\uff0c\u9700\u89814\u4e2a\u5b57\u8282\u3011\u4e2d\u5b58\u653e\u7740\u4e2d\u65ad\u5411\u91cf\u8868 12.4 \u4e2d\u65ad\u8fc7\u7a0b 1.\u53ef\u4ee5\u7528\u4e2d\u65ad\u7c7b\u578b\u7801\uff0c\u5728\u4e2d\u65ad\u5411\u91cf\u8868\u4e2d\u627e\u5230\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u5165\u53e3 \u627e\u5230\u8fd9\u4e2a\u5165\u53e3\u5730\u5740\u7684\u6700\u7ec8\u76ee\u7684\u662f\u7528\u5b83\u8bbe\u7f6ecs\u548cip\uff0c\u4f7fCPU\u6267\u884c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f 2.\u7528\u4e2d\u65ad\u7c7b\u578b\u7801\u627e\u5230\u4e2d\u65ad\u5411\u91cf\uff0c\u5e76\u7528\u5b83\u8bbe\u7f6ecs\u548cip\uff0c\u8fd9\u4e2a\u5de5\u4f5c\u65f6\u7531CPU\u7684\u786c\u4ef6\u81ea\u52a8\u5b8c\u6210\u7684 CPU\u786c\u4ef6\u5b8c\u6210\u8fd9\u4e2a\u5de5\u4f5c\u7684\u8fc7\u7a0b\u88ab\u79f0\u4e3a\u3010\u4e2d\u65ad\u8fc7\u7a0b\u3011 3.\u4e2d\u65ad\u8fc7\u7a0b 8086CPU\u7684\u4e2d\u65ad\u8fc7\u7a0b 1.\uff08\u4ece\u4e2d\u65ad\u4fe1\u606f\u4e2d\uff09\u53d6\u5f97\u4e2d\u65ad\u7c7b\u578b\u7801 2.\u6807\u5fd7\u5bc4\u5b58\u5668\u7684\u503c\u5165\u6808\uff08\u4fdd\u62a4\u6807\u5fd7\u4f4d\uff09 3.\u8bbe\u7f6e\u6807\u5fd7\u5bc4\u5b58\u5668\u7684\u7b2c8\u4f4dTF\u548c\u7b2c9\u4f4dIF\u8bbe\u7f6e\u4e3a0\uff08\u540e\u9762\u8bb2\u89e3\u672c\u6b65\u7684\u76ee\u7684\uff09 4.cs\u5185\u5bb9\u5165\u6808 5.ip\u5185\u5bb9\u5165\u6808 6.\u4ece\u5185\u5b58\u5730\u5740\u4e3a\u4e2d\u65ad\u7c7b\u578b\u7801*4\u548c\u4e2d\u65ad\u7c7b\u578b\u7801*4+2\u7684\u4e24\u4e2a\u5b50\u5355\u5143\u4e2d \u8bfb\u53d6\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u5165\u53e3\u5730\u5740\u8bbe\u7f6ecs\u548cip 4.\u4f7f\u7528\u6c47\u7f16\u8bed\u8a00\u63cf\u8ff0\u4e2d\u65ad\u8fc7\u7a0b\uff0c\u5982\u4e0b 1.\u53d6\u5f97\u4e2d\u65ad\u7c7b\u578b\u7801N 2.pushf 3.TF=0\uff0cIF=0 4.push cs 5.push ip 6.\uff08ip\uff09=\uff08N*4\uff09\uff0c\uff08cs\uff09=\uff08N*4+2\uff09 12.5 \u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f 1.\u7531\u4e8eCPU\u968f\u65f6\u90fd\u53ef\u80fd\u68c0\u6d4b\u5230\u4e2d\u65ad\u4fe1\u606f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0cCPU\u968f\u65f6\u90fd\u53ef\u80fd\u6267\u884c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\uff0c \u6240\u4ee5\uff0c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5fc5\u987b\u4e00\u81f4\u5b58\u50a8\u5728\u5185\u5b58\u67d0\u6bb5\u7a7a\u95f4\u4e2d 2.\u800c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u5165\u53e3\u5730\u5740\uff0c\u5373\u3010\u4e2d\u65ad\u5411\u91cf\u3011\uff0c\u5fc5\u987b\u5b58\u50a8\u5728\u5bf9\u5e94\u7684\u4e2d\u65ad\u5411\u91cf\u8868\u8868\u9879\u4e2d 3.\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u7684\u7f16\u5199\u65b9\u6cd5\u548c\u5b50\u7a0b\u5e8f\u7684\u6bd4\u8f83\u7c7b\u4f3c\uff0c\u4e0b\u9762\u662f\u5e38\u89c4\u7684\u6b65\u9aa4 1.\u4fdd\u5b58\u7528\u5230\u7684\u5bc4\u5b58\u5668 2.\u5904\u7406\u4e2d\u65ad 3.\u6062\u590d\u7528\u5230\u7684\u5bc4\u5b58\u5668 4.\u7528iret\u6307\u4ee4\u8fd4\u56de **iret\u6307\u4ee4\u7684\u529f\u80fd\u7528\u6c47\u7f16\u8bed\u6cd5\u63cf\u8ff0\u4e3a pop ip pop cs popf iret\u901a\u5e38\u548c\u786c\u4ef6\u81ea\u52a8\u5b8c\u6210\u7684\u4e2d\u65ad\u8fc7\u7a0b\u914d\u5408\u4f7f\u7528 iret\u6307\u4ee4\u6267\u884c\u540e\uff0cCPU\u56de\u5230\u6267\u884c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u524d\u7684\u6267\u884c\u70b9\u7ee7\u7eed\u6267\u884c\u7a0b\u5e8f 12.6 \u9664\u6cd5\u9519\u8bef\u4e2d\u65ad\u7684\u5904\u7406 \u5f53CPU\u6267\u884cdiv\u7b49\u9664\u6cd5\u6307\u4ee4\u7684\u65f6\u5019\uff0c\u5982\u679c\u53d1\u751f\u4e86\u9664\u6cd5\u6ea2\u51fa\u9519\u8bef\uff0c\u5c06\u4ea7\u751f\u4e2d\u65ad\u7c7b\u578b\u7801\u4e3a0\u7684\u7ec8\u7aef\u4fe1\u606f CPU\u5c06\u68c0\u6d4b\u5230\u8fd9\u4e2a\u4fe1\u606f\uff0c\u7136\u540e\u5f15\u53d1\u4e2d\u65ad\u7a0b\u5e8f\uff0c\u8f6c\u53bb\u6267\u884c0\u53f7\u4e2d\u65ad\u5bf9\u5e94\u7684\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f \u4f8b\u5982\uff1a mov ax 1000h mov bh\uff0c1 div bh \u6b64\u7a0b\u5e8f\u4f1a\u4ea7\u751f\u6ea2\u51fa \u8fd0\u884c\u4e4b\u540e\uff0c\u4f1a\u663e\u793a 12.7 \u7f16\u7a0b\u5904\u74060\u53f7\u4e2d\u65ad \u73b0\u5728\u91cd\u65b0\u7f16\u5199\u4e00\u4e2a0\u53f7\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\uff0c\u5b83\u7684\u529f\u80fd\u662f\u5728\u5c4f\u5e55\u4e2d\u95f4\u663e\u793a\u201cWelcome to here!\u201d\u7684\u5e7f\u544a\u8bcd\uff0c\u7136\u540e\u8fd4\u56de\u5230\u64cd\u4f5c\u7cfb\u7edf \u628a\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u653e\u5230\u5b89\u5168\u7a7a\u95f4\u4e2d \u4e2d\u65ad\u7a0b\u5e8f\u7684\u6846\u67b6 12.8 \u5b89\u88c5 \u8ba1\u7b97\u4e2d\u65ad\u7a0b\u5e8f\u7684\u957f\u5ea6\uff1aoffset \u6807\u53f71-offset \u6807\u53f72 \u5728\u4ee3\u7801\u6bb5\u4e2d\u5b58\u653e\u6570\u636e 12.9 do0 12.10 \u8bbe\u7f6e\u4e2d\u65ad\u5411\u91cf 12.11 \u5355\u6b65\u4e2d\u65ad \u5982\u679c\u68c0\u6d4b\u5230\u6807\u5fd7\u5bc4\u5b58\u5668\u7684tf\u4f4d\u4e3a1\uff0c\u5219\u4ea7\u751f\u5355\u6b65\u4e2d\u65ad\uff0c\u5f15\u53d1\u4e2d\u65ad\u8fc7\u7a0b 12.12 \u54cd\u5e94\u4e2d\u65ad\u7684\u7279\u6b8a\u60c5\u51b5","title":"\u7b2c\u5341\u4e8c\u7ae0 \u5185\u4e2d\u65ad"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#int","text":"13.1 int\u6307\u4ee4 1.int\u683c\u5f0f\uff1aint n ;n\u4e3a\u4e2d\u65ad\u7c7b\u578b\u7801 \u5b83\u7684\u529f\u80fd\u662f\u5f15\u53d1\u4e2d\u65ad\u8fc7\u7a0b 2.CPU\u6267\u884cint n\u6307\u4ee4\uff0c\u76f8\u5f53\u4e8e\u5f15\u53d1\u4e00\u4e2an\u53f7\u4e2d\u65ad\u7684\u4e2d\u65ad\u8fc7\u7a0b\uff0c\u6267\u884c\u8fc7\u7a0b\u5982\u4e0b 1.\u53d6\u4e2d\u65ad\u7c7b\u578b\u7801 2.\u6807\u5fd7\u5bc4\u5b58\u5668\u5165\u6808\uff0cif=0\uff0ctf=0 3.cs\uff0cip\u5165\u6808 4.\u4ece\u6b64\u5904\u8f6c\u53bb\u6267\u884cn\u53f7\u4e2d\u65ad\u7684\u4e2d\u65ad\u5904\u7406\u8fc7\u7a0b 3.\u53ef\u4ee5\u5728\u7a0b\u5e8f\u4e2d\u4f7f\u7528int\u6307\u4ee4\u8c03\u7528\u4efb\u4f55\u4e00\u4e2a\u4e2d\u65ad\u7684\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f \u53ef\u4ee5\u7528int\u6307\u4ee4\u8c03\u7528\u8fd9\u4e9b\u5b50\u7a0b\u5e8f\uff0c\u4e5f\u53ef\u4ee5\u81ea\u5df1\u7f16\u5199\u4e00\u4e9b\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u4f9b\u522b\u4eba\u4f7f\u7528 13.2 \u7f16\u5199\u4f9b\u5e94\u7528\u7a0b\u5e8f\u8c03\u7528\u7684\u4e2d\u65ad\u4f8b\u7a0b \u3010\u5b9e\u4f8b1\u3011\u7f16\u5199\u3001\u5b89\u88c5\u4e2d\u65ad7ch\u7684\u4e2d\u65ad\u4f8b\u7a0b\uff0c\u5b9e\u73b0\u6c42\u4e00\u4e2aword\u578b\u6570\u636e\u7684\u5e73\u65b9 1.\u529f\u80fd\uff1a\u6c42\u4e00word\u578b\u6570\u636e\u7684\u5e73\u65b9 2.\u53c2\u6570\uff1a\uff08ax\uff09=\u8981\u8ba1\u7b97\u7684\u6570\u636e 3.\u8fd4\u56de\u503c\uff1adx\u3001ax\u4e2d\u5b58\u653e\u7ed3\u679c\u7684\u9ad816\u4f4d\u548c\u4f4e16\u4f4d 4.\u5e94\u7528\u4e3e\u4f8b\uff1a\u6c422*3456^2 ;\u7a0b\u5e8f1\uff1a\u8c03\u7528\u4e2d\u65ad\u7a0b\u5e8f\u8ba1\u7b97\u5e73\u65b9 code segment assume cs: code start: mov ax,3456; (ax)=3456 int 7ch;\u8c03\u7528\u4e2d\u65ad7ch\u7684\u4e2d\u65ad\u4f8b\u7a0b\uff0c\u8ba1\u7b97ax\u4e2d\u7684\u6570\u636e\u7684\u5e73\u65b9 add ax,ax adc dx,dx ;\u5b58\u653e\u7ed3\u679c\uff0c\u8bb2\u7ed3\u679c\u4e58\u4ee52 mov ax,4c00h int 21h code ends end start ;\u7a0b\u5e8f2\uff1a\u7f16\u5199\u4e2d\u65ad\u7a0b\u5e8f ;\u7a0b\u5e8f2\u4e2d\u8981\u505a\u4e09\u90e8\u5206\u5de5\u4f5c ; 1.\u7f16\u7a0b\u5b9e\u73b0\u6c42\u5e73\u65b9\u529f\u80fd\u7684\u7a0b\u5e8f ; 2.\u5b89\u88c5\u7a0b\u5e8f\uff0c\u6211\u4eec\u5c06\u5176\u5b89\u88c5\u57280:200\u5904 ; 3.\u8bbe\u7f6e\u4e2d\u65ad\u5411\u91cf\u8868\uff0c\u5c06\u7a0b\u5e8f\u7684\u5165\u53e3\u5730\u5740\u4fdd\u5b58\u57287ch\u8868\u9879\u4e2d\uff0c\u4f7f\u5176\u6210\u4e3a\u4e2d\u65ad7ch\u7684\u4e2d\u65ad\u4f8b\u7a0b\u3002 code segment assume cs:code start: mov ax,cs mov ds,ax mov si,offset sqr ;\u8bbe\u7f6eds:si\u6307\u5411\u6e90\u5730\u5740 mov ax,0 mov es,ax mov di,200h ;\u8bbe\u7f6ees:di\u6307\u5411\u76ee\u7684\u5730\u5740 mov cx,offset sqrend - offset sqr ;\u8bbe\u7f6ecx\u4e3a\u4f20\u8f93\u957f\u5ea6 cld ;\u8bbe\u7f6e\u4f20\u8f93\u65b9\u5411\u4e3a\u6b63 rep movsb mov ax,0 mov es,ax mov word ptr es:[7ch*4],200h ;\u8bbe\u7f6e\u4e2d\u65ad\u5411\u91cf\u5730\u5740\uff0c\u504f\u79fb\u5730\u5740 mov word ptr es:[7ch*4+2],0 ;\u8bbe\u7f6e\u4e2d\u65ad\u5411\u91cf\u5730\u5740\uff0c\u6bb5\u5730\u5740 mov ax,4c00h int 21h sqr: mul ax iret sqrend: nop code ends end start \u3010\u5b9e\u4f8b2\u3011\u7f16\u5199\u3001\u5b89\u88c5\u4e2d\u65ad7ch\u7684\u4e2d\u65ad\u4f8b\u7a0b\uff0c\u5b9e\u73b0\u5c06\u4e00\u4e2a\u5168\u662f\u5b57\u6bcd\uff0c\u4ee50\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\uff0c\u8f6c\u5316\u4e3a\u5927\u5199\u3002 code segment assume cs:code start: mov ax,cs mov ds,ax mov si,offset capital mov ax,0 mov es,ax mov di,200h mov cx,offset capitalend - offset capital cld rep movsb mov ax,0 mov es,ax mov word ptr es:[7ch*4],200h mov word ptr es:[7ch*4+2],0 mov ax,4c00h int 21h capital: push cx push si change: mov cl,[si] mov ch,0 jcxz ok and byte ptr [si],11011111b inc si jmp short change ok: pop si pop cx iret capitalend: nop code ends end start 13.3 \u5bf9int\u3001iret\u548c\u6808\u7684\u6df1\u5165\u7406\u89e3 \u3010\u95ee\u9898\u3011\u75287ch\u4e2d\u65ad\u4f8b\u7a0b\u5b8c\u6210loop\u6307\u4ee4\u7684\u529f\u80fd \u4e0d\u8981\u968f\u4fbf\u4fee\u6539sp\uff0c\u53ef\u4ee5\u4f7f\u7528bp\u8fdb\u884c\u95f4\u63a5\u8bbf\u95ee 13.4 BIOS\u548cDOS\u6240\u63d0\u4f9b\u7684\u4e2d\u65ad\u4f8b\u7a0b 13.5 BIOS\u548cDOS\u4e2d\u65ad\u4f8b\u7a0b\u7684\u5b89\u88c5\u8fc7\u7a0b 1.\u5f00\u673a\u540e\uff0cCPU\u4e00\u52a0\u7535\uff0c\u521d\u59cb\u5316\uff08cs\uff09=0ffffh\uff0cip=0\uff0c\u81ea\u52a8\u4eceffff:0\u5355\u5143\u5f00\u59cb\u6267\u884c\u7a0b\u5e8f ffff:0\u5904\u6709\u4e00\u6761\u8df3\u8f6c\u6307\u4ee4\uff0cCPU\u6267\u884c\u8be5\u6307\u4ee4\u540e\uff0c\u8f6c\u53bb\u6267\u884cbios\u4e2d\u7684\u786c\u4ef6\u7cfb\u7edf\u7684\u68c0\u6d4b\u548c\u521d\u59cb\u5316\u7a0b\u5e8f\u3002 2.\u521d\u59cb\u5316\u7a0b\u5e8f\u5c06\u5efa\u7acbbios\u6240\u652f\u6301\u7684\u4e2d\u65ad\u5411\u91cf\uff0c\u5373\u5c06bios\u63d0\u4f9b\u7684\u4e2d\u65ad\u4f8b\u7a0b\u7684\u5165\u53e3\u5730\u5740\u767b\u8bb0\u5728\u4e2d\u65ad\u5411\u91cf\u8868\u4e2d\u3002 3.\u786c\u4ef6\u7cfb\u7edf\u68c0\u6d4b\u548c\u521d\u59cb\u5316\u5b8c\u6210\u540e\uff0c\u8c03\u752819h\u8fdb\u884c\u64cd\u4f5c\u7cfb\u7edf\u7684\u5f15\u5bfc\u3002\u4ece\u6b64\u5c06\u8ba1\u7b97\u673a\u4ea4\u7531\u64cd\u4f5c\u7cfb\u7edf\u63a7\u5236\u3002 4.DOS\u542f\u52a8\u540e\uff0c\u9664\u5b8c\u6210\u5176\u4ed6\u5de5\u4f5c\u5916\uff0c\u8fd8\u5c06\u5b83\u6240\u63d0\u4f9b\u7684\u4e2d\u65ad\u4f8b\u7a0b\u88c5\u5165\u5185\u5b58\uff0c\u5e76\u5efa\u7acb\u76f8\u5e94\u7684\u4e2d\u65ad\u5411\u91cf 13.6 BIOS\u4e2d\u65ad\u4f8b\u7a0b\u7684\u5e94\u7528 1.int 10h\u4e2d\u65ad\u4f8b\u7a0b\u662fbios\u63d0\u4f9b\u7684\u4e2d\u65ad\u4f8b\u7a0b\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u591a\u4e2a\u548c\u5c4f\u5e55\u8f93\u51fa\u76f8\u5173\u7684\u5b50\u7a0b\u5e8f \u4e00\u822c\u6765\u8bf4\uff0c\u4e00\u4e2a\u4f9b\u7a0b\u5e8f\u5458\u8c03\u7528\u7684\u4e2d\u65ad\u4f8b\u7a0b\u4e2d\uff0c\u5f80\u5f80\u5305\u62ec\u591a\u4e2a\u5b50\u7a0b\u5e8f\uff0c\u4e2d\u65ad\u4f8b\u7a0b\u5185\u90e8\u7528\u4f20\u9012\u8fdb\u6765\u7684\u53c2\u6570\u6765\u51b3\u5b9a\u6267\u884c\u54ea\u4e2a\u5b50\u7a0b\u5e8f 2.bios\u548cdos\u63d0\u4f9b\u7684\u4e2d\u65ad\u4f8b\u7a0b\uff0c\u90fd\u7528ah\u6765\u4f20\u9012\u5185\u90e8\u5b50\u7a0b\u5e8f\u7684\u7f16\u53f7 13.7 DOS\u4e2d\u65ad\u4f8b\u7a0b\u5e94\u7528 int 21h\u4e2d\u65ad\u4f8b\u7a0b\u662fdos\u63d0\u4f9b\u7684\u4e2d\u65ad\u4f8b\u7a0b\uff0c\u5176\u4e2d\u5305\u542b\u4e86dos\u63d0\u4f9b\u7ed9\u7a0b\u5e8f\u5458\u9020\u7f16\u7a0b\u65f6\u8c03\u7528\u7684\u5b50\u7a0b\u5e8f \u3010\u5b9e\u9a8c13\u3011 **\u4ecb\u7ecd\u4e00\u672c\u6c47\u7f16\u8bed\u8a00\u7684\u4e66\u300aThe Art of Assembly Language\u300b","title":"\u7b2c\u5341\u4e09\u7ae0 int\u6307\u4ee4"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#_4","text":"CPU\u53ef\u4ee5\u76f4\u63a5\u8bfb\u51993\u4e2a\u5730\u65b9\u7684\u6570\u636e 1.CPU\u5185\u90e8\u7684\u5bc4\u5b58\u5668 2.\u5185\u5b58\u5355\u5143 3.\u7aef\u53e3 14.1 \u7aef\u53e3\u7684\u8bfb\u5199 1.\u5bf9\u7aef\u53e3\u7684\u8bfb\u5199\u4e0d\u80fd\u7528mov\u3001push\u3001pop\u7b49\u5185\u5b58\u8bfb\u5199\u6307\u4ee4 \u7aef\u53e3\u7684\u8bfb\u5199\u6307\u4ee4\u53ea\u6709\u4e24\u6761\uff1a\u3010in\u3011\u548c\u3010out\u3011\u5206\u522b\u7528\u4e8e\u4ece\u7aef\u53e3\u8bfb\u53d6\u6570\u636e\u548c\u5f80\u7aef\u53e3\u5199\u5165\u6570\u636e 2.CPU\u6267\u884c\u5185\u5b58\u8bbf\u95ee\u6307\u4ee4\u548c\u7aef\u53e3\u8bbf\u95ee\u6307\u4ee4\u65f6\uff0c\u603b\u7ebf\u4e0a\u7684\u4fe1\u606f\uff1a 1.\u8bbf\u95ee\u5185\u5b58 mov ax,ds:[8]; \u5047\u8bbe\u6267\u884c\u524d\uff08ds\uff09=0 \u6267\u884c\u65f6\uff0c\u4e0e\u603b\u7ebf\u76f8\u5173\u7684\u64cd\u4f5c\uff1a 1.CPU\u901a\u8fc7\u5730\u5740\u7ebf\u5c06\u5730\u5740\u4fe1\u606f8\u53d1\u51fa 2.CPU\u901a\u8fc7\u63a7\u5236\u7ebf\u53d1\u51fa\u5185\u5b58\u8bfb\u547d\u4ee4\uff0c\u9009\u4e2d\u5b58\u50a8\u5668\u82af\u7247\uff0c\u5e76\u901a\u77e5\u5b83\uff0c\u5c06\u8981\u4ece\u4e2d\u8bfb\u53d6\u6570\u636e 3.\u5b58\u50a8\u5668\u5c068\u53f7\u5355\u5143\u4e2d\u7684\u6570\u636e\u901a\u8fc7\u6570\u636e\u7ebf\u9001\u5165CPU 2.\u8bbf\u95ee\u7aef\u53e3 \u8fd9\u91cc\u7684\u3010\u7aef\u53e3\u3011\u662f\u5bf9\u786c\u4ef6\u5f00\u653e\u7684\u7aef\u53e3 in al,60h; \u4ece60h\u53f7\u7aef\u53e3\u8bfb\u5165\u4e00\u4e2a\u5b57\u8282 \u6267\u884c\u65f6\u4e0e\u603b\u7ebf\u76f8\u5173\u7684\u64cd\u4f5c 1.CPU\u901a\u8fc7\u5730\u5740\u7ebf\u5c06\u5730\u5740\u4fe1\u606f60h\u53d1\u51fa 2.CPU\u901a\u8fc7\u63a7\u5236\u7ebf\u53d1\u51fa\u7aef\u53e3\u8bfb\u547d\u4ee4\uff0c\u9009\u4e2d\u7aef\u53e3\u6240\u5728\u7684\u82af\u7247\uff0c\u5e76\u901a\u77e5\u5b83\uff0c\u5c06\u8981\u4ece\u4e2d\u8bfb\u53d6\u6570\u636e 3.\u7aef\u53e3\u6240\u5728\u7684\u82af\u7247\u5c0660h\u7aef\u53e3\u4e2d\u7684\u6570\u636e\u901a\u8fc7\u6570\u636e\u7ebf\u9001\u5165CPU **\u6ce8\u610f\uff1a\u5728in\u548cout\u6307\u4ee4\u4e2d\uff0c\u53ea\u80fd\u4f7f\u7528ax\u6216al\u6765\u5b58\u653e\u4ece\u7aef\u53e3\u4e2d\u8bfb\u5165\u7684\u6570\u636e\u6216\u8981\u53d1\u9001\u5230\u7aef\u53e3\u4e2d\u7684\u6570\u636e \u8bbf\u95ee8\u4f4d\u7aef\u53e3\u65f6\u7528al\uff0c\u8bbf\u95ee16\u4f4d\u7aef\u53e3\u65f6\u7528ax 3.\u5bf90-255\u4ee5\u5185\u7684\u7aef\u53e3\u8fdb\u884c\u8bfb\u5199 in al,20h ;\u4ece20h\u7aef\u53e3\u8bfb\u4e00\u4e2a\u5b57\u8282 out 20h,al ;\u5f8020h\u7aef\u53e3\u5199\u4e00\u4e2a\u5b57\u8282 4.\u5bf9256-65535\u7684\u7aef\u53e3\u8fdb\u884c\u8bfb\u5199\u65f6\uff0c\u7aef\u53e3\u53f7\u653e\u5728\u3010dx\u3011\u4e2d mov dx,3f8h ;\u5c06\u7aef\u53e3\u53f73f8\u9001\u5165dx in al,dx ;\u4ece3f8h\u7aef\u53e3\u8bfb\u4e00\u4e2a\u5b57\u8282 out dx,al ;\u4ece3f8h\u7aef\u53e3\u5199\u4e00\u4e2a\u5b57\u8282 14.2 CMOS RAM\u82af\u7247 1.PC\u673a\u4e2d\u6709\u4e00\u4e2aCMOS RAM\u82af\u7247\uff0c\u5176\u6709\u5982\u4e0b\u7279\u5f81 1.\u5305\u542b\u4e00\u4e2a\u5b9e\u65f6\u949f\u548c\u4e00\u4e2a\u6709128\u4e2a\u5b58\u50a8\u5355\u5143\u7684RAM\u5b58\u50a8\u5668\u3002\uff08\u65e9\u671f\u7684\u8ba1\u7b97\u673a\u4e3a64\u5b57\u8282\uff09 2.\u8be5\u82af\u7247\u9760\u7535\u6c60\u4f9b\u7535\u3002\u56e0\u6b64\uff0c\u5173\u673a\u540e\u5176\u5185\u90e8\u7684\u5b9e\u65f6\u949f\u4ecd\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\uff0cRAM\u4e2d\u7684\u4fe1\u606f\u4e0d\u4e22\u5931 3.128\u5b57\u8282\u7684RAM\u4e2d\uff0c\u5185\u90e8\u5b9e\u65f6\u949f\u5360\u75280-0dh\u5355\u5143\u6765\u4fdd\u5b58\u65f6\u95f4\u4fe1\u606f\uff0c\u5176\u4f59\u5927\u90e8\u5206\u5206\u5355\u5143\u7528\u4e8e \u4fdd\u5b58\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\uff0c\u4f9b\u7cfb\u7edf\u542f\u52a8\u65f6bios\u7a0b\u5e8f\u8bfb\u53d6 bios\u4e5f\u63d0\u4f9b\u4e86\u76f8\u5173\u7684\u7a0b\u5e8f\uff0c\u4f7f\u6211\u4eec\u53ef\u4ee5\u5728\u5f00\u673a\u7684\u65f6\u5019\u914d\u7f6eCMOS RAM\u4e2d\u7684\u7cfb\u7edf\u4fe1\u606f **\u8865\u5145\uff1aBIOS BIOS\u662f\u82f1\u6587\"Basic Input Output System\"\u7684\u7f29\u7565\u8bcd\uff0c\u76f4\u8bd1\u8fc7\u6765\u540e\u4e2d\u6587\u540d\u79f0\u5c31\u662f\"\u57fa\u672c\u8f93\u5165\u8f93\u51fa\u7cfb\u7edf\"\u3002 \u5728IBM PC\u517c\u5bb9\u7cfb\u7edf\u4e0a\uff0c\u662f\u4e00\u79cd\u4e1a\u754c\u6807\u51c6\u7684\u56fa\u4ef6\u63a5\u53e3\u3002BIOS\u8fd9\u4e2a\u5b57\u773c\u662f\u57281975\u5e74\u7b2c\u4e00\u6b21\u7531CP/M\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u51fa\u73b0\u3002 BIOS\u662f\u4e2a\u4eba\u7535\u8111\u542f\u52a8\u65f6\u52a0\u8f7d\u7684\u7b2c\u4e00\u4e2a\u8f6f\u4ef6 4.\u8be5\u82af\u7247\u5185\u90e8\u6709\u4e24\u4e2a\u7aef\u53e3\uff0c\u7aef\u53e3\u5730\u5740\u4e3a70h\u548c71h\u3002CPU\u901a\u8fc7\u8fd9\u4e24\u4e2a\u7aef\u53e3\u8bfb\u5199CMOS RAM\u3002 5.70h\u4e3a\u5730\u5740\u7aef\u53e3\uff0c\u5b58\u653e\u8981\u8bbf\u95ee\u7684CMOS RAM\u5355\u5143\u7684\u5730\u5740\uff1b71h\u4e3a\u6570\u636e\u7aef\u53e3\uff0c\u5b58\u653e\u4ece\u9009\u5b9a\u7684CMOS RAM\u5355\u5143\u4e2d\u8bfb\u53d6\u7684\u6570\u636e \u6216\u8981\u5199\u5165\u5230\u5176\u4e2d\u7684\u6570\u636e 2.\u6bd4\u5982\uff1a\u8bfbCMOS RAM\u76842\u53f7\u5355\u5143\uff1a 1.\u5c062\u9001\u5165\u7aef\u53e370h 2.\u4ece71h\u8bfb\u53d62\u53f7\u5355\u5143\u7684\u5185\u5bb9 14.3 shl\u548cshr\u6307\u4ee4 shl\u548cshr\u662f\u903b\u8f91\u79fb\u4f4d\u6307\u4ee4\uff0c\u540e\u9762\u7684\u8bfe\u7a0b\u4e2d\u6211\u4eec\u8981\u7528\u5230\u79fb\u4f4d\u6307\u4ee4 1.shl\u903b\u8f91\u5de6\u79fb\u6307\u4ee4\uff0c\u529f\u80fd\u4e3a\uff1a 1.\u5c06\u4e00\u4e2a\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5355\u5143\u4e2d\u7684\u6570\u636e\u5411\u5de6\u79fb\u4f4d 2.\u5c06\u6700\u540e\u79fb\u51fa\u7684\u79fb\u4f4d\u5199\u5165cf\u4e2d 3.\u6700\u4f4e\u4f4d\u75280\u8865\u5145 \u4f8b\u5982\u6709\u5982\u4e0b\u6307\u4ee4\uff1a mov al,01001000b shl al,1 ;\u5c06al\u4e2d\u7684\u6570\u636e\u5de6\u79fb\u4e00\u4f4d \u6267\u884c\u540e(al)=100100000b\uff0ccf=0. \u5982\u679c\u79fb\u52a8\u4f4d\u6570\u5927\u4e8e1\u65f6\uff0c\u5fc5\u987b\u5c06\u79fb\u52a8\u4f4d\u6570\u653e\u5728cl\u4e2d 2.shr\u903b\u8f91\u53f3\u79fb\u6307\u4ee4\uff0c\u4e0eshl\u521a\u597d\u76f8\u53cd 14.4 CMOS RAM\u4e2d\u5b58\u50a8\u7684\u65f6\u95f4\u4fe1\u606f \u5728CMOS RAM\u4e2d\u5b58\u653e\u7740\u5f53\u524d\u65f6\u95f4 \u79d2\uff1a00h \u5206\uff1a02h \u65f6\uff1a04h \u65e5\uff1a07h \u6708\uff1a08h \u5e74\uff1a09h \u8fd96\u4e2a\u4fe1\u606f\u7684\u957f\u5ea6\u90fd\u4e3a1\u4e2a\u5b57\u8282 \u8fd9\u4e9b\u6570\u636e\u4ee5BCD\u7801\u7684\u65b9\u5f0f\u5b58\u653e\uff0c\u4e00\u4e2a\u5b57\u8282\u53ef\u4ee5\u8868\u793a\u4e24\u4e2aBCD\u7801 CMOS RAM\u5b58\u50a8\u65f6\u95f4\u4fe1\u606f\u7684\u5355\u5143\u4e2d\u5b58\u50a8\u4e86\u7528\u4e24\u4e2aBCD\u7801\u8868\u793a\u7684\u4e24\u4e2a\u5341\u8fdb\u5236\u6570 \u9ad84\u4f4d\u7684BCD\u7801\u8868\u793a\u5341\u4f4d\uff0c\u4f4e\u56db\u4f4d\u7684BCD\u7801\u8868\u793a\u4e2a\u4f4d \u3010\u7f16\u7a0b\u3011\uff1a\u5728\u5c4f\u5e55\u4e2d\u95f4\u663e\u793a\u5f53\u524d\u7684\u6708\u4efd 1.CMOS RAM\u82af\u7247\u56de\u987e\uff1a 1.70h\u4e3a\u5730\u5740\u7aef\u53e3\uff0c\u5b58\u653e\u8981\u8bbf\u95ee\u7684CMOS RAM\u5355\u5143\u7684\u5730\u5740 2.71h\u4e3a\u6570\u636e\u7aef\u53e3\uff0c\u5b58\u653e\u4ece\u9009\u5b9a\u7684CMOS RAM\u5355\u5143\u4e2d\u3010\u8bfb\u53d6\u3011\u7684\u6570\u636e\uff0c\u6216\u3010\u5199\u5165\u3011\u5176\u4e2d\u7684\u6570\u636e 2.\u5206\u6790 \u8fd9\u4e2a\u7a0b\u5e8f\u4e3b\u8981\u505a\u4e24\u90e8\u5206\u5de5\u4f5c 1.\u4eceCMOS RAM\u76848\u53f7\u5355\u5143\u8bfb\u53d6\u5f53\u524d\u6708\u4efd\u7684BCD\u7801 \u8981\u8bfb\u53d6CMOS RAM\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u9996\u5148\u8981\u5411\u5730\u5740\u7aef\u53e370h\u5199\u5165\u8981\u8bbf\u95ee\u7684\u5355\u5143\u7684\u5730\u5740 mov al,8 out 70h,al \u7136\u540e\u4ece\u6570\u636e\u7aef\u53e371h\u4e2d\u53d6\u5f97\u6307\u5b9a\u5355\u5143\u4e2d\u7684\u6570\u636e in al,71h 2.\u5c06\u7528BCD\u7801\u8868\u793a\u7684\u6708\u4efd\u4ee5\u5341\u8fdb\u5236\u7684\u5f62\u5f0f\u663e\u793a\u5230\u5c4f\u5e55\u4e0a ;\u7f16\u7a0b\uff1a\u5728\u5c4f\u5e55\u4e2d\u95f4\u663e\u793a\u5f53\u524d\u7684\u6708\u4efd code segment assume cs:code start: mov al,8 out 70h,al in al,71h mov ah,al mov cl,4 shr ah,cl and al,00001111b add ah,30h add al,30h mov bx,0b800h ;\u663e\u5b58 mov es,bx mov byte ptr es:[160*12+40*2],ah ;\u663e\u793a\u6708\u4efd\u7684\u5341\u4f4d\u6570\u7801 mov byte ptr es:[160*12+40*2+2],al ;\u663e\u793a\u6708\u4efd\u7684\u4e2a\u4f4d\u6570\u7801 mov ax,4c00h int 21h code ends end start \u3010\u5b9e\u9a8c\u5341\u56db\u3011\u7f16\u7a0b\uff1a\u4ee5\u201c\u5e74/\u6708/\u65e5 \u65f6:\u5206:\u79d2\u201d\u7684\u683c\u5f0f\uff0c\u663e\u793a\u5f53\u524d\u65e5\u671f\u548c\u65f6\u95f4","title":"\u7b2c\u5341\u56db\u7ae0 \u7aef\u53e3"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#_5","text":"**CPU\u9664\u4e86\u6709\u8fd0\u7b97\u80fd\u529b\uff0c\u8fd8\u6709I/O\u80fd\u529b 15.1 \u63a5\u53e3\u82af\u7247\u548c\u7aef\u53e3 1.\u5728PC\u7cfb\u7edf\u7684\u63a5\u53e3\u5361\u548c\u4e3b\u677f\u4e0a\uff0c\u88c5\u6709\u5404\u79cd\u63a5\u53e3\u82af\u7247\uff0c\u8fd9\u4e9b\u5916\u8bbe\u63a5\u53e3\u82af\u7247\u7684\u5185\u90e8\u88c5\u6709\u82e5\u5e72\u5bc4\u5b58\u5668 CPU\u5c06\u8fd9\u4e9b\u5bc4\u5b58\u5668\u5f53\u505a\u3010\u7aef\u53e3\u3011\u8bbf\u95ee 2.\u5916\u8bbe\u7684\u8f93\u5165\u4e0d\u76f4\u63a5\u9001\u5165\u5185\u5b58\u548cCPU\uff0c\u800c\u662f\u9001\u5165\u76f8\u5173\u7684\u63a5\u53e3\u82af\u7247\u7684\u3010\u7aef\u53e3\u3011\u4e2d 3.CPU\u5411\u5916\u8bbe\u7684\u8f93\u51fa\u4e5f\u662f\u8981\u5148\u9001\u5165\u3010\u7aef\u53e3\u3011\u4e2d\uff0c\u518d\u7531\u76f8\u5173\u82af\u7247\u9001\u5165\u5230\u5916\u8bbe 4.CPU\u53ef\u4ee5\u5411\u5916\u8bbe\u8f93\u51fa\u63a7\u5236\u547d\u4ee4\uff0c\u8fd9\u4e9b\u63a7\u5236\u547d\u4ee4\u4e5f\u662f\u5148\u9001\u5230\u3010\u7aef\u53e3\u3011\u4e2d\uff0c\u7136\u540e\u76f8\u5173\u82af\u7247\u6839\u636e\u547d\u4ee4\u8fdb\u884c\u76f8\u5173\u5de5\u4f5c 5.\u53ef\u89c1\uff1aCPU\u4e0e\u5916\u90e8\u8bbe\u5907\u7684\u4ea4\u6d41\u662f\u901a\u8fc7\u3010\u7aef\u53e3\u3011\u8fdb\u884c\u7684 CPU\u5728\u6267\u884c\u5b8c\u5f53\u524d\u6307\u4ee4\u540e\uff0c\u53ef\u4ee5\u68c0\u6d4b\u5230\u53d1\u9001\u8fc7\u6765\u7684\u4e2d\u65ad\u4fe1\u606f\uff0c\u5f15\u53d1\u4e2d\u65ad\u8fc7\u7a0b\uff0c\u5904\u7406\u5916\u8bbe\u7684\u8f93\u5165 15.2 \u5916\u4e2d\u65ad\u4fe1\u606f 1.\u5728PC\u7cfb\u7edf\u4e2d\uff0c\u5916\u4e2d\u65ad\u6e90\u4e00\u5171\u6709\u4e24\u7c7b 1.\u53ef\u5c4f\u853d\u4e2d\u65ad 2.\u4e0d\u53ef\u5c4f\u853d\u4e2d\u65ad 2.\u53ef\u5c4f\u853d\u4e2d\u65ad\u662fCPU\u53ef\u4ee5\u4e0d\u54cd\u5e94\u7684\u5916\u4e2d\u65ad\u3002CPU\u662f\u5426\u54cd\u5e94\u53ef\u5c4f\u853d\u4e2d\u65ad \u8981\u770b\u6807\u5fd7\u5bc4\u5b58\u5668\u7684IF\u4f4d\u7684\u8bbe\u7f6e \u5f53CPU\u68c0\u6d4b\u5230\u53ef\u5c4f\u853d\u4e2d\u65ad\u4fe1\u606f\u65f6\uff1a 1.\u82e5IF=1\uff0c\u5219CPU\u5728\u6267\u884c\u5b8c\u5f53\u524d\u6307\u4ee4\u540e\u76f8\u5e94\u4e2d\u65ad\uff0c\u5f15\u53d1\u4e2d\u65ad\u8fc7\u7a0b 2.\u82e5IF=0\uff0c\u5219\u4e0d\u54cd\u5e94\u53ef\u5c4f\u853d\u4e2d\u65ad 3.\u53ef\u5c4f\u853d\u4e2d\u65ad\u6240\u5f15\u53d1\u7684\u4e2d\u65ad\u8fc7\u7a0b\uff0c\u9664\u5728\u7b2c\u4e00\u6b65\u7684\u5b9e\u73b0\u4e0a\u4e0e\u5185\u4e2d\u65ad\u6709\u6240\u4e0d\u540c\u5916\uff0c\u57fa\u672c\u4e0a\u548c\u5185\u4e2d\u65ad\u7684\u4e2d\u65ad\u8fc7\u7a0b\u76f8\u540c 4.\u56e0\u4e3a\u53ef\u5c4f\u853d\u4e2d\u65ad\u4fe1\u606f\u6765\u81ea\u4e8eCPU\u5916\u90e8\uff0c\u4e2d\u65ad\u7c7b\u578b\u7801\u662f\u901a\u8fc7\u6570\u636e\u603b\u7ebf\u9001\u5165CPU\u7684 \u800c\u5185\u4e2d\u65ad\u7684\u4e2d\u65ad\u7801\u662f\u5728CPU\u5185\u90e8\u4ea7\u751f\u7684 5.IF\u8bbe\u7f6e\u4e3a0\u7684\u539f\u56e0\uff1a\u5728\u8fdb\u5165\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u540e\uff0c\u7981\u6b62\u5176\u4ed6\u7684\u53ef\u5c4f\u853d\u4e2d\u65ad \u5f53\u7136\uff0c\u5982\u679c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u4e2d\u9700\u8981\u5904\u7406\u53ef\u5c4f\u853d\u4e2d\u65ad\uff0c\u53ef\u4ee5\u7528\u6307\u4ee4\u5c06IF\u8bbe\u7f6e\u4e3a1 6.8086CPU\u63d0\u4f9b\u7684\u8bbe\u7f6eIF\u7684\u6307\u4ee4\u5982\u4e0b\uff1a sti ;\u7528\u4e8e\u8bbe\u7f6eIF=1 cli ;\u7528\u4e8e\u8bbe\u7f6eIF=0 7.\u4e0d\u53ef\u5c4f\u853d\u4e2d\u65ad\u662fCPU\u5fc5\u987b\u76f8\u5e94\u7684\u5916\u4e2d\u65ad\u3002 \u5f53CPU\u68c0\u6d4b\u5230\u4e0d\u53ef\u5c4f\u853d\u4e2d\u65ad\u4fe1\u606f\u65f6\uff0c\u5219\u5728\u6267\u884c\u5b8c\u5f53\u524d\u6307\u4ee4\u540e \u7acb\u5373\u54cd\u5e94\uff0c\u5e94\u53d1\u4e2d\u65ad\u8fc7\u7a0b 8.8086CPU\u4e0d\u53ef\u5c4f\u853d\u4e2d\u65ad\u7684\u4e2d\u65ad\u7c7b\u578b\u7801\u56fa\u5b9a\u4e3a2\uff0c\u6240\u4ee5\u4e2d\u65ad\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u9700\u8981\u53d6\u4e2d\u65ad\u7c7b\u578b\u7801 9.\u4e0d\u53ef\u5c4f\u853d\u4e2d\u65ad\u7684\u4e2d\u65ad\u8fc7\u7a0b 1.\u6807\u5fd7\u5bc4\u5b58\u5668\u5165\u6808\uff0cIF=0\uff0cTF=0 2.CS\uff0cIP\u5165\u6808 3.\uff08IP\uff09=\uff088\uff09\uff0c\uff08CS\uff09=\uff080AH\uff09 ;\u56fa\u5b9a\u5730\u5740 10.\u51e0\u4e4e\u6240\u6709\u5916\u4e2d\u65ad\uff0c\u90fd\u662f\u53ef\u5c4f\u853d\u4e2d\u65ad\u3002\u5f53\u5916\u8bbe\u6709\u9700\u8981\u5904\u7406\u7684\u4e8b\u4ef6\u53d1\u751f\u65f6 \u76f8\u5173\u82af\u7247\u5411CPU\u53d1\u51fa\u53ef\u5c4f\u853d\u4e2d\u65ad\u4fe1\u606f\u3002 \u4e0d\u53ef\u5c4f\u853d\u4e2d\u65ad\u662f\u7cfb\u7edf\u4e2d\u6709\u5fc5\u987b\u5904\u7406\u7684\u7d27\u6025\u60c5\u51b5\u53d1\u751f\u65f6\u7528\u6765\u901a\u77e5CPU\u7684\u4e2d\u65ad\u4fe1\u606f\uff0c\u672c\u95e8\u8bfe\u7a0b\u4e2d\uff0c\u4e3b\u8981\u8ba8\u8bba\u53ef\u5c4f\u853d\u4e2d\u65ad 15.3 PC\u673a\u952e\u76d8\u7684\u5904\u7406\u8fc7\u7a0b 1.\u4e0b\u9762\u770b\u4e00\u4e2a\u952e\u76d8\u8f93\u5165\u7684\u5904\u7406\u8fc7\u7a0b\uff0c\u5e76\u4ee5\u6b64\u6765\u4f53\u4f1aPC\u673a\u5904\u7406\u5916\u8bbe\u8f93\u5165\u7684\u57fa\u672c\u65b9\u6cd5 1.\u952e\u76d8\u8f93\u5165 2.\u5f15\u53d19\u53f7\u4e2d\u65ad 3.\u6267\u884cint 9\u4e2d\u65ad\u4f8b\u7a0b 2.PC\u673a\u952e\u76d8\u7684\u5904\u7406\u8fc7\u7a0b 1.\u952e\u76d8\u4e0a\u6bcf\u4e00\u4e2a\u952e\u76f8\u5f53\u4e8e\u4e00\u4e2a\u5f00\u5173\uff0c\u952e\u76d8\u4e2d\u6709\u4e00\u4e2a\u82af\u7247\u5bf9\u952e\u76d8\u4e0a\u7684\u6bcf\u4e00\u89e6\u952e\u7684\u5f00\u5173\u72b6\u6001\u8fdb\u884c\u626b\u63cf\u3002 2.\u6309\u4e0b\u4e00\u4e2a\u952e\u65f6\uff0c\u5f00\u5173\u63a5\u901a\uff0c\u8be5\u82af\u7247\u5c31\u4ea7\u751f\u4e00\u4e2a\u626b\u63cf\u7801\uff0c\u626b\u63cf\u7801\u8bf4\u660e\u6309\u4e0b\u7684\u952e\u5728\u952e\u76d8\u4e0a\u7684\u4f4d\u7f6e \u626b\u63cf\u7801\u88ab\u9001\u5165\u4e3b\u677f\u4e0a\u7684\u76f8\u5173\u63a5\u53e3\u82af\u7247\u7684\u5bc4\u5b58\u5668\u4e2d\uff0c\u8be5\u5bc4\u5b58\u5668\u7684\u7aef\u53e3\u5730\u5740\u4e3a60H 3.\u677e\u5f00\u63a7\u4e0b\u7684\u952e\u65f6\uff0c\u4e5f\u4ea7\u751f\u4e00\u4e2a\u626b\u63cf\u7801\uff0c\u626b\u63cf\u7801\u8bf4\u660e\u4e86\u677e\u5f00\u7684\u952e\u5728\u952e\u76d8\u4e0a\u7684\u4f4d\u7f6e\uff0c\u677e\u5f00\u6309\u952e\u65f6 \u4ea7\u751f\u7684\u626b\u63cf\u7801\u4e5f\u88ab\u9001\u516560H\u7aef\u53e3\u4e2d\u3002 \u4e00\u822c\u6309\u4e0b\u4e00\u4e2a\u952e\u65f6\uff0c\u4ea7\u751f\u7684\u626b\u63cf\u7801\u79f0\u4e3a\u901a\u7801\uff0c\u677e\u5f00\u4e00\u4e2a\u952e\u4ea7\u751f\u7684\u626b\u63cf\u7801\u79f0\u4e3a\u65ad\u7801 \u626b\u63cf\u7801\u957f\u5ea6\u4e3a\u4e00\u4e2a\u5b57\u8282\uff0c\u901a\u7801\u7684\u7b2c\u4e03\u4f4d\u4e3a0\uff0c\u65ad\u7801\u7684\u7b2c\u4e03\u4f4d\u4e3a1 \u5373\uff1a\u65ad\u7801=\u901a\u7801+80H **BIOS\u63d0\u4f9b\u4e86int9\u4e2d\u65ad\u4f8b\u7a0b\uff0c\u7528\u6765\u8fdb\u884c\u57fa\u672c\u7684\u952e\u76d8\u8f93\u5165\u5904\u7406\uff0c\u4e3b\u8981\u7684\u5de5\u4f5c\u5982\u4e0b\uff1a 1.\u8bfb\u51fa60H\u7aef\u53e3\u4e2d\u7684\u626b\u63cf\u7801 2.\u5982\u679c\u662f\u5b57\u7b26\u952e\u7684\u626b\u63cf\u7801\uff0c\u5c06\u8be5\u626b\u63cf\u7801\u5bf9\u5e94\u7684\u5b57\u7b26\u7801\uff08\u5373\uff1aASCII\u7801\uff09\u9001\u5165\u5185\u5b58\u4e2d\u7684BIOS\u952e\u76d8\u7f13\u51b2\u533a 3\uff0c\u5982\u679c\u662f\u63a7\u5236\u952e\u548c\u5207\u6362\u952e\u7684\u626b\u63cf\u7801\uff0c\u5219\u5c06\u5176\u8f6c\u53d8\u4e3a\u72b6\u6001\u5b57\u8282\uff0c\u5199\u5165\u5185\u5b58\u4e2d\u5b58\u50a8\u72b6\u6001\u5b57\u8282\u7684\u5355\u5143 4.\u952e\u76d8\u7684\u8f93\u5165\u5230\u8fbe60H\u7aef\u53e3\u65f6\uff0c\u76f8\u5173\u7684\u82af\u7247\u4f1a\u5411CPU\u53d1\u51fa\u4e2d\u65ad\u7c7b\u578b\u7801\u4e3a9\u7684\u53ef\u5c4f\u853d\u4e2d\u65ad\u4fe1\u606f\u3002 5.CPU\u68c0\u6d4b\u5230\u4e2d\u65ad\u4fe1\u606f\u540e\uff0c\u5982\u679cIF=1\uff0c\u5219\u76f8\u5e94\u4e2d\u65ad\uff0c\u540c\u65f6\u5c06IF\u8bbe\u7f6e\u4e3a0\uff08\u4e0d\u8ba9\u5176\u4ed6\u53ef\u5c4f\u853d\u4e2d\u65ad\u8fdb\u884c\u5e72\u6270\uff09\uff0c\u5f15\u53d1\u4e2d\u65ad\u8fc7\u7a0b\uff0c\u8f6c\u53bb\u6267\u884cint9\u4e2d\u65ad\u4f8b\u7a0b 3.BIOS\u952e\u76d8\u7f13\u51b2\u533a\u662f\u7cfb\u7edf\u542f\u52a8\u540e\uff0cBIOS\u7528\u4e8e\u5b58\u653eint9\u4e2d\u65ad\u4f8b\u7a0b\u6240\u63a5\u53d7\u7684\u952e\u76d8\u8f93\u5165\u7684\u5185\u5b58\u533a 4.\u8be5\u5185\u5b58\u533a\u53ef\u4ee5\u5b58\u50a815\u4e2a\u952e\u76d8\u8f93\u5165\uff0cint9\u4e2d\u65ad\u4f8b\u7a0b\u9664\u4e86\u63a5\u6536\u626b\u63cf\u7801\u5916\uff0c\u8fd8\u8981\u4ea7\u751f\u548c\u626b\u63cf\u7801\u5bf9\u5e94\u7684\u5b57\u7b26\u7801\uff0c \u6240\u4ee5\u5728BIOS\u952e\u76d8\u7f13\u51b2\u533a\u4e2d\uff0c\u4e00\u4e2a\u952e\u76d8\u8f93\u5165\u7528\u4e00\u4e2a\u5b57\u5355\u5143\u5b58\u653e\uff0c\u9ad8\u5b57\u8282\u5b58\u653e\u626b\u63cf\u7801\uff0c\u4f4e\u5b57\u8282\u5b58\u653e\u5b57\u7b26\u7801 5.0040:17\u5355\u5143\u5b58\u50a8\u952e\u76d8\u72b6\u6001\u5b57\u8282\uff0c\u8be5\u5b57\u8282\u8bb0\u5f55\u4e86\u63a7\u5236\u952e\u548c\u5207\u6362\u952e\u7684\u72b6\u6001\u3002\u952e\u76d8\u72b6\u6001\u5b57\u8282\u5404\u4f4d\u8bb0\u5f55\u7684\u4fe1\u606f\u5982\u4e0b\uff1a 15.4 \u7f16\u5199int9\u4e2d\u65ad\u4f8b\u7a0b,\u5e76\u5b89\u88c5 \u68b3\u7406\u952e\u76d8\u8f93\u5165\u7684\u5904\u7406\u8fc7\u7a0b 1.\u952e\u76d8\u4ea7\u751f\u626b\u63cf\u7801 2.\u626b\u63cf\u7801\u9001\u516560H\u7aef\u53e3 3.\u4e00\u65e6\u4fa6\u6d4b\u523060H\u7aef\u53e3\u6709\u52a8\u9759\uff0c\u5f15\u53d19\u53f7\u4e2d\u65ad 4.CPU\u6267\u884cint9\u4e2d\u65ad\u4f8b\u7a0b\u5904\u7406\u8f93\u5165 \u4ee5\u4e0a\u7684\u8fc7\u7a0b\uff0c\u524d\u4e09\u6b65\u90fd\u7531\u786c\u4ef6\u7cfb\u7edf\u81ea\u52a8\u5b8c\u6210\uff0c\u80fd\u591f\u4fee\u6539\u7684\u53ea\u6709\u7b2c\u56db\u6b65\uff0c\u4fee\u6539int9\u4e2d\u65ad\u7a0b\u5e8f \u3010\u4efb\u52a1\u6f14\u793a\u3011\u5728\u5c4f\u5e55\u4e2d\u4f9d\u6b21\u663e\u793a\u201ca\u201d~\u201cz\u201d\u5e76\u53ef\u4ee5\u8ba9\u4eba\u770b\u6e05\u3002\u5728\u663e\u793a\u8fc7\u7a0b\u4e2d\uff0c\u6309\u4e0bEsc\u952e\u540e\uff0c\u8be5\u8868\u663e\u793a\u7684\u989c\u8272 ;\u7a0b\u5e8f1\uff1a\u5b9e\u73b0\u8fde\u7eed\u663e\u793a\u201ca\u201d~\u201cz\u201d ;\u7f16\u7a0b\uff1a\u5728\u5c4f\u5e55\u4e2d\u95f4\u4f9d\u6b21\u663e\u793a\u201ca\u201d~\u201cz\u201d\uff0c\u5e76\u53ef\u4ee5\u8ba9\u4eba\u770b\u6e05\u3002\u5728\u663e\u793a\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6309\u4e0b'Esc'\u952e\u540e\uff0c\u6539\u53d8\u663e\u793a\u7684\u989c\u8272\u3002 ;\u90e8\u5206\u529f\u80fd\u4ee3\u7801\uff1a stack segment db 128 dup (0) stack ends code segment assume cs:code start: mov ax,stack mov ss,ax mov sp,128 mov ax,0b800h mov es,ax mov ah,'a' s: mov es:[160*12+40*2],ah call delay inc ah cmp ah,'z' jna s mov ax,4c00h int 21h delay: push ax push dx mov dx,0010h ;\u5faa\u73af10000000h\u6b21 mov ax,0 s1: sub ax,1 sbb dx,0 cmp ax,0 jne s1 cmp dx,0 jne s1 pop dx pop ax ret code ends end start ;\u7a0b\u5e8f2\uff1a\u5b9e\u73b0\u6539\u53d8\u989c\u8272 ;\u7f16\u7a0b\uff1a\u5728\u5c4f\u5e55\u4e2d\u95f4\u4f9d\u6b21\u663e\u793a\u201ca\u201d~\u201cz\u201d\uff0c\u5e76\u53ef\u4ee5\u8ba9\u4eba\u770b\u6e05\u3002\u5728\u663e\u793a\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6309\u4e0b'Esc'\u952e\u540e\uff0c\u6539\u53d8\u663e\u793a\u7684\u989c\u8272\u3002 stack segment db 128 dup (0) stack ends data segment dw 0,0 data ends code segment assume cs:code start: mov ax,stack mov ss,ax mov sp,128 mov ax,data mov ds,ax mov ax,0 mov es,ax push es:[9*4] pop ds:[0] push es:[9*4+2] pop ds:[2] ;\u5c06\u539f\u6765\u7684int 9\u4e2d\u65ad\u4f8b\u7a0b\u7684\u5165\u53e3\u5730\u5740\u4fdd\u5b58\u5728ds:0\u3001ds:2\u5355\u5143\u4e2d mov word ptr es:[9*4],offset int9 mov es:[9*4+2],cs ;\u5728\u4e2d\u65ad\u5411\u91cf\u8868\u4e2d\u8bbe\u7f6e\u65b0\u7684int 9\u4e2d\u65ad\u4f8b\u7a0b\u7684\u5165\u53e3\u5730\u5740 mov ax,0b800h mov es,ax mov ah,'a' s: mov es:[160*12+40*2],ah call delay inc ah cmp ah,'z' jna s mov ax,0 mov es,ax push ds:[0] pop es:[9*4] push ds;[2] pop es;[9*4+2] ;\u5c06\u4e2d\u65ad\u5411\u91cf\u8868\u4e2dint 9\u4e2d\u65ad\u4f8b\u7a0b\u7684\u5165\u53e3\u6062\u590d\u4e3a\u539f\u6765\u7684\u5730\u5740 mov ax,4c00h int 21h delay: push ax push dx mov dx,0010h mov ax,0 s1: sub ax,1 sbb dx,0 cmp ax,0 jne s1 cmp dx,0 jne s1 pop dx pop ax ret ;------\u4ee5\u4e0b\u4e3a\u65b0\u7684int 9\u4e2d\u65ad\u4f8b\u7a0b-------------------- ;int9\u4e2d\u65ad\u4f8b\u7a0b\u662f\u5728\u8fdb\u884c\u952e\u76d8\u8f93\u5165\u4e4b\u540e\uff0c\u7531\u7cfb\u7edf\u81ea\u52a8\u8c03\u7528 int9: push ax push bx push es in al,60h pushf pushf pop bx and bh,11111100b push bx popf call dword ptr ds:[0] ;\u5bf9int\u6307\u4ee4\u8fdb\u884c\u6a21\u62df\uff0c\u8c03\u7528\u539f\u6765\u7684int 9\u4e2d\u65ad\u4f8b\u7a0b cmp al,1 jne int9ret mov ax,0b800h mov es,ax inc byte ptr es:[160*12+40*2+1] ;\u5c5e\u6027\u589e\u52a01\uff0c\u6539\u53d8\u989c\u8272 int9ret: pop es pop bx pop ax iret code ends end start","title":"\u7b2c\u5341\u4e94\u7ae0 \u5916\u4e2d\u65ad"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#_6","text":"16.1 \u63cf\u8ff0\u4e86\u5355\u5143\u957f\u5ea6\u7684\u6807\u53f7 1.\u672c\u7ae0\u8ba8\u8bba\u5982\u4f55\u6709\u6548\u5408\u7406\u5730\u7ec4\u7ec7\u6570\u636e\uff0c\u4ee5\u53ca\u76f8\u5173\u7684\u7f16\u7a0b\u6280\u672f 1.\u524d\u9762\u7684\u8bfe\u7a0b\u4e2d\uff0c\u6211\u4eec\u4e00\u76f4\u5728\u4ee3\u7801\u6bb5\u4e2d\u4f7f\u7528\u6807\u53f7\u6765\u6807\u8bb0\u6307\u4ee4\u3001\u6570\u636e\u3001\u6bb5\u7684\u8d77\u59cb\u5730\u5740 2.\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u6807\u53f7\uff0c\u8fd9\u79cd\u6807\u53f7\u4e0d\u4f46\u53ef\u4ee5\u8868\u793a\u5185\u5b58\u5355\u5143\u7684\u5730\u5740\uff0c\u8fd8\u8868\u793a\u4e86\u5185\u5b58\u5355\u5143\u7684\u957f\u5ea6 \u5373\uff1a\u8868\u793a\u5728\u6b64\u6807\u53f7\u5904\u7684\u5355\u5143\uff0c\u662f\u4e00\u4e2a\u5b57\u8282\u5355\u5143\uff0c\u8fd8\u662f\u5b57\u5355\u5143\u8fd8\u662f\u53cc\u5b57\u5355\u5143 2.\u4f8b\u5982 1.\u6807\u53f71 a : db 1,2,3,4,5,6,7,8 b : dw 0 \u6b64\u79cd\u6807\u53f7\u53ea\u80fd\u6807\u8bb0\u5730\u5740 \u6b64\u79cd\u52a0\u6709\u201c:\u201d\u7684\u5730\u5740\u6807\u53f7\uff0c\u53ea\u80fd\u5728\u4ee3\u7801\u6bb5\u4e2d\u4f7f\u7528\uff0c\u4e0d\u80fd\u5728\u5176\u4ed6\u6bb5\u4e2d\u4f7f\u7528 2.\u6807\u53f72 a db 1,2,3,4,5,6,7,8 ;\u6807\u53f7a\uff0c\u63cf\u8ff0\u4e86\u5730\u5740code:0,\u548c\u4ece\u8fd9\u4e2a\u5730\u5740\u5f00\u59cb\uff0c\u4ee5\u540e\u7684\u5185\u5b58\u5355\u5143\u90fd\u662f\u5b57\u8282\u5355\u5143 b dw 0 ;\u6807\u53f7b\u63cf\u8ff0\u4e86\u5730\u5740code:8\uff0c\u548c\u4ece\u8fd9\u4e2a\u5730\u5740\u5f00\u59cb\uff0c\u4ee5\u540e\u7684\u5185\u5b58\u5355\u5143\u90fd\u662f\u5b57\u5355\u5143 \u6b64\u79cd\u6807\u53f7\u65e2\u53ef\u4ee5\u6807\u8bb0\u5730\u5740\uff0c\u4e5f\u53ef\u4ee5\u8868\u793a\u6b64\u6807\u53f7\u5904\u7684\u5355\u5143 3.\u4f7f\u7528\u8fd9\u79cd\u5305\u542b\u5355\u5143\u957f\u5ea6\u7684\u6807\u53f7\uff0c\u53ef\u4ee5\u4f7f\u6211\u4eec\u4ee5\u7b80\u6d01\u7684\u5f62\u5f0f\u8bbf\u95ee\u5185\u5b58\u4e2d\u7684\u6570\u636e \u8fd9\u79cd\u6807\u53f7\u6b64\u540e\u79f0\u4e3a\u6570\u636e\u6807\u53f7\uff0c\u5b83\u6807\u8bb0\u4e86\u5b58\u50a8\u6570\u636e\u7684\u5355\u5143\u7684\u5730\u5740\u548c\u957f\u5ea6 4.\u6570\u636e\u6807\u53f7\u7684\u7528\u6cd5 \u6307\u4ee4\uff1amov ax,b ;\u76f8\u5f53\u4e8e\uff1amov ax,cs:[8] \u6307\u4ee4\uff1amov b,2 ;\u76f8\u5f53\u4e8e\uff1amov word ptr cs:[8],2 \u6307\u4ee4\uff1ainc b ;\u76f8\u5f53\u4e8e\uff1ainc word ptr cs:[8] \u6307\u4ee4\uff1amov al,a [si] ;\u76f8\u5f53\u4e8e\uff1amov al,cs:0[si] \u6307\u4ee4\uff1amov al,a[3] ;\u76f8\u5f53\u4e8e\uff1amov al,cs:0[3] \u6307\u4ee4\uff1amov al,a[bx+si+3] ;\u76f8\u5f53\u4e8e\uff1amov al,cs:0[bx+si+3] 16.2 \u5728\u5176\u4ed6\u6bb5\u4e2d\u4f7f\u7528\u6570\u636e\u6807\u53f7 1.\u6ce8\u610f\uff0c\u5982\u679c\u60f3\u5728\u4ee3\u7801\u6bb5\u4e2d\uff0c\u76f4\u63a5\u7528\u6570\u636e\u6807\u53f7\u8bbf\u95ee\u6570\u636e\uff0c \u5219\u9700\u8981\u7528\u4f2a\u6307\u4ee4assume \u5c06\u6807\u53f7\u6240\u5728\u7684\u6bb5\u548c\u4e00\u4e2a\u6bb5\u5bc4\u5b58\u5668\u8054\u7cfb\u8d77\u6765\u3002 \u5426\u5219\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u7684\u65f6\u5019\uff0c\u65e0\u6cd5\u786e\u5b9a\u6807\u53f7\u7684\u6bb5\u5730\u5740\u5728\u54ea\u4e00\u4e2a\u5bc4\u5b58\u5668\u4e2d\u3002 2. \u5f53\u7136\uff0c\u8fd9\u79cd\u8054\u7cfb\u662f\u7f16\u8bd1\u5668\u9700\u8981\u7684\uff0c\u4f46\u7edd\u5bf9\u4e0d\u662f\u8bf4\uff0c\u6211\u4eec\u56e0\u4e3a\u7f16\u8bd1\u5668\u7684\u5de5\u4f5c\u9700\u8981\uff0c \u7528assume\u6307\u4ee4\u5c06\u6bb5\u5bc4\u5b58\u5668\u548c\u67d0\u4e2a\u6bb5\u76f8\u8054\u7cfb\uff0c\u6bb5\u5bc4\u5b58\u5668\u4e2d\u5c31\u4f1a\u771f\u7684\u5b58\u653e\u8be5\u6bb5\u7684\u5730\u5740\u3002 3.\u6211\u4eec\u53ef\u4ee5\u5c06\u6570\u636e\u6807\u53f7\u5f53\u4f5c\u6570\u636e\u6765\u5b9a\u4e49\uff0c\u6b64\u65f6\uff0c\u7f16\u8bd1\u5668\u5c06\u6807\u53f7\u6240\u8868\u793a\u7684\u5730\u5740\u5f53\u4f5c\u6570\u636e\u7684\u503c\u3002 1.\u628a\u6570\u636e\u6807\u53f7\u5f53\u505a\u6570\u636e\u6765\u5b9a\u4e49\u65f6\uff0c\u4f7f\u7528\u3010dw\u3011\u5b9a\u4e49\u6570\u636e \u6bd4\u5982\uff1a data segment a db 1,2,3,4,5,6,7,8 b dw 0 c dw a,b ;\u6570\u636e\u6807\u53f7c\u5904\u5b58\u50a8\u7684\u4e24\u4e2a\u5b57\u578b\u6570\u636e\u4e3a\u6807\u53f7a\u3001b \u7684\u504f\u79fb\u5730\u5740\u3002 data ends \u6570\u636e\u6807\u53f7c\u5904\u5b58\u50a8\u7684\u4e24\u4e2a\u5b57\u578b\u6570\u636e\u4e3a\u6807\u53f7a\u3001b \u7684\u504f\u79fb\u5730\u5740\u3002 \u76f8\u5f53\u4e8e\uff1a data segment a db 1,2,3,4,5,6,7,8 b dw 0 c dw offset a, offset b data ends 2.\u628a\u6570\u636e\u6807\u53f7\u5f53\u505a\u6570\u636e\u6765\u5b9a\u4e49\u65f6\uff0c\u4f7f\u7528\u3010dd\u3011\u5b9a\u4e49\u6570\u636e \u518d\u6bd4\u5982\uff1a data segment a db 1,2,3,4,5,6,7,8 b dw 0 c dd a,b ;\u6570\u636e\u6807\u53f7c\u5904\u5b58\u50a8\u7684\u4e24\u4e2a\u53cc\u5b57\u578b\u6570\u636e\u4e3a\u6807\u53f7a\u7684\u504f\u79fb\u5730\u5740\u548c\u6bb5\u5730\u5740\u3001\u6807\u53f7b \u7684\u504f\u79fb\u5730\u5740\u548c\u6bb5\u5730\u5740\u3002 data ends \u6570\u636e\u6807\u53f7c\u5904\u5b58\u50a8\u7684\u4e24\u4e2a\u53cc\u5b57\u578b\u6570\u636e\u4e3a\u6807\u53f7a\u7684\u504f\u79fb\u5730\u5740\u548c\u6bb5\u5730\u5740\u3001\u6807\u53f7b \u7684\u504f\u79fb\u5730\u5740\u548c\u6bb5\u5730\u5740\u3002 \u76f8\u5f53\u4e8e\uff1a data segment a db 1,2,3,4,5,6,7,8 b dw 0 c dw offset a, seg a, offset b, seg b ;seg\u64cd\u4f5c\u7b26\uff0c\u529f\u80fd\u4e3a\u53d6\u5f97\u67d0\u4e00\u6807\u53f7\u7684\u6bb5\u5730\u5740\u3002 data ends seg\u64cd\u4f5c\u7b26\uff0c\u529f\u80fd\u4e3a\u53d6\u5f97\u67d0\u4e00\u6807\u53f7\u7684\u6bb5\u5730\u5740\u3002 16.3 \u76f4\u63a5\u5b9a\u5740\u8868 \u672c\u8282\u8bfe\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u201c\u67e5\u8868\u201d\u7684\u65b9\u6cd5\uff0c\u7f16\u5199\u76f8\u5173\u7a0b\u5e8f\u7684\u6280\u5de7 \u3010\u4efb\u52a1\u3011\u7f16\u5199\u5b50\u7a0b\u5e8f\uff0c\u4ee5\u5341\u516d\u8fdb\u5236\u7684\u5f62\u5f0f\u5728\u5c4f\u5e55\u4e2d\u95f4\u663e\u793a\u7ed9\u5b9a\u7684byte\u578b\u6570\u636e code segment assume cs:code start: mov al,0eh ;al\u4e2d\u5b58\u653e\u4e86byte\u578b\u6570\u636e call showbyte mov ax,4c00h int 21h ;\u5b50\u7a0b\u5e8f\uff1a ;\u7528al\u4f20\u9001\u8981\u663e\u793a\u7684\u6570\u636e showbyte: jmp short show table db '0123456789ABCDEF' ;\u5b57\u7b26\u8868 show: push bx ;\u4fdd\u62a4\u73b0\u573a push es mov ah,al shr ah,1 shr ah,1 shr ah,1 shr ah,1 ;\u53f3\u79fb4\u4f4d\uff0cah\u4e2d\u5f97\u5230\u9ad84\u4f4d\u7684\u503c and al,00001111b ;al\u4e2d\u4e3a\u4f4e4\u4f4d\u7684\u503c mov bl,ah mov bh,0 mov ah,table[bx] ;\u7528\u9ad84\u4f4d\u7684\u503c\u4f5c\u4e3a\u76f8\u5bf9\u4e8etable\u7684\u504f\u79fb\uff0c\u53d6\u5f97\u5bf9\u5e94\u7684\u5b57\u7b26 mov bx,0b800h mov es,bx mov es:[160*12+40*2],ah mov bl,al mov bh,0 mov al,table[bx] ;\u7528\u4f4e4\u4f4d\u7684\u503c\u4f5c\u4e3a\u76f8\u5bf9\u4e8etable\u7684\u504f\u79fb\uff0c\u53d6\u5f97\u5bf9\u5e94\u7684\u5b57\u7b26 mov es:[160*12+40*2+2],al pop es pop bx ret code ends end start 16.4 \u7a0b\u5e8f\u5165\u53e3\u5730\u5740\u7684\u76f4\u63a5\u5b9a\u5740\u8868 \u3010\u7f16\u7a0b\u3011\u5b9e\u73b0\u4e00\u4e2a\u5b50\u7a0b\u5e8fsetscreen\uff0c\u4e3a\u663e\u793a\u8f93\u51fa\u63d0\u4f9b\u5982\u4e0b\u529f\u80fd\uff1a 1.\u6e05\u5c4f 2.\u8bbe\u7f6e\u524d\u666f\u8272 3.\u8bbe\u7f6e\u80cc\u666f\u8272 4.\u5411\u4e0a\u6eda\u52a8\u4e00\u884c 1.\u5165\u53e3\u53c2\u6570\u8bf4\u660e\uff1a 1.\u7528ah\u5bc4\u5b58\u5668\u4f20\u9012\u529f\u80fd\u53f7 0\uff1a\u6e05\u5c4f\uff1b1\uff1a\u8bbe\u7f6e\u524d\u666f\u8272\uff1b2\uff1a\u8bbe\u7f6e\u80cc\u666f\u8272\uff1b3\uff1a\u5411\u4e0a\u6eda\u52a8\u4e00\u884c 2.\u5bf9\u4e8e2\u30013\u53f7\u529f\u80fd\uff0c\u7528al\u4f20\u9012\u989c\u8272\u503c al\u2208{0\uff0c1\uff0c2\uff0c3\uff0c4\uff0c5\uff0c6\uff0c7} 2.\u5404\u79cd\u529f\u80fd\u5982\u4f55\u5b9e\u73b0 1.\u6e05\u5c4f\uff1a \u5c06\u663e\u5b58\u4e2d\u5f53\u524d\u5c4f\u5e55\u4e2d\u7684\u5b57\u7b26\u8bbe\u4e3a\u7a7a\u683c\u7b26\uff1b 2.\u8bbe\u7f6e\u524d\u666f\u8272\uff1a \u8bbe\u7f6e\u663e\u5b58\u4e2d\u5f53\u524d\u5c4f\u5e55\u4e2d\u5904\u4e8e\u5947\u5730\u5740\u7684\u5c5e\u6027\u5b57\u8282\u7684\u7b2c0\u30011\u30012\u4f4d\uff1b 012\u4f4d\u5b58\u653e\u524d\u666f\u8272 3.\u8bbe\u7f6e\u80cc\u666f\u8272\uff1a \u8bbe\u7f6e\u663e\u5b58\u4e2d\u5f53\u524d\u5c4f\u5e55\u4e2d\u5904\u4e8e\u5947\u5730\u5740\u7684\u5c5e\u6027\u5b57\u8282\u7684\u7b2c4\u30015\u30016\u4f4d\uff1b 456\u4f4d\u5b58\u653e\u80cc\u666f\u8272 4.\u5411\u4e0a\u6eda\u52a8\u4e00\u884c\uff1a \u4f9d\u6b21\u5c06\u7b2c n+1\u884c\u7684\u5185\u5bb9\u590d\u5236\u5230\u7b2cn\u884c\u5904\uff1a\u6700\u540e\u4e00\u884c\u4e3a\u7a7a\u3002 ;\u529f\u80fd\u5b50\u7a0b\u5e8f1\uff1a\u6e05\u5c4f sub1: push bx ;\u4fdd\u62a4\u73b0\u573a,\u8c03\u7528\u5b50\u7a0b\u5e8f\u7684\u65f6\u5019\uff0c\u6ce8\u610f\u8981\u4fdd\u62a4\u73b0\u573a\uff0c\u8fd0\u884c\u5b50\u7a0b\u5e8f\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u4fee\u6539\u4e00\u4e9b\u5bc4\u5b58\u5668\u7684\u503c push cx push es mov bx,0b800h mov es,bx mov bx,0 mov cx,2000 sub1s: mov byte ptr es:[bx],' ' ;\u5faa\u574f2000\u6b21 add bx,2 loop sub1s pop es ;\u6062\u590d\u73b0\u573a pop cx pop bx ret ;\u529f\u80fd\u5b50\u7a0b\u5e8f2\uff1a\u8bbe\u7f6e\u524d\u666f sub2: push bx push cx push es mov bx,0b800h mov es,bx mov bx,1 mov cx,2000 sub2s: and byte ptr es:[bx],11111000b or es:[bx],al add bx,2 loop sub2s pop es pop cx pop bx ret ;\u529f\u80fd\u5b50\u7a0b\u5e8f3\uff1a\u8bbe\u7f6e\u80cc\u666f\u8272 sub3: push bx push cx push es mov cl,4 shl al,cl mov bx,0b800h mov es,bx mov bx,1 mov cx,2000 sub3s: and byte ptr es:[bx],10001111b or es:[bx],al add bx,2 loop sub2s pop es pop cx pop bx ret ;\u529f\u80fd\u5b50\u7a0b\u5e8f4\uff1a\u5411\u4e0a\u6eda\u52a8\u4e00\u884c sub4: push cx push si push di push es push ds mov si,0b800h mov es,si mov ds,si mov si,160 ;ds:si\u6307\u5411\u7b2cn+1\u884c\uff0c\u7b2c1\u884c mov di,0 ;es:di\u6307\u5411\u7b2cn\u884c\uff0c\u7b2c0\u884c cld mov cx,24;\u5171\u590d\u523624\u884c sub4s: push cx mov cx,160 rep movsb ;\u590d\u5236 pop cx loop sub4s mov cx,80 mov si,0 sub4s1: mov byte ptr es:[160*24+si],' ' ;\u6700\u540e\u4e00\u884c\u6e05\u7a7a add si,2 loop sub4s1 pop ds pop es pop di pop si pop cx ret ;sub4 ends 3.\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u529f\u80fd\u5b50\u7a0b\u5e8f\u7684\u5165\u53e3\u5730\u5740\u5b58\u50a8\u5728\u4e00\u4e2a\u8868\u4e2d\uff0c\u4ed6\u4eec\u5728\u8868\u4e2d\u7684\u4f4d\u7f6e\u548c\u529f\u80fd\u53f7\u76f8\u5bf9\u5e94 ;\u7f16\u7a0b\uff1a\u5b9e\u73b0\u4e00\u4e2a\u5b50\u7a0b\u5e8fsetscreen\uff0c\u4e3a\u663e\u793a\u8f93\u51fa\u63d0\u4f9b\u5982\u4e0b\u529f\u80fd\uff1a ;(1) \u6e05\u5c4f\u3002 ;(2) \u8bbe\u7f6e\u524d\u666f\u8272\u3002 ;(3) \u8bbe\u7f6e\u80cc\u666f\u8272\u3002 ;(4) \u5411\u4e0a\u6eda\u52a8\u4e00\u884c\u3002 ; ;\u5165\u53e3\u53c2\u6570\u8bf4\u660e\uff1a ;(1) \u7528 ah \u5bc4\u5b58\u5668\u4f20\u9012\u529f\u80fd\u53f7\uff1a0 \u8868\u793a\u6e05\u5c4f\uff0c1\u8868\u793a\u8bbe\u7f6e\u524d\u666f\u8272\uff0c2 \u8868\u793a\u8bbe\u7f6e\u80cc\u666f\u8272\uff0c3 \u8868\u793a\u5411\u4e0a\u6eda\u52a8\u4e00\u884c\uff1b ;(2) \u5bf9\u4e8e2\u30013\u53f7\u529f\u80fd\uff0c\u7528 al \u4f20\u9001\u989c\u8272\u503c\uff0c(al) \u2208{0,1,2,3,4,5,6,7} setscreen: jmp short set table dw sub1,sub2,sub3,sub4 set: push bx cmp ah,3 ;\u5224\u65ad\u4f20\u9012\u7684\u662f\u5426\u5927\u4e8e 3 ja sret mov bl,ah mov bh,0 add bx,bx ;\u6839\u636eah\u4e2d\u7684\u529f\u80fd\u53f7\u8ba1\u7b97\u5bf9\u5e94\u5b50\u7a0b\u5e8f\u7684\u5730\u5740\u5728table\u8868\u4e2d\u7684\u504f\u79fb call word ptr table[bx] ;\u8c03\u7528\u5bf9\u5e94\u7684\u529f\u80fd\u5b50\u7a0b\u5e8f\uff0c\u5b66\u4f1a\u672c\u53e5\u4ee3\u7801\uff0c\u662f\u672c\u7ae0\u8282\u7684\u3010\u7cbe\u9ad3\u3011 sret: pop bx iret ;\u529f\u80fd\u5b50\u7a0b\u5e8f1\uff1a\u6e05\u5c4f sub1: push bx push cx push es mov bx,0b800h mov es,bx mov bx,0 mov cx,2000 sub1s: mov byte ptr es:[bx],' ' add bx,2 loop sub1s pop es pop cx pop bx ret ;sub1 ends ;\u529f\u80fd\u5b50\u7a0b\u5e8f2\uff1a\u8bbe\u7f6e\u524d\u666f\u8272 sub2: push bx push cx push es mov bx,0b800h mov es,bx mov bx,1 mov cx,2000 sub2s: and byte ptr es:[bx],11111000b or es:[bx],al add bx,2 loop sub2s pop es pop cx pop bx ret ;sub2 ends ;\u529f\u80fd\u5b50\u7a0b\u5e8f3\uff1a\u8bbe\u7f6e\u80cc\u666f\u8272 sub3: push bx push cx push es mov cl,4 shl al,cl mov bx,0b800h mov es,bx mov bx,1 mov cx,2000 sub3s: and byte ptr es:[bx],10001111b or es:[bx],al add bx,2 loop sub2s pop es pop cx pop bx ret ; sub3 ends ;\u529f\u80fd\u5b50\u7a0b\u5e8f4\uff1a\u5411\u4e0a\u6eda\u52a8\u4e00\u884c sub4: push cx push si push di push es push ds mov si,0b800h mov es,si mov ds,si mov si,160 ;ds:si\u6307\u5411\u7b2cn+1\u884c mov di,0 ;es:di\u6307\u5411\u7b2cn\u884c cld mov cx,24;\u5171\u590d\u523624\u884c sub4s: push cx mov cx,160 rep movsb ;\u590d\u5236 pop cx loop sub4s mov cx,80 mov si,0 sub4s1: mov byte ptr es:[160*24+si],' ' ;\u6700\u540e\u4e00\u884c\u6e05\u7a7a add si,2 loop sub4s1 pop ds pop es pop di pop si pop cx ret ;sub4 ends","title":"\u7b2c\u5341\u516d\u7ae0 \u76f4\u63a5\u5b9a\u5740\u8868"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/#bios","text":"**\u5f15\u8a00 1.\u5927\u591a\u6570\u6709\u7528\u7684\u7a0b\u5e8f\u90fd\u9700\u8981\u5904\u7406\u7528\u6237\u7684\u8f93\u5165\uff0c\u952e\u76d8\u8f93\u5165\u662f\u6700\u57fa\u672c\u7684\u8f93\u5165\u3002 2.\u7a0b\u5e8f\u548c\u6570\u636e\u901a\u5e38\u9700\u8981\u957f\u671f\u5b58\u50a8\uff0c\u78c1\u76d8\u662f\u6700\u5e38\u7528\u7684\u5b58\u50a8\u8bbe\u5907\u3002 3.BIOS \u4e3a\u8fd9\u4e24\u79cd\u5916\u8bbe\u7684I/O\u63d0\u4f9b\u4e86\u6700\u57fa\u672c\u7684\u4e2d\u65ad\u4f8b\u7a0b\uff0c\u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u5bf9\u5b83\u4eec\u7684\u5e94\u7528\u548c\u76f8\u5173\u7684\u95ee\u9898\u8fdb\u884c\u8ba8\u8bba\u3002 17.1 int9\u4e2d\u65ad\u4f8b\u7a0b\u5bf9\u952e\u76d8\u8f93\u5165\u7684\u5904\u7406 CPU \u57289 \u53f7\u4e2d\u65ad\u53d1\u751f\u540e\uff0c\u6267\u884cint 9\u4e2d\u65ad\u4f8b\u7a0b\uff0c\u4ece60h \u7aef\u53e3\u8bfb\u51fa\u626b\u63cf\u7801\uff0c \u5e76\u5c06\u5176\u8f6c\u5316\u4e3a\u76f8\u5e94\u7684ASCII \u7801\u6216\u72b6\u6001\u4fe1\u606f\uff0c\u5b58\u50a8\u5728\u5185\u5b58\u7684\u6307\u5b9a\u7a7a\u95f4\uff08\u952e\u76d8\u7f13\u51b2\u533a\u6216\u72b6\u6001\u5b57\u8282\uff09\u4e2d\u3002 17.2 \u4f7f\u7528int16h\u4e2d\u65ad\u4f8b\u7a0b\u8bfb\u53d6\u952e\u76d8\u7f13\u51b2\u533a 1.BIOS\u63d0\u4f9b\u4e86int 16h \u4e2d\u65ad\u4f8b\u7a0b\u4f9b\u7a0b\u5e8f\u5458\u8c03\u7528\u3002 2.int 16h \u4e2d\u65ad\u4f8b\u7a0b\u4e2d\u5305\u542b\u7684\u4e00\u4e2a\u6700\u91cd\u8981\u7684\u529f\u80fd\u662f\u4ece\u952e\u76d8\u7f13\u51b2\u533a\u4e2d\u8bfb\u53d6\u4e00\u4e2a\u952e\u76d8\u8f93\u5165\uff0c\u8be5\u529f\u80fd\u7684\u7f16\u53f7\u4e3a0\u3002 3.\u4e0b\u9762\u7684\u6307\u4ee4\u4ece\u952e\u76d8\u7f13\u51b2\u533a\uff08\u7f13\u51b2\u533a\u7684\u6700\u4f4e\u4f4d\uff09\u4e2d\u8bfb\u53d6\u4e00\u4e2a\u952e\u76d8\u8f93\u5165\uff0c\u5e76\u4e14\u5c06\u5176\u4ece\u7f13\u51b2\u533a\u4e2d\u5220\u9664\uff1a mov ah,0 int 16h \u7ed3\u679c\uff1a(ah)=\u626b\u63cf\u7801\uff0c(al)=ASCII\u7801\u3002 4.int 16h \u4e2d\u65ad\u4f8b\u7a0b\u7684 0 \u53f7\u529f\u80fd\uff0c\u8fdb\u884c\u5982\u4e0b\u7684\u5de5\u4f5c\uff1a \uff081\uff09\u68c0\u6d4b\u952e\u76d8\u7f13\u51b2\u533a\u4e2d\u662f\u5426\u6709\u6570\u636e\uff1b \uff082\uff09\u6ca1\u6709\u5219\u7ee7\u7eed\u505a\u7b2c1 \u6b65\uff1b\uff08\u7f13\u51b2\u533a\u968f\u65f6\u6709\u53ef\u80fd\u8f93\u5165\u6570\u636e\uff09 \uff083\uff09\u8bfb\u53d6\u7f13\u51b2\u533a\u7b2c\u4e00\u4e2a\u5b57\u5355\u5143\u4e2d\u7684\u952e\u76d8\u8f93\u5165\uff1b \uff084\uff09\u5c06\u8bfb\u53d6\u7684\u626b\u63cf\u7801\u9001\u5165ah\uff0cASCII \u7801\u9001\u5165al\uff1b \uff085\uff09\u5c06\u5df1\u8bfb\u53d6\u7684\u952e\u76d8\u8f93\u5165\u4ece\u7f13\u51b2\u533a\u4e2d\u5220\u9664\u3002 5.\u53ef\u89c1\uff0cB1OS \u7684int 9 \u4e2d\u65ad\u4f8b\u7a0b\u548cint 16h \u4e2d\u65ad\u4f8b\u7a0b\u662f\u4e00\u5bf9\u76f8\u4e92\u914d\u5408\u7684\u7a0b\u5e8f\uff0c int 9 \u4e2d\u65ad\u4f8b\u7a0b\u5411\u952e\u76d8\u7f13\u51b2\u533a\u4e2d\u5199\u5165\uff0c int 16h \u4e2d\u65ad\u4f8b\u7a0b\u4ece\u7f13\u51b2\u533a\u4e2d\u8bfb\u51fa\u3002 \u5b83\u4eec\u5199\u5165\u548c\u8bfb\u51fa\u7684\u65f6\u673a\u4e0d\u540c\uff0cint 9 \u4e2d\u65ad\u4f8b\u7a0b\u5728\u6709\u952e\u6309\u4e0b\u7684\u65f6\u5019\u5411\u952e\u76d8\u7f13\u51b2\u533a\u4e2d\u5199\u5165\u6570\u636e\uff1b \u800cint 16h \u4e2d\u65ad\u4f8b\u7a0b\u662f\u5728\u5e94\u7528\u7a0b\u5e8f\u5bf9\u5176\u8fdb\u884c\u8c03\u7528\u7684\u65f6\u5019\uff0c\u5c06\u6570\u636e\u4ece\u952e\u76d8\u7f13\u51b2\u533a\u4e2d\u8bfb\u51fa\u3002 \u3010\u7f16\u7a0b\u3011\u63a5\u6536\u7528\u6237\u7684\u952e\u76d8\u8f93\u5165\uff0c\u8f93\u5165\u201cr\u201d\uff0c\u5c06\u5c4f\u5e55\u4e0a\u7684\u5b57\u7b26\u8bbe\u7f6e\u4e3a\u7ea2\u8272\uff1a\u8f93\u5165\u201cg\u201d\uff0c \u5c06\u5c4f\u5e55\u4e0a\u7684\u5b57\u7b26\u8bbe\u7f6e\u4e3a\u7eff\u8272\uff1b\u8f93\u5165\u201cb \u201d\uff0c\u5c06\u5c4f\u5e55\u4e0a\u7684\u5b57\u7b26\u8bbe\u7f6e\u4e3a\u84dd\u8272\u3002 ;\u7f16\u7a0b\uff1a ;\u63a5\u6536\u7528\u6237\u7684\u952e\u76d8\u8f93\u5165\uff0c\u8f93\u5165\u201cr\u201d\uff0c\u5c06\u5c4f\u5e55\u4e0a\u7684\u5b57\u7b26\u8bbe\u7f6e\u4e3a\u7ea2\u8272\uff1a\u8f93\u5165\u201cg\u201d\uff0c ;\u5c06\u5c4f\u5e55\u4e0a\u7684\u5b57\u7b26\u8bbe\u7f6e\u4e3a\u7eff\u8272\uff1b\u8f93\u5165\u201cb \u201d\uff0c\u5c06\u5c4f\u5e55\u4e0a\u7684\u5b57\u7b26\u8bbe\u7f6e\u4e3a\u84dd\u8272\u3002 ;A\u3001B\u3001C\u5904\u7684\u7a0b\u5e8f\u6307\u4ee4\u6bd4\u8f83\u6709\u6280\u5de7\uff0c\u8bf7\u8bfb\u8005\u81ea\u884c\u5206\u6790 code segment assume cs:code start: mov ah,0 int 16h ;int 16h 0\u53f7\u529f\u80fd\u5b9e\u73b0\u4ece\u952e\u76d8\u7f13\u51b2\u533a\u8bfb\u53d6\u4e00\u4e2a\u952e\u76d8\u8f93\u5165 mov ah,1 ;A cmp al,'r' je red cmp al,'g' je green cmp al,'b' je blue jmp short sret red: shl ah,1 ;B green: shl ah,1 ;C blue: mov bx,0b800h mov es,bx mov bx,1 mov cx,2000 s: and byte ptr es:[bx],11111000b ;\u8bbe\u7f6e\u989c\u8272 or es:[bx],ah ;\u8bbe\u7f6e\u989c\u8272 add bx,2 loop s sret: mov ax,4c00h int 21h code ends end start 17.3 \u5b57\u7b26\u4e32\u7684\u8f93\u5165 int 21h\u76840a\u53f7\u529f\u80fd\u53ef\u4ee5\u5b9e\u73b0\u5b57\u7b26\u4e32\u7684\u8f93\u5165 \u4e5f\u53ef\u4ee5\u7528int 16h\uff0c\u901a\u8fc7\u663e\u793a\u952e\u76d8\u7f13\u51b2\u533a\u4e2d\u7684\u5185\u5bb9\uff0c\u5b9e\u73b0\u5b57\u7b26\u4e32\u7684\u663e\u793a 1.\u4f7f\u7528int 16h\u663e\u793a\u5b57\u7b26\u4e32\u7a0b\u5e8f\u7684\u5904\u7406\u8fc7\u7a0b\u5982\u4e0b \u2460 \u8c03\u7528int 16h\u8bfb\u53d6\u952e\u76d8\u8f93\u5165\uff1b \u2461 \u5982\u679c\u662f\u5b57\u7b26\uff0c\u8fdb\u5165\u5b57\u7b26\u6808\uff0c\u663e\u793a\u5b57\u7b26\u6808\u4e2d\u7684\u6240\u6709\u5b57\u7b26\uff1b\u7ee7\u7eed\u6267\u884c\u2460 \uff1b \u2462 \u5982\u679c\u662f\u9000\u683c\u952e\uff0c\u4ece\u5b57\u7b26\u6808\u4e2d\u5f39\u51fa\u4e00\u4e2a\u5b57\u7b26\uff0c\u663e\u793a\u5b57\u7b26\u6808\u4e2d\u7684\u6240\u6709\u5b57\u7b26\uff1b\u7ee7\u7eed\u6267\u884c\u2460 \uff1b \u2463 \u5982\u679c\u662fEnter \u952e\uff0c\u5411\u5b57\u7b26\u6808\u4e2d\u538b\u51650\uff0c\u8fd4\u56de\u3002 2.\u5b50\u7a0b\u5e8f\uff1a\u5b57\u7b26\u6808\u7684\u5165\u6808\u3001\u51fa\u6808\u548c\u663e\u793a \u53c2\u6570\u8bf4\u660e (ah)=\u529f\u80fd\u53f7\uff0c0\u8868\u793a\u5165\u6808\uff0c1\u8868\u793a\u51fa\u6808\uff0c2\u8868\u793a\u663e\u793a\uff1b ds : si \u6307\u5411\u5b57\u7b26\u6808\u7a7a\u95f4\uff1b \u5bf9\u4e8e0 \u53f7\u529f\u80fd\uff1a(al)=\u5165\u6808\u5b57\u7b26\uff1b \u5bf9\u4e8e1 \u53f7\u529f\u80fd\uff1a(al)=\u8fd4\u56de\u7684\u5b57\u7b26\uff1b \u5bf9\u4e8e2 \u53f7\u529f\u80fd\uff1a(dh)\u3001(dl) =\u5b57\u7b26\u4e32\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\u7684\u884c\u3001\u5217\u4f4d\u7f6e\u3002 ;\u4f7f\u7528int 16h\u663e\u793a\u5b57\u7b26\u4e32\u7684\u5b50\u7a0b\u5e8f\uff1a\u5b57\u7b26\u6808 ;\u6700\u57fa\u672c\u7684\u5b57\u7b26\u4e32\u8f93\u5165\u7a0b\u5e8f\uff0c\u9700\u8981\u5177\u5907\u4e0b\u9762\u7684\u529f\u80fd\uff1a ;\uff081\uff09 \u5728\u8f93\u5165\u7684\u540c\u65f6\u9700\u8981\u663e\u793a\u8fd9\u4e2a\u5b57\u7b26\u4e32\uff1b ;\uff082\uff09\u4e00\u822c\u5728\u8f93\u5165\u56de\u8f66\u7b26\u540e\uff0c\u5b57\u7b26\u4e32\u8f93\u5165\u7ed3\u675f\uff1b ;\uff083\uff09\u80fd\u591f\u5220\u9664\u5df2\u7ecf\u8f93\u5165\u7684\u5b57\u7b26\u3002 ;\u7f16\u5199\u4e00\u4e2a\u63a5\u6536\u5b57\u7b26\u4e32\u7684\u8f93\u5165\u5b50\u7a0b\u5e8f\uff0c\u5b9e\u73b0\u4e0a\u9762\u4e09\u4e2a\u57fa\u672c\u529f\u80fd\u3002 ;\u56e0\u4e3a\u5728\u8f93\u5165\u7684\u8fc7\u7a0b\u4e2d\u9700\u8981\u663e\u793a\uff0c\u5b50\u7a0b\u5e8f\u7684\u53c2\u6570\u5982\u4e0b\uff1a ; (dh)\u3001(dl)=\u5b57\u7b26\u4e32\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\u7684\u884c\u3001\u5217\u4f4d\u7f6e\uff1b ; ds:si \u6307\u5411\u5b57\u7b26\u4e32\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u5b57\u7b26\u4e32\u4ee5O \u4e3a\u7ed3\u5c3e\u7b26\u3002 ;\u529f\u80fd\u5b50\u7a0b\u5e8f\u5b9e\u73b0 charstack: jmp short charstart table dw charpush,charpop,charshow top dw 0 ;\u6808\u9876 charstart: push bx push dx push di push es cmp ah,2 ja sret mov bl,ah mov bh,0 add bx,bx jmp word ptr table[bx] ;\u4f7f\u7528\u76f4\u63a5\u5b9a\u5740\u8868 charpush: mov bx,top mov [si][bx],al inc top jmp sret charpop: cmp top,0 je sret dec top mov bx,top mov al,[si][bx] jmp sret charshow: mov bx,0b800h mov es,bx mov al,160 mov ah,0 mul dh mov di,ax add dl,dl mov dh,0 add di,dx mov bx,0 charshows: cmp bx,top jne noempty mov byte ptr es:[di],' ' jmp sret noempty: mov al,[si][bx] mov es:[di],al mov byte ptr es:[di+2],' ' inc bx add di,2 jmp charshows sret: pop es pop di pop dx pop bx ret 17.4 \u5e94\u7528int13h\u4e2d\u65ad\u4f8b\u7a0b\u5bf9\u952e\u76d8\u8fdb\u884c\u8bfb\u5199 1.\u78c1\u76d8\u7684\u5b9e\u9645\u8bbf\u95ee\u7531\u78c1\u76d8\u63a7\u5236\u5668\u8fdb\u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236\u78c1\u76d8\u63a7\u5236\u5668\u6765\u8bbf\u95ee\u78c1\u76d8\u3002 2.\u6ce8\u610f\uff0c\u6211\u4eec\u53ea\u80fd\u4ee5\u6247\u533a\u4e3a\u5355\u4f4d\u5bf9\u78c1\u76d8\u8fdb\u884c\u8bfb\u5199\u3002 \u5728\u8bfb\u5199\u6247\u533a\u7684\u65f6\u5019\uff0c\u8981\u7ed9\u51fa\u9762\u53f7\u3001\u78c1\u9053\u53f7\u548c\u6247\u533a\u53f7\u3002\u9762\u53f7\u548c\u78c1\u9053\u53f7\u4ece0\u5f00\u59cb\uff0c\u800c\u6247\u533a\u53f7\u4ece1\u5f00\u59cb\u3002 3.BIOS\u63d0\u4f9b\u4e86\u5bf9\u6247\u533a\u8fdb\u884c\u8bfb\u5199\u7684\u4e2d\u65ad\u4f8b\u7a0b\uff0c\u8fd9\u4e9b\u4e2d\u65ad\u4f8b\u7a0b\u5b8c\u6210\u4e86\u8bb8\u591a\u590d\u6742\u7684\u548c\u786c\u4ef6\u76f8\u5173\u7684\u5de5\u4f5c\u3002 4.\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528BIOS\u4e2d\u65ad\u4f8b\u7a0b\u6765\u8bbf\u95ee\u78c1\u76d8\u3002 BIOS \u63d0\u4f9b\u7684\u8bbf\u95ee\u78c1\u76d8\u7684\u4e2d\u65ad\u4f8b\u7a0b\u4e3aint 13h \u3002 \u5982\u4e0b\uff0c\u8bfb\u53d60\u97620\u90531\u6247\u533a\u7684\u5185\u5bb9\u52300:200\uff1a","title":"\u7b2c\u5341\u4e03\u7ae0 \u4f7f\u7528BIOS\u8fdb\u5165\u952e\u76d8\u8f93\u5165\u548c\u78c1\u76d8\u8bfb\u5199"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/","text":"\u7ebf\u6027\u4ee3\u6570 \u00b6 \u8bf4\u660e \u00b6 \u674e\u5b8f\u6bc5\u8001\u5e08\u7684\u7ebf\u6027\u4ee3\u6570\u7b14\u8bb0 Youtube\uff1a Hung-yi Lee - YouTube \u8bfe\u7a0b\u89c6\u9891\uff1a \u3010\u674e\u5b8f\u6bc5\u3011Linear Algebra \u7dda\u6027\u4ee3\u6578 (2018,Fall) \u7b14\u8bb0\u53c2\u8003\uff1a leela-notes: \u674e\u5b8f\u6bc5\u300a\u7ebf\u6027\u4ee3\u6570\u300b\u7b14\u8bb0 \u674e\u5b8f\u6bc5\u300aLinear Algebra\u300b\u5b66\u4e60\u7b14\u8bb0_\u674e\u5b8f\u6bc5\u7ebf\u6027\u4ee3\u6570\u7b14\u8bb0 1_What are we going to learn? \u00b6 System \u00b6 system \u8868\u793a\u4e00\u4e2a\u6709 input \u548c output \u7684\u7cfb\u7edf\uff0c\u4e5f\u53ef\u4ee5\u53eb\u505a function\uff0ctransformation\uff0coperator \u6bd4\u5982\uff1a\u8bed\u8a00\u8bc6\u522b\uff0c\u8bed\u97f3\u52a9\u624b\uff0c\u7535\u8bdd Two properties \u00b6 persevering multiplication persevering addition \u4e3e\u4e2a\u53cd\u4f8b\uff1a \\(input:x,\\ output:x^2\\) \u5c31\u4e0d\u662f\u4e00\u4e2a Linear System \u8fd9 2 \u4e2a\u6027\u8d28\u5bf9\u591a\u8f93\u5165\u7684 system \u540c\u6837\u9002\u7528 Application \u00b6 Circuits \u7535\u8def\u4e2d input \u662f\u7535\u538b\u6e90\u6216\u8005\u7535\u6d41\u6e90\uff0coutput \u662f\u8d1f\u8f7d\u4e0a\u7684\u7535\u6e90\u548c\u7535\u6d41 \u4fe1\u53f7\u4e0e\u7cfb\u7edf Fourier Transorm \u5176\u5b9e\u662f Linear System\uff0c\u53ea\u662f\u4ece 2 \u7ed9\u4e0d\u540c\u7684\u89d2\u5ea6\u89c2\u770b\u540c\u4e00\u4e2a\u4fe1\u53f7 PageRank \u641c\u7d22\u5f15\u64ce\u4e2d\u5bf9\u4e0d\u540c\u7f51\u9875\u7684\u6392\u5e8f\uff0c\u540e\u9762\u4f1a\u7ec6\u8bb2 Computer Graphics \u56fe\u5f62\u7684\u53d8\u6362\uff0c\u6bd4\u5982\u65cb\u8f6c 2_System of linear equations \u00b6 System of Linear Equations\uff1a\u591a\u5143\u4e00\u6b21\u8054\u7acb\u65b9\u7a0b\u5f0f \u672f\u8bed \u00b6 \u5b9a\u4e49\u57df && \u503c\u57df \u00b6 Domain(\u5b9a\u4e49\u57df)\uff1ainput \u7684\u96c6\u5408 Range(\u503c\u57df) \u662f output \u7684\u96c6\u5408\uff0c\u6bd4 Co-domain(\u5bf9\u5e94\u57df) \u5c0f\u6216\u8005\u76f8\u540c Co-domain \u6307\u7684\u662f\u5bf9\u4e00\u4e2a function \u4e0d\u5047\u601d\u7d22\u7684 output\u7684\u8303\u56f4\uff0c\u6bd4\u5982 \\(y=x^2\\) \uff0cinput \u662f\u5b9e\u6570\uff0c\u4e0d\u5206\u6790\u8fd9\u4e2a function \u7684\u5185\u6db5\uff0c output \u4e5f\u4e00\u5b9a\u662f\u5b9e\u6570\uff0c\u6240\u4ee5 Co-domain \u662f\u5b9e\u6570 \u4e00\u5bf9\u4e00 && \u6620\u6210 \u00b6 One-to-one\uff1a\u4e00\u5bf9\u4e00\uff0c\u5355\u5c04 Onto\uff1aRange \u7b49\u4e8e Co-domain\uff0c\u6ee1\u5c04 \u7ebf\u6027\u7cfb\u7edf \u4e0e \u7ebf\u6027\u65b9\u7a0b\u7ec4 \u00b6 \u53ea\u9700\u8981\u6ee1\u8db3 Linear System \u7684\u4e24\u4e2a properties \u5c31\u662f\u7ebf\u6027\u7cfb\u7edf Linear system \u5e76\u4e0d\u662f\u4e00\u6761\u659c\u7740\u7684\u76f4\u7ebf\uff0c\u6bd4\u5982 \u5fae\u5206 \u4e0e \u79ef\u5206 \u540c\u6837\u4e5f\u662f\u7ebf\u6027\u7cfb\u7edf\uff08\u6240\u4ee5\u8bf4 Fourier Transorm \u662f\u7ebf\u6027\u7cfb\u7edf\uff09\uff0c\u56e0\u4e3a\u4ed6\u4eec\u6ee1\u8db3\u4e24\u4e2a properties \u8fd9\u95e8\u8bfe\u7814\u7a76\u7684 Linear System \u8f93\u5165\u662f\u4e00\u4e2a n \u7ef4\u7684 \u5411\u91cf\uff0c\u8f93\u51fa\u662f\u4e00\u4e2a m \u7ef4\u5411\u91cf\uff0c\u8fd9\u79cd\u8868\u793a\u65b9\u5f0f\u53ef\u4ee5 apply \u5728\u975e\u5e38\u591a\u7684\u5730\u65b9 \u8fd9\u79cd Linear System \u53ef\u4ee5\u5199\u6210 System of linear equations 3_Vector \u00b6 \u5982\u679c\u4e0d\u523b\u610f\u8bf4\u660e\uff0c\u5411\u91cf\u90fd\u8ba4\u4e3a\u662f \u5217\u5411\u91cf \\(R^n\\) \u4ee3\u8868\u6240\u6709 n \u7ef4\u5411\u91cf\u7684\u96c6\u5408\uff0c\u6bd4\u5982 \\(R^2\\) \u8868\u793a\u6574\u4e2a 2 \u7ef4\u5e73\u9762 4_Matrix \u00b6 \u8bb2 Vector \u653e\u5728\u4e00\u8d77\uff0c\u5c31\u53d8\u6210\u4e86 Matrix \\[ A=[a_1,a_2,a_3]=\\begin{bmatrix} 2 &3 &5 \\\\ 3 & 1 & -1\\\\ -2& 1& 1 \\end{bmatrix} \\] \\(M_{n\\times m}\\) \u8868\u793a\u6240\u6709 n \u884c m \u5217\u7684 Matrix\uff08\u5148 row \u518d column\uff09 \u7279\u6b8a\u77e9\u9635\uff1a \\(O\\) \uff1a\u6240\u6709 element \u90fd\u662f 0 \u7684\u77e9\u9635\uff0c\u53ef\u4ee5\u662f\u4efb\u4f55\u7684 size\uff0c \\(O_{2\\times3}\\) \u6307\u5b9a\u5927\u5c0f \\(I\\) \uff1aIdentity matrix\uff0c\u5355\u4f4d\u77e9\u9635\uff0c\u5fc5\u987b\u662f\u6b63\u65b9\u5f62\u4e14\u5de6\u4e0a\u5230\u53f3\u4e0b\u7684\u5143\u7d20\u662f1\uff0c\u5176\u4ed6\u662f 0\uff0c \\(I_2\\) \u8868\u793a\u662f \\(2\\times 2\\) \u7684\u5927\u5c0f 5_Matrix-vector product \u00b6 \u5047\u8bbe \\(A\\) \u662f Matrix\uff0c \\(x\\) \u662f Vector \\(Ax\\) \u53ef\u4ee5\u770b\u6210\u662f\u591a\u5143\u8054\u7acb\u65b9\u7a0b\u5f0f \u4ece\u884c\u7684\u89d2\u5ea6\uff1a \\(Ax\\) \u53ef\u4ee5\u770b\u6210 Matrix \u7684\u6bcf\u4e00\u884c\u548c \\(x\\) \u505a\u5185\u79ef\u7ec4\u6210\u7684 Vector \u4ece\u5217\u7684\u89d2\u5ea6\uff1a \\(A\\) \u4e2d\u7684\u6bcf\u5217\uff08\u6bcf\u5217\u662f\u4e00\u4e2aVector\uff09\u505a \\(x\\) \u7684\u7ebf\u6027\u7ec4\u5408 \u5982\u679c \\(A\\) \u548c \\(B\\) \u90fd\u662f \\(m\\times n\\) \u7684 Matrix\uff0c \\(Aw=Bw\\) \u5bf9\u4efb\u610f\u7684 \\(w\\) \u6210\u7acb\uff0c \\(A=B\\) 6_Having solution or not \u00b6 System of Linear Equations \u662f\u5426\u6709\u89e3\uff1f \u65b9\u7a0b\u6709\u89e3\u5c31\u8bf4\u662f consistent\uff08\u76f8\u5bb9\u7684\uff09\uff0c\u4e0d\u7136\u5c31\u662f inconsistent \u4e8c\u7ef4\u4e2d 2 \u4e2a\u975e\u5e73\u884c\u7684 Vector \u53ef\u4ee5\u8868\u793a\u4efb\u4f55\u7684 Vector\uff08\u9ad8\u7ef4\u4e0d\u4e00\u5b9a\uff09\uff0c\u4e8c\u7ef4\u4e2d\u975e\u5e73\u884c\u4e00\u5b9a\u6709\u89e3\uff0c\u6709\u89e3\u4e0d\u4e00\u5b9a\u975e\u5e73\u884c Span \u00b6 \u4e00\u4e2a Vector Set \\(S=\\{v_1, v_2, ...\\}\\) \u7684\u6240\u6709 Linear Combination \u7684\u96c6\u5408\uff0c\u53eb\u505a Span S \u5047\u5982\u4e00\u4e2a Vector Set \\(V\\) = Span \\(S\\) \uff0c\u90a3 \\(S\\) \u5c31\u662f \\(V\\) \u7684 generating set Standard Vector\uff1a\u6807\u51c6\u5411\u91cf \u6709\u6ca1\u6709\u89e3\u7684\u95ee\u9898\u53ef\u4ee5\u53d8\u6210 \\(A\\) \u7684 \u6240\u6709 column \u8fdb\u884c Span \u5f97\u5230\u7684 Vector Set V \u4e2d\u662f\u5426\u6709 B 7_How many solutions \u00b6 \u6709\u89e3\u7684\u60c5\u51b5\u4e0b\u6709\u591a\u5c11\u89e3\uff1f \u552f\u4e00\u89e3\uff1a \\(A\\) \u7684 column \u662f independent \u6216\u8005 \\(Rank\\ A = n\\) \u6216\u8005 \\(Nullity\\ A=0\\) \u65e0\u7a77\u591a\u89e3\uff1a \\(A\\) \u7684 column \u662f dependent \u7b49\u4e8e \\(Rank\\ A < n\\) \u6216\u8005 \\(Nullity\\ A>0\\) \u5176\u4e2d \\(Rank+Nullity=n\\) homogeneous \uff1a\u9f50\u6b21\u7684\uff0c\u82e5\u6709\u4e00\u4e2a system linear equation \u7684 constant term \u7b49\u4e8e 0\uff08 \\(b=0\\) \uff09\uff0c\u90a3\u4e48\u5c31\u8bf4\u662f\u9f50\u6b21\u7684\uff0c homogeneous linear equation\u4e00\u5b9a\u6709\u89e3\uff0c\u81f3\u5c11\u6709\u4e00\u7ec4\u89e3\u662f Zero Vector geneous\uff1a\u975e\u9f50\u6b21 \u8bc1\u660e\u6709\u89e3\u65f6 dependent \u6709\u65e0\u7a77\u591a\u89e3 \uff1a \u6613\u8bc1 \\(Au=0\\) \u6709\u65e0\u7a77\u89e3\uff0c\u53c8 \\(Av=b\\) \u6709\u89e3\uff0c\u76f8\u52a0\u5373\u53ef Dependent \u00b6 \u7ebf\u6027\u76f8\u5173\uff08dependent\uff09\u4e0e \u7ebf\u6027\u65e0\u5173\uff08independent\uff09 \u4e00\u7ec4 Vector Set \u662f dependent \u7684\u6ee1\u8db3\uff1a\u80fd\u627e\u5230\u4e00\u7ec4 scalar \u4e0d\u5168\u4e3a 0\uff0c\u5bf9 Vector Set \u4f5c Linear Combination \u540e\u4e3a zero Vector\uff0c\u5426\u5219\u5c31\u662f independent Rank && Nullity \u00b6 Rank\uff1aMatrix \u4e2d\u6700\u591a\u7684 independent columns \u7684\u6570\u76ee Nullity\uff1a \\(n-Rank\\) 8_Solving system of linear equations \u00b6 \u4e09\u79cd\u7b49\u4ef7\u53d8\u5316\uff1a Interchange any two rows of the matrix Multiply every entry of some row by the same nonzero scalar Add a multiple of one row of the matrix to another row RREF \u00b6 RREF\uff1aReduced Row Echelon Form\uff0c\u7b80\u5316\u5217\u68af\u5f62\u77e9\u9635 Row Echelon Form\uff1a Each nonzero row lies above every zero row The leading entries are in echelon form RREF \uff1a Row Echelon Form The columns containing the leading entries are standard vectors Gaussian elimination \uff1aan algorithm for finding the reduced row echelon form of a matrix 9_What can we know from RREF \u00b6 Augmented Matrix\uff1a\u589e\u5e7f\u77e9\u9635 RREF v.s. Linear Combination \u00b6 Column Correspondence Theorem\uff1a\u521d\u7b49\u53d8\u6362\u4e0d\u6539\u53d8\u5217\u4e0e\u5217\u4e4b\u95f4\u7684\u7ebf\u6027\u7ec4\u5408\u5173\u7cfb \u5047\u8bbe \\(R\\) \u662f \\(A\\) \u7684 RREF\uff0cSpan \\(A\\) = Span \\(R\\) RREF v.s. Independent \u00b6 pivot columns\uff1aRREF \u4e2d\u7684 Leading entries \u6240\u5728\u5217\u5bf9\u5e94\u5230 \\(A\\) \u7684\u5217\uff0c\u662f independent \u7684 The non-pivot columns are the linear combination of the previous pivot columns Independent\uff1aEvery column in RREF(A) is standard vector \u6216\u8005 Every column is a pivot column \u77ee\u80d6\u578b\u7684 Matrix\uff1a\u884c\u6570 < \u5217\u6570 => dependent More than m vectors\uff08\u5217\u5411\u91cf\uff09 in \\(R^m\\) must be dependent \u4ee5 \\(2\\times3\\) \u7684\u77ee\u80d6\u578b Matrix \u4e3e\u4f8b\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a input 3\u7ef4\uff0coutput 2 \u7ef4\uff0c\u4e5f\u5c31\u662f\u964d\u7ef4\uff0c\u90a3\u4e48 output\uff08b\uff09\u5728\u9ad8\u7ef4\uff08input\uff09\u4e0a\u7684\u6620\u5c04\u5c31\u53ef\u4ee5\u662f\u65e0\u7a77\u591a\u4e2a\u70b9 RREF v.s. Rank \u00b6 Rank = Maximum number of Independent Columns \u200b = Number of Pivot Column \u200b = Number of Non-zero rows in RREF Properties of Rank from RREF\uff1a Rank A \u2264 min(m, n) If m < n, the columns of A is dependent In \\(R^m\\) , you cannot find more than m vectors that are independent Rank = Maximum number of Independent Columns \u6216\u8005 Number of Pivot Column \u6216\u8005 Number of Non-zero rows of RREF \u6216\u8005 Number of Basic Variables Nullity = no. column - rank \u6216\u8005 Number of Free Equations Nullity \\(\\not =\\) Number of zero rows of RREF RREF v.s. Span \u00b6 Given \\(Ax=b\\) Rank A \\(\\not=\\) rank [A b] Ax = b is consistent for every b \\(\\Harr\\) RREF of [A b] cannot have a row whose only non-zero entry is at the last column \\(\\Harr\\) RREF of A cannot have zero row \\(\\Harr\\) Rank A = no. of rows 10_Matrix Multiplication \u00b6 Definition \u00b6 \\(C=AB\\) \uff0c \\(C\\) \u8fd9\u4e2a\u53d8\u6362\u53ef\u4ee5\u7406\u89e3\u6210 input \u5148\u7ecf\u8fc7 \\(B\\) \u53d8\u6362\u518d\u7ecf\u8fc7 \\(A\\) \u53d8\u5316 4 \u4e2a\u4e0d\u540c\u7684\u89d2\u5ea6\u770b Matrix Multiplication \u884c\u5217\uff0cinner product\uff0c \\(c_{ij}\\) \u4e3a \\(A\\) \u7684 \\(i\\) \u884c \u4e0e \\(B\\) \u7684 \\(j\\) \u5217\u7684\u5185\u79ef \u5217\u5217\uff0cLinear combination of columns\uff0c\u5bf9 \\(A\\) \u4e2d column \u505a \\(B\\) \u7684\u5217\u6570\u6b21\u4e0d\u540c\u7684\u7ebf\u6027\u7ec4\u5408\uff0c\u7136\u540e\u6a2a\u5411\u7ec4\u5408\u8d77\u6765 \u884c\u884c\uff0cLinear combination of rows\uff0c\u5bf9 \\(B\\) \u4e2d row \u505a \\(A\\) \u7684\u5217\u6570\u6b21\u4e0d\u540c\u7684\u7ebf\u6027\u7ec4\u5408\uff0c\u7136\u540e\u7eb5\u5411\u7ec4\u5408\u8d77\u6765 \u5217\u884c\uff0csummation of matrices\uff0c \\(C=AB=a_1b_1^T+a_2b_2^T+...+a_nb_n^T\\) \uff0c\u53ef\u4ee5\u770b\u6210\u662f\u4e00\u5806 Rank=1 \u7684 Matrix \u76f8\u52a0 Block Multiplication \u5206 Block \u7684\u65b9\u5f0f\uff1aA \u4e2d\u5217\u7684\u5212\u5206\u548c B \u4e2d\u884c\u7684\u5212\u5206\u5bf9\u5e94\uff0cA \u4e2d\u884c\u7684\u5212\u5206\u5bf9\u5e94 B \u4e2d\u5217\u7684\u5212\u5206 Property \u00b6 \\(AB\\not=BA\\) \\((AC)^T=C^TA^T\\) \\(A(CP)=(AC)P\\) \uff0c\u4f46\u662f\u4e0d\u540c\u7684\u65b9\u5f0f\u8fd0\u7b97\u91cf\u533a\u522b\u4f1a\u5f88\u5927 Special Matrix \u00b6 Diagonal Matrix\uff1a\u5bf9\u89d2\u77e9\u9635 Symmetric Matrix\uff1a\u5bf9\u79f0\u77e9\u9635 11_Matrix Inverse \u00b6 Definition \u00b6 \u7ed9\u5b9a 2 \u4e2a function \\(A\\) \uff0c \\(B\\) \uff0c\u5982\u679c for any \\(v\\) \uff0c \\(g(f(v))=v\\) \u4e14 \\(f(g(v))=v\\) \uff0c\u90a3\u4e48 \\(g\\) \u548c \\(v\\) \u662f\u4e92\u9006\u7684 \u5bf9\u77e9\u9635\u6765\u8bf4\uff0c\u5982\u679c \\(AB=I\\) \u4e14 \\(BA=I\\) \uff0c\u90a3 \\(A\\) \u548c \\(B\\) \u662f\u4e92\u9006\u7684 \u5229\u7528\u9006\u77e9\u9635\u6c42\u89e3 system of linear equations\uff1a \\(Ax=b\\Rightarrow x=A^{-1}b\\) \uff08\u624b\u7b97\u7684\u6548\u7387\u5e76\u4e0d\u9ad8\uff0c\u4e0d\u5982\u76f4\u63a5\u6c42 RREF\uff09 Property \u00b6 \\(A\\) \u7684\u4e92\u9006\u77e9\u9635\u662f\u552f\u4e00\u7684\uff0c\u8bc1\u660e\uff1a\u6709 \\(AB=I,BA=I,AC=I,CA=I\\) \uff0c\u90a3\u4e48 \\(B=BI=B(AC)=(BA)C=IC=C\\) \u5982\u679c \\(A\\) \u4e0d\u662f square\uff0c\u90a3\u5fc5\u4e0d\u662f invertible \u7684\uff0c\u56e0\u4e3a \\(AB\\) \u6216\u8005 \\(BA\\) \u8868\u793a\u7684 function \u5fc5\u5b9a\u6709\u4e00\u79cd\u60c5\u51b5\u662f\u8868\u793a\u5148\u4ece\u9ad8\u7ef4\u53d8\u5316\u5230\u4f4e\u7ef4\u7136\u540e\u53d8\u56de\u9ad8\u7ef4\uff0c\u65e0\u6cd5\u56de\u5230\u539f\u6837 \\((AB)^{-1}=B^{-1}A^{-1}\\) \\((A^T)^{-1}=(A^{-1})^T\\) \uff0c\u53ef\u4ee5\u8bc1\u660e \\(A\\) \u662f invertible \u65f6\uff0c \\(A^T\\) \u4e5f\u662f invertible Invertible \u00b6 One-to-one \u7684\u60c5\u51b5\u4e0b\uff0c\u90a3\u81f3\u591a\u4e00\u4e2a\u89e3\uff08 \\(b\\) \u53ef\u80fd\u4e0d\u5728 Range \u91cc\uff09 Onto \u7684\u60c5\u51b5\u4e0b\uff0c\u6c38\u8fdc\u6709\u89e3\uff08Co-domain \u548c Range \u4e00\u6837\u5927\uff0c \\(b\\) \u6c38\u8fdc\u5728 Range \u4e2d\uff09 Domain \u548c Co-domain \u5fc5\u987b\u8981\u540c\u7ef4\u5ea6\u624d\u662f invertible \u7684 \u5982\u679c \\(A\\) \u662f Square \u7684\uff0cOne-to-one \\(\\Leftrightarrow\\) Onto \\(A\\) \u662f invertible \u7b49\u6548\u4e8e \u4e00\u822c\u60c5\u51b5\u4e0b\u68c0\u67e5\u662f\u5426 Invertible \u90fd\u76f4\u63a5\u7b97 RREF \u662f\u5426\u4e3a \\(I\\) \u5982\u679c \\(A_{n\\times n}\\) \u5b58\u5728 \\(BA=I\\) \uff0c\u90a3 \\(A\\) \u662f invertible \u7684\uff0c \\(AB=I\\) \u4e00\u6837 \u5229\u7528\u53cd\u8bc1\u6cd5\uff0c\u5047\u8bbe \u5b58\u5728 \\(v\\not= 0\\) \u4f7f \\(Av=0\\) Inverse of Elementary Matrices \u00b6 Elementary Matrices\uff1a\u521d\u7b49\u77e9\u9635\uff0c\u5373\u521d\u7b49\u884c\u53d8\u6362\u5bf9\u5e94\u7684\u77e9\u9635 \u8fd9\u4e9b Matrix \u7684 inverse \u6309\u7167\u5176\u521d\u7b49\u884c\u53d8\u6362\u7684\u610f\u4e49\u5373\u53ef\u7b97\u51fa\u5176 inverse invertible \u7684 Matrix \u76f8\u4e58\u4ecd\u7136\u662f invertible \u7684 invertible \u7684 Matrix \u53ef\u4ee5\u5199\u6210 product of elementary matrix Inverse of General Matrices \u00b6 \u901a\u8fc7 \\(E_1...E_nA=R\\) \u5f97\u5230 \\(A\\) \u7684 inverse\uff0c\u5176\u4e2d \\(R\\) \u662f RREF \u65b9\u6cd5\u662f Transform \\([A\\ I_n]\\) to its \\([R\\ B]\\) \uff0c\u5176\u4e2d \\(B=E_n...E_1\\) \uff0c\u5c31\u662f \\(A\\) \u7684 inverse \u5982\u679c\u8981\u6c42 \\(A^{-1}C\\) \uff0c\u90a3\u628a\u4e0a\u9762\u7684 \\([A\\ I_n]\\) \u53d8\u6210 \\([A\\ C]\\) \u5373\u53ef 12_Subspace \u00b6 \u5b9a\u4e49\uff1a Subspace \u548c Span \u7684\u5173\u7cfb Null Space \u5b9a\u4e49\uff1a Column Space and Row Space\uff1a Original Matrix A and its RREF R \u4e2d $$ Col A \\not = Col R \\ Row A = Row A $$ 13_Basis \u00b6 Basis\uff1a\u57fa \u8981\u627e Matrix A \u7684 Col A \u7684 basis\uff0c\u627e RREF \u7684 pivot columns \u8981\u786e\u5b9a\u4e00\u7ec4 vector \u662f\u5426\u662f\u4e00\u4e2a Subspace \u7684 basis\uff0c\u770b\u4e24\u8005\u5bf9\u5e94\u7684\u7ef4\u5ea6\u662f\u5426\u4e00\u81f4\u5373\u53ef 14_Column Space, Null Space, Row Space \u00b6 \u4e09\u4e2a Space \u6240\u5728\u7684\u7ef4\u5ea6\uff1a \u4e09\u4e2a Space \u7684 Basis\uff1a Col A\uff1a The pivot columns of A form a basis for Col A Basis\uff1a \\(Col \\ A=Span\\{pivot\\ columns\\}\\) Dim(Col A) = number of pivot columns = rank A Null A: Basis: Solving Ax = 0 Each free variable in the parametric representation of the general solution is multiplied by a vector. The vectors form the basis. Dim (Null A) = number of free variables = Nullity A = n - Rank A Row A\uff1a Basis: Nonzero rows of RREF(A) Dim (Row A) = Number of Nonzero rows = Rank A Rank \u80fd\u4ee3\u8868\u7684\u542b\u4e49\uff1a \\[ Rank\\ A = Dim(Col\\ A) \\\\ Rank\\ A = Dim(Row\\ A) = Dim(Col\\ A^T)=Rank\\ A^T \\] \u53ef\u4ee5\u5f97\u5230 \\(Rank\\ A = Rank\\ A^T\\) \u603b\u7ed3\uff1a 15_Coordinate System \u00b6 Coordinate System\uff1a\u5750\u6807\u7cfb Basis \u7684\u8f6c\u6362\uff1a \u5176\u4ed6\u7684 Coordinate System \u4e0e Cartesian\uff08\u7b1b\u5361\u5c14\u5750\u6807\u7cfb\uff09\u4e4b\u95f4\u7684\u8f6c\u53d8\uff1a 16_Linear Function in Coordinate System \u00b6 17_Determinant \u00b6 \u884c\u5217\u5f0f 18_Eigenvalues and Eigenvectors \u00b6 19_Diagonalization \u00b6 \u5bf9\u89d2\u5316\uff0c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u8ba1\u7b97 \\(A^n\\) $$ A=PDP^{-1} $$ 20_Page Rank \u00b6 21_Orthogonality \u00b6 Norm\uff1a\u8303\u6570\uff0c \\(||v||_p=(\\sum|v_i|^p)^{1/p}\\) Distance\uff1a \\(||u-v||\\) Dot Product\uff1a\u70b9\u4e58 Orthogonal\uff1aif \\(u\\cdot v=0\\) \uff0c \\(u\\) and \\(v\\) are Orthogonal\uff0cand \\(||u+v||^2=||u||^2+||v||^2\\) \uff08\u52fe\u80a1\u5b9a\u7406\uff09 \u200b \\(||u+v||^2=||u||^2+||v||^2+2(u\\cdot v)\\) \uff08\u4f59\u5f26\u5b9a\u7406\uff09 22_Orthogonal Projection \u00b6 \u5047\u8bbe\u6709\u4e00\u4e2a vector set \\(S\\) \uff0c \\(S^{\\perp}\\) \u8868\u793a\u4e00\u4e2a vector set\uff0c\u5176\u4e2d\u7684\u6240\u6709 vector \\(v\\) \u4e0e \\(S\\) \u4e2d\u7684 \\(u\\) \uff0c\u6709 \\(u\\cdot v=0\\) Orthogonal Projection\uff1a\u6b63\u4ea4\u6295\u5f71\uff0c \\(P_w=C(C^TC)^{-1}C^T\\) 23_Orthogonal Basis \u00b6 Orthogonal Set\uff1a\u4e24\u4e24\u5782\u76f4\u7684 Vector Set\uff0c\u4e0d\u4e00\u5b9a\u662f independent \u7684\uff08 0 \u5411\u91cf\uff09 Orthonormal Set\uff1aOrthogonal Set \u4e2d\u6bcf\u4e2a\u5411\u91cf\u7684\u957f\u5ea6\u90fd\u4e3a 1\uff0c\u4e00\u5b9a\u662f independent \u7684 Orthogonal Projection\uff1a How to find a orthogonal basis\uff1f \u65bd\u5bc6\u7279\u6b63\u4ea4\u5316\uff08Schmidt orthogonalization\uff09\uff1a\u7b2c\u4e00\u4e2a\u5411\u91cf\u76f4\u63a5\u7528\uff0c\u7b2c\u4e8c\u4e2a\u5411\u91cf\u53bb\u6389\u5176\u5728\u7b2c\u4e00\u4e2a\u5411\u91cf\u4e0a\u6295\u5f71\u7684\u90e8\u5206.... 24_Orthogonal Matrix and Symmetric Matrix \u00b6 Norm-preserving\uff1a \\(||T(u)||=||u||\\ for\\ all\\ u\\) \uff0c\u4e0d\u6539\u53d8\u8f93\u5165\u957f\u5ea6\u7684 linear operation\uff0c\u8fd9\u6837 function \u7684 Matrix \u7684\u7279\u70b9\uff1a\u65b9\u9635\uff0c\u5217\u5411\u91cf\u662f Orthnognoal \u7684\u5e76\u4e14\u957f\u5ea6\u662f 1\uff0c\u5982\u679c\u6709\u7279\u5f81\u503c\u90a3\u4e48\u53ea\u6709 \u6b63\u8d1f1 Orthogonal Matrix\uff1acolumn \u662f Orthonormal \u7684 Norm-preserving \u5f53\u4e14\u4ec5\u5f53 Orthogonal Matrix $$ Qu\\cdot Qv=(Qu)^TQv=u^TQ^TQv=u^Tv $$ Symmetric Matrix\uff1a\u5bf9\u79f0\u77e9\u9635 \u6027\u8d28\uff1a \\(Rank(P_i)=1\\) 25_General Vectors \u00b6 26_Singular Value Decomposition \u00b6","title":"\u7ebf\u6027\u4ee3\u6570"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#_1","text":"","title":"\u7ebf\u6027\u4ee3\u6570"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#_2","text":"\u674e\u5b8f\u6bc5\u8001\u5e08\u7684\u7ebf\u6027\u4ee3\u6570\u7b14\u8bb0 Youtube\uff1a Hung-yi Lee - YouTube \u8bfe\u7a0b\u89c6\u9891\uff1a \u3010\u674e\u5b8f\u6bc5\u3011Linear Algebra \u7dda\u6027\u4ee3\u6578 (2018,Fall) \u7b14\u8bb0\u53c2\u8003\uff1a leela-notes: \u674e\u5b8f\u6bc5\u300a\u7ebf\u6027\u4ee3\u6570\u300b\u7b14\u8bb0 \u674e\u5b8f\u6bc5\u300aLinear Algebra\u300b\u5b66\u4e60\u7b14\u8bb0_\u674e\u5b8f\u6bc5\u7ebf\u6027\u4ee3\u6570\u7b14\u8bb0","title":"\u8bf4\u660e"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#1_what-are-we-going-to-learn","text":"","title":"1_What are we going to learn?"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#system","text":"system \u8868\u793a\u4e00\u4e2a\u6709 input \u548c output \u7684\u7cfb\u7edf\uff0c\u4e5f\u53ef\u4ee5\u53eb\u505a function\uff0ctransformation\uff0coperator \u6bd4\u5982\uff1a\u8bed\u8a00\u8bc6\u522b\uff0c\u8bed\u97f3\u52a9\u624b\uff0c\u7535\u8bdd","title":"System"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#two-properties","text":"persevering multiplication persevering addition \u4e3e\u4e2a\u53cd\u4f8b\uff1a \\(input:x,\\ output:x^2\\) \u5c31\u4e0d\u662f\u4e00\u4e2a Linear System \u8fd9 2 \u4e2a\u6027\u8d28\u5bf9\u591a\u8f93\u5165\u7684 system \u540c\u6837\u9002\u7528","title":"Two properties"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#application","text":"Circuits \u7535\u8def\u4e2d input \u662f\u7535\u538b\u6e90\u6216\u8005\u7535\u6d41\u6e90\uff0coutput \u662f\u8d1f\u8f7d\u4e0a\u7684\u7535\u6e90\u548c\u7535\u6d41 \u4fe1\u53f7\u4e0e\u7cfb\u7edf Fourier Transorm \u5176\u5b9e\u662f Linear System\uff0c\u53ea\u662f\u4ece 2 \u7ed9\u4e0d\u540c\u7684\u89d2\u5ea6\u89c2\u770b\u540c\u4e00\u4e2a\u4fe1\u53f7 PageRank \u641c\u7d22\u5f15\u64ce\u4e2d\u5bf9\u4e0d\u540c\u7f51\u9875\u7684\u6392\u5e8f\uff0c\u540e\u9762\u4f1a\u7ec6\u8bb2 Computer Graphics \u56fe\u5f62\u7684\u53d8\u6362\uff0c\u6bd4\u5982\u65cb\u8f6c","title":"Application"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#2_system-of-linear-equations","text":"System of Linear Equations\uff1a\u591a\u5143\u4e00\u6b21\u8054\u7acb\u65b9\u7a0b\u5f0f","title":"2_System of linear equations"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#_3","text":"","title":"\u672f\u8bed"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#_4","text":"Domain(\u5b9a\u4e49\u57df)\uff1ainput \u7684\u96c6\u5408 Range(\u503c\u57df) \u662f output \u7684\u96c6\u5408\uff0c\u6bd4 Co-domain(\u5bf9\u5e94\u57df) \u5c0f\u6216\u8005\u76f8\u540c Co-domain \u6307\u7684\u662f\u5bf9\u4e00\u4e2a function \u4e0d\u5047\u601d\u7d22\u7684 output\u7684\u8303\u56f4\uff0c\u6bd4\u5982 \\(y=x^2\\) \uff0cinput \u662f\u5b9e\u6570\uff0c\u4e0d\u5206\u6790\u8fd9\u4e2a function \u7684\u5185\u6db5\uff0c output \u4e5f\u4e00\u5b9a\u662f\u5b9e\u6570\uff0c\u6240\u4ee5 Co-domain \u662f\u5b9e\u6570","title":"\u5b9a\u4e49\u57df &amp;&amp; \u503c\u57df"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#_5","text":"One-to-one\uff1a\u4e00\u5bf9\u4e00\uff0c\u5355\u5c04 Onto\uff1aRange \u7b49\u4e8e Co-domain\uff0c\u6ee1\u5c04","title":"\u4e00\u5bf9\u4e00 &amp;&amp; \u6620\u6210"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#_6","text":"\u53ea\u9700\u8981\u6ee1\u8db3 Linear System \u7684\u4e24\u4e2a properties \u5c31\u662f\u7ebf\u6027\u7cfb\u7edf Linear system \u5e76\u4e0d\u662f\u4e00\u6761\u659c\u7740\u7684\u76f4\u7ebf\uff0c\u6bd4\u5982 \u5fae\u5206 \u4e0e \u79ef\u5206 \u540c\u6837\u4e5f\u662f\u7ebf\u6027\u7cfb\u7edf\uff08\u6240\u4ee5\u8bf4 Fourier Transorm \u662f\u7ebf\u6027\u7cfb\u7edf\uff09\uff0c\u56e0\u4e3a\u4ed6\u4eec\u6ee1\u8db3\u4e24\u4e2a properties \u8fd9\u95e8\u8bfe\u7814\u7a76\u7684 Linear System \u8f93\u5165\u662f\u4e00\u4e2a n \u7ef4\u7684 \u5411\u91cf\uff0c\u8f93\u51fa\u662f\u4e00\u4e2a m \u7ef4\u5411\u91cf\uff0c\u8fd9\u79cd\u8868\u793a\u65b9\u5f0f\u53ef\u4ee5 apply \u5728\u975e\u5e38\u591a\u7684\u5730\u65b9 \u8fd9\u79cd Linear System \u53ef\u4ee5\u5199\u6210 System of linear equations","title":"\u7ebf\u6027\u7cfb\u7edf \u4e0e \u7ebf\u6027\u65b9\u7a0b\u7ec4"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#3_vector","text":"\u5982\u679c\u4e0d\u523b\u610f\u8bf4\u660e\uff0c\u5411\u91cf\u90fd\u8ba4\u4e3a\u662f \u5217\u5411\u91cf \\(R^n\\) \u4ee3\u8868\u6240\u6709 n \u7ef4\u5411\u91cf\u7684\u96c6\u5408\uff0c\u6bd4\u5982 \\(R^2\\) \u8868\u793a\u6574\u4e2a 2 \u7ef4\u5e73\u9762","title":"3_Vector"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#4_matrix","text":"\u8bb2 Vector \u653e\u5728\u4e00\u8d77\uff0c\u5c31\u53d8\u6210\u4e86 Matrix \\[ A=[a_1,a_2,a_3]=\\begin{bmatrix} 2 &3 &5 \\\\ 3 & 1 & -1\\\\ -2& 1& 1 \\end{bmatrix} \\] \\(M_{n\\times m}\\) \u8868\u793a\u6240\u6709 n \u884c m \u5217\u7684 Matrix\uff08\u5148 row \u518d column\uff09 \u7279\u6b8a\u77e9\u9635\uff1a \\(O\\) \uff1a\u6240\u6709 element \u90fd\u662f 0 \u7684\u77e9\u9635\uff0c\u53ef\u4ee5\u662f\u4efb\u4f55\u7684 size\uff0c \\(O_{2\\times3}\\) \u6307\u5b9a\u5927\u5c0f \\(I\\) \uff1aIdentity matrix\uff0c\u5355\u4f4d\u77e9\u9635\uff0c\u5fc5\u987b\u662f\u6b63\u65b9\u5f62\u4e14\u5de6\u4e0a\u5230\u53f3\u4e0b\u7684\u5143\u7d20\u662f1\uff0c\u5176\u4ed6\u662f 0\uff0c \\(I_2\\) \u8868\u793a\u662f \\(2\\times 2\\) \u7684\u5927\u5c0f","title":"4_Matrix"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#5_matrix-vector-product","text":"\u5047\u8bbe \\(A\\) \u662f Matrix\uff0c \\(x\\) \u662f Vector \\(Ax\\) \u53ef\u4ee5\u770b\u6210\u662f\u591a\u5143\u8054\u7acb\u65b9\u7a0b\u5f0f \u4ece\u884c\u7684\u89d2\u5ea6\uff1a \\(Ax\\) \u53ef\u4ee5\u770b\u6210 Matrix \u7684\u6bcf\u4e00\u884c\u548c \\(x\\) \u505a\u5185\u79ef\u7ec4\u6210\u7684 Vector \u4ece\u5217\u7684\u89d2\u5ea6\uff1a \\(A\\) \u4e2d\u7684\u6bcf\u5217\uff08\u6bcf\u5217\u662f\u4e00\u4e2aVector\uff09\u505a \\(x\\) \u7684\u7ebf\u6027\u7ec4\u5408 \u5982\u679c \\(A\\) \u548c \\(B\\) \u90fd\u662f \\(m\\times n\\) \u7684 Matrix\uff0c \\(Aw=Bw\\) \u5bf9\u4efb\u610f\u7684 \\(w\\) \u6210\u7acb\uff0c \\(A=B\\)","title":"5_Matrix-vector product"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#6_having-solution-or-not","text":"System of Linear Equations \u662f\u5426\u6709\u89e3\uff1f \u65b9\u7a0b\u6709\u89e3\u5c31\u8bf4\u662f consistent\uff08\u76f8\u5bb9\u7684\uff09\uff0c\u4e0d\u7136\u5c31\u662f inconsistent \u4e8c\u7ef4\u4e2d 2 \u4e2a\u975e\u5e73\u884c\u7684 Vector \u53ef\u4ee5\u8868\u793a\u4efb\u4f55\u7684 Vector\uff08\u9ad8\u7ef4\u4e0d\u4e00\u5b9a\uff09\uff0c\u4e8c\u7ef4\u4e2d\u975e\u5e73\u884c\u4e00\u5b9a\u6709\u89e3\uff0c\u6709\u89e3\u4e0d\u4e00\u5b9a\u975e\u5e73\u884c","title":"6_Having solution or not"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#span","text":"\u4e00\u4e2a Vector Set \\(S=\\{v_1, v_2, ...\\}\\) \u7684\u6240\u6709 Linear Combination \u7684\u96c6\u5408\uff0c\u53eb\u505a Span S \u5047\u5982\u4e00\u4e2a Vector Set \\(V\\) = Span \\(S\\) \uff0c\u90a3 \\(S\\) \u5c31\u662f \\(V\\) \u7684 generating set Standard Vector\uff1a\u6807\u51c6\u5411\u91cf \u6709\u6ca1\u6709\u89e3\u7684\u95ee\u9898\u53ef\u4ee5\u53d8\u6210 \\(A\\) \u7684 \u6240\u6709 column \u8fdb\u884c Span \u5f97\u5230\u7684 Vector Set V \u4e2d\u662f\u5426\u6709 B","title":"Span"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#7_how-many-solutions","text":"\u6709\u89e3\u7684\u60c5\u51b5\u4e0b\u6709\u591a\u5c11\u89e3\uff1f \u552f\u4e00\u89e3\uff1a \\(A\\) \u7684 column \u662f independent \u6216\u8005 \\(Rank\\ A = n\\) \u6216\u8005 \\(Nullity\\ A=0\\) \u65e0\u7a77\u591a\u89e3\uff1a \\(A\\) \u7684 column \u662f dependent \u7b49\u4e8e \\(Rank\\ A < n\\) \u6216\u8005 \\(Nullity\\ A>0\\) \u5176\u4e2d \\(Rank+Nullity=n\\) homogeneous \uff1a\u9f50\u6b21\u7684\uff0c\u82e5\u6709\u4e00\u4e2a system linear equation \u7684 constant term \u7b49\u4e8e 0\uff08 \\(b=0\\) \uff09\uff0c\u90a3\u4e48\u5c31\u8bf4\u662f\u9f50\u6b21\u7684\uff0c homogeneous linear equation\u4e00\u5b9a\u6709\u89e3\uff0c\u81f3\u5c11\u6709\u4e00\u7ec4\u89e3\u662f Zero Vector geneous\uff1a\u975e\u9f50\u6b21 \u8bc1\u660e\u6709\u89e3\u65f6 dependent \u6709\u65e0\u7a77\u591a\u89e3 \uff1a \u6613\u8bc1 \\(Au=0\\) \u6709\u65e0\u7a77\u89e3\uff0c\u53c8 \\(Av=b\\) \u6709\u89e3\uff0c\u76f8\u52a0\u5373\u53ef","title":"7_How many solutions"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#dependent","text":"\u7ebf\u6027\u76f8\u5173\uff08dependent\uff09\u4e0e \u7ebf\u6027\u65e0\u5173\uff08independent\uff09 \u4e00\u7ec4 Vector Set \u662f dependent \u7684\u6ee1\u8db3\uff1a\u80fd\u627e\u5230\u4e00\u7ec4 scalar \u4e0d\u5168\u4e3a 0\uff0c\u5bf9 Vector Set \u4f5c Linear Combination \u540e\u4e3a zero Vector\uff0c\u5426\u5219\u5c31\u662f independent","title":"Dependent"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#rank-nullity","text":"Rank\uff1aMatrix \u4e2d\u6700\u591a\u7684 independent columns \u7684\u6570\u76ee Nullity\uff1a \\(n-Rank\\)","title":"Rank &amp;&amp; Nullity"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#8_solving-system-of-linear-equations","text":"\u4e09\u79cd\u7b49\u4ef7\u53d8\u5316\uff1a Interchange any two rows of the matrix Multiply every entry of some row by the same nonzero scalar Add a multiple of one row of the matrix to another row","title":"8_Solving system of linear equations"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#rref","text":"RREF\uff1aReduced Row Echelon Form\uff0c\u7b80\u5316\u5217\u68af\u5f62\u77e9\u9635 Row Echelon Form\uff1a Each nonzero row lies above every zero row The leading entries are in echelon form RREF \uff1a Row Echelon Form The columns containing the leading entries are standard vectors Gaussian elimination \uff1aan algorithm for finding the reduced row echelon form of a matrix","title":"RREF"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#9_what-can-we-know-from-rref","text":"Augmented Matrix\uff1a\u589e\u5e7f\u77e9\u9635","title":"9_What can we know from RREF"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#rref-vs-linear-combination","text":"Column Correspondence Theorem\uff1a\u521d\u7b49\u53d8\u6362\u4e0d\u6539\u53d8\u5217\u4e0e\u5217\u4e4b\u95f4\u7684\u7ebf\u6027\u7ec4\u5408\u5173\u7cfb \u5047\u8bbe \\(R\\) \u662f \\(A\\) \u7684 RREF\uff0cSpan \\(A\\) = Span \\(R\\)","title":"RREF v.s. Linear Combination"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#rref-vs-independent","text":"pivot columns\uff1aRREF \u4e2d\u7684 Leading entries \u6240\u5728\u5217\u5bf9\u5e94\u5230 \\(A\\) \u7684\u5217\uff0c\u662f independent \u7684 The non-pivot columns are the linear combination of the previous pivot columns Independent\uff1aEvery column in RREF(A) is standard vector \u6216\u8005 Every column is a pivot column \u77ee\u80d6\u578b\u7684 Matrix\uff1a\u884c\u6570 < \u5217\u6570 => dependent More than m vectors\uff08\u5217\u5411\u91cf\uff09 in \\(R^m\\) must be dependent \u4ee5 \\(2\\times3\\) \u7684\u77ee\u80d6\u578b Matrix \u4e3e\u4f8b\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a input 3\u7ef4\uff0coutput 2 \u7ef4\uff0c\u4e5f\u5c31\u662f\u964d\u7ef4\uff0c\u90a3\u4e48 output\uff08b\uff09\u5728\u9ad8\u7ef4\uff08input\uff09\u4e0a\u7684\u6620\u5c04\u5c31\u53ef\u4ee5\u662f\u65e0\u7a77\u591a\u4e2a\u70b9","title":"RREF v.s. Independent"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#rref-vs-rank","text":"Rank = Maximum number of Independent Columns \u200b = Number of Pivot Column \u200b = Number of Non-zero rows in RREF Properties of Rank from RREF\uff1a Rank A \u2264 min(m, n) If m < n, the columns of A is dependent In \\(R^m\\) , you cannot find more than m vectors that are independent Rank = Maximum number of Independent Columns \u6216\u8005 Number of Pivot Column \u6216\u8005 Number of Non-zero rows of RREF \u6216\u8005 Number of Basic Variables Nullity = no. column - rank \u6216\u8005 Number of Free Equations Nullity \\(\\not =\\) Number of zero rows of RREF","title":"RREF v.s. Rank"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#rref-vs-span","text":"Given \\(Ax=b\\) Rank A \\(\\not=\\) rank [A b] Ax = b is consistent for every b \\(\\Harr\\) RREF of [A b] cannot have a row whose only non-zero entry is at the last column \\(\\Harr\\) RREF of A cannot have zero row \\(\\Harr\\) Rank A = no. of rows","title":"RREF v.s. Span"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#10_matrix-multiplication","text":"","title":"10_Matrix Multiplication"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#definition","text":"\\(C=AB\\) \uff0c \\(C\\) \u8fd9\u4e2a\u53d8\u6362\u53ef\u4ee5\u7406\u89e3\u6210 input \u5148\u7ecf\u8fc7 \\(B\\) \u53d8\u6362\u518d\u7ecf\u8fc7 \\(A\\) \u53d8\u5316 4 \u4e2a\u4e0d\u540c\u7684\u89d2\u5ea6\u770b Matrix Multiplication \u884c\u5217\uff0cinner product\uff0c \\(c_{ij}\\) \u4e3a \\(A\\) \u7684 \\(i\\) \u884c \u4e0e \\(B\\) \u7684 \\(j\\) \u5217\u7684\u5185\u79ef \u5217\u5217\uff0cLinear combination of columns\uff0c\u5bf9 \\(A\\) \u4e2d column \u505a \\(B\\) \u7684\u5217\u6570\u6b21\u4e0d\u540c\u7684\u7ebf\u6027\u7ec4\u5408\uff0c\u7136\u540e\u6a2a\u5411\u7ec4\u5408\u8d77\u6765 \u884c\u884c\uff0cLinear combination of rows\uff0c\u5bf9 \\(B\\) \u4e2d row \u505a \\(A\\) \u7684\u5217\u6570\u6b21\u4e0d\u540c\u7684\u7ebf\u6027\u7ec4\u5408\uff0c\u7136\u540e\u7eb5\u5411\u7ec4\u5408\u8d77\u6765 \u5217\u884c\uff0csummation of matrices\uff0c \\(C=AB=a_1b_1^T+a_2b_2^T+...+a_nb_n^T\\) \uff0c\u53ef\u4ee5\u770b\u6210\u662f\u4e00\u5806 Rank=1 \u7684 Matrix \u76f8\u52a0 Block Multiplication \u5206 Block \u7684\u65b9\u5f0f\uff1aA \u4e2d\u5217\u7684\u5212\u5206\u548c B \u4e2d\u884c\u7684\u5212\u5206\u5bf9\u5e94\uff0cA \u4e2d\u884c\u7684\u5212\u5206\u5bf9\u5e94 B \u4e2d\u5217\u7684\u5212\u5206","title":"Definition"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#property","text":"\\(AB\\not=BA\\) \\((AC)^T=C^TA^T\\) \\(A(CP)=(AC)P\\) \uff0c\u4f46\u662f\u4e0d\u540c\u7684\u65b9\u5f0f\u8fd0\u7b97\u91cf\u533a\u522b\u4f1a\u5f88\u5927","title":"Property"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#special-matrix","text":"Diagonal Matrix\uff1a\u5bf9\u89d2\u77e9\u9635 Symmetric Matrix\uff1a\u5bf9\u79f0\u77e9\u9635","title":"Special Matrix"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#11_matrix-inverse","text":"","title":"11_Matrix Inverse"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#definition_1","text":"\u7ed9\u5b9a 2 \u4e2a function \\(A\\) \uff0c \\(B\\) \uff0c\u5982\u679c for any \\(v\\) \uff0c \\(g(f(v))=v\\) \u4e14 \\(f(g(v))=v\\) \uff0c\u90a3\u4e48 \\(g\\) \u548c \\(v\\) \u662f\u4e92\u9006\u7684 \u5bf9\u77e9\u9635\u6765\u8bf4\uff0c\u5982\u679c \\(AB=I\\) \u4e14 \\(BA=I\\) \uff0c\u90a3 \\(A\\) \u548c \\(B\\) \u662f\u4e92\u9006\u7684 \u5229\u7528\u9006\u77e9\u9635\u6c42\u89e3 system of linear equations\uff1a \\(Ax=b\\Rightarrow x=A^{-1}b\\) \uff08\u624b\u7b97\u7684\u6548\u7387\u5e76\u4e0d\u9ad8\uff0c\u4e0d\u5982\u76f4\u63a5\u6c42 RREF\uff09","title":"Definition"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#property_1","text":"\\(A\\) \u7684\u4e92\u9006\u77e9\u9635\u662f\u552f\u4e00\u7684\uff0c\u8bc1\u660e\uff1a\u6709 \\(AB=I,BA=I,AC=I,CA=I\\) \uff0c\u90a3\u4e48 \\(B=BI=B(AC)=(BA)C=IC=C\\) \u5982\u679c \\(A\\) \u4e0d\u662f square\uff0c\u90a3\u5fc5\u4e0d\u662f invertible \u7684\uff0c\u56e0\u4e3a \\(AB\\) \u6216\u8005 \\(BA\\) \u8868\u793a\u7684 function \u5fc5\u5b9a\u6709\u4e00\u79cd\u60c5\u51b5\u662f\u8868\u793a\u5148\u4ece\u9ad8\u7ef4\u53d8\u5316\u5230\u4f4e\u7ef4\u7136\u540e\u53d8\u56de\u9ad8\u7ef4\uff0c\u65e0\u6cd5\u56de\u5230\u539f\u6837 \\((AB)^{-1}=B^{-1}A^{-1}\\) \\((A^T)^{-1}=(A^{-1})^T\\) \uff0c\u53ef\u4ee5\u8bc1\u660e \\(A\\) \u662f invertible \u65f6\uff0c \\(A^T\\) \u4e5f\u662f invertible","title":"Property"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#invertible","text":"One-to-one \u7684\u60c5\u51b5\u4e0b\uff0c\u90a3\u81f3\u591a\u4e00\u4e2a\u89e3\uff08 \\(b\\) \u53ef\u80fd\u4e0d\u5728 Range \u91cc\uff09 Onto \u7684\u60c5\u51b5\u4e0b\uff0c\u6c38\u8fdc\u6709\u89e3\uff08Co-domain \u548c Range \u4e00\u6837\u5927\uff0c \\(b\\) \u6c38\u8fdc\u5728 Range \u4e2d\uff09 Domain \u548c Co-domain \u5fc5\u987b\u8981\u540c\u7ef4\u5ea6\u624d\u662f invertible \u7684 \u5982\u679c \\(A\\) \u662f Square \u7684\uff0cOne-to-one \\(\\Leftrightarrow\\) Onto \\(A\\) \u662f invertible \u7b49\u6548\u4e8e \u4e00\u822c\u60c5\u51b5\u4e0b\u68c0\u67e5\u662f\u5426 Invertible \u90fd\u76f4\u63a5\u7b97 RREF \u662f\u5426\u4e3a \\(I\\) \u5982\u679c \\(A_{n\\times n}\\) \u5b58\u5728 \\(BA=I\\) \uff0c\u90a3 \\(A\\) \u662f invertible \u7684\uff0c \\(AB=I\\) \u4e00\u6837 \u5229\u7528\u53cd\u8bc1\u6cd5\uff0c\u5047\u8bbe \u5b58\u5728 \\(v\\not= 0\\) \u4f7f \\(Av=0\\)","title":"Invertible"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#inverse-of-elementary-matrices","text":"Elementary Matrices\uff1a\u521d\u7b49\u77e9\u9635\uff0c\u5373\u521d\u7b49\u884c\u53d8\u6362\u5bf9\u5e94\u7684\u77e9\u9635 \u8fd9\u4e9b Matrix \u7684 inverse \u6309\u7167\u5176\u521d\u7b49\u884c\u53d8\u6362\u7684\u610f\u4e49\u5373\u53ef\u7b97\u51fa\u5176 inverse invertible \u7684 Matrix \u76f8\u4e58\u4ecd\u7136\u662f invertible \u7684 invertible \u7684 Matrix \u53ef\u4ee5\u5199\u6210 product of elementary matrix","title":"Inverse of Elementary Matrices"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#inverse-of-general-matrices","text":"\u901a\u8fc7 \\(E_1...E_nA=R\\) \u5f97\u5230 \\(A\\) \u7684 inverse\uff0c\u5176\u4e2d \\(R\\) \u662f RREF \u65b9\u6cd5\u662f Transform \\([A\\ I_n]\\) to its \\([R\\ B]\\) \uff0c\u5176\u4e2d \\(B=E_n...E_1\\) \uff0c\u5c31\u662f \\(A\\) \u7684 inverse \u5982\u679c\u8981\u6c42 \\(A^{-1}C\\) \uff0c\u90a3\u628a\u4e0a\u9762\u7684 \\([A\\ I_n]\\) \u53d8\u6210 \\([A\\ C]\\) \u5373\u53ef","title":"Inverse of General Matrices"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#12_subspace","text":"\u5b9a\u4e49\uff1a Subspace \u548c Span \u7684\u5173\u7cfb Null Space \u5b9a\u4e49\uff1a Column Space and Row Space\uff1a Original Matrix A and its RREF R \u4e2d $$ Col A \\not = Col R \\ Row A = Row A $$","title":"12_Subspace"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#13_basis","text":"Basis\uff1a\u57fa \u8981\u627e Matrix A \u7684 Col A \u7684 basis\uff0c\u627e RREF \u7684 pivot columns \u8981\u786e\u5b9a\u4e00\u7ec4 vector \u662f\u5426\u662f\u4e00\u4e2a Subspace \u7684 basis\uff0c\u770b\u4e24\u8005\u5bf9\u5e94\u7684\u7ef4\u5ea6\u662f\u5426\u4e00\u81f4\u5373\u53ef","title":"13_Basis"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#14_column-space-null-space-row-space","text":"\u4e09\u4e2a Space \u6240\u5728\u7684\u7ef4\u5ea6\uff1a \u4e09\u4e2a Space \u7684 Basis\uff1a Col A\uff1a The pivot columns of A form a basis for Col A Basis\uff1a \\(Col \\ A=Span\\{pivot\\ columns\\}\\) Dim(Col A) = number of pivot columns = rank A Null A: Basis: Solving Ax = 0 Each free variable in the parametric representation of the general solution is multiplied by a vector. The vectors form the basis. Dim (Null A) = number of free variables = Nullity A = n - Rank A Row A\uff1a Basis: Nonzero rows of RREF(A) Dim (Row A) = Number of Nonzero rows = Rank A Rank \u80fd\u4ee3\u8868\u7684\u542b\u4e49\uff1a \\[ Rank\\ A = Dim(Col\\ A) \\\\ Rank\\ A = Dim(Row\\ A) = Dim(Col\\ A^T)=Rank\\ A^T \\] \u53ef\u4ee5\u5f97\u5230 \\(Rank\\ A = Rank\\ A^T\\) \u603b\u7ed3\uff1a","title":"14_Column Space, Null Space, Row Space"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#15_coordinate-system","text":"Coordinate System\uff1a\u5750\u6807\u7cfb Basis \u7684\u8f6c\u6362\uff1a \u5176\u4ed6\u7684 Coordinate System \u4e0e Cartesian\uff08\u7b1b\u5361\u5c14\u5750\u6807\u7cfb\uff09\u4e4b\u95f4\u7684\u8f6c\u53d8\uff1a","title":"15_Coordinate System"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#16_linear-function-in-coordinate-system","text":"","title":"16_Linear Function in Coordinate System"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#17_determinant","text":"\u884c\u5217\u5f0f","title":"17_Determinant"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#18_eigenvalues-and-eigenvectors","text":"","title":"18_Eigenvalues and Eigenvectors"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#19_diagonalization","text":"\u5bf9\u89d2\u5316\uff0c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u8ba1\u7b97 \\(A^n\\) $$ A=PDP^{-1} $$","title":"19_Diagonalization"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#20_page-rank","text":"","title":"20_Page Rank"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#21_orthogonality","text":"Norm\uff1a\u8303\u6570\uff0c \\(||v||_p=(\\sum|v_i|^p)^{1/p}\\) Distance\uff1a \\(||u-v||\\) Dot Product\uff1a\u70b9\u4e58 Orthogonal\uff1aif \\(u\\cdot v=0\\) \uff0c \\(u\\) and \\(v\\) are Orthogonal\uff0cand \\(||u+v||^2=||u||^2+||v||^2\\) \uff08\u52fe\u80a1\u5b9a\u7406\uff09 \u200b \\(||u+v||^2=||u||^2+||v||^2+2(u\\cdot v)\\) \uff08\u4f59\u5f26\u5b9a\u7406\uff09","title":"21_Orthogonality"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#22_orthogonal-projection","text":"\u5047\u8bbe\u6709\u4e00\u4e2a vector set \\(S\\) \uff0c \\(S^{\\perp}\\) \u8868\u793a\u4e00\u4e2a vector set\uff0c\u5176\u4e2d\u7684\u6240\u6709 vector \\(v\\) \u4e0e \\(S\\) \u4e2d\u7684 \\(u\\) \uff0c\u6709 \\(u\\cdot v=0\\) Orthogonal Projection\uff1a\u6b63\u4ea4\u6295\u5f71\uff0c \\(P_w=C(C^TC)^{-1}C^T\\)","title":"22_Orthogonal Projection"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#23_orthogonal-basis","text":"Orthogonal Set\uff1a\u4e24\u4e24\u5782\u76f4\u7684 Vector Set\uff0c\u4e0d\u4e00\u5b9a\u662f independent \u7684\uff08 0 \u5411\u91cf\uff09 Orthonormal Set\uff1aOrthogonal Set \u4e2d\u6bcf\u4e2a\u5411\u91cf\u7684\u957f\u5ea6\u90fd\u4e3a 1\uff0c\u4e00\u5b9a\u662f independent \u7684 Orthogonal Projection\uff1a How to find a orthogonal basis\uff1f \u65bd\u5bc6\u7279\u6b63\u4ea4\u5316\uff08Schmidt orthogonalization\uff09\uff1a\u7b2c\u4e00\u4e2a\u5411\u91cf\u76f4\u63a5\u7528\uff0c\u7b2c\u4e8c\u4e2a\u5411\u91cf\u53bb\u6389\u5176\u5728\u7b2c\u4e00\u4e2a\u5411\u91cf\u4e0a\u6295\u5f71\u7684\u90e8\u5206....","title":"23_Orthogonal Basis"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#24_orthogonal-matrix-and-symmetric-matrix","text":"Norm-preserving\uff1a \\(||T(u)||=||u||\\ for\\ all\\ u\\) \uff0c\u4e0d\u6539\u53d8\u8f93\u5165\u957f\u5ea6\u7684 linear operation\uff0c\u8fd9\u6837 function \u7684 Matrix \u7684\u7279\u70b9\uff1a\u65b9\u9635\uff0c\u5217\u5411\u91cf\u662f Orthnognoal \u7684\u5e76\u4e14\u957f\u5ea6\u662f 1\uff0c\u5982\u679c\u6709\u7279\u5f81\u503c\u90a3\u4e48\u53ea\u6709 \u6b63\u8d1f1 Orthogonal Matrix\uff1acolumn \u662f Orthonormal \u7684 Norm-preserving \u5f53\u4e14\u4ec5\u5f53 Orthogonal Matrix $$ Qu\\cdot Qv=(Qu)^TQv=u^TQ^TQv=u^Tv $$ Symmetric Matrix\uff1a\u5bf9\u79f0\u77e9\u9635 \u6027\u8d28\uff1a \\(Rank(P_i)=1\\)","title":"24_Orthogonal Matrix and Symmetric Matrix"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#25_general-vectors","text":"","title":"25_General Vectors"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#26_singular-value-decomposition","text":"","title":"26_Singular Value Decomposition"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/","text":"\u53c2\u8003\uff1a \u81ea\u5df1\u52a8\u624b\u5199\u7f16\u8bd1\u5668 \u2014 \u81ea\u5df1\u52a8\u624b\u5199\u7f16\u8bd1\u5668 (pandolia.net) Flex \u00b6 \u4f8b\u5b50\uff1a %{ #define T_WORD 1 int numChars = 0, numWords = 0, numLines = 0; %} WORD ([^ \\t\\n\\r\\a]+) %% \\n { numLines++; numChars++; } {WORD} { numWords++; numChars += yyleng; return T_WORD; } <<EOF>> { return 0; } . { numChars++; } %% int main() { int token_type; while (token_type = yylex()) { printf(\"WORD:\\t%s\\n\", yytext); } printf(\"\\nChars\\tWords\\tLines\\n\"); printf(\"%d\\t%d\\t%d\\n\", numChars, numWords, numLines); return 0; } int yywrap() { return 1; } \u89c4\u5219\u8bf4\u660e\uff1a %{ Declarations %} Definitions %% Rules %% User subroutines Declarations \uff0c\u58f0\u660e\uff0c\u90fd\u662f C \u4ee3\u7801\uff0c\u8fd9\u4e9b\u4ee3\u7801\u4f1a\u88ab\u539f\u6837\u7684\u590d\u5236\u5230 lex.yy.c \u6587\u4ef6\u4e2d\uff0c\u4e00\u822c\u5728\u8fd9\u91cc\u58f0\u660e\u4e00\u4e9b\u5168\u5c40\u53d8\u91cf\u548c\u51fd\u6570\uff0c\u8fd9\u6837\u5728\u540e\u9762\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u53d8\u91cf\u548c\u51fd\u6570 Definitions \uff0c\u5b9a\u4e49\uff0c\u5728\u8fd9\u91cc\u53ef\u4ee5\u5b9a\u4e49\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\u7684\u4e00\u4e9b\u540d\u5b57\uff0c\u53ef\u4ee5\u5728 \u89c4\u5219\uff08Rules\uff09 \u6bb5\u88ab\u4f7f\u7528 Rules \u90e8\u5206\u4f1a\u88ab\u7ffb\u8bd1\u4e3a\u4e00\u4e2a yylex \u51fd\u6570\uff0c\u6b64\u51fd\u6570\u626b\u63cf\u5230\u4e00\u4e2a\u53ef\u4ee5\u548c Rules \u4e2d\u5339\u914d\u7684\u5b57\u7b26\u4e32\u65f6\u4f1a\u6267\u884c\u540e\u9762\u7684\u4ee3\u7801\uff1b\u6709\u591a\u6761\u89c4\u5219\u5339\u914d\u65f6\u9009\u62e9\u6700\u957f\u5339\u914d\uff0c\u5339\u914d\u957f\u5ea6\u76f8\u540c\u65f6\u9009\u62e9\u6700\u524d\u9762\u7684\u89c4\u5219 User subroutines \u90e8\u5206\u7684\u4ee3\u7801\u4f1a\u539f\u6837\u590d\u5236\u5230 lex.yy.c \u4ee3\u7801\u7684\u6700\u540e \u8f93\u5165\u6587\u4ef6\u4e2d\u6700\u540e\u4e00\u884c\u7684 yywrap \u51fd\u6570\u7684\u4f5c\u7528\u662f\u5c06\u591a\u4e2a\u8f93\u5165\u6587\u4ef6\u6253\u5305\u6210\u4e00\u4e2a\u8f93\u5165\uff0c\u5f53 yylex \u51fd\u6570\u8bfb\u5165\u5230\u4e00\u4e2a\u6587\u4ef6\u7ed3\u675f\uff08EOF\uff09\u65f6\uff0c\u5b83\u4f1a\u5411 yywrap \u51fd\u6570\u8be2\u95ee\uff0c yywrap \u51fd\u6570\u8fd4\u56de 1 \u7684\u610f\u601d\u662f\u544a\u8bc9 yylex \u51fd\u6570\u540e\u9762\u6ca1\u6709\u5176\u4ed6\u8f93\u5165\u6587\u4ef6\u4e86\uff0c\u6b64\u65f6 yylex \u51fd\u6570\u7ed3\u675f\uff0cyywrap \u51fd\u6570\u4e5f\u53ef\u4ee5\u6253\u5f00\u4e0b\u4e00\u4e2a\u8f93\u5165\u6587\u4ef6\uff0c\u518d\u5411 yylex \u51fd\u6570\u8fd4\u56de 0 \uff0c\u544a\u8bc9\u5b83\u540e\u9762\u8fd8\u6709\u522b\u7684\u8f93\u5165\u6587\u4ef6\uff0c\u6b64\u65f6 yylex \u51fd\u6570\u4f1a\u7ee7\u7eed\u89e3\u6790\u4e0b\u4e00\u4e2a\u8f93\u5165\u6587\u4ef6\uff1b\u5982\u679c\u53ea\u9700\u8981\u5904\u7406\u4e00\u4e2a\u6587\u4ef6\uff0c\u9ed8\u8ba4\u8fd4\u56de 1 \u5373\u53ef \u5b8f \uff1a ECHO //\u5c06\u5339\u914d\u5b57\u7b26\u4e32\u539f\u6837\u8f93\u51fa \u5185\u7f6e\u53d8\u91cf : yytext //\u5339\u914d\u6210\u529f\u7684\u5b57\u7b26\u4e32,\u53ef\u4ee5\u76f4\u63a5\u5f53\u5b57\u7b26\u4e32\u7528 yylval //flex\u8fdb\u884cscanner\uff0c\u5c06\u6570\u503c\u5b58\u5165yylval,\u800cbison\u53ef\u4ee5\u8bfb\u53d6yylval\u4e4b\u4e2d\u7684\u503c\uff0c\u6b64\u53d8\u91cf\u7c7b\u578b\u4e3a YYSTYPE \u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 YYSTYPE \u6765\u4fee\u6539 yylval \u7684\u7c7b\u578b\uff0c\u4e14 YYSTYPE \u5b9a\u4e49\u5fc5\u987b\u5728 #include\"xxx.tab.h\" \u4e4b\u524d\uff0c\u5982\u679c\u9700\u8981 yylval \u652f\u6301\u591a\u79cd\u7c7b\u578b\uff0c\u53ef\u4ee5\u4f7f\u7528 %union \u58f0\u660e\uff0c\u6b64\u58f0\u660e\u4f1a\u4fee\u6539 yylval \u7684\u7c7b\u578b\uff0c\u5982\uff1a %union { int intValue; float floatValue; } // \u90a3\u4e48\u5728\u4f7f\u7528 yylval \u65f6\u5c31\u9700\u8981\u5199 [a-zA-Z][a-zA-Z0-9]* { yylval.stringValue = strdup(yytext); return IDENTIFIER; } Bison \u00b6 %{ #include <stdio.h> void yyerror(const char* msg) {} %} %token T_NUM %left '+' '-' %left '*' '/' %% S : S E '\\n' { printf(\"ans = %d\\n\", $2); } | /* empty */ { /* empty */ } ; E : E '+' E { $$ = $1 + $3; } | E '-' E { $$ = $1 - $3; } | E '*' E { $$ = $1 * $3; } | E '/' E { $$ = $1 / $3; } | T_NUM { $$ = $1; } | '(' E ')' { $$ = $2; } ; %% int main() { return yyparse(); } \u89c4\u5219\u8bf4\u660e\uff1a %{ Declarations %} Definitions %% Productions %% User subroutines Declarations && User subroutines \u548c flex \u7c7b\u4f3c\uff0c\u8fd92\u90e8\u5206\u7684\u4ee3\u7801\u4f1a\u539f\u6837\u590d\u5236\u5230\u751f\u6210\u7684 c \u4ee3\u7801\u4e2d Definitions \u4e2d\u5b9a\u4e49\u4e00\u4e9b bison \u4e13\u6709\u7684\u53d8\u91cf Productions \u4e2d\u5199\u8bed\u6cd5\u4ea7\u751f\u5f0f\uff0c\u7528 : \u6765\u8868\u793a -> \uff0c | \u9694\u5f00\u540c\u4e00\u4e2a\u7ec8\u7ed3\u7b26\u7684\u4e0d\u540c\u7684\u4ea7\u751f\u5f0f\uff0c ; \u8868\u793a\u6b64\u4ea7\u751f\u5f0f\u7684\u7ed3\u675f\uff0c\u4ea7\u751f\u5f0f\u53f3\u8fb9\u662f \u03b5 \u65f6\uff0c\u4e0d\u9700\u8981\u5199\u4efb\u4f55\u7b26\u53f7\uff0c\u4e00\u822c\u7528\u4e00\u4e2a\u6ce8\u91ca / empty / \u4ee3\u66ff\uff0c\u6b64\u90e8\u5206\u4f1a\u88ab\u7ffb\u8bd1\u4e3a\u4e00\u4e2a yyparse \u51fd\u6570 bison \u4f1a\u5c06 Productions \u6bb5\u91cc\u7684\u7b2c\u4e00\u4e2a\u4ea7\u751f\u5f0f\u7684\u5de6\u8fb9\u7684\u975e\u7ec8\u7ed3\u7b26\u5f53\u4f5c\u8bed\u6cd5\u7684\u8d77\u59cb\u7b26\u53f7\uff0c\u540c\u65f6\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u8d77\u59cb\u7b26\u53f7\u4e0d\u4f4d\u4e8e\u4efb\u4f55\u4ea7\u751f\u5f0f\u7684\u53f3\u8fb9\uff0c bison \u4f1a\u81ea\u52a8\u6dfb\u52a0\u4e00\u4e2a\u7b26\u53f7\uff08\u5982 S\u2019 \uff09\u4ee5\u53ca\u4e00\u6761\u4ea7\u751f\u5f0f\uff08\u5982 S\u2019 -> S \uff09\uff0c\u800c\u5c06\u8fd9\u4e2a\u65b0\u589e\u7684\u7b26\u53f7\u5f53\u4f5c\u89e3\u6790\u7684\u8d77\u59cb\u7b26\u53f7 Bison \u4f1a\u81ea\u52a8\u8bc6\u522b\u975e\u7ec8\u7ed3\u7b26\uff1b\u7ec8\u7ed3\u7b26\u4e2d\uff0c\u5355\u5b57\u7b26 token \u7528\u5355\u5f15\u53f7\u62ec\u8d77\u6765\uff08\u5982 '\\n' '+'\uff09\uff0c\u5176\u4ed6 token \u9700\u8981\u5728 Definition \u4e2d\u5b9a\u4e49\u597d\uff0c\u5982\u4f8b\u5b50\u4e2d\u7684 token T_NUM \uff0c bison \u4f1a\u81ea\u52a8\u4e3a\u8fd9\u79cd token \u5206\u914d\u4e00\u4e2a\u7f16\u53f7\uff0c\u518d\u5199\u5230 y.tab.h \u6587\u4ef6\u4e2d\u53bb\uff0c\u53ef\u4ee5\u5728 flex \u4e2d\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e2a\u6587\u4ef6 \u53ef\u4ee5\u5728 Definitions \u6bb5\u5b9a\u4e49\u7b26\u53f7\u7684\u4f18\u5148\u7ea7 %left '+' '-' %left '*' '/' left \u8868\u793a \u5de6\u7ed3\u5408\uff0c\u4e0b\u9762\u884c\u7684\u7b26\u53f7\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u4e0a\u9762\u884c\u7684\u7b26\u53f7\uff0c\u540c\u4e00\u884c\u7684\u7b26\u53f7\u7684\u4f18\u5148\u7ea7\u76f8\u540c bison \u751f\u6210\u4e00\u4e2a C \u8bed\u8a00\u7684 LALR(1) \u52a8\u4f5c\u8868\uff0c\u5e76\u8f93\u51fa\u5230 y.tab.c \u6587\u4ef6\u4e2d\u53bb\uff0c\u53e6\u5916\uff0c\u8fd8\u4f1a\u5c06\u8fd9\u4e2a\u52a8\u4f5c\u8868\u4ee5\u53ca\u8bed\u6cd5\u4e2d\u7684\u76f8\u5173\u8981\u7d20\u4ee5\u53ef\u8bfb\u7684\u6587\u5b57\u5f62\u5f0f\u8f93\u51fa\u5230 y.output \u6587\u4ef6\u4e2d\u53bb\uff0c\u6b64\u6587\u4ef6\u4e2d\u4f1a\u6709\u6bcf\u4e2a\u72b6\u6001\u4ee5\u53ca\u72b6\u6001\u4e2d\u6240\u6709\u7684\u5f62\u6001 token stream \u5408\u6cd5 yyparse \u8fd4\u56de 0\uff0c\u4e0d\u5408\u6cd5\u5219\u8c03\u7528 yyerror \u5e76\u8fd4\u56de 1 yyparse \u51fd\u6570\u4e0d\u4ec5\u7ef4\u6301\u4e00\u4e2a\u72b6\u6001\u6808\uff0c\u5b83\u8fd8\u7ef4\u6301\u4e00\u4e2a\u7b26\u53f7\u5c5e\u6027\u6808\uff0c\u5f53\u5b83\u6267\u884c shift \u52a8\u4f5c\u65f6\uff0c\u5b83\u9664\u4e86\u5c06\u76f8\u5e94\u7684\u72b6\u6001\u538b\u5165\u72b6\u6001\u6808\u4e4b\u5916\uff0c\u8fd8\u4f1a\u5c06\u4e00\u4e2a\u7c7b\u578b\u4e3a YYSTYPE \uff08\u9ed8\u8ba4\u548c int \u76f8\u540c\uff09\u3001\u540d\u4e3a yylval \u7684\u5168\u5c40\u53d8\u91cf\u7684\u6570\u503c\u538b\u5165\u5230\u5c5e\u6027\u6808\u5185\uff0c\u800c\u5728 reduce \u52a8\u4f5c\u65f6\uff0c\u53ef\u4ee5\u7528 $1, $2, ... $n \u6765\u5f15\u7528\u5c5e\u6027\u6808\u7684\u5c5e\u6027\uff0c reduce \u52a8\u4f5c\u4e0d\u4ec5\u5c06\u76f8\u5e94\u7684\u72b6\u6001\u51fa\u6808\uff0c\u8fd8\u4f1a\u5c06\u540c\u6837\u6570\u91cf\u7684\u5c5e\u6027\u51fa\u6808\uff0c\u8fd9\u4e9b\u5c5e\u6027\u548c reduce \u4ea7\u751f\u5f0f\u7684\u53f3\u8fb9\u7684\u7b26\u53f7\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\uff0c\u540c\u65f6\uff0c\u7528 $$ \u4ee3\u8868\u4ea7\u751f\u5f0f\u5de6\u8fb9\u7684\u7ec8\u7ed3\u7b26\uff0c\u5728 reduce \u52a8\u4f5c\u91cc\u53ef\u4ee5\u8bbe\u7f6e $$ \u7684\u503c\uff0c\u5f53\u6267\u884c goto \u52a8\u4f5c\u65f6\uff0c\u9664\u4e86\u5c06\u76f8\u5e94\u7684\u72b6\u6001\u5165\u6808\uff0c\u8fd8\u4f1a\u5c06 $$ \u5165\u6808 \u5982\u679c\u8981\u4f7f\u7528 $$ $1 \u8fd9\u79cd\u9700\u8981\u5728 \\%token \u540e\u9762\u89c4\u5b9a\u7c7b\u578b \u4f8b\u5b50 \u00b6 Flex \u4ee3\u7801 %{ #define YYSTYPE char * #include \"y.tab.h\" int cur_line = 1; void yyerror(const char *msg); void unrecognized_char(char c); %} OPERATOR [-/+*()=;] INTEGER [0-9]+ IDENTIFIER [_a-zA-Z][_a-zA-Z0-9]* WHITESPACE [ \\t]* %% {OPERATOR} { return yytext[0]; } {INTEGER} { yylval = strdup(yytext); return T_IntConstant; } {IDENTIFIER} { yylval = strdup(yytext); return T_Identifier; } {WHITESPACE} { /* ignore every whitespcace */ } \\n { cur_line++; } . { unrecognized_char(yytext[0]); } %% int yywrap(void) { return 1; } void unrecognized_char(char c) { char buf[32] = \"Unrecognized character: ?\"; buf[24] = c; yyerror(buf); } void yyerror(const char *msg) { printf(\"Error at line %d:\\n\\t%s\\n\", cur_line, msg); exit(1); } Bison \u4ee3\u7801\uff1a %{ #include <stdio.h> #include <stdlib.h> void yyerror(const char*); #define YYSTYPE char * %} %token T_IntConstant T_Identifier %left '+' '-' %left '*' '/' %right U_neg %% S : Stmt | S Stmt ; Stmt: T_Identifier '=' E ';' { printf(\"pop %s\\n\\n\", $1); } ; E : E '+' E { printf(\"add\\n\"); } | E '-' E { printf(\"sub\\n\"); } | E '*' E { printf(\"mul\\n\"); } | E '/' E { printf(\"div\\n\"); } | '-' E %prec U_neg { printf(\"neg\\n\"); } | T_IntConstant { printf(\"push %s\\n\", $1); } | T_Identifier { printf(\"push %s\\n\", $1); } | '(' E ')' { /* empty */ } ; %% int main() { return yyparse(); } U_neg \u8868\u793a\u53d6\u53cd\uff0c\u53f3\u7ed3\u5408\uff0c%prec U_neg \u8868\u793a\u6b21\u4ea7\u751f\u5f0f\u7684\u4f18\u5148\u7ea7\u7b49\u4e8e U_neg\uff0c\u5426\u5219\u6b21\u4ea7\u751f\u5f0f\u7684\u4f18\u5148\u7ea7\u7b49\u4e8e\u4ea7\u751f\u5f0f\u4e2d\u6700\u53f3\u8fb9\u7684\u3001\u5b9a\u4e49\u4e86\u4f18\u5148\u7ea7\u7684\u7b26\u53f7\u7684\u4f18\u5148\u7ea7","title":"\u7f16\u8bd1\u539f\u7406"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/#flex","text":"\u4f8b\u5b50\uff1a %{ #define T_WORD 1 int numChars = 0, numWords = 0, numLines = 0; %} WORD ([^ \\t\\n\\r\\a]+) %% \\n { numLines++; numChars++; } {WORD} { numWords++; numChars += yyleng; return T_WORD; } <<EOF>> { return 0; } . { numChars++; } %% int main() { int token_type; while (token_type = yylex()) { printf(\"WORD:\\t%s\\n\", yytext); } printf(\"\\nChars\\tWords\\tLines\\n\"); printf(\"%d\\t%d\\t%d\\n\", numChars, numWords, numLines); return 0; } int yywrap() { return 1; } \u89c4\u5219\u8bf4\u660e\uff1a %{ Declarations %} Definitions %% Rules %% User subroutines Declarations \uff0c\u58f0\u660e\uff0c\u90fd\u662f C \u4ee3\u7801\uff0c\u8fd9\u4e9b\u4ee3\u7801\u4f1a\u88ab\u539f\u6837\u7684\u590d\u5236\u5230 lex.yy.c \u6587\u4ef6\u4e2d\uff0c\u4e00\u822c\u5728\u8fd9\u91cc\u58f0\u660e\u4e00\u4e9b\u5168\u5c40\u53d8\u91cf\u548c\u51fd\u6570\uff0c\u8fd9\u6837\u5728\u540e\u9762\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u53d8\u91cf\u548c\u51fd\u6570 Definitions \uff0c\u5b9a\u4e49\uff0c\u5728\u8fd9\u91cc\u53ef\u4ee5\u5b9a\u4e49\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\u7684\u4e00\u4e9b\u540d\u5b57\uff0c\u53ef\u4ee5\u5728 \u89c4\u5219\uff08Rules\uff09 \u6bb5\u88ab\u4f7f\u7528 Rules \u90e8\u5206\u4f1a\u88ab\u7ffb\u8bd1\u4e3a\u4e00\u4e2a yylex \u51fd\u6570\uff0c\u6b64\u51fd\u6570\u626b\u63cf\u5230\u4e00\u4e2a\u53ef\u4ee5\u548c Rules \u4e2d\u5339\u914d\u7684\u5b57\u7b26\u4e32\u65f6\u4f1a\u6267\u884c\u540e\u9762\u7684\u4ee3\u7801\uff1b\u6709\u591a\u6761\u89c4\u5219\u5339\u914d\u65f6\u9009\u62e9\u6700\u957f\u5339\u914d\uff0c\u5339\u914d\u957f\u5ea6\u76f8\u540c\u65f6\u9009\u62e9\u6700\u524d\u9762\u7684\u89c4\u5219 User subroutines \u90e8\u5206\u7684\u4ee3\u7801\u4f1a\u539f\u6837\u590d\u5236\u5230 lex.yy.c \u4ee3\u7801\u7684\u6700\u540e \u8f93\u5165\u6587\u4ef6\u4e2d\u6700\u540e\u4e00\u884c\u7684 yywrap \u51fd\u6570\u7684\u4f5c\u7528\u662f\u5c06\u591a\u4e2a\u8f93\u5165\u6587\u4ef6\u6253\u5305\u6210\u4e00\u4e2a\u8f93\u5165\uff0c\u5f53 yylex \u51fd\u6570\u8bfb\u5165\u5230\u4e00\u4e2a\u6587\u4ef6\u7ed3\u675f\uff08EOF\uff09\u65f6\uff0c\u5b83\u4f1a\u5411 yywrap \u51fd\u6570\u8be2\u95ee\uff0c yywrap \u51fd\u6570\u8fd4\u56de 1 \u7684\u610f\u601d\u662f\u544a\u8bc9 yylex \u51fd\u6570\u540e\u9762\u6ca1\u6709\u5176\u4ed6\u8f93\u5165\u6587\u4ef6\u4e86\uff0c\u6b64\u65f6 yylex \u51fd\u6570\u7ed3\u675f\uff0cyywrap \u51fd\u6570\u4e5f\u53ef\u4ee5\u6253\u5f00\u4e0b\u4e00\u4e2a\u8f93\u5165\u6587\u4ef6\uff0c\u518d\u5411 yylex \u51fd\u6570\u8fd4\u56de 0 \uff0c\u544a\u8bc9\u5b83\u540e\u9762\u8fd8\u6709\u522b\u7684\u8f93\u5165\u6587\u4ef6\uff0c\u6b64\u65f6 yylex \u51fd\u6570\u4f1a\u7ee7\u7eed\u89e3\u6790\u4e0b\u4e00\u4e2a\u8f93\u5165\u6587\u4ef6\uff1b\u5982\u679c\u53ea\u9700\u8981\u5904\u7406\u4e00\u4e2a\u6587\u4ef6\uff0c\u9ed8\u8ba4\u8fd4\u56de 1 \u5373\u53ef \u5b8f \uff1a ECHO //\u5c06\u5339\u914d\u5b57\u7b26\u4e32\u539f\u6837\u8f93\u51fa \u5185\u7f6e\u53d8\u91cf : yytext //\u5339\u914d\u6210\u529f\u7684\u5b57\u7b26\u4e32,\u53ef\u4ee5\u76f4\u63a5\u5f53\u5b57\u7b26\u4e32\u7528 yylval //flex\u8fdb\u884cscanner\uff0c\u5c06\u6570\u503c\u5b58\u5165yylval,\u800cbison\u53ef\u4ee5\u8bfb\u53d6yylval\u4e4b\u4e2d\u7684\u503c\uff0c\u6b64\u53d8\u91cf\u7c7b\u578b\u4e3a YYSTYPE \u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 YYSTYPE \u6765\u4fee\u6539 yylval \u7684\u7c7b\u578b\uff0c\u4e14 YYSTYPE \u5b9a\u4e49\u5fc5\u987b\u5728 #include\"xxx.tab.h\" \u4e4b\u524d\uff0c\u5982\u679c\u9700\u8981 yylval \u652f\u6301\u591a\u79cd\u7c7b\u578b\uff0c\u53ef\u4ee5\u4f7f\u7528 %union \u58f0\u660e\uff0c\u6b64\u58f0\u660e\u4f1a\u4fee\u6539 yylval \u7684\u7c7b\u578b\uff0c\u5982\uff1a %union { int intValue; float floatValue; } // \u90a3\u4e48\u5728\u4f7f\u7528 yylval \u65f6\u5c31\u9700\u8981\u5199 [a-zA-Z][a-zA-Z0-9]* { yylval.stringValue = strdup(yytext); return IDENTIFIER; }","title":"Flex"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/#bison","text":"%{ #include <stdio.h> void yyerror(const char* msg) {} %} %token T_NUM %left '+' '-' %left '*' '/' %% S : S E '\\n' { printf(\"ans = %d\\n\", $2); } | /* empty */ { /* empty */ } ; E : E '+' E { $$ = $1 + $3; } | E '-' E { $$ = $1 - $3; } | E '*' E { $$ = $1 * $3; } | E '/' E { $$ = $1 / $3; } | T_NUM { $$ = $1; } | '(' E ')' { $$ = $2; } ; %% int main() { return yyparse(); } \u89c4\u5219\u8bf4\u660e\uff1a %{ Declarations %} Definitions %% Productions %% User subroutines Declarations && User subroutines \u548c flex \u7c7b\u4f3c\uff0c\u8fd92\u90e8\u5206\u7684\u4ee3\u7801\u4f1a\u539f\u6837\u590d\u5236\u5230\u751f\u6210\u7684 c \u4ee3\u7801\u4e2d Definitions \u4e2d\u5b9a\u4e49\u4e00\u4e9b bison \u4e13\u6709\u7684\u53d8\u91cf Productions \u4e2d\u5199\u8bed\u6cd5\u4ea7\u751f\u5f0f\uff0c\u7528 : \u6765\u8868\u793a -> \uff0c | \u9694\u5f00\u540c\u4e00\u4e2a\u7ec8\u7ed3\u7b26\u7684\u4e0d\u540c\u7684\u4ea7\u751f\u5f0f\uff0c ; \u8868\u793a\u6b64\u4ea7\u751f\u5f0f\u7684\u7ed3\u675f\uff0c\u4ea7\u751f\u5f0f\u53f3\u8fb9\u662f \u03b5 \u65f6\uff0c\u4e0d\u9700\u8981\u5199\u4efb\u4f55\u7b26\u53f7\uff0c\u4e00\u822c\u7528\u4e00\u4e2a\u6ce8\u91ca / empty / \u4ee3\u66ff\uff0c\u6b64\u90e8\u5206\u4f1a\u88ab\u7ffb\u8bd1\u4e3a\u4e00\u4e2a yyparse \u51fd\u6570 bison \u4f1a\u5c06 Productions \u6bb5\u91cc\u7684\u7b2c\u4e00\u4e2a\u4ea7\u751f\u5f0f\u7684\u5de6\u8fb9\u7684\u975e\u7ec8\u7ed3\u7b26\u5f53\u4f5c\u8bed\u6cd5\u7684\u8d77\u59cb\u7b26\u53f7\uff0c\u540c\u65f6\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u8d77\u59cb\u7b26\u53f7\u4e0d\u4f4d\u4e8e\u4efb\u4f55\u4ea7\u751f\u5f0f\u7684\u53f3\u8fb9\uff0c bison \u4f1a\u81ea\u52a8\u6dfb\u52a0\u4e00\u4e2a\u7b26\u53f7\uff08\u5982 S\u2019 \uff09\u4ee5\u53ca\u4e00\u6761\u4ea7\u751f\u5f0f\uff08\u5982 S\u2019 -> S \uff09\uff0c\u800c\u5c06\u8fd9\u4e2a\u65b0\u589e\u7684\u7b26\u53f7\u5f53\u4f5c\u89e3\u6790\u7684\u8d77\u59cb\u7b26\u53f7 Bison \u4f1a\u81ea\u52a8\u8bc6\u522b\u975e\u7ec8\u7ed3\u7b26\uff1b\u7ec8\u7ed3\u7b26\u4e2d\uff0c\u5355\u5b57\u7b26 token \u7528\u5355\u5f15\u53f7\u62ec\u8d77\u6765\uff08\u5982 '\\n' '+'\uff09\uff0c\u5176\u4ed6 token \u9700\u8981\u5728 Definition \u4e2d\u5b9a\u4e49\u597d\uff0c\u5982\u4f8b\u5b50\u4e2d\u7684 token T_NUM \uff0c bison \u4f1a\u81ea\u52a8\u4e3a\u8fd9\u79cd token \u5206\u914d\u4e00\u4e2a\u7f16\u53f7\uff0c\u518d\u5199\u5230 y.tab.h \u6587\u4ef6\u4e2d\u53bb\uff0c\u53ef\u4ee5\u5728 flex \u4e2d\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e2a\u6587\u4ef6 \u53ef\u4ee5\u5728 Definitions \u6bb5\u5b9a\u4e49\u7b26\u53f7\u7684\u4f18\u5148\u7ea7 %left '+' '-' %left '*' '/' left \u8868\u793a \u5de6\u7ed3\u5408\uff0c\u4e0b\u9762\u884c\u7684\u7b26\u53f7\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u4e0a\u9762\u884c\u7684\u7b26\u53f7\uff0c\u540c\u4e00\u884c\u7684\u7b26\u53f7\u7684\u4f18\u5148\u7ea7\u76f8\u540c bison \u751f\u6210\u4e00\u4e2a C \u8bed\u8a00\u7684 LALR(1) \u52a8\u4f5c\u8868\uff0c\u5e76\u8f93\u51fa\u5230 y.tab.c \u6587\u4ef6\u4e2d\u53bb\uff0c\u53e6\u5916\uff0c\u8fd8\u4f1a\u5c06\u8fd9\u4e2a\u52a8\u4f5c\u8868\u4ee5\u53ca\u8bed\u6cd5\u4e2d\u7684\u76f8\u5173\u8981\u7d20\u4ee5\u53ef\u8bfb\u7684\u6587\u5b57\u5f62\u5f0f\u8f93\u51fa\u5230 y.output \u6587\u4ef6\u4e2d\u53bb\uff0c\u6b64\u6587\u4ef6\u4e2d\u4f1a\u6709\u6bcf\u4e2a\u72b6\u6001\u4ee5\u53ca\u72b6\u6001\u4e2d\u6240\u6709\u7684\u5f62\u6001 token stream \u5408\u6cd5 yyparse \u8fd4\u56de 0\uff0c\u4e0d\u5408\u6cd5\u5219\u8c03\u7528 yyerror \u5e76\u8fd4\u56de 1 yyparse \u51fd\u6570\u4e0d\u4ec5\u7ef4\u6301\u4e00\u4e2a\u72b6\u6001\u6808\uff0c\u5b83\u8fd8\u7ef4\u6301\u4e00\u4e2a\u7b26\u53f7\u5c5e\u6027\u6808\uff0c\u5f53\u5b83\u6267\u884c shift \u52a8\u4f5c\u65f6\uff0c\u5b83\u9664\u4e86\u5c06\u76f8\u5e94\u7684\u72b6\u6001\u538b\u5165\u72b6\u6001\u6808\u4e4b\u5916\uff0c\u8fd8\u4f1a\u5c06\u4e00\u4e2a\u7c7b\u578b\u4e3a YYSTYPE \uff08\u9ed8\u8ba4\u548c int \u76f8\u540c\uff09\u3001\u540d\u4e3a yylval \u7684\u5168\u5c40\u53d8\u91cf\u7684\u6570\u503c\u538b\u5165\u5230\u5c5e\u6027\u6808\u5185\uff0c\u800c\u5728 reduce \u52a8\u4f5c\u65f6\uff0c\u53ef\u4ee5\u7528 $1, $2, ... $n \u6765\u5f15\u7528\u5c5e\u6027\u6808\u7684\u5c5e\u6027\uff0c reduce \u52a8\u4f5c\u4e0d\u4ec5\u5c06\u76f8\u5e94\u7684\u72b6\u6001\u51fa\u6808\uff0c\u8fd8\u4f1a\u5c06\u540c\u6837\u6570\u91cf\u7684\u5c5e\u6027\u51fa\u6808\uff0c\u8fd9\u4e9b\u5c5e\u6027\u548c reduce \u4ea7\u751f\u5f0f\u7684\u53f3\u8fb9\u7684\u7b26\u53f7\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\uff0c\u540c\u65f6\uff0c\u7528 $$ \u4ee3\u8868\u4ea7\u751f\u5f0f\u5de6\u8fb9\u7684\u7ec8\u7ed3\u7b26\uff0c\u5728 reduce \u52a8\u4f5c\u91cc\u53ef\u4ee5\u8bbe\u7f6e $$ \u7684\u503c\uff0c\u5f53\u6267\u884c goto \u52a8\u4f5c\u65f6\uff0c\u9664\u4e86\u5c06\u76f8\u5e94\u7684\u72b6\u6001\u5165\u6808\uff0c\u8fd8\u4f1a\u5c06 $$ \u5165\u6808 \u5982\u679c\u8981\u4f7f\u7528 $$ $1 \u8fd9\u79cd\u9700\u8981\u5728 \\%token \u540e\u9762\u89c4\u5b9a\u7c7b\u578b","title":"Bison"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/#_1","text":"Flex \u4ee3\u7801 %{ #define YYSTYPE char * #include \"y.tab.h\" int cur_line = 1; void yyerror(const char *msg); void unrecognized_char(char c); %} OPERATOR [-/+*()=;] INTEGER [0-9]+ IDENTIFIER [_a-zA-Z][_a-zA-Z0-9]* WHITESPACE [ \\t]* %% {OPERATOR} { return yytext[0]; } {INTEGER} { yylval = strdup(yytext); return T_IntConstant; } {IDENTIFIER} { yylval = strdup(yytext); return T_Identifier; } {WHITESPACE} { /* ignore every whitespcace */ } \\n { cur_line++; } . { unrecognized_char(yytext[0]); } %% int yywrap(void) { return 1; } void unrecognized_char(char c) { char buf[32] = \"Unrecognized character: ?\"; buf[24] = c; yyerror(buf); } void yyerror(const char *msg) { printf(\"Error at line %d:\\n\\t%s\\n\", cur_line, msg); exit(1); } Bison \u4ee3\u7801\uff1a %{ #include <stdio.h> #include <stdlib.h> void yyerror(const char*); #define YYSTYPE char * %} %token T_IntConstant T_Identifier %left '+' '-' %left '*' '/' %right U_neg %% S : Stmt | S Stmt ; Stmt: T_Identifier '=' E ';' { printf(\"pop %s\\n\\n\", $1); } ; E : E '+' E { printf(\"add\\n\"); } | E '-' E { printf(\"sub\\n\"); } | E '*' E { printf(\"mul\\n\"); } | E '/' E { printf(\"div\\n\"); } | '-' E %prec U_neg { printf(\"neg\\n\"); } | T_IntConstant { printf(\"push %s\\n\", $1); } | T_Identifier { printf(\"push %s\\n\", $1); } | '(' E ')' { /* empty */ } ; %% int main() { return yyparse(); } U_neg \u8868\u793a\u53d6\u53cd\uff0c\u53f3\u7ed3\u5408\uff0c%prec U_neg \u8868\u793a\u6b21\u4ea7\u751f\u5f0f\u7684\u4f18\u5148\u7ea7\u7b49\u4e8e U_neg\uff0c\u5426\u5219\u6b21\u4ea7\u751f\u5f0f\u7684\u4f18\u5148\u7ea7\u7b49\u4e8e\u4ea7\u751f\u5f0f\u4e2d\u6700\u53f3\u8fb9\u7684\u3001\u5b9a\u4e49\u4e86\u4f18\u5148\u7ea7\u7684\u7b26\u53f7\u7684\u4f18\u5148\u7ea7","title":"\u4f8b\u5b50"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/","text":"\u7f51\u7edc\u662f\u600e\u6837\u8fde\u63a5\u7684 \u00b6 \u300a\u7f51\u7edc\u662f\u600e\u6837\u8fde\u63a5\u7684\u300b\u7b14\u8bb0 1 \u6d4f\u89c8\u5668\u751f\u6210\u6d88\u606f\uff1a\u63a2\u7d22\u6d4f\u89c8\u5668\u5185\u90e8 \u00b6 1.1 \u751f\u6210HTTP\u8bf7\u6c42\u6d88\u606f \u00b6 URL\uff1a\u7f51\u5740\uff0cUniform Resource Locator\uff0c\u7edf\u4e00\u8d44\u6e90\u5b9a\u4f4d\u7b26 FTP\uff1aFile Transfer Protocol\uff0c\u6587\u4ef6\u4f20\u8f93\u534f\u8bae HTTP\uff1aHypertext Transfer Protocol\uff0c\u8d85\u6587\u672c\u4f20\u9001\u534f\u8bae \u8f93\u5165 URL \u6216\u8005\u70b9\u51fb\u7f51\u7ad9\u4e2d\u7684\u94fe\u63a5\u4f1a\u5411 Web \u670d\u52a1\u5668\u53d1\u9001 HTTP \u8bf7\u6c42\uff0cURL \u662f Web \u670d\u52a1\u5668\u7684\u540d\u79f0\u52a0\u4e0a\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u6bd4\u5982\uff1awww.lab.glasscom.com \u52a0\u4e0a /fir1/file1/html \u7701\u7565\u6587\u4ef6\u8def\u5f84\u4e00\u822c\u4f1a\u8bbf\u95ee\u9ed8\u8ba4\u6587\u4ef6\uff0c\u5982 default.html \u6216\u8005 index.html \u6d4f\u89c8\u5668\u7684\u7b2c\u4e00\u6b65\u5de5\u4f5c\u5c31\u662f\u5bf9 URL \u8fdb\u884c\u89e3\u6790 URI\uff1aUniform Resource Identifier\uff0c\u7edf\u4e00\u8d44\u6e90\u6807\u8bc6\u7b26 CGI\uff1a\u5bf9 Web \u670d\u52a1\u5668\u7a0b\u5e8f\u8c03\u7528\u5176\u4ed6\u7a0b\u5e8f\u7684\u89c4\u5219\u6240\u505a\u7684\u5b9a\u4e49\u5c31\u662f CGI\uff0c\u6309\u7167 CGI \u89c4\u8303\u5de5\u4f5c\u7684\u7a0b\u5e8f\u5c31\u662f CGI \u7a0b\u5e8f HTTP \u534f\u8bae\u5b9a\u4e49\u4e86\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u4ea4\u4e92\u7684\u5185\u5bb9\u548c\u6b65\u9aa4\uff0c\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u53d1\u9001\u7684\u8bf7\u6c42\u6d88\u606f\u4e2d\u5305\u62ec\u4e86 \"\u5bf9\u4ec0\u4e48\" \u548c \"\u8fdb\u884c\u600e\u6837\u7684\u64cd\u4f5c\" \"\u5bf9\u4ec0\u4e48\" \u5c31\u662f URI\uff0c\u4e00\u822c\u662f\u5b58\u653e\u7f51\u9875\u6570\u636e\u7684\u6587\u4ef6\u540d\u6216\u8005 CGI \u7a0b\u5e8f \"\u8fdb\u884c\u600e\u6837\u7684\u64cd\u4f5c\" \u79f0\u4e3a\u65b9\u6cd5\uff0c\u4e5f\u53eb HTTP \u8c13\u8bcd/\u52a8\u8bcd\uff0c\u5177\u4f53\u8868\u89c1 P12 \u65b9\u6cd5 \u542b\u4e49 GET \u83b7\u53d6 URI \u6307\u5b9a\u7684\u4fe1\u606f POST \u4ece\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u53d1\u9001\u6570\u636e\uff08\u586b\u5199\u95ee\u5377\u8c03\u67e5\uff09 ... ... \u670d\u52a1\u5668\u6536\u5230\u6d88\u606f\u7136\u540e\u5de5\u4f5c\u540e\u8fd4\u56de\u54cd\u5e94\u6d88\u606f\uff0c\u5f00\u5934\u5305\u542b\u4e86\u4e00\u4e2a\u72b6\u6001\u7801\uff0c\u5982 404 Not Found\uff0c\u7136\u540e\u5c31\u662f\u5934\u5b57\u6bb5\u548c\u7f51\u9875\u6570\u636e\uff0c\u5ba2\u6237\u7aef\u6536\u5230\u540e\u628a\u6570\u636e\u73b0\u5b9e\u5728\u5c4f\u5e55\u4e0a HTTP \u8bf7\u6c42\u6d88\u606f\u7684\u5185\u5bb9\uff1a \u8bf7\u6c42\u6d88\u606f\uff1a <\u65b9\u6cd5><\u7a7a\u683c><URI><\u7a7a\u683c><HTTP\u7248\u672c> <\u5b57\u6bb5\u540d>:<\u5b57\u6bb5\u503c> ... <\u7a7a\u884c> <\u6d88\u606f\u4f53> \u54cd\u5e94\u6d88\u606f\uff1a <HTTP\u7248\u672c><\u7a7a\u683c><\u72b6\u6001\u7801><\u7a7a\u683c><\u54cd\u5e94\u77ed\u8bed> <\u5b57\u6bb5\u540d>:<\u5b57\u6bb5\u503c> ... <\u7a7a\u884c> <\u6d88\u606f\u4f53> \u7b2c\u4e8c\u884c\u5f00\u59cb\u662f\u4e00\u4e9b\u6d88\u606f\u5934\uff0c\u5982\u65e5\u671f\uff0c\u5ba2\u6237\u7aef\u652f\u6301\u7684\u6570\u636e\u7c7b\u578b\uff0c\u8bed\u8a00\uff0c\u538b\u7f29\u683c\u5f0f\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u8f6f\u4ef6\u540d\u79f0\u548c\u7248\u672c.... \u6d88\u606f\u4f53\u4e2d\u5305\u542b\u8981\u53d1\u9001\u7684\u6570\u636e\uff0c\u5982\u5ba2\u6237\u7aef POST \u53d1\u9001\u7684\u8868\u5355\uff0c\u670d\u52a1\u5668\u8fd4\u56de\u7684\u6570\u636e\u6216\u8005 CGI \u8f93\u51fa\u7684\u6570\u636e \u6d88\u606f\u5934\u4e2d\u7684\u4e3b\u8981\u5934\u5b57\u6bb5\u8868\u89c1 P17 \u5934\u5b57\u6bb5\u7c7b\u578b \u542b\u4e49 ... ... HTTP \u72b6\u6001\u7801\u6982\u8981\uff1a \u72b6\u6001\u7801 \u542b\u4e49 1xx \u544a\u77e5\u8bf7\u6c42\u7684\u5904\u7406\u8fdb\u5ea6\u548c\u60c5\u51b5 2xx \u6210\u529f 3xx \u8868\u793a\u9700\u8981\u8fdb\u4e00\u6b65\u64cd\u4f5c 4xx \u5ba2\u6237\u7aef\u51fa\u9519 5xx \u670d\u52a1\u5668\u51fa\u9519 \u6d4f\u89c8\u5668\u5c06\u6570\u636e\u63d0\u53d6\u51fa\u6765\u540e\u73b0\u5b9e\u5728\u5c4f\u5e55\u4e0a\uff0c\u5982\u679c\u6709\u56fe\u7247\u7b49\u8d44\u6e90\u4f1a\u5bf9\u6240\u6709 HTML \u4e2d\u76f8\u5e94\u7684\u6807\u7b7e\u7684 URI \u8bbf\u95ee Web \u670d\u52a1\u5668\uff0c\u6bcf\u6b21\u53ea\u4f1a\u83b7\u53d6\u4e00\u4e2a\u6587\u4ef6\u3002\u5982\u679c\u4e00\u4e2a\u7f51\u9875\u6709 3 \u5f20\u56fe\uff0c\u9700\u8981\u5411 Web \u670d\u52a1\u5668\u53d1\u9001 4 \u6b21\u8bf7\u6c42 \u5728\u8fd9\u671f\u95f4 Web \u670d\u52a1\u5668\u5e76\u4e0d\u5173\u5fc3\u6d4f\u89c8\u5668\u7684\u64cd\u4f5c\uff0c\u4e5f\u4e0d\u5173\u5fc3\u8fd4\u56de\u7684\u56fe\u7247\u6216\u8005\u6587\u4ef6\u662f\u4e0d\u662f\u4e00\u4e2a\u7f51\u9875\u4e0a\u7684 1 \u6761\u8bf7\u6c42\u6d88\u606f\u53ea\u80fd\u5199 1 \u4e2a URI\uff0c\u5982\u679c\u9700\u8981\u83b7\u53d6\u591a\u4e2a\u6587\u4ef6\uff0c\u5fc5\u987b\u5bf9\u6bcf\u4e2a\u6587\u4ef6\u5355\u72ec\u53d1\u9001 1 \u6761\u8bf7\u6c42 1.2 \u5411DNS \u670d\u52a1\u5668\u67e5\u8be2 Web \u670d\u52a1\u5668\u7684 IP \u5730\u5740 \u00b6 \u6d4f\u89c8\u5668\u4e0d\u5177\u6709\u5c06\u6d88\u606f\u9001\u5230\u7f51\u7edc\u4e2d\u7684\u80fd\u529b\uff0c\u9700\u8981\u59d4\u6258\u64cd\u4f5c\u7cfb\u7edf\uff1b\u5728\u6b64\u4e4b\u524d\u9700\u8981\u67e5\u8be2\u7f51\u5740\u4e2d\u670d\u52a1\u5668\u57df\u540d\u5bf9\u5e94\u7684 IP \u5730\u5740 TCP/IP \u7684\u7ed3\u6784\u662f\u4e00\u4e9b\u5c0f\u7684\u5b50\u7f51\uff0c\u901a\u8fc7\u8def\u7531\u5668\u8fde\u63a5\u8d77\u6765\u7ec4\u6210\u7684\u4e00\u4e2a\u5927\u7684\u7f51\u7edc\uff1b\u5b50\u7f51\u53ef\u4ee5\u7406\u89e3\u4e3a\u7528\u96c6\u7ebf\u5668\u8fde\u63a5\u8d77\u6765\u7684\u8ba1\u7b97\u673a IP \u5730\u5740\u4e0e\u5b50\u7f51\u63a9\u7801\uff1aIP \u5730\u5740\u5206\u4e3a\u7f51\u7edc\u53f7\u548c\u4e3b\u673a\u53f7 \u4e3b\u673a\u53f7\u5168\u4e3a 0 \u4ee3\u8868\u6574\u4e2a\u5b50\u7f51\uff0c\u5168\u4e3a 1 \u8868\u793a\u5bf9\u5b50\u8fdb\u884c\u5e7f\u64ad DNS\uff1aDomain Name System\uff0c\u57df\u540d\u670d\u52a1\u7cfb\u7edf \u5728\u7f51\u7edc\u4e0a\u901a\u4fe1\u4eba\u4f7f\u7528\u57df\u540d\uff0c\u8def\u7531\u5668\u4f7f\u7528 IP \u5730\u5740\uff0c\u901a\u8fc7\u57df\u540d\u67e5\u8be2 IP \u7684\u673a\u5236\u5c31\u662f DNS \u5bf9\u4e8e DNS \u670d\u52a1\u5668\uff0c\u6211\u4eec\u8ba1\u7b97\u673a\u4e0a\u6709\u5bf9\u5e94\u7684 DNS \u5ba2\u6237\u7aef\uff0c\u79f0\u4e3a DNS \u89e3\u6790\u5668\uff0c\u5b9e\u9645\u4e0a\u662f\u4e00\u6bb5\u7a0b\u5e8f\uff0c\u5305\u542b\u5728\u64cd\u4f5c\u7cfb\u7edf\u7684 Socket \u5e93\u4e2d\uff0c\u8c03\u7528\u4e00\u4e2a\u53eb gethostbyname \u7684\u7a0b\u5e8f\u7ec4\u4ef6 Socket \u5e93\u662f\u7528\u4e8e\u8c03\u7528\u7f51\u7edc\u529f\u80fd\u7684\u7a0b\u5e8f\u7ec4\u4ef6\u96c6\u5408\uff0c\u53ef\u4ee5\u8bf4\u662f\u7f51\u7edc\u5f00\u53d1\u4e2d\u7684\u4e00\u79cd\u6807\u51c6\u5e93 \u6839\u636e\u57df\u540d\u67e5\u8be2 IP \u5730\u5740\u65f6\uff0c\u6d4f\u89c8\u5668\u56de\u4f7f\u7528 Socket \u5e93\u4e2d\u7684\u89e3\u6790\u5668 \u534f\u8bae\u6808\uff1a\u64cd\u4f5c\u7cfb\u7edf\u5185\u90e8\u7684\u7f51\u7edc\u63a7\u5236\u8f6f\u4ef6\uff0c\u4e5f\u53eb \"\u534f\u8bae\u9a71\u52a8\" \"TCP/IP \u9a71\u52a8\" \u89e3\u6790\u5668\u53d1\u9001\u6d88\u606f\u7684\u64cd\u4f5c\u540c\u6837\u8981\u59d4\u6258\u7ed9\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684\u534f\u8bae\u6808\u8fdb\u884c\uff0c\u5411 DNS \u670d\u52a1\u5668\u53d1\u9001\u6d88\u606f\u65f6\u4e5f\u9700\u8981\u77e5\u9053 DNS \u670d\u52a1\u5668\u7684 IP \u5730\u5740\uff0c\u8fd9\u4e2a\u65f6\u4e8b\u5148\u8bbe\u7f6e\u597d\u7684 1.3 \u5168\u4e16\u754c DNS \u670d\u52a1\u5668\u7684\u5927\u63a5\u529b \u00b6 DNS \u670d\u52a1\u5668\u7684\u57fa\u672c\u5de5\u4f5c\u5c31\u662f\u63a5\u53d7\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u67e5\u8be2\u6d88\u606f\uff0c\u7136\u540e\u6839\u636e\u6d88\u606f\u7684\u5185\u5bb9\u8fd4\u56de\u54cd\u5e94\uff0c\u67e5\u8be2\u6d88\u606f\u5305\u542b\u4ee5\u4e0b 3 \u79cd\u4fe1\u606f\uff1a \u57df\u540d Class\uff1a\u73b0\u5728\u6c38\u8fdc\u662f\u4ee3\u8868\u4e92\u8054\u7f51\u7684 IN \u8bb0\u5f55\u7c7b\u578b\uff1aA\uff08Address\uff09 \u8868\u793a\u57df\u540d\u5bf9\u5e94\u7684\u662f IP \u5730\u5740\uff1bMX\uff08Mail eXchange\uff09 \u8868\u793a\u57df\u540d\u5bf9\u5e94\u7684\u662f\u90ae\u4ef6\u670d\u52a1\u5668\uff1bPTR\uff1a\u6839\u636e IP \u53cd\u67e5\u57df\u540d\uff1bCNAME\uff1bNS\uff1bSOA\uff1b DNS \u670d\u52a1\u5668\u4f1a\u4ece\u57df\u540d\u4e0e IP \u5730\u5740\u7684\u5bf9\u7167\u8868\u4e2d\u67e5\u627e\u5bf9\u5e94\u7684\u8bb0\u5f55\uff0c\u5e76\u8fd4\u56de IP \u5730\u5740 \u4fe1\u606f\u662f\u4fdd\u5b58\u518d\u591a\u53f0 DNS \u670d\u52a1\u5668\u4e2d\u7684 \u57df\u540d\u8d8a\u9760\u53f3\u7684\u4f4d\u7f6e\u8868\u793a\u5176\u5c42\u7ea7\u8d8a\u9ad8\uff0c\u76f8\u5f53\u4e8e\u4e00\u4e2a\u5c42\u7ea7\u7684\u90e8\u5206\u79f0\u4e3a\u57df\uff0c\u4e00\u4e2a\u57df\u7684\u4fe1\u606f\u4f1a\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u5b58\u653e\u5728 DNS \u670d\u52a1\u5668\u4e2d\uff0c\u4e00\u53f0 DNS \u670d\u52a1\u5668\u53ef\u4ee5\u5b58\u653e\u591a\u4e2a\u57df\u7684\u4fe1\u606f\uff0c\u4f46\u662f\u4e0d\u80fd\u5c06\u4e00\u4e2a\u57df\u62c6\u5f00\u6765\u5b58\u653e\u5728\u591a\u53f0 DNS \u670d\u52a1\u5668\u4e2d\uff1b\u4e0a\u7ea7\u57df\u53ef\u4ee5\u5206\u914d\u591a\u4e2a\u4e0b\u7ea7\u57df\u6765\u7ba1\u7406 \u8981\u5bfb\u627e\u5230\u5bf9\u5e94\u7684 DNS \u670d\u52a1\u5668\uff0c\u9996\u5148\u8d1f\u8d23\u7ba1\u7406\u4e0b\u7ea7\u57df\u7684 DNS \u670d\u52a1\u5668\u7684 IP \u5730\u5740\u6ce8\u518c\u5230\u4e0a\u7ea7 DNS \u670d\u52a1\u5668\u4e2d\uff0c\u518d\u6ce8\u518c\u5230\u66f4\u4e0a\u7ea7... com\uff0cjp \u8fd9\u79cd\u57df\u5e76\u4e0d\u662f\u6700\u9ad8\u7ea7\u7684\u57df\uff0c\u8fd8\u6709\u4e00\u4e2a\u6839\u57df\u6765\u8d1f\u8d23\u8fd9\u4e9b\u57df\u7684\u4fe1\u606f\uff1b\u7136\u540e\u518d\u5c06\u6839\u57df\u7684\u4fe1\u606f\u4fdd\u5b58\u5728\u6240\u6709\u7684 DNS \u670d\u52a1\u5668\u4e0a\uff1b\u4e8e\u662f\u5ba2\u6237\u7aef\u53ea\u8981\u80fd\u627e\u5230\u4efb\u610f\u4e00\u53f0 DNS \u670d\u52a1\u5668\u5c31\u884c \u52a0\u5feb DNS \u670d\u52a1\u5668\u7684\u54cd\u5e94\u901f\u5ea6\uff1a \u4e0a\u7ea7\u57df\u548c\u4e0b\u7ea7\u57df\u4e2d\u5171\u4eab DNS \u670d\u52a1\u5668\u65f6 DNS \u670d\u52a1\u5668\u4e2d\u6709\u7f13\u5b58\u4fe1\u606f\uff0c\u5e76\u4e0d\u662f\u6bcf\u6b21\u90fd\u662f\u4ece\u6839\u57df\u5f00\u59cb\u67e5\u8d77\uff0c\u5982\u679c\u7f13\u5b58\u6709\u5c31\u4ece\u7f13\u5b58\u4e2d\u5b58\u50a8\u7684\u4f4d\u7f6e\u5f00\u59cb\u67e5\u8d77\uff1b\u4fe1\u606f\u88ab\u7f13\u5b58\u540e\uff0c\u539f\u672c\u6ce8\u518c\u7684\u4fe1\u606f\u53ef\u80fd\u4f1a\u88ab\u6539\u53d8\uff0c\u6240\u4ee5\u7f13\u5b58\u7684\u4fe1\u606f\u53ef\u80fd\u662f\u9519\u7684\uff0c\u6240\u4ee5\u7f13\u5b58\u4f1a\u8bbe\u7f6e\u6709\u6548\u671f\u5b9a\u671f\u5220\u9664\uff1b\u8fd4\u56de\u54cd\u5e94\u4fe1\u606f\u662f\u4e5f\u4f1a\u544a\u77e5\u5ba2\u6237\u7aef\u8fd9\u4e00\u54cd\u5e94\u662f\u6765\u81ea\u7f13\u5b58\u8fd8\u662f\u8d1f\u8d23\u7ba1\u7406\u8be5\u57df\u540d\u7684 DNS \u670d\u52a1\u5668 \u57df\u540d\u4e0d\u5b58\u5728\u65f6\u4e5f\u4f1a\u88ab\u54cd\u5e94 1.4 \u59d4\u6258\u534f\u8bae\u6808\u53d1\u9001\u6d88\u606f \u00b6 \u5f97\u5230\u4e86 IP \u5730\u5740\u540e\uff0c\u59d4\u6258\u64cd\u4f5c\u7cfb\u7edf\u5185\u90e8\u7684\u534f\u8bae\u6808\u5411\u8fd9\u4e2a IP\u5730\u5740\u53d1\u9001\u6d88\u606f \u5411\u64cd\u4f5c\u7cfb\u7edf\u5185\u90e8\u7684\u534f\u8bae\u6808\u53d1\u9001\u59d4\u6258\u65f6\uff0c\u9700\u8981\u6309\u7167\u6307\u5b9a\u7684\u987a\u5e8f\u6765\u8c03\u7528 Socket \u5e93\u4e2d\u7684\u7a0b\u5e8f\u7ec4\u4ef6 \u6536\u53d1\u6570\u636e\u7684\u4e24\u53f0\u8ba1\u7b97\u673a\u4e4b\u95f4\u8fde\u63a5\u4e00\u6761\u6570\u636e\u901a\u9053\uff0c\u6570\u636e\u6cbf\u7740\u8fd9\u6761\u901a\u9053\u6d41\u52a8\uff1b\u901a\u9053\u9700\u8981\u4e8b\u5148\u5efa\u7acb\u597d\uff0c\u5efa\u7acb\u901a\u9053\u7684\u5173\u952e\u662f\u7ba1\u9053\u4e24\u7aef\u7684\u51fa\u5165\u53e3\uff0c\u4e5f\u53eb\u505a\u5957\u63a5\u5b57\uff1b\u5148\u521b\u5efa\u5957\u63a5\u5b57\uff0c\u7136\u540e\u8fde\u63a5\u8d77\u6765\uff1b \u9996\u5148\u670d\u52a1\u5668\u4e00\u65b9\u521b\u5efa\u597d\u5957\u63a5\u5b57\uff0c\u7136\u540e\u7b49\u5f85\u5ba2\u6237\u7aef\u5411\u8be5\u5957\u63a5\u5b57\u8fde\u63a5\u7ba1\u9053\uff08\u670d\u52a1\u5668\u4e00\u822c\u4f1a\u5728\u542f\u52a8\u540e\u5c31\u521b\u5efa\u597d\u5957\u63a5\u5b57\u5e76\u7b49\u5f85\u8fde\u63a5\uff09\uff1b\u5ba2\u6237\u7aef\u8981\u8fde\u63a5\u65f6\u4e5f\u4f1a\u5148\u521b\u5efa\u5957\u63a5\u5b57\u7136\u540e\u8fde\u63a5\u5230\u670d\u52a1\u5668\u7684\u5957\u63a5\u5b57\uff1b\u8fde\u63a5\u8d77\u6765\u540e\u901a\u4fe1\u51c6\u5907\u5c31\u5b8c\u6210\u4e86 \u6570\u636e\u53d1\u9001\u5b8c\u6bd5\u540e\u7ba1\u9053\u4f1a\u65ad\u5f00\uff1b\u7ba1\u9053\u5728\u8fde\u63a5\u65f6\u662f\u7531\u5ba2\u6237\u7aef\u53d1\u8d77\uff0c\u4f46\u65ad\u5f00\u65f6 2 \u65b9\u90fd\u53ef\u4ee5\uff0c\u4e00\u65b9\u65ad\u5f00\u540e\u53e6\u4e00\u65b9\u4e5f\u4f1a\u65ad\u5f00\uff0c\u5957\u63a5\u5b57\u4e5f\u4f1a\u5220\u9664 \u6536\u53d1\u6570\u636e\u5927\u81f4\u603b\u7ed3\u4e3a 4 \u4e2a\u9636\u6bb5\uff1a \u521b\u5efa\u5957\u63a5\u5b57\uff08 \u5c06\u7ba1\u9053\u8fde\u63a5\u5230\u670d\u52a1\u5668\u7684\u5957\u63a5\u5b57\u4e0a \u6536\u53d1\u6570\u636e \u65ad\u5f00\u7ba1\u9053\u5e76\u5220\u9664\u5957\u63a5\u5b57 \u8fde\u63a5\u7ba1\u9053\u548c\u653e\u5165\u6570\u636e\u90fd\u662f\u6d4f\u89c8\u5668\u7b49\u59d4\u6258\u534f\u8bae\u6808\u6765\u4ee3\u52b3\uff0c\u8fd9\u4e9b\u59d4\u6258\u90fd\u662f\u8c03\u7528 Socket \u5e93\u6765\u6267\u884c\uff1b \u4ee5\u4e0b\u5185\u5bb9\u7b2c 2 \u7ae0\u4f1a\u8be6\u7ec6\u8bf4\u660e \u521b\u5efa\u5957\u63a5\u5b57\u9636\u6bb5 \uff1a \u8bbf\u95ee DNS \u670d\u52a1\u5668\u65f6\u662f\u8c03\u7528 Socket \u5e93\u4e2d\u7684 gethostbyname\uff0c\u521b\u5efa\u5957\u63a5\u5b57\u65f6\u662f\u8c03\u7528 socket\uff08\u5c0f\u5199\uff09 \u7ec4\u4ef6\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u63cf\u8ff0\u7b26\uff08\u7528\u6765\u8bc6\u522b\u4e0d\u540c\u7684\u5957\u63a5\u5b57\uff09\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d \u5e94\u7528\u7a0b\u5e8f\u65f6\u901a\u8fc7 \"\u63cf\u8ff0\u7b26\" \u8fd9\u4e00\u7c7b\u4f3c\u53f7\u7801\u724c\u7684\u4e1c\u897f\u6765\u8bc6\u522b\u5957\u63a5\u5b57\u7684 \u8fde\u63a5\u9636\u6bb5\uff1a\u628a\u7ba1\u9053\u63a5\u4e0a\u53bb \uff1a \u63a5\u4e0b\u6765\u59d4\u6258\u534f\u8bae\u6808\u5c06\u521b\u5efa\u7684\u5957\u63a5\u5b57\u548c\u670d\u52a1\u5668\u7684\u5957\u63a5\u5b57\u8fde\u63a5\u8d77\u6765\uff0c\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u8c03\u7528 Socket \u5e93\u4e2d\u7684 connect \u7a0b\u5e8f\uff0c\u8c03\u7528\u65f6\u9700\u8981\u6307\u5b9a 2 \u4e2a\u53c2\u6570\uff1a \u63cf\u8ff0\u7b26 \u670d\u52a1\u5668 IP \u5730\u5740 \u7aef\u53e3\u53f7\uff1aIP \u5730\u5740 + \u7aef\u53e3\u53f7 \u53ef\u4ee5\u8bc6\u522b\u51fa\u67d0\u53f0\u5177\u4f53\u8ba1\u7b97\u673a\u4e0a\u7684\u67d0\u4e2a\u5957\u63a5\u5b57\uff08\u63cf\u8ff0\u7b26\u662f\u548c\u59d4\u6258\u521b\u5efa\u5957\u63a5\u5b57\u7684\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u4ea4\u4e92\u65f6\u4f7f\u7528\u7684\uff0c\u6240\u4ee5\u53e6\u4e00\u65b9\u4e0d\u77e5\u9053\u8fd9\u4e2a\u63cf\u8ff0\u7b26\uff0c\u5373\u63cf\u8ff0\u7b26\u7528\u4e8e\u8ba1\u7b97\u673a\u5185\u90e8\uff0c\u7aef\u53e3\u53f7\u7528\u6765\u8ba9\u901a\u4fe1\u7684\u53e6\u4e00\u65b9\u80fd\u591f\u8bc6\u522b\u51fa\u5957\u63a5\u5b57\uff09\uff0c\u7aef\u53e3\u53f7\u662f\u4e8b\u5148\u89c4\u5b9a\u597d\u7684\uff0c\u6bd4\u5982 Web \u662f 80 \u7aef\u53e3\u53f7\uff0c\u7535\u5b50\u90ae\u4ef6\u662f 25 \u7aef\u53e3\u53f7\uff1b\u5ba2\u6237\u7aef\u5728\u521b\u5efa\u5957\u63a5\u5b57\u65f6\u4f1a\u5206\u914d\u7aef\u53e3\u53f7\uff0c\u7136\u540e\u5728\u6267\u884c\u8fde\u63a5\u64cd\u4f5c\u65f6\u544a\u77e5\u670d\u52a1\u5668 \u901a\u4fe1\u9636\u6bb5\uff1a\u4f20\u9012\u6d88\u606f \uff1a \u5957\u63a5\u5b57\u8fde\u63a5\u540e\u901a\u8fc7 Socket \u4e2d\u7684 write \u7ec4\u4ef6\u5c06\u6570\u636e\u9001\u5165\u5957\u63a5\u5b57 \u63a5\u53d7\u6d88\u606f\u901a\u8fc7 Socket \u4e2d\u7684 read \u7ec4\u4ef6\u6765\u5b8c\u6210\uff0c\u5c06\u6536\u5230\u7684\u54cd\u5e94\u6d88\u606f\u653e\u5165\u5230\u63a5\u6536\u7f13\u51b2\u533a \u65ad\u5f00\u9636\u6bb5\uff1a\u6536\u53d1\u6570\u636e\u7ed3\u675f \uff1a \u6536\u53d1\u6570\u636e\u7ed3\u675f\u540e\u8c03\u7528 Socket \u7684 close \u7ec4\u4ef6\u65ad\u5f00\u7ba1\u9053\u5e76\u5220\u9664\u5957\u63a5\u5b57\uff1b\u6bcf\u83b7\u53d6\u4e00\u6b21\u6570\u636e\u90fd\u9700\u8981\u6267\u884c\u4e00\u6b21\u8fde\u63a5\uff0c\u53d1\u9001\u8bf7\u6c42\uff0c\u63a5\u6536\u54cd\u5e94\u6d88\u606f\uff0c\u65ad\u5f00\u7684\u8fc7\u7a0b\uff1bHTTP1.1 \u4e2d\u53ef\u4ee5\u5728\u6240\u6709\u6570\u636e\u8bf7\u6c42\u5b8c\u6210\u540e\uff0c\u6d4f\u89c8\u5668\u4e3b\u52a8\u89e6\u53d1\u65ad\u5f00\u8fde\u63a5\u7684\u64cd\u4f5c 2 \u7528\u7535\u4fe1\u53f7\u4f20\u8f93 TCP/IP \u6570\u636e\uff1a\u63a2\u7d22\u534f\u8bae\u6808\u548c\u7f51\u5361 \u00b6 2.1 \u521b\u5efa\u5957\u63a5\u5b57 \u00b6 \u534f\u8bae\u6808\u662f\u7f51\u7edc\u63a7\u5236\u8f6f\u4ef6\uff0c\u7f51\u5361\u662f\u7f51\u7edc\u786c\u4ef6 \u4e0a\u9762\u7684\u90e8\u5206\u4f1a\u5411\u4e0b\u7684\u90e8\u5206\u59d4\u6d3e\u5de5\u4f5c\uff1bSocket \u4e2d\u7684\u89e3\u6790\u5668\u7528\u6765\u5411 DNS \u670d\u52a1\u5668\u53d1\u51fa\u67e5\u8be2 \u6d4f\u89c8\u5668\uff0c\u90ae\u4ef6\u7b49\u4e00\u822c\u7684\u5e94\u7528\u7a0b\u5e8f\u6536\u53d1\u6570\u636e\u7528 TCP \u534f\u8bae DNS \u67e5\u8be2\u7b49\u6536\u53d1\u8f83\u77ed\u7684\u63a7\u5236\u6570\u636e\u7528 UDP \u534f\u8bae IP \u534f\u8bae\u4f1a\u5c06\u6570\u636e\u5206\u6210\u4e00\u4e2a\u4e00\u4e2a\u7684\u7f51\u7edc\u5305\u7136\u540e\u53d1\u9001\uff1b\u6b64\u5916 IP \u4e2d\u8fd8\u5305\u62ec ICMP\uff082.5\u8282\uff09 \u534f\u8bae\u548c ARP \u534f\u8bae\uff082.5\u8282\uff09 ICMP \u7528\u4ee5\u544a\u77e5\u7f51\u7edc\u5305\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u9519\u8bef\u548c\u5404\u79cd\u63a7\u5236\u4fe1\u606f\uff0cARP \u7528\u4e8e\u6839\u636e IP \u5730\u5740\u67e5\u8be2\u76f8\u5e94\u7684\u4ee5\u592a\u7f51 MAC \u5730\u5740 MAC \u5730\u5740\uff1a\u7b26\u5408 IEEE \u89c4\u683c\u7684\u5c40\u57df\u7f51\u8bbe\u5907\u90fd\u4f7f\u7528\u540c\u4e00\u89c4\u683c\u7684\u5730\u5740\uff0c\u53eb\u505a MAC \u5730\u5740 \u5957\u63a5\u5b57\u5e76\u4e0d\u5b58\u5728\u5b9e\u4f53\uff0c\u6216\u8005\u8bf4\u5957\u63a5\u5b57\u5c31\u662f\u534f\u8bae\u6808\u4e2d\u5b58\u653e\u901a\u4fe1\u5bf9\u8c61\u7684 IP \u5730\u5740\uff0c\u7aef\u53e3\u53f7\uff0c\u901a\u4fe1\u64cd\u4f5c\uff0c\u8fdb\u884c\u72b6\u6001\u7684\u4e00\u5757\u5185\u5b58\u5730\u5740\uff0c\u8fd8\u8981\u8bb0\u5f55\u662f\u5426\u5df2\u6536\u5230\u54cd\u5e94\uff0c\u4ee5\u53ca\u6570\u636e\u53d1\u9001\u540e\u7ecf\u8fc7\u4e86\u591a\u957f\u65f6\u95f4 \u534f\u8bae\u6808\u662f\u6839\u636e\u5957\u63a5\u5b57\u4e2d\u8bb0\u5f55\u7684\u63a7\u5236\u4fe1\u606f\u6765\u5de5\u4f5c\u7684 \u5728 cmd \u4e2d\u8f93\u5165 netstat \u53ef\u4ee5\u73b0\u5b9e\u5957\u63a5\u5b57\u5185\u5bb9 \u8c03\u7528 Socket \u7ec4\u4ef6\u65f6\u534f\u8bae\u6808\u7684\u5de5\u4f5c\uff1a\u521b\u5efa\u5957\u63a5\u5b57\u65f6\u5148\u5206\u914d\u4e00\u5757\u7a7a\u95f4\u5e76\u586b\u5165\u521d\u59cb\u72b6\u6001\u7684\u63a7\u5236\u4fe1\u606f\uff0c\u7136\u540e\u5c06\u63cf\u8ff0\u7b26\u544a\u77e5\u5e94\u7528\u7a0b\u5e8f 2.2 \u8fde\u63a5\u670d\u52a1\u5668 \u00b6 \u521b\u5efa\u597d\u5957\u63a5\u5b57\u540e\u6d4f\u89c8\u5668\u4f1a\u8c03\u7528 connect \u4e0e\u670d\u52a1\u5668\u5957\u63a5\u5b57\u8fdb\u884c\u8fde\u63a5\uff1b\u4ee5\u592a\u7f51\u7684\u7f51\u7ebf\u662f\u4e00\u76f4\u8fde\u63a5\u7684\u72b6\u6001\uff0c\u8fd9\u91cc\u7684\u8fde\u63a5\u6307\u901a\u4fe1\u53cc\u65b9\u4ea4\u6362\u63a7\u5236\u4fe1\u606f \u63a7\u5236\u4fe1\u606f\u5927\u4f53\u4e0a\u5206\u4e3a 2 \u7c7b\uff1a \u7b2c\u4e00\u7c7b\u662f\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u76f8\u4e92\u8054\u7edc\u65f6\u4ea4\u6362\u7684\u63a7\u5236\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u4f1a\u653e\u5728\u7f51\u7edc\u5305\u7684\u5934\u90e8\uff0cTCP \u5934\u90e8\u683c\u5f0f\u8868\u89c1 P71 \u5b57\u6bb5\u540d\u79f0 \u957f\u5ea6 \u542b\u4e49 ... ... ... \u7b2c\u4e8c\u7c7b\u662f\u4fdd\u5b58\u5728\u5957\u63a5\u5b57\u4e2d\u7528\u6765\u63a7\u5236\u534f\u8bae\u6808\u64cd\u4f5c\u7684\u4fe1\u606f \u4e0d\u540c\u8bbe\u5907\u7684\u534f\u8bae\u6808\u7684\u63a7\u5236\u4fe1\u606f\u4e0d\u540c\uff0c\u4f46\u8fd9\u4e0d\u5f71\u54cd\u901a\u4fe1\uff0c\u56e0\u4e3a\u53ea\u9700\u8981\u6839\u636e\u76f8\u540c\u7684\u89c4\u5219\u5c06\u5fc5\u8981\u7684\u4fe1\u606f\u586b\u5165\u5934\u90e8\u5373\u53ef \u8fde\u63a5\u64cd\u4f5c\u7684\u5177\u4f53\u8fc7\u7a0b\uff1a\u5e94\u7528\u7a0b\u5e8f\u8c03\u7528 Socket \u5e93\u7684 connect\uff0c\u6b64\u51fd\u6570\u7684\u53c2\u6570\u63d0\u4f9b\u4e86 IP \u5730\u5740\u548c\u7aef\u53e3\u53f7\u5e76\u4f20\u9001\u7ed9 TCP \u6a21\u5757\uff0c\u7136\u540e TCP \u6a21\u5757\u4f1a\u4e0e\u5bf9\u5e94\u670d\u52a1\u5668\u4ea4\u6362\u63a7\u5236\u4fe1\u606f \u8fd9\u4e2a\u4ea4\u4e92\u8fc7\u7a0b\u5305\u62ec\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u5ba2\u6237\u7aef\u5148\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u8868\u793a\u5f00\u59cb\u6570\u636e\u6536\u53d1\u64cd\u4f5c\u7684\u63a7\u5236\u4fe1\u606f\u7684\u5934\u90e8\uff08\u91cd\u70b9\u662f\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u7684\u7aef\u53e3\u53f7\uff09\uff0c\u8fd9\u6837\u5ba2\u6237\u7aef\u7684\u5957\u63a5\u5b57\u5c31\u627e\u5230\u4e86\u670d\u52a1\u5668\u7684\u5957\u63a5\u5b57\uff1b\u7136\u540e\u5c06\u5934\u90e8\u4e2d\u7684\u63a7\u5236\u4f4d\u7684 SYN \u6bd4\u7279\u8bbe\u7f6e\u4e3a 1\uff0c\u8868\u793a\u8fde\u63a5\uff08\u540e\u9762\u4f1a\u8bb2\uff09\uff0c\u5e76\u8bbe\u7f6e\u9002\u5f53\u7684\u5e8f\u53f7\u548c\u7a97\u53e3\u5927\u5c0f TCP\u5934\u90e8\u521b\u5efa\u597d\u540e TCP \u6a21\u5757\u5c06\u4fe1\u606f\u4f20\u9012\u7ed9 IP \u6a21\u5757\u5e76\u59d4\u6258\u5176\u53d1\u9001\uff1b\u7136\u540e\u670d\u52a1\u5668\u7684 IP \u6a21\u5757\u6536\u5230\u540e\u4f1a\u5c06\u6570\u636e\u4f20\u9012\u7ed9 TCP \u6a21\u5757\uff0cTCP \u6a21\u5757\u6839\u636e\u5934\u90e8\u4fe1\u606f\u627e\u5230\u7aef\u53e3\u53f7\u5bf9\u5e94\u7684\u5957\u63a5\u5b57\uff0c\u4e5f\u5c31\u662f\u4ece\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\u7684\u5957\u63a5\u5b57\u4e2d\u627e\u5230\u4e0e TCP \u5934\u90e8\u7684\u4e2d\u8bb0\u5f55\u7684\u7aef\u53e3\u53f7\u76f8\u540c\u7684\u5957\u63a5\u5b57\uff1b\u7136\u540e\u5728\u5957\u63a5\u5b57\u4e2d\u5199\u5165\u76f8\u5e94\u7684\u4fe1\u606f\u5e76\u5c06\u72b6\u6001\u6539\u4e3a\u6b63\u5728\u8fde\u63a5\uff1b\u7136\u540e\u8fd4\u56de\u54cd\u5e94\uff0c\u4e0e\u5ba2\u6237\u7aef\u53d1\u9001\u65f6\u4e00\u81f4\uff08\u5982\u679c\u4e0d\u63a5\u53d7\u8fde\u63a5 SYN \u8bbe\u4e3a 0\uff09\uff0c\u53ea\u662f TCP \u5934\u90e8\u4e2d\u8fd8\u9700\u8981\u5c06 ACK \u63a7\u5236\u4f4d\u8bbe\u4e3a 1\uff0c\u8868\u793a\u63a5\u6536\u5230\u4e86\u7f51\u7edc\u5305\uff1b\u7136\u540e TCP \u6a21\u5757\u59d4\u6258 IP \u6a21\u5757\u5411\u5ba2\u6237\u7aef\u8fd4\u56de\u54cd\u5e94 \u7f51\u7edc\u5305\u8fd4\u56de\u5ba2\u6237\u7aef\u540e\uff0c\u901a\u8fc7 IP \u6a21\u5757\u5230\u8fbe TCP \u6a21\u5757\uff0c\u5982\u679c SYN \u662f 1 \u8868\u793a\u8fde\u63a5\u6210\u529f\uff0c\u8fd9\u65f6\u4f1a\u5411\u5957\u63a5\u5b57\u4e2d\u5199\u5165\u670d\u52a1\u5668\u7684 IP \u5730\u5740\uff0c\u7aef\u53e3\u53f7\u7b49\u4fe1\u606f\uff0c\u5e76\u5c06\u72b6\u6001\u6539\u4e3a\u8fde\u63a5\u6210\u529f\uff1b\u6700\u540e\u8fd4\u56de\u4e00\u4e2a ACK \u4e3a 1 \u7684\u7f51\u7edc\u5305 \u4ee5\u4e0a\u534f\u8bae\u6808\u7684\u8fde\u63a5\u64cd\u4f5c\u5c31\u5b8c\u6210\u4e86\uff0c\u63a7\u5236\u6d41\u7a0b\u8fd4\u56de\u5230\u5e94\u7528\u7a0b\u5e8f 2.3 \u6536\u53d1\u6570\u636e \u00b6 \u5c06 HTTP \u8bf7\u6c42\u4ea4\u7ed9\u534f\u8bae\u6808 \uff1a \u6536\u53d1\u6570\u636e\u4ece\u5e94\u7528\u7a0b\u5e8f\u8c03\u7528 write \u5f00\u59cb MTU\uff1aMaximum Transmission Unit\uff0c\u6700\u5927\u4f20\u8f93\u5355\u5143 MSS\uff1aMaximum Segment Size\uff0c\u6700\u5927\u5206\u6bb5\u5927\u5c0f\uff0cMTU \u51cf\u53bb TCP \u5934\u90e8\u548c IP \u5934\u90e8 SFD\uff1aStart Frame Delimiter\uff0c\u8d77\u59cb\u5e27\u5206\u754c\u7b26\uff0c\u7f51\u7edc\u5305\u5934\u90e8 FCS\uff1aFrame Check Sequence\uff0c\u5e27\u6821\u9a8c\u5e8f\u5217\uff0c\u7f51\u7edc\u5305\u7ed3\u5c3e \u534f\u8bae\u6808\u5e76\u4e0d\u662f\u6536\u53d1\u6570\u636e\u5c31\u4f1a\u76f4\u63a5\u53d1\u9001\uff0c\u800c\u662f\u4f1a\u653e\u5165\u5185\u90e8\u7684\u53d1\u9001\u7f13\u51b2\u533a\uff0c\u4e3a\u4e86\u907f\u514d\u53d1\u9001\u7684\u5927\u91cf\u7684\u5c0f\u5305\uff1b\u79ef\u7d2f\u591a\u5c11\u6570\u636e\u624d\u53d1\u9001\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u540c\uff0c\u4f1a\u6839\u636e\u4ee5\u4e0b\u8981\u7d20\u5224\u65ad\uff1a \u6bcf\u4e2a\u7f51\u7edc\u5305\u80fd\u5305\u5bb9\u7684\u6570\u636e\u957f\u5ea6\uff0c\u5373 MTU \u548c MSS \u65f6\u95f4\uff0c\u7ecf\u8fc7\u4e00\u5b9a\u65f6\u95f4\u540e\u90fd\u4f1a\u628a\u7f51\u7edc\u5305\u53d1\u9001\u51fa\u53bb \u4ee5\u4e0a 2 \u8981\u7d20\u662f\u76f8\u4e92\u77db\u76fe\u7684\uff0c\u4ec5\u9760\u534f\u8bae\u6808\u6765\u5224\u65ad\u53d1\u9001\u65f6\u673a\u4f1a\u5e26\u6765\u4e00\u4e9b\u95ee\u9898\uff0c\u6240\u4ee5\u534f\u8bae\u6808\u7ed9\u4e86\u5e94\u7528\u7a0b\u5e8f\u63a7\u5236\u53d1\u9001\u65f6\u673a\u7684\u4f59\u5730\uff1b\u6d4f\u89c8\u5668\u8fd9\u79cd\u4f1a\u8bdd\u578b\u7684\u5e94\u7528\u7a0b\u5e8f\u5728\u5411\u670d\u52a1\u5668\u53d1\u9001\u6570\u636e\u65f6\uff0c\u7b49\u5f85\u7f13\u51b2\u533a\u6ee1\u4f1a\u4ea7\u751f\u5f88\u5927\u7684\u5f71\u54cd\uff0c\u6240\u4ee5\u4e00\u822c\u90fd\u662f\u76f4\u63a5\u53d1\u9001 \u5bf9\u8f83\u5927\u6570\u636e\u8fdb\u884c\u62c6\u5206 \uff1a \u5f53\u7f13\u51b2\u533a\u7684\u6570\u636e\u8d85\u8fc7 MSS \u65f6\uff0c\u7f13\u51b2\u533a\u7684\u6570\u636e\u4f1a\u4ee5 MSS \u4e3a\u5355\u4f4d\u5212\u5206\u5e76\u653e\u8fdb\u5355\u72ec\u7684\u7f51\u7edc\u5305 \u4f7f\u7528 ACK \u53f7\u786e\u8ba4\u7f51\u7edc\u5305\u5df2\u6536\u5230 \uff1a TCP \u6a21\u5757\u5728\u62c6\u5206\u6570\u636e\u65f6\u4f1a\u7b97\u597d\u6bcf\u4e00\u5757\u6570\u636e\u76f8\u5f53\u4e8e\u4ece\u5934\u5f00\u59cb\u7684\u7b2c\u51e0\u4e2a\u5b57\u8282\u5e76\u5199\u5165 TCP \u5934\u90e8\uff0c\u6570\u636e\u957f\u5ea6\u63a5\u6536\u65b9\u53ef\u4ee5\u81ea\u5df1\u8ba1\u7b97\uff0c\u8fd9\u6837\u63a5\u53d7\u65b9\u5c31\u53ef\u4ee5\u77e5\u9053\u7f51\u7edc\u5305\u6709\u6ca1\u6709\u6f0f\uff0c\u5728\u8fd4\u56de\u54cd\u5e94\u6d88\u606f\u65f6\u4f1a\u628a\u63a5\u6536\u5230\u591a\u5c11\u5b57\u8282\u5199\u5165 ACK \u53f7\u4e2d\uff08\u8fd4\u56de ACK \u53f7\u9700\u8981\u628a\u63a7\u5236\u4f4d\u4e2d ACK \u6bd4\u7279\u8bbe\u7f6e\u4e3a 1\uff0c\u8868\u793a\u6709\u6548\uff0c\u5e76\u586b\u5165 ACK \u7684\u503c\uff09\uff1b\u5b9e\u9645\u64cd\u4f5c\u65f6\u5305\u7684\u5f00\u59cb\u5e8f\u53f7\u5e76\u4e0d\u662f\u4ece 1 \u5f00\u59cb\uff0c\u662f\u7528\u968f\u673a\u6570\u4f5c\u4e3a\u521d\u503c\u9632\u6b62\u88ab\u653b\u51fb\uff1b\u8fd9\u4e2a\u968f\u673a\u6570\u4f1a\u5728 SYN \uff08Synchronize\uff0c\u540c\u6b65\uff09\u63a7\u5236\u4f4d\u8bbe\u4e3a 1 \u7684\u65f6\u5019\u586b\u5165\u521d\u59cb\u5e8f\u53f7 \u901a\u4fe1\u65f6\u53cc\u65b9\u90fd\u4f1a\u53d1\u9001\u7f51\u7edc\u5305\uff0c\u6240\u4ee5\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u90fd\u4f1a\u6709\u5404\u81ea\u7684\u5e8f\u53f7\u521d\u59cb\u503c \u8fd9\u4e2a\u673a\u5236\u975e\u5e38\u5f3a\u5927\uff0c\u6240\u4ee5\u7f51\u5361\uff0c\u96c6\u7ebf\u5668\uff0c\u8def\u7531\u5668\u6ca1\u6709\u9519\u8bef\u8865\u507f\u673a\u5236\uff0c\u4e00\u65e6\u68c0\u67e5\u5230\u9519\u8bef\u5c31\u76f4\u63a5\u4e22\u5f03\u76f8\u5e94\u7684\u5305 \u6839\u636e\u7f51\u7edc\u5305\u5e73\u5747\u5f80\u8fd4\u65f6\u95f4\u8c03\u6574 ACK \u53f7\u7684\u7b49\u5f85\u65f6\u95f4 \uff1a \u5b9e\u9645\u4e0a\u7f51\u7edc\u7684\u9519\u8bef\u68c0\u6d4b\u548c\u8865\u507f\u673a\u5236\u5341\u5206\u590d\u6742\uff0c\u5bf9\u4e8e ACK \u53f7\u7684\u8fd4\u56de\u7b49\u5f85\u65f6\u95f4\uff08\u8d85\u65f6\u65f6\u95f4\uff09\u4f1a\u6839\u636e\u5b9e\u9645\u8fd4\u56de\u7684\u65f6\u95f4\u52a8\u6001\u8c03\u6574 \u4f7f\u7528\u7a97\u53e3\u6709\u6548\u7ba1\u7406 ACK \u53f7 \uff1a \u53d1\u9001\u4e00\u4e2a\u5305\u540e\u7b49\u5f85 ACK \u53f7\u7684\u8fd4\u56de\u4f1a\u6d6a\u8d39\u65f6\u95f4\uff0c\u6240\u4ee5 TCP \u91c7\u7528\u6ed1\u52a8\u7a97\u53e3\u7684\u65b9\u5f0f\u6765\u7ba1\u7406\u6570\u636e\u53d1\u9001\u548c ACK \u53f7\u7684\u64cd\u4f5c\uff0c\u5373\u4e0d\u7b49\u5f85 ACK \u53f7\u7684\u8fd4\u56de\uff0c\u76f4\u63a5\u53d1\u9001\u540e\u7eed\u4e00\u7cfb\u5217\u7684\u5305 \u4e3a\u4e86\u9632\u6b62\u53d1\u9001\u7684\u6570\u636e\u8fc7\u591a\uff0c\u63a5\u6536\u65b9\u7684\u8f93\u5165\u7f13\u51b2\u533a\u88c5\u4e0d\u4e0b\uff0c\u63a5\u6536\u65b9\u4f1a\u544a\u77e5\u5bf9\u65b9\u81ea\u5df1\u6700\u591a\u80fd\u63a5\u6536\u591a\u5c11\u6570\u636e\uff1b\u901a\u8fc7 TCP \u5934\u90e8\u4e2d\u7684\u7a97\u53e3\u5b57\u6bb5\u544a\u77e5\u5bf9\u65b9\uff0c\u548c ACK \u53f7 \u548c\u5e8f\u53f7\u4e00\u6837\uff0c\u6570\u53cc\u5411\u8fdb\u884c\u7684 ACK \u4e0e \u7a97\u53e3 \u7684\u5408\u5e76 \uff1a \u66f4\u65b0\u7a97\u53e3\u5927\u5c0f\u7684\u65f6\u673a\u662f\u5728\u5e94\u7528\u7a0b\u5e8f\u4ece\u63a5\u6536\u7f13\u51b2\u533a\u53d6\u51fa\u6570\u636e\u5bfc\u81f4\u63a5\u6536\u7f13\u51b2\u533a\u7684\u5bb9\u91cf\u589e\u5927\uff1bACK \u53f7\u662f\u5728\u5b8c\u6210\u63a5\u6536\u64cd\u4f5c\u65f6\u5c31\u9700\u8981\u8fd4\u56de\uff1b\u90fd\u53d1\u9001\u5355\u72ec\u7684\u5305\u4f1a\u8ba9\u7f51\u7edc\u6548\u7387\u4e0b\u964d\uff0c\u6240\u4ee5\u5728\u63a5\u6536\u65b9\u53d1\u9001 ACK \u53f7\u548c\u7a97\u53e3\u66f4\u65b0\u65f6\uff0c\u4f1a\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\uff1b\u5982\u679c\u8981\u8fde\u7eed\u53d1\u9001 ACK \u53f7\u6216\u8005\u8fde\u7eed\u66f4\u65b0\u7a97\u53e3\u65f6\uff0c\u53ea\u9700\u8981\u53d1\u9001\u6700\u540e\u7684\u4e00\u6b21 \u63a5\u6536 HTTP \u54cd\u5e94\u6d88\u606f \uff1a \u6d4f\u89c8\u5668\u5728\u59d4\u6258\u534f\u8bae\u6808\u53d1\u9001\u8bf7\u6c42\u6d88\u606f\u540e\uff0c\u4f1a\u8c03\u7528 read \u7a0b\u5e8f\u6765\u83b7\u53d6\u54cd\u5e94\u6d88\u606f\u3002\u63a7\u5236\u6d41\u7a0b\u4f1a\u8f6c\u79fb\u5230\u534f\u8bae\u6808\uff0c\u5982\u679c\u54cd\u5e94\u6d88\u606f\u8fd8\u6ca1\u6709\u8fd4\u56de\uff0c\u534f\u8bae\u6808\u4f1a\u5c06\u5e94\u7528\u7a0b\u5e8f\u7684\u59d4\u6258\u6302\u673a \u534f\u8bae\u6808\u63a5\u6536\u6570\u636e\u65f6\u4f1a\u68c0\u67e5\u6536\u5230\u7684\u6570\u636e\u5757\u548c TCP \u5934\u90e8\u7684\u5185\u5bb9\uff0c\u5224\u65ad\u662f\u5426\u6709\u6570\u636e\u4e22\u5931\uff0c\u6ca1\u6709\u95ee\u9898\u5c31\u8fd4\u56de ACK \u53f7\uff0c\u5e76\u5c06\u6570\u636e\u5757\u6309\u7167\u987a\u5e8f\u8fde\u63a5\u8d77\u6765\u8fd8\u539f\u539f\u59cb\u7684\u6570\u636e\uff0c\u7136\u540e\u4ea4\u7ed9\u5e94\u7528\u7a0b\u5e8f\uff08\u5c06\u63a5\u6536\u7684\u6570\u636e\u590d\u5236\u5230\u5e94\u7528\u7a0b\u5e8f\u6307\u5b9a\u7684\u5185\u5b58\u5730\u5740\uff09\uff1b\u7136\u540e\u8fd8\u9700\u8981\u627e\u5230\u5408\u9002\u7684\u65f6\u673a\u8fd4\u56de\u7a97\u53e3\u66f4\u65b0 2.4 \u4ece\u670d\u52a1\u5668\u65ad\u5f00\u5f00\u5173\u5e76\u5220\u9664\u5957\u63a5\u5b57 \u00b6 HTTP1.0 \u4e2d Web \u670d\u52a1\u5668\u8fd4\u56de\u54cd\u5e94\u6d88\u606f\u540e\u4f1a\u53d1\u8d77\u65ad\u5f00\u8fc7\u7a0b\uff08HTTP1.1\u4e2d\u5ba2\u6237\u7aef\u53ef\u4ee5\u7ee7\u7eed\u53d1\u8d77\u4e0b\u4e00\u4e2a\u8bf7\u6c42\uff0c\u4e00\u4e9b\u7279\u6b8a\u8bf7\u6b3e\u5ba2\u6237\u7aef\u53d1\u9001\u5b8c\u6570\u636e\u5c31\u7ed3\u675f\u4e86\uff0c\u90a3\u5ba2\u6237\u7aef\u4f1a\u5148\u53d1\u8d77\u65ad\u5f00\u8fc7\u7a0b\uff09\uff0c\u534f\u8bae\u6808\u5728\u8bbe\u8ba1\u4e0a\u5141\u8bb8\u4efb\u4f55\u4e00\u65b9\u53d1\u8d77\u65ad\u5f00\u8fc7\u7a0b \u4ee5\u670d\u52a1\u5668\u4e00\u65b9\u53d1\u8d77\u65ad\u5f00\u8fc7\u7a0b\u4e3a\u4f8b\uff0c\u670d\u52a1\u5668\u4e00\u65b9\u7684\u5e94\u7528\u7a0b\u5e8f\u4f1a\u8c03\u7528 Socket \u5e93\u7684 close \u7a0b\u5e8f\uff1b\u7136\u540e\u670d\u52a1\u5668\u7684\u534f\u8bae\u6808\u4f1a\u751f\u6210\u63a7\u5236\u4f4d\u4e2d FIN \u6bd4\u7279\u8bbe\u4e3a 1 \u7684 TCP \u5934\u90e8\uff0c\u8868\u793a\u65ad\u5f00\uff0c\u7136\u540e\u59d4\u6258 IP \u6a21\u5757\u53d1\u9001\uff0c\u540c\u65f6\u670d\u52a1\u5668\u7684\u5957\u63a5\u5b57\u4f1a\u8bb0\u5f55\u65ad\u5f00\u64cd\u4f5c\uff1b\u5ba2\u6237\u7aef\u6536\u5230\u540e\u4f1a\u5c06\u81ea\u5df1\u7684\u5957\u63a5\u5b57\u8fdb\u5165\u65ad\u5f00\u72b6\u6001\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a ACK \u53f7\uff0c\u5e76\u7b49\u5f85\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u53d6\u6570\u636e\uff1b\u5e94\u7528\u7a0b\u5e8f\u8c03\u7528 read \u540e\u534f\u8bae\u6808\u4e0d\u4f1a\u5411\u5e94\u7528\u7a0b\u5e8f\u4f20\u9012\u6570\u636e\uff0c\u800c\u662f\u544a\u77e5\u5b83\u6570\u636e\u5168\u90e8\u6536\u5230\u4e86\uff1b\u8fd9\u65f6\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u4f1a\u8c03\u7528 close \u6765\u7ed3\u675f\u6536\u53d1\u64cd\u4f5c\uff0c\u5ba2\u6237\u7aef\u534f\u8bae\u6808\u4e5f\u4f1a\u53d1\u9001\u4e00\u4e2a FIN \u4e3a 1 \u7684 TCP \u5305\uff0c\u5f85\u670d\u52a1\u5668\u8fd4\u56de ACK \u53f7\u540e\u901a\u4fe1\u5c31\u7ed3\u675f\u4e86 \u901a\u4fe1\u7ed3\u675f\u540e\u4f1a\u5220\u9664\u5957\u63a5\u5b57\uff0c\u4e0d\u8fc7\u4e0d\u662f\u9a6c\u4e0a\u5220\u9664\uff0c\u4f1a\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\u9632\u6b62\u8bef\u64cd\u4f5c 2.5 IP\u4e0e\u4ee5\u592a\u7f51\u7684\u5305\u6536\u53d1\u64cd\u4f5c \u00b6 \u5305\u7684\u57fa\u672c\u77e5\u8bc6 \uff1a \u4e00\u4e2a\u8bbe\u5907\u65e2\u53ef\u4ee5\u4f5c\u4e3a\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\uff0c\u6240\u4ee5\u7edf\u79f0\u4e3a\u7ec8\u7aef\u8282\u70b9\uff0c\u8f6c\u53d1\u8bbe\u5907\u88ab\u79f0\u4e3a\u8f6c\u53d1\u8282\u70b9\u6216\u8005\u4e2d\u95f4\u8282\u70b9 \u96c6\u7ebf\u5668\u662f\u6309\u7167\u4ee5\u592a\u7f51\u89c4\u5219\u4f20\u8f93\u5305\u7684\u8bbe\u5907\uff0c\u800c\u8def\u7531\u5668\u662f\u6309\u7167 IP \u89c4\u5219\u4f20\u8f93\u5305\u7684\u8bbe\u5907 TCP/IP \u5934\u90e8\u5305\u542b MAC \u5934\u90e8\u548c IP \u5934\u90e8\uff1b\u5728\u5305\u4f20\u8f93\u7684\u8fc7\u7a0b\u4e2d\uff0c\u7ecf\u8fc7\u96c6\u7ebf\u5668\u65f6\uff0c\u96c6\u7ebf\u5668\u5185\u6709\u4e00\u5f20\u7528\u4e8e\u4ee5\u592a\u7f51\u534f\u8bae\u7684\u8868\uff0c\u4f1a\u6839\u636e MAC \u5934\u90e8\u786e\u5b9a\u4f20\u8f93\u65b9\u5411\uff1b\u7ecf\u8fc7\u8def\u7531\u5668\u65f6\uff0c\u8def\u7531\u5668\u5185\u6709\u4e00\u5f20 IP \u534f\u8bae\u7684\u8868\uff0c\u4f1a\u6839\u636e IP \u5934\u90e8\u786e\u5b9a\u4e0b\u4e00\u4e2a\u8def\u7531\u5668\u7684\u5730\u5740\u5e76\u5c06\u5176 MAC \u5730\u5740\u5199\u5165 MAC \u5934\u90e8\uff08\u96c6\u7ebf\u5668\u53ea\u662f\u8f6c\u53d1\u8bbe\u5907\uff0c\u65e0 MAC \u5730\u5740\uff0c\u800c\u8def\u7531\u5668\u6709 MAC \u5730\u5740\uff0c\u53ef\u4ee5\u4f5c\u4e3a MAC \u5730\u5740\u7684\u63a5\u6536\u65b9\uff09 \u4ee5\u592a\u7f51\u4e5f\u53ef\u4ee5\u53d8\u6210\u5176\u4ed6\uff0c\u6bd4\u5982\u65e0\u7ebf\u5c40\u57df\u7f51\uff0cADSL\uff0cFTTH\u7b49\u90fd\u53ef\u4ee5\u4ee3\u66ff\u4ee5\u592a\u7f51\u534f\u52a9 IP \u534f\u8bae\u4f20\u8f93\u7f51\u7edc\u5305 \u5305\u624b\u6cd5\u64cd\u4f5c\u6982\u89c8 \uff1a TCP \u6a21\u5757\u5728\u6536\u5230\u6570\u636e\u52a0\u4e0a TCP \u5934\u90e8\u4f20\u7ed9 IP \u6a21\u5757\uff0cIP \u6a21\u5757\u518d\u52a0\u4e0a IP \u5934\u90e8\u548c MAC \u5934\u90e8\uff1bIP \u5934\u90e8\u662f\u5c06\u5305\u53d1\u5f80\u76ee\u7684\u5730\u6240\u9700\u7684\u63a7\u5236\u4fe1\u606f\uff0cMAC \u5934\u90e8\u662f\u5c06\u5305\u901a\u8fc7\u4ee5\u592a\u7f51\u4f20\u7ed9\u6700\u8fd1\u7684\u8def\u7531\u5668\u9700\u8981\u7684\u63a7\u5236\u4fe1\u606f IP \u6a21\u5757\u7684\u804c\u8d23\u5c31\u662f\u5c06\u59d4\u6258\u7684\u4e1c\u897f\u6253\u5305\u9001\u5230\u5bf9\u65b9\u624b\u4e2d\uff0c\u6216\u8005\u5c06\u5bf9\u65b9\u9001\u6765\u7684\u5305\u63a5\u6536 \u65e0\u8bba\u8981\u6536\u53d1\u7684\u5305\u662f\u63a7\u5236\u5305\u8fd8\u662f\u6570\u636e\u5305\uff0cIP \u5bf9\u5404\u79cd\u7c7b\u578b\u7684\u5305\u7684\u6536\u53d1\u64cd\u4f5c\u90fd\u662f\u76f8\u540c\u7684 \u751f\u6210\u5305\u542b\u63a5\u6536\u65b9 IP \u5730\u5740\u7684 IP \u5934\u90e8 \uff1a IP \u6a21\u5757\u6536\u5230 TCP \u6a21\u5757\u7684\u59d4\u6258\u8fdb\u884c\u6536\u53d1\u5de5\u4f5c\uff0c\u5b83\u4f1a\u751f\u6210 IP \u5934\u90e8\u9644\u52a0\u5728 TCP \u5934\u90e8\u524d\uff0c\u5176\u4e2d\u6700\u91cd\u8981\u7684\u662f IP \u5730\u5740\uff0c\u8fd9\u662f TCP \u6a21\u5757\u544a\u8bc9\u7684 IP\u5934\u90e8\u683c\u5f0f\uff1aP103 \u5b57\u6bb5\u540d\u79f0 \u957f\u5ea6 bit \u542b\u4e49 \u53d1\u9001\u65b9IP 32 \u63a5\u6536\u65b9IP 32 ... ... ... \u8ba1\u7b97\u673a\u6709\u591a\u5f20\u7f51\u5361\u65f6\u9700\u8981\u5224\u65ad\u7528\u54ea\u4e00\u4e2a IP \u5730\u5740\u53d1\u9001\u5305\uff0c\u64cd\u4f5c\u548c\u8def\u7531\u5668\u4f7f\u7528 IP \u8868\u5224\u65ad\u4e0b\u4e00\u8def\u7531\u5668\u4f4d\u7f6e\u7c7b\u4f3c\uff0c\u6b64 IP \u8868\u53eb\u505a\u8def\u7531\u8868\uff0ccmd \u4e2d\u8f93\u5165 \"route print\"\uff0c\u5373\u53ef\u67e5\u770b\uff0c\u7b2c\u4e09\u7ae0\u4f1a\u5177\u4f53\u8bf4\u660e\uff0c\u5176\u4e2d Gateway\uff08\u4e0b\u4e00\u4e2a\u8def\u7531\u5668\u7684 IP \u5730\u5740\uff09 \u8868\u793a\u7f51\u5173\uff0c\u5c31\u662f\u8def\u7531\u5668\u7684\u610f\u601d\uff0c\u5982\u679c Gateway \u548c Interface\uff08\u53d1\u9001\u5305\u7684\u7f51\u7edc\u63a5\u53e3\uff09\u5730\u5740\u76f8\u540c\uff0c\u8868\u793a\u65e0\u9700\u8f6c\u53d1\u53ef\u4ee5\u76f4\u63a5\u5230\u8fbe\u63a5\u6536\u65b9\u7684 IP \u5730\u5740 \u751f\u6210\u4ee5\u592a\u7f51\u7528\u7684 MAC \u5934\u90e8 \uff1a MAC \u5934\u90e8\u5730\u5740\u7531 IP \u6a21\u5757\u751f\u6210\u653e\u5728 IP \u5934\u90e8\u524d\uff0c\u7528\u4ee5\u5728\u4ee5\u592a\u7f51\u4e2d\u4f20\u8f93 IP \u5934\u90e8\u6709\u5c42\u6b21\u5316\u7ed3\u6784\uff08\u5b50\u7f51\u63a9\u7801\uff09\uff0cMAC \u5934\u90e8\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a\u6574\u4f53\uff1b\u7f51\u5361\u7684 MAC \u5730\u5740\u662f\u5728\u751f\u4ea7\u65f6\u5c31\u5199\u5165 ROM \u4e2d\u7684 \u5b57\u6bb5\u540d\u79f0 \u957f\u5ea6 \u542b\u4e49 \u63a5\u6536\u65b9MAC\u5730\u5740 48 \u53d1\u9001\u65b9MAC\u5730\u5740 48 \u4ee5\u592a\u7c7b\u578b 16 \u53d1\u9001\u65b9 MAC \u5730\u5740\uff1a\u5982\u679c\u6709\u591a\u5f20\u7f51\u5361\uff0c\u56e0\u4e3a\u5728\u8bbe\u7f6e\u53d1\u9001\u65b9 IP \u5730\u5740\u65f6\u5df2\u7ecf\u6307\u5b9a\u4e86\u7f51\u5361\uff0c\u6240\u4ee5\u4e0d\u4f1a\u6709\u95ee\u9898 \u63a5\u6536\u65b9 MAC \u5730\u5740\uff1a\u8def\u7531\u8868\u4e2d\uff08route print\uff09\u53ea\u6709\u7f51\u5173\uff08Gateway\uff09\u7684 IP \u5730\u5740\uff0c\u6240\u4ee5\u73b0\u5728\u9700\u8981\u6839\u636e IP \u5730\u5740\u67e5\u8be2 MAC \u5730\u5740 \u901a\u8fc7 ARP \u67e5\u8be2\u76ee\u6807\u8def\u7531\u5668\u7684 MAC \u5730\u5740 \uff1a ARP\uff1aAddress Resolution Protocol\uff0c\u5730\u5740\u89e3\u6790\u534f\u8bae\uff0c\u6839\u636e IP \u5730\u5740\u67e5\u8be2 MAC \u5730\u5740 \u5728\u4ee5\u592a\u7f51\u4e2d\u901a\u8fc7\u5e7f\u64ad\u7684\u65b9\u5f0f\u8be2\u95ee\u5bf9\u5e94 IP \u5730\u5740\u7684\u8bbe\u5907\u7684 MAC \u5730\u5740\uff1b\u4e3a\u4e86\u9632\u6b62\u7f51\u7edc\u4e2d\u51fa\u73b0\u8fc7\u591a\u7684 ARP \u5305\uff0c\u4f1a\u5c06\u67e5\u8be2\u7ed3\u679c\u653e\u5728 ARP \u7f13\u5b58\u4e2d\uff0c\u5982\u679c ARP \u7f13\u5b58\u4e2d\u4e0d\u5b58\u5728\u5bf9\u65b9\u7684 MAC \u5730\u5740\u518d\u8fdb\u884c\u5e7f\u64ad\u67e5\u8be2 \u663e\u793a ARP \u7f13\u5b58\u7684\u547d\u4ee4\uff1aarp -a \u4e3a\u4e86\u9632\u6b62 IP \u5730\u5740\u53d8\u5316\u800c\u5bfc\u81f4\u7684\u9519\u8bef\uff0cARP \u7f13\u5b58\u4e2d\u7684\u5185\u5bb9\u4e00\u822c\u4f1a\u5728\u51e0\u5206\u949f\u5de6\u53f3\u5168\u90e8\u5220\u6389\uff1b\u5982\u679c IP \u5730\u5740\u521a\u53d1\u751f\u53d8\u5316\u800c\u5bfc\u81f4\u9519\u8bef\u7684\u8bdd\uff0c\u53ef\u4ee5\u67e5\u770b ARP \u7f13\u5b58\u7684\u5185\u5bb9\u5e76\u624b\u52a8\u5220\u9664 \u4ee5\u592a\u7f51\u7684\u57fa\u672c\u77e5\u8bc6 \uff1a \u4ee5\u592a\u7f51\u5728\u53d1\u9001\u6d88\u606f\u65f6\u4f1a\u8fdb\u884c\u5e7f\u64ad\uff0c\u7f51\u7edc\u4e2d\u7684\u5176\u4ed6\u6240\u6709\u8bbe\u5907\u90fd\u4f1a\u6536\u5230\u8fd9\u4e2a\u5305\uff0c\u518d\u4e0e\u8fd9\u4e2a\u6d88\u606f\u7684\u5934\u90e8\u7684 MAC \u5730\u5740\u5339\u914d\uff0c\u5339\u914d\u6b63\u786e\u7684\u4fdd\u5b58\u4e0b\u6765\uff0c\u4e0d\u6b63\u786e\u7684\u76f4\u63a5\u4e22\u5f03 \u4e2d\u7ee7\u5f0f\u96c6\u7ebf\u5668\uff1a\u7b80\u79f0\u96c6\u7ebf\u5668\uff0c\u4f1a\u5bf9\u6d88\u606f\u653e\u5927\u5e76\u5728\u7f51\u7edc\u4e2d\u8fdb\u884c\u5e7f\u64ad \u4ea4\u6362\u5f0f\u96c6\u7ebf\u5668\uff1a\u7b80\u79f0\u4ea4\u6362\u673a\uff0c\u4f1a\u6839\u636e MAC \u5730\u5740\u53d1\u9001\u7ed9\u6307\u5b9a\u8bbe\u5907 \u5c06 IP \u5305\u8f6c\u6362\u6210\u7535\u6216\u5149\u4fe1\u53f7\u53d1\u9001\u51fa\u53bb \uff1a \u6570\u5b57\u4fe1\u53f7\u8f6c\u6362\u6210\u7535\u6216\u5149\u4fe1\u53f7\u53d1\u9001\u51fa\u53bb\u7531\u7f51\u5361\u6765\u5b8c\u6210\uff0c\u7f51\u5361\u7684\u5de5\u4f5c\u9700\u8981\u9a71\u52a8\u7a0b\u5e8f\uff0c\u4e3b\u8981\u5382\u5546\u7684\u7f51\u5361\u9a71\u52a8\u7a0b\u5e8f\u4f1a\u5185\u7f6e\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff1b\u7f51\u5361\u521d\u59cb\u5316\u9664\u4e86\u9519\u8bef\u68c0\u9a8c\uff0c\u521d\u59cb\u8bbe\u7f6e\u7b49\u5916\uff0c\u8fd8\u9700\u8981\u5728\u63a7\u5236\u4ee5\u592a\u7f51\u6536\u53d1\u64cd\u4f5c\u7684 MAC \u6a21\u5757\u4e2d\u8bbe\u7f6e MAC \u5730\u5740\uff0c\u5373\u8bfb\u51fa ROM \u4e2d\u81ea\u5df1\u7684 MAC \u5730\u5740\uff08\u5168\u4e16\u754c\u552f\u4e00\uff09 \u7f51\u5361\u4e2d\u4fdd\u5b58\u7684 MAC \u5730\u5740\u4f1a\u7531\u7f51\u5361\u9a71\u52a8\u7a0b\u5e8f\u8bfb\u53d6\u5e76\u5206\u914d\u7ed9 MAC \u6a21\u5757 MAC\uff1aMedia Access Control \u7f51\u5361\u9a71\u52a8\u4ece IP \u6a21\u5757\u83b7\u53d6\u5305\u540e\u4f1a\u590d\u5236\u5230\u7f51\u5361\u5185\u7684\u7f13\u51b2\u533a\u4e2d\uff0c\u7136\u540e\u5411 MAC \u6a21\u5757\u53d1\u9001\u53d1\u9001\u5305\u547d\u4ee4\uff1bMAC \u6a21\u5757\u5c06\u5305\u4ece\u7f13\u51b2\u533a\u4e2d\u53d6\u51fa\u5e76\u5728\u5f00\u5934\u52a0\u4e0a\u62a5\u5934\uff0856 bit\uff09\u548c\u8d77\u59cb\u5e27\u5206\u754c\u7b26\uff08SFD\uff0c8 bit\uff09\uff0c\u5728\u672b\u5c3e\u52a0\u4e0a\u5e27\u6821\u9a8c\u5e8f\u5217\uff08FCS\uff0c32 bit\uff0c\u6bd4\u5982 CRC \u6821\u9a8c\uff09 \u62a5\u5934\u7684\u4f5c\u7528\u662f\u8ba9\u63a5\u6536\u65b9\u89c2\u5bdf\u65f6\u949f\u4fe1\u53f7\u53d8\u5316\u7684\u5468\u671f\uff0c\u53d1\u9001\u6570\u636e\u65f6\u4f1a\u5c06\u6570\u636e\u4e0e\u65f6\u949f\u4fe1\u53f7\u53e0\u52a0\u5728\u4e00\u8d77\u53d1\u9001\uff0c\u5229\u7528\u4e0a\u5347\u6cbf\u6216\u8005\u4e0b\u964d\u6cbf\u6765\u5224\u65ad 0/1 \u5411\u96c6\u7ebf\u5668\u53d1\u9001\u7f51\u7edc\u5305 \uff1a \u96c6\u7ebf\u5668\u534a\u53cc\u5de5\uff0c\u4ea4\u6362\u673a\u5168\u53cc\u5de5 MAU\uff1aMedium Attach Unit\uff0c\u4ecb\u8d28\u8fde\u63a5\u5355\u5143 PHY\uff1aPhysical Layer Device\uff0c\u7269\u7406\u5c42\u88c5\u7f6e \u7f51\u5361\u7684 MAC \u6a21\u5757\u751f\u6210\u901a\u7528\u4fe1\u53f7\uff0c\u7136\u540e\u7531 PHY\uff08MAU \u6839\u636e\u4ee5\u592a\u7f51\u4fe1\u53f7\u65b9\u5f0f\u7684\u4e0d\u540c\u800c\u53eb\u6cd5\u4e0d\u540c\uff09\u6a21\u5757\u8f6c\u6362\u6210\u53ef\u5728\u7f51\u7ebf\u4e2d\u4f20\u8f93\u7684\u683c\u5f0f\uff0c\u5e76\u901a\u8fc7\u7f51\u7ebf\u53d1\u9001\u51fa\u53bb \u6839\u636e\u4ee5\u592a\u7f51\u7684\u89c4\u683c\u4e24\u53f0\u8bbe\u5907\u4e0d\u80fd\u8d85\u8fc7100 m\uff1b\u5728\u534a\u53cc\u5de5\u7684\u6a21\u5f0f\u4e0b\u53ef\u80fd\u4f1a\u53d1\u751f\u78b0\u649e\uff0c\u5e76\u53d1\u9001\u963b\u585e\u4fe1\u53f7\uff0c\u65f6\u95f4\u662f\u7531 MAC \u5730\u5740\u751f\u6210\u7684\u4e00\u4e2a\u968f\u673a\u6570 \u63a5\u6536\u8fd4\u56de\u5305 \uff1a PHY\uff08MAU\uff09\u5c06\u4fe1\u53f7\u8f6c\u6362\u6210\u901a\u8fc7\u683c\u5f0f\u53d1\u9001\u7ed9 MAC \u6a21\u5757\uff0cMAC \u6a21\u5757\u518d\u5c06\u4fe1\u53f7\u8f6c\u6362\u4e3a\u6570\u5b57\u4fe1\u606f\u653e\u5230\u7f13\u51b2\u533a\uff0c\u68c0\u67e5 FCS\uff1b\u5982\u679c FCS \u6ca1\u6709\u95ee\u9898\u518d\u68c0\u67e5 MAC \u5730\u5740\u4e0e\u81ea\u5df1\u7684\u662f\u5426\u4e00\u81f4\uff0c\u4e0d\u662f\u5219\u76f4\u63a5\u4e22\u5f03\uff08\u6df7\u6742\u6a21\u5f0f\u4e0b\u4e0d\u4f1a\u68c0\u67e5 MAC \u5730\u5740\uff0c\u4f1a\u63a5\u53d7\u6240\u6709\u7684\u5305\uff09\uff1b\u63a5\u53d7\u5230\u5305\u540e\u5229\u7528\u4e2d\u65ad\u673a\u5236\u8c03\u7528\u7f51\u5361\u9a71\u52a8\u5904\u7406 \u5c06\u670d\u52a1\u5668\u7684\u54cd\u5e94\u5305\u4ece IP \u4f20\u9012\u7ed9 TCP \uff1a \u5982\u679c\u63a5\u6536\u65b9\u7684 IP \u5730\u5740\u4e0d\u662f\u81ea\u5df1\u7684\u5730\u5740\uff0c\u90a3\u4e00\u5b9a\u662f\u53d1\u9001\u4e86\u9519\u8bef\uff0c\u5ba2\u6237\u7aef\u8ba1\u7b97\u673a\u4e0d\u8d1f\u8d23\u8fdb\u884c\u8f6c\u53d1\uff08\u670d\u52a1\u5668\u4f1a\uff09\uff0cIP \u6a21\u5757\u4f1a\u901a\u8fc7 ICMP \u6d88\u606f\u5c06\u9519\u8bef\u901a\u77e5\u7ed9\u53d1\u9001\u65b9 \u4e3b\u8981\u7684 ICMP \u6d88\u606f\uff1a \u6d88\u606f \u7c7b\u578b \u542b\u4e49 ... ... ... \u5206\u7247\u7684\u5305\u4f1a\u5728 IP \u5934\u90e8\u5b57\u6bb5\u4e2d\u8fdb\u884c\u6807\u8bb0\uff0c\u6536\u5230\u5206\u7247\u7684\u5305\u540e IP \u6a21\u5757\u4f1a\u5c06\u5176\u6682\u5b58\u518d\u5185\u90e8\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u7b49\u5230 IP \u5934\u90e8\u4e2d\u5177\u6709\u540c\u6837 ID \u7684\u5305\u5168\u90e8\u5230\u8fbe\uff08\u5305\u7684\u6240\u6709\u5206\u7247\u5177\u6709\u76f8\u540c\u7684 ID\uff09\uff0c\u518d\u6839\u636e IP \u5934\u90e8\u4e2d\u5206\u7247\u504f\u79fb\u91cf\u8fd8\u539f\u6210\u539f\u59cb\u7684\u5305\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u53eb\u5206\u7247\u91cd\u7ec4\uff1b\u8fd9\u91cc IP \u6a21\u5757\u7684\u5de5\u4f5c\u5c31\u7ed3\u675f\u4e86\uff0c\u5305\u4f1a\u4ea4\u7ed9 TCP \u6a21\u5757 TCP \u6a21\u5757\u4f1a\u6839\u636e IP \u5934\u90e8\u4e2d\u63a5\u6536\u65b9\u548c\u53d1\u9001\u65b9\u7684 IP \u5730\u5740\u548c TCP \u5934\u90e8\u4e2d\u7684\u63a5\u6536\u65b9\u548c\u53d1\u9001\u65b9\u7684\u7aef\u53e3\u53f7\u6765\u67e5\u8be2\u5bf9\u5e94\u7684\u5957\u63a5\u5b57\uff0c\u7136\u540e\u6839\u636e\u5957\u63a5\u5b57\u4e2d\u7684\u901a\u4fe1\u72b6\u6001\u6267\u884c\u76f8\u5e94\u7684\u64cd\u4f5c 2.6 UDP\u534f\u8bae\u7684\u6536\u53d1\u64cd\u4f5c \u00b6 \u5411 DNS \u670d\u52a1\u5668\u67e5\u8be2 IP \u5730\u5740\u7684\u65f6\u5019\u6211\u4eec\u4f7f\u7528 UDP \u534f\u8bae TCP \u534f\u8bae\u4e3a\u4e86\u5b9e\u73b0\u53ef\u9760\u6027\u9700\u8981\u786e\u8ba4\u5bf9\u65b9\u662f\u5426\u6536\u5230\u4e86\u6211\u4eec\u53d1\u9001\u7684\u6570\u636e\uff0c\u6ca1\u6709\u8fd8\u9700\u8981\u53d1\u9001\u4e00\u904d\uff1b\u4e3a\u4e86\u5b9e\u73b0\u9ad8\u6548\u7684\u4f20\u8f93\uff0c\u6211\u4eec\u8981\u907f\u514d\u91cd\u53d1\u5df2\u7ecf\u53d1\u8fc7\u7684\u5305\uff0c\u800c\u4e14\u53ea\u91cd\u53d1\u90a3\u4e9b\u51fa\u9519\u6216\u8005\u672a\u9001\u8fbe\u7684\u5305\uff1bTCP \u4e4b\u6240\u4ee5\u590d\u6742\u5c31\u662f\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9 \u5728\u6570\u636e\u5f88\u77ed\uff0c\u4e0d\u9700\u8981\u8003\u8651\u91cd\u53d1\u54ea\u4e2a\u5305\u7684\u60c5\u51b5\u4e0b\u5c31\u4e0d\u9700\u8981 TCP \u590d\u6742\u7684\u673a\u5236\uff0c\u4e5f\u4e0d\u9700\u8981\u7528\u6765\u5efa\u7acb\u548c\u65ad\u5f00\u8fde\u63a5\u7684\u63a7\u5236\u5305\uff1b\u53ea\u8981\u5c06\u56de\u590d\u7684\u6570\u636e\u5f53\u4f5c\u63a5\u6536\u786e\u8ba4\u7684\u5c31\u884c\uff0c\u4e5f\u4e0d\u9700\u8981\u4e13\u95e8\u7684\u63a5\u6536\u786e\u8ba4\u5305 UDP \u6ca1\u6709 TCP \u7684\u63a5\u6536\u786e\u8ba4\uff0c\u7a97\u53e3\u7b49\u673a\u5236\uff0c\u4e0d\u9700\u8981\u4ea4\u6362\u63a7\u5236\u4fe1\u606f\uff0c\u5efa\u7acb\u548c\u65ad\u5f00\u8fde\u63a5\u7684\u6b65\u9aa4\uff1b\u51fa\u9519\u65f6\u5c31\u6536\u4e0d\u5230\u6765\u81ea\u5bf9\u65b9\u7684\u56de\u590d\uff0c\u91cd\u53d1\u4e00\u904d\u6570\u636e\u5373\u53ef UDP \u5934\u90e8\u7684\u63a7\u5236\u4fe1\u606f\uff1a \u5b57\u6bb5\u540d\u79f0 \u957f\u5ea6 \u542b\u4e49 \u53d1\u9001\u65b9\u7aef\u53e3\u53f7 16 \u63a5\u6536\u65b9\u7aef\u53e3\u53f7 16 \u6570\u636e\u957f\u5ea6 16 \u6821\u9a8c\u548c 16 \u5176\u4ed6\u4f7f\u7528 DUP \u7684\u573a\u666f\uff1a\u97f3\u9891\u548c\u89c6\u9891\uff0c\u8fd9\u79cd\u60c5\u51b5\u65f6\u6548\u6027\u5f88\u91cd\u8981\uff0c\u5982\u679c\u53d1\u751f\u4e86\u9519\u8bef\u90a3\u4e5f\u6ca1\u5fc5\u8981\u91cd\u53d1\u6570\u636e\u548c\u9519\u8bef\u68c0\u67e5 3 \u4ece\u7f51\u7ebf\u5230\u7f51\u7edc\u8bbe\u5907\uff1a\u63a2\u7d22\u96c6\u7ebf\u5668\uff0c\u4ea4\u6362\u673a\u548c\u8def\u7531\u5668 \u00b6 3.1 \u4fe1\u53f7\u5728\u7f51\u7ebf\u548c\u96c6\u7ebf\u5668\u4e2d\u4f20\u8f93 \u00b6 \u8f6c\u53d1\u8bbe\u5907\u4f1a\u6839\u636e\u5305\u5934\u90e8\u4e2d\u7684\u63a7\u5236\u4fe1\u606f\uff0c\u5728\u8f6c\u53d1\u8bbe\u5907\u5185\u90e8\u4e00\u4e2a\u5199\u6709\u8f6c\u53d1\u89c4\u5219\u7684\u8868\u4e2d\u8fdb\u884c\u67e5\u8be2\uff0c\u4ee5\u6b64\u6765\u5224\u65ad\u5305\u7684\u76ee\u7684\u5730\u5e76\u8fdb\u884c\u8f6c\u53d1\uff1b\u5c31\u50cf\u90ae\u9012\u5458\u5728\u9001\u4fe1\u7684\u8fc7\u7a0b\u4e2d\u53ea\u770b\u4fe1\u5c01\uff0c\u4e0d\u770b\u5185\u5bb9 \u9632\u6b62\u7f51\u7ebf\u4e2d\u4fe1\u53f7\u7684\u8870\u51cf \uff1a \u7f51\u5361\u4e2d PHY\uff08MAU\uff09\u6a21\u5757\u8d1f\u8d23\u5c06\u5305\u8f6c\u6362\u6210\u7535\u4fe1\u53f7 \u7f51\u5361\u7684 PHY\uff08MAU\uff09\u6a21\u5757\u76f4\u63a5\u8fde\u63a5 RJ-45 \u63a5\u53e3\uff0c\u4fe1\u53f7\u4ece\u8fd9\u4e2a\u63a5\u53e3\u7684 1 \u53f7\u548c 2 \u53f7\u9488\u811a\u6d41\u5165\u7f51\u7ebf RJ-45\uff1aRJ45\u662f\u5e03\u7ebf\u7cfb\u7edf\u4e2d\u4fe1\u606f\u63d2\u5ea7\uff08\u5373\u901a\u4fe1\u5f15\u51fa\u7aef\uff09\u8fde\u63a5\u5668\u7684\u4e00\u79cd\uff0c\u8fde\u63a5\u5668\u7531\u63d2\u5934\uff08\u63a5\u5934\u3001\u6c34\u6676\u5934\uff09\u548c\u63d2\u5ea7\uff08\u6a21\u5757\uff09\u7ec4\u6210\uff0c\u6c34\u6676\u5934\u4e2d\u4f1a\u6709 2 \u6839\u7ebf\u4f5c\u4e3a\u63a5\u53d1\u9001\uff0c2 \u6839\u7ebf\u4f5c\u4e3a\u63a5\u9001 \u4fe1\u53f7\u5728\u7f51\u7ebf\u7684\u4f20\u8f93\u8fc7\u7a0b\u4e2d\uff0c\u80fd\u91cf\u4f1a\u9010\u6e10\u635f\u5931\uff0c\u7f51\u7ebf\u8d8a\u957f\u8870\u51cf\u8d8a\u4e25\u91cd\uff1b\u635f\u5931\u80fd\u91cf\u4f1a\u8ba9\u4fe1\u53f7\u7684\u62d0\u89d2\u53d8\u5706\uff0c\u8fd9\u662f\u56e0\u4e3a\u7535\u4fe1\u53f7\u7684\u9891\u7387\u8d8a\u9ad8\uff0c\u80fd\u91cf\u7684\u635f\u5931\u7387\u8d8a\u5927\uff1b\u5982\u679c\u52a0\u4e0a\u566a\u58f0\u5931\u771f\u4f1a\u66f4\u5389\u5bb3\uff0c\u51fa\u73b0\u5bf9 0/1 \u7684\u8bef\u5224 \u53cc\u7ede \u662f\u4e3a\u4e86\u6291\u5236\u566a\u58f0 \uff1a \u53cc\u7ede\u6307\u4e24\u6839\u7ebf\u7f20\u7ed5\u5728\u4e00\u8d77\uff0c\u662f\u4e3a\u4e86\u6291\u5236\u566a\u58f0 \u5f71\u54cd\u7f51\u7ebf\u7684\u7535\u78c1\u6ce2\u5206\u4e3a\u4e24\u79cd\uff1a \u7f51\u7ebf\u4e4b\u5916\u7684\u8bbe\u5907\uff1a\u4e24\u6839\u7ebf\u7684\u87ba\u65cb\u7ede\u5408\u4f1a\u8ba9\u566a\u58f0\uff08\u7535\u78c1\u6ce2\uff09\u4ea7\u751f\u7684\u7535\u6d41\u62b5\u6d88 \u7f51\u7ebf\u4e2d\u76f8\u90bb\u7684\u4fe1\u53f7\u7ebf\uff1a\u901a\u8fc7\u5bf9\u5185\u90e8\u95f4\u9694\u7684\u8bbe\u8ba1\u8ba9\u5f71\u54cd\u76f8\u4e92\u62b5\u6d88 \u53cc\u7ede\u7ebf\u7684\u79cd\u7c7b\uff1aP146 \u7c7b \u542b\u4e49 \u4e94\u7c7b\uff08CAT-5\uff09 \u8d85\u4e94\u7c7b\uff08CAT-5e\uff09 \u516d\u7c7b\uff08CAT-6\uff09 \u8d85\u516d\u7c7b\uff08CAT-6A\uff09 \u4e03\u7c7b\uff08CAT-7\uff09 \u96c6\u7ebf\u5668\u5c06\u4fe1\u53f7\u53d1\u5f80\u6240\u6709\u7ebf\u8def : \u4ee5\u592a\u7f51\u7684\u57fa\u672c\u67b6\u6784\uff1a\u4fe1\u53f7\u5230\u8fbe\u96c6\u7ebf\u5668\u540e\u5e7f\u64ad\u5230\u6574\u4e2a\u7f51\u7edc\uff0c\u6839\u636e\u76ee\u6807 MAC \u5730\u5740\u9009\u62e9\u662f\u5426\u63a5\u6536 \u96c6\u7ebf\u5668\u4e2d\u63a5\u53e3\u7684 MDI/MDI-X \u5f00\u5173\uff0cMDI \u5c31\u662f\u5bf9 RJ-45\u63a5\u53e3\u548c\u4fe1\u53f7\u6536\u53d1\u6a21\u5757\u76f4\u8fde\u63a5\u7ebf\uff0cMDI-X \u5219\u662f\u4ea4\u53c9\u63a5\u7ebf \u56e0\u4e3a\u9700\u8981 \u53d1\u9001\u65b9\u7684\u53d1\u9001\u7ebf\u8def \u548c \u63a5\u6536\u65b9\u7684\u63a5\u53d7\u7ebf\u8def\u8fde\u63a5\uff08568A \u548c 568B \u7684\u6c34\u6676\u5934\u90fd\u67098\u6839\u7ebf\uff09\uff0c\u6240\u4ee5\u5982\u679c 2 \u53f0\u8bbe\u5907\u90fd\u662f MDI \u6216\u8005 MDI-X\uff0c\u5219\u9700\u8981\u7528\u4ea4\u53c9\u7f51\u7ebf\uff08\u53d1\u9001\u548c\u63a5\u6536\u4fe1\u53f7\u7ebf\u53cd\u8fc7\u6765\u63a5\uff09\uff0c\u5426\u5219\u53ef\u4ee5\u76f4\u63a5\u63a5\u7ebf \u4fe1\u53f7\u5230\u8fbe\u96c6\u7ebf\u5668\u7684 PHY\uff08MAU\uff09\u6a21\u5757\u540e\u8fdb\u5165\u4e2d\u7ee7\u7535\u8def\uff0c\u4e2d\u7ee7\u7535\u8def\u7684\u529f\u80fd\u662f\u5c06\u8f93\u5165\u4fe1\u53f7\u5e7f\u64ad\u5230\u96c6\u7ebf\u5668\u7684\u6240\u6709\u7aef\u53e3\u4e0a\uff0c\u8fd8\u6709\u4fe1\u53f7\u6574\u6574\u5f62\uff0c\u9519\u8bef\u6291\u5236\u7b49 \u4fe1\u53f7\u5c06\u4fe1\u53f7\u53d1\u9001\u7ed9\u6240\u6709\u8fde\u63a5\u5728\u5b83\u4e0a\u9762\u7684\u7ebf\u8def 3.2 \u4ea4\u6362\u673a\u7684\u5305\u8f6c\u53d1\u64cd\u4f5c \u00b6 \u4fe1\u53f7\u5230\u8fbe\u7f51\u7ebf\u63a5\u53e3\u5e76\u7531 PHY\uff08MAU\uff09\u63a5\u6536\uff0c\u8fd9\u90e8\u5206\u4ea4\u6362\u673a\u4e2d\u548c\u96c6\u7ebf\u5668\u662f\u76f8\u540c\u7684\uff1b\u7136\u540e PHY\uff08MAU\uff09\u5c06\u4fe1\u53f7\u8f6c\u6362\u6210\u901a\u7528\u683c\u5f0f\uff0cMAC \u6a21\u5757\u8f6c\u6362\u6210\u6570\u5b57\u4fe1\u53f7\uff0c\u68c0\u9519\u5e76\u653e\u5165\u7f13\u51b2\u533a\uff0c\u8fd9\u90e8\u5206\u64cd\u4f5c\u548c\u7f51\u5361\u4e00\u6837\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u4ea4\u6362\u673a\u6bcf\u4e2a\u63a5\u53e3\u540e\u9762\u90fd\u662f\u4e00\u4e2a\u7f51\u5361\uff1b\u4e0d\u540c\u7684\u662f\u7f51\u5361\u662f\u6709 MAC \u5730\u5740\u7684\uff0c\u800c\u4ea4\u6362\u673a\u6ca1\u6709 \u4ea4\u6362\u673a\u7684 MAC \u6a21\u5757\u4e0d\u5177\u6709 MAC \u5730\u5740 \u5305\u653e\u5165\u7f13\u51b2\u533a\u540e\u9700\u8981\u67e5\u8be2\u8fd9\u4e2a\u5305\u7684\u63a5\u6536\u65b9 MAC \u5730\u5740\u662f\u5426\u5728 MAC \u5730\u5740\u8868\u4e2d\uff1bMAC \u5730\u5740\u8868\u4e2d\u8bb0\u5f55\u7aef\u53e3\u548c\u7aef\u53e3\u8fde\u63a5\u8bbe\u5907\u7684 MAC \u5730\u5740\uff0c\u67e5\u8be2\u5230\u5bf9\u5e94\u7684 MAC \u5730\u5740\u540e\u901a\u8fc7\u4ea4\u6362\u7535\u8def\u53d1\u9001\u5230\u5bf9\u5e94\u7684\u7aef\u53e3\uff1b\u4ea4\u6362\u7535\u8def\u7684\u7ed3\u6784\u56fe P152 \u7f51\u7edc\u5305\u5230\u8fbe\u53d1\u9001\u7aef\u53e3\u540e\uff0c\u7aef\u53e3\u7684 MAC \u6a21\u5757\u548c PHY\uff08MAU\uff09\u6a21\u5757\u4f1a\u6267\u884c\u53d1\u9001\u64cd\u4f5c\uff0c\u5982\u679c\u662f\u534a\u53cc\u5de5\u7684\u6a21\u5f0f\u9700\u8981\u68c0\u6d4b\u7ebf\u8def\u4e2d\u662f\u5426\u6709\u4fe1\u53f7\u5728\u4f20\u8f93 MAC \u5730\u5740\u8868\u7684\u7ef4\u62a4 \uff1a \u4ea4\u6362\u673a\u5728\u8f6c\u53d1\u5305\u7684\u8fc7\u7a0b\u4e2d\u9700\u8981\u5bf9 MAC \u5730\u5740\u8868\u8fdb\u884c\u7ef4\u62a4\uff0c\u7ef4\u62a4\u64cd\u4f5c\u5206\u4e3a 2 \u79cd\uff1a \u6536\u5230\u5305\u65f6\uff0c\u5c06\u53d1\u9001\u65b9\u7684 MAC \u5730\u5740\u548c\u5bf9\u5e94\u7aef\u53e3\u53f7\u5199\u5165 MAC \u5730\u5740\u8868 \u5220\u9664\u67d0\u6761\u8bb0\u5f55\uff0c\u9632\u6b62\u8bbe\u5907\u79fb\u52a8\u4ea7\u751f\u95ee\u9898\uff0c\u4e00\u6761\u8bb0\u5f55\u5728\u4e00\u6bb5\u65f6\u95f4\u540e\u4f1a\u81ea\u52a8\u5220\u9664 \u5982\u679c\u56e0\u4e3a\u8bb0\u5f55\u8fc7\u65f6\u800c\u5bfc\u81f4\u9519\u8bef\uff0c\u91cd\u542f\u4ea4\u6362\u673a\u5373\u53ef\u91cd\u7f6e\u5730\u5740\u8868 \u7279\u6b8a\u64cd\u4f5c \uff1a \u5f53\u4ea4\u6362\u673a\u53d1\u73b0\u4e00\u4e2a\u5305\u9700\u8981\u53d1\u56de\u5230\u539f\u7aef\u53e3\u65f6\uff0c\u4f1a\u76f4\u63a5\u4e22\u5f03\u8fd9\u4e2a\u5305\uff08\u56e0\u4e3a\u8fd9\u4e2a\u5305\u662f\u4ece\u96c6\u7ebf\u5668\u53d1\u8fc7\u6765\u7684\uff0c\u5df2\u7ecf\u5728\u5b50\u7f51\u4e2d\u5e7f\u64ad\u4e86\uff09 \u5730\u5740\u8868\u4e2d\u627e\u4e0d\u5230\u6307\u5b9a\u7684 MAC \u5730\u5740\uff0c\u5c06\u5305\u53d1\u9001\u5230\u9664\u4e86\u6e90\u7aef\u53e3\u4e4b\u5916\u7684\u6240\u6709\u7aef\u53e3\uff1b\u53d1\u9001\u540e\u76ee\u6807\u8bbe\u5907\u4f1a\u505a\u51fa\u54cd\u5e94\uff0c\u4ea4\u6362\u673a\u4e5f\u5c31\u5c06\u5b83\u7684\u5730\u5740\u5199\u5165\u5730\u5740\u8868 \u5982\u679c\u63a5\u6536\u65b9 MAC \u5730\u5740\u662f\u4e00\u4e2a \u5e7f\u64ad\u5730\u5740\uff0c\u90a3\u4e48\u4ea4\u6362\u673a\u4f1a\u5c06\u5305\u53d1\u9001\u7ed9\u9664\u6e90\u7aef\u53e3\u4e4b\u5916\u7684\u6240\u6709\u7aef\u53e3 \u4ea4\u6362\u673a\u7684\u5168\u53cc\u5de5\u6a21\u5f0f\u53ef\u4ee5\u540c\u65f6\u53d1\u9001\u548c\u63a5\u6536\u4fe1\u606f \u81ea\u52a8\u534f\u5546\uff1a\u786e\u5b9a\u6700\u4f18\u7684\u4f20\u8f93\u901f\u7387 \uff1a \u5207\u6362\u5168\u53cc\u5de5\u548c\u534a\u53cc\u5de5\u5f88\u9ebb\u70e6\uff0c\u4e8e\u662f\u540e\u9762\u51fa\u73b0\u4e86\u81ea\u52a8\u5207\u6362\u5de5\u4f5c\u6a21\u5f0f\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u5b9e\u73b0\u53cc\u65b9\u63a2\u6d4b\u662f\u5426\u652f\u6301\u5168\u53cc\u5de5\uff0c\u8fd8\u80fd\u63a2\u6d4b\u5bf9\u65b9\u7684\u4f20\u8f93\u901f\u7387\u5e76\u8fdb\u884c\u81ea\u52a8\u5207\u6362\uff0c\u8fd9\u79cd\u5207\u6362\u7684\u529f\u80fd\u88ab\u79f0\u4e3a\u81ea\u52a8\u534f\u5546 \u4ee5\u592a\u7f51\u4e2d\uff0c\u5728\u6ca1\u6709\u6570\u636e\u4f20\u8f93\u65f6\u7f51\u7edc\u4e2d\u4f1a\u6709\u4e00\u79cd\u88ab\u79f0\u4f5c\u8fde\u63a5\u8109\u51b2\u7684\u8109\u51b2\u4fe1\u53f7\uff0c\u4ece\u800c\u68c0\u6d4b\u5bf9\u65b9\u662f\u5426\u5728\u6b63\u5e38\u5de5\u4f5c\uff1b\u5728\u53cc\u7ede\u7ebf\u4ee5\u592a\u7f51\u89c4\u8303\u521a\u5236\u5b9a\u65f6\u53ea\u89c4\u5b9a\u4e86\u6309\u4e00\u5b9a\u95f4\u9694\u53d1\u9001\u8109\u51b2\u4fe1\u53f7\u6765\u786e\u8ba4\u7f51\u7edc\u662f\u5426\u6b63\u5e38\uff1b\u540e\u6765\uff0c\u8bbe\u8ba1\u4e86\u7279\u5b9a\u6392\u5217\u7684\u8109\u51b2\u4fe1\u53f7\u6765\u544a\u77e5\u81ea\u5df1\u652f\u6301\u7684\u5de5\u4f5c\u6a21\u5f0f\u548c\u4f20\u8f93\u901f\u7387\uff0c\u5e76\u4ece\u4e2d\u9009\u62e9\u4e00\u4e2a\u6700\u4f18\u7684\u7ec4\u5408 \u4ea4\u6362\u673a\u53ef\u540c\u65f6\u652f\u6301\u591a\u4e2a\u8f6c\u53d1\u64cd\u4f5c \uff1a \u4ea4\u6362\u673a\u591a\u4e2a\u7aef\u53e3\u53ef\u4ee5\u540c\u65f6\u4f20\u8f93\uff0c\u540c\u65f6\u8f6c\u53d1\u591a\u4e2a\u5305\uff1b\u4ece\u8bbe\u5907\u7684\u6574\u4f53\u8f6c\u53d1\u80fd\u529b\u6765\u770b\uff0c\u4ea4\u6362\u673a\u9ad8\u4e8e\u96c6\u7ebf\u5668 3.3 \u8def\u7531\u5668\u7684\u5305\u8f6c\u53d1\u64cd\u4f5c \u00b6 \u8def\u7531\u5668\u7684\u57fa\u672c\u77e5\u8bc6 \uff1a \u8def\u7531\u5668\u662f\u57fa\u4e8e IP \u8bbe\u8ba1\u7684\uff0c\u800c\u4ea4\u6362\u673a\u662f\u57fa\u4e8e\u4ee5\u592a\u7f51\u8bbe\u8ba1\u7684\uff1b\u8def\u7531\u5668\u6709\u4e24\u90e8\u5206\uff1a\u8f6c\u53d1\u6a21\u5757\u548c\u7aef\u53e3\u6a21\u5757\uff0c\u8d1f\u8d23\u5224\u65ad\u5305\u7684\u8f6c\u53d1\u76ee\u7684\u5730\u548c\u5305\u7684\u6536\u53d1\u64cd\u4f5c \u8def\u7531\u5668\u5728\u8f6c\u53d1\u5305\u65f6\uff0c\u9996\u5148\u4f1a\u901a\u8fc7\u7aef\u53e3\u5c06\u53d1\u8fc7\u6765\u7684\u5305\u63a5\u6536\u8fdb\u6765\uff0c\u8fd9\u4e00\u6b65\u53d6\u51b3\u4e8e\u7aef\u53e3\u7684\u901a\u4fe1\u6280\u672f\uff1b\u7136\u540e\u8f6c\u53d1\u6a21\u5757\u6839\u636e\u63a5\u6536\u5230\u7684\u5305\u7684 IP \u5934\u90e8\u8bb0\u5f55\u8bb0\u5f55\u63a5\u6536\u65b9\u7684 IP \u5730\u5740\uff0c\u5728\u8def\u7531\u5668\u8868\u4e2d\u67e5\u8be2\uff1b\u7136\u540e\u8f6c\u53d1\u5230\u5bf9\u5e94\u7684\u7aef\u53e3\uff0c\u518d\u6309\u7167\u786c\u4ef6\u7684\u89c4\u5219\u53d1\u51fa\u53bb \u7aef\u53e3\u6a21\u5757\u65f6\u4ee5\u5b9e\u9645\u7684\u53d1\u9001\u65b9\u6216\u8005\u63a5\u6536\u65b9\u6765\u6536\u53d1\u7f51\u7edc\u5305\u7684\uff0c\u4ee5\u4ee5\u592a\u7f51\u7aef\u53e3\u4e3a\u4f8b\uff0c\u8def\u7531\u5668\u7684\u7aef\u53e3\u5177\u6709 MAC \u5730\u5740\uff1b\u548c\u4ea4\u6362\u673a\u4e0d\u540c\u7684\u662f\uff0c\u4ea4\u6362\u673a\u53ea\u662f\u5c06\u8fdb\u6765\u7684\u5305\u8f6c\u53d1\u51fa\u53bb\uff0c\u81ea\u5df1\u4e0d\u4f1a\u6210\u4e3a\u63a5\u6536\u65b9\u6216\u8005\u53d1\u9001\u65b9 \u8def\u7531\u5668\u7684\u5404\u4e2a\u7aef\u53e3\u90fd\u5177\u6709 MAC \u5730\u5740\u548c IP \u5730\u5740 \u8def\u7531\u8868\u4e2d\u7684\u4fe1\u606f \uff1a \u8def\u7531\u5668\u6839\u636e IP \u5730\u5740\u5224\u65ad\u8f6c\u53d1\u76ee\u6807 \u76ee\u6807\u5730\u5740(Destination) \u5b50\u7f51\u63a9\u7801(Net) \u7f51\u5173 \u63a5\u53e3 \u8d8a\u70b9\u6570 \u5728\u8def\u7531\u5668\u5bf9\u8def\u7531\u8868\u8fdb\u884c\u5339\u914d\u65f6\uff0c\u53ea\u4f1a\u4e0e\u76ee\u6807\u5730\u5740\u7684\u7f51\u7edc\u53f7\u5339\u914d\u800c\u5ffd\u7565\u4e3b\u673a\u53f7\uff1b \u4ea4\u6362\u673a\u5728\u5730\u5740\u8868\u4e2d\u53ea\u5339\u914d\u5b8c\u5168\u4e00\u81f4\u7684\u8bb0\u5f55\uff0c\u800c\u8def\u7531\u5668\u5219\u4f1a\u5ffd\u7565\u4e3b\u673a\u53f7\u90e8\u5206\uff0c\u53ea\u5339\u914d\u7f51\u7edc\u53f7\u90e8\u5206 \u6709\u65f6\u76ee\u6807\u5730\u5740\u7684\u5b50\u7f51\u63a9\u7801\u548c\u8def\u7531\u8868\u4e2d\u7684\u5b50\u7f51\u63a9\u7801\u4e0d\u4e00\u81f4\uff0c\u662f\u56e0\u4e3a\u8def\u7531\u805a\u5408\u7684\u7ed3\u679c\uff0c\u5373\u5c06\u51e0\u4e2a\u5b50\u7f51\u5408\u5e76\u4e3a\u4e00\u4e2a\u5b50\u7f51\uff1b\u6bd4\u5982 10.10.1.0/24 \u4e0e 10.10.3.0/24 \u4e0e 10.10.2.0/24 \u5408\u5e76\u4e3a 10.10.0.0/16 \u8def\u7531\u8868\u7684\u5b50\u7f51\u63a9\u7801\u53ea\u662f\u7528\u6765\u5339\u914d\u76ee\u6807\u5730\u5740\u65f6\u544a\u8bc9\u8def\u7531\u5668\u8981\u5339\u914d\u591a\u5c11\u4e2a\u6bd4\u7279 \u7f51\u7edc\u53f7\u5339\u914d\u6210\u529f\u540e\u8def\u7531\u5668\u5c31\u4f1a\u4ece\u8def\u7531\u8868\u4e2d\u5bf9\u5e94\u884c\u7684\u63a5\u53e3\u8f6c\u53d1\uff0c\u53d1\u5f80\u6307\u5b9a\u7f51\u5173\uff1b\u8dc3\u70b9\u8ba1\u6570\u8868\u793a\u79bb IP \u76ee\u6807\u7684\u8fdc\u8fd1\uff0c\u6570\u5b57\u8d8a\u5927\u8868\u793a\u8d8a\u8fdc \u8def\u7531\u8868\u7684\u7ef4\u62a4\u65b9\u5f0f\u548c\u4ea4\u6362\u673a\u6709\u6240\u4e0d\u540c\uff0c\u4ea4\u6362\u673a\u5bf9 MAC \u5730\u5740\u7684\u7ef4\u62a4\u662f\u5305\u8f6c\u53d1\u65f6\u7684\u4e00\u4e2a\u64cd\u4f5c\uff0c\u800c\u8def\u7531\u5668\u5bf9\u8def\u7531\u8868\u7684\u7ef4\u62a4\u4e0e\u8f6c\u53d1\u64cd\u4f5c\u662f\u72ec\u7acb\u7684\uff0c\u5206\u4e3a 2 \u7c7b\uff1a \u7531\u4eba\u624b\u52a8\u7ef4\u62a4\u8def\u7531\u8bb0\u5f55 \u6839\u636e\u8def\u7531\u534f\u8bae\u673a\u5236\uff0c\u901a\u8fc7\u8def\u7531\u5668\u4e4b\u95f4\u7684\u4fe1\u606f\u4ea4\u6362\u8def\u7531\u5668\u81ea\u884c\u7ef4\u62a4 \u8def\u7531\u5668\u7684\u5305\u63a5\u6536\u64cd\u4f5c : \u8def\u7531\u5668\u7684\u7aef\u53e3\u90fd\u5177\u6709 MAC \u5730\u5740\uff0c\u53ea\u63a5\u6536\u4e0e\u81ea\u8eab\u5730\u5740\u5339\u914d\u7684\u5305\uff0c\u9047\u5230\u4e0d\u5339\u914d\u7684\u5305\u5219\u76f4\u63a5\u4e22\u5f03 \u67e5\u8be2\u8def\u7531\u8868\u786e\u5b9a\u8f93\u51fa\u7aef\u53e3 \uff1a \u5b8c\u6210\u5305\u63a5\u6536\u64cd\u4f5c\u540e\uff0c\u8def\u7531\u5668\u5c31\u4f1a\u4e22\u5f03\u5305\u5f00\u5934\u7684 MAC \u5934\u90e8\uff08MAC \u5934\u90e8\u7684\u4efb\u52a1\u5b8c\u6210\u4e86\uff09 \u901a\u8fc7\u8def\u7531\u5668\u8f6c\u53d1\u7684\u5305\uff0c\u5176\u63a5\u6536\u65b9\u7684 MAC \u5730\u5740\u4e3a\u8def\u7531\u5668\u7aef\u53e3\u7684 MAC \u5730\u5740 \u63a5\u4e0b\u6765\u8def\u7531\u5668\u4f1a\u6839\u636e MAC \u5934\u90e8\u540e\u65b9\u7684 IP \u5934\u90e8\u5bf9\u5305\u8fdb\u884c\u8f6c\u53d1\uff1b\u5bf9\u8def\u7531\u8868\u4e0e\u63a5\u6536\u65b9 IP \u8fdb\u884c\u5339\u914d\uff0c\u5339\u914d\u65f6\u5982\u679c\u6709\u591a\u6761\u8bb0\u5f55\u5339\u914d\u6210\u529f\uff08\u5339\u914d\u65f6\u53ea\u9700\u8981\u5339\u914d\u8def\u7531\u8868\u4e2d\u5b50\u7f51\u63a9\u7801\u7684\u90e8\u5206\uff09\u9009\u62e9\u7f51\u7edc\u53f7\u6700\u957f\u7684\uff0c\u56e0\u4e3a\u8fd9\u6837\u8bf4\u660e\u5b50\u7f51\u4e2d\u53ef\u5206\u914d\u7684\u4e3b\u673a\u6570\u8d8a\u5c11\uff1b\u5982\u679c\u662f\u957f\u5ea6\u76f8\u540c\u7684\u591a\u6761\u8bb0\u5f55\uff0c\u9009\u62e9\u8dc3\u70b9\u6570\u8f83\u5c0f\u7684 \u5982\u679c\u65e0\u6cd5\u5339\u914d\u5230\u8bb0\u5f55\uff0c\u8def\u7531\u5668\u4f1a\u76f4\u63a5\u4e22\u5f03\u8fd9\u4e2a\u5305\u7136\u540e\u901a\u8fc7 ICMP \u6d88\u606f\u901a\u77e5\u5bf9\u65b9\uff1b\u8fd9\u91cc\u7684\u5904\u7406\u548c\u4ea4\u6362\u673a\u4e0d\u540c\uff0c\u4ea4\u6362\u673a\u65f6\u76f4\u63a5\u5e7f\u64ad\uff0c\u56e0\u4e3a\u4ea4\u6362\u673a\u8fde\u63a5\u7684\u7f51\u7edc\u7684\u89c4\u6a21\u4e0d\u5927 \u627e\u4e0d\u5230\u5339\u914d\u8def\u7531\u65f6\u9009\u62e9\u9ed8\u8ba4\u8def\u7531 \uff1a \u8def\u7531\u8868\u4e2d\u6709\u4e00\u6761\u5b50\u7f51\u63a9\u7801\u662f 0:0:0:0 \u7684\u8bb0\u5f55\uff0c\u5373\u4e0d\u7528\u4efb\u4f55\u5339\u914d\u90fd\u53ef\u4ee5\u5339\u914d\u6210\u529f\uff0c\u8fd9\u6761\u8bb0\u5f55\u914d\u7f6e\u7684\u7f51\u5173\u4e5f\u53eb\u9ed8\u8ba4\u7f51\u5173\uff1b\u56e0\u4e3a\u5339\u914d\u6210\u529f\u591a\u6761\u65f6\u5339\u914d\u957f\u5ea6\u7684 bit \u6570\u8d8a\u957f\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u6240\u4ee5\u4e5f\u4e0d\u4f1a\u9009\u62e9\u9ed8\u8ba4\u7f51\u5173 \u5305\u7684\u6709\u6548\u671f \uff1a \u5305\u5728\u8def\u7531\u5668\u8f6c\u53d1\u4e4b\u524d\uff0c\u9700\u8981\u66f4\u65b0 IP \u5934\u90e8\u7684 TTL\uff08Time to live\uff0c\u751f\u5b58\u65f6\u95f4\uff0cIP\u5934\u90e8\u89c1 P103\uff09\uff1b\u6bcf\u7ecf\u8fc7\u4e00\u4e2a\u8def\u7531\u5668\u7684\u8f6c\u53d1 TTL \u4f1a\u51cf 1\uff0c\u5f53\u8fd9\u4e2a\u503c\u53d8\u6210 0 \u65f6 \u4f1a\u88ab\u4e22\u5f03\uff0c\u8fd9\u4e2a\u673a\u5236\u662f\u4e3a\u4e86\u9632\u6b62\u5305\u9677\u5165\u6b7b\u5faa\u73af\uff1b\u53d1\u9001\u65b9\u5728\u53d1\u9001\u65f6 TTL \u4f1a\u8bbe\u7f6e\u4e3a 64 \u6216 128 \u901a\u8fc7\u5206\u7247\u529f\u80fd\u62c6\u5206\u5927\u7f51\u7edc\u5305 \uff1a PPPoE\uff1aPPP to Ethernet\uff0c\u63a7\u5236 ADSL\uff0cFTTH \u7b49\u7f51\u7edc\u5bbd\u5e26\u7684\u65b9\u5f0f \u4e0d\u540c\u7684\u7ebf\u8def\u548c\u5c40\u57df\u7f51\u7c7b\u578b\u5404\u81ea\u80fd\u4f20\u8f93\u7684\u6700\u5927\u5305\u957f\u5ea6\u4e0d\u540c\uff0c\u6240\u4ee5\u8def\u7531\u5668\u8f93\u51fa\u7aef\u53e3\u7684\u6700\u5927\u5305\u957f\u5ea6\u53ef\u80fd\u4f1a\u5c0f\u4e8e\u8f93\u5165\u7aef\u53e3\uff1b\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\u53ef\u4ee5\u4f7f\u7528 IP \u534f\u8bae\u4e2d\u5b9a\u4e49\u7684\u5206\u7247\u529f\u80fd\u5bf9\u5305\u8fdb\u884c\u62c6\u5206\uff0c\u7f29\u77ed\u6bcf\u4e2a\u5305\u7684\u957f\u5ea6 TCP \u62c6\u5206\u6570\u636e\u662f\u5728\u5c06\u6570\u636e\u88c5\u5230\u5305\u91cc\u4e4b\u524d\u8fdb\u884c\u7684\uff0c\u7136\u540e\u5206\u7247\u662f\u5bf9\u4e00\u4e2a\u5b8c\u6574\u7684\u5305\u8fdb\u884c\u62c6\u5206 \u9996\u5148\uff0c\u9700\u8981\u77e5\u9053\u8f93\u51fa\u7aef\u53e3\u7684 MTU\uff0c\u80fd\u4e0d\u80fd\u76f4\u63a5\u53d1\u9001\uff0c\u8fd9\u4e2a\u6700\u5927\u5305\u957f\u5ea6\u662f\u7531\u7aef\u53e3\u7c7b\u578b\u51b3\u5b9a\u7684\uff1b\u5982\u679c\u9700\u8981\u5206\u7247\uff0c\u8fd8\u8981\u67e5\u8be2\u4e00\u4e0b IP \u5934\u90e8\u4e2d\u662f\u5426\u5141\u8bb8\uff08\u4e24\u79cd\u60c5\u51b5\u4e0b\u4e0d\u5141\u8bb8\uff0c\u53d1\u9001\u53d1\u8bbe\u7f6e\u4e86\u4e0d\u5141\u8bb8 \u6216\u8005 \u8fd9\u4e2a\u5305\u5df2\u7ecf\u662f\u5206\u7247\u8fc7\u7684\u4e86\uff09\uff1b\u5982\u679c\u4e0d\u5141\u8bb8\u5206\u7247\u5c31\u53ea\u80fd\u4e22\u5f03\u8fd9\u4e2a\u5305\u7136\u540e\u901a\u8fc7 ICMP \u6d88\u606f\u901a\u77e5\u5bf9\u65b9\uff1b\u5728\u5206\u7247\u4e2d\uff0c\u5206\u7247\u7684\u5bf9\u8c61\u662f TCP \u5934\u90e8\u548c\u540e\u9762\u7684\u5185\u5bb9\uff0c\u7136\u540e\u5728\u6bcf\u4e2a\u5206\u7247\u524d\u52a0\u4e0a IP \u5934\u90e8\uff0c\u5927\u90e8\u5206\u5185\u5bb9\u548c\u539f\u672c\u7684 IP \u5934\u90e8\u4e00\u81f4\uff0c\u6709\u4e00\u4e9b\u4fe1\u606f\u9700\u8981\u66f4\u65b0 \u8def\u7531\u5668\u7684\u53d1\u9001\u64cd\u4f5c\u548c\u8ba1\u7b97\u673a\u76f8\u540c \uff1a \u53d1\u9001\u524d\u7684\u51c6\u5907\u5de5\u4f5c\u5b8c\u6210\uff0c\u8fdb\u5165\u53d1\u9001\u5305\u7684\u9636\u6bb5\uff1b\u8fd9\u90e8\u64cd\u4f5c\u53d6\u51b3\u4e8e\u8f93\u51fa\u7aef\u53e3\u7c7b\u578b\uff0c\u5982\u679c\u662f \u4ee5\u592a\u7f51/ADSL \u5c31\u6309\u7167 \u4ee5\u592a\u7f51/ADSL \u89c4\u5219\u5c06\u5305\u8f6c\u6362\u4e3a\u7535\u4fe1\u53f7\u53d1\u9001\uff1b\u8fd9\u91cc\u4ee5\u8def\u7531\u5668\u4f4d\u4e8e\u516c\u53f8\u7b49\u5c40\u57df\u7f51\u7684\u5185\u90e8\uff0c\u5373\u8f93\u51fa\u7aef\u53e3\u662f\u4ee5\u592a\u7f51\u4e3a\u4f8b\uff1a \u9996\u5148\u4e3a\u4e86\u5224\u65ad MAC \u5730\u5740\u5934\u90e8\u4e2d\u7684 MAC \u5730\u5740\u662f\u4ec0\u4e48\uff0c\u8981\u6839\u636e\u8def\u7531\u8868\u7684\u7f51\u5173\u5217\u5224\u65ad\u5bf9\u65b9\u5730\u5740\uff08\u5982\u679c\u662f\u7a7a\u5219 IP \u5934\u90e8\u4e2d\u7684\u63a5\u6536\u65b9 IP \u5730\u5740\u5c31\u662f\u8981\u8f6c\u53d1\u5230\u7684\u76ee\u6807\u5730\u5740\uff09\uff0c\u7136\u540e\u6839\u636e ARP \u6839\u636e IP \u5730\u5740\u67e5\u8be2 MAC \u5730\u5740\uff0c\u4f5c\u4e3a\u63a5\u6536\u65b9 MAC \u5730\u5740\uff08\u4f1a\u5148\u5728 ARP \u7f13\u5b58\u4e2d\u67e5\u8be2\uff09 \u8def\u7531\u5668\u4e0e\u4ea4\u6362\u673a\u7684\u5173\u7cfb \uff1a \u8def\u7531\u5668\u662f\u57fa\u4e8e IP \u8bbe\u8ba1\u7684\uff0c\u4ea4\u6362\u673a\u662f\u57fa\u4e8e\u4ee5\u592a\u7f51\u8bbe\u8ba1\u7684\uff1b\u8def\u7531\u5668\u5c06\u5305\u7684\u4f20\u8f93\u5de5\u4f5c\u59d4\u6258\u7ed9\u4ee5\u592a\u7f51\u8fdb\u884c\uff0c\u5b9e\u9645\u7684\u8def\u7531\u5668\u5185\u7f6e\u4ea4\u6362\u673a\u529f\u80fd\uff0c\u6bd4\u5982\u7528\u4e8e\u8fde\u63a5\u4e92\u8054\u7f51\u7684\u5bb6\u7528\u8def\u7531\u5668 IP \u5e76\u4e0d\u662f\u59d4\u6258\u4ee5\u592a\u7f51\u5c06\u5305\u4f20\u8f93\u5230\u6700\u7ec8\u76ee\u7684\u5730\uff0c\u800c\u662f\u4f20\u8f93\u5230\u4e0b\u4e00\u4e2a\u8def\u7531\u5668\uff0c\u66f4\u65b0\u7684 MAC \u5730\u5740\u662f\u4e0b\u4e00\u4e2a\u8def\u7531\u5668\u7684 MAC \u5730\u5740 \u7f51\u7edc\u5e76\u975e\u53ea\u6709\u4ee5\u592a\u7f51\u4e00\u79cd\uff0c\u8fd8\u6709\u65e0\u7ebf\u5c40\u57df\u7f51\u7b49\uff1b\u5982\u679c\u548c\u4e0b\u4e00\u4e2a\u8def\u7531\u5668\u4e4b\u95f4\u662f\u65e0\u7ebf\u5c40\u57df\u7f51\u8fde\u63a5\u7684\uff0c\u5c31\u59d4\u6258\u65e0\u7ebf\u5c40\u57df\u7f51\u4f20\u8f93\uff1bIP \u672c\u8eab\u5e76\u4e0d\u8d1f\u8d23\u5305\u7684\u4f20\u8f93\uff0c\u800c\u662f\u59d4\u6258\u5404\u79cd\u901a\u4fe1\u6280\u672f\u5c06\u5305\u4f20\u8f93\u5230\u4e0b\u4e00\u4e2a\u8def\u7531\u5668\uff0c\u8fd9\u662f IP \u7684\u7279\u70b9 3.4 \u8def\u7531\u5668\u7684\u9644\u52a0\u529f\u80fd \u00b6 \u8def\u7531\u5668\u6700\u91cd\u8981\u7684\u4e24\u4e2a\u529f\u80fd\uff1a\u5730\u5740\u8f6c\u6362\uff0c\u5305\u8fc7\u6ee4 \u901a\u8fc7\u5730\u5740\u8f6c\u6362\u6709\u6548\u5229\u7528 IP \u5730\u5740 \uff1a \u4e3a\u4e86\u9632\u6b62\u5730\u5740\u4e0d\u591f\u7528\u7684\u60c5\u51b5\u5229\u7528\u5730\u5740\u8f6c\u6362\uff1b\u5982\u679c A\uff0cB \u4e24\u516c\u53f8\u7684\u5185\u7f51\u662f\u5b8c\u5168\u72ec\u7acb\u7684\uff0c\u4e24\u5bb6\u5185\u7f51\u4e4b\u95f4\u4e0d\u4f1a\u8fdb\u884c\u901a\u4fe1\uff0c\u90a3\u4e48 A \u516c\u53f8\u548c B \u516c\u53f8\u5ba2\u6237\u7aef\u4e4b\u95f4\u6709\u76f8\u540c\u7684 IP \u4e5f\u6ca1\u6709\u5173\u7cfb\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4e0d\u4f1a\u8fdb\u884c\u901a\u4fe1\uff1b\u516c\u53f8\u5185\u90e8\u7684\u8bbe\u5907\u4e0d\u9700\u8981\u5206\u914d\u56fa\u5b9a\u5730\u5740\uff0c\u4ece\u800c\u8282\u7701 IP \u5730\u5740\uff1b\u4e5f\u4e0d\u662f\u968f\u4fbf\u5206\u914d\u5730\u5740\uff0c\u9700\u8981\u6709\u4e00\u5b9a\u7684\u89c4\u5219\uff0c\u89c4\u5b9a\u67d0\u4e9b\u5730\u5740\u662f\u7528\u4e8e\u5185\u7f51\u7684\uff0c\u8fd9\u4e9b\u5730\u5740\u53eb\u505a\u79c1\u6709\u5730\u5740\uff0c\u539f\u6765\u7684\u5730\u5740\u53eb\u505a\u516c\u6709\u5730\u5740\uff0c\u79c1\u6709\u5730\u5740\u7684\u8303\u56f4\uff1a 10.0.0.0 ~ 10.255.255.255 172.16.0.0 ~ 172.31.255.255 192.168.0.0 ~ 192.168.255.255 \u8fd9\u4e9b\u5730\u5740\u53ea\u662f\u5c06\u5171\u6709\u5730\u5740\u4e2d\u6ca1\u5206\u914d\u7684\u4e00\u90e8\u5206\u62ff\u51fa\u6765\u89c4\u5b9a\u53ea\u80fd\u5728\u5185\u7f51\u4e2d\u4f7f\u7528\uff0c\u4e0d\u540c\u516c\u53f8\u95f4\u7684\u5730\u5740\u91cd\u590d\u4e5f\u6ca1\u6709\u5173\u7cfb\uff0c\u8fd9\u4e9b\u5730\u5740\u4e0d\u505a\u7edf\u4e00\u7ba1\u7406\uff0c\u4e0d\u9700\u8981\u7533\u8bf7\uff0c\u5f53\u7136\u5185\u7f51\u4e2d\u8fd8\u662f\u9700\u8981\u907f\u514d\u91cd\u590d\u5730\u5740\u7684 \u5f53\u516c\u53f8\u5185\u7f51\u548c\u4e92\u8054\u7f51\u8fde\u63a5\u65f6\uff0c\u516c\u53f8\u5185\u7f51\u5206\u4e3a 2 \u4e2a\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u5bf9\u4e92\u8054\u7f51\u5f00\u653e\u7684\u670d\u52a1\u5668\uff0c\u53e6\u4e00\u90e8\u5206\u662f\u516c\u53f8\u5185\u90e8\u8bbe\u5907\uff0c\u5f00\u653e\u7684\u90e8\u5206\u5206\u914d\u5171\u6709\u5730\u5740\uff0c\u5185\u90e8\u8bbe\u5907\u5206\u914d\u79c1\u6709\u5730\u5740\uff0c\u4e0d\u80fd\u548c\u4e92\u8054\u7f51\u76f4\u63a5\u6536\u53d1\u7f51\u7edc\u5305\uff0c\u800c\u662f\u901a\u8fc7\u4e00\u79cd\u7279\u6b8a\u7684\u673a\u5236\u8fde\u63a5\uff0c\u53eb\u505a\u5730\u5740\u8f6c\u6362 \u5730\u5740\u8f6c\u6362\u7684\u57fa\u672c\u539f\u7406 \uff1a \u5730\u5740\u8f6c\u6362\u7684\u57fa\u672c\u539f\u7406\u662f\u5bf9 IP \u5934\u90e8\u4e2d\u7684 IP \u5730\u5740\u548c \u7aef\u53e3\u8fdb\u884c\u6539\u5199 TCP \u8fde\u63a5\u64cd\u4f5c\u7b2c\u4e00\u4e2a\u5305\u88ab\u8f6c\u53d1\u5230\u4e92\u8054\u7f51\u65f6\uff0c\u4f1a\u5c06\u53d1\u9001\u65b9\u7684 IP \u5730\u5740\u6539\u5199\u6210 \u5730\u5740\u8f6c\u6362\u8bbe\u5907\uff08\u8def\u7531\u5668\uff09\u7684\u4e92\u8054\u7f51\u63a5\u5165\u7aef\u53e3\u5730\u5740\uff0c\u7aef\u53e3\u53f7\u4f1a\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u7a7a\u95f2\u7aef\u53e3\uff0c\u7136\u540e\u6539\u5199\u524d\u540e\u7684 IP \u5730\u5740\u548c \u7aef\u53e3\u53f7\u4f1a\u586b\u5165\u8868\u4e2d\uff1b\u670d\u52a1\u5668\u53d1\u9001\u8fc7\u6765\u7684\u5305\u4e5f\u53ef\u4ee5\u6539\u5199\u4e3a\u5bf9\u5e94\u8868\u627e\u5230\u54cd\u5e94\u7684\u79c1\u6709\u5730\u5740\u548c\u7aef\u53e3\uff0c\u7136\u540e\u53d1\u7ed9\u5185\u7f51\uff1b\u5bb6\u5ead\u7f51\u7edc\u4e2d\u7684\u5de5\u4f5c\u8fc7\u7a0b\u4e5f\u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u53ea\u662f\u89c4\u6a21\u4e0d\u540c \u5730\u5740\u548c\u7aef\u53e3\u5bf9\u5e94\u8868\uff1a \u5171\u6709\u5730\u5740 \u7aef\u53e3\u53f7 \u79c1\u6709\u5730\u5740 \u7aef\u53e3\u53f7 ... ... ... ... \u6539\u5199\u7aef\u53e3\u53f7\u7684\u539f\u56e0 \uff1a \u65e9\u671f\u7684\u5730\u5740\u8f6c\u6362\u662f\u53ea\u6539\u5199\u5730\u5740\u7684\uff0c\u4f46\u662f\u8fd9\u8981\u8981\u6c42\u5171\u6709\u5730\u5740\u7684\u6570\u91cf\u7b49\u540c\u4e8e\u540c\u65f6\u8bbf\u95ee\u4e92\u8054\u7f51\u8bbe\u5907\u7684\u6570\u91cf\uff0c\u4eba\u591a\u4e86\u5c31\u4e0d\u884c\uff1b\u7aef\u53e3\u53f7 16 bit\uff0c\u53ef\u4ee5\u5206\u914d\u51e0\u4e07\u4e2a\u7aef\u53e3\uff0c\u63d0\u9ad8\u4e86\u516c\u6709\u5730\u5740\u7684\u5229\u7528\u7387 \u4ece\u4e92\u8054\u7f51\u8bbf\u95ee\u516c\u53f8\u5185\u7f51 \uff1a \u5185\u7f51\u5230\u4e92\u8054\u7f51\u7684\u5305\u5982\u679c\u8868\u4e2d\u6ca1\u6709\u662f\u53ef\u4ee5\u968f\u673a\u5206\u914d\u4e00\u4e2a\u7aef\u53e3\u7684\uff0c\u4f46\u662f\u4e92\u8054\u7f51\u5230\u5185\u7f51\u7684\u5305\u5982\u8868\u4e2d\u6ca1\u6709\u662f\u65e0\u6cd5\u6b63\u5e38\u8f6c\u53d1\u7684\uff1b\u8fd9\u610f\u5473\u8fd9\u5bf9\u4e8e\u6ca1\u6709\u8bbf\u95ee\u4e92\u8054\u7f51\u7684\u5185\u7f51\u8bbe\u5907\uff0c\u662f\u65e0\u6cd5\u4ece\u4e92\u8054\u7f51\u5411\u5176\u53d1\u9001\u7f51\u7edc\u5305\u7684\uff0c\u9664\u975e\u516c\u53f8\u4e3b\u52a8\u5141\u8bb8\uff0c\u8fd9\u79cd\u673a\u5236\u53ef\u4ee5\u9632\u6b62\u975e\u6cd5\u5165\u4fb5 \u5982\u679c\u8981\u4ece\u4e92\u8054\u7f51\u8bbf\u95ee\u5185\u7f51\uff0c\u9700\u8981\u8fdb\u884c\u624b\u52a8\u6dfb\u52a0\u8bb0\u5f55 \u8def\u7531\u5668\u7684\u5305\u8fc7\u6ee4\u529f\u80fd \uff1a \u5728\u5bf9\u5305\u8fdb\u884c\u8f6c\u53d1\u65f6\uff0c\u6839\u636e MAC \u5934\u90e8\uff0cIP \u5934\u90e8\uff0cTCP \u5934\u90e8\u7684\u5185\u5bb9\uff0c\u6309\u7167\u4e8b\u5148\u8bbe\u7f6e\u597d\u7684\u89c4\u5219\u51b3\u5b9a\u662f\u8f6c\u53d1\u8fd9\u4e2a\u5305\u8fd8\u662f\u4e22\u5f03\u8fd9\u4e2a\u5305\uff1b\u9632\u706b\u5899\u8bbe\u5907\u6216\u8005\u8f6f\u4ef6\u5927\u591a\u90fd\u662f\u5229\u7528\u8fd9\u4e00\u673a\u5236\u6765\u9632\u6b62\u975e\u6cd5\u5165\u4fb5\u7684 4 \u901a\u8fc7\u63a5\u5165\u7f51\u8fdb\u5165\u4e92\u8054\u7f51\u5185\u90e8\uff1a\u63a2\u7d22\u63a5\u5165\u7f51\u548c\u7f51\u7edc\u8fd0\u8425\u5546 \u00b6 4.1 ADSL \u63a5\u5165\u7f51\u7684\u7ed3\u6784\u548c\u5de5\u4f5c\u65b9\u5f0f \u00b6 4.2 \u5149\u7ea4\u63a5\u5165\u7f51\uff08FTTH\uff09 \u00b6 4.3\u63a5\u5165\u7f51\u4e2d\u4f7f\u7528\u7684 PPP \u548c \u96a7\u9053 \u00b6 4.4 \u7f51\u7edc\u8fd0\u8425\u5546\u7684\u5185\u90e8 \u00b6 4.5 \u8de8\u8d8a\u8fd0\u8425\u5546\u7684\u7f51\u7edc\u5305 \u00b6 5 \u670d\u52a1\u5668\u7aef\u7684\u5c40\u57df\u7f51\u4e2d\u6709\u4ec0\u4e48\u7384\u673a \u00b6 5.1 Web \u670d\u52a1\u5668\u7684\u90e8\u7f72\u5730\u70b9 \u00b6 5.2 \u9632\u706b\u5899\u7684\u7ed3\u6784\u548c\u539f\u7406 \u00b6 5.3 \u901a\u8fc7\u5c06\u8bf7\u6c42\u5e73\u5747\u5206\u914d\u7ed9\u591a\u53f0\u670d\u52a1\u5668\u6765\u5e73\u8861\u8d1f\u8f7d \u00b6 5.4 \u4f7f\u7528\u7f13\u5b58\u670d\u52a1\u5668\u5206\u62c5\u8d1f\u8f7d \u00b6 5.5 \u5185\u5bb9\u5206\u53d1\u670d\u52a1 \u00b6 6 \u8bf7\u6c42\u5230\u8fbe Web \u670d\u52a1\u5668\uff0c\u54cd\u5e94\u8fd4\u56de\u6d4f\u89c8\u5668 \u00b6 6.1 \u670d\u52a1\u5668\u6982\u89c8 \u00b6 6.2 \u670d\u52a1\u5668\u7684\u63a5\u6536\u64cd\u4f5c \u00b6 6.3 Web \u670d\u52a1\u5668\u7a0b\u5e8f\u89e3\u91ca\u8bf7\u6c42\u6d88\u606f\u5e76\u4f5c\u51fa\u54cd\u5e94 \u00b6 6.4 \u6d4f\u89c8\u5668\u63a5\u6536\u54cd\u5e94\u6d88\u606f\u5e76\u663e\u793a\u5185\u5bb9 \u00b6 \u672f\u8bed \u00b6 URL\uff1a\u7f51\u5740\uff0cUniform Resource Locator\uff0c\u7edf\u4e00\u8d44\u6e90\u5b9a\u4f4d\u7b26 FTP\uff1aFile Transfer Protocol\uff0c\u6587\u4ef6\u4f20\u8f93\u534f\u8bae HTTP\uff1aHypertext Transfer Protocol\uff0c\u8d85\u6587\u672c\u4f20\u9001\u534f\u8bae URI\uff1aUniform Resource Identifier\uff0c\u7edf\u4e00\u8d44\u6e90\u6807\u8bc6\u7b26 CGI\uff1a\u5bf9 Web \u670d\u52a1\u5668\u7a0b\u5e8f\u8c03\u7528\u5176\u4ed6\u7a0b\u5e8f\u7684\u89c4\u5219\u6240\u505a\u7684\u5b9a\u4e49\u5c31\u662f CGI\uff0c\u6309\u7167 CGI \u89c4\u8303\u5de5\u4f5c\u7684\u7a0b\u5e8f\u5c31\u662f CGI \u7a0b\u5e8f DNS\uff1aDomain Name System\uff0c\u57df\u540d\u670d\u52a1\u7cfb\u7edf \u534f\u8bae\u6808\uff1a\u64cd\u4f5c\u7cfb\u7edf\u5185\u90e8\u7684\u7f51\u7edc\u63a7\u5236\u8f6f\u4ef6\uff0c\u4e5f\u53eb \"\u534f\u8bae\u9a71\u52a8\" \"TCP/IP \u9a71\u52a8\" MAC \u5730\u5740\uff1a\u7b26\u5408 IEEE \u89c4\u683c\u7684\u5c40\u57df\u7f51\u8bbe\u5907\u90fd\u4f7f\u7528\u540c\u4e00\u89c4\u683c\u7684\u5730\u5740\uff0c\u53eb\u505a MAC \u5730\u5740 MTU\uff1aMaximum Transmission Unit\uff0c\u6700\u5927\u4f20\u8f93\u5355\u5143 MSS\uff1aMaximum Segment Size\uff0c\u6700\u5927\u5206\u6bb5\u5927\u5c0f\uff0cMTU \u51cf\u53bb TCP \u5934\u90e8\u548c IP \u5934\u90e8 SFD\uff1aStart Frame Delimiter\uff0c\u8d77\u59cb\u5e27\u5206\u754c\u7b26\uff0c\u7f51\u7edc\u5305\u5934\u90e8 FCS\uff1aFrame Check Sequence\uff0c\u5e27\u6821\u9a8c\u5e8f\u5217\uff0c\u7f51\u7edc\u5305\u7ed3\u5c3e ARP\uff1aAddress Resolution Protocol\uff0c\u5730\u5740\u89e3\u6790\u534f\u8bae\uff0c\u6839\u636e IP \u5730\u5740\u67e5\u8be2 MAC \u5730\u5740 \u4e2d\u7ee7\u5f0f\u96c6\u7ebf\u5668\uff1a\u7b80\u79f0\u96c6\u7ebf\u5668\uff0c\u4f1a\u5bf9\u6d88\u606f\u653e\u5927\u5e76\u5728\u7f51\u7edc\u4e2d\u8fdb\u884c\u5e7f\u64ad \u4ea4\u6362\u5f0f\u96c6\u7ebf\u5668\uff1a\u7b80\u79f0\u4ea4\u6362\u673a\uff0c\u4f1a\u6839\u636e MAC \u5730\u5740\u53d1\u9001\u7ed9\u6307\u5b9a\u8bbe\u5907 MAC\uff1aMedia Access Control MAU\uff1aMedium Attach Unit\uff0c\u4ecb\u8d28\u8fde\u63a5\u5355\u5143 PHY\uff1aPhysical Layer Device\uff0c\u7269\u7406\u5c42\u88c5\u7f6e\uff0c\u4ee5\u592a\u7f51\u6709\u591a\u91cd\u6d3e\u751f\u65b9\u5f0f\uff0c\u6bcf\u79cd\u65b9\u5f0f\u4e2d\u4fe1\u53f7\u6536\u53d1\u6a21\u5757\u7684\u540d\u79f0\u90fd\u4e0d\u4e00\u6837\uff0c\u73b0\u5728 100 Mbit/s \u4ee5\u4e0a\u7684\u4ee5\u592a\u7f51\u4e2d\u53eb\u505a PHY\uff0c\u4ee5\u524d\u4f4e\u901f\u65b9\u5f0f\u4e2d\u5219\u53eb\u505a MAU PPPoE\uff1aPPP to Ethernet\uff0c\u63a7\u5236 ADSL\uff0cFTTH \u7b49\u7f51\u7edc\u5bbd\u5e26\u7684\u65b9\u5f0f","title":"\u7f51\u7edc\u662f\u600e\u6837\u8fde\u63a5\u7684"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#_1","text":"\u300a\u7f51\u7edc\u662f\u600e\u6837\u8fde\u63a5\u7684\u300b\u7b14\u8bb0","title":"\u7f51\u7edc\u662f\u600e\u6837\u8fde\u63a5\u7684"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#1","text":"","title":"1 \u6d4f\u89c8\u5668\u751f\u6210\u6d88\u606f\uff1a\u63a2\u7d22\u6d4f\u89c8\u5668\u5185\u90e8"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#11-http","text":"URL\uff1a\u7f51\u5740\uff0cUniform Resource Locator\uff0c\u7edf\u4e00\u8d44\u6e90\u5b9a\u4f4d\u7b26 FTP\uff1aFile Transfer Protocol\uff0c\u6587\u4ef6\u4f20\u8f93\u534f\u8bae HTTP\uff1aHypertext Transfer Protocol\uff0c\u8d85\u6587\u672c\u4f20\u9001\u534f\u8bae \u8f93\u5165 URL \u6216\u8005\u70b9\u51fb\u7f51\u7ad9\u4e2d\u7684\u94fe\u63a5\u4f1a\u5411 Web \u670d\u52a1\u5668\u53d1\u9001 HTTP \u8bf7\u6c42\uff0cURL \u662f Web \u670d\u52a1\u5668\u7684\u540d\u79f0\u52a0\u4e0a\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u6bd4\u5982\uff1awww.lab.glasscom.com \u52a0\u4e0a /fir1/file1/html \u7701\u7565\u6587\u4ef6\u8def\u5f84\u4e00\u822c\u4f1a\u8bbf\u95ee\u9ed8\u8ba4\u6587\u4ef6\uff0c\u5982 default.html \u6216\u8005 index.html \u6d4f\u89c8\u5668\u7684\u7b2c\u4e00\u6b65\u5de5\u4f5c\u5c31\u662f\u5bf9 URL \u8fdb\u884c\u89e3\u6790 URI\uff1aUniform Resource Identifier\uff0c\u7edf\u4e00\u8d44\u6e90\u6807\u8bc6\u7b26 CGI\uff1a\u5bf9 Web \u670d\u52a1\u5668\u7a0b\u5e8f\u8c03\u7528\u5176\u4ed6\u7a0b\u5e8f\u7684\u89c4\u5219\u6240\u505a\u7684\u5b9a\u4e49\u5c31\u662f CGI\uff0c\u6309\u7167 CGI \u89c4\u8303\u5de5\u4f5c\u7684\u7a0b\u5e8f\u5c31\u662f CGI \u7a0b\u5e8f HTTP \u534f\u8bae\u5b9a\u4e49\u4e86\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u4ea4\u4e92\u7684\u5185\u5bb9\u548c\u6b65\u9aa4\uff0c\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u53d1\u9001\u7684\u8bf7\u6c42\u6d88\u606f\u4e2d\u5305\u62ec\u4e86 \"\u5bf9\u4ec0\u4e48\" \u548c \"\u8fdb\u884c\u600e\u6837\u7684\u64cd\u4f5c\" \"\u5bf9\u4ec0\u4e48\" \u5c31\u662f URI\uff0c\u4e00\u822c\u662f\u5b58\u653e\u7f51\u9875\u6570\u636e\u7684\u6587\u4ef6\u540d\u6216\u8005 CGI \u7a0b\u5e8f \"\u8fdb\u884c\u600e\u6837\u7684\u64cd\u4f5c\" \u79f0\u4e3a\u65b9\u6cd5\uff0c\u4e5f\u53eb HTTP \u8c13\u8bcd/\u52a8\u8bcd\uff0c\u5177\u4f53\u8868\u89c1 P12 \u65b9\u6cd5 \u542b\u4e49 GET \u83b7\u53d6 URI \u6307\u5b9a\u7684\u4fe1\u606f POST \u4ece\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u53d1\u9001\u6570\u636e\uff08\u586b\u5199\u95ee\u5377\u8c03\u67e5\uff09 ... ... \u670d\u52a1\u5668\u6536\u5230\u6d88\u606f\u7136\u540e\u5de5\u4f5c\u540e\u8fd4\u56de\u54cd\u5e94\u6d88\u606f\uff0c\u5f00\u5934\u5305\u542b\u4e86\u4e00\u4e2a\u72b6\u6001\u7801\uff0c\u5982 404 Not Found\uff0c\u7136\u540e\u5c31\u662f\u5934\u5b57\u6bb5\u548c\u7f51\u9875\u6570\u636e\uff0c\u5ba2\u6237\u7aef\u6536\u5230\u540e\u628a\u6570\u636e\u73b0\u5b9e\u5728\u5c4f\u5e55\u4e0a HTTP \u8bf7\u6c42\u6d88\u606f\u7684\u5185\u5bb9\uff1a \u8bf7\u6c42\u6d88\u606f\uff1a <\u65b9\u6cd5><\u7a7a\u683c><URI><\u7a7a\u683c><HTTP\u7248\u672c> <\u5b57\u6bb5\u540d>:<\u5b57\u6bb5\u503c> ... <\u7a7a\u884c> <\u6d88\u606f\u4f53> \u54cd\u5e94\u6d88\u606f\uff1a <HTTP\u7248\u672c><\u7a7a\u683c><\u72b6\u6001\u7801><\u7a7a\u683c><\u54cd\u5e94\u77ed\u8bed> <\u5b57\u6bb5\u540d>:<\u5b57\u6bb5\u503c> ... <\u7a7a\u884c> <\u6d88\u606f\u4f53> \u7b2c\u4e8c\u884c\u5f00\u59cb\u662f\u4e00\u4e9b\u6d88\u606f\u5934\uff0c\u5982\u65e5\u671f\uff0c\u5ba2\u6237\u7aef\u652f\u6301\u7684\u6570\u636e\u7c7b\u578b\uff0c\u8bed\u8a00\uff0c\u538b\u7f29\u683c\u5f0f\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u8f6f\u4ef6\u540d\u79f0\u548c\u7248\u672c.... \u6d88\u606f\u4f53\u4e2d\u5305\u542b\u8981\u53d1\u9001\u7684\u6570\u636e\uff0c\u5982\u5ba2\u6237\u7aef POST \u53d1\u9001\u7684\u8868\u5355\uff0c\u670d\u52a1\u5668\u8fd4\u56de\u7684\u6570\u636e\u6216\u8005 CGI \u8f93\u51fa\u7684\u6570\u636e \u6d88\u606f\u5934\u4e2d\u7684\u4e3b\u8981\u5934\u5b57\u6bb5\u8868\u89c1 P17 \u5934\u5b57\u6bb5\u7c7b\u578b \u542b\u4e49 ... ... HTTP \u72b6\u6001\u7801\u6982\u8981\uff1a \u72b6\u6001\u7801 \u542b\u4e49 1xx \u544a\u77e5\u8bf7\u6c42\u7684\u5904\u7406\u8fdb\u5ea6\u548c\u60c5\u51b5 2xx \u6210\u529f 3xx \u8868\u793a\u9700\u8981\u8fdb\u4e00\u6b65\u64cd\u4f5c 4xx \u5ba2\u6237\u7aef\u51fa\u9519 5xx \u670d\u52a1\u5668\u51fa\u9519 \u6d4f\u89c8\u5668\u5c06\u6570\u636e\u63d0\u53d6\u51fa\u6765\u540e\u73b0\u5b9e\u5728\u5c4f\u5e55\u4e0a\uff0c\u5982\u679c\u6709\u56fe\u7247\u7b49\u8d44\u6e90\u4f1a\u5bf9\u6240\u6709 HTML \u4e2d\u76f8\u5e94\u7684\u6807\u7b7e\u7684 URI \u8bbf\u95ee Web \u670d\u52a1\u5668\uff0c\u6bcf\u6b21\u53ea\u4f1a\u83b7\u53d6\u4e00\u4e2a\u6587\u4ef6\u3002\u5982\u679c\u4e00\u4e2a\u7f51\u9875\u6709 3 \u5f20\u56fe\uff0c\u9700\u8981\u5411 Web \u670d\u52a1\u5668\u53d1\u9001 4 \u6b21\u8bf7\u6c42 \u5728\u8fd9\u671f\u95f4 Web \u670d\u52a1\u5668\u5e76\u4e0d\u5173\u5fc3\u6d4f\u89c8\u5668\u7684\u64cd\u4f5c\uff0c\u4e5f\u4e0d\u5173\u5fc3\u8fd4\u56de\u7684\u56fe\u7247\u6216\u8005\u6587\u4ef6\u662f\u4e0d\u662f\u4e00\u4e2a\u7f51\u9875\u4e0a\u7684 1 \u6761\u8bf7\u6c42\u6d88\u606f\u53ea\u80fd\u5199 1 \u4e2a URI\uff0c\u5982\u679c\u9700\u8981\u83b7\u53d6\u591a\u4e2a\u6587\u4ef6\uff0c\u5fc5\u987b\u5bf9\u6bcf\u4e2a\u6587\u4ef6\u5355\u72ec\u53d1\u9001 1 \u6761\u8bf7\u6c42","title":"1.1 \u751f\u6210HTTP\u8bf7\u6c42\u6d88\u606f"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#12-dns-web-ip","text":"\u6d4f\u89c8\u5668\u4e0d\u5177\u6709\u5c06\u6d88\u606f\u9001\u5230\u7f51\u7edc\u4e2d\u7684\u80fd\u529b\uff0c\u9700\u8981\u59d4\u6258\u64cd\u4f5c\u7cfb\u7edf\uff1b\u5728\u6b64\u4e4b\u524d\u9700\u8981\u67e5\u8be2\u7f51\u5740\u4e2d\u670d\u52a1\u5668\u57df\u540d\u5bf9\u5e94\u7684 IP \u5730\u5740 TCP/IP \u7684\u7ed3\u6784\u662f\u4e00\u4e9b\u5c0f\u7684\u5b50\u7f51\uff0c\u901a\u8fc7\u8def\u7531\u5668\u8fde\u63a5\u8d77\u6765\u7ec4\u6210\u7684\u4e00\u4e2a\u5927\u7684\u7f51\u7edc\uff1b\u5b50\u7f51\u53ef\u4ee5\u7406\u89e3\u4e3a\u7528\u96c6\u7ebf\u5668\u8fde\u63a5\u8d77\u6765\u7684\u8ba1\u7b97\u673a IP \u5730\u5740\u4e0e\u5b50\u7f51\u63a9\u7801\uff1aIP \u5730\u5740\u5206\u4e3a\u7f51\u7edc\u53f7\u548c\u4e3b\u673a\u53f7 \u4e3b\u673a\u53f7\u5168\u4e3a 0 \u4ee3\u8868\u6574\u4e2a\u5b50\u7f51\uff0c\u5168\u4e3a 1 \u8868\u793a\u5bf9\u5b50\u8fdb\u884c\u5e7f\u64ad DNS\uff1aDomain Name System\uff0c\u57df\u540d\u670d\u52a1\u7cfb\u7edf \u5728\u7f51\u7edc\u4e0a\u901a\u4fe1\u4eba\u4f7f\u7528\u57df\u540d\uff0c\u8def\u7531\u5668\u4f7f\u7528 IP \u5730\u5740\uff0c\u901a\u8fc7\u57df\u540d\u67e5\u8be2 IP \u7684\u673a\u5236\u5c31\u662f DNS \u5bf9\u4e8e DNS \u670d\u52a1\u5668\uff0c\u6211\u4eec\u8ba1\u7b97\u673a\u4e0a\u6709\u5bf9\u5e94\u7684 DNS \u5ba2\u6237\u7aef\uff0c\u79f0\u4e3a DNS \u89e3\u6790\u5668\uff0c\u5b9e\u9645\u4e0a\u662f\u4e00\u6bb5\u7a0b\u5e8f\uff0c\u5305\u542b\u5728\u64cd\u4f5c\u7cfb\u7edf\u7684 Socket \u5e93\u4e2d\uff0c\u8c03\u7528\u4e00\u4e2a\u53eb gethostbyname \u7684\u7a0b\u5e8f\u7ec4\u4ef6 Socket \u5e93\u662f\u7528\u4e8e\u8c03\u7528\u7f51\u7edc\u529f\u80fd\u7684\u7a0b\u5e8f\u7ec4\u4ef6\u96c6\u5408\uff0c\u53ef\u4ee5\u8bf4\u662f\u7f51\u7edc\u5f00\u53d1\u4e2d\u7684\u4e00\u79cd\u6807\u51c6\u5e93 \u6839\u636e\u57df\u540d\u67e5\u8be2 IP \u5730\u5740\u65f6\uff0c\u6d4f\u89c8\u5668\u56de\u4f7f\u7528 Socket \u5e93\u4e2d\u7684\u89e3\u6790\u5668 \u534f\u8bae\u6808\uff1a\u64cd\u4f5c\u7cfb\u7edf\u5185\u90e8\u7684\u7f51\u7edc\u63a7\u5236\u8f6f\u4ef6\uff0c\u4e5f\u53eb \"\u534f\u8bae\u9a71\u52a8\" \"TCP/IP \u9a71\u52a8\" \u89e3\u6790\u5668\u53d1\u9001\u6d88\u606f\u7684\u64cd\u4f5c\u540c\u6837\u8981\u59d4\u6258\u7ed9\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684\u534f\u8bae\u6808\u8fdb\u884c\uff0c\u5411 DNS \u670d\u52a1\u5668\u53d1\u9001\u6d88\u606f\u65f6\u4e5f\u9700\u8981\u77e5\u9053 DNS \u670d\u52a1\u5668\u7684 IP \u5730\u5740\uff0c\u8fd9\u4e2a\u65f6\u4e8b\u5148\u8bbe\u7f6e\u597d\u7684","title":"1.2 \u5411DNS \u670d\u52a1\u5668\u67e5\u8be2 Web \u670d\u52a1\u5668\u7684 IP \u5730\u5740"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#13-dns","text":"DNS \u670d\u52a1\u5668\u7684\u57fa\u672c\u5de5\u4f5c\u5c31\u662f\u63a5\u53d7\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u67e5\u8be2\u6d88\u606f\uff0c\u7136\u540e\u6839\u636e\u6d88\u606f\u7684\u5185\u5bb9\u8fd4\u56de\u54cd\u5e94\uff0c\u67e5\u8be2\u6d88\u606f\u5305\u542b\u4ee5\u4e0b 3 \u79cd\u4fe1\u606f\uff1a \u57df\u540d Class\uff1a\u73b0\u5728\u6c38\u8fdc\u662f\u4ee3\u8868\u4e92\u8054\u7f51\u7684 IN \u8bb0\u5f55\u7c7b\u578b\uff1aA\uff08Address\uff09 \u8868\u793a\u57df\u540d\u5bf9\u5e94\u7684\u662f IP \u5730\u5740\uff1bMX\uff08Mail eXchange\uff09 \u8868\u793a\u57df\u540d\u5bf9\u5e94\u7684\u662f\u90ae\u4ef6\u670d\u52a1\u5668\uff1bPTR\uff1a\u6839\u636e IP \u53cd\u67e5\u57df\u540d\uff1bCNAME\uff1bNS\uff1bSOA\uff1b DNS \u670d\u52a1\u5668\u4f1a\u4ece\u57df\u540d\u4e0e IP \u5730\u5740\u7684\u5bf9\u7167\u8868\u4e2d\u67e5\u627e\u5bf9\u5e94\u7684\u8bb0\u5f55\uff0c\u5e76\u8fd4\u56de IP \u5730\u5740 \u4fe1\u606f\u662f\u4fdd\u5b58\u518d\u591a\u53f0 DNS \u670d\u52a1\u5668\u4e2d\u7684 \u57df\u540d\u8d8a\u9760\u53f3\u7684\u4f4d\u7f6e\u8868\u793a\u5176\u5c42\u7ea7\u8d8a\u9ad8\uff0c\u76f8\u5f53\u4e8e\u4e00\u4e2a\u5c42\u7ea7\u7684\u90e8\u5206\u79f0\u4e3a\u57df\uff0c\u4e00\u4e2a\u57df\u7684\u4fe1\u606f\u4f1a\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u5b58\u653e\u5728 DNS \u670d\u52a1\u5668\u4e2d\uff0c\u4e00\u53f0 DNS \u670d\u52a1\u5668\u53ef\u4ee5\u5b58\u653e\u591a\u4e2a\u57df\u7684\u4fe1\u606f\uff0c\u4f46\u662f\u4e0d\u80fd\u5c06\u4e00\u4e2a\u57df\u62c6\u5f00\u6765\u5b58\u653e\u5728\u591a\u53f0 DNS \u670d\u52a1\u5668\u4e2d\uff1b\u4e0a\u7ea7\u57df\u53ef\u4ee5\u5206\u914d\u591a\u4e2a\u4e0b\u7ea7\u57df\u6765\u7ba1\u7406 \u8981\u5bfb\u627e\u5230\u5bf9\u5e94\u7684 DNS \u670d\u52a1\u5668\uff0c\u9996\u5148\u8d1f\u8d23\u7ba1\u7406\u4e0b\u7ea7\u57df\u7684 DNS \u670d\u52a1\u5668\u7684 IP \u5730\u5740\u6ce8\u518c\u5230\u4e0a\u7ea7 DNS \u670d\u52a1\u5668\u4e2d\uff0c\u518d\u6ce8\u518c\u5230\u66f4\u4e0a\u7ea7... com\uff0cjp \u8fd9\u79cd\u57df\u5e76\u4e0d\u662f\u6700\u9ad8\u7ea7\u7684\u57df\uff0c\u8fd8\u6709\u4e00\u4e2a\u6839\u57df\u6765\u8d1f\u8d23\u8fd9\u4e9b\u57df\u7684\u4fe1\u606f\uff1b\u7136\u540e\u518d\u5c06\u6839\u57df\u7684\u4fe1\u606f\u4fdd\u5b58\u5728\u6240\u6709\u7684 DNS \u670d\u52a1\u5668\u4e0a\uff1b\u4e8e\u662f\u5ba2\u6237\u7aef\u53ea\u8981\u80fd\u627e\u5230\u4efb\u610f\u4e00\u53f0 DNS \u670d\u52a1\u5668\u5c31\u884c \u52a0\u5feb DNS \u670d\u52a1\u5668\u7684\u54cd\u5e94\u901f\u5ea6\uff1a \u4e0a\u7ea7\u57df\u548c\u4e0b\u7ea7\u57df\u4e2d\u5171\u4eab DNS \u670d\u52a1\u5668\u65f6 DNS \u670d\u52a1\u5668\u4e2d\u6709\u7f13\u5b58\u4fe1\u606f\uff0c\u5e76\u4e0d\u662f\u6bcf\u6b21\u90fd\u662f\u4ece\u6839\u57df\u5f00\u59cb\u67e5\u8d77\uff0c\u5982\u679c\u7f13\u5b58\u6709\u5c31\u4ece\u7f13\u5b58\u4e2d\u5b58\u50a8\u7684\u4f4d\u7f6e\u5f00\u59cb\u67e5\u8d77\uff1b\u4fe1\u606f\u88ab\u7f13\u5b58\u540e\uff0c\u539f\u672c\u6ce8\u518c\u7684\u4fe1\u606f\u53ef\u80fd\u4f1a\u88ab\u6539\u53d8\uff0c\u6240\u4ee5\u7f13\u5b58\u7684\u4fe1\u606f\u53ef\u80fd\u662f\u9519\u7684\uff0c\u6240\u4ee5\u7f13\u5b58\u4f1a\u8bbe\u7f6e\u6709\u6548\u671f\u5b9a\u671f\u5220\u9664\uff1b\u8fd4\u56de\u54cd\u5e94\u4fe1\u606f\u662f\u4e5f\u4f1a\u544a\u77e5\u5ba2\u6237\u7aef\u8fd9\u4e00\u54cd\u5e94\u662f\u6765\u81ea\u7f13\u5b58\u8fd8\u662f\u8d1f\u8d23\u7ba1\u7406\u8be5\u57df\u540d\u7684 DNS \u670d\u52a1\u5668 \u57df\u540d\u4e0d\u5b58\u5728\u65f6\u4e5f\u4f1a\u88ab\u54cd\u5e94","title":"1.3 \u5168\u4e16\u754c DNS \u670d\u52a1\u5668\u7684\u5927\u63a5\u529b"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#14","text":"\u5f97\u5230\u4e86 IP \u5730\u5740\u540e\uff0c\u59d4\u6258\u64cd\u4f5c\u7cfb\u7edf\u5185\u90e8\u7684\u534f\u8bae\u6808\u5411\u8fd9\u4e2a IP\u5730\u5740\u53d1\u9001\u6d88\u606f \u5411\u64cd\u4f5c\u7cfb\u7edf\u5185\u90e8\u7684\u534f\u8bae\u6808\u53d1\u9001\u59d4\u6258\u65f6\uff0c\u9700\u8981\u6309\u7167\u6307\u5b9a\u7684\u987a\u5e8f\u6765\u8c03\u7528 Socket \u5e93\u4e2d\u7684\u7a0b\u5e8f\u7ec4\u4ef6 \u6536\u53d1\u6570\u636e\u7684\u4e24\u53f0\u8ba1\u7b97\u673a\u4e4b\u95f4\u8fde\u63a5\u4e00\u6761\u6570\u636e\u901a\u9053\uff0c\u6570\u636e\u6cbf\u7740\u8fd9\u6761\u901a\u9053\u6d41\u52a8\uff1b\u901a\u9053\u9700\u8981\u4e8b\u5148\u5efa\u7acb\u597d\uff0c\u5efa\u7acb\u901a\u9053\u7684\u5173\u952e\u662f\u7ba1\u9053\u4e24\u7aef\u7684\u51fa\u5165\u53e3\uff0c\u4e5f\u53eb\u505a\u5957\u63a5\u5b57\uff1b\u5148\u521b\u5efa\u5957\u63a5\u5b57\uff0c\u7136\u540e\u8fde\u63a5\u8d77\u6765\uff1b \u9996\u5148\u670d\u52a1\u5668\u4e00\u65b9\u521b\u5efa\u597d\u5957\u63a5\u5b57\uff0c\u7136\u540e\u7b49\u5f85\u5ba2\u6237\u7aef\u5411\u8be5\u5957\u63a5\u5b57\u8fde\u63a5\u7ba1\u9053\uff08\u670d\u52a1\u5668\u4e00\u822c\u4f1a\u5728\u542f\u52a8\u540e\u5c31\u521b\u5efa\u597d\u5957\u63a5\u5b57\u5e76\u7b49\u5f85\u8fde\u63a5\uff09\uff1b\u5ba2\u6237\u7aef\u8981\u8fde\u63a5\u65f6\u4e5f\u4f1a\u5148\u521b\u5efa\u5957\u63a5\u5b57\u7136\u540e\u8fde\u63a5\u5230\u670d\u52a1\u5668\u7684\u5957\u63a5\u5b57\uff1b\u8fde\u63a5\u8d77\u6765\u540e\u901a\u4fe1\u51c6\u5907\u5c31\u5b8c\u6210\u4e86 \u6570\u636e\u53d1\u9001\u5b8c\u6bd5\u540e\u7ba1\u9053\u4f1a\u65ad\u5f00\uff1b\u7ba1\u9053\u5728\u8fde\u63a5\u65f6\u662f\u7531\u5ba2\u6237\u7aef\u53d1\u8d77\uff0c\u4f46\u65ad\u5f00\u65f6 2 \u65b9\u90fd\u53ef\u4ee5\uff0c\u4e00\u65b9\u65ad\u5f00\u540e\u53e6\u4e00\u65b9\u4e5f\u4f1a\u65ad\u5f00\uff0c\u5957\u63a5\u5b57\u4e5f\u4f1a\u5220\u9664 \u6536\u53d1\u6570\u636e\u5927\u81f4\u603b\u7ed3\u4e3a 4 \u4e2a\u9636\u6bb5\uff1a \u521b\u5efa\u5957\u63a5\u5b57\uff08 \u5c06\u7ba1\u9053\u8fde\u63a5\u5230\u670d\u52a1\u5668\u7684\u5957\u63a5\u5b57\u4e0a \u6536\u53d1\u6570\u636e \u65ad\u5f00\u7ba1\u9053\u5e76\u5220\u9664\u5957\u63a5\u5b57 \u8fde\u63a5\u7ba1\u9053\u548c\u653e\u5165\u6570\u636e\u90fd\u662f\u6d4f\u89c8\u5668\u7b49\u59d4\u6258\u534f\u8bae\u6808\u6765\u4ee3\u52b3\uff0c\u8fd9\u4e9b\u59d4\u6258\u90fd\u662f\u8c03\u7528 Socket \u5e93\u6765\u6267\u884c\uff1b \u4ee5\u4e0b\u5185\u5bb9\u7b2c 2 \u7ae0\u4f1a\u8be6\u7ec6\u8bf4\u660e \u521b\u5efa\u5957\u63a5\u5b57\u9636\u6bb5 \uff1a \u8bbf\u95ee DNS \u670d\u52a1\u5668\u65f6\u662f\u8c03\u7528 Socket \u5e93\u4e2d\u7684 gethostbyname\uff0c\u521b\u5efa\u5957\u63a5\u5b57\u65f6\u662f\u8c03\u7528 socket\uff08\u5c0f\u5199\uff09 \u7ec4\u4ef6\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u63cf\u8ff0\u7b26\uff08\u7528\u6765\u8bc6\u522b\u4e0d\u540c\u7684\u5957\u63a5\u5b57\uff09\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d \u5e94\u7528\u7a0b\u5e8f\u65f6\u901a\u8fc7 \"\u63cf\u8ff0\u7b26\" \u8fd9\u4e00\u7c7b\u4f3c\u53f7\u7801\u724c\u7684\u4e1c\u897f\u6765\u8bc6\u522b\u5957\u63a5\u5b57\u7684 \u8fde\u63a5\u9636\u6bb5\uff1a\u628a\u7ba1\u9053\u63a5\u4e0a\u53bb \uff1a \u63a5\u4e0b\u6765\u59d4\u6258\u534f\u8bae\u6808\u5c06\u521b\u5efa\u7684\u5957\u63a5\u5b57\u548c\u670d\u52a1\u5668\u7684\u5957\u63a5\u5b57\u8fde\u63a5\u8d77\u6765\uff0c\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u8c03\u7528 Socket \u5e93\u4e2d\u7684 connect \u7a0b\u5e8f\uff0c\u8c03\u7528\u65f6\u9700\u8981\u6307\u5b9a 2 \u4e2a\u53c2\u6570\uff1a \u63cf\u8ff0\u7b26 \u670d\u52a1\u5668 IP \u5730\u5740 \u7aef\u53e3\u53f7\uff1aIP \u5730\u5740 + \u7aef\u53e3\u53f7 \u53ef\u4ee5\u8bc6\u522b\u51fa\u67d0\u53f0\u5177\u4f53\u8ba1\u7b97\u673a\u4e0a\u7684\u67d0\u4e2a\u5957\u63a5\u5b57\uff08\u63cf\u8ff0\u7b26\u662f\u548c\u59d4\u6258\u521b\u5efa\u5957\u63a5\u5b57\u7684\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u4ea4\u4e92\u65f6\u4f7f\u7528\u7684\uff0c\u6240\u4ee5\u53e6\u4e00\u65b9\u4e0d\u77e5\u9053\u8fd9\u4e2a\u63cf\u8ff0\u7b26\uff0c\u5373\u63cf\u8ff0\u7b26\u7528\u4e8e\u8ba1\u7b97\u673a\u5185\u90e8\uff0c\u7aef\u53e3\u53f7\u7528\u6765\u8ba9\u901a\u4fe1\u7684\u53e6\u4e00\u65b9\u80fd\u591f\u8bc6\u522b\u51fa\u5957\u63a5\u5b57\uff09\uff0c\u7aef\u53e3\u53f7\u662f\u4e8b\u5148\u89c4\u5b9a\u597d\u7684\uff0c\u6bd4\u5982 Web \u662f 80 \u7aef\u53e3\u53f7\uff0c\u7535\u5b50\u90ae\u4ef6\u662f 25 \u7aef\u53e3\u53f7\uff1b\u5ba2\u6237\u7aef\u5728\u521b\u5efa\u5957\u63a5\u5b57\u65f6\u4f1a\u5206\u914d\u7aef\u53e3\u53f7\uff0c\u7136\u540e\u5728\u6267\u884c\u8fde\u63a5\u64cd\u4f5c\u65f6\u544a\u77e5\u670d\u52a1\u5668 \u901a\u4fe1\u9636\u6bb5\uff1a\u4f20\u9012\u6d88\u606f \uff1a \u5957\u63a5\u5b57\u8fde\u63a5\u540e\u901a\u8fc7 Socket \u4e2d\u7684 write \u7ec4\u4ef6\u5c06\u6570\u636e\u9001\u5165\u5957\u63a5\u5b57 \u63a5\u53d7\u6d88\u606f\u901a\u8fc7 Socket \u4e2d\u7684 read \u7ec4\u4ef6\u6765\u5b8c\u6210\uff0c\u5c06\u6536\u5230\u7684\u54cd\u5e94\u6d88\u606f\u653e\u5165\u5230\u63a5\u6536\u7f13\u51b2\u533a \u65ad\u5f00\u9636\u6bb5\uff1a\u6536\u53d1\u6570\u636e\u7ed3\u675f \uff1a \u6536\u53d1\u6570\u636e\u7ed3\u675f\u540e\u8c03\u7528 Socket \u7684 close \u7ec4\u4ef6\u65ad\u5f00\u7ba1\u9053\u5e76\u5220\u9664\u5957\u63a5\u5b57\uff1b\u6bcf\u83b7\u53d6\u4e00\u6b21\u6570\u636e\u90fd\u9700\u8981\u6267\u884c\u4e00\u6b21\u8fde\u63a5\uff0c\u53d1\u9001\u8bf7\u6c42\uff0c\u63a5\u6536\u54cd\u5e94\u6d88\u606f\uff0c\u65ad\u5f00\u7684\u8fc7\u7a0b\uff1bHTTP1.1 \u4e2d\u53ef\u4ee5\u5728\u6240\u6709\u6570\u636e\u8bf7\u6c42\u5b8c\u6210\u540e\uff0c\u6d4f\u89c8\u5668\u4e3b\u52a8\u89e6\u53d1\u65ad\u5f00\u8fde\u63a5\u7684\u64cd\u4f5c","title":"1.4 \u59d4\u6258\u534f\u8bae\u6808\u53d1\u9001\u6d88\u606f"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#2-tcpip","text":"","title":"2 \u7528\u7535\u4fe1\u53f7\u4f20\u8f93 TCP/IP \u6570\u636e\uff1a\u63a2\u7d22\u534f\u8bae\u6808\u548c\u7f51\u5361"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#21","text":"\u534f\u8bae\u6808\u662f\u7f51\u7edc\u63a7\u5236\u8f6f\u4ef6\uff0c\u7f51\u5361\u662f\u7f51\u7edc\u786c\u4ef6 \u4e0a\u9762\u7684\u90e8\u5206\u4f1a\u5411\u4e0b\u7684\u90e8\u5206\u59d4\u6d3e\u5de5\u4f5c\uff1bSocket \u4e2d\u7684\u89e3\u6790\u5668\u7528\u6765\u5411 DNS \u670d\u52a1\u5668\u53d1\u51fa\u67e5\u8be2 \u6d4f\u89c8\u5668\uff0c\u90ae\u4ef6\u7b49\u4e00\u822c\u7684\u5e94\u7528\u7a0b\u5e8f\u6536\u53d1\u6570\u636e\u7528 TCP \u534f\u8bae DNS \u67e5\u8be2\u7b49\u6536\u53d1\u8f83\u77ed\u7684\u63a7\u5236\u6570\u636e\u7528 UDP \u534f\u8bae IP \u534f\u8bae\u4f1a\u5c06\u6570\u636e\u5206\u6210\u4e00\u4e2a\u4e00\u4e2a\u7684\u7f51\u7edc\u5305\u7136\u540e\u53d1\u9001\uff1b\u6b64\u5916 IP \u4e2d\u8fd8\u5305\u62ec ICMP\uff082.5\u8282\uff09 \u534f\u8bae\u548c ARP \u534f\u8bae\uff082.5\u8282\uff09 ICMP \u7528\u4ee5\u544a\u77e5\u7f51\u7edc\u5305\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u9519\u8bef\u548c\u5404\u79cd\u63a7\u5236\u4fe1\u606f\uff0cARP \u7528\u4e8e\u6839\u636e IP \u5730\u5740\u67e5\u8be2\u76f8\u5e94\u7684\u4ee5\u592a\u7f51 MAC \u5730\u5740 MAC \u5730\u5740\uff1a\u7b26\u5408 IEEE \u89c4\u683c\u7684\u5c40\u57df\u7f51\u8bbe\u5907\u90fd\u4f7f\u7528\u540c\u4e00\u89c4\u683c\u7684\u5730\u5740\uff0c\u53eb\u505a MAC \u5730\u5740 \u5957\u63a5\u5b57\u5e76\u4e0d\u5b58\u5728\u5b9e\u4f53\uff0c\u6216\u8005\u8bf4\u5957\u63a5\u5b57\u5c31\u662f\u534f\u8bae\u6808\u4e2d\u5b58\u653e\u901a\u4fe1\u5bf9\u8c61\u7684 IP \u5730\u5740\uff0c\u7aef\u53e3\u53f7\uff0c\u901a\u4fe1\u64cd\u4f5c\uff0c\u8fdb\u884c\u72b6\u6001\u7684\u4e00\u5757\u5185\u5b58\u5730\u5740\uff0c\u8fd8\u8981\u8bb0\u5f55\u662f\u5426\u5df2\u6536\u5230\u54cd\u5e94\uff0c\u4ee5\u53ca\u6570\u636e\u53d1\u9001\u540e\u7ecf\u8fc7\u4e86\u591a\u957f\u65f6\u95f4 \u534f\u8bae\u6808\u662f\u6839\u636e\u5957\u63a5\u5b57\u4e2d\u8bb0\u5f55\u7684\u63a7\u5236\u4fe1\u606f\u6765\u5de5\u4f5c\u7684 \u5728 cmd \u4e2d\u8f93\u5165 netstat \u53ef\u4ee5\u73b0\u5b9e\u5957\u63a5\u5b57\u5185\u5bb9 \u8c03\u7528 Socket \u7ec4\u4ef6\u65f6\u534f\u8bae\u6808\u7684\u5de5\u4f5c\uff1a\u521b\u5efa\u5957\u63a5\u5b57\u65f6\u5148\u5206\u914d\u4e00\u5757\u7a7a\u95f4\u5e76\u586b\u5165\u521d\u59cb\u72b6\u6001\u7684\u63a7\u5236\u4fe1\u606f\uff0c\u7136\u540e\u5c06\u63cf\u8ff0\u7b26\u544a\u77e5\u5e94\u7528\u7a0b\u5e8f","title":"2.1 \u521b\u5efa\u5957\u63a5\u5b57"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#22","text":"\u521b\u5efa\u597d\u5957\u63a5\u5b57\u540e\u6d4f\u89c8\u5668\u4f1a\u8c03\u7528 connect \u4e0e\u670d\u52a1\u5668\u5957\u63a5\u5b57\u8fdb\u884c\u8fde\u63a5\uff1b\u4ee5\u592a\u7f51\u7684\u7f51\u7ebf\u662f\u4e00\u76f4\u8fde\u63a5\u7684\u72b6\u6001\uff0c\u8fd9\u91cc\u7684\u8fde\u63a5\u6307\u901a\u4fe1\u53cc\u65b9\u4ea4\u6362\u63a7\u5236\u4fe1\u606f \u63a7\u5236\u4fe1\u606f\u5927\u4f53\u4e0a\u5206\u4e3a 2 \u7c7b\uff1a \u7b2c\u4e00\u7c7b\u662f\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u76f8\u4e92\u8054\u7edc\u65f6\u4ea4\u6362\u7684\u63a7\u5236\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u4f1a\u653e\u5728\u7f51\u7edc\u5305\u7684\u5934\u90e8\uff0cTCP \u5934\u90e8\u683c\u5f0f\u8868\u89c1 P71 \u5b57\u6bb5\u540d\u79f0 \u957f\u5ea6 \u542b\u4e49 ... ... ... \u7b2c\u4e8c\u7c7b\u662f\u4fdd\u5b58\u5728\u5957\u63a5\u5b57\u4e2d\u7528\u6765\u63a7\u5236\u534f\u8bae\u6808\u64cd\u4f5c\u7684\u4fe1\u606f \u4e0d\u540c\u8bbe\u5907\u7684\u534f\u8bae\u6808\u7684\u63a7\u5236\u4fe1\u606f\u4e0d\u540c\uff0c\u4f46\u8fd9\u4e0d\u5f71\u54cd\u901a\u4fe1\uff0c\u56e0\u4e3a\u53ea\u9700\u8981\u6839\u636e\u76f8\u540c\u7684\u89c4\u5219\u5c06\u5fc5\u8981\u7684\u4fe1\u606f\u586b\u5165\u5934\u90e8\u5373\u53ef \u8fde\u63a5\u64cd\u4f5c\u7684\u5177\u4f53\u8fc7\u7a0b\uff1a\u5e94\u7528\u7a0b\u5e8f\u8c03\u7528 Socket \u5e93\u7684 connect\uff0c\u6b64\u51fd\u6570\u7684\u53c2\u6570\u63d0\u4f9b\u4e86 IP \u5730\u5740\u548c\u7aef\u53e3\u53f7\u5e76\u4f20\u9001\u7ed9 TCP \u6a21\u5757\uff0c\u7136\u540e TCP \u6a21\u5757\u4f1a\u4e0e\u5bf9\u5e94\u670d\u52a1\u5668\u4ea4\u6362\u63a7\u5236\u4fe1\u606f \u8fd9\u4e2a\u4ea4\u4e92\u8fc7\u7a0b\u5305\u62ec\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u5ba2\u6237\u7aef\u5148\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u8868\u793a\u5f00\u59cb\u6570\u636e\u6536\u53d1\u64cd\u4f5c\u7684\u63a7\u5236\u4fe1\u606f\u7684\u5934\u90e8\uff08\u91cd\u70b9\u662f\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u7684\u7aef\u53e3\u53f7\uff09\uff0c\u8fd9\u6837\u5ba2\u6237\u7aef\u7684\u5957\u63a5\u5b57\u5c31\u627e\u5230\u4e86\u670d\u52a1\u5668\u7684\u5957\u63a5\u5b57\uff1b\u7136\u540e\u5c06\u5934\u90e8\u4e2d\u7684\u63a7\u5236\u4f4d\u7684 SYN \u6bd4\u7279\u8bbe\u7f6e\u4e3a 1\uff0c\u8868\u793a\u8fde\u63a5\uff08\u540e\u9762\u4f1a\u8bb2\uff09\uff0c\u5e76\u8bbe\u7f6e\u9002\u5f53\u7684\u5e8f\u53f7\u548c\u7a97\u53e3\u5927\u5c0f TCP\u5934\u90e8\u521b\u5efa\u597d\u540e TCP \u6a21\u5757\u5c06\u4fe1\u606f\u4f20\u9012\u7ed9 IP \u6a21\u5757\u5e76\u59d4\u6258\u5176\u53d1\u9001\uff1b\u7136\u540e\u670d\u52a1\u5668\u7684 IP \u6a21\u5757\u6536\u5230\u540e\u4f1a\u5c06\u6570\u636e\u4f20\u9012\u7ed9 TCP \u6a21\u5757\uff0cTCP \u6a21\u5757\u6839\u636e\u5934\u90e8\u4fe1\u606f\u627e\u5230\u7aef\u53e3\u53f7\u5bf9\u5e94\u7684\u5957\u63a5\u5b57\uff0c\u4e5f\u5c31\u662f\u4ece\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\u7684\u5957\u63a5\u5b57\u4e2d\u627e\u5230\u4e0e TCP \u5934\u90e8\u7684\u4e2d\u8bb0\u5f55\u7684\u7aef\u53e3\u53f7\u76f8\u540c\u7684\u5957\u63a5\u5b57\uff1b\u7136\u540e\u5728\u5957\u63a5\u5b57\u4e2d\u5199\u5165\u76f8\u5e94\u7684\u4fe1\u606f\u5e76\u5c06\u72b6\u6001\u6539\u4e3a\u6b63\u5728\u8fde\u63a5\uff1b\u7136\u540e\u8fd4\u56de\u54cd\u5e94\uff0c\u4e0e\u5ba2\u6237\u7aef\u53d1\u9001\u65f6\u4e00\u81f4\uff08\u5982\u679c\u4e0d\u63a5\u53d7\u8fde\u63a5 SYN \u8bbe\u4e3a 0\uff09\uff0c\u53ea\u662f TCP \u5934\u90e8\u4e2d\u8fd8\u9700\u8981\u5c06 ACK \u63a7\u5236\u4f4d\u8bbe\u4e3a 1\uff0c\u8868\u793a\u63a5\u6536\u5230\u4e86\u7f51\u7edc\u5305\uff1b\u7136\u540e TCP \u6a21\u5757\u59d4\u6258 IP \u6a21\u5757\u5411\u5ba2\u6237\u7aef\u8fd4\u56de\u54cd\u5e94 \u7f51\u7edc\u5305\u8fd4\u56de\u5ba2\u6237\u7aef\u540e\uff0c\u901a\u8fc7 IP \u6a21\u5757\u5230\u8fbe TCP \u6a21\u5757\uff0c\u5982\u679c SYN \u662f 1 \u8868\u793a\u8fde\u63a5\u6210\u529f\uff0c\u8fd9\u65f6\u4f1a\u5411\u5957\u63a5\u5b57\u4e2d\u5199\u5165\u670d\u52a1\u5668\u7684 IP \u5730\u5740\uff0c\u7aef\u53e3\u53f7\u7b49\u4fe1\u606f\uff0c\u5e76\u5c06\u72b6\u6001\u6539\u4e3a\u8fde\u63a5\u6210\u529f\uff1b\u6700\u540e\u8fd4\u56de\u4e00\u4e2a ACK \u4e3a 1 \u7684\u7f51\u7edc\u5305 \u4ee5\u4e0a\u534f\u8bae\u6808\u7684\u8fde\u63a5\u64cd\u4f5c\u5c31\u5b8c\u6210\u4e86\uff0c\u63a7\u5236\u6d41\u7a0b\u8fd4\u56de\u5230\u5e94\u7528\u7a0b\u5e8f","title":"2.2 \u8fde\u63a5\u670d\u52a1\u5668"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#23","text":"\u5c06 HTTP \u8bf7\u6c42\u4ea4\u7ed9\u534f\u8bae\u6808 \uff1a \u6536\u53d1\u6570\u636e\u4ece\u5e94\u7528\u7a0b\u5e8f\u8c03\u7528 write \u5f00\u59cb MTU\uff1aMaximum Transmission Unit\uff0c\u6700\u5927\u4f20\u8f93\u5355\u5143 MSS\uff1aMaximum Segment Size\uff0c\u6700\u5927\u5206\u6bb5\u5927\u5c0f\uff0cMTU \u51cf\u53bb TCP \u5934\u90e8\u548c IP \u5934\u90e8 SFD\uff1aStart Frame Delimiter\uff0c\u8d77\u59cb\u5e27\u5206\u754c\u7b26\uff0c\u7f51\u7edc\u5305\u5934\u90e8 FCS\uff1aFrame Check Sequence\uff0c\u5e27\u6821\u9a8c\u5e8f\u5217\uff0c\u7f51\u7edc\u5305\u7ed3\u5c3e \u534f\u8bae\u6808\u5e76\u4e0d\u662f\u6536\u53d1\u6570\u636e\u5c31\u4f1a\u76f4\u63a5\u53d1\u9001\uff0c\u800c\u662f\u4f1a\u653e\u5165\u5185\u90e8\u7684\u53d1\u9001\u7f13\u51b2\u533a\uff0c\u4e3a\u4e86\u907f\u514d\u53d1\u9001\u7684\u5927\u91cf\u7684\u5c0f\u5305\uff1b\u79ef\u7d2f\u591a\u5c11\u6570\u636e\u624d\u53d1\u9001\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u540c\uff0c\u4f1a\u6839\u636e\u4ee5\u4e0b\u8981\u7d20\u5224\u65ad\uff1a \u6bcf\u4e2a\u7f51\u7edc\u5305\u80fd\u5305\u5bb9\u7684\u6570\u636e\u957f\u5ea6\uff0c\u5373 MTU \u548c MSS \u65f6\u95f4\uff0c\u7ecf\u8fc7\u4e00\u5b9a\u65f6\u95f4\u540e\u90fd\u4f1a\u628a\u7f51\u7edc\u5305\u53d1\u9001\u51fa\u53bb \u4ee5\u4e0a 2 \u8981\u7d20\u662f\u76f8\u4e92\u77db\u76fe\u7684\uff0c\u4ec5\u9760\u534f\u8bae\u6808\u6765\u5224\u65ad\u53d1\u9001\u65f6\u673a\u4f1a\u5e26\u6765\u4e00\u4e9b\u95ee\u9898\uff0c\u6240\u4ee5\u534f\u8bae\u6808\u7ed9\u4e86\u5e94\u7528\u7a0b\u5e8f\u63a7\u5236\u53d1\u9001\u65f6\u673a\u7684\u4f59\u5730\uff1b\u6d4f\u89c8\u5668\u8fd9\u79cd\u4f1a\u8bdd\u578b\u7684\u5e94\u7528\u7a0b\u5e8f\u5728\u5411\u670d\u52a1\u5668\u53d1\u9001\u6570\u636e\u65f6\uff0c\u7b49\u5f85\u7f13\u51b2\u533a\u6ee1\u4f1a\u4ea7\u751f\u5f88\u5927\u7684\u5f71\u54cd\uff0c\u6240\u4ee5\u4e00\u822c\u90fd\u662f\u76f4\u63a5\u53d1\u9001 \u5bf9\u8f83\u5927\u6570\u636e\u8fdb\u884c\u62c6\u5206 \uff1a \u5f53\u7f13\u51b2\u533a\u7684\u6570\u636e\u8d85\u8fc7 MSS \u65f6\uff0c\u7f13\u51b2\u533a\u7684\u6570\u636e\u4f1a\u4ee5 MSS \u4e3a\u5355\u4f4d\u5212\u5206\u5e76\u653e\u8fdb\u5355\u72ec\u7684\u7f51\u7edc\u5305 \u4f7f\u7528 ACK \u53f7\u786e\u8ba4\u7f51\u7edc\u5305\u5df2\u6536\u5230 \uff1a TCP \u6a21\u5757\u5728\u62c6\u5206\u6570\u636e\u65f6\u4f1a\u7b97\u597d\u6bcf\u4e00\u5757\u6570\u636e\u76f8\u5f53\u4e8e\u4ece\u5934\u5f00\u59cb\u7684\u7b2c\u51e0\u4e2a\u5b57\u8282\u5e76\u5199\u5165 TCP \u5934\u90e8\uff0c\u6570\u636e\u957f\u5ea6\u63a5\u6536\u65b9\u53ef\u4ee5\u81ea\u5df1\u8ba1\u7b97\uff0c\u8fd9\u6837\u63a5\u53d7\u65b9\u5c31\u53ef\u4ee5\u77e5\u9053\u7f51\u7edc\u5305\u6709\u6ca1\u6709\u6f0f\uff0c\u5728\u8fd4\u56de\u54cd\u5e94\u6d88\u606f\u65f6\u4f1a\u628a\u63a5\u6536\u5230\u591a\u5c11\u5b57\u8282\u5199\u5165 ACK \u53f7\u4e2d\uff08\u8fd4\u56de ACK \u53f7\u9700\u8981\u628a\u63a7\u5236\u4f4d\u4e2d ACK \u6bd4\u7279\u8bbe\u7f6e\u4e3a 1\uff0c\u8868\u793a\u6709\u6548\uff0c\u5e76\u586b\u5165 ACK \u7684\u503c\uff09\uff1b\u5b9e\u9645\u64cd\u4f5c\u65f6\u5305\u7684\u5f00\u59cb\u5e8f\u53f7\u5e76\u4e0d\u662f\u4ece 1 \u5f00\u59cb\uff0c\u662f\u7528\u968f\u673a\u6570\u4f5c\u4e3a\u521d\u503c\u9632\u6b62\u88ab\u653b\u51fb\uff1b\u8fd9\u4e2a\u968f\u673a\u6570\u4f1a\u5728 SYN \uff08Synchronize\uff0c\u540c\u6b65\uff09\u63a7\u5236\u4f4d\u8bbe\u4e3a 1 \u7684\u65f6\u5019\u586b\u5165\u521d\u59cb\u5e8f\u53f7 \u901a\u4fe1\u65f6\u53cc\u65b9\u90fd\u4f1a\u53d1\u9001\u7f51\u7edc\u5305\uff0c\u6240\u4ee5\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u90fd\u4f1a\u6709\u5404\u81ea\u7684\u5e8f\u53f7\u521d\u59cb\u503c \u8fd9\u4e2a\u673a\u5236\u975e\u5e38\u5f3a\u5927\uff0c\u6240\u4ee5\u7f51\u5361\uff0c\u96c6\u7ebf\u5668\uff0c\u8def\u7531\u5668\u6ca1\u6709\u9519\u8bef\u8865\u507f\u673a\u5236\uff0c\u4e00\u65e6\u68c0\u67e5\u5230\u9519\u8bef\u5c31\u76f4\u63a5\u4e22\u5f03\u76f8\u5e94\u7684\u5305 \u6839\u636e\u7f51\u7edc\u5305\u5e73\u5747\u5f80\u8fd4\u65f6\u95f4\u8c03\u6574 ACK \u53f7\u7684\u7b49\u5f85\u65f6\u95f4 \uff1a \u5b9e\u9645\u4e0a\u7f51\u7edc\u7684\u9519\u8bef\u68c0\u6d4b\u548c\u8865\u507f\u673a\u5236\u5341\u5206\u590d\u6742\uff0c\u5bf9\u4e8e ACK \u53f7\u7684\u8fd4\u56de\u7b49\u5f85\u65f6\u95f4\uff08\u8d85\u65f6\u65f6\u95f4\uff09\u4f1a\u6839\u636e\u5b9e\u9645\u8fd4\u56de\u7684\u65f6\u95f4\u52a8\u6001\u8c03\u6574 \u4f7f\u7528\u7a97\u53e3\u6709\u6548\u7ba1\u7406 ACK \u53f7 \uff1a \u53d1\u9001\u4e00\u4e2a\u5305\u540e\u7b49\u5f85 ACK \u53f7\u7684\u8fd4\u56de\u4f1a\u6d6a\u8d39\u65f6\u95f4\uff0c\u6240\u4ee5 TCP \u91c7\u7528\u6ed1\u52a8\u7a97\u53e3\u7684\u65b9\u5f0f\u6765\u7ba1\u7406\u6570\u636e\u53d1\u9001\u548c ACK \u53f7\u7684\u64cd\u4f5c\uff0c\u5373\u4e0d\u7b49\u5f85 ACK \u53f7\u7684\u8fd4\u56de\uff0c\u76f4\u63a5\u53d1\u9001\u540e\u7eed\u4e00\u7cfb\u5217\u7684\u5305 \u4e3a\u4e86\u9632\u6b62\u53d1\u9001\u7684\u6570\u636e\u8fc7\u591a\uff0c\u63a5\u6536\u65b9\u7684\u8f93\u5165\u7f13\u51b2\u533a\u88c5\u4e0d\u4e0b\uff0c\u63a5\u6536\u65b9\u4f1a\u544a\u77e5\u5bf9\u65b9\u81ea\u5df1\u6700\u591a\u80fd\u63a5\u6536\u591a\u5c11\u6570\u636e\uff1b\u901a\u8fc7 TCP \u5934\u90e8\u4e2d\u7684\u7a97\u53e3\u5b57\u6bb5\u544a\u77e5\u5bf9\u65b9\uff0c\u548c ACK \u53f7 \u548c\u5e8f\u53f7\u4e00\u6837\uff0c\u6570\u53cc\u5411\u8fdb\u884c\u7684 ACK \u4e0e \u7a97\u53e3 \u7684\u5408\u5e76 \uff1a \u66f4\u65b0\u7a97\u53e3\u5927\u5c0f\u7684\u65f6\u673a\u662f\u5728\u5e94\u7528\u7a0b\u5e8f\u4ece\u63a5\u6536\u7f13\u51b2\u533a\u53d6\u51fa\u6570\u636e\u5bfc\u81f4\u63a5\u6536\u7f13\u51b2\u533a\u7684\u5bb9\u91cf\u589e\u5927\uff1bACK \u53f7\u662f\u5728\u5b8c\u6210\u63a5\u6536\u64cd\u4f5c\u65f6\u5c31\u9700\u8981\u8fd4\u56de\uff1b\u90fd\u53d1\u9001\u5355\u72ec\u7684\u5305\u4f1a\u8ba9\u7f51\u7edc\u6548\u7387\u4e0b\u964d\uff0c\u6240\u4ee5\u5728\u63a5\u6536\u65b9\u53d1\u9001 ACK \u53f7\u548c\u7a97\u53e3\u66f4\u65b0\u65f6\uff0c\u4f1a\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\uff1b\u5982\u679c\u8981\u8fde\u7eed\u53d1\u9001 ACK \u53f7\u6216\u8005\u8fde\u7eed\u66f4\u65b0\u7a97\u53e3\u65f6\uff0c\u53ea\u9700\u8981\u53d1\u9001\u6700\u540e\u7684\u4e00\u6b21 \u63a5\u6536 HTTP \u54cd\u5e94\u6d88\u606f \uff1a \u6d4f\u89c8\u5668\u5728\u59d4\u6258\u534f\u8bae\u6808\u53d1\u9001\u8bf7\u6c42\u6d88\u606f\u540e\uff0c\u4f1a\u8c03\u7528 read \u7a0b\u5e8f\u6765\u83b7\u53d6\u54cd\u5e94\u6d88\u606f\u3002\u63a7\u5236\u6d41\u7a0b\u4f1a\u8f6c\u79fb\u5230\u534f\u8bae\u6808\uff0c\u5982\u679c\u54cd\u5e94\u6d88\u606f\u8fd8\u6ca1\u6709\u8fd4\u56de\uff0c\u534f\u8bae\u6808\u4f1a\u5c06\u5e94\u7528\u7a0b\u5e8f\u7684\u59d4\u6258\u6302\u673a \u534f\u8bae\u6808\u63a5\u6536\u6570\u636e\u65f6\u4f1a\u68c0\u67e5\u6536\u5230\u7684\u6570\u636e\u5757\u548c TCP \u5934\u90e8\u7684\u5185\u5bb9\uff0c\u5224\u65ad\u662f\u5426\u6709\u6570\u636e\u4e22\u5931\uff0c\u6ca1\u6709\u95ee\u9898\u5c31\u8fd4\u56de ACK \u53f7\uff0c\u5e76\u5c06\u6570\u636e\u5757\u6309\u7167\u987a\u5e8f\u8fde\u63a5\u8d77\u6765\u8fd8\u539f\u539f\u59cb\u7684\u6570\u636e\uff0c\u7136\u540e\u4ea4\u7ed9\u5e94\u7528\u7a0b\u5e8f\uff08\u5c06\u63a5\u6536\u7684\u6570\u636e\u590d\u5236\u5230\u5e94\u7528\u7a0b\u5e8f\u6307\u5b9a\u7684\u5185\u5b58\u5730\u5740\uff09\uff1b\u7136\u540e\u8fd8\u9700\u8981\u627e\u5230\u5408\u9002\u7684\u65f6\u673a\u8fd4\u56de\u7a97\u53e3\u66f4\u65b0","title":"2.3 \u6536\u53d1\u6570\u636e"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#24","text":"HTTP1.0 \u4e2d Web \u670d\u52a1\u5668\u8fd4\u56de\u54cd\u5e94\u6d88\u606f\u540e\u4f1a\u53d1\u8d77\u65ad\u5f00\u8fc7\u7a0b\uff08HTTP1.1\u4e2d\u5ba2\u6237\u7aef\u53ef\u4ee5\u7ee7\u7eed\u53d1\u8d77\u4e0b\u4e00\u4e2a\u8bf7\u6c42\uff0c\u4e00\u4e9b\u7279\u6b8a\u8bf7\u6b3e\u5ba2\u6237\u7aef\u53d1\u9001\u5b8c\u6570\u636e\u5c31\u7ed3\u675f\u4e86\uff0c\u90a3\u5ba2\u6237\u7aef\u4f1a\u5148\u53d1\u8d77\u65ad\u5f00\u8fc7\u7a0b\uff09\uff0c\u534f\u8bae\u6808\u5728\u8bbe\u8ba1\u4e0a\u5141\u8bb8\u4efb\u4f55\u4e00\u65b9\u53d1\u8d77\u65ad\u5f00\u8fc7\u7a0b \u4ee5\u670d\u52a1\u5668\u4e00\u65b9\u53d1\u8d77\u65ad\u5f00\u8fc7\u7a0b\u4e3a\u4f8b\uff0c\u670d\u52a1\u5668\u4e00\u65b9\u7684\u5e94\u7528\u7a0b\u5e8f\u4f1a\u8c03\u7528 Socket \u5e93\u7684 close \u7a0b\u5e8f\uff1b\u7136\u540e\u670d\u52a1\u5668\u7684\u534f\u8bae\u6808\u4f1a\u751f\u6210\u63a7\u5236\u4f4d\u4e2d FIN \u6bd4\u7279\u8bbe\u4e3a 1 \u7684 TCP \u5934\u90e8\uff0c\u8868\u793a\u65ad\u5f00\uff0c\u7136\u540e\u59d4\u6258 IP \u6a21\u5757\u53d1\u9001\uff0c\u540c\u65f6\u670d\u52a1\u5668\u7684\u5957\u63a5\u5b57\u4f1a\u8bb0\u5f55\u65ad\u5f00\u64cd\u4f5c\uff1b\u5ba2\u6237\u7aef\u6536\u5230\u540e\u4f1a\u5c06\u81ea\u5df1\u7684\u5957\u63a5\u5b57\u8fdb\u5165\u65ad\u5f00\u72b6\u6001\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a ACK \u53f7\uff0c\u5e76\u7b49\u5f85\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u53d6\u6570\u636e\uff1b\u5e94\u7528\u7a0b\u5e8f\u8c03\u7528 read \u540e\u534f\u8bae\u6808\u4e0d\u4f1a\u5411\u5e94\u7528\u7a0b\u5e8f\u4f20\u9012\u6570\u636e\uff0c\u800c\u662f\u544a\u77e5\u5b83\u6570\u636e\u5168\u90e8\u6536\u5230\u4e86\uff1b\u8fd9\u65f6\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u4f1a\u8c03\u7528 close \u6765\u7ed3\u675f\u6536\u53d1\u64cd\u4f5c\uff0c\u5ba2\u6237\u7aef\u534f\u8bae\u6808\u4e5f\u4f1a\u53d1\u9001\u4e00\u4e2a FIN \u4e3a 1 \u7684 TCP \u5305\uff0c\u5f85\u670d\u52a1\u5668\u8fd4\u56de ACK \u53f7\u540e\u901a\u4fe1\u5c31\u7ed3\u675f\u4e86 \u901a\u4fe1\u7ed3\u675f\u540e\u4f1a\u5220\u9664\u5957\u63a5\u5b57\uff0c\u4e0d\u8fc7\u4e0d\u662f\u9a6c\u4e0a\u5220\u9664\uff0c\u4f1a\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\u9632\u6b62\u8bef\u64cd\u4f5c","title":"2.4 \u4ece\u670d\u52a1\u5668\u65ad\u5f00\u5f00\u5173\u5e76\u5220\u9664\u5957\u63a5\u5b57"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#25-ip","text":"\u5305\u7684\u57fa\u672c\u77e5\u8bc6 \uff1a \u4e00\u4e2a\u8bbe\u5907\u65e2\u53ef\u4ee5\u4f5c\u4e3a\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\uff0c\u6240\u4ee5\u7edf\u79f0\u4e3a\u7ec8\u7aef\u8282\u70b9\uff0c\u8f6c\u53d1\u8bbe\u5907\u88ab\u79f0\u4e3a\u8f6c\u53d1\u8282\u70b9\u6216\u8005\u4e2d\u95f4\u8282\u70b9 \u96c6\u7ebf\u5668\u662f\u6309\u7167\u4ee5\u592a\u7f51\u89c4\u5219\u4f20\u8f93\u5305\u7684\u8bbe\u5907\uff0c\u800c\u8def\u7531\u5668\u662f\u6309\u7167 IP \u89c4\u5219\u4f20\u8f93\u5305\u7684\u8bbe\u5907 TCP/IP \u5934\u90e8\u5305\u542b MAC \u5934\u90e8\u548c IP \u5934\u90e8\uff1b\u5728\u5305\u4f20\u8f93\u7684\u8fc7\u7a0b\u4e2d\uff0c\u7ecf\u8fc7\u96c6\u7ebf\u5668\u65f6\uff0c\u96c6\u7ebf\u5668\u5185\u6709\u4e00\u5f20\u7528\u4e8e\u4ee5\u592a\u7f51\u534f\u8bae\u7684\u8868\uff0c\u4f1a\u6839\u636e MAC \u5934\u90e8\u786e\u5b9a\u4f20\u8f93\u65b9\u5411\uff1b\u7ecf\u8fc7\u8def\u7531\u5668\u65f6\uff0c\u8def\u7531\u5668\u5185\u6709\u4e00\u5f20 IP \u534f\u8bae\u7684\u8868\uff0c\u4f1a\u6839\u636e IP \u5934\u90e8\u786e\u5b9a\u4e0b\u4e00\u4e2a\u8def\u7531\u5668\u7684\u5730\u5740\u5e76\u5c06\u5176 MAC \u5730\u5740\u5199\u5165 MAC \u5934\u90e8\uff08\u96c6\u7ebf\u5668\u53ea\u662f\u8f6c\u53d1\u8bbe\u5907\uff0c\u65e0 MAC \u5730\u5740\uff0c\u800c\u8def\u7531\u5668\u6709 MAC \u5730\u5740\uff0c\u53ef\u4ee5\u4f5c\u4e3a MAC \u5730\u5740\u7684\u63a5\u6536\u65b9\uff09 \u4ee5\u592a\u7f51\u4e5f\u53ef\u4ee5\u53d8\u6210\u5176\u4ed6\uff0c\u6bd4\u5982\u65e0\u7ebf\u5c40\u57df\u7f51\uff0cADSL\uff0cFTTH\u7b49\u90fd\u53ef\u4ee5\u4ee3\u66ff\u4ee5\u592a\u7f51\u534f\u52a9 IP \u534f\u8bae\u4f20\u8f93\u7f51\u7edc\u5305 \u5305\u624b\u6cd5\u64cd\u4f5c\u6982\u89c8 \uff1a TCP \u6a21\u5757\u5728\u6536\u5230\u6570\u636e\u52a0\u4e0a TCP \u5934\u90e8\u4f20\u7ed9 IP \u6a21\u5757\uff0cIP \u6a21\u5757\u518d\u52a0\u4e0a IP \u5934\u90e8\u548c MAC \u5934\u90e8\uff1bIP \u5934\u90e8\u662f\u5c06\u5305\u53d1\u5f80\u76ee\u7684\u5730\u6240\u9700\u7684\u63a7\u5236\u4fe1\u606f\uff0cMAC \u5934\u90e8\u662f\u5c06\u5305\u901a\u8fc7\u4ee5\u592a\u7f51\u4f20\u7ed9\u6700\u8fd1\u7684\u8def\u7531\u5668\u9700\u8981\u7684\u63a7\u5236\u4fe1\u606f IP \u6a21\u5757\u7684\u804c\u8d23\u5c31\u662f\u5c06\u59d4\u6258\u7684\u4e1c\u897f\u6253\u5305\u9001\u5230\u5bf9\u65b9\u624b\u4e2d\uff0c\u6216\u8005\u5c06\u5bf9\u65b9\u9001\u6765\u7684\u5305\u63a5\u6536 \u65e0\u8bba\u8981\u6536\u53d1\u7684\u5305\u662f\u63a7\u5236\u5305\u8fd8\u662f\u6570\u636e\u5305\uff0cIP \u5bf9\u5404\u79cd\u7c7b\u578b\u7684\u5305\u7684\u6536\u53d1\u64cd\u4f5c\u90fd\u662f\u76f8\u540c\u7684 \u751f\u6210\u5305\u542b\u63a5\u6536\u65b9 IP \u5730\u5740\u7684 IP \u5934\u90e8 \uff1a IP \u6a21\u5757\u6536\u5230 TCP \u6a21\u5757\u7684\u59d4\u6258\u8fdb\u884c\u6536\u53d1\u5de5\u4f5c\uff0c\u5b83\u4f1a\u751f\u6210 IP \u5934\u90e8\u9644\u52a0\u5728 TCP \u5934\u90e8\u524d\uff0c\u5176\u4e2d\u6700\u91cd\u8981\u7684\u662f IP \u5730\u5740\uff0c\u8fd9\u662f TCP \u6a21\u5757\u544a\u8bc9\u7684 IP\u5934\u90e8\u683c\u5f0f\uff1aP103 \u5b57\u6bb5\u540d\u79f0 \u957f\u5ea6 bit \u542b\u4e49 \u53d1\u9001\u65b9IP 32 \u63a5\u6536\u65b9IP 32 ... ... ... \u8ba1\u7b97\u673a\u6709\u591a\u5f20\u7f51\u5361\u65f6\u9700\u8981\u5224\u65ad\u7528\u54ea\u4e00\u4e2a IP \u5730\u5740\u53d1\u9001\u5305\uff0c\u64cd\u4f5c\u548c\u8def\u7531\u5668\u4f7f\u7528 IP \u8868\u5224\u65ad\u4e0b\u4e00\u8def\u7531\u5668\u4f4d\u7f6e\u7c7b\u4f3c\uff0c\u6b64 IP \u8868\u53eb\u505a\u8def\u7531\u8868\uff0ccmd \u4e2d\u8f93\u5165 \"route print\"\uff0c\u5373\u53ef\u67e5\u770b\uff0c\u7b2c\u4e09\u7ae0\u4f1a\u5177\u4f53\u8bf4\u660e\uff0c\u5176\u4e2d Gateway\uff08\u4e0b\u4e00\u4e2a\u8def\u7531\u5668\u7684 IP \u5730\u5740\uff09 \u8868\u793a\u7f51\u5173\uff0c\u5c31\u662f\u8def\u7531\u5668\u7684\u610f\u601d\uff0c\u5982\u679c Gateway \u548c Interface\uff08\u53d1\u9001\u5305\u7684\u7f51\u7edc\u63a5\u53e3\uff09\u5730\u5740\u76f8\u540c\uff0c\u8868\u793a\u65e0\u9700\u8f6c\u53d1\u53ef\u4ee5\u76f4\u63a5\u5230\u8fbe\u63a5\u6536\u65b9\u7684 IP \u5730\u5740 \u751f\u6210\u4ee5\u592a\u7f51\u7528\u7684 MAC \u5934\u90e8 \uff1a MAC \u5934\u90e8\u5730\u5740\u7531 IP \u6a21\u5757\u751f\u6210\u653e\u5728 IP \u5934\u90e8\u524d\uff0c\u7528\u4ee5\u5728\u4ee5\u592a\u7f51\u4e2d\u4f20\u8f93 IP \u5934\u90e8\u6709\u5c42\u6b21\u5316\u7ed3\u6784\uff08\u5b50\u7f51\u63a9\u7801\uff09\uff0cMAC \u5934\u90e8\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a\u6574\u4f53\uff1b\u7f51\u5361\u7684 MAC \u5730\u5740\u662f\u5728\u751f\u4ea7\u65f6\u5c31\u5199\u5165 ROM \u4e2d\u7684 \u5b57\u6bb5\u540d\u79f0 \u957f\u5ea6 \u542b\u4e49 \u63a5\u6536\u65b9MAC\u5730\u5740 48 \u53d1\u9001\u65b9MAC\u5730\u5740 48 \u4ee5\u592a\u7c7b\u578b 16 \u53d1\u9001\u65b9 MAC \u5730\u5740\uff1a\u5982\u679c\u6709\u591a\u5f20\u7f51\u5361\uff0c\u56e0\u4e3a\u5728\u8bbe\u7f6e\u53d1\u9001\u65b9 IP \u5730\u5740\u65f6\u5df2\u7ecf\u6307\u5b9a\u4e86\u7f51\u5361\uff0c\u6240\u4ee5\u4e0d\u4f1a\u6709\u95ee\u9898 \u63a5\u6536\u65b9 MAC \u5730\u5740\uff1a\u8def\u7531\u8868\u4e2d\uff08route print\uff09\u53ea\u6709\u7f51\u5173\uff08Gateway\uff09\u7684 IP \u5730\u5740\uff0c\u6240\u4ee5\u73b0\u5728\u9700\u8981\u6839\u636e IP \u5730\u5740\u67e5\u8be2 MAC \u5730\u5740 \u901a\u8fc7 ARP \u67e5\u8be2\u76ee\u6807\u8def\u7531\u5668\u7684 MAC \u5730\u5740 \uff1a ARP\uff1aAddress Resolution Protocol\uff0c\u5730\u5740\u89e3\u6790\u534f\u8bae\uff0c\u6839\u636e IP \u5730\u5740\u67e5\u8be2 MAC \u5730\u5740 \u5728\u4ee5\u592a\u7f51\u4e2d\u901a\u8fc7\u5e7f\u64ad\u7684\u65b9\u5f0f\u8be2\u95ee\u5bf9\u5e94 IP \u5730\u5740\u7684\u8bbe\u5907\u7684 MAC \u5730\u5740\uff1b\u4e3a\u4e86\u9632\u6b62\u7f51\u7edc\u4e2d\u51fa\u73b0\u8fc7\u591a\u7684 ARP \u5305\uff0c\u4f1a\u5c06\u67e5\u8be2\u7ed3\u679c\u653e\u5728 ARP \u7f13\u5b58\u4e2d\uff0c\u5982\u679c ARP \u7f13\u5b58\u4e2d\u4e0d\u5b58\u5728\u5bf9\u65b9\u7684 MAC \u5730\u5740\u518d\u8fdb\u884c\u5e7f\u64ad\u67e5\u8be2 \u663e\u793a ARP \u7f13\u5b58\u7684\u547d\u4ee4\uff1aarp -a \u4e3a\u4e86\u9632\u6b62 IP \u5730\u5740\u53d8\u5316\u800c\u5bfc\u81f4\u7684\u9519\u8bef\uff0cARP \u7f13\u5b58\u4e2d\u7684\u5185\u5bb9\u4e00\u822c\u4f1a\u5728\u51e0\u5206\u949f\u5de6\u53f3\u5168\u90e8\u5220\u6389\uff1b\u5982\u679c IP \u5730\u5740\u521a\u53d1\u751f\u53d8\u5316\u800c\u5bfc\u81f4\u9519\u8bef\u7684\u8bdd\uff0c\u53ef\u4ee5\u67e5\u770b ARP \u7f13\u5b58\u7684\u5185\u5bb9\u5e76\u624b\u52a8\u5220\u9664 \u4ee5\u592a\u7f51\u7684\u57fa\u672c\u77e5\u8bc6 \uff1a \u4ee5\u592a\u7f51\u5728\u53d1\u9001\u6d88\u606f\u65f6\u4f1a\u8fdb\u884c\u5e7f\u64ad\uff0c\u7f51\u7edc\u4e2d\u7684\u5176\u4ed6\u6240\u6709\u8bbe\u5907\u90fd\u4f1a\u6536\u5230\u8fd9\u4e2a\u5305\uff0c\u518d\u4e0e\u8fd9\u4e2a\u6d88\u606f\u7684\u5934\u90e8\u7684 MAC \u5730\u5740\u5339\u914d\uff0c\u5339\u914d\u6b63\u786e\u7684\u4fdd\u5b58\u4e0b\u6765\uff0c\u4e0d\u6b63\u786e\u7684\u76f4\u63a5\u4e22\u5f03 \u4e2d\u7ee7\u5f0f\u96c6\u7ebf\u5668\uff1a\u7b80\u79f0\u96c6\u7ebf\u5668\uff0c\u4f1a\u5bf9\u6d88\u606f\u653e\u5927\u5e76\u5728\u7f51\u7edc\u4e2d\u8fdb\u884c\u5e7f\u64ad \u4ea4\u6362\u5f0f\u96c6\u7ebf\u5668\uff1a\u7b80\u79f0\u4ea4\u6362\u673a\uff0c\u4f1a\u6839\u636e MAC \u5730\u5740\u53d1\u9001\u7ed9\u6307\u5b9a\u8bbe\u5907 \u5c06 IP \u5305\u8f6c\u6362\u6210\u7535\u6216\u5149\u4fe1\u53f7\u53d1\u9001\u51fa\u53bb \uff1a \u6570\u5b57\u4fe1\u53f7\u8f6c\u6362\u6210\u7535\u6216\u5149\u4fe1\u53f7\u53d1\u9001\u51fa\u53bb\u7531\u7f51\u5361\u6765\u5b8c\u6210\uff0c\u7f51\u5361\u7684\u5de5\u4f5c\u9700\u8981\u9a71\u52a8\u7a0b\u5e8f\uff0c\u4e3b\u8981\u5382\u5546\u7684\u7f51\u5361\u9a71\u52a8\u7a0b\u5e8f\u4f1a\u5185\u7f6e\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff1b\u7f51\u5361\u521d\u59cb\u5316\u9664\u4e86\u9519\u8bef\u68c0\u9a8c\uff0c\u521d\u59cb\u8bbe\u7f6e\u7b49\u5916\uff0c\u8fd8\u9700\u8981\u5728\u63a7\u5236\u4ee5\u592a\u7f51\u6536\u53d1\u64cd\u4f5c\u7684 MAC \u6a21\u5757\u4e2d\u8bbe\u7f6e MAC \u5730\u5740\uff0c\u5373\u8bfb\u51fa ROM \u4e2d\u81ea\u5df1\u7684 MAC \u5730\u5740\uff08\u5168\u4e16\u754c\u552f\u4e00\uff09 \u7f51\u5361\u4e2d\u4fdd\u5b58\u7684 MAC \u5730\u5740\u4f1a\u7531\u7f51\u5361\u9a71\u52a8\u7a0b\u5e8f\u8bfb\u53d6\u5e76\u5206\u914d\u7ed9 MAC \u6a21\u5757 MAC\uff1aMedia Access Control \u7f51\u5361\u9a71\u52a8\u4ece IP \u6a21\u5757\u83b7\u53d6\u5305\u540e\u4f1a\u590d\u5236\u5230\u7f51\u5361\u5185\u7684\u7f13\u51b2\u533a\u4e2d\uff0c\u7136\u540e\u5411 MAC \u6a21\u5757\u53d1\u9001\u53d1\u9001\u5305\u547d\u4ee4\uff1bMAC \u6a21\u5757\u5c06\u5305\u4ece\u7f13\u51b2\u533a\u4e2d\u53d6\u51fa\u5e76\u5728\u5f00\u5934\u52a0\u4e0a\u62a5\u5934\uff0856 bit\uff09\u548c\u8d77\u59cb\u5e27\u5206\u754c\u7b26\uff08SFD\uff0c8 bit\uff09\uff0c\u5728\u672b\u5c3e\u52a0\u4e0a\u5e27\u6821\u9a8c\u5e8f\u5217\uff08FCS\uff0c32 bit\uff0c\u6bd4\u5982 CRC \u6821\u9a8c\uff09 \u62a5\u5934\u7684\u4f5c\u7528\u662f\u8ba9\u63a5\u6536\u65b9\u89c2\u5bdf\u65f6\u949f\u4fe1\u53f7\u53d8\u5316\u7684\u5468\u671f\uff0c\u53d1\u9001\u6570\u636e\u65f6\u4f1a\u5c06\u6570\u636e\u4e0e\u65f6\u949f\u4fe1\u53f7\u53e0\u52a0\u5728\u4e00\u8d77\u53d1\u9001\uff0c\u5229\u7528\u4e0a\u5347\u6cbf\u6216\u8005\u4e0b\u964d\u6cbf\u6765\u5224\u65ad 0/1 \u5411\u96c6\u7ebf\u5668\u53d1\u9001\u7f51\u7edc\u5305 \uff1a \u96c6\u7ebf\u5668\u534a\u53cc\u5de5\uff0c\u4ea4\u6362\u673a\u5168\u53cc\u5de5 MAU\uff1aMedium Attach Unit\uff0c\u4ecb\u8d28\u8fde\u63a5\u5355\u5143 PHY\uff1aPhysical Layer Device\uff0c\u7269\u7406\u5c42\u88c5\u7f6e \u7f51\u5361\u7684 MAC \u6a21\u5757\u751f\u6210\u901a\u7528\u4fe1\u53f7\uff0c\u7136\u540e\u7531 PHY\uff08MAU \u6839\u636e\u4ee5\u592a\u7f51\u4fe1\u53f7\u65b9\u5f0f\u7684\u4e0d\u540c\u800c\u53eb\u6cd5\u4e0d\u540c\uff09\u6a21\u5757\u8f6c\u6362\u6210\u53ef\u5728\u7f51\u7ebf\u4e2d\u4f20\u8f93\u7684\u683c\u5f0f\uff0c\u5e76\u901a\u8fc7\u7f51\u7ebf\u53d1\u9001\u51fa\u53bb \u6839\u636e\u4ee5\u592a\u7f51\u7684\u89c4\u683c\u4e24\u53f0\u8bbe\u5907\u4e0d\u80fd\u8d85\u8fc7100 m\uff1b\u5728\u534a\u53cc\u5de5\u7684\u6a21\u5f0f\u4e0b\u53ef\u80fd\u4f1a\u53d1\u751f\u78b0\u649e\uff0c\u5e76\u53d1\u9001\u963b\u585e\u4fe1\u53f7\uff0c\u65f6\u95f4\u662f\u7531 MAC \u5730\u5740\u751f\u6210\u7684\u4e00\u4e2a\u968f\u673a\u6570 \u63a5\u6536\u8fd4\u56de\u5305 \uff1a PHY\uff08MAU\uff09\u5c06\u4fe1\u53f7\u8f6c\u6362\u6210\u901a\u8fc7\u683c\u5f0f\u53d1\u9001\u7ed9 MAC \u6a21\u5757\uff0cMAC \u6a21\u5757\u518d\u5c06\u4fe1\u53f7\u8f6c\u6362\u4e3a\u6570\u5b57\u4fe1\u606f\u653e\u5230\u7f13\u51b2\u533a\uff0c\u68c0\u67e5 FCS\uff1b\u5982\u679c FCS \u6ca1\u6709\u95ee\u9898\u518d\u68c0\u67e5 MAC \u5730\u5740\u4e0e\u81ea\u5df1\u7684\u662f\u5426\u4e00\u81f4\uff0c\u4e0d\u662f\u5219\u76f4\u63a5\u4e22\u5f03\uff08\u6df7\u6742\u6a21\u5f0f\u4e0b\u4e0d\u4f1a\u68c0\u67e5 MAC \u5730\u5740\uff0c\u4f1a\u63a5\u53d7\u6240\u6709\u7684\u5305\uff09\uff1b\u63a5\u53d7\u5230\u5305\u540e\u5229\u7528\u4e2d\u65ad\u673a\u5236\u8c03\u7528\u7f51\u5361\u9a71\u52a8\u5904\u7406 \u5c06\u670d\u52a1\u5668\u7684\u54cd\u5e94\u5305\u4ece IP \u4f20\u9012\u7ed9 TCP \uff1a \u5982\u679c\u63a5\u6536\u65b9\u7684 IP \u5730\u5740\u4e0d\u662f\u81ea\u5df1\u7684\u5730\u5740\uff0c\u90a3\u4e00\u5b9a\u662f\u53d1\u9001\u4e86\u9519\u8bef\uff0c\u5ba2\u6237\u7aef\u8ba1\u7b97\u673a\u4e0d\u8d1f\u8d23\u8fdb\u884c\u8f6c\u53d1\uff08\u670d\u52a1\u5668\u4f1a\uff09\uff0cIP \u6a21\u5757\u4f1a\u901a\u8fc7 ICMP \u6d88\u606f\u5c06\u9519\u8bef\u901a\u77e5\u7ed9\u53d1\u9001\u65b9 \u4e3b\u8981\u7684 ICMP \u6d88\u606f\uff1a \u6d88\u606f \u7c7b\u578b \u542b\u4e49 ... ... ... \u5206\u7247\u7684\u5305\u4f1a\u5728 IP \u5934\u90e8\u5b57\u6bb5\u4e2d\u8fdb\u884c\u6807\u8bb0\uff0c\u6536\u5230\u5206\u7247\u7684\u5305\u540e IP \u6a21\u5757\u4f1a\u5c06\u5176\u6682\u5b58\u518d\u5185\u90e8\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u7b49\u5230 IP \u5934\u90e8\u4e2d\u5177\u6709\u540c\u6837 ID \u7684\u5305\u5168\u90e8\u5230\u8fbe\uff08\u5305\u7684\u6240\u6709\u5206\u7247\u5177\u6709\u76f8\u540c\u7684 ID\uff09\uff0c\u518d\u6839\u636e IP \u5934\u90e8\u4e2d\u5206\u7247\u504f\u79fb\u91cf\u8fd8\u539f\u6210\u539f\u59cb\u7684\u5305\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u53eb\u5206\u7247\u91cd\u7ec4\uff1b\u8fd9\u91cc IP \u6a21\u5757\u7684\u5de5\u4f5c\u5c31\u7ed3\u675f\u4e86\uff0c\u5305\u4f1a\u4ea4\u7ed9 TCP \u6a21\u5757 TCP \u6a21\u5757\u4f1a\u6839\u636e IP \u5934\u90e8\u4e2d\u63a5\u6536\u65b9\u548c\u53d1\u9001\u65b9\u7684 IP \u5730\u5740\u548c TCP \u5934\u90e8\u4e2d\u7684\u63a5\u6536\u65b9\u548c\u53d1\u9001\u65b9\u7684\u7aef\u53e3\u53f7\u6765\u67e5\u8be2\u5bf9\u5e94\u7684\u5957\u63a5\u5b57\uff0c\u7136\u540e\u6839\u636e\u5957\u63a5\u5b57\u4e2d\u7684\u901a\u4fe1\u72b6\u6001\u6267\u884c\u76f8\u5e94\u7684\u64cd\u4f5c","title":"2.5 IP\u4e0e\u4ee5\u592a\u7f51\u7684\u5305\u6536\u53d1\u64cd\u4f5c"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#26-udp","text":"\u5411 DNS \u670d\u52a1\u5668\u67e5\u8be2 IP \u5730\u5740\u7684\u65f6\u5019\u6211\u4eec\u4f7f\u7528 UDP \u534f\u8bae TCP \u534f\u8bae\u4e3a\u4e86\u5b9e\u73b0\u53ef\u9760\u6027\u9700\u8981\u786e\u8ba4\u5bf9\u65b9\u662f\u5426\u6536\u5230\u4e86\u6211\u4eec\u53d1\u9001\u7684\u6570\u636e\uff0c\u6ca1\u6709\u8fd8\u9700\u8981\u53d1\u9001\u4e00\u904d\uff1b\u4e3a\u4e86\u5b9e\u73b0\u9ad8\u6548\u7684\u4f20\u8f93\uff0c\u6211\u4eec\u8981\u907f\u514d\u91cd\u53d1\u5df2\u7ecf\u53d1\u8fc7\u7684\u5305\uff0c\u800c\u4e14\u53ea\u91cd\u53d1\u90a3\u4e9b\u51fa\u9519\u6216\u8005\u672a\u9001\u8fbe\u7684\u5305\uff1bTCP \u4e4b\u6240\u4ee5\u590d\u6742\u5c31\u662f\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9 \u5728\u6570\u636e\u5f88\u77ed\uff0c\u4e0d\u9700\u8981\u8003\u8651\u91cd\u53d1\u54ea\u4e2a\u5305\u7684\u60c5\u51b5\u4e0b\u5c31\u4e0d\u9700\u8981 TCP \u590d\u6742\u7684\u673a\u5236\uff0c\u4e5f\u4e0d\u9700\u8981\u7528\u6765\u5efa\u7acb\u548c\u65ad\u5f00\u8fde\u63a5\u7684\u63a7\u5236\u5305\uff1b\u53ea\u8981\u5c06\u56de\u590d\u7684\u6570\u636e\u5f53\u4f5c\u63a5\u6536\u786e\u8ba4\u7684\u5c31\u884c\uff0c\u4e5f\u4e0d\u9700\u8981\u4e13\u95e8\u7684\u63a5\u6536\u786e\u8ba4\u5305 UDP \u6ca1\u6709 TCP \u7684\u63a5\u6536\u786e\u8ba4\uff0c\u7a97\u53e3\u7b49\u673a\u5236\uff0c\u4e0d\u9700\u8981\u4ea4\u6362\u63a7\u5236\u4fe1\u606f\uff0c\u5efa\u7acb\u548c\u65ad\u5f00\u8fde\u63a5\u7684\u6b65\u9aa4\uff1b\u51fa\u9519\u65f6\u5c31\u6536\u4e0d\u5230\u6765\u81ea\u5bf9\u65b9\u7684\u56de\u590d\uff0c\u91cd\u53d1\u4e00\u904d\u6570\u636e\u5373\u53ef UDP \u5934\u90e8\u7684\u63a7\u5236\u4fe1\u606f\uff1a \u5b57\u6bb5\u540d\u79f0 \u957f\u5ea6 \u542b\u4e49 \u53d1\u9001\u65b9\u7aef\u53e3\u53f7 16 \u63a5\u6536\u65b9\u7aef\u53e3\u53f7 16 \u6570\u636e\u957f\u5ea6 16 \u6821\u9a8c\u548c 16 \u5176\u4ed6\u4f7f\u7528 DUP \u7684\u573a\u666f\uff1a\u97f3\u9891\u548c\u89c6\u9891\uff0c\u8fd9\u79cd\u60c5\u51b5\u65f6\u6548\u6027\u5f88\u91cd\u8981\uff0c\u5982\u679c\u53d1\u751f\u4e86\u9519\u8bef\u90a3\u4e5f\u6ca1\u5fc5\u8981\u91cd\u53d1\u6570\u636e\u548c\u9519\u8bef\u68c0\u67e5","title":"2.6 UDP\u534f\u8bae\u7684\u6536\u53d1\u64cd\u4f5c"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#3","text":"","title":"3 \u4ece\u7f51\u7ebf\u5230\u7f51\u7edc\u8bbe\u5907\uff1a\u63a2\u7d22\u96c6\u7ebf\u5668\uff0c\u4ea4\u6362\u673a\u548c\u8def\u7531\u5668"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#31","text":"\u8f6c\u53d1\u8bbe\u5907\u4f1a\u6839\u636e\u5305\u5934\u90e8\u4e2d\u7684\u63a7\u5236\u4fe1\u606f\uff0c\u5728\u8f6c\u53d1\u8bbe\u5907\u5185\u90e8\u4e00\u4e2a\u5199\u6709\u8f6c\u53d1\u89c4\u5219\u7684\u8868\u4e2d\u8fdb\u884c\u67e5\u8be2\uff0c\u4ee5\u6b64\u6765\u5224\u65ad\u5305\u7684\u76ee\u7684\u5730\u5e76\u8fdb\u884c\u8f6c\u53d1\uff1b\u5c31\u50cf\u90ae\u9012\u5458\u5728\u9001\u4fe1\u7684\u8fc7\u7a0b\u4e2d\u53ea\u770b\u4fe1\u5c01\uff0c\u4e0d\u770b\u5185\u5bb9 \u9632\u6b62\u7f51\u7ebf\u4e2d\u4fe1\u53f7\u7684\u8870\u51cf \uff1a \u7f51\u5361\u4e2d PHY\uff08MAU\uff09\u6a21\u5757\u8d1f\u8d23\u5c06\u5305\u8f6c\u6362\u6210\u7535\u4fe1\u53f7 \u7f51\u5361\u7684 PHY\uff08MAU\uff09\u6a21\u5757\u76f4\u63a5\u8fde\u63a5 RJ-45 \u63a5\u53e3\uff0c\u4fe1\u53f7\u4ece\u8fd9\u4e2a\u63a5\u53e3\u7684 1 \u53f7\u548c 2 \u53f7\u9488\u811a\u6d41\u5165\u7f51\u7ebf RJ-45\uff1aRJ45\u662f\u5e03\u7ebf\u7cfb\u7edf\u4e2d\u4fe1\u606f\u63d2\u5ea7\uff08\u5373\u901a\u4fe1\u5f15\u51fa\u7aef\uff09\u8fde\u63a5\u5668\u7684\u4e00\u79cd\uff0c\u8fde\u63a5\u5668\u7531\u63d2\u5934\uff08\u63a5\u5934\u3001\u6c34\u6676\u5934\uff09\u548c\u63d2\u5ea7\uff08\u6a21\u5757\uff09\u7ec4\u6210\uff0c\u6c34\u6676\u5934\u4e2d\u4f1a\u6709 2 \u6839\u7ebf\u4f5c\u4e3a\u63a5\u53d1\u9001\uff0c2 \u6839\u7ebf\u4f5c\u4e3a\u63a5\u9001 \u4fe1\u53f7\u5728\u7f51\u7ebf\u7684\u4f20\u8f93\u8fc7\u7a0b\u4e2d\uff0c\u80fd\u91cf\u4f1a\u9010\u6e10\u635f\u5931\uff0c\u7f51\u7ebf\u8d8a\u957f\u8870\u51cf\u8d8a\u4e25\u91cd\uff1b\u635f\u5931\u80fd\u91cf\u4f1a\u8ba9\u4fe1\u53f7\u7684\u62d0\u89d2\u53d8\u5706\uff0c\u8fd9\u662f\u56e0\u4e3a\u7535\u4fe1\u53f7\u7684\u9891\u7387\u8d8a\u9ad8\uff0c\u80fd\u91cf\u7684\u635f\u5931\u7387\u8d8a\u5927\uff1b\u5982\u679c\u52a0\u4e0a\u566a\u58f0\u5931\u771f\u4f1a\u66f4\u5389\u5bb3\uff0c\u51fa\u73b0\u5bf9 0/1 \u7684\u8bef\u5224 \u53cc\u7ede \u662f\u4e3a\u4e86\u6291\u5236\u566a\u58f0 \uff1a \u53cc\u7ede\u6307\u4e24\u6839\u7ebf\u7f20\u7ed5\u5728\u4e00\u8d77\uff0c\u662f\u4e3a\u4e86\u6291\u5236\u566a\u58f0 \u5f71\u54cd\u7f51\u7ebf\u7684\u7535\u78c1\u6ce2\u5206\u4e3a\u4e24\u79cd\uff1a \u7f51\u7ebf\u4e4b\u5916\u7684\u8bbe\u5907\uff1a\u4e24\u6839\u7ebf\u7684\u87ba\u65cb\u7ede\u5408\u4f1a\u8ba9\u566a\u58f0\uff08\u7535\u78c1\u6ce2\uff09\u4ea7\u751f\u7684\u7535\u6d41\u62b5\u6d88 \u7f51\u7ebf\u4e2d\u76f8\u90bb\u7684\u4fe1\u53f7\u7ebf\uff1a\u901a\u8fc7\u5bf9\u5185\u90e8\u95f4\u9694\u7684\u8bbe\u8ba1\u8ba9\u5f71\u54cd\u76f8\u4e92\u62b5\u6d88 \u53cc\u7ede\u7ebf\u7684\u79cd\u7c7b\uff1aP146 \u7c7b \u542b\u4e49 \u4e94\u7c7b\uff08CAT-5\uff09 \u8d85\u4e94\u7c7b\uff08CAT-5e\uff09 \u516d\u7c7b\uff08CAT-6\uff09 \u8d85\u516d\u7c7b\uff08CAT-6A\uff09 \u4e03\u7c7b\uff08CAT-7\uff09 \u96c6\u7ebf\u5668\u5c06\u4fe1\u53f7\u53d1\u5f80\u6240\u6709\u7ebf\u8def : \u4ee5\u592a\u7f51\u7684\u57fa\u672c\u67b6\u6784\uff1a\u4fe1\u53f7\u5230\u8fbe\u96c6\u7ebf\u5668\u540e\u5e7f\u64ad\u5230\u6574\u4e2a\u7f51\u7edc\uff0c\u6839\u636e\u76ee\u6807 MAC \u5730\u5740\u9009\u62e9\u662f\u5426\u63a5\u6536 \u96c6\u7ebf\u5668\u4e2d\u63a5\u53e3\u7684 MDI/MDI-X \u5f00\u5173\uff0cMDI \u5c31\u662f\u5bf9 RJ-45\u63a5\u53e3\u548c\u4fe1\u53f7\u6536\u53d1\u6a21\u5757\u76f4\u8fde\u63a5\u7ebf\uff0cMDI-X \u5219\u662f\u4ea4\u53c9\u63a5\u7ebf \u56e0\u4e3a\u9700\u8981 \u53d1\u9001\u65b9\u7684\u53d1\u9001\u7ebf\u8def \u548c \u63a5\u6536\u65b9\u7684\u63a5\u53d7\u7ebf\u8def\u8fde\u63a5\uff08568A \u548c 568B \u7684\u6c34\u6676\u5934\u90fd\u67098\u6839\u7ebf\uff09\uff0c\u6240\u4ee5\u5982\u679c 2 \u53f0\u8bbe\u5907\u90fd\u662f MDI \u6216\u8005 MDI-X\uff0c\u5219\u9700\u8981\u7528\u4ea4\u53c9\u7f51\u7ebf\uff08\u53d1\u9001\u548c\u63a5\u6536\u4fe1\u53f7\u7ebf\u53cd\u8fc7\u6765\u63a5\uff09\uff0c\u5426\u5219\u53ef\u4ee5\u76f4\u63a5\u63a5\u7ebf \u4fe1\u53f7\u5230\u8fbe\u96c6\u7ebf\u5668\u7684 PHY\uff08MAU\uff09\u6a21\u5757\u540e\u8fdb\u5165\u4e2d\u7ee7\u7535\u8def\uff0c\u4e2d\u7ee7\u7535\u8def\u7684\u529f\u80fd\u662f\u5c06\u8f93\u5165\u4fe1\u53f7\u5e7f\u64ad\u5230\u96c6\u7ebf\u5668\u7684\u6240\u6709\u7aef\u53e3\u4e0a\uff0c\u8fd8\u6709\u4fe1\u53f7\u6574\u6574\u5f62\uff0c\u9519\u8bef\u6291\u5236\u7b49 \u4fe1\u53f7\u5c06\u4fe1\u53f7\u53d1\u9001\u7ed9\u6240\u6709\u8fde\u63a5\u5728\u5b83\u4e0a\u9762\u7684\u7ebf\u8def","title":"3.1 \u4fe1\u53f7\u5728\u7f51\u7ebf\u548c\u96c6\u7ebf\u5668\u4e2d\u4f20\u8f93"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#32","text":"\u4fe1\u53f7\u5230\u8fbe\u7f51\u7ebf\u63a5\u53e3\u5e76\u7531 PHY\uff08MAU\uff09\u63a5\u6536\uff0c\u8fd9\u90e8\u5206\u4ea4\u6362\u673a\u4e2d\u548c\u96c6\u7ebf\u5668\u662f\u76f8\u540c\u7684\uff1b\u7136\u540e PHY\uff08MAU\uff09\u5c06\u4fe1\u53f7\u8f6c\u6362\u6210\u901a\u7528\u683c\u5f0f\uff0cMAC \u6a21\u5757\u8f6c\u6362\u6210\u6570\u5b57\u4fe1\u53f7\uff0c\u68c0\u9519\u5e76\u653e\u5165\u7f13\u51b2\u533a\uff0c\u8fd9\u90e8\u5206\u64cd\u4f5c\u548c\u7f51\u5361\u4e00\u6837\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u4ea4\u6362\u673a\u6bcf\u4e2a\u63a5\u53e3\u540e\u9762\u90fd\u662f\u4e00\u4e2a\u7f51\u5361\uff1b\u4e0d\u540c\u7684\u662f\u7f51\u5361\u662f\u6709 MAC \u5730\u5740\u7684\uff0c\u800c\u4ea4\u6362\u673a\u6ca1\u6709 \u4ea4\u6362\u673a\u7684 MAC \u6a21\u5757\u4e0d\u5177\u6709 MAC \u5730\u5740 \u5305\u653e\u5165\u7f13\u51b2\u533a\u540e\u9700\u8981\u67e5\u8be2\u8fd9\u4e2a\u5305\u7684\u63a5\u6536\u65b9 MAC \u5730\u5740\u662f\u5426\u5728 MAC \u5730\u5740\u8868\u4e2d\uff1bMAC \u5730\u5740\u8868\u4e2d\u8bb0\u5f55\u7aef\u53e3\u548c\u7aef\u53e3\u8fde\u63a5\u8bbe\u5907\u7684 MAC \u5730\u5740\uff0c\u67e5\u8be2\u5230\u5bf9\u5e94\u7684 MAC \u5730\u5740\u540e\u901a\u8fc7\u4ea4\u6362\u7535\u8def\u53d1\u9001\u5230\u5bf9\u5e94\u7684\u7aef\u53e3\uff1b\u4ea4\u6362\u7535\u8def\u7684\u7ed3\u6784\u56fe P152 \u7f51\u7edc\u5305\u5230\u8fbe\u53d1\u9001\u7aef\u53e3\u540e\uff0c\u7aef\u53e3\u7684 MAC \u6a21\u5757\u548c PHY\uff08MAU\uff09\u6a21\u5757\u4f1a\u6267\u884c\u53d1\u9001\u64cd\u4f5c\uff0c\u5982\u679c\u662f\u534a\u53cc\u5de5\u7684\u6a21\u5f0f\u9700\u8981\u68c0\u6d4b\u7ebf\u8def\u4e2d\u662f\u5426\u6709\u4fe1\u53f7\u5728\u4f20\u8f93 MAC \u5730\u5740\u8868\u7684\u7ef4\u62a4 \uff1a \u4ea4\u6362\u673a\u5728\u8f6c\u53d1\u5305\u7684\u8fc7\u7a0b\u4e2d\u9700\u8981\u5bf9 MAC \u5730\u5740\u8868\u8fdb\u884c\u7ef4\u62a4\uff0c\u7ef4\u62a4\u64cd\u4f5c\u5206\u4e3a 2 \u79cd\uff1a \u6536\u5230\u5305\u65f6\uff0c\u5c06\u53d1\u9001\u65b9\u7684 MAC \u5730\u5740\u548c\u5bf9\u5e94\u7aef\u53e3\u53f7\u5199\u5165 MAC \u5730\u5740\u8868 \u5220\u9664\u67d0\u6761\u8bb0\u5f55\uff0c\u9632\u6b62\u8bbe\u5907\u79fb\u52a8\u4ea7\u751f\u95ee\u9898\uff0c\u4e00\u6761\u8bb0\u5f55\u5728\u4e00\u6bb5\u65f6\u95f4\u540e\u4f1a\u81ea\u52a8\u5220\u9664 \u5982\u679c\u56e0\u4e3a\u8bb0\u5f55\u8fc7\u65f6\u800c\u5bfc\u81f4\u9519\u8bef\uff0c\u91cd\u542f\u4ea4\u6362\u673a\u5373\u53ef\u91cd\u7f6e\u5730\u5740\u8868 \u7279\u6b8a\u64cd\u4f5c \uff1a \u5f53\u4ea4\u6362\u673a\u53d1\u73b0\u4e00\u4e2a\u5305\u9700\u8981\u53d1\u56de\u5230\u539f\u7aef\u53e3\u65f6\uff0c\u4f1a\u76f4\u63a5\u4e22\u5f03\u8fd9\u4e2a\u5305\uff08\u56e0\u4e3a\u8fd9\u4e2a\u5305\u662f\u4ece\u96c6\u7ebf\u5668\u53d1\u8fc7\u6765\u7684\uff0c\u5df2\u7ecf\u5728\u5b50\u7f51\u4e2d\u5e7f\u64ad\u4e86\uff09 \u5730\u5740\u8868\u4e2d\u627e\u4e0d\u5230\u6307\u5b9a\u7684 MAC \u5730\u5740\uff0c\u5c06\u5305\u53d1\u9001\u5230\u9664\u4e86\u6e90\u7aef\u53e3\u4e4b\u5916\u7684\u6240\u6709\u7aef\u53e3\uff1b\u53d1\u9001\u540e\u76ee\u6807\u8bbe\u5907\u4f1a\u505a\u51fa\u54cd\u5e94\uff0c\u4ea4\u6362\u673a\u4e5f\u5c31\u5c06\u5b83\u7684\u5730\u5740\u5199\u5165\u5730\u5740\u8868 \u5982\u679c\u63a5\u6536\u65b9 MAC \u5730\u5740\u662f\u4e00\u4e2a \u5e7f\u64ad\u5730\u5740\uff0c\u90a3\u4e48\u4ea4\u6362\u673a\u4f1a\u5c06\u5305\u53d1\u9001\u7ed9\u9664\u6e90\u7aef\u53e3\u4e4b\u5916\u7684\u6240\u6709\u7aef\u53e3 \u4ea4\u6362\u673a\u7684\u5168\u53cc\u5de5\u6a21\u5f0f\u53ef\u4ee5\u540c\u65f6\u53d1\u9001\u548c\u63a5\u6536\u4fe1\u606f \u81ea\u52a8\u534f\u5546\uff1a\u786e\u5b9a\u6700\u4f18\u7684\u4f20\u8f93\u901f\u7387 \uff1a \u5207\u6362\u5168\u53cc\u5de5\u548c\u534a\u53cc\u5de5\u5f88\u9ebb\u70e6\uff0c\u4e8e\u662f\u540e\u9762\u51fa\u73b0\u4e86\u81ea\u52a8\u5207\u6362\u5de5\u4f5c\u6a21\u5f0f\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u5b9e\u73b0\u53cc\u65b9\u63a2\u6d4b\u662f\u5426\u652f\u6301\u5168\u53cc\u5de5\uff0c\u8fd8\u80fd\u63a2\u6d4b\u5bf9\u65b9\u7684\u4f20\u8f93\u901f\u7387\u5e76\u8fdb\u884c\u81ea\u52a8\u5207\u6362\uff0c\u8fd9\u79cd\u5207\u6362\u7684\u529f\u80fd\u88ab\u79f0\u4e3a\u81ea\u52a8\u534f\u5546 \u4ee5\u592a\u7f51\u4e2d\uff0c\u5728\u6ca1\u6709\u6570\u636e\u4f20\u8f93\u65f6\u7f51\u7edc\u4e2d\u4f1a\u6709\u4e00\u79cd\u88ab\u79f0\u4f5c\u8fde\u63a5\u8109\u51b2\u7684\u8109\u51b2\u4fe1\u53f7\uff0c\u4ece\u800c\u68c0\u6d4b\u5bf9\u65b9\u662f\u5426\u5728\u6b63\u5e38\u5de5\u4f5c\uff1b\u5728\u53cc\u7ede\u7ebf\u4ee5\u592a\u7f51\u89c4\u8303\u521a\u5236\u5b9a\u65f6\u53ea\u89c4\u5b9a\u4e86\u6309\u4e00\u5b9a\u95f4\u9694\u53d1\u9001\u8109\u51b2\u4fe1\u53f7\u6765\u786e\u8ba4\u7f51\u7edc\u662f\u5426\u6b63\u5e38\uff1b\u540e\u6765\uff0c\u8bbe\u8ba1\u4e86\u7279\u5b9a\u6392\u5217\u7684\u8109\u51b2\u4fe1\u53f7\u6765\u544a\u77e5\u81ea\u5df1\u652f\u6301\u7684\u5de5\u4f5c\u6a21\u5f0f\u548c\u4f20\u8f93\u901f\u7387\uff0c\u5e76\u4ece\u4e2d\u9009\u62e9\u4e00\u4e2a\u6700\u4f18\u7684\u7ec4\u5408 \u4ea4\u6362\u673a\u53ef\u540c\u65f6\u652f\u6301\u591a\u4e2a\u8f6c\u53d1\u64cd\u4f5c \uff1a \u4ea4\u6362\u673a\u591a\u4e2a\u7aef\u53e3\u53ef\u4ee5\u540c\u65f6\u4f20\u8f93\uff0c\u540c\u65f6\u8f6c\u53d1\u591a\u4e2a\u5305\uff1b\u4ece\u8bbe\u5907\u7684\u6574\u4f53\u8f6c\u53d1\u80fd\u529b\u6765\u770b\uff0c\u4ea4\u6362\u673a\u9ad8\u4e8e\u96c6\u7ebf\u5668","title":"3.2 \u4ea4\u6362\u673a\u7684\u5305\u8f6c\u53d1\u64cd\u4f5c"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#33","text":"\u8def\u7531\u5668\u7684\u57fa\u672c\u77e5\u8bc6 \uff1a \u8def\u7531\u5668\u662f\u57fa\u4e8e IP \u8bbe\u8ba1\u7684\uff0c\u800c\u4ea4\u6362\u673a\u662f\u57fa\u4e8e\u4ee5\u592a\u7f51\u8bbe\u8ba1\u7684\uff1b\u8def\u7531\u5668\u6709\u4e24\u90e8\u5206\uff1a\u8f6c\u53d1\u6a21\u5757\u548c\u7aef\u53e3\u6a21\u5757\uff0c\u8d1f\u8d23\u5224\u65ad\u5305\u7684\u8f6c\u53d1\u76ee\u7684\u5730\u548c\u5305\u7684\u6536\u53d1\u64cd\u4f5c \u8def\u7531\u5668\u5728\u8f6c\u53d1\u5305\u65f6\uff0c\u9996\u5148\u4f1a\u901a\u8fc7\u7aef\u53e3\u5c06\u53d1\u8fc7\u6765\u7684\u5305\u63a5\u6536\u8fdb\u6765\uff0c\u8fd9\u4e00\u6b65\u53d6\u51b3\u4e8e\u7aef\u53e3\u7684\u901a\u4fe1\u6280\u672f\uff1b\u7136\u540e\u8f6c\u53d1\u6a21\u5757\u6839\u636e\u63a5\u6536\u5230\u7684\u5305\u7684 IP \u5934\u90e8\u8bb0\u5f55\u8bb0\u5f55\u63a5\u6536\u65b9\u7684 IP \u5730\u5740\uff0c\u5728\u8def\u7531\u5668\u8868\u4e2d\u67e5\u8be2\uff1b\u7136\u540e\u8f6c\u53d1\u5230\u5bf9\u5e94\u7684\u7aef\u53e3\uff0c\u518d\u6309\u7167\u786c\u4ef6\u7684\u89c4\u5219\u53d1\u51fa\u53bb \u7aef\u53e3\u6a21\u5757\u65f6\u4ee5\u5b9e\u9645\u7684\u53d1\u9001\u65b9\u6216\u8005\u63a5\u6536\u65b9\u6765\u6536\u53d1\u7f51\u7edc\u5305\u7684\uff0c\u4ee5\u4ee5\u592a\u7f51\u7aef\u53e3\u4e3a\u4f8b\uff0c\u8def\u7531\u5668\u7684\u7aef\u53e3\u5177\u6709 MAC \u5730\u5740\uff1b\u548c\u4ea4\u6362\u673a\u4e0d\u540c\u7684\u662f\uff0c\u4ea4\u6362\u673a\u53ea\u662f\u5c06\u8fdb\u6765\u7684\u5305\u8f6c\u53d1\u51fa\u53bb\uff0c\u81ea\u5df1\u4e0d\u4f1a\u6210\u4e3a\u63a5\u6536\u65b9\u6216\u8005\u53d1\u9001\u65b9 \u8def\u7531\u5668\u7684\u5404\u4e2a\u7aef\u53e3\u90fd\u5177\u6709 MAC \u5730\u5740\u548c IP \u5730\u5740 \u8def\u7531\u8868\u4e2d\u7684\u4fe1\u606f \uff1a \u8def\u7531\u5668\u6839\u636e IP \u5730\u5740\u5224\u65ad\u8f6c\u53d1\u76ee\u6807 \u76ee\u6807\u5730\u5740(Destination) \u5b50\u7f51\u63a9\u7801(Net) \u7f51\u5173 \u63a5\u53e3 \u8d8a\u70b9\u6570 \u5728\u8def\u7531\u5668\u5bf9\u8def\u7531\u8868\u8fdb\u884c\u5339\u914d\u65f6\uff0c\u53ea\u4f1a\u4e0e\u76ee\u6807\u5730\u5740\u7684\u7f51\u7edc\u53f7\u5339\u914d\u800c\u5ffd\u7565\u4e3b\u673a\u53f7\uff1b \u4ea4\u6362\u673a\u5728\u5730\u5740\u8868\u4e2d\u53ea\u5339\u914d\u5b8c\u5168\u4e00\u81f4\u7684\u8bb0\u5f55\uff0c\u800c\u8def\u7531\u5668\u5219\u4f1a\u5ffd\u7565\u4e3b\u673a\u53f7\u90e8\u5206\uff0c\u53ea\u5339\u914d\u7f51\u7edc\u53f7\u90e8\u5206 \u6709\u65f6\u76ee\u6807\u5730\u5740\u7684\u5b50\u7f51\u63a9\u7801\u548c\u8def\u7531\u8868\u4e2d\u7684\u5b50\u7f51\u63a9\u7801\u4e0d\u4e00\u81f4\uff0c\u662f\u56e0\u4e3a\u8def\u7531\u805a\u5408\u7684\u7ed3\u679c\uff0c\u5373\u5c06\u51e0\u4e2a\u5b50\u7f51\u5408\u5e76\u4e3a\u4e00\u4e2a\u5b50\u7f51\uff1b\u6bd4\u5982 10.10.1.0/24 \u4e0e 10.10.3.0/24 \u4e0e 10.10.2.0/24 \u5408\u5e76\u4e3a 10.10.0.0/16 \u8def\u7531\u8868\u7684\u5b50\u7f51\u63a9\u7801\u53ea\u662f\u7528\u6765\u5339\u914d\u76ee\u6807\u5730\u5740\u65f6\u544a\u8bc9\u8def\u7531\u5668\u8981\u5339\u914d\u591a\u5c11\u4e2a\u6bd4\u7279 \u7f51\u7edc\u53f7\u5339\u914d\u6210\u529f\u540e\u8def\u7531\u5668\u5c31\u4f1a\u4ece\u8def\u7531\u8868\u4e2d\u5bf9\u5e94\u884c\u7684\u63a5\u53e3\u8f6c\u53d1\uff0c\u53d1\u5f80\u6307\u5b9a\u7f51\u5173\uff1b\u8dc3\u70b9\u8ba1\u6570\u8868\u793a\u79bb IP \u76ee\u6807\u7684\u8fdc\u8fd1\uff0c\u6570\u5b57\u8d8a\u5927\u8868\u793a\u8d8a\u8fdc \u8def\u7531\u8868\u7684\u7ef4\u62a4\u65b9\u5f0f\u548c\u4ea4\u6362\u673a\u6709\u6240\u4e0d\u540c\uff0c\u4ea4\u6362\u673a\u5bf9 MAC \u5730\u5740\u7684\u7ef4\u62a4\u662f\u5305\u8f6c\u53d1\u65f6\u7684\u4e00\u4e2a\u64cd\u4f5c\uff0c\u800c\u8def\u7531\u5668\u5bf9\u8def\u7531\u8868\u7684\u7ef4\u62a4\u4e0e\u8f6c\u53d1\u64cd\u4f5c\u662f\u72ec\u7acb\u7684\uff0c\u5206\u4e3a 2 \u7c7b\uff1a \u7531\u4eba\u624b\u52a8\u7ef4\u62a4\u8def\u7531\u8bb0\u5f55 \u6839\u636e\u8def\u7531\u534f\u8bae\u673a\u5236\uff0c\u901a\u8fc7\u8def\u7531\u5668\u4e4b\u95f4\u7684\u4fe1\u606f\u4ea4\u6362\u8def\u7531\u5668\u81ea\u884c\u7ef4\u62a4 \u8def\u7531\u5668\u7684\u5305\u63a5\u6536\u64cd\u4f5c : \u8def\u7531\u5668\u7684\u7aef\u53e3\u90fd\u5177\u6709 MAC \u5730\u5740\uff0c\u53ea\u63a5\u6536\u4e0e\u81ea\u8eab\u5730\u5740\u5339\u914d\u7684\u5305\uff0c\u9047\u5230\u4e0d\u5339\u914d\u7684\u5305\u5219\u76f4\u63a5\u4e22\u5f03 \u67e5\u8be2\u8def\u7531\u8868\u786e\u5b9a\u8f93\u51fa\u7aef\u53e3 \uff1a \u5b8c\u6210\u5305\u63a5\u6536\u64cd\u4f5c\u540e\uff0c\u8def\u7531\u5668\u5c31\u4f1a\u4e22\u5f03\u5305\u5f00\u5934\u7684 MAC \u5934\u90e8\uff08MAC \u5934\u90e8\u7684\u4efb\u52a1\u5b8c\u6210\u4e86\uff09 \u901a\u8fc7\u8def\u7531\u5668\u8f6c\u53d1\u7684\u5305\uff0c\u5176\u63a5\u6536\u65b9\u7684 MAC \u5730\u5740\u4e3a\u8def\u7531\u5668\u7aef\u53e3\u7684 MAC \u5730\u5740 \u63a5\u4e0b\u6765\u8def\u7531\u5668\u4f1a\u6839\u636e MAC \u5934\u90e8\u540e\u65b9\u7684 IP \u5934\u90e8\u5bf9\u5305\u8fdb\u884c\u8f6c\u53d1\uff1b\u5bf9\u8def\u7531\u8868\u4e0e\u63a5\u6536\u65b9 IP \u8fdb\u884c\u5339\u914d\uff0c\u5339\u914d\u65f6\u5982\u679c\u6709\u591a\u6761\u8bb0\u5f55\u5339\u914d\u6210\u529f\uff08\u5339\u914d\u65f6\u53ea\u9700\u8981\u5339\u914d\u8def\u7531\u8868\u4e2d\u5b50\u7f51\u63a9\u7801\u7684\u90e8\u5206\uff09\u9009\u62e9\u7f51\u7edc\u53f7\u6700\u957f\u7684\uff0c\u56e0\u4e3a\u8fd9\u6837\u8bf4\u660e\u5b50\u7f51\u4e2d\u53ef\u5206\u914d\u7684\u4e3b\u673a\u6570\u8d8a\u5c11\uff1b\u5982\u679c\u662f\u957f\u5ea6\u76f8\u540c\u7684\u591a\u6761\u8bb0\u5f55\uff0c\u9009\u62e9\u8dc3\u70b9\u6570\u8f83\u5c0f\u7684 \u5982\u679c\u65e0\u6cd5\u5339\u914d\u5230\u8bb0\u5f55\uff0c\u8def\u7531\u5668\u4f1a\u76f4\u63a5\u4e22\u5f03\u8fd9\u4e2a\u5305\u7136\u540e\u901a\u8fc7 ICMP \u6d88\u606f\u901a\u77e5\u5bf9\u65b9\uff1b\u8fd9\u91cc\u7684\u5904\u7406\u548c\u4ea4\u6362\u673a\u4e0d\u540c\uff0c\u4ea4\u6362\u673a\u65f6\u76f4\u63a5\u5e7f\u64ad\uff0c\u56e0\u4e3a\u4ea4\u6362\u673a\u8fde\u63a5\u7684\u7f51\u7edc\u7684\u89c4\u6a21\u4e0d\u5927 \u627e\u4e0d\u5230\u5339\u914d\u8def\u7531\u65f6\u9009\u62e9\u9ed8\u8ba4\u8def\u7531 \uff1a \u8def\u7531\u8868\u4e2d\u6709\u4e00\u6761\u5b50\u7f51\u63a9\u7801\u662f 0:0:0:0 \u7684\u8bb0\u5f55\uff0c\u5373\u4e0d\u7528\u4efb\u4f55\u5339\u914d\u90fd\u53ef\u4ee5\u5339\u914d\u6210\u529f\uff0c\u8fd9\u6761\u8bb0\u5f55\u914d\u7f6e\u7684\u7f51\u5173\u4e5f\u53eb\u9ed8\u8ba4\u7f51\u5173\uff1b\u56e0\u4e3a\u5339\u914d\u6210\u529f\u591a\u6761\u65f6\u5339\u914d\u957f\u5ea6\u7684 bit \u6570\u8d8a\u957f\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u6240\u4ee5\u4e5f\u4e0d\u4f1a\u9009\u62e9\u9ed8\u8ba4\u7f51\u5173 \u5305\u7684\u6709\u6548\u671f \uff1a \u5305\u5728\u8def\u7531\u5668\u8f6c\u53d1\u4e4b\u524d\uff0c\u9700\u8981\u66f4\u65b0 IP \u5934\u90e8\u7684 TTL\uff08Time to live\uff0c\u751f\u5b58\u65f6\u95f4\uff0cIP\u5934\u90e8\u89c1 P103\uff09\uff1b\u6bcf\u7ecf\u8fc7\u4e00\u4e2a\u8def\u7531\u5668\u7684\u8f6c\u53d1 TTL \u4f1a\u51cf 1\uff0c\u5f53\u8fd9\u4e2a\u503c\u53d8\u6210 0 \u65f6 \u4f1a\u88ab\u4e22\u5f03\uff0c\u8fd9\u4e2a\u673a\u5236\u662f\u4e3a\u4e86\u9632\u6b62\u5305\u9677\u5165\u6b7b\u5faa\u73af\uff1b\u53d1\u9001\u65b9\u5728\u53d1\u9001\u65f6 TTL \u4f1a\u8bbe\u7f6e\u4e3a 64 \u6216 128 \u901a\u8fc7\u5206\u7247\u529f\u80fd\u62c6\u5206\u5927\u7f51\u7edc\u5305 \uff1a PPPoE\uff1aPPP to Ethernet\uff0c\u63a7\u5236 ADSL\uff0cFTTH \u7b49\u7f51\u7edc\u5bbd\u5e26\u7684\u65b9\u5f0f \u4e0d\u540c\u7684\u7ebf\u8def\u548c\u5c40\u57df\u7f51\u7c7b\u578b\u5404\u81ea\u80fd\u4f20\u8f93\u7684\u6700\u5927\u5305\u957f\u5ea6\u4e0d\u540c\uff0c\u6240\u4ee5\u8def\u7531\u5668\u8f93\u51fa\u7aef\u53e3\u7684\u6700\u5927\u5305\u957f\u5ea6\u53ef\u80fd\u4f1a\u5c0f\u4e8e\u8f93\u5165\u7aef\u53e3\uff1b\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\u53ef\u4ee5\u4f7f\u7528 IP \u534f\u8bae\u4e2d\u5b9a\u4e49\u7684\u5206\u7247\u529f\u80fd\u5bf9\u5305\u8fdb\u884c\u62c6\u5206\uff0c\u7f29\u77ed\u6bcf\u4e2a\u5305\u7684\u957f\u5ea6 TCP \u62c6\u5206\u6570\u636e\u662f\u5728\u5c06\u6570\u636e\u88c5\u5230\u5305\u91cc\u4e4b\u524d\u8fdb\u884c\u7684\uff0c\u7136\u540e\u5206\u7247\u662f\u5bf9\u4e00\u4e2a\u5b8c\u6574\u7684\u5305\u8fdb\u884c\u62c6\u5206 \u9996\u5148\uff0c\u9700\u8981\u77e5\u9053\u8f93\u51fa\u7aef\u53e3\u7684 MTU\uff0c\u80fd\u4e0d\u80fd\u76f4\u63a5\u53d1\u9001\uff0c\u8fd9\u4e2a\u6700\u5927\u5305\u957f\u5ea6\u662f\u7531\u7aef\u53e3\u7c7b\u578b\u51b3\u5b9a\u7684\uff1b\u5982\u679c\u9700\u8981\u5206\u7247\uff0c\u8fd8\u8981\u67e5\u8be2\u4e00\u4e0b IP \u5934\u90e8\u4e2d\u662f\u5426\u5141\u8bb8\uff08\u4e24\u79cd\u60c5\u51b5\u4e0b\u4e0d\u5141\u8bb8\uff0c\u53d1\u9001\u53d1\u8bbe\u7f6e\u4e86\u4e0d\u5141\u8bb8 \u6216\u8005 \u8fd9\u4e2a\u5305\u5df2\u7ecf\u662f\u5206\u7247\u8fc7\u7684\u4e86\uff09\uff1b\u5982\u679c\u4e0d\u5141\u8bb8\u5206\u7247\u5c31\u53ea\u80fd\u4e22\u5f03\u8fd9\u4e2a\u5305\u7136\u540e\u901a\u8fc7 ICMP \u6d88\u606f\u901a\u77e5\u5bf9\u65b9\uff1b\u5728\u5206\u7247\u4e2d\uff0c\u5206\u7247\u7684\u5bf9\u8c61\u662f TCP \u5934\u90e8\u548c\u540e\u9762\u7684\u5185\u5bb9\uff0c\u7136\u540e\u5728\u6bcf\u4e2a\u5206\u7247\u524d\u52a0\u4e0a IP \u5934\u90e8\uff0c\u5927\u90e8\u5206\u5185\u5bb9\u548c\u539f\u672c\u7684 IP \u5934\u90e8\u4e00\u81f4\uff0c\u6709\u4e00\u4e9b\u4fe1\u606f\u9700\u8981\u66f4\u65b0 \u8def\u7531\u5668\u7684\u53d1\u9001\u64cd\u4f5c\u548c\u8ba1\u7b97\u673a\u76f8\u540c \uff1a \u53d1\u9001\u524d\u7684\u51c6\u5907\u5de5\u4f5c\u5b8c\u6210\uff0c\u8fdb\u5165\u53d1\u9001\u5305\u7684\u9636\u6bb5\uff1b\u8fd9\u90e8\u64cd\u4f5c\u53d6\u51b3\u4e8e\u8f93\u51fa\u7aef\u53e3\u7c7b\u578b\uff0c\u5982\u679c\u662f \u4ee5\u592a\u7f51/ADSL \u5c31\u6309\u7167 \u4ee5\u592a\u7f51/ADSL \u89c4\u5219\u5c06\u5305\u8f6c\u6362\u4e3a\u7535\u4fe1\u53f7\u53d1\u9001\uff1b\u8fd9\u91cc\u4ee5\u8def\u7531\u5668\u4f4d\u4e8e\u516c\u53f8\u7b49\u5c40\u57df\u7f51\u7684\u5185\u90e8\uff0c\u5373\u8f93\u51fa\u7aef\u53e3\u662f\u4ee5\u592a\u7f51\u4e3a\u4f8b\uff1a \u9996\u5148\u4e3a\u4e86\u5224\u65ad MAC \u5730\u5740\u5934\u90e8\u4e2d\u7684 MAC \u5730\u5740\u662f\u4ec0\u4e48\uff0c\u8981\u6839\u636e\u8def\u7531\u8868\u7684\u7f51\u5173\u5217\u5224\u65ad\u5bf9\u65b9\u5730\u5740\uff08\u5982\u679c\u662f\u7a7a\u5219 IP \u5934\u90e8\u4e2d\u7684\u63a5\u6536\u65b9 IP \u5730\u5740\u5c31\u662f\u8981\u8f6c\u53d1\u5230\u7684\u76ee\u6807\u5730\u5740\uff09\uff0c\u7136\u540e\u6839\u636e ARP \u6839\u636e IP \u5730\u5740\u67e5\u8be2 MAC \u5730\u5740\uff0c\u4f5c\u4e3a\u63a5\u6536\u65b9 MAC \u5730\u5740\uff08\u4f1a\u5148\u5728 ARP \u7f13\u5b58\u4e2d\u67e5\u8be2\uff09 \u8def\u7531\u5668\u4e0e\u4ea4\u6362\u673a\u7684\u5173\u7cfb \uff1a \u8def\u7531\u5668\u662f\u57fa\u4e8e IP \u8bbe\u8ba1\u7684\uff0c\u4ea4\u6362\u673a\u662f\u57fa\u4e8e\u4ee5\u592a\u7f51\u8bbe\u8ba1\u7684\uff1b\u8def\u7531\u5668\u5c06\u5305\u7684\u4f20\u8f93\u5de5\u4f5c\u59d4\u6258\u7ed9\u4ee5\u592a\u7f51\u8fdb\u884c\uff0c\u5b9e\u9645\u7684\u8def\u7531\u5668\u5185\u7f6e\u4ea4\u6362\u673a\u529f\u80fd\uff0c\u6bd4\u5982\u7528\u4e8e\u8fde\u63a5\u4e92\u8054\u7f51\u7684\u5bb6\u7528\u8def\u7531\u5668 IP \u5e76\u4e0d\u662f\u59d4\u6258\u4ee5\u592a\u7f51\u5c06\u5305\u4f20\u8f93\u5230\u6700\u7ec8\u76ee\u7684\u5730\uff0c\u800c\u662f\u4f20\u8f93\u5230\u4e0b\u4e00\u4e2a\u8def\u7531\u5668\uff0c\u66f4\u65b0\u7684 MAC \u5730\u5740\u662f\u4e0b\u4e00\u4e2a\u8def\u7531\u5668\u7684 MAC \u5730\u5740 \u7f51\u7edc\u5e76\u975e\u53ea\u6709\u4ee5\u592a\u7f51\u4e00\u79cd\uff0c\u8fd8\u6709\u65e0\u7ebf\u5c40\u57df\u7f51\u7b49\uff1b\u5982\u679c\u548c\u4e0b\u4e00\u4e2a\u8def\u7531\u5668\u4e4b\u95f4\u662f\u65e0\u7ebf\u5c40\u57df\u7f51\u8fde\u63a5\u7684\uff0c\u5c31\u59d4\u6258\u65e0\u7ebf\u5c40\u57df\u7f51\u4f20\u8f93\uff1bIP \u672c\u8eab\u5e76\u4e0d\u8d1f\u8d23\u5305\u7684\u4f20\u8f93\uff0c\u800c\u662f\u59d4\u6258\u5404\u79cd\u901a\u4fe1\u6280\u672f\u5c06\u5305\u4f20\u8f93\u5230\u4e0b\u4e00\u4e2a\u8def\u7531\u5668\uff0c\u8fd9\u662f IP \u7684\u7279\u70b9","title":"3.3 \u8def\u7531\u5668\u7684\u5305\u8f6c\u53d1\u64cd\u4f5c"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#34","text":"\u8def\u7531\u5668\u6700\u91cd\u8981\u7684\u4e24\u4e2a\u529f\u80fd\uff1a\u5730\u5740\u8f6c\u6362\uff0c\u5305\u8fc7\u6ee4 \u901a\u8fc7\u5730\u5740\u8f6c\u6362\u6709\u6548\u5229\u7528 IP \u5730\u5740 \uff1a \u4e3a\u4e86\u9632\u6b62\u5730\u5740\u4e0d\u591f\u7528\u7684\u60c5\u51b5\u5229\u7528\u5730\u5740\u8f6c\u6362\uff1b\u5982\u679c A\uff0cB \u4e24\u516c\u53f8\u7684\u5185\u7f51\u662f\u5b8c\u5168\u72ec\u7acb\u7684\uff0c\u4e24\u5bb6\u5185\u7f51\u4e4b\u95f4\u4e0d\u4f1a\u8fdb\u884c\u901a\u4fe1\uff0c\u90a3\u4e48 A \u516c\u53f8\u548c B \u516c\u53f8\u5ba2\u6237\u7aef\u4e4b\u95f4\u6709\u76f8\u540c\u7684 IP \u4e5f\u6ca1\u6709\u5173\u7cfb\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4e0d\u4f1a\u8fdb\u884c\u901a\u4fe1\uff1b\u516c\u53f8\u5185\u90e8\u7684\u8bbe\u5907\u4e0d\u9700\u8981\u5206\u914d\u56fa\u5b9a\u5730\u5740\uff0c\u4ece\u800c\u8282\u7701 IP \u5730\u5740\uff1b\u4e5f\u4e0d\u662f\u968f\u4fbf\u5206\u914d\u5730\u5740\uff0c\u9700\u8981\u6709\u4e00\u5b9a\u7684\u89c4\u5219\uff0c\u89c4\u5b9a\u67d0\u4e9b\u5730\u5740\u662f\u7528\u4e8e\u5185\u7f51\u7684\uff0c\u8fd9\u4e9b\u5730\u5740\u53eb\u505a\u79c1\u6709\u5730\u5740\uff0c\u539f\u6765\u7684\u5730\u5740\u53eb\u505a\u516c\u6709\u5730\u5740\uff0c\u79c1\u6709\u5730\u5740\u7684\u8303\u56f4\uff1a 10.0.0.0 ~ 10.255.255.255 172.16.0.0 ~ 172.31.255.255 192.168.0.0 ~ 192.168.255.255 \u8fd9\u4e9b\u5730\u5740\u53ea\u662f\u5c06\u5171\u6709\u5730\u5740\u4e2d\u6ca1\u5206\u914d\u7684\u4e00\u90e8\u5206\u62ff\u51fa\u6765\u89c4\u5b9a\u53ea\u80fd\u5728\u5185\u7f51\u4e2d\u4f7f\u7528\uff0c\u4e0d\u540c\u516c\u53f8\u95f4\u7684\u5730\u5740\u91cd\u590d\u4e5f\u6ca1\u6709\u5173\u7cfb\uff0c\u8fd9\u4e9b\u5730\u5740\u4e0d\u505a\u7edf\u4e00\u7ba1\u7406\uff0c\u4e0d\u9700\u8981\u7533\u8bf7\uff0c\u5f53\u7136\u5185\u7f51\u4e2d\u8fd8\u662f\u9700\u8981\u907f\u514d\u91cd\u590d\u5730\u5740\u7684 \u5f53\u516c\u53f8\u5185\u7f51\u548c\u4e92\u8054\u7f51\u8fde\u63a5\u65f6\uff0c\u516c\u53f8\u5185\u7f51\u5206\u4e3a 2 \u4e2a\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u5bf9\u4e92\u8054\u7f51\u5f00\u653e\u7684\u670d\u52a1\u5668\uff0c\u53e6\u4e00\u90e8\u5206\u662f\u516c\u53f8\u5185\u90e8\u8bbe\u5907\uff0c\u5f00\u653e\u7684\u90e8\u5206\u5206\u914d\u5171\u6709\u5730\u5740\uff0c\u5185\u90e8\u8bbe\u5907\u5206\u914d\u79c1\u6709\u5730\u5740\uff0c\u4e0d\u80fd\u548c\u4e92\u8054\u7f51\u76f4\u63a5\u6536\u53d1\u7f51\u7edc\u5305\uff0c\u800c\u662f\u901a\u8fc7\u4e00\u79cd\u7279\u6b8a\u7684\u673a\u5236\u8fde\u63a5\uff0c\u53eb\u505a\u5730\u5740\u8f6c\u6362 \u5730\u5740\u8f6c\u6362\u7684\u57fa\u672c\u539f\u7406 \uff1a \u5730\u5740\u8f6c\u6362\u7684\u57fa\u672c\u539f\u7406\u662f\u5bf9 IP \u5934\u90e8\u4e2d\u7684 IP \u5730\u5740\u548c \u7aef\u53e3\u8fdb\u884c\u6539\u5199 TCP \u8fde\u63a5\u64cd\u4f5c\u7b2c\u4e00\u4e2a\u5305\u88ab\u8f6c\u53d1\u5230\u4e92\u8054\u7f51\u65f6\uff0c\u4f1a\u5c06\u53d1\u9001\u65b9\u7684 IP \u5730\u5740\u6539\u5199\u6210 \u5730\u5740\u8f6c\u6362\u8bbe\u5907\uff08\u8def\u7531\u5668\uff09\u7684\u4e92\u8054\u7f51\u63a5\u5165\u7aef\u53e3\u5730\u5740\uff0c\u7aef\u53e3\u53f7\u4f1a\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u7a7a\u95f2\u7aef\u53e3\uff0c\u7136\u540e\u6539\u5199\u524d\u540e\u7684 IP \u5730\u5740\u548c \u7aef\u53e3\u53f7\u4f1a\u586b\u5165\u8868\u4e2d\uff1b\u670d\u52a1\u5668\u53d1\u9001\u8fc7\u6765\u7684\u5305\u4e5f\u53ef\u4ee5\u6539\u5199\u4e3a\u5bf9\u5e94\u8868\u627e\u5230\u54cd\u5e94\u7684\u79c1\u6709\u5730\u5740\u548c\u7aef\u53e3\uff0c\u7136\u540e\u53d1\u7ed9\u5185\u7f51\uff1b\u5bb6\u5ead\u7f51\u7edc\u4e2d\u7684\u5de5\u4f5c\u8fc7\u7a0b\u4e5f\u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u53ea\u662f\u89c4\u6a21\u4e0d\u540c \u5730\u5740\u548c\u7aef\u53e3\u5bf9\u5e94\u8868\uff1a \u5171\u6709\u5730\u5740 \u7aef\u53e3\u53f7 \u79c1\u6709\u5730\u5740 \u7aef\u53e3\u53f7 ... ... ... ... \u6539\u5199\u7aef\u53e3\u53f7\u7684\u539f\u56e0 \uff1a \u65e9\u671f\u7684\u5730\u5740\u8f6c\u6362\u662f\u53ea\u6539\u5199\u5730\u5740\u7684\uff0c\u4f46\u662f\u8fd9\u8981\u8981\u6c42\u5171\u6709\u5730\u5740\u7684\u6570\u91cf\u7b49\u540c\u4e8e\u540c\u65f6\u8bbf\u95ee\u4e92\u8054\u7f51\u8bbe\u5907\u7684\u6570\u91cf\uff0c\u4eba\u591a\u4e86\u5c31\u4e0d\u884c\uff1b\u7aef\u53e3\u53f7 16 bit\uff0c\u53ef\u4ee5\u5206\u914d\u51e0\u4e07\u4e2a\u7aef\u53e3\uff0c\u63d0\u9ad8\u4e86\u516c\u6709\u5730\u5740\u7684\u5229\u7528\u7387 \u4ece\u4e92\u8054\u7f51\u8bbf\u95ee\u516c\u53f8\u5185\u7f51 \uff1a \u5185\u7f51\u5230\u4e92\u8054\u7f51\u7684\u5305\u5982\u679c\u8868\u4e2d\u6ca1\u6709\u662f\u53ef\u4ee5\u968f\u673a\u5206\u914d\u4e00\u4e2a\u7aef\u53e3\u7684\uff0c\u4f46\u662f\u4e92\u8054\u7f51\u5230\u5185\u7f51\u7684\u5305\u5982\u8868\u4e2d\u6ca1\u6709\u662f\u65e0\u6cd5\u6b63\u5e38\u8f6c\u53d1\u7684\uff1b\u8fd9\u610f\u5473\u8fd9\u5bf9\u4e8e\u6ca1\u6709\u8bbf\u95ee\u4e92\u8054\u7f51\u7684\u5185\u7f51\u8bbe\u5907\uff0c\u662f\u65e0\u6cd5\u4ece\u4e92\u8054\u7f51\u5411\u5176\u53d1\u9001\u7f51\u7edc\u5305\u7684\uff0c\u9664\u975e\u516c\u53f8\u4e3b\u52a8\u5141\u8bb8\uff0c\u8fd9\u79cd\u673a\u5236\u53ef\u4ee5\u9632\u6b62\u975e\u6cd5\u5165\u4fb5 \u5982\u679c\u8981\u4ece\u4e92\u8054\u7f51\u8bbf\u95ee\u5185\u7f51\uff0c\u9700\u8981\u8fdb\u884c\u624b\u52a8\u6dfb\u52a0\u8bb0\u5f55 \u8def\u7531\u5668\u7684\u5305\u8fc7\u6ee4\u529f\u80fd \uff1a \u5728\u5bf9\u5305\u8fdb\u884c\u8f6c\u53d1\u65f6\uff0c\u6839\u636e MAC \u5934\u90e8\uff0cIP \u5934\u90e8\uff0cTCP \u5934\u90e8\u7684\u5185\u5bb9\uff0c\u6309\u7167\u4e8b\u5148\u8bbe\u7f6e\u597d\u7684\u89c4\u5219\u51b3\u5b9a\u662f\u8f6c\u53d1\u8fd9\u4e2a\u5305\u8fd8\u662f\u4e22\u5f03\u8fd9\u4e2a\u5305\uff1b\u9632\u706b\u5899\u8bbe\u5907\u6216\u8005\u8f6f\u4ef6\u5927\u591a\u90fd\u662f\u5229\u7528\u8fd9\u4e00\u673a\u5236\u6765\u9632\u6b62\u975e\u6cd5\u5165\u4fb5\u7684","title":"3.4 \u8def\u7531\u5668\u7684\u9644\u52a0\u529f\u80fd"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#4","text":"","title":"4 \u901a\u8fc7\u63a5\u5165\u7f51\u8fdb\u5165\u4e92\u8054\u7f51\u5185\u90e8\uff1a\u63a2\u7d22\u63a5\u5165\u7f51\u548c\u7f51\u7edc\u8fd0\u8425\u5546"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#41-adsl","text":"","title":"4.1 ADSL \u63a5\u5165\u7f51\u7684\u7ed3\u6784\u548c\u5de5\u4f5c\u65b9\u5f0f"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#42-ftth","text":"","title":"4.2 \u5149\u7ea4\u63a5\u5165\u7f51\uff08FTTH\uff09"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#43-ppp","text":"","title":"4.3\u63a5\u5165\u7f51\u4e2d\u4f7f\u7528\u7684 PPP \u548c \u96a7\u9053"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#44","text":"","title":"4.4 \u7f51\u7edc\u8fd0\u8425\u5546\u7684\u5185\u90e8"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#45","text":"","title":"4.5 \u8de8\u8d8a\u8fd0\u8425\u5546\u7684\u7f51\u7edc\u5305"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#5","text":"","title":"5 \u670d\u52a1\u5668\u7aef\u7684\u5c40\u57df\u7f51\u4e2d\u6709\u4ec0\u4e48\u7384\u673a"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#51-web","text":"","title":"5.1 Web \u670d\u52a1\u5668\u7684\u90e8\u7f72\u5730\u70b9"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#52","text":"","title":"5.2 \u9632\u706b\u5899\u7684\u7ed3\u6784\u548c\u539f\u7406"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#53","text":"","title":"5.3 \u901a\u8fc7\u5c06\u8bf7\u6c42\u5e73\u5747\u5206\u914d\u7ed9\u591a\u53f0\u670d\u52a1\u5668\u6765\u5e73\u8861\u8d1f\u8f7d"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#54","text":"","title":"5.4 \u4f7f\u7528\u7f13\u5b58\u670d\u52a1\u5668\u5206\u62c5\u8d1f\u8f7d"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#55","text":"","title":"5.5 \u5185\u5bb9\u5206\u53d1\u670d\u52a1"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#6-web","text":"","title":"6 \u8bf7\u6c42\u5230\u8fbe Web \u670d\u52a1\u5668\uff0c\u54cd\u5e94\u8fd4\u56de\u6d4f\u89c8\u5668"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#61","text":"","title":"6.1 \u670d\u52a1\u5668\u6982\u89c8"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#62","text":"","title":"6.2 \u670d\u52a1\u5668\u7684\u63a5\u6536\u64cd\u4f5c"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#63-web","text":"","title":"6.3 Web \u670d\u52a1\u5668\u7a0b\u5e8f\u89e3\u91ca\u8bf7\u6c42\u6d88\u606f\u5e76\u4f5c\u51fa\u54cd\u5e94"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#64","text":"","title":"6.4 \u6d4f\u89c8\u5668\u63a5\u6536\u54cd\u5e94\u6d88\u606f\u5e76\u663e\u793a\u5185\u5bb9"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/#_2","text":"URL\uff1a\u7f51\u5740\uff0cUniform Resource Locator\uff0c\u7edf\u4e00\u8d44\u6e90\u5b9a\u4f4d\u7b26 FTP\uff1aFile Transfer Protocol\uff0c\u6587\u4ef6\u4f20\u8f93\u534f\u8bae HTTP\uff1aHypertext Transfer Protocol\uff0c\u8d85\u6587\u672c\u4f20\u9001\u534f\u8bae URI\uff1aUniform Resource Identifier\uff0c\u7edf\u4e00\u8d44\u6e90\u6807\u8bc6\u7b26 CGI\uff1a\u5bf9 Web \u670d\u52a1\u5668\u7a0b\u5e8f\u8c03\u7528\u5176\u4ed6\u7a0b\u5e8f\u7684\u89c4\u5219\u6240\u505a\u7684\u5b9a\u4e49\u5c31\u662f CGI\uff0c\u6309\u7167 CGI \u89c4\u8303\u5de5\u4f5c\u7684\u7a0b\u5e8f\u5c31\u662f CGI \u7a0b\u5e8f DNS\uff1aDomain Name System\uff0c\u57df\u540d\u670d\u52a1\u7cfb\u7edf \u534f\u8bae\u6808\uff1a\u64cd\u4f5c\u7cfb\u7edf\u5185\u90e8\u7684\u7f51\u7edc\u63a7\u5236\u8f6f\u4ef6\uff0c\u4e5f\u53eb \"\u534f\u8bae\u9a71\u52a8\" \"TCP/IP \u9a71\u52a8\" MAC \u5730\u5740\uff1a\u7b26\u5408 IEEE \u89c4\u683c\u7684\u5c40\u57df\u7f51\u8bbe\u5907\u90fd\u4f7f\u7528\u540c\u4e00\u89c4\u683c\u7684\u5730\u5740\uff0c\u53eb\u505a MAC \u5730\u5740 MTU\uff1aMaximum Transmission Unit\uff0c\u6700\u5927\u4f20\u8f93\u5355\u5143 MSS\uff1aMaximum Segment Size\uff0c\u6700\u5927\u5206\u6bb5\u5927\u5c0f\uff0cMTU \u51cf\u53bb TCP \u5934\u90e8\u548c IP \u5934\u90e8 SFD\uff1aStart Frame Delimiter\uff0c\u8d77\u59cb\u5e27\u5206\u754c\u7b26\uff0c\u7f51\u7edc\u5305\u5934\u90e8 FCS\uff1aFrame Check Sequence\uff0c\u5e27\u6821\u9a8c\u5e8f\u5217\uff0c\u7f51\u7edc\u5305\u7ed3\u5c3e ARP\uff1aAddress Resolution Protocol\uff0c\u5730\u5740\u89e3\u6790\u534f\u8bae\uff0c\u6839\u636e IP \u5730\u5740\u67e5\u8be2 MAC \u5730\u5740 \u4e2d\u7ee7\u5f0f\u96c6\u7ebf\u5668\uff1a\u7b80\u79f0\u96c6\u7ebf\u5668\uff0c\u4f1a\u5bf9\u6d88\u606f\u653e\u5927\u5e76\u5728\u7f51\u7edc\u4e2d\u8fdb\u884c\u5e7f\u64ad \u4ea4\u6362\u5f0f\u96c6\u7ebf\u5668\uff1a\u7b80\u79f0\u4ea4\u6362\u673a\uff0c\u4f1a\u6839\u636e MAC \u5730\u5740\u53d1\u9001\u7ed9\u6307\u5b9a\u8bbe\u5907 MAC\uff1aMedia Access Control MAU\uff1aMedium Attach Unit\uff0c\u4ecb\u8d28\u8fde\u63a5\u5355\u5143 PHY\uff1aPhysical Layer Device\uff0c\u7269\u7406\u5c42\u88c5\u7f6e\uff0c\u4ee5\u592a\u7f51\u6709\u591a\u91cd\u6d3e\u751f\u65b9\u5f0f\uff0c\u6bcf\u79cd\u65b9\u5f0f\u4e2d\u4fe1\u53f7\u6536\u53d1\u6a21\u5757\u7684\u540d\u79f0\u90fd\u4e0d\u4e00\u6837\uff0c\u73b0\u5728 100 Mbit/s \u4ee5\u4e0a\u7684\u4ee5\u592a\u7f51\u4e2d\u53eb\u505a PHY\uff0c\u4ee5\u524d\u4f4e\u901f\u65b9\u5f0f\u4e2d\u5219\u53eb\u505a MAU PPPoE\uff1aPPP to Ethernet\uff0c\u63a7\u5236 ADSL\uff0cFTTH \u7b49\u7f51\u7edc\u5bbd\u5e26\u7684\u65b9\u5f0f","title":"\u672f\u8bed"},{"location":"%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","text":"\u8ba1\u7b97\u673a\u7f51\u7edc \u00b6 \u6765\u81ea \u56fe\u89e3\u7f51\u7edc\u4ecb\u7ecd | \u5c0f\u6797coding (xiaolincoding.com) \uff0c\u8fd9\u91cc\u53ea\u505a\u7b80\u5355\u603b\u7ed3\uff0c\u56fe\u7247\u4e5f\u662f\u76f4\u63a5\u7528\u7684 \u4e8c\u3001\u57fa\u7840\u7bc7 \u00b6 2.1 TCP/IP \u7f51\u7edc\u6a21\u578b \u00b6 \u4e3a\u4ec0\u4e48\u8981\u6709 TCP/IP \u7f51\u7edc\u6a21\u578b\uff1f\uff1a\u540c\u4e00\u4e2a\u8bbe\u5907\u4e4b\u95f4\u7684\u901a\u4fe1\u65b9\u5f0f\u6709\u5f88\u591a\uff0c\u4f46\u662f\u4e0d\u540c\u8bbe\u5907\u591a\u79cd\u591a\u6837\uff0c\u9700\u8981\u7edf\u4e00\u7684\u534f\u8bae TCP/IP \u7f51\u7edc\u6a21\u578b\uff1a \u5e94\u7528\u5c42\uff08 Application Layer \uff09\uff1aHTTP\uff0cFTP\uff0cDNS\uff0cSTMP \u4f20\u8f93\u5c42\uff08 Transport Layer \uff09\uff1aTCP\uff0cUDP \u7f51\u7edc\u5c42\uff08 Internet Layer \uff09\uff1aIP \u7f51\u7edc\u63a5\u53e3\u5c42\uff08 Link Layer \uff09\uff1aMAC 2.2 \u952e\u5165\u7f51\u5740\u5230\u7f51\u9875\u663e\u793a\uff0c\u671f\u95f4\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f \u00b6 \u89e3\u6790 URI\uff1a URI \u7ec4\u6210 HTTP \u8bf7\u6c42\uff1a\u8bf7\u6c42\u884c\uff0c\u6d88\u606f\u5934\uff0c\u6d88\u606f\u4f53 DNS \u57df\u540d\u7684\u5c42\u7ea7\u5173\u7cfb \u57df\u540d\u7684\u89e3\u6790\u6d41\u7a0b \u534f\u8bae\u6808\uff1a\u901a\u8fc7 DNS \u83b7\u53d6\u5230 IP \u540e\uff0c\u5c31\u53ef\u4ee5\u628a HTTP \u7684\u4f20\u8f93\u5de5\u4f5c\u4ea4\u7ed9\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684 \u534f\u8bae\u6808 TCP TCP \u62a5\u6587\u5934\u683c\u5f0f\uff1a\u6e90\u7aef\u53e3\u53f7 \u76ee\u6807\u7aef\u53e3\u53f7\uff0c\u786e\u8ba4\u53f7\uff0c\u72b6\u6001\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\uff08\u6d41\u91cf\u63a7\u5236\uff0c\u62e5\u585e\u63a7\u5236\uff09 \u4e09\u6b21\u63e1\u624b MTU\uff0cMSS IP IP \u5305\u5934\uff1a\u6e90\u5730\u5740IP\uff0c\u76ee\u6807\u5730\u5740 IP \u8def\u7531\u8868 MAC\uff1a\u4ee5\u592a\u7f51\u4e2d MAC \u5934\u90e8 ARP \u7f51\u5361\uff1a\u6570\u5b57\u4fe1\u53f7 -> \u7535\u4fe1\u53f7 \u5f00\u5934\u52a0\u4e0a\u62a5\u5934\u548c\u8d77\u59cb\u5e27\u5206\u754c\u7b26\uff0c\u5728\u672b\u5c3e\u52a0\u4e0a\u7528\u4e8e\u68c0\u6d4b\u9519\u8bef\u7684\u5e27\u6821\u9a8c\u5e8f\u5217 \u4ea4\u6362\u673a\uff1a\u4ea4\u6362\u673a\u7aef\u53e3\u4e0d\u5177\u6709 MAC \u5730\u5740 MAC \u5730\u5740\u8868\uff0c\u627e\u4e0d\u5230\u5c31\u5e7f\u64ad \u8def\u7531\u5668\uff1a\u8def\u7531\u5668\u7684\u5404\u4e2a\u7aef\u53e3\u90fd\u5177\u6709 MAC \u5730\u5740\u548c IP \u5730\u5740 \u8def\u7531\u8868\uff1a\u67e5\u8868\u65f6\u5339\u914d\u4e3b\u673a\u53f7\uff0c\u62ff\u76ee\u6807\u5730\u5740\u548c\u8868\u4e2d\u6bcf\u9879\u7684\u5b50\u7f51\u63a9\u7801&\u540e\u518d\u548c\u5bf9\u5e94\u7684\u9879\u7684\u76ee\u6807\u5730\u5740\u5339\u914d \u5982\u679c\u8def\u7531\u8868\u4e2d\u7684\u7f51\u5173\u4e3a\u7a7a\uff0c\u8bf4\u660e \u63a5\u6536\u65b9 IP \u5730\u5740\u5c31\u662f\u7ec8\u70b9 \u5305\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u7684 \u6e90 IP \u5730\u5740\u548c \u76ee\u6807 IP \u5730\u5740\u4e0d\u4f1a\u53d8\uff0c\u53d8\u5316\u7684\u662f MAC \u5730\u5740 2.3 Linux \u7cfb\u7edf\u662f\u5982\u4f55\u6536\u53d1\u7f51\u7edc\u5305\u7684\uff1f \u00b6 OSI \u7f51\u7edc\u6a21\u578b\uff08 Open System Interconnection Reference Model \uff09\uff1a \u5e94\u7528\u5c42\uff0c\u8d1f\u8d23\u7ed9\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u7edf\u4e00\u7684\u63a5\u53e3\uff1b \u8868\u793a\u5c42\uff0c\u8d1f\u8d23\u628a\u6570\u636e\u8f6c\u6362\u6210\u517c\u5bb9\u53e6\u4e00\u4e2a\u7cfb\u7edf\u80fd\u8bc6\u522b\u7684\u683c\u5f0f\uff1b \u4f1a\u8bdd\u5c42\uff0c\u8d1f\u8d23\u5efa\u7acb\u3001\u7ba1\u7406\u548c\u7ec8\u6b62\u8868\u793a\u5c42\u5b9e\u4f53\u4e4b\u95f4\u7684\u901a\u4fe1\u4f1a\u8bdd\uff1b \u4f20\u8f93\u5c42\uff0c\u8d1f\u8d23\u7aef\u5230\u7aef\u7684\u6570\u636e\u4f20\u8f93\uff1b \u7f51\u7edc\u5c42\uff0c\u8d1f\u8d23\u6570\u636e\u7684\u8def\u7531\u3001\u8f6c\u53d1\u3001\u5206\u7247\uff1b \u6570\u636e\u94fe\u8def\u5c42\uff0c\u8d1f\u8d23\u6570\u636e\u7684\u5c01\u5e27\u548c\u5dee\u9519\u68c0\u6d4b\uff0c\u4ee5\u53ca MAC \u5bfb\u5740\uff1b \u7269\u7406\u5c42\uff0c\u8d1f\u8d23\u5728\u7269\u7406\u7f51\u7edc\u4e2d\u4f20\u8f93\u6570\u636e\u5e27\uff1b TCP/IP \u7f51\u7edc\u6a21\u578b\uff1a \u5e94\u7528\u5c42\uff0c\u8d1f\u8d23\u5411\u7528\u6237\u63d0\u4f9b\u4e00\u7ec4\u5e94\u7528\u7a0b\u5e8f\uff0c\u6bd4\u5982 HTTP\u3001DNS\u3001FTP \u7b49; \u4f20\u8f93\u5c42\uff0c\u8d1f\u8d23\u7aef\u5230\u7aef\u7684\u901a\u4fe1\uff0c\u6bd4\u5982 TCP\u3001UDP \u7b49\uff1b \u7f51\u7edc\u5c42\uff0c\u8d1f\u8d23\u7f51\u7edc\u5305\u7684\u5c01\u88c5\u3001\u5206\u7247\u3001\u8def\u7531\u3001\u8f6c\u53d1\uff0c\u6bd4\u5982 IP\u3001ICMP \u7b49\uff1b \u7f51\u7edc\u63a5\u53e3\u5c42\uff0c\u8d1f\u8d23\u7f51\u7edc\u5305\u5728\u7269\u7406\u7f51\u7edc\u4e2d\u7684\u4f20\u8f93\uff0c\u6bd4\u5982\u7f51\u7edc\u5305\u7684\u5c01\u5e27\u3001 MAC \u5bfb\u5740\u3001\u5dee\u9519\u68c0\u6d4b\uff0c\u4ee5\u53ca\u901a\u8fc7\u7f51\u5361\u4f20\u8f93\u7f51\u7edc\u5e27\u7b49\uff1b \u4e09\u3001HTTP \u7bc7 \u00b6 3.1 HTTP \u5e38\u89c1\u9762\u8bd5\u9898 \u00b6 HTTP \u57fa\u672c\u6982\u5ff5 HTTP \u662f\u4ec0\u4e48\uff1f \u90a3\u300cHTTP \u662f\u7528\u4e8e\u4ece\u4e92\u8054\u7f51\u670d\u52a1\u5668\u4f20\u8f93\u8d85\u6587\u672c\u5230\u672c\u5730\u6d4f\u89c8\u5668\u7684\u534f\u8bae \uff0c\u8fd9\u79cd\u8bf4\u6cd5\u6b63\u786e\u5417\uff1f HTTP \u5e38\u89c1\u7684\u72b6\u6001\u7801\u6709\u54ea\u4e9b\uff1f HTTP \u5e38\u89c1\u5b57\u6bb5\uff1f GET \u548c POST get \u548c post \u7684\u533a\u522b\uff1f GET \u548c POST \u65b9\u6cd5\u90fd\u662f\u5b89\u5168\u548c\u5e42\u7b49\u7684\u5417\uff1f HTTP \u7f13\u5b58\u6280\u672f HTTP\u7279\u6027 \u4f18\u70b9\uff1f\u7f3a\u70b9\uff1f\u300c\u65e0\u72b6\u6001\u3001\u660e\u6587\u4f20\u8f93\u300d HTTP \u4e0e HTTPS HTTPS \u548c HTTP \u7684\u533a\u522b\uff1f HTTP/1.1 HTTP/2 HTTP/3 \u6f14\u53d8 \u56db\u3001TCP \u7bc7 \u00b6","title":"\u8ba1\u7b97\u673a\u7f51\u7edc"},{"location":"%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_1","text":"\u6765\u81ea \u56fe\u89e3\u7f51\u7edc\u4ecb\u7ecd | \u5c0f\u6797coding (xiaolincoding.com) \uff0c\u8fd9\u91cc\u53ea\u505a\u7b80\u5355\u603b\u7ed3\uff0c\u56fe\u7247\u4e5f\u662f\u76f4\u63a5\u7528\u7684","title":"\u8ba1\u7b97\u673a\u7f51\u7edc"},{"location":"%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_2","text":"","title":"\u4e8c\u3001\u57fa\u7840\u7bc7"},{"location":"%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#21-tcpip","text":"\u4e3a\u4ec0\u4e48\u8981\u6709 TCP/IP \u7f51\u7edc\u6a21\u578b\uff1f\uff1a\u540c\u4e00\u4e2a\u8bbe\u5907\u4e4b\u95f4\u7684\u901a\u4fe1\u65b9\u5f0f\u6709\u5f88\u591a\uff0c\u4f46\u662f\u4e0d\u540c\u8bbe\u5907\u591a\u79cd\u591a\u6837\uff0c\u9700\u8981\u7edf\u4e00\u7684\u534f\u8bae TCP/IP \u7f51\u7edc\u6a21\u578b\uff1a \u5e94\u7528\u5c42\uff08 Application Layer \uff09\uff1aHTTP\uff0cFTP\uff0cDNS\uff0cSTMP \u4f20\u8f93\u5c42\uff08 Transport Layer \uff09\uff1aTCP\uff0cUDP \u7f51\u7edc\u5c42\uff08 Internet Layer \uff09\uff1aIP \u7f51\u7edc\u63a5\u53e3\u5c42\uff08 Link Layer \uff09\uff1aMAC","title":"2.1 TCP/IP \u7f51\u7edc\u6a21\u578b"},{"location":"%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#22","text":"\u89e3\u6790 URI\uff1a URI \u7ec4\u6210 HTTP \u8bf7\u6c42\uff1a\u8bf7\u6c42\u884c\uff0c\u6d88\u606f\u5934\uff0c\u6d88\u606f\u4f53 DNS \u57df\u540d\u7684\u5c42\u7ea7\u5173\u7cfb \u57df\u540d\u7684\u89e3\u6790\u6d41\u7a0b \u534f\u8bae\u6808\uff1a\u901a\u8fc7 DNS \u83b7\u53d6\u5230 IP \u540e\uff0c\u5c31\u53ef\u4ee5\u628a HTTP \u7684\u4f20\u8f93\u5de5\u4f5c\u4ea4\u7ed9\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684 \u534f\u8bae\u6808 TCP TCP \u62a5\u6587\u5934\u683c\u5f0f\uff1a\u6e90\u7aef\u53e3\u53f7 \u76ee\u6807\u7aef\u53e3\u53f7\uff0c\u786e\u8ba4\u53f7\uff0c\u72b6\u6001\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\uff08\u6d41\u91cf\u63a7\u5236\uff0c\u62e5\u585e\u63a7\u5236\uff09 \u4e09\u6b21\u63e1\u624b MTU\uff0cMSS IP IP \u5305\u5934\uff1a\u6e90\u5730\u5740IP\uff0c\u76ee\u6807\u5730\u5740 IP \u8def\u7531\u8868 MAC\uff1a\u4ee5\u592a\u7f51\u4e2d MAC \u5934\u90e8 ARP \u7f51\u5361\uff1a\u6570\u5b57\u4fe1\u53f7 -> \u7535\u4fe1\u53f7 \u5f00\u5934\u52a0\u4e0a\u62a5\u5934\u548c\u8d77\u59cb\u5e27\u5206\u754c\u7b26\uff0c\u5728\u672b\u5c3e\u52a0\u4e0a\u7528\u4e8e\u68c0\u6d4b\u9519\u8bef\u7684\u5e27\u6821\u9a8c\u5e8f\u5217 \u4ea4\u6362\u673a\uff1a\u4ea4\u6362\u673a\u7aef\u53e3\u4e0d\u5177\u6709 MAC \u5730\u5740 MAC \u5730\u5740\u8868\uff0c\u627e\u4e0d\u5230\u5c31\u5e7f\u64ad \u8def\u7531\u5668\uff1a\u8def\u7531\u5668\u7684\u5404\u4e2a\u7aef\u53e3\u90fd\u5177\u6709 MAC \u5730\u5740\u548c IP \u5730\u5740 \u8def\u7531\u8868\uff1a\u67e5\u8868\u65f6\u5339\u914d\u4e3b\u673a\u53f7\uff0c\u62ff\u76ee\u6807\u5730\u5740\u548c\u8868\u4e2d\u6bcf\u9879\u7684\u5b50\u7f51\u63a9\u7801&\u540e\u518d\u548c\u5bf9\u5e94\u7684\u9879\u7684\u76ee\u6807\u5730\u5740\u5339\u914d \u5982\u679c\u8def\u7531\u8868\u4e2d\u7684\u7f51\u5173\u4e3a\u7a7a\uff0c\u8bf4\u660e \u63a5\u6536\u65b9 IP \u5730\u5740\u5c31\u662f\u7ec8\u70b9 \u5305\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u7684 \u6e90 IP \u5730\u5740\u548c \u76ee\u6807 IP \u5730\u5740\u4e0d\u4f1a\u53d8\uff0c\u53d8\u5316\u7684\u662f MAC \u5730\u5740","title":"2.2 \u952e\u5165\u7f51\u5740\u5230\u7f51\u9875\u663e\u793a\uff0c\u671f\u95f4\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f"},{"location":"%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#23-linux","text":"OSI \u7f51\u7edc\u6a21\u578b\uff08 Open System Interconnection Reference Model \uff09\uff1a \u5e94\u7528\u5c42\uff0c\u8d1f\u8d23\u7ed9\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u7edf\u4e00\u7684\u63a5\u53e3\uff1b \u8868\u793a\u5c42\uff0c\u8d1f\u8d23\u628a\u6570\u636e\u8f6c\u6362\u6210\u517c\u5bb9\u53e6\u4e00\u4e2a\u7cfb\u7edf\u80fd\u8bc6\u522b\u7684\u683c\u5f0f\uff1b \u4f1a\u8bdd\u5c42\uff0c\u8d1f\u8d23\u5efa\u7acb\u3001\u7ba1\u7406\u548c\u7ec8\u6b62\u8868\u793a\u5c42\u5b9e\u4f53\u4e4b\u95f4\u7684\u901a\u4fe1\u4f1a\u8bdd\uff1b \u4f20\u8f93\u5c42\uff0c\u8d1f\u8d23\u7aef\u5230\u7aef\u7684\u6570\u636e\u4f20\u8f93\uff1b \u7f51\u7edc\u5c42\uff0c\u8d1f\u8d23\u6570\u636e\u7684\u8def\u7531\u3001\u8f6c\u53d1\u3001\u5206\u7247\uff1b \u6570\u636e\u94fe\u8def\u5c42\uff0c\u8d1f\u8d23\u6570\u636e\u7684\u5c01\u5e27\u548c\u5dee\u9519\u68c0\u6d4b\uff0c\u4ee5\u53ca MAC \u5bfb\u5740\uff1b \u7269\u7406\u5c42\uff0c\u8d1f\u8d23\u5728\u7269\u7406\u7f51\u7edc\u4e2d\u4f20\u8f93\u6570\u636e\u5e27\uff1b TCP/IP \u7f51\u7edc\u6a21\u578b\uff1a \u5e94\u7528\u5c42\uff0c\u8d1f\u8d23\u5411\u7528\u6237\u63d0\u4f9b\u4e00\u7ec4\u5e94\u7528\u7a0b\u5e8f\uff0c\u6bd4\u5982 HTTP\u3001DNS\u3001FTP \u7b49; \u4f20\u8f93\u5c42\uff0c\u8d1f\u8d23\u7aef\u5230\u7aef\u7684\u901a\u4fe1\uff0c\u6bd4\u5982 TCP\u3001UDP \u7b49\uff1b \u7f51\u7edc\u5c42\uff0c\u8d1f\u8d23\u7f51\u7edc\u5305\u7684\u5c01\u88c5\u3001\u5206\u7247\u3001\u8def\u7531\u3001\u8f6c\u53d1\uff0c\u6bd4\u5982 IP\u3001ICMP \u7b49\uff1b \u7f51\u7edc\u63a5\u53e3\u5c42\uff0c\u8d1f\u8d23\u7f51\u7edc\u5305\u5728\u7269\u7406\u7f51\u7edc\u4e2d\u7684\u4f20\u8f93\uff0c\u6bd4\u5982\u7f51\u7edc\u5305\u7684\u5c01\u5e27\u3001 MAC \u5bfb\u5740\u3001\u5dee\u9519\u68c0\u6d4b\uff0c\u4ee5\u53ca\u901a\u8fc7\u7f51\u5361\u4f20\u8f93\u7f51\u7edc\u5e27\u7b49\uff1b","title":"2.3 Linux \u7cfb\u7edf\u662f\u5982\u4f55\u6536\u53d1\u7f51\u7edc\u5305\u7684\uff1f"},{"location":"%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#http","text":"","title":"\u4e09\u3001HTTP \u7bc7"},{"location":"%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#31-http","text":"HTTP \u57fa\u672c\u6982\u5ff5 HTTP \u662f\u4ec0\u4e48\uff1f \u90a3\u300cHTTP \u662f\u7528\u4e8e\u4ece\u4e92\u8054\u7f51\u670d\u52a1\u5668\u4f20\u8f93\u8d85\u6587\u672c\u5230\u672c\u5730\u6d4f\u89c8\u5668\u7684\u534f\u8bae \uff0c\u8fd9\u79cd\u8bf4\u6cd5\u6b63\u786e\u5417\uff1f HTTP \u5e38\u89c1\u7684\u72b6\u6001\u7801\u6709\u54ea\u4e9b\uff1f HTTP \u5e38\u89c1\u5b57\u6bb5\uff1f GET \u548c POST get \u548c post \u7684\u533a\u522b\uff1f GET \u548c POST \u65b9\u6cd5\u90fd\u662f\u5b89\u5168\u548c\u5e42\u7b49\u7684\u5417\uff1f HTTP \u7f13\u5b58\u6280\u672f HTTP\u7279\u6027 \u4f18\u70b9\uff1f\u7f3a\u70b9\uff1f\u300c\u65e0\u72b6\u6001\u3001\u660e\u6587\u4f20\u8f93\u300d HTTP \u4e0e HTTPS HTTPS \u548c HTTP \u7684\u533a\u522b\uff1f HTTP/1.1 HTTP/2 HTTP/3 \u6f14\u53d8","title":"3.1 HTTP \u5e38\u89c1\u9762\u8bd5\u9898"},{"location":"%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#tcp","text":"","title":"\u56db\u3001TCP \u7bc7"}]}