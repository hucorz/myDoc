{"config":{"indexing":"full","lang":["ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u4e00\u540d\u849f\u84bb\u7684\u5b66\u4e60\u7b14\u8bb0 \u00b6 \u6b64\u6587\u6863\u4ec5\u4f5c\u4e3a\u4e2a\u4eba\u7684\u5b66\u4e60\u7b14\u8bb0 \u535a\u5ba2\uff1a hucorz's blog \u5982\u6709\u9519\u8bef\u5341\u5206\u62b1\u6b49\uff0c\u6b22\u8fce\u6307\u6b63\uff1aQQ3044464174","title":"Home"},{"location":"#_1","text":"\u6b64\u6587\u6863\u4ec5\u4f5c\u4e3a\u4e2a\u4eba\u7684\u5b66\u4e60\u7b14\u8bb0 \u535a\u5ba2\uff1a hucorz's blog \u5982\u6709\u9519\u8bef\u5341\u5206\u62b1\u6b49\uff0c\u6b22\u8fce\u6307\u6b63\uff1aQQ3044464174","title":"\u4e00\u540d\u849f\u84bb\u7684\u5b66\u4e60\u7b14\u8bb0"},{"location":"OI/STL/","text":"STL \u00b6 string \u00b6 \u5b57\u7b26\u4e32 \u6784\u9020\u51fd\u6570 string s = \"\" s1 = s2 \u589e\u52a0\u5143\u7d20 s += s2 //\u76f4\u63a5\u7528 + \u5373\u53ef s += \"new string\" \u5220\u9664\u5143\u7d20 string & erase ( size_t pos = 0 , size_t n ) //\u5220\u9664\u4ecepos\u5f00\u59cb\u7684n\u4e2a\u5b57\u7b26 iterator erase ( iterator ) //\u5220\u9664\u4e00\u4e2a iterator erase ( iterator first , iterator last ) //\u5220\u9664\u8303\u56f4 iterator erase ( remove ( str . begin (), str . end (), 'a' ), str . end ()) //\u5220\u9664\u7279\u5b9a\u5b57\u7b26 \u8fed\u4ee3\u5668 iterator begin (); //\u5934\u8fed\u4ee3\u5668 iterator end (); //\u5c3e\u8fed\u4ee3\u5668 \u5176\u4ed6 sort ( string , iterator l , iterator r ) //\u6392\u5e8f [l, r) string substr ( int pos , int n ) //\u83b7\u53d6\u8fde\u7eed\u5b50\u4e32\uff0c\u4ece pos \u5f00\u59cb\u7684 n \u4e2a\u5b57\u7b26\uff0c-1\u8868\u793a\u5230\u6700\u540e bool empty () //\u5224\u65ad\u662f\u5426\u4e3a\u7a7a int size () //\u5b57\u7b26\u4e2a\u6570 bool isalnum ( char ) //\u5982\u679cc\u662f\u5b57\u6bcd\u6216\u6570\u5b57\uff0c\u8fd4\u56de true bool isalpha ( char ) //\u5982\u679cc\u662f\u5b57\u6bcd\uff0c\u8fd4\u56detrue bool iscntrl ( char ) //\u5982\u679cc\u662f\u63a7\u5236\u7b26\uff0c\u8fd4\u56detrue bool isdigit ( char ) //\u5982\u679cc\u662f\u6570\u5b57\uff0c\u8fd4\u56detrue bool isgraph ( char ) //\u5982\u679cc\u4e0d\u662f\u7a7a\u683c\uff0c\u8fd4\u56de\u4e3atrue bool islower ( char ) //\u5982\u679cc\u662f\u5c0f\u5199\u5b57\u6bcd\uff0c\u8fd4\u56de\u4e3atrue bool isupper ( char ) //\u5982\u679cc\u662f\u5927\u5199\u5b57\u7b26\uff0c\u8fd4\u56de\u4e3atrue bool isprint ( char ) //\u5982\u679cc\u662f\u53ef\u6253\u5370\u7684\u5b57\u7b26\uff0c\u8fd4\u56de\u4e3atrue bool ispunct ( char ) //\u5982\u679cc\u662f\u6807\u70b9\u7b26\u53f7\uff0c\u8fd4\u56de\u4e3atrue bool isspace ( char ) //\u5982\u679cc\u662f\u7a7a\u767d\u5b57\u7b26\uff0c\u8fd4\u56de\u4e3atrue bool isxdigit ( char ) //\u5982\u679cc\u662f\u5341\u516d\u8fdb\u5236\u6570\uff0c\u8fd4\u56de\u4e3atrue vector \u00b6 \\(include<vector>\\) \u6784\u9020\u51fd\u6570 vector () //\u521b\u5efa\u4e00\u4e2a\u7a7avector vector ( int nSize ) //\u521b\u5efa\u4e00\u4e2avector,\u5143\u7d20\u4e2a\u6570\u4e3anSize vector ( int nSize , const T & t ) //\u521b\u5efa\u4e00\u4e2avector\uff0c\u5143\u7d20\u4e2a\u6570\u4e3anSize,\u4e14\u503c\u5747\u4e3at vector ( const vector & ) //\u590d\u5236\u6784\u9020\u51fd\u6570 vector ( begin , end ) //\u590d\u5236[begin,end)\u533a\u95f4\u5185\u53e6\u4e00\u4e2a\u6570\u7ec4\u7684\u5143\u7d20\u5230vector\u4e2d \u589e\u52a0\u5143\u7d20 void push_back ( const T & x ) //\u5411\u91cf\u5c3e\u90e8\u589e\u52a0\u4e00\u4e2a\u5143\u7d20X iterator insert ( iterator it , const T & x ) //\u8fed\u4ee3\u5668\u6307\u5411\u5143\u7d20\u524d\u589e\u52a0\u4e00\u4e2a\u5143\u7d20x iterator insert ( iterator it , int n , const T & x ) //\u8fed\u4ee3\u5668\u6307\u5411\u5143\u7d20\u524d\u589e\u52a0n\u4e2a\u76f8\u540c\u7684\u5143\u7d20x iterator insert ( iterator it , iterator first , iterator last ) //\u8fed\u4ee3\u5668\u6307\u5411\u5143\u7d20\u524d\u63d2\u5165\u53e6\u4e00\u4e2a\u5411\u91cf\u7684[first,last)\u7684\u6570\u636e \u5220\u9664\u5143\u7d20 iterator erase ( iterator it ) //\u5220\u9664\u8fed\u4ee3\u5668\u6307\u5411\u5143\u7d20 iterator erase ( iterator first , iterator last ) //\u5220\u9664[first,last)\u4e2d\u5143\u7d20 void pop_back () //\u5220\u9664\u5411\u91cf\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20 void clear () //\u6e05\u7a7a\u5411\u91cf\u4e2d\u6240\u6709\u5143\u7d20 \u8fed\u4ee3\u5668 reference at ( int pos ) //\u8fd4\u56depos\u4f4d\u7f6e\u5143\u7d20\u7684\u5f15\u7528 reference front () //\u8fd4\u56de\u9996\u5143\u7d20\u7684\u5f15\u7528 reference back () //\u8fd4\u56de\u5c3e\u5143\u7d20\u7684\u5f15\u7528 iterator begin () //\u8fd4\u56de\u5411\u91cf\u5934\u6307\u9488\uff0c\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20 iterator end () //\u8fd4\u56de\u5411\u91cf\u5c3e\u6307\u9488\uff0c\u6307\u5411\u5411\u91cf\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e reverse_iterator rbegin () //\u53cd\u5411\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20 reverse_iterator rend () //\u53cd\u5411\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e4b\u524d\u7684\u4f4d\u7f6e \u5176\u4ed6 int size () const //\u8fd4\u56de\u5411\u91cf\u4e2d\u5143\u7d20\u7684\u4e2a\u6570 int capacity () const //\u8fd4\u56de\u5f53\u524d\u5411\u91cf\u6240\u80fd\u5bb9\u7eb3\u7684\u6700\u5927\u5143\u7d20\u503c int max_size () const //\u8fd4\u56de\u6700\u5927\u53ef\u5141\u8bb8\u7684vector\u5143\u7d20\u6570\u91cf\u503c bool empty () const //\u5224\u65ad\u5411\u91cf\u662f\u5426\u4e3a\u7a7a\uff0c\u82e5\u4e3a\u7a7a\uff0c\u5219\u5411\u91cf\u4e2d\u65e0\u5143\u7d20 void swap ( vector & ) //\u4ea4\u6362\u4e24\u4e2a\u540c\u7c7b\u578b\u5411\u91cf\u7684\u6570\u636e void assign ( int n , const T & x ) //\u8bbe\u7f6e\u5411\u91cf\u4e2d\u524dn\u4e2a\u5143\u7d20\u7684\u503c\u4e3ax void assign ( const_iterator first , const_iterator last ) //\u5411\u91cf\u4e2d[first,last)\u4e2d\u5143\u7d20\u8bbe\u7f6e\u6210\u5f53\u524d\u5411\u91cf\u5143\u7d20 stack \u00b6 \\(include<stack>\\) \u6784\u9020\u51fd\u6570 list < int > c0 //\u7a7a\u94fe\u8868 list < int > c1 ( 3 ) //\u5efa\u4e00\u4e2a\u542b3\u4e2a\u9ed8\u8ba4\u503c\u662f0\u7684\u5143\u7d20\u7684\u94fe\u8868 list < int > c2 ( 5 , 2 ) //\u5efa\u4e00\u4e2a\u542b5\u4e2a\u5143\u7d20\u7684\u94fe\u8868\uff0c\u503c\u90fd\u662f2 list < int > c4 ( c2 ) //\u590d\u5236 list < int > c5 ( iterator beg , iterator end ) //\u533a\u95f4[beg, end)\u505a\u4e3a\u5143\u7d20\u521d\u503c push ( const T & x ) //\u5165\u6808 T pop () //\u51fa\u6808 T top () //\u83b7\u53d6\u6808\u9876 bool empty () //\u5224\u65ad\u7a7a\u6808 int size () //\u8fd4\u56de\u6808\u5143\u7d20\u4e2a\u6570 list \u00b6 \\(include <list>\\) \u6784\u9020\u51fd\u6570 c1 = c2 //\u590d\u5236 assign ( n , elem ) //\u8d4b\u503cn\u4e2aelem assign ( beg , end ) //\u533a\u95f4[beg,end\uff09\u5185\u7684\u5143\u7d20\u8d4b\u503c\u7ed9c swap ( c1 , c2 ) //\u4ea4\u6362 \u589e\u52a0\u5143\u7d20 push_front () //\u9996\u52a0 push_back () //\u5c3e\u52a0 insert ( pos , num ) //\u5728pos\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20num\uff0c\u8fd4\u56de\u65b0\u5143\u7d20\u4f4d\u7f6e insert ( pos , n , elem ) //\u5728pos\u4f4d\u7f6e\u4e0a\u63d2\u5165n\u4e2aelem\u526f\u672c\uff0c\u65e0\u8fd4\u56de\u503c insert ( pos , beg , end ) //\u5728pos\u4f4d\u7f6e\u4e0a\u63d2\u5165\u533a\u95f4[beg,end)\u5185\u7684\u6240\u6709\u5143\u7d20\u7684\u526f\u672c\uff0c\u6ca1\u6709\u8fd4\u56de\u503c \u5220\u9664\u5143\u7d20 pop_front () //\u9996\u5220 pop_back () //\u5c3e\u5220 erase ( pos ) \u3000\u3000\u3000\u3000 //\u5220\u9664pos\u4f4d\u7f6e\u7684\u5143\u7d20\uff0c\u8fd4\u56de\u4e0b\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e erase ( beg , end ) //\u79fb\u9664[beg, end)\u533a\u95f4\u5185\u7684\u6240\u6709\u5143\u7d20\uff0c\u8fd4\u56de\u4e0b\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e remove ( num ) //\u5220\u9664\u94fe\u8868\u4e2d\u5339\u914dnum\u7684\u5143\u7d20 remove_if ( cmp ) //\u5220\u9664\u6761\u4ef6\u6ee1\u8db3\u7684\u5143\u7d20,\u53c2\u6570\u4e3a\u81ea\u5b9a\u4e49\u7684\u56de\u8c03\u51fd\u6570 clear () //\u6e05\u7a7a \u8fed\u4ee3\u5668 list < T >:: iterator it c . begin () c . end () c . rbegin () //\u9006\u5411\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20,\u5373c\u94fe\u8868\u7684\u6700\u540e\u4e00\u4e2a\u6570\u636e\u3002 c . rend () //\u8fd4\u56de\u9006\u5411\u94fe\u8868\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e,\u5373c\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u6570\u636e\u518d\u5f80\u524d\u7684\u4f4d\u7f6e\u3002it++ \u5176\u4ed6 T front () //\u9996\u5143\u7d20 T back () //\u5c3e\u5143 bool empty () //\u5224\u65ad\u662f\u5426\u4e3a\u7a7a int size () //\u6709\u6548\u5143\u7d20\u4e2a\u6570 int max_size () //\u8fd4\u56de\u5bb9\u5668\u6700\u5927\u7684\u53ef\u4ee5\u5b58\u50a8\u7684\u5143\u7d20 bool c1 == c2 //\u6bd4\u8f83 sort () //\u5355\u94fe\u8868\u6392\u5e8f unique () //\u53bb\u91cd\uff0c\u8981\u5148\u6392\u5e8f c1 . merge ( c2 ) //\u5408\u5e762\u4e2a\u6709\u5e8f\u7684\u94fe\u8868\u5e76\u4f7f\u4e4b\u6709\u5e8f,\u4ece\u65b0\u653e\u5230c1\u91cc,\u91ca\u653ec2 c1 . merge ( c2 , cmp ) //\u5408\u5e762\u4e2a\u6709\u5e8f\u7684\u94fe\u8868\u5e76\u4f7f\u4e4b\u6309\u7167\u81ea\u5b9a\u4e49\u89c4\u5219\u6392\u5e8f\u4e4b\u540e\u4ece\u65b0\u653e\u5230c1\u4e2d,\u91ca\u653ec2 reverse () //\u53cd\u8f6c resize ( int ) //\u91cd\u7f6e\u6709\u6548\u5143\u7d20\u4e2a\u6570 set \u00b6 \\(include<set>\\) \u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4e0d\u4f1a\u5b58\u50a8\u91cd\u590d\u7684\u5143\u7d20 \u6784\u9020\u51fd\u6570 swap ( set , set ) // \u4ea4\u6362\u4e24\u4e2a\u96c6\u5408\u53d8\u91cf s1 = s2 \u589e\u52a0\u5143\u7d20 insert ( T ) // \u5728\u96c6\u5408\u4e2d\u63d2\u5165\u5143\u7d20 \u5220\u9664\u5143\u7d20 clear () // \u6e05\u9664\u6240\u6709\u5143\u7d20 erase ( T ) // \u5220\u9664\u96c6\u5408\u4e2d\u7684\u5143\u7d20 \u8fed\u4ee3\u5668 set < T >:: iterator it begin () // \u8fd4\u56de\u6307\u5411\u9996\u5143\u7d20\u7684\u8fed\u4ee3\u5668 end () // \u8fd4\u56de\u6307\u5411\u5c3e\u5143\u7d20\u7684\u540e\u4e00\u4f4d\u7684\u8fed\u4ee3\u5668 rbegin () // \u53cd\u5411\u8fed\u4ee3\u5668 rend () // \u5176\u4ed6 int count ( T ) // \u8fd4\u56de\u67d0\u4e2a\u5143\u7d20\u7684\u4e2a\u6570,0\u62161\uff0c\u53ea\u80fd\u5224\u65ad\u662f\u5426\u5b58\u5728 bool empty () // \u5224\u65ad\u96c6\u5408\u4e3a\u7a7a int size () // \u96c6\u5408\u4e2d\u5143\u7d20\u7684\u6570\u76ee max_size () // \u8fd4\u56de\u96c6\u5408\u80fd\u5bb9\u7eb3\u7684\u5143\u7d20\u7684\u6700\u5927\u9650\u503c iterator find ( T ) // \u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u88ab\u67e5\u627e\u5230\u5143\u7d20\u7684\u8fed\u4ee3\u5668,\u65e0\u5219\u8fd4\u56deend() iterator lower_bound ( T ) // \u8fd4\u56de\u6307\u5411\u5927\u4e8e\u6216\u7b49\u4e8e\u67d0\u503c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 iterator upper_bound ( T ) // \u8fd4\u56de\u5927\u4e8e\u67d0\u4e2a\u503c\u5143\u7d20\u7684\u8fed\u4ee3\u5668 pair \u00b6 \\(include<utility>\\) \u4e24\u4efb\u610f\u7c7b\u578b\u5143\u7d20\u7684\u7ed3\u6784\u4f53 pair < int , double > p1 ; //\u9ed8\u8ba4\u6784\u9020\u51fd\u6570 pair < int , double > p1 ( 1 , 1.1 ); //\u542b\u53c2\u6784\u9020\u51fd\u6570 pair < int , double > p1 ( p2 ); //\u62f7\u8d1d\u6784\u9020\u51fd\u6570 p1 = p2 p1 . first //\u83b7\u53d6 \u7b2c\u4e00\u4e2a\u5143\u7d20 p1 . second //\u83b7\u53d6 \u7b2c\u4e8c\u4e2a\u5143\u7d20 p1 < p2 //\u53ef\u4ee5\u76f4\u63a5\u6bd4\u8f83,\u5148\u6bd4\u8f83first\uff0c\u518d\u6bd4\u8f83second map \u00b6 \\(include<map>\\) \u5efa\u7acbKey\uff0dvalue\u7684\u5bf9\u5e94\uff0ckey \u548c value \u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\u3002 \u6784\u9020\u51fd\u6570 map < int , string > m1 ; //\u7d22\u5f15\u4e3a int\u578b map < string , int > m2 ; //\u7d22\u5f15\u4e3a string \u589e\u52a0\u5143\u7d20 insert ( pair < int , string > ( 1 , \"string1\" )) //\u8fd9\u91cc\u7684\u5143\u7d20\u53ef\u4ee5\u662f\u5143\u7d20\u7c7b\u578b\u4e0e\u58f0\u660e\u5339\u914d\u76842\u5143\u7d20\u7ed3\u6784\u4f53\u6216\u8005pair\uff0cinsert\u4e0d\u80fd\u8986\u76d6\u539f\u503c map < int , string > m1 //\u6570\u7ec4\u53ef\u4ee5\u8986\u76d6\u539f\u503c m1 [ 1 ] = \"string1\" //\u5982\u679c\u6ca1\u6709\u5bf9\u5e94 key \u503c\u4f1a\u81ea\u52a8\u6dfb\u52a0 m1 [ 2 ] = \"string2\" map < string , int > m2 m2 [ \"string1\" ] = 1 m2 [ \"string2\" ] = 2 \u5220\u9664\u5143\u7d20 erase ( iter ) erase ( iterator first , iterator second ) //\u5220\u9664\u8303\u56f4 clear ( \uff09 //\u5220\u9664\u6240\u6709\u5143\u7d20 \u8fed\u4ee3\u5668 iterator begin () iterator end () iterator rbegin () //\u8fd4\u56de\u4e00\u4e2a\u6307\u5411map\u5c3e\u90e8\u7684\u9006\u5411\u8fed\u4ee3\u5668 iterator rend () //\u8fd4\u56de\u4e00\u4e2a\u6307\u5411map\u5934\u90e8\u7684\u9006\u5411\u8fed\u4ee3\u5668 map < int , string >:: iterator iter ; for ( iter = m1 . begin (); iter != m1 . end (); iter ++ ) //\u904d\u5386 cout << iter -> first << ' ' << iter -> second << endl ; \u5176\u4ed6 int size () // \u83b7\u53d6\u5927\u5c0f iterator find ( T ) // T \u662f value \u7c7b\u578b\uff0c\u6ca1\u627e\u5230\u8fd4\u56de end() swap ( m1 [ key1 ], m1 [ key2 ]) //\u4ea4\u6362 value bool empty () //\u5982\u679cmap\u4e3a\u7a7a\u5219\u8fd4\u56detrue int count () //\u8fd4\u56de\u6307\u5b9a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570 queue \u00b6 \\(include<queue>\\) \u5148\u8fdb\u5148\u51fa\uff08FIFO\uff09\uff0c\u53ea\u80fd\u5c3e\u52a0\u548c\u9996\u5220\uff0c\u53ea\u80fd\u8bbf\u95ee\u961f\u9996\u548c\u961f\u5c3e\u5143\u7d20\uff0c bool empty () //\u961f\u5217\u4e3a\u7a7a\u8fd4\u56de\u771f T front () //\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7d20 T back () //\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20 int size () //\u8fd4\u56de\u5143\u7d20\u4e2a\u6570 push () //\u961f\u5c3e\u52a0\u5165\u5143\u7d20 pop () //\u5220\u9664\u961f\u9996\u5143\u7d20 swap () //\u4ea4\u6362\u5185\u5bb9 \u6e05\u7a7a\u961f\u5217\u7684\u4e09\u79cd\u65b9\u6cd5\uff08\u6ca1\u6709clear\u64cd\u4f5c\uff09 //\u7528\u7a7a\u961f\u5217\u8d4b\u503c q1 = queue < T > (); //\u4e0d\u65ad\u9996\u5220 while ( ! q . empty ()) q . pop (); //\u81ea\u5df1\u5b9a\u4e49clear void clear ( queue < T >& q ){ queue < T > empty ; swap ( empty , q ); } priority_queue \u00b6 \\(include<queue>\\) \u9ed8\u8ba4\u5927\u6839\u5806 priority_queue \u6570\u636e\u7c7b\u578b \u5bb9\u5668 \u6bd4\u8f83\u65b9\u5f0f \u5176\u4e2d Container\u9700\u8981\u7528\u6570\u7ec4\u5b9e\u73b0\u7684\u5bb9\u5668 \u58f0\u660e priority_queue < T > p ; priority_queue < int , vector < int > , greater < int > > p ; //\u5c0f\u6839\u5806 \u5728sort\u91ccgreater\u662f\u4ece\u5927\u5230\u5c0f priority_queue < int , vector < int > , less < int > > p ; //\u5927\u6839\u5806 /*\u81ea\u5b9a\u4e49\u4f18\u5148\u7ea7\u76842\u79cd\u65b9\u5f0f*/ // struct node { \u3000\u3000 int x ; \u3000\u3000 bool operator < ( const node & a ) const { \u3000\u3000\u3000\u3000 return a . x < x ; //\u5c0f\u6839\u5806 \u3000\u3000 } }; priority_queue < node > p ; // struct cmp { \u3000\u3000 bool operator ()( int x , int y ) { \u3000\u3000\u3000\u3000 return \u3000 x > y ; //\u5c0f\u6839\u5806 \u3000\u3000 } }; priority_queue < int , vector < int > , cmp > q ; \u6210\u5458\u51fd\u6570 top () //\u8bbf\u95ee\u961f\u5934\u5143\u7d20 empty () //\u961f\u5217\u662f\u5426\u4e3a\u7a7a size () //\u8fd4\u56de\u961f\u5217\u5185\u5143\u7d20\u4e2a\u6570 push () //\u961f\u5c3e\u52a0\u5165\u5143\u7d20\uff08\u5e76\u6392\u5e8f\uff09 pop () //\u5f39\u51fa\u961f\u9876\u5143\u7d20 swap () //\u4ea4\u6362\u5185\u5bb9 deque \u00b6 \\(include<queue>\\) \u6784\u9020\u51fd\u6570 deque < T > deq ; //\u7a7adeque deque ( n ) //\u5143\u7d20\u4e2a\u6570\u4e3an deque ( n , elem ) //\u5143\u7d20\u4e2a\u6570\u4e3an,\u4e14\u503c\u5747\u4e3aelem deque ( beg , end ) //[beg, end) deque ( const deque & deq ) //\u590d\u5236\u6784\u9020\u51fd\u6570 \u589e\u52a0\u51fd\u6570 void push_front ( elem ) //\u5934\u63d2 void push_back ( elem ) //\u5c3e\u63d2 ? insert ( pos , elem ) //\u67d0\u4e00\u5143\u7d20\u524d\u589e\u52a0\u4e00\u4e2a\u5143\u7d20x void insert ( pos , n , elem ) //\u67d0\u4e00\u5143\u7d20\u524d\u589e\u52a0n\u4e2a\u76f8\u540c\u7684\u5143\u7d20x void insert ( pos , beg , endt ) //\u67d0\u4e00\u5143\u7d20\u524d\u63d2\u5165\u53e6\u4e00\u4e2a\u76f8\u540c\u7c7b\u578b\u5411\u91cf\u7684[forst,last)\u95f4\u7684\u6570\u636e \u5220\u9664\u51fd\u6570 ? erase ( pos ) //\u5220\u9664\u67d0\u4e00\u4e2a\u5143\u7d20,\u8fd4\u56de\u4e0b\u4e00\u4e2a\u5143\u7d20\u4f4d\u7f6e ? erase ( beg , end ) //\u5220\u9664[first,last\uff09\u4e2d\u7684\u5143\u7d20,\u8fd4\u56de\u4e0b\u4e00\u4e2a\u5143\u7d20\u4f4d\u7f6e void pop_front () //\u5934\u5220 void pop_back () //\u5c3e\u5220 void clear () \u904d\u5386\u51fd\u6570 reference at ( pos ) //\u8fd4\u56depos\u4f4d\u7f6e\u5143\u7d20\u7684\u5f15\u7528 reference front () //\u8fd4\u56de\u9996\u5143\u7d20\u7684\u5f15\u7528 reference back () //\u8fd4\u56de\u5c3e\u5143\u7d20\u7684\u5f15\u7528 iterator begin () //\u8fd4\u56de\u5934\u8fed\u4ee3\u5668 iterator end () //\u8fd4\u56de\u5c3e\u8fed\u4ee3\u5668\uff08\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a reverse_iterator rbegin () //\u53cd\u5411\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20 reverse_iterator rend () //\u53cd\u5411\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u524d\u4e00\u4e2a\u5143\u7d20 \u5176\u4ed6\u51fd\u6570 bool empty () //\u5411\u91cf\u662f\u5426\u4e3a\u7a7a int size () //\u8fd4\u56de\u5143\u7d20\u7684\u4e2a\u6570 int max_size () //\u8fd4\u56de\u6700\u5927\u53ef\u5141\u8bb8\u7684\u5143\u7d20\u6570\u91cf void swap ( deque & ) //\u4ea4\u6362\u4e24\u4e2a\u540c\u7c7b\u578bdeque\u7684\u6570\u636e void assign ( beg , end ) //\u5c06[beg, end)\u533a\u95f4\u4e2d\u7684\u6570\u636e\u62f7\u8d1d\u8d4b\u503c\u7ed9\u672c\u8eab\u3002 void assign ( n , elem ) //\u5c06n\u4e2aelem\u62f7\u8d1d\u8d4b\u503c\u7ed9\u672c\u8eab\u3002 algorithm \u00b6 lower_bound() \u00b6 \u4e8c\u5206\u67e5\u627e \u5bf9\u4e8e\u5347\u5e8f\u6570\u7ec4\uff1a lower_bound( begin, end, num)\uff1a\u67e5\u627e\u7b2c\u4e00\u4e2a \u5927\u4e8e\u7b49\u4e8e num \u7684\u6570\u5e76\u8fd4\u56de\u5176\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u8fd4\u56deend\u3002\u8fd4\u56de\u503c\u51cf\u53bbbegine\u5373\u7d22\u5f15\u4e0b\u6807 upper_bound( begin, end, num)\uff1a \u5927\u4e8e \u5bf9\u4e8e\u964d\u5e8f\u6570\u7ec4\uff1a\u9700\u8981\u91cd\u8f7d //\u5347\u5e8f a\u6570\u7ec4\u4e2d k \u7684\u4e2a\u6570 upper_bound ( a , a + n , k ) - lower_bound ( a , a + n , k ); next_permutation \u00b6 //\u6c42\u6309\u7167\u5b57\u5178\u5e8f\u7684\u5168\u6392\u5217 int a [ 4 ] = { 1 , 2 , 3 , 4 }; while ( next_permutation ( a , a + 4 )) { for ( int i = 0 ; i < 4 ; i ++ ) cout << a [ i ] << \" \" ; cout << endl ; } min_element/max_element \u00b6 int maxx = * max_element ( a , a + n );","title":"STL"},{"location":"OI/STL/#stl","text":"","title":"STL"},{"location":"OI/STL/#string","text":"\u5b57\u7b26\u4e32 \u6784\u9020\u51fd\u6570 string s = \"\" s1 = s2 \u589e\u52a0\u5143\u7d20 s += s2 //\u76f4\u63a5\u7528 + \u5373\u53ef s += \"new string\" \u5220\u9664\u5143\u7d20 string & erase ( size_t pos = 0 , size_t n ) //\u5220\u9664\u4ecepos\u5f00\u59cb\u7684n\u4e2a\u5b57\u7b26 iterator erase ( iterator ) //\u5220\u9664\u4e00\u4e2a iterator erase ( iterator first , iterator last ) //\u5220\u9664\u8303\u56f4 iterator erase ( remove ( str . begin (), str . end (), 'a' ), str . end ()) //\u5220\u9664\u7279\u5b9a\u5b57\u7b26 \u8fed\u4ee3\u5668 iterator begin (); //\u5934\u8fed\u4ee3\u5668 iterator end (); //\u5c3e\u8fed\u4ee3\u5668 \u5176\u4ed6 sort ( string , iterator l , iterator r ) //\u6392\u5e8f [l, r) string substr ( int pos , int n ) //\u83b7\u53d6\u8fde\u7eed\u5b50\u4e32\uff0c\u4ece pos \u5f00\u59cb\u7684 n \u4e2a\u5b57\u7b26\uff0c-1\u8868\u793a\u5230\u6700\u540e bool empty () //\u5224\u65ad\u662f\u5426\u4e3a\u7a7a int size () //\u5b57\u7b26\u4e2a\u6570 bool isalnum ( char ) //\u5982\u679cc\u662f\u5b57\u6bcd\u6216\u6570\u5b57\uff0c\u8fd4\u56de true bool isalpha ( char ) //\u5982\u679cc\u662f\u5b57\u6bcd\uff0c\u8fd4\u56detrue bool iscntrl ( char ) //\u5982\u679cc\u662f\u63a7\u5236\u7b26\uff0c\u8fd4\u56detrue bool isdigit ( char ) //\u5982\u679cc\u662f\u6570\u5b57\uff0c\u8fd4\u56detrue bool isgraph ( char ) //\u5982\u679cc\u4e0d\u662f\u7a7a\u683c\uff0c\u8fd4\u56de\u4e3atrue bool islower ( char ) //\u5982\u679cc\u662f\u5c0f\u5199\u5b57\u6bcd\uff0c\u8fd4\u56de\u4e3atrue bool isupper ( char ) //\u5982\u679cc\u662f\u5927\u5199\u5b57\u7b26\uff0c\u8fd4\u56de\u4e3atrue bool isprint ( char ) //\u5982\u679cc\u662f\u53ef\u6253\u5370\u7684\u5b57\u7b26\uff0c\u8fd4\u56de\u4e3atrue bool ispunct ( char ) //\u5982\u679cc\u662f\u6807\u70b9\u7b26\u53f7\uff0c\u8fd4\u56de\u4e3atrue bool isspace ( char ) //\u5982\u679cc\u662f\u7a7a\u767d\u5b57\u7b26\uff0c\u8fd4\u56de\u4e3atrue bool isxdigit ( char ) //\u5982\u679cc\u662f\u5341\u516d\u8fdb\u5236\u6570\uff0c\u8fd4\u56de\u4e3atrue","title":"string"},{"location":"OI/STL/#vector","text":"\\(include<vector>\\) \u6784\u9020\u51fd\u6570 vector () //\u521b\u5efa\u4e00\u4e2a\u7a7avector vector ( int nSize ) //\u521b\u5efa\u4e00\u4e2avector,\u5143\u7d20\u4e2a\u6570\u4e3anSize vector ( int nSize , const T & t ) //\u521b\u5efa\u4e00\u4e2avector\uff0c\u5143\u7d20\u4e2a\u6570\u4e3anSize,\u4e14\u503c\u5747\u4e3at vector ( const vector & ) //\u590d\u5236\u6784\u9020\u51fd\u6570 vector ( begin , end ) //\u590d\u5236[begin,end)\u533a\u95f4\u5185\u53e6\u4e00\u4e2a\u6570\u7ec4\u7684\u5143\u7d20\u5230vector\u4e2d \u589e\u52a0\u5143\u7d20 void push_back ( const T & x ) //\u5411\u91cf\u5c3e\u90e8\u589e\u52a0\u4e00\u4e2a\u5143\u7d20X iterator insert ( iterator it , const T & x ) //\u8fed\u4ee3\u5668\u6307\u5411\u5143\u7d20\u524d\u589e\u52a0\u4e00\u4e2a\u5143\u7d20x iterator insert ( iterator it , int n , const T & x ) //\u8fed\u4ee3\u5668\u6307\u5411\u5143\u7d20\u524d\u589e\u52a0n\u4e2a\u76f8\u540c\u7684\u5143\u7d20x iterator insert ( iterator it , iterator first , iterator last ) //\u8fed\u4ee3\u5668\u6307\u5411\u5143\u7d20\u524d\u63d2\u5165\u53e6\u4e00\u4e2a\u5411\u91cf\u7684[first,last)\u7684\u6570\u636e \u5220\u9664\u5143\u7d20 iterator erase ( iterator it ) //\u5220\u9664\u8fed\u4ee3\u5668\u6307\u5411\u5143\u7d20 iterator erase ( iterator first , iterator last ) //\u5220\u9664[first,last)\u4e2d\u5143\u7d20 void pop_back () //\u5220\u9664\u5411\u91cf\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20 void clear () //\u6e05\u7a7a\u5411\u91cf\u4e2d\u6240\u6709\u5143\u7d20 \u8fed\u4ee3\u5668 reference at ( int pos ) //\u8fd4\u56depos\u4f4d\u7f6e\u5143\u7d20\u7684\u5f15\u7528 reference front () //\u8fd4\u56de\u9996\u5143\u7d20\u7684\u5f15\u7528 reference back () //\u8fd4\u56de\u5c3e\u5143\u7d20\u7684\u5f15\u7528 iterator begin () //\u8fd4\u56de\u5411\u91cf\u5934\u6307\u9488\uff0c\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20 iterator end () //\u8fd4\u56de\u5411\u91cf\u5c3e\u6307\u9488\uff0c\u6307\u5411\u5411\u91cf\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e reverse_iterator rbegin () //\u53cd\u5411\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20 reverse_iterator rend () //\u53cd\u5411\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e4b\u524d\u7684\u4f4d\u7f6e \u5176\u4ed6 int size () const //\u8fd4\u56de\u5411\u91cf\u4e2d\u5143\u7d20\u7684\u4e2a\u6570 int capacity () const //\u8fd4\u56de\u5f53\u524d\u5411\u91cf\u6240\u80fd\u5bb9\u7eb3\u7684\u6700\u5927\u5143\u7d20\u503c int max_size () const //\u8fd4\u56de\u6700\u5927\u53ef\u5141\u8bb8\u7684vector\u5143\u7d20\u6570\u91cf\u503c bool empty () const //\u5224\u65ad\u5411\u91cf\u662f\u5426\u4e3a\u7a7a\uff0c\u82e5\u4e3a\u7a7a\uff0c\u5219\u5411\u91cf\u4e2d\u65e0\u5143\u7d20 void swap ( vector & ) //\u4ea4\u6362\u4e24\u4e2a\u540c\u7c7b\u578b\u5411\u91cf\u7684\u6570\u636e void assign ( int n , const T & x ) //\u8bbe\u7f6e\u5411\u91cf\u4e2d\u524dn\u4e2a\u5143\u7d20\u7684\u503c\u4e3ax void assign ( const_iterator first , const_iterator last ) //\u5411\u91cf\u4e2d[first,last)\u4e2d\u5143\u7d20\u8bbe\u7f6e\u6210\u5f53\u524d\u5411\u91cf\u5143\u7d20","title":"vector"},{"location":"OI/STL/#stack","text":"\\(include<stack>\\) \u6784\u9020\u51fd\u6570 list < int > c0 //\u7a7a\u94fe\u8868 list < int > c1 ( 3 ) //\u5efa\u4e00\u4e2a\u542b3\u4e2a\u9ed8\u8ba4\u503c\u662f0\u7684\u5143\u7d20\u7684\u94fe\u8868 list < int > c2 ( 5 , 2 ) //\u5efa\u4e00\u4e2a\u542b5\u4e2a\u5143\u7d20\u7684\u94fe\u8868\uff0c\u503c\u90fd\u662f2 list < int > c4 ( c2 ) //\u590d\u5236 list < int > c5 ( iterator beg , iterator end ) //\u533a\u95f4[beg, end)\u505a\u4e3a\u5143\u7d20\u521d\u503c push ( const T & x ) //\u5165\u6808 T pop () //\u51fa\u6808 T top () //\u83b7\u53d6\u6808\u9876 bool empty () //\u5224\u65ad\u7a7a\u6808 int size () //\u8fd4\u56de\u6808\u5143\u7d20\u4e2a\u6570","title":"stack"},{"location":"OI/STL/#list","text":"\\(include <list>\\) \u6784\u9020\u51fd\u6570 c1 = c2 //\u590d\u5236 assign ( n , elem ) //\u8d4b\u503cn\u4e2aelem assign ( beg , end ) //\u533a\u95f4[beg,end\uff09\u5185\u7684\u5143\u7d20\u8d4b\u503c\u7ed9c swap ( c1 , c2 ) //\u4ea4\u6362 \u589e\u52a0\u5143\u7d20 push_front () //\u9996\u52a0 push_back () //\u5c3e\u52a0 insert ( pos , num ) //\u5728pos\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20num\uff0c\u8fd4\u56de\u65b0\u5143\u7d20\u4f4d\u7f6e insert ( pos , n , elem ) //\u5728pos\u4f4d\u7f6e\u4e0a\u63d2\u5165n\u4e2aelem\u526f\u672c\uff0c\u65e0\u8fd4\u56de\u503c insert ( pos , beg , end ) //\u5728pos\u4f4d\u7f6e\u4e0a\u63d2\u5165\u533a\u95f4[beg,end)\u5185\u7684\u6240\u6709\u5143\u7d20\u7684\u526f\u672c\uff0c\u6ca1\u6709\u8fd4\u56de\u503c \u5220\u9664\u5143\u7d20 pop_front () //\u9996\u5220 pop_back () //\u5c3e\u5220 erase ( pos ) \u3000\u3000\u3000\u3000 //\u5220\u9664pos\u4f4d\u7f6e\u7684\u5143\u7d20\uff0c\u8fd4\u56de\u4e0b\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e erase ( beg , end ) //\u79fb\u9664[beg, end)\u533a\u95f4\u5185\u7684\u6240\u6709\u5143\u7d20\uff0c\u8fd4\u56de\u4e0b\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e remove ( num ) //\u5220\u9664\u94fe\u8868\u4e2d\u5339\u914dnum\u7684\u5143\u7d20 remove_if ( cmp ) //\u5220\u9664\u6761\u4ef6\u6ee1\u8db3\u7684\u5143\u7d20,\u53c2\u6570\u4e3a\u81ea\u5b9a\u4e49\u7684\u56de\u8c03\u51fd\u6570 clear () //\u6e05\u7a7a \u8fed\u4ee3\u5668 list < T >:: iterator it c . begin () c . end () c . rbegin () //\u9006\u5411\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20,\u5373c\u94fe\u8868\u7684\u6700\u540e\u4e00\u4e2a\u6570\u636e\u3002 c . rend () //\u8fd4\u56de\u9006\u5411\u94fe\u8868\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e,\u5373c\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u6570\u636e\u518d\u5f80\u524d\u7684\u4f4d\u7f6e\u3002it++ \u5176\u4ed6 T front () //\u9996\u5143\u7d20 T back () //\u5c3e\u5143 bool empty () //\u5224\u65ad\u662f\u5426\u4e3a\u7a7a int size () //\u6709\u6548\u5143\u7d20\u4e2a\u6570 int max_size () //\u8fd4\u56de\u5bb9\u5668\u6700\u5927\u7684\u53ef\u4ee5\u5b58\u50a8\u7684\u5143\u7d20 bool c1 == c2 //\u6bd4\u8f83 sort () //\u5355\u94fe\u8868\u6392\u5e8f unique () //\u53bb\u91cd\uff0c\u8981\u5148\u6392\u5e8f c1 . merge ( c2 ) //\u5408\u5e762\u4e2a\u6709\u5e8f\u7684\u94fe\u8868\u5e76\u4f7f\u4e4b\u6709\u5e8f,\u4ece\u65b0\u653e\u5230c1\u91cc,\u91ca\u653ec2 c1 . merge ( c2 , cmp ) //\u5408\u5e762\u4e2a\u6709\u5e8f\u7684\u94fe\u8868\u5e76\u4f7f\u4e4b\u6309\u7167\u81ea\u5b9a\u4e49\u89c4\u5219\u6392\u5e8f\u4e4b\u540e\u4ece\u65b0\u653e\u5230c1\u4e2d,\u91ca\u653ec2 reverse () //\u53cd\u8f6c resize ( int ) //\u91cd\u7f6e\u6709\u6548\u5143\u7d20\u4e2a\u6570","title":"list"},{"location":"OI/STL/#set","text":"\\(include<set>\\) \u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4e0d\u4f1a\u5b58\u50a8\u91cd\u590d\u7684\u5143\u7d20 \u6784\u9020\u51fd\u6570 swap ( set , set ) // \u4ea4\u6362\u4e24\u4e2a\u96c6\u5408\u53d8\u91cf s1 = s2 \u589e\u52a0\u5143\u7d20 insert ( T ) // \u5728\u96c6\u5408\u4e2d\u63d2\u5165\u5143\u7d20 \u5220\u9664\u5143\u7d20 clear () // \u6e05\u9664\u6240\u6709\u5143\u7d20 erase ( T ) // \u5220\u9664\u96c6\u5408\u4e2d\u7684\u5143\u7d20 \u8fed\u4ee3\u5668 set < T >:: iterator it begin () // \u8fd4\u56de\u6307\u5411\u9996\u5143\u7d20\u7684\u8fed\u4ee3\u5668 end () // \u8fd4\u56de\u6307\u5411\u5c3e\u5143\u7d20\u7684\u540e\u4e00\u4f4d\u7684\u8fed\u4ee3\u5668 rbegin () // \u53cd\u5411\u8fed\u4ee3\u5668 rend () // \u5176\u4ed6 int count ( T ) // \u8fd4\u56de\u67d0\u4e2a\u5143\u7d20\u7684\u4e2a\u6570,0\u62161\uff0c\u53ea\u80fd\u5224\u65ad\u662f\u5426\u5b58\u5728 bool empty () // \u5224\u65ad\u96c6\u5408\u4e3a\u7a7a int size () // \u96c6\u5408\u4e2d\u5143\u7d20\u7684\u6570\u76ee max_size () // \u8fd4\u56de\u96c6\u5408\u80fd\u5bb9\u7eb3\u7684\u5143\u7d20\u7684\u6700\u5927\u9650\u503c iterator find ( T ) // \u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u88ab\u67e5\u627e\u5230\u5143\u7d20\u7684\u8fed\u4ee3\u5668,\u65e0\u5219\u8fd4\u56deend() iterator lower_bound ( T ) // \u8fd4\u56de\u6307\u5411\u5927\u4e8e\u6216\u7b49\u4e8e\u67d0\u503c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 iterator upper_bound ( T ) // \u8fd4\u56de\u5927\u4e8e\u67d0\u4e2a\u503c\u5143\u7d20\u7684\u8fed\u4ee3\u5668","title":"set"},{"location":"OI/STL/#pair","text":"\\(include<utility>\\) \u4e24\u4efb\u610f\u7c7b\u578b\u5143\u7d20\u7684\u7ed3\u6784\u4f53 pair < int , double > p1 ; //\u9ed8\u8ba4\u6784\u9020\u51fd\u6570 pair < int , double > p1 ( 1 , 1.1 ); //\u542b\u53c2\u6784\u9020\u51fd\u6570 pair < int , double > p1 ( p2 ); //\u62f7\u8d1d\u6784\u9020\u51fd\u6570 p1 = p2 p1 . first //\u83b7\u53d6 \u7b2c\u4e00\u4e2a\u5143\u7d20 p1 . second //\u83b7\u53d6 \u7b2c\u4e8c\u4e2a\u5143\u7d20 p1 < p2 //\u53ef\u4ee5\u76f4\u63a5\u6bd4\u8f83,\u5148\u6bd4\u8f83first\uff0c\u518d\u6bd4\u8f83second","title":"pair"},{"location":"OI/STL/#map","text":"\\(include<map>\\) \u5efa\u7acbKey\uff0dvalue\u7684\u5bf9\u5e94\uff0ckey \u548c value \u53ef\u4ee5\u662f\u4efb\u610f\u7c7b\u578b\u3002 \u6784\u9020\u51fd\u6570 map < int , string > m1 ; //\u7d22\u5f15\u4e3a int\u578b map < string , int > m2 ; //\u7d22\u5f15\u4e3a string \u589e\u52a0\u5143\u7d20 insert ( pair < int , string > ( 1 , \"string1\" )) //\u8fd9\u91cc\u7684\u5143\u7d20\u53ef\u4ee5\u662f\u5143\u7d20\u7c7b\u578b\u4e0e\u58f0\u660e\u5339\u914d\u76842\u5143\u7d20\u7ed3\u6784\u4f53\u6216\u8005pair\uff0cinsert\u4e0d\u80fd\u8986\u76d6\u539f\u503c map < int , string > m1 //\u6570\u7ec4\u53ef\u4ee5\u8986\u76d6\u539f\u503c m1 [ 1 ] = \"string1\" //\u5982\u679c\u6ca1\u6709\u5bf9\u5e94 key \u503c\u4f1a\u81ea\u52a8\u6dfb\u52a0 m1 [ 2 ] = \"string2\" map < string , int > m2 m2 [ \"string1\" ] = 1 m2 [ \"string2\" ] = 2 \u5220\u9664\u5143\u7d20 erase ( iter ) erase ( iterator first , iterator second ) //\u5220\u9664\u8303\u56f4 clear ( \uff09 //\u5220\u9664\u6240\u6709\u5143\u7d20 \u8fed\u4ee3\u5668 iterator begin () iterator end () iterator rbegin () //\u8fd4\u56de\u4e00\u4e2a\u6307\u5411map\u5c3e\u90e8\u7684\u9006\u5411\u8fed\u4ee3\u5668 iterator rend () //\u8fd4\u56de\u4e00\u4e2a\u6307\u5411map\u5934\u90e8\u7684\u9006\u5411\u8fed\u4ee3\u5668 map < int , string >:: iterator iter ; for ( iter = m1 . begin (); iter != m1 . end (); iter ++ ) //\u904d\u5386 cout << iter -> first << ' ' << iter -> second << endl ; \u5176\u4ed6 int size () // \u83b7\u53d6\u5927\u5c0f iterator find ( T ) // T \u662f value \u7c7b\u578b\uff0c\u6ca1\u627e\u5230\u8fd4\u56de end() swap ( m1 [ key1 ], m1 [ key2 ]) //\u4ea4\u6362 value bool empty () //\u5982\u679cmap\u4e3a\u7a7a\u5219\u8fd4\u56detrue int count () //\u8fd4\u56de\u6307\u5b9a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570","title":"map"},{"location":"OI/STL/#queue","text":"\\(include<queue>\\) \u5148\u8fdb\u5148\u51fa\uff08FIFO\uff09\uff0c\u53ea\u80fd\u5c3e\u52a0\u548c\u9996\u5220\uff0c\u53ea\u80fd\u8bbf\u95ee\u961f\u9996\u548c\u961f\u5c3e\u5143\u7d20\uff0c bool empty () //\u961f\u5217\u4e3a\u7a7a\u8fd4\u56de\u771f T front () //\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7d20 T back () //\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20 int size () //\u8fd4\u56de\u5143\u7d20\u4e2a\u6570 push () //\u961f\u5c3e\u52a0\u5165\u5143\u7d20 pop () //\u5220\u9664\u961f\u9996\u5143\u7d20 swap () //\u4ea4\u6362\u5185\u5bb9 \u6e05\u7a7a\u961f\u5217\u7684\u4e09\u79cd\u65b9\u6cd5\uff08\u6ca1\u6709clear\u64cd\u4f5c\uff09 //\u7528\u7a7a\u961f\u5217\u8d4b\u503c q1 = queue < T > (); //\u4e0d\u65ad\u9996\u5220 while ( ! q . empty ()) q . pop (); //\u81ea\u5df1\u5b9a\u4e49clear void clear ( queue < T >& q ){ queue < T > empty ; swap ( empty , q ); }","title":"queue"},{"location":"OI/STL/#priority_queue","text":"\\(include<queue>\\) \u9ed8\u8ba4\u5927\u6839\u5806 priority_queue \u6570\u636e\u7c7b\u578b \u5bb9\u5668 \u6bd4\u8f83\u65b9\u5f0f \u5176\u4e2d Container\u9700\u8981\u7528\u6570\u7ec4\u5b9e\u73b0\u7684\u5bb9\u5668 \u58f0\u660e priority_queue < T > p ; priority_queue < int , vector < int > , greater < int > > p ; //\u5c0f\u6839\u5806 \u5728sort\u91ccgreater\u662f\u4ece\u5927\u5230\u5c0f priority_queue < int , vector < int > , less < int > > p ; //\u5927\u6839\u5806 /*\u81ea\u5b9a\u4e49\u4f18\u5148\u7ea7\u76842\u79cd\u65b9\u5f0f*/ // struct node { \u3000\u3000 int x ; \u3000\u3000 bool operator < ( const node & a ) const { \u3000\u3000\u3000\u3000 return a . x < x ; //\u5c0f\u6839\u5806 \u3000\u3000 } }; priority_queue < node > p ; // struct cmp { \u3000\u3000 bool operator ()( int x , int y ) { \u3000\u3000\u3000\u3000 return \u3000 x > y ; //\u5c0f\u6839\u5806 \u3000\u3000 } }; priority_queue < int , vector < int > , cmp > q ; \u6210\u5458\u51fd\u6570 top () //\u8bbf\u95ee\u961f\u5934\u5143\u7d20 empty () //\u961f\u5217\u662f\u5426\u4e3a\u7a7a size () //\u8fd4\u56de\u961f\u5217\u5185\u5143\u7d20\u4e2a\u6570 push () //\u961f\u5c3e\u52a0\u5165\u5143\u7d20\uff08\u5e76\u6392\u5e8f\uff09 pop () //\u5f39\u51fa\u961f\u9876\u5143\u7d20 swap () //\u4ea4\u6362\u5185\u5bb9","title":"priority_queue"},{"location":"OI/STL/#deque","text":"\\(include<queue>\\) \u6784\u9020\u51fd\u6570 deque < T > deq ; //\u7a7adeque deque ( n ) //\u5143\u7d20\u4e2a\u6570\u4e3an deque ( n , elem ) //\u5143\u7d20\u4e2a\u6570\u4e3an,\u4e14\u503c\u5747\u4e3aelem deque ( beg , end ) //[beg, end) deque ( const deque & deq ) //\u590d\u5236\u6784\u9020\u51fd\u6570 \u589e\u52a0\u51fd\u6570 void push_front ( elem ) //\u5934\u63d2 void push_back ( elem ) //\u5c3e\u63d2 ? insert ( pos , elem ) //\u67d0\u4e00\u5143\u7d20\u524d\u589e\u52a0\u4e00\u4e2a\u5143\u7d20x void insert ( pos , n , elem ) //\u67d0\u4e00\u5143\u7d20\u524d\u589e\u52a0n\u4e2a\u76f8\u540c\u7684\u5143\u7d20x void insert ( pos , beg , endt ) //\u67d0\u4e00\u5143\u7d20\u524d\u63d2\u5165\u53e6\u4e00\u4e2a\u76f8\u540c\u7c7b\u578b\u5411\u91cf\u7684[forst,last)\u95f4\u7684\u6570\u636e \u5220\u9664\u51fd\u6570 ? erase ( pos ) //\u5220\u9664\u67d0\u4e00\u4e2a\u5143\u7d20,\u8fd4\u56de\u4e0b\u4e00\u4e2a\u5143\u7d20\u4f4d\u7f6e ? erase ( beg , end ) //\u5220\u9664[first,last\uff09\u4e2d\u7684\u5143\u7d20,\u8fd4\u56de\u4e0b\u4e00\u4e2a\u5143\u7d20\u4f4d\u7f6e void pop_front () //\u5934\u5220 void pop_back () //\u5c3e\u5220 void clear () \u904d\u5386\u51fd\u6570 reference at ( pos ) //\u8fd4\u56depos\u4f4d\u7f6e\u5143\u7d20\u7684\u5f15\u7528 reference front () //\u8fd4\u56de\u9996\u5143\u7d20\u7684\u5f15\u7528 reference back () //\u8fd4\u56de\u5c3e\u5143\u7d20\u7684\u5f15\u7528 iterator begin () //\u8fd4\u56de\u5934\u8fed\u4ee3\u5668 iterator end () //\u8fd4\u56de\u5c3e\u8fed\u4ee3\u5668\uff08\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a reverse_iterator rbegin () //\u53cd\u5411\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20 reverse_iterator rend () //\u53cd\u5411\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u524d\u4e00\u4e2a\u5143\u7d20 \u5176\u4ed6\u51fd\u6570 bool empty () //\u5411\u91cf\u662f\u5426\u4e3a\u7a7a int size () //\u8fd4\u56de\u5143\u7d20\u7684\u4e2a\u6570 int max_size () //\u8fd4\u56de\u6700\u5927\u53ef\u5141\u8bb8\u7684\u5143\u7d20\u6570\u91cf void swap ( deque & ) //\u4ea4\u6362\u4e24\u4e2a\u540c\u7c7b\u578bdeque\u7684\u6570\u636e void assign ( beg , end ) //\u5c06[beg, end)\u533a\u95f4\u4e2d\u7684\u6570\u636e\u62f7\u8d1d\u8d4b\u503c\u7ed9\u672c\u8eab\u3002 void assign ( n , elem ) //\u5c06n\u4e2aelem\u62f7\u8d1d\u8d4b\u503c\u7ed9\u672c\u8eab\u3002","title":"deque"},{"location":"OI/STL/#algorithm","text":"","title":"algorithm"},{"location":"OI/STL/#lower_bound","text":"\u4e8c\u5206\u67e5\u627e \u5bf9\u4e8e\u5347\u5e8f\u6570\u7ec4\uff1a lower_bound( begin, end, num)\uff1a\u67e5\u627e\u7b2c\u4e00\u4e2a \u5927\u4e8e\u7b49\u4e8e num \u7684\u6570\u5e76\u8fd4\u56de\u5176\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u8fd4\u56deend\u3002\u8fd4\u56de\u503c\u51cf\u53bbbegine\u5373\u7d22\u5f15\u4e0b\u6807 upper_bound( begin, end, num)\uff1a \u5927\u4e8e \u5bf9\u4e8e\u964d\u5e8f\u6570\u7ec4\uff1a\u9700\u8981\u91cd\u8f7d //\u5347\u5e8f a\u6570\u7ec4\u4e2d k \u7684\u4e2a\u6570 upper_bound ( a , a + n , k ) - lower_bound ( a , a + n , k );","title":"lower_bound()"},{"location":"OI/STL/#next_permutation","text":"//\u6c42\u6309\u7167\u5b57\u5178\u5e8f\u7684\u5168\u6392\u5217 int a [ 4 ] = { 1 , 2 , 3 , 4 }; while ( next_permutation ( a , a + 4 )) { for ( int i = 0 ; i < 4 ; i ++ ) cout << a [ i ] << \" \" ; cout << endl ; }","title":"next_permutation"},{"location":"OI/STL/#min_elementmax_element","text":"int maxx = * max_element ( a , a + n );","title":"min_element/max_element"},{"location":"OI/%E5%85%B6%E4%BB%96/","text":"\u5176\u4ed6 \u00b6 \u535a\u5f08\u8bba \u00b6 NIM \u00b6 \u5fc5\u80dc\u6001\uff1a \\( \\(a_1XORa_2XOR\\dots XORa_n \\neq 0\\) \\) \u5fc5\u8d25\u6001\uff1a \\( \\(a_1XORa_2XOR\\dots XORa_n = 0\\) \\) \u5176\u4ed6\uff1a Staircase Nim\uff1aPOJ 1704 Grundy\u503c \u00b6 void grundy () { grundy [ 0 ] = 0 ; //\u5fc5\u8d25\uff0c\u5176\u5b9e\u4e5f\u53ef\u4ee5\u4e0d\u5199\u8ba9j\u4ece0\u5f00\u59cb int maxa = * max_element ( a , a + n ); for ( int j = 1 ; j <= maxa ; j ++ ){ set < int > s ; for ( int i = 0 ; i < k ; i ++ ) if ( a [ i ] <= j ) s . insert ( grundy ( j - a [ i ])); int g = 0 ; while ( s . count ( g ) != 0 ) g ++ ; grundy [ j ] = g ; } } \u79bb\u6563\u5316 \u00b6 //\u767d\u4e66P164\uff0c\u4e8c\u7ef4\u5750\u6807\u79bb\u6563\u5316 typedef long long ll ; const int maxn = 600 ; int x1 [ maxn ], x2 [ maxn ], y1 [ maxn ], y2 [ maxn ]; int n ; int compress ( int * x1 , int * x2 , int w ) { vector < int > vec ; for ( int i = 0 ; i < n ; i ++ ) { for ( int d = -1 ; d <= 1 ; d ++ ) { int tx1 = x1 [ i ] + d , tx2 = x2 [ i ] + d ; if ( tx1 >= 1 && tx1 <= w ) vec . push_back ( tx1 ); if ( tx2 >= 1 && tx2 <= w ) vec . push_back ( tx2 ); } } sort ( vec . begin (), vec . end ()); vec . erase ( unique ( vec . begin (), vec . end ()), vec . end ()); for ( int i = 0 ; i < n ; i ++ ) { x1 [ i ] = find ( vec . begin (), vec . end (), x1 [ i ]) - vec . begin (); x2 [ i ] = find ( vec . begin (), vec . end (), x2 [ i ]) - vec . begin (); } return vec . size (); }","title":"\u5176\u4ed6"},{"location":"OI/%E5%85%B6%E4%BB%96/#_1","text":"","title":"\u5176\u4ed6"},{"location":"OI/%E5%85%B6%E4%BB%96/#_2","text":"","title":"\u535a\u5f08\u8bba"},{"location":"OI/%E5%85%B6%E4%BB%96/#nim","text":"\u5fc5\u80dc\u6001\uff1a \\( \\(a_1XORa_2XOR\\dots XORa_n \\neq 0\\) \\) \u5fc5\u8d25\u6001\uff1a \\( \\(a_1XORa_2XOR\\dots XORa_n = 0\\) \\) \u5176\u4ed6\uff1a Staircase Nim\uff1aPOJ 1704","title":"NIM"},{"location":"OI/%E5%85%B6%E4%BB%96/#grundy","text":"void grundy () { grundy [ 0 ] = 0 ; //\u5fc5\u8d25\uff0c\u5176\u5b9e\u4e5f\u53ef\u4ee5\u4e0d\u5199\u8ba9j\u4ece0\u5f00\u59cb int maxa = * max_element ( a , a + n ); for ( int j = 1 ; j <= maxa ; j ++ ){ set < int > s ; for ( int i = 0 ; i < k ; i ++ ) if ( a [ i ] <= j ) s . insert ( grundy ( j - a [ i ])); int g = 0 ; while ( s . count ( g ) != 0 ) g ++ ; grundy [ j ] = g ; } }","title":"Grundy\u503c"},{"location":"OI/%E5%85%B6%E4%BB%96/#_3","text":"//\u767d\u4e66P164\uff0c\u4e8c\u7ef4\u5750\u6807\u79bb\u6563\u5316 typedef long long ll ; const int maxn = 600 ; int x1 [ maxn ], x2 [ maxn ], y1 [ maxn ], y2 [ maxn ]; int n ; int compress ( int * x1 , int * x2 , int w ) { vector < int > vec ; for ( int i = 0 ; i < n ; i ++ ) { for ( int d = -1 ; d <= 1 ; d ++ ) { int tx1 = x1 [ i ] + d , tx2 = x2 [ i ] + d ; if ( tx1 >= 1 && tx1 <= w ) vec . push_back ( tx1 ); if ( tx2 >= 1 && tx2 <= w ) vec . push_back ( tx2 ); } } sort ( vec . begin (), vec . end ()); vec . erase ( unique ( vec . begin (), vec . end ()), vec . end ()); for ( int i = 0 ; i < n ; i ++ ) { x1 [ i ] = find ( vec . begin (), vec . end (), x1 [ i ]) - vec . begin (); x2 [ i ] = find ( vec . begin (), vec . end (), x2 [ i ]) - vec . begin (); } return vec . size (); }","title":"\u79bb\u6563\u5316"},{"location":"OI/%E5%8F%82%E8%80%83/","text":"\u53c2\u8003\uff1a OI Wiki (oi-wiki.org) \u6b64\u6587\u6863\u4ec5\u4f5c\u4e3a\u5b66\u4e60\u8bb0\u5f55","title":"\u53c2\u8003"},{"location":"OI/%E5%9B%BE%E8%AE%BA/","text":"\u56fe\u8bba \u00b6 \u56fe\u7684\u5b58\u50a8 \u00b6 \u90bb\u63a5\u77e9\u9635 \u00b6 \\(G[i][j]=1\\) \u8868\u793a\u6709\u4e00\u6761\u8fb9\u4ece \\(i\\) \u5230 \\(j\\) \u90bb\u63a5\u8868 \u00b6 vector < int > es [ MAXN ]; /* \u5e26\u6743\u8fb9 struct edge{ int to, w; }; vector<edge> es[MAXN]; */ \u94fe\u5f0f\u524d\u5411\u661f \u00b6 struct edge { int to , w , next ; } es [ MAX_E ]; int cnt = 0 ; void init () { memset ( head , -1 , sizeof head ); } void add_edge ( int u , int v , int w ) { //\u52a0\u8fb9 es [ cnt ]. to = v ; es [ cnt ]. w = w ; es [ cnt ]. next = head [ u ]; head [ u ] = cnt ++ ; } /*\u904d\u5386 for(int i = 1; i <= n; i++) for(int j = head[i]; i != -1; j = es[j].next) */ \u6700\u77ed\u8def \u00b6 Bellman-Ford \u00b6 \u5355\u6e90\u6700\u77ed\u8def\u95ee\u9898 \\(O(VE)\\) \u652f\u6301\u8d1f\u6743 struct edge { int from , to , w ; }; edge es [ MAX_E ]; int d [ MAX_V ]; int V , E ; void BF ( int s ){ memset ( d , INF , sizeof d ); d [ s ] = 0 ; for ( int k = 0 ; k < V ; k ++ ){ for ( int i = 0 ; i < E ; i ++ ){ edge e = es [ i ]; if ( d [ e . from ] != INF && d [ e . to ] > d [ e . from ] + e . w ){ d [ e . to ] = d [ e . from ] + w ; //\u677e\u5f1b\u64cd\u4f5c } } } } //\u5faa\u73af\u81f3\u591a\u6267\u884c V-1 \u6b21\uff0c\u4e00\u6b21\u677e\u5f1b\u64cd\u4f5c\u81f3\u5c11\u8ba9\u786e\u5b9a\u7684\u6700\u77ed\u8def+1\uff0c\u6240\u4ee5O(VE)\uff0c\u5982\u679c\u7b2c n \u6b21\u4efb\u7136\u66f4\u65b0\u4e86d\uff0c\u8868\u793a\u6709\u8d1f\u73af //\u628a\u6240\u6709d[i]\u521d\u59cb\u5316\u4e3a0\uff0c\u5c31\u53ef\u4ee5\u627e\u5230\u6240\u6709\u7684\u8d1f\u5708 bool find_negative_loop (){ memset ( d , 0 , sizeof d ); for ( int i = 0 ; i < V ; i ++ ){ for ( int j = 0 ; j < E ; j ++ ){ edge e = es [ j ]; if ( d [ e . to ] > d [ e . from ] + e . w ){ d [ e . to ] = d [ e . from ] + e . w ; if ( i == V -1 ) return true ; } } } return false ; } Dijkstra \u00b6 \u5355\u6e90\u6700\u77ed\u8def\u95ee\u9898 \u4e0d\u652f\u6301\u8d1f\u6743\u8fb9 \u68c0\u67e5\u5b58\u5728 \\(d[i][i]\\) \u4e3a\u8d1f\u6570\u6765\u5224\u65ad\u662f\u5426\u6709\u8d1f\u73af \\(O(ElogV)\\) \u7528\u4f18\u5148\u961f\u5217 typedef pair < int , int > P ; vector < P > es [ MAX_V ]; //\u90bb\u63a5\u8868\u4e2dfirst\u8868\u793a\u7aef\u70b9\uff0csecond\u8868\u793a\u6743\u503c int d [ MAX_V ]; void dijkstra ( int s ) { priority_queue < P , vector < P > , greater < P > > que ; //\u961f\u5217\u4e2dfirst\u8868\u793a\u6700\u77ed\u8def\uff0c second\u8868\u793a\u7aef\u70b9 memset ( d , INF , sizeof d ); d [ s ] = 0 ; que . push ( P ( 0 , s )); while ( ! que . empty ()) { P p = que . top (); que . pop (); int u = p . second ; if ( d [ u ] < p . first ) continue ; for ( int i = 0 ; i < es [ u ]. size (); i ++ ) { int v = es [ u ][ i ]. first , w = es [ u ][ i ]. second ; if ( d [ v ] > d [ u ] + w ) { //\u677e\u5f1b\u64cd\u4f5c d [ v ] = d [ u ] + w ; que . push ( P ( d [ v ], v )); } } } } Floyd-Warshall \u00b6 \\(O(V^3)\\) dp:\u72b6\u6001\u8f6c\u79fb\u65b9\u65b9\u7a0b \\(d[k][i][j]=min(d[k-1][i][j],d[k-1][i][k]+d[k-1][k][i])\\) , \u5373 \\(d[i][j] = min(dp[i][k], dp[k][j])\\) int d [ MAX_V [ MAX_V ]; void floyd () { for ( int k = 0 ; k < V ; k ++ ) for ( int i = 0 ; i < V ; i ++ ) for ( int j = 0 ; j < V ; j ++ ) d [ i ][ j ] = min ( d [ i ][ j ], d [ i ][ k ] + d [ k ][ j ]); } \u8def\u5f84\u8fd8\u539f \u00b6 \u5728\u677e\u5f1b\u64cd\u4f5c\u65f6\u8bb0\u5f55\u6bcf\u4e2a\u7ed3\u70b9\u7684\u524d\u8d8b\u7ed3\u70b9 \\(path[i]\\) \u5373\u53ef, \u67e5\u8be2\u65f6\u4ece\u540e\u5f80\u524d\u904d\u5386 \u6b21\u77ed\u8def \u00b6 //\u6bcf\u6b21\u66f4\u65b0\u6700\u77ed\u8def\u65f6\u770b\u770b\u88ab\u629b\u5f03\u7684\u503c\u80fd\u4e0d\u80fd\u66f4\u65b0\u6b21\u77ed\u8def typedef pair < int , int > P ; const int inf = 0x3f3f3f3f ; vector < P > es [ max_v ]; int n , r , a , b , c ; int d1 [ max_v ], d2 [ max_v ]; //d2 \u6b21\u77ed\u8def void dijkstra ( int s ){ memset ( d1 , inf , sizeof d1 ); memset ( d2 , inf , sizeof d2 ); priority_queue < P , vector < P > , greater < P > > que ; d1 [ s ] = 0 ; que . push ( P ( 0 , s )); while ( ! que . empty ()){ P p = que . top (); que . pop (); int u = p . second ; if ( d2 [ u ] < p . first ) continue ; for ( int i = 0 ; i < es [ u ]. size (); i ++ ){ int v = es [ u ][ i ]. first , w = es [ u ][ i ]. second ; int tmp = p . first + w ; if ( d1 [ v ] > tmp ){ swap ( tmp , d1 [ v ]); que . push ( P ( d1 [ v ], v )); } if ( tmp < d2 [ v ] && tmp > d1 [ v ]){ d2 [ v ] = tmp ; que . push ( P ( d2 [ v ], v )); } } } } \u6700\u5c0f\u751f\u6210\u6811 \u00b6 \u524d\u63d0\uff1a\u56fe\u662f\u8fde\u901a\u7684 Prim \u00b6 \\(O(V^2)\\) vector < edge > es [ max_v ]; int dis [ MAX_V ]; bool vis [ MAX_V ]; int prime (){ memset ( dis , inf , sizeof dis ); memset ( vis , false , vis ); dis [ 0 ] = 0 ; //s int res = 0 ; while ( true ){ int v = -1 , mn = inf ; for ( int i = 0 ; i < V ; i ++ ) if ( ! visited [ i ] && dis [ i ] < mn ) mn = dis [ i ], v = i ; if ( v == -1 ) break ; vis [ v ] = true ; res += mn ; for ( int i = 0 ; i < es [ v ]. size (); i ++ ){ edge e = es [ v ][ i ]; dis [ e . to ] = min ( dis [ e . to ], e . w ); } } return res ; } Kruskal \u00b6 \u6309\u7167\u8fb9\u7684\u6743\u503c\u4ece\u5c0f\u5230\u8fbe\uff0c\u5229\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u662f\u5426\u4f1a\u4ea7\u51fa\u5708\uff0c\u4e0d\u4f1a\u5c31\u52a0\u5165 \\(O(ElogV)\\) struct edge { int from , to , w ; }; edge es [ MAX_E ]; bool cmp ( edge a , edge b ){ return a . w < b . w ; } int kruskal (){ sort ( es , es + E , cmp ); init ( MAX_V ); //\u5e76\u67e5\u96c6\u7684\u521d\u59cb\u5316 int res = 0 ; for ( int i = 0 ; i < E ; i ++ ){ edge e = es [ i ]; if ( ! same ( e . from , e . to )){ unite ( e . from , e . to ); res += e . w ; } } return res ; } \u7f51\u7edc\u6d41 \u00b6 \u6700\u5927\u6d41 Dinic \u00b6 struct edge { int to , cap , rev ; } //rev\u8bb0\u5f55\u53cd\u5411\u8fb9\u5728 es[to] \u4e2d\u7684\u7d22\u5f15 vector < edge > es [ max_v ]; //\u90bb\u63a5\u8868 int level [ max_v ]; //\u5206\u5c42\u56fe int iter [ max_v ]; //\u5f27\u4f18\u5316\uff0c\u8bb0\u5f55\u7ed3\u70b9\u589e\u5e7f\u8fc7\u54ea\u4e9b\u8fb9\u4e86\uff0c\u4e0b\u6b21\u5c31\u4e0d\u589e\u5e7f\u4e86 void add_edge ( int from , int to , int cap ) { //\u52a0\u8fb9 es [ from ]. push_back ( edge { to , cap , es [ to ]. size ()}); es [ to ]. push_back ( edge { from , 0 , es [ from ]. size () -1 }); } void bfs ( int s ) { //\u5206\u5c42\u56fe memset ( level , -1 , sizeof level ); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()){ int v = que . front (), que . pop (); for ( int i = 0 ; i < es [ i ]. size (); i ++ ){ edge & e = es [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ){ level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } int dfs ( int cur , int t , int f ) { //\u589e\u5e7f\u8def if ( cur == t ) return f ; for ( int & i = iter [ cur ]; i < es [ cur ]. size (); i ++ ){ edge & e = es [ cur ][ i ]; if ( e . cap > 0 && level [ cur ] < level [ e . to ]){ int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; es [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } int max_flow ( int s , int t ){ int flow = 0 ; while ( 1 ){ bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof iter ); int f ; while ( f = dfs ( s , t , inf ) > 0 ) flow += f ; } } \u6700\u5c0f\u8d39\u7528\u6d41 \u00b6 \u8d1f\u6743\u8fb9\uff0c\u7528 BF \u7b97\u6cd5 const int inf = 0x3f3f3f3f ; struct edge { int to , cap , cost , rev ; } vector < edge > es [ max_v ]; int dist [ max_v ]; int pree [ max_e ], prev [ max_v ]; //\u524d\u5bfc\u9876\u70b9\u7684\u5bf9\u5e94\u7684\u8fb9\u7684\u7d22\u5f15 void add_edge ( int from , int to , int cap , int cost ){ es [ from ]. push_back ( edge { to , cap , cost , es [ to ]. size ()}); es [ to ]. push_back ( edge { from , 0 , - cost , es [ from ]. size () -1 }); } int min_cost_flow ( int s , int t , int f ) { //\u8d77\u70b9 \u7ec8\u70b9 \u6d41\u91cf int res = 0 ; while ( f > 0 ){ memset ( dist , inf , sizeof dist ); dist [ s ] = 0 ; while ( true ) bool update = false ; for ( int i = 0 ; i < V ; i ++ ) { if ( dist [ i ] == inf ) continue ; for ( int j = 0 ; j < es [ i ]. size (); j ++ ) { edge & e = es [ i ][ j ]; if ( e . cap > 0 && dist [ e . to ] > dist [ e . from ] + e . cost ) { dist [ to ] = dist [ from ] + e . cost ; prev [ e . to ] = i ; pree [ e . to ] = j ; update = true ; } } } if ( ! update ) break ; } if ( dist [ t ] == inf ) return -1 ; //\u6cbfs\u5230t\u7684\u6700\u77ed\u8def\u5c3d\u91cf\u589e\u5e7f int d = f ; for ( int i = t ; i != s ; i = prev [ i ]) d = min ( d , es [ prev [ i ]][ pree [ i ]]. cap ); f -= d ; res += d * dist [ t ]; for ( int i = t ; i != s ; i = prev [ i ]) { edge & e = es [ prev [ i ][ pree [ i ]]]; e . cap -= d ; es [ i ][ e . rev ]. cap += d ; } } return res ; } \u4e8c\u5206\u56fe\u5339\u914d \u00b6 \u6700\u5927\u6d41 \u00b6 \u6dfb\u52a0\u539f\u70b9\u548c\u6c47\u70b9\uff0c\u8ba1\u7b97\u6700\u5927\u6d41 //\u8ba1\u7b97\u673a\u5904\u7406\u4efb\u52a1 bool can [ max_n ][ max_m ]; // can[i][j] : \u8ba1\u7b97\u673a i \u80fd\u5904\u7406\u4efb\u52a1 j void MaxMatch (){ //\u8ba1\u7b97\u673a\u5bf9\u5e94\u7684\u9876\u70b9\uff1a0 ~ n-1 //\u4efb\u52a1\u5bf9\u5e94\u7684\u9876\u70b9\uff1an ~ n+m-1 int s = n + m , t = n + m + 1 ; for ( int i = 0 ; i < n ; i ++ ){ add_edge ( s , i , 1 ); } for ( int i = 0 ; i < m ; i ++ ){ add_edge ( n + i , t , 1 ); } for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < m ; j ++ ) add_edge ( i , n + j , 1 ); cout << max_flow ( s , t ) << endl ; } \u5308\u7259\u5229\u7b97\u6cd5 \u00b6 \\(O(VE)\\) bool vis [ max_v ]; int match [ max_v ]; vector < int > es [ max_v ]; void add_edge ( int u , int v ){ es [ u ]. push_back ( v ); es [ v ]. push_back ( u ); } bool dfs ( int cur ){ for ( int i = 0 ; i < es [ cur ]. size (); i ++ ){ int v = es [ cur ][ i ]; if ( vis [ v ]) continue ; vis [ v ] = true ; if ( ! match [ v ] || dfs ( match [ v ])){ match [ v ] = cur ; match [ cur ] = v ; return true ; } } return false ; } int MaxMatch (){ int res = 0 ; for ( int i = 1 ; i <= n ; i ++ ){ //\u5bfb\u627e\u589e\u5e7f\u8def\u5f84 memset ( vis , 0 , sizeof vis ); if ( ! match [ i ] && dfs ( i )) res ++ ; } return res ; } Hopcroft-Karp \u00b6 \\(O(E\\sqrt{V})\\) HDU 2389 int match [ max_v ], dep [ max_v ]; vector < int > es [ max_v ]; bool bfs () { memset ( dep , 0 , sizeof dep ); queue < int > q ; for ( int i = 1 ; i <= n ; i ++ ) if ( ! match [ i ]) q . push ( i ); bool flag = false ; while ( ! q . empty ()) { int u = q . front (); q . pop (); for ( int i = 0 ; i < es [ u ]. size (); i ++ ) { int v = es [ u ][ i ]; if ( dep [ v ]) continue ; dep [ v ] = dep [ u ] + 1 ; if ( ! match [ v ]) flag = true ; else dep [ match [ v ]] = dep [ v ] + 1 , q . push ( match [ v ]); } } return flag ; } bool dfs ( int u ) { for ( int i = 0 ; i < es [ u ]. size (); i ++ ) { int v = es [ u ][ i ]; if ( dep [ v ] != dep [ u ] + 1 ) continue ; dep [ v ] = 0 ; if ( ! match [ v ] || dfs ( match [ v ])) { match [ v ] = u ; match [ u ] = v ; return true ; } } return false ; } int MaxMatch () { int res = 0 ; while ( bfs ()) { for ( int i = 1 ; i <= n ; i ++ ) if ( ! match [ i ] && dfs ( i )) res ++ ; } return res ; } \u8fde\u901a\u6027\u76f8\u5173 \u00b6 \u5f3a\u8fde\u901a\u5206\u91cf\u5206\u89e3 \u00b6 \\(O(V+E)\\) \u4e24\u6b21DFS\uff0c\u7b2c\u4e00\u904d\u540e\u5e8f\u904d\u5386\u5e76\u7ed9\u9876\u70b9\u6807\u53f7\uff0c\u7b2c\u4e8c\u904d\u5bf9\u53cd\u5411\u56fe\u904d\u5386 vector < int > G [ max_v ]; vector < int > rG [ max_v ]; //\u53cd\u5411\u56fe vector < int > vs ; //vertex sequence bool vis [ max_v ]; int cmp [ max_v ]; //\u6240\u5c5e\u5f3a\u8fde\u901a\u56fe\u7684\u62d3\u6251\u5e8f void add_edge ( int u , int v ){ G [ u ]. push_back ( v ); rG [ v ]. push_back ( u ); } void dfs ( int v ){ vis [ v ] = true ; for ( int i = 0 ; i < G [ v ]. size (); i ++ ) if ( ! vis [ G [ v ][ i ]]) dfs ( G [ v ][ i ]); vs . push_back ( v ); } void rdfs ( int v , int k ){ vis [ v ] = true ; cmp [ v ] = k ; for ( int i = 0 ; i < rG [ v ]. size (); i ++ ) if ( ! vis [ rG [ v ][ i ]]) rdfs ( rG [ v ][ i ], k ); } int scc () { //strongly connected component memset ( vis , false , sizeof vis ); vs . clear (); for ( int v = 0 ; v < V ; v ++ ) if ( ! vis [ v ]) dfs ( v ); memset ( vis , false , sizeof vis ); int k = 0 ; for ( int i = vs . size () -1 ; i >= 0 ; i -- ) if ( ! vis [ vs [ i ]]) rdfs ( vs [ i ], k ++ ); return k ; } \u8fde\u901a\u5206\u652f\u4e2a\u6570 \u00b6 \u5e76\u67e5\u96c6 \u6811\u4e0a\u95ee\u9898 \u00b6 \u6700\u8fd1\u516c\u5171\u7956\u5148(LCA) \u00b6 \\(O(n)\\) vector < int > G [ maxn_v ]; int root , parent [ max_v ], depth [ max_v ]; void dfs ( int v , int p , int d ){ parent [ v ] = p , depth [ v ] = d ; for ( int i = 0 ; i < G [ v ]. size (); i ++ ) if ( G [ v ][ i ] != p ) dfs ( G [ v ][ i ], v , d + 1 ); } void init (){ dfs ( root , -1 , 0 ); } int lca ( int u , int v ){ //\u5148\u628au,v\u8d70\u5230\u540c\u4e00\u6df1\u5ea6 while ( depth [ u ] > depth [ v ]) u = parent [ u ]; while ( depth [ v ] > depth [ u ]) v = parent [ v ]; //\u4e00\u8d77\u5411\u4e0a\u8d70 while ( u != v ){ u = parent [ u ], v = parent [ v ]; } return u ; } \u57fa\u4e8e\u4e8c\u5206\u641c\u7d22\u7684\u7b97\u6cd5 \u5bf9\u4e8e\u4efb\u610f\u7ed3\u70b9v\uff0c\u53ef\u4ee5\u901a\u8fc7 parent2[v] = parent[parent[v]] parent4[v] = parent2[parent2[v]] ... \u5f97\u5230\u5176\u5411\u4e0a\u8d70 \\( \\(2^k\\) \\) \u6b65\u5230\u8fbe\u7684\u9876\u70b9 \u6bcf\u6b21\u641c\u7d22\u7684\u590d\u6742\u5ea6\uff1a \\(O(logn)\\) \uff0c\u9884\u5904\u7406\u7684\u590d\u6742\u5ea6\uff1a \\(O(nlogn)\\) vector < int > G [ max_v ]; int root , parent [ max_k ][ max_v ], depth [ max_v ]; void dfs ( int v , int p , int d ){ depth [ v ] = d , parent [ v ] = p ; for ( int i = 0 ; i < G [ v ]. size (); i ++ ) if ( G [ v ][ i ] != p ) dfs ( G [ v ][ i ], v , d + 1 ); } void init ( int V ){ //\u9884\u5904\u7406parent[0]\u548cdepth dfs ( root , -1 , 0 ); //\u9884\u5904\u7406parent for ( int k = 0 ; k + 1 < max_k ; k ++ ) for ( int i = 0 ; i < V ; i ++ ) { //parent[k][v] \u8868\u793a\u4ece v \u7ed3\u70b9\u5411\u4e0a\u8d70 2^k \u6b21\u7684\u7ed3\u70b9\uff0c \u8d85\u8fc7\u6839\u65f6\u8bb0\u4f5c-1 if ( parent [ k ][ i ] < 0 ) parent [ k + 1 ][ i ] = -1 ; else parent [ k + 1 ][ i ] = parent [ k ][ parent [ k ][ i ]]; } } int lca ( int u , int v ){ //\u8ba9u\u548cv\u8d70\u5230\u540c\u4e00\u6df1\u5ea6 if ( depth [ u ] > depth [ v ]) swap ( u , v ); //\u8ba9v\u7684\u6df1\u5ea6\u6df1\u4e00\u4e9b for ( int k = 0 ; k < max_k ; k ++ ) { if (( depth [ v ] - depth [ u ]) >> k & 1 ) v = parent [ k ][ v ]; } if ( u == v ) return u ; //\u4e8c\u5206\u641c\u7d22\u8ba1\u7b97LCA for ( int k = max_k -1 ; k >= 0 ; k -- ) { if ( parent [ k ][ v ] != parent [ k ][ u ]) { //\u5982\u679c\u8d85\u8fc7\u4e86\u4ed6\u4eec\u7684LCA\u4e5f\u4e00\u5b9a\u662f\u4e00\u6837\u7684,\u4e0d\u4e00\u6837\u4e00\u5b9a\u8fd8\u6ca1\u5230LCA v = parent [ k ][ v ], u = parent [ k ][ u ]; } } return parnet [ 0 ][ u ]; //?\u8fd9\u91cc\u597d\u50cf\u4e0d\u592a\u5bf9?// } \u70b9\u5206\u6cbb \u00b6 \u6d1b\u8c37 P3806 POJ 1741 \u5176\u4ed6 \u00b6 \u4e8c\u5206\u56fe\u76f8\u5173\u7ed3\u8bba \u00b6 \u5b9a\u4e49\uff1a \u5339\u914d\uff1a\u5728G\u4e2d\u4e24\u4e24\u6ca1\u6709\u516c\u5171\u70b9\u7684\u8fb9\u96c6\u5408M \u8fb9\u8986\u76d6\uff1aG\u4e2d\u4efb\u610f\u9876\u70b9\u90fd\u81f3\u5c11\u662fF\u4e2d\u67d0\u6761\u8fb9\u7684\u7aef\u70b9\u7684\u8fb9\u96c6\u5408F \u72ec\u7acb\u96c6\uff1a\u5728G\u4e2d\u4e24\u4e24\u4e92\u4e0d\u76f8\u8fde\u7684\u9876\u70b9\u96c6\u5408S \u9876\u70b9\u8986\u76d6\uff1aG\u4e2d\u7684\u4efb\u610f\u8fb9\u90fd\u81f3\u5c11\u6709\u4e00\u4e2a\u7aef\u70b9\u5c5e\u4e8eS\u7684\u9876\u70b9\u96c6\u5408S \u7ed3\u8bba\uff1a \u5bf9\u4e8e\u65e0\u5b64\u7acb\u70b9\u7684\u56fe\uff0c|\u6700\u5927\u5339\u914d|+|\u6700\u5c0f\u8fb9\u8986\u76d6| = |V| |\u6700\u5927\u72ec\u7acb\u96c6|+|\u6700\u5c0f\u9876\u70b9\u8986\u76d6| = |V| \u5bf9\u4e8e\u4e8c\u5206\u56fe\uff0c|\u6700\u5927\u5339\u914d| = |\u6700\u5c0f\u9876\u70b9\u8986\u76d6| \u7b80\u5355\u8bc1\u660e\uff1a\u6700\u5927\u5339\u914d\u65f6\u662f\u6bcf\u4e00\u5bf9\u5339\u914d\u4e2d\uff0c\u4e0d\u53ef\u80fd2\u4e2a\u70b9\u90fd\u8fde\u63a5\u7740\u672a\u5339\u914d\u7684\u70b9\uff08\u4e0d\u7136\u7684\u8bdd\u5c31\u4f1a\u6709\u589e\u5e7f\u8def\u5f84\uff0c\u6700\u5927\u5339\u914d\u8fd8\u53ef\u4ee5\u66f4\u5927), \u6240\u4ee52\u4e2a\u70b9\u4e2d\u6700\u591a\u4e00\u4e2a\u70b9\u8fde\u63a5\u7740\u672a\u5339\u914d\u7684\u70b9\uff0c\u9009\u62e9\u90a3\u4e2a\u70b9\u4f5c\u4e3a\u6700\u5c0f\u5b9a\u70b9\u8986\u76d6\u5373\u53ef 2-SAT \u00b6 \u5e03\u5c14\u65b9\u7a0b\u7684\u53ef\u6ee1\u8db3\u6027\u95ee\u9898 \u5408\u53d6\u8303\u5f0f\uff1a \\((a\\vee b\\vee\\dots)\\wedge(c\\vee d\\vee\\dots)\\) 2-SAT\u95ee\u9898\uff1a\u5408\u53d6\u8303\u5f0f\u7684\u6bcf\u4e2a\u5b50\u53e5\u7684\u6587\u5b57\u4e0d\u8d85\u8fc72\u7684\u5e03\u5c14\u65b9\u7a0b\u7684\u53ef\u6ee1\u8db3\u6027\u95ee\u9898 \u5c06\u6bcf\u4e2a \\( \\(a\\vee b\\) \\) \u6539\u5199\u6210 \\( \\((\\urcorner a \\Rightarrow b \\wedge \\urcorner b \\Rightarrow a)\\) \\) \uff0c\u4ee5 \\(\\Rightarrow\\) \u5173\u7cfb\u4e3a\u8fb9\u5efa\u6709\u5411\u56fe\uff0c\u5229\u7528\u5f3a\u8fde\u901a\u5206\u91cf\u5206\u89e3 \u5982\u679c\u5b58\u5728 x\u548c \\( \\(\\urcorner x\\) \\) \u5b58\u5728\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u65e0\u89e3 \u5426\u5219\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5e03\u5c14\u53d8\u91cfx\uff0c\u5982\u679cx\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u62d3\u6251\u5e8f\u5728 \\(\\urcorner x\\) \u4e4b\u540e\uff0c \\(x\\) \u4e3atrue \u56e0\u4e3a\u62d3\u6251\u5e8f\u5728\u524d\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u53ef\u80fd\u5b58\u5728\u901a\u8def\u5230\u8fbe\u5728\u540e\u7684\uff0c\u6240\u4ee5\u5728\u540e\u7684\u4e00\u5b9a\u4e3atrue DFS\u5e8f \u00b6 \u5f53\u524d\u7ed3\u70b9\u7684 in \u548c out \u5305\u542b\u4e86\u5b50\u6811\u7684\u6240\u6709\u7ed3\u70b9 int in [ N ], out [ N ], tot = 0 ; void dfs ( int x , int dep ) { in [ x ] = ++ tot ; for ( int i = 0 ; i < es [ x ]. size (); i ++ ) dfs ( es [ x ][ i ], dep + 1 ); out [ x ] = tot ; }","title":"\u56fe\u8bba"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_1","text":"","title":"\u56fe\u8bba"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_2","text":"","title":"\u56fe\u7684\u5b58\u50a8"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_3","text":"\\(G[i][j]=1\\) \u8868\u793a\u6709\u4e00\u6761\u8fb9\u4ece \\(i\\) \u5230 \\(j\\)","title":"\u90bb\u63a5\u77e9\u9635"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_4","text":"vector < int > es [ MAXN ]; /* \u5e26\u6743\u8fb9 struct edge{ int to, w; }; vector<edge> es[MAXN]; */","title":"\u90bb\u63a5\u8868"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_5","text":"struct edge { int to , w , next ; } es [ MAX_E ]; int cnt = 0 ; void init () { memset ( head , -1 , sizeof head ); } void add_edge ( int u , int v , int w ) { //\u52a0\u8fb9 es [ cnt ]. to = v ; es [ cnt ]. w = w ; es [ cnt ]. next = head [ u ]; head [ u ] = cnt ++ ; } /*\u904d\u5386 for(int i = 1; i <= n; i++) for(int j = head[i]; i != -1; j = es[j].next) */","title":"\u94fe\u5f0f\u524d\u5411\u661f"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_6","text":"","title":"\u6700\u77ed\u8def"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#bellman-ford","text":"\u5355\u6e90\u6700\u77ed\u8def\u95ee\u9898 \\(O(VE)\\) \u652f\u6301\u8d1f\u6743 struct edge { int from , to , w ; }; edge es [ MAX_E ]; int d [ MAX_V ]; int V , E ; void BF ( int s ){ memset ( d , INF , sizeof d ); d [ s ] = 0 ; for ( int k = 0 ; k < V ; k ++ ){ for ( int i = 0 ; i < E ; i ++ ){ edge e = es [ i ]; if ( d [ e . from ] != INF && d [ e . to ] > d [ e . from ] + e . w ){ d [ e . to ] = d [ e . from ] + w ; //\u677e\u5f1b\u64cd\u4f5c } } } } //\u5faa\u73af\u81f3\u591a\u6267\u884c V-1 \u6b21\uff0c\u4e00\u6b21\u677e\u5f1b\u64cd\u4f5c\u81f3\u5c11\u8ba9\u786e\u5b9a\u7684\u6700\u77ed\u8def+1\uff0c\u6240\u4ee5O(VE)\uff0c\u5982\u679c\u7b2c n \u6b21\u4efb\u7136\u66f4\u65b0\u4e86d\uff0c\u8868\u793a\u6709\u8d1f\u73af //\u628a\u6240\u6709d[i]\u521d\u59cb\u5316\u4e3a0\uff0c\u5c31\u53ef\u4ee5\u627e\u5230\u6240\u6709\u7684\u8d1f\u5708 bool find_negative_loop (){ memset ( d , 0 , sizeof d ); for ( int i = 0 ; i < V ; i ++ ){ for ( int j = 0 ; j < E ; j ++ ){ edge e = es [ j ]; if ( d [ e . to ] > d [ e . from ] + e . w ){ d [ e . to ] = d [ e . from ] + e . w ; if ( i == V -1 ) return true ; } } } return false ; }","title":"Bellman-Ford"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#dijkstra","text":"\u5355\u6e90\u6700\u77ed\u8def\u95ee\u9898 \u4e0d\u652f\u6301\u8d1f\u6743\u8fb9 \u68c0\u67e5\u5b58\u5728 \\(d[i][i]\\) \u4e3a\u8d1f\u6570\u6765\u5224\u65ad\u662f\u5426\u6709\u8d1f\u73af \\(O(ElogV)\\) \u7528\u4f18\u5148\u961f\u5217 typedef pair < int , int > P ; vector < P > es [ MAX_V ]; //\u90bb\u63a5\u8868\u4e2dfirst\u8868\u793a\u7aef\u70b9\uff0csecond\u8868\u793a\u6743\u503c int d [ MAX_V ]; void dijkstra ( int s ) { priority_queue < P , vector < P > , greater < P > > que ; //\u961f\u5217\u4e2dfirst\u8868\u793a\u6700\u77ed\u8def\uff0c second\u8868\u793a\u7aef\u70b9 memset ( d , INF , sizeof d ); d [ s ] = 0 ; que . push ( P ( 0 , s )); while ( ! que . empty ()) { P p = que . top (); que . pop (); int u = p . second ; if ( d [ u ] < p . first ) continue ; for ( int i = 0 ; i < es [ u ]. size (); i ++ ) { int v = es [ u ][ i ]. first , w = es [ u ][ i ]. second ; if ( d [ v ] > d [ u ] + w ) { //\u677e\u5f1b\u64cd\u4f5c d [ v ] = d [ u ] + w ; que . push ( P ( d [ v ], v )); } } } }","title":"Dijkstra"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#floyd-warshall","text":"\\(O(V^3)\\) dp:\u72b6\u6001\u8f6c\u79fb\u65b9\u65b9\u7a0b \\(d[k][i][j]=min(d[k-1][i][j],d[k-1][i][k]+d[k-1][k][i])\\) , \u5373 \\(d[i][j] = min(dp[i][k], dp[k][j])\\) int d [ MAX_V [ MAX_V ]; void floyd () { for ( int k = 0 ; k < V ; k ++ ) for ( int i = 0 ; i < V ; i ++ ) for ( int j = 0 ; j < V ; j ++ ) d [ i ][ j ] = min ( d [ i ][ j ], d [ i ][ k ] + d [ k ][ j ]); }","title":"Floyd-Warshall"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_7","text":"\u5728\u677e\u5f1b\u64cd\u4f5c\u65f6\u8bb0\u5f55\u6bcf\u4e2a\u7ed3\u70b9\u7684\u524d\u8d8b\u7ed3\u70b9 \\(path[i]\\) \u5373\u53ef, \u67e5\u8be2\u65f6\u4ece\u540e\u5f80\u524d\u904d\u5386","title":"\u8def\u5f84\u8fd8\u539f"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_8","text":"//\u6bcf\u6b21\u66f4\u65b0\u6700\u77ed\u8def\u65f6\u770b\u770b\u88ab\u629b\u5f03\u7684\u503c\u80fd\u4e0d\u80fd\u66f4\u65b0\u6b21\u77ed\u8def typedef pair < int , int > P ; const int inf = 0x3f3f3f3f ; vector < P > es [ max_v ]; int n , r , a , b , c ; int d1 [ max_v ], d2 [ max_v ]; //d2 \u6b21\u77ed\u8def void dijkstra ( int s ){ memset ( d1 , inf , sizeof d1 ); memset ( d2 , inf , sizeof d2 ); priority_queue < P , vector < P > , greater < P > > que ; d1 [ s ] = 0 ; que . push ( P ( 0 , s )); while ( ! que . empty ()){ P p = que . top (); que . pop (); int u = p . second ; if ( d2 [ u ] < p . first ) continue ; for ( int i = 0 ; i < es [ u ]. size (); i ++ ){ int v = es [ u ][ i ]. first , w = es [ u ][ i ]. second ; int tmp = p . first + w ; if ( d1 [ v ] > tmp ){ swap ( tmp , d1 [ v ]); que . push ( P ( d1 [ v ], v )); } if ( tmp < d2 [ v ] && tmp > d1 [ v ]){ d2 [ v ] = tmp ; que . push ( P ( d2 [ v ], v )); } } } }","title":"\u6b21\u77ed\u8def"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_9","text":"\u524d\u63d0\uff1a\u56fe\u662f\u8fde\u901a\u7684","title":"\u6700\u5c0f\u751f\u6210\u6811"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#prim","text":"\\(O(V^2)\\) vector < edge > es [ max_v ]; int dis [ MAX_V ]; bool vis [ MAX_V ]; int prime (){ memset ( dis , inf , sizeof dis ); memset ( vis , false , vis ); dis [ 0 ] = 0 ; //s int res = 0 ; while ( true ){ int v = -1 , mn = inf ; for ( int i = 0 ; i < V ; i ++ ) if ( ! visited [ i ] && dis [ i ] < mn ) mn = dis [ i ], v = i ; if ( v == -1 ) break ; vis [ v ] = true ; res += mn ; for ( int i = 0 ; i < es [ v ]. size (); i ++ ){ edge e = es [ v ][ i ]; dis [ e . to ] = min ( dis [ e . to ], e . w ); } } return res ; }","title":"Prim"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#kruskal","text":"\u6309\u7167\u8fb9\u7684\u6743\u503c\u4ece\u5c0f\u5230\u8fbe\uff0c\u5229\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u662f\u5426\u4f1a\u4ea7\u51fa\u5708\uff0c\u4e0d\u4f1a\u5c31\u52a0\u5165 \\(O(ElogV)\\) struct edge { int from , to , w ; }; edge es [ MAX_E ]; bool cmp ( edge a , edge b ){ return a . w < b . w ; } int kruskal (){ sort ( es , es + E , cmp ); init ( MAX_V ); //\u5e76\u67e5\u96c6\u7684\u521d\u59cb\u5316 int res = 0 ; for ( int i = 0 ; i < E ; i ++ ){ edge e = es [ i ]; if ( ! same ( e . from , e . to )){ unite ( e . from , e . to ); res += e . w ; } } return res ; }","title":"Kruskal"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_10","text":"","title":"\u7f51\u7edc\u6d41"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#dinic","text":"struct edge { int to , cap , rev ; } //rev\u8bb0\u5f55\u53cd\u5411\u8fb9\u5728 es[to] \u4e2d\u7684\u7d22\u5f15 vector < edge > es [ max_v ]; //\u90bb\u63a5\u8868 int level [ max_v ]; //\u5206\u5c42\u56fe int iter [ max_v ]; //\u5f27\u4f18\u5316\uff0c\u8bb0\u5f55\u7ed3\u70b9\u589e\u5e7f\u8fc7\u54ea\u4e9b\u8fb9\u4e86\uff0c\u4e0b\u6b21\u5c31\u4e0d\u589e\u5e7f\u4e86 void add_edge ( int from , int to , int cap ) { //\u52a0\u8fb9 es [ from ]. push_back ( edge { to , cap , es [ to ]. size ()}); es [ to ]. push_back ( edge { from , 0 , es [ from ]. size () -1 }); } void bfs ( int s ) { //\u5206\u5c42\u56fe memset ( level , -1 , sizeof level ); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()){ int v = que . front (), que . pop (); for ( int i = 0 ; i < es [ i ]. size (); i ++ ){ edge & e = es [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ){ level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } int dfs ( int cur , int t , int f ) { //\u589e\u5e7f\u8def if ( cur == t ) return f ; for ( int & i = iter [ cur ]; i < es [ cur ]. size (); i ++ ){ edge & e = es [ cur ][ i ]; if ( e . cap > 0 && level [ cur ] < level [ e . to ]){ int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; es [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } int max_flow ( int s , int t ){ int flow = 0 ; while ( 1 ){ bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof iter ); int f ; while ( f = dfs ( s , t , inf ) > 0 ) flow += f ; } }","title":"\u6700\u5927\u6d41 Dinic"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_11","text":"\u8d1f\u6743\u8fb9\uff0c\u7528 BF \u7b97\u6cd5 const int inf = 0x3f3f3f3f ; struct edge { int to , cap , cost , rev ; } vector < edge > es [ max_v ]; int dist [ max_v ]; int pree [ max_e ], prev [ max_v ]; //\u524d\u5bfc\u9876\u70b9\u7684\u5bf9\u5e94\u7684\u8fb9\u7684\u7d22\u5f15 void add_edge ( int from , int to , int cap , int cost ){ es [ from ]. push_back ( edge { to , cap , cost , es [ to ]. size ()}); es [ to ]. push_back ( edge { from , 0 , - cost , es [ from ]. size () -1 }); } int min_cost_flow ( int s , int t , int f ) { //\u8d77\u70b9 \u7ec8\u70b9 \u6d41\u91cf int res = 0 ; while ( f > 0 ){ memset ( dist , inf , sizeof dist ); dist [ s ] = 0 ; while ( true ) bool update = false ; for ( int i = 0 ; i < V ; i ++ ) { if ( dist [ i ] == inf ) continue ; for ( int j = 0 ; j < es [ i ]. size (); j ++ ) { edge & e = es [ i ][ j ]; if ( e . cap > 0 && dist [ e . to ] > dist [ e . from ] + e . cost ) { dist [ to ] = dist [ from ] + e . cost ; prev [ e . to ] = i ; pree [ e . to ] = j ; update = true ; } } } if ( ! update ) break ; } if ( dist [ t ] == inf ) return -1 ; //\u6cbfs\u5230t\u7684\u6700\u77ed\u8def\u5c3d\u91cf\u589e\u5e7f int d = f ; for ( int i = t ; i != s ; i = prev [ i ]) d = min ( d , es [ prev [ i ]][ pree [ i ]]. cap ); f -= d ; res += d * dist [ t ]; for ( int i = t ; i != s ; i = prev [ i ]) { edge & e = es [ prev [ i ][ pree [ i ]]]; e . cap -= d ; es [ i ][ e . rev ]. cap += d ; } } return res ; }","title":"\u6700\u5c0f\u8d39\u7528\u6d41"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_12","text":"","title":"\u4e8c\u5206\u56fe\u5339\u914d"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_13","text":"\u6dfb\u52a0\u539f\u70b9\u548c\u6c47\u70b9\uff0c\u8ba1\u7b97\u6700\u5927\u6d41 //\u8ba1\u7b97\u673a\u5904\u7406\u4efb\u52a1 bool can [ max_n ][ max_m ]; // can[i][j] : \u8ba1\u7b97\u673a i \u80fd\u5904\u7406\u4efb\u52a1 j void MaxMatch (){ //\u8ba1\u7b97\u673a\u5bf9\u5e94\u7684\u9876\u70b9\uff1a0 ~ n-1 //\u4efb\u52a1\u5bf9\u5e94\u7684\u9876\u70b9\uff1an ~ n+m-1 int s = n + m , t = n + m + 1 ; for ( int i = 0 ; i < n ; i ++ ){ add_edge ( s , i , 1 ); } for ( int i = 0 ; i < m ; i ++ ){ add_edge ( n + i , t , 1 ); } for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < m ; j ++ ) add_edge ( i , n + j , 1 ); cout << max_flow ( s , t ) << endl ; }","title":"\u6700\u5927\u6d41"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_14","text":"\\(O(VE)\\) bool vis [ max_v ]; int match [ max_v ]; vector < int > es [ max_v ]; void add_edge ( int u , int v ){ es [ u ]. push_back ( v ); es [ v ]. push_back ( u ); } bool dfs ( int cur ){ for ( int i = 0 ; i < es [ cur ]. size (); i ++ ){ int v = es [ cur ][ i ]; if ( vis [ v ]) continue ; vis [ v ] = true ; if ( ! match [ v ] || dfs ( match [ v ])){ match [ v ] = cur ; match [ cur ] = v ; return true ; } } return false ; } int MaxMatch (){ int res = 0 ; for ( int i = 1 ; i <= n ; i ++ ){ //\u5bfb\u627e\u589e\u5e7f\u8def\u5f84 memset ( vis , 0 , sizeof vis ); if ( ! match [ i ] && dfs ( i )) res ++ ; } return res ; }","title":"\u5308\u7259\u5229\u7b97\u6cd5"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#hopcroft-karp","text":"\\(O(E\\sqrt{V})\\) HDU 2389 int match [ max_v ], dep [ max_v ]; vector < int > es [ max_v ]; bool bfs () { memset ( dep , 0 , sizeof dep ); queue < int > q ; for ( int i = 1 ; i <= n ; i ++ ) if ( ! match [ i ]) q . push ( i ); bool flag = false ; while ( ! q . empty ()) { int u = q . front (); q . pop (); for ( int i = 0 ; i < es [ u ]. size (); i ++ ) { int v = es [ u ][ i ]; if ( dep [ v ]) continue ; dep [ v ] = dep [ u ] + 1 ; if ( ! match [ v ]) flag = true ; else dep [ match [ v ]] = dep [ v ] + 1 , q . push ( match [ v ]); } } return flag ; } bool dfs ( int u ) { for ( int i = 0 ; i < es [ u ]. size (); i ++ ) { int v = es [ u ][ i ]; if ( dep [ v ] != dep [ u ] + 1 ) continue ; dep [ v ] = 0 ; if ( ! match [ v ] || dfs ( match [ v ])) { match [ v ] = u ; match [ u ] = v ; return true ; } } return false ; } int MaxMatch () { int res = 0 ; while ( bfs ()) { for ( int i = 1 ; i <= n ; i ++ ) if ( ! match [ i ] && dfs ( i )) res ++ ; } return res ; }","title":"Hopcroft-Karp"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_15","text":"","title":"\u8fde\u901a\u6027\u76f8\u5173"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_16","text":"\\(O(V+E)\\) \u4e24\u6b21DFS\uff0c\u7b2c\u4e00\u904d\u540e\u5e8f\u904d\u5386\u5e76\u7ed9\u9876\u70b9\u6807\u53f7\uff0c\u7b2c\u4e8c\u904d\u5bf9\u53cd\u5411\u56fe\u904d\u5386 vector < int > G [ max_v ]; vector < int > rG [ max_v ]; //\u53cd\u5411\u56fe vector < int > vs ; //vertex sequence bool vis [ max_v ]; int cmp [ max_v ]; //\u6240\u5c5e\u5f3a\u8fde\u901a\u56fe\u7684\u62d3\u6251\u5e8f void add_edge ( int u , int v ){ G [ u ]. push_back ( v ); rG [ v ]. push_back ( u ); } void dfs ( int v ){ vis [ v ] = true ; for ( int i = 0 ; i < G [ v ]. size (); i ++ ) if ( ! vis [ G [ v ][ i ]]) dfs ( G [ v ][ i ]); vs . push_back ( v ); } void rdfs ( int v , int k ){ vis [ v ] = true ; cmp [ v ] = k ; for ( int i = 0 ; i < rG [ v ]. size (); i ++ ) if ( ! vis [ rG [ v ][ i ]]) rdfs ( rG [ v ][ i ], k ); } int scc () { //strongly connected component memset ( vis , false , sizeof vis ); vs . clear (); for ( int v = 0 ; v < V ; v ++ ) if ( ! vis [ v ]) dfs ( v ); memset ( vis , false , sizeof vis ); int k = 0 ; for ( int i = vs . size () -1 ; i >= 0 ; i -- ) if ( ! vis [ vs [ i ]]) rdfs ( vs [ i ], k ++ ); return k ; }","title":"\u5f3a\u8fde\u901a\u5206\u91cf\u5206\u89e3"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_17","text":"\u5e76\u67e5\u96c6","title":"\u8fde\u901a\u5206\u652f\u4e2a\u6570"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_18","text":"","title":"\u6811\u4e0a\u95ee\u9898"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#lca","text":"\\(O(n)\\) vector < int > G [ maxn_v ]; int root , parent [ max_v ], depth [ max_v ]; void dfs ( int v , int p , int d ){ parent [ v ] = p , depth [ v ] = d ; for ( int i = 0 ; i < G [ v ]. size (); i ++ ) if ( G [ v ][ i ] != p ) dfs ( G [ v ][ i ], v , d + 1 ); } void init (){ dfs ( root , -1 , 0 ); } int lca ( int u , int v ){ //\u5148\u628au,v\u8d70\u5230\u540c\u4e00\u6df1\u5ea6 while ( depth [ u ] > depth [ v ]) u = parent [ u ]; while ( depth [ v ] > depth [ u ]) v = parent [ v ]; //\u4e00\u8d77\u5411\u4e0a\u8d70 while ( u != v ){ u = parent [ u ], v = parent [ v ]; } return u ; } \u57fa\u4e8e\u4e8c\u5206\u641c\u7d22\u7684\u7b97\u6cd5 \u5bf9\u4e8e\u4efb\u610f\u7ed3\u70b9v\uff0c\u53ef\u4ee5\u901a\u8fc7 parent2[v] = parent[parent[v]] parent4[v] = parent2[parent2[v]] ... \u5f97\u5230\u5176\u5411\u4e0a\u8d70 \\( \\(2^k\\) \\) \u6b65\u5230\u8fbe\u7684\u9876\u70b9 \u6bcf\u6b21\u641c\u7d22\u7684\u590d\u6742\u5ea6\uff1a \\(O(logn)\\) \uff0c\u9884\u5904\u7406\u7684\u590d\u6742\u5ea6\uff1a \\(O(nlogn)\\) vector < int > G [ max_v ]; int root , parent [ max_k ][ max_v ], depth [ max_v ]; void dfs ( int v , int p , int d ){ depth [ v ] = d , parent [ v ] = p ; for ( int i = 0 ; i < G [ v ]. size (); i ++ ) if ( G [ v ][ i ] != p ) dfs ( G [ v ][ i ], v , d + 1 ); } void init ( int V ){ //\u9884\u5904\u7406parent[0]\u548cdepth dfs ( root , -1 , 0 ); //\u9884\u5904\u7406parent for ( int k = 0 ; k + 1 < max_k ; k ++ ) for ( int i = 0 ; i < V ; i ++ ) { //parent[k][v] \u8868\u793a\u4ece v \u7ed3\u70b9\u5411\u4e0a\u8d70 2^k \u6b21\u7684\u7ed3\u70b9\uff0c \u8d85\u8fc7\u6839\u65f6\u8bb0\u4f5c-1 if ( parent [ k ][ i ] < 0 ) parent [ k + 1 ][ i ] = -1 ; else parent [ k + 1 ][ i ] = parent [ k ][ parent [ k ][ i ]]; } } int lca ( int u , int v ){ //\u8ba9u\u548cv\u8d70\u5230\u540c\u4e00\u6df1\u5ea6 if ( depth [ u ] > depth [ v ]) swap ( u , v ); //\u8ba9v\u7684\u6df1\u5ea6\u6df1\u4e00\u4e9b for ( int k = 0 ; k < max_k ; k ++ ) { if (( depth [ v ] - depth [ u ]) >> k & 1 ) v = parent [ k ][ v ]; } if ( u == v ) return u ; //\u4e8c\u5206\u641c\u7d22\u8ba1\u7b97LCA for ( int k = max_k -1 ; k >= 0 ; k -- ) { if ( parent [ k ][ v ] != parent [ k ][ u ]) { //\u5982\u679c\u8d85\u8fc7\u4e86\u4ed6\u4eec\u7684LCA\u4e5f\u4e00\u5b9a\u662f\u4e00\u6837\u7684,\u4e0d\u4e00\u6837\u4e00\u5b9a\u8fd8\u6ca1\u5230LCA v = parent [ k ][ v ], u = parent [ k ][ u ]; } } return parnet [ 0 ][ u ]; //?\u8fd9\u91cc\u597d\u50cf\u4e0d\u592a\u5bf9?// }","title":"\u6700\u8fd1\u516c\u5171\u7956\u5148(LCA)"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_19","text":"\u6d1b\u8c37 P3806 POJ 1741","title":"\u70b9\u5206\u6cbb"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_20","text":"","title":"\u5176\u4ed6"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#_21","text":"\u5b9a\u4e49\uff1a \u5339\u914d\uff1a\u5728G\u4e2d\u4e24\u4e24\u6ca1\u6709\u516c\u5171\u70b9\u7684\u8fb9\u96c6\u5408M \u8fb9\u8986\u76d6\uff1aG\u4e2d\u4efb\u610f\u9876\u70b9\u90fd\u81f3\u5c11\u662fF\u4e2d\u67d0\u6761\u8fb9\u7684\u7aef\u70b9\u7684\u8fb9\u96c6\u5408F \u72ec\u7acb\u96c6\uff1a\u5728G\u4e2d\u4e24\u4e24\u4e92\u4e0d\u76f8\u8fde\u7684\u9876\u70b9\u96c6\u5408S \u9876\u70b9\u8986\u76d6\uff1aG\u4e2d\u7684\u4efb\u610f\u8fb9\u90fd\u81f3\u5c11\u6709\u4e00\u4e2a\u7aef\u70b9\u5c5e\u4e8eS\u7684\u9876\u70b9\u96c6\u5408S \u7ed3\u8bba\uff1a \u5bf9\u4e8e\u65e0\u5b64\u7acb\u70b9\u7684\u56fe\uff0c|\u6700\u5927\u5339\u914d|+|\u6700\u5c0f\u8fb9\u8986\u76d6| = |V| |\u6700\u5927\u72ec\u7acb\u96c6|+|\u6700\u5c0f\u9876\u70b9\u8986\u76d6| = |V| \u5bf9\u4e8e\u4e8c\u5206\u56fe\uff0c|\u6700\u5927\u5339\u914d| = |\u6700\u5c0f\u9876\u70b9\u8986\u76d6| \u7b80\u5355\u8bc1\u660e\uff1a\u6700\u5927\u5339\u914d\u65f6\u662f\u6bcf\u4e00\u5bf9\u5339\u914d\u4e2d\uff0c\u4e0d\u53ef\u80fd2\u4e2a\u70b9\u90fd\u8fde\u63a5\u7740\u672a\u5339\u914d\u7684\u70b9\uff08\u4e0d\u7136\u7684\u8bdd\u5c31\u4f1a\u6709\u589e\u5e7f\u8def\u5f84\uff0c\u6700\u5927\u5339\u914d\u8fd8\u53ef\u4ee5\u66f4\u5927), \u6240\u4ee52\u4e2a\u70b9\u4e2d\u6700\u591a\u4e00\u4e2a\u70b9\u8fde\u63a5\u7740\u672a\u5339\u914d\u7684\u70b9\uff0c\u9009\u62e9\u90a3\u4e2a\u70b9\u4f5c\u4e3a\u6700\u5c0f\u5b9a\u70b9\u8986\u76d6\u5373\u53ef","title":"\u4e8c\u5206\u56fe\u76f8\u5173\u7ed3\u8bba"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#2-sat","text":"\u5e03\u5c14\u65b9\u7a0b\u7684\u53ef\u6ee1\u8db3\u6027\u95ee\u9898 \u5408\u53d6\u8303\u5f0f\uff1a \\((a\\vee b\\vee\\dots)\\wedge(c\\vee d\\vee\\dots)\\) 2-SAT\u95ee\u9898\uff1a\u5408\u53d6\u8303\u5f0f\u7684\u6bcf\u4e2a\u5b50\u53e5\u7684\u6587\u5b57\u4e0d\u8d85\u8fc72\u7684\u5e03\u5c14\u65b9\u7a0b\u7684\u53ef\u6ee1\u8db3\u6027\u95ee\u9898 \u5c06\u6bcf\u4e2a \\( \\(a\\vee b\\) \\) \u6539\u5199\u6210 \\( \\((\\urcorner a \\Rightarrow b \\wedge \\urcorner b \\Rightarrow a)\\) \\) \uff0c\u4ee5 \\(\\Rightarrow\\) \u5173\u7cfb\u4e3a\u8fb9\u5efa\u6709\u5411\u56fe\uff0c\u5229\u7528\u5f3a\u8fde\u901a\u5206\u91cf\u5206\u89e3 \u5982\u679c\u5b58\u5728 x\u548c \\( \\(\\urcorner x\\) \\) \u5b58\u5728\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u65e0\u89e3 \u5426\u5219\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5e03\u5c14\u53d8\u91cfx\uff0c\u5982\u679cx\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u62d3\u6251\u5e8f\u5728 \\(\\urcorner x\\) \u4e4b\u540e\uff0c \\(x\\) \u4e3atrue \u56e0\u4e3a\u62d3\u6251\u5e8f\u5728\u524d\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u53ef\u80fd\u5b58\u5728\u901a\u8def\u5230\u8fbe\u5728\u540e\u7684\uff0c\u6240\u4ee5\u5728\u540e\u7684\u4e00\u5b9a\u4e3atrue","title":"2-SAT"},{"location":"OI/%E5%9B%BE%E8%AE%BA/#dfs","text":"\u5f53\u524d\u7ed3\u70b9\u7684 in \u548c out \u5305\u542b\u4e86\u5b50\u6811\u7684\u6240\u6709\u7ed3\u70b9 int in [ N ], out [ N ], tot = 0 ; void dfs ( int x , int dep ) { in [ x ] = ++ tot ; for ( int i = 0 ; i < es [ x ]. size (); i ++ ) dfs ( es [ x ][ i ], dep + 1 ); out [ x ] = tot ; }","title":"DFS\u5e8f"},{"location":"OI/%E5%AD%97%E7%AC%A6%E4%B8%B2/","text":"\u5b57\u7b26\u4e32 \u00b6 next\u6570\u7ec4 \u4e0e KMP \u00b6 \\(O(n+m)\\) //next void getNext ( char * p , int * next ) { next [ 0 ] = -1 ; int i = 0 , j = -1 ; while ( i < strlen ( p )) if ( j == -1 || p [ i ] == p [ j ]){ i ++ , j ++ ; next [ i ] = j ; } else j = next [ j ]; } //KMP //\u4e3b\u4f53\u5b57\u7b26\u4e32 \u5339\u914d\u5b57\u7b26\u4e32 int KMP ( char * s , char * p ){ int i = 0 ; int j = 0 ; while ( i < strlen ( s ) && j < strlen ( p )) if ( j == -1 || s [ i ] == p [ j ]) i ++ , j ++ ; else j = next [ j ]; //\u8fd4\u56de\u5b58\u5728\u4e0e p \u76f8\u540c\u7684\u5b57\u4e32\u7684\u4f4d\u7f6e if ( j == strlen ( p )) return i - j ; else return -1 ; } Manacher \u00b6 \\(O(n)\\) //Manacher int Manacher ( string s ){ if ( s . length () == 0 ) return 0 ; int len = ( int )( s . length () * 2-1 ); char * cArry = new char [ len ]; int * pArry = new int [ len ]; //\u9884\u5904\u7406\uff1a\u5168\u90fd\u53d8\u6210\u5947\u6570\u56de\u6587\u4e32 for ( int i = 0 ; i < len ; i ++ ) cArry [ i ] = i & 1 ? s [( i -1 ) / 2 ] : '#' ; //R:\u6700\u53f3\u53f3\u8fb9\u754c C\uff1a\u4e0eR\u5bf9\u5e94\u7684\u56de\u6587\u4e2d\u5fc3 maxn\uff1a\u6700\u5927\u56de\u6587\u534a\u5f84\uff0c\u8fd4\u56de\u503c\u4e3amaxn-1 //R\u5b9e\u9645\u4e0a\u662f\u6700\u53f3\u8fb9\u754c\u7684\u53f3\u8fb9\u4e00\u4f4d int R = -1 ; int C = -1 ; int maxn = 0 ; for ( int i = 0 ; i < len ; i ++ ){ pArry [ i ] = i >= R ? 1 : min ( R - i , pArry [ 2 * C - i ]); //\u53d6\u5f97\u53ef\u80fd\u7684\u6700\u77ed\u7684\u56de\u6587\u534a\u5f84 *R\u662f\u6700\u53f3\u8fb9\u754c\u7684\u53f3\u8fb9\u4e00\u4f4d //\u66b4\u529b\u8ba1\u7b97 while ( i + pArry [ i ] < len && i - pArry [ i ] > -1 ){ if ( cArry [ i + pArry [ i ]] == cArry [ i - pArry [ i ]]) pArry [ i ] ++ ; else break ; } //\u66f4\u65b0 if ( i + pArry [ i ] > R ){ R = i + pArry [ i ]; C = i ; } maxn = maxn ( pArry [ i ], maxn ); } //\u6e05\u7a7a\u52a8\u6001\u6570\u7ec4 delete [] cArry ; delete [] pArry ; return maxn -1 ; } \u6700\u5c0f\u8868\u793a\u6cd5 \u00b6 \\(O(n)\\) //\u6700\u5c0f\u8868\u793a\u6cd5 int min_ ( char * s ){ int k = 0 , i = 0 , j = 1 , len = strlen ( s ); // k:\u5339\u914d\u957f\u5ea6 while ( k < len && i < len && j < len ){ if ( s [( s + k ) % len ] == s [( j + k ) % len ]) k ++ ; else { s [( s + k ) % len ] > s [( j + k ) % len ] ? i = i + k + 1 : j = j + k + 1 ; //\u4e0d\u540c\u5219\u8df3\u8f6c if ( i == j ) i ++ ; //\u82e5\u8df3\u8f6c\u540e\u4e0d\u540c\uff0c\u8981\u4fdd\u8bc1\u6bd4\u8f83\u7684\u53cc\u65b9\u4e0d\u540c k = 0 ; } } return min ( i , j ); }","title":"\u5b57\u7b26\u4e32"},{"location":"OI/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_1","text":"","title":"\u5b57\u7b26\u4e32"},{"location":"OI/%E5%AD%97%E7%AC%A6%E4%B8%B2/#next-kmp","text":"\\(O(n+m)\\) //next void getNext ( char * p , int * next ) { next [ 0 ] = -1 ; int i = 0 , j = -1 ; while ( i < strlen ( p )) if ( j == -1 || p [ i ] == p [ j ]){ i ++ , j ++ ; next [ i ] = j ; } else j = next [ j ]; } //KMP //\u4e3b\u4f53\u5b57\u7b26\u4e32 \u5339\u914d\u5b57\u7b26\u4e32 int KMP ( char * s , char * p ){ int i = 0 ; int j = 0 ; while ( i < strlen ( s ) && j < strlen ( p )) if ( j == -1 || s [ i ] == p [ j ]) i ++ , j ++ ; else j = next [ j ]; //\u8fd4\u56de\u5b58\u5728\u4e0e p \u76f8\u540c\u7684\u5b57\u4e32\u7684\u4f4d\u7f6e if ( j == strlen ( p )) return i - j ; else return -1 ; }","title":"next\u6570\u7ec4 \u4e0e KMP"},{"location":"OI/%E5%AD%97%E7%AC%A6%E4%B8%B2/#manacher","text":"\\(O(n)\\) //Manacher int Manacher ( string s ){ if ( s . length () == 0 ) return 0 ; int len = ( int )( s . length () * 2-1 ); char * cArry = new char [ len ]; int * pArry = new int [ len ]; //\u9884\u5904\u7406\uff1a\u5168\u90fd\u53d8\u6210\u5947\u6570\u56de\u6587\u4e32 for ( int i = 0 ; i < len ; i ++ ) cArry [ i ] = i & 1 ? s [( i -1 ) / 2 ] : '#' ; //R:\u6700\u53f3\u53f3\u8fb9\u754c C\uff1a\u4e0eR\u5bf9\u5e94\u7684\u56de\u6587\u4e2d\u5fc3 maxn\uff1a\u6700\u5927\u56de\u6587\u534a\u5f84\uff0c\u8fd4\u56de\u503c\u4e3amaxn-1 //R\u5b9e\u9645\u4e0a\u662f\u6700\u53f3\u8fb9\u754c\u7684\u53f3\u8fb9\u4e00\u4f4d int R = -1 ; int C = -1 ; int maxn = 0 ; for ( int i = 0 ; i < len ; i ++ ){ pArry [ i ] = i >= R ? 1 : min ( R - i , pArry [ 2 * C - i ]); //\u53d6\u5f97\u53ef\u80fd\u7684\u6700\u77ed\u7684\u56de\u6587\u534a\u5f84 *R\u662f\u6700\u53f3\u8fb9\u754c\u7684\u53f3\u8fb9\u4e00\u4f4d //\u66b4\u529b\u8ba1\u7b97 while ( i + pArry [ i ] < len && i - pArry [ i ] > -1 ){ if ( cArry [ i + pArry [ i ]] == cArry [ i - pArry [ i ]]) pArry [ i ] ++ ; else break ; } //\u66f4\u65b0 if ( i + pArry [ i ] > R ){ R = i + pArry [ i ]; C = i ; } maxn = maxn ( pArry [ i ], maxn ); } //\u6e05\u7a7a\u52a8\u6001\u6570\u7ec4 delete [] cArry ; delete [] pArry ; return maxn -1 ; }","title":"Manacher"},{"location":"OI/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_2","text":"\\(O(n)\\) //\u6700\u5c0f\u8868\u793a\u6cd5 int min_ ( char * s ){ int k = 0 , i = 0 , j = 1 , len = strlen ( s ); // k:\u5339\u914d\u957f\u5ea6 while ( k < len && i < len && j < len ){ if ( s [( s + k ) % len ] == s [( j + k ) % len ]) k ++ ; else { s [( s + k ) % len ] > s [( j + k ) % len ] ? i = i + k + 1 : j = j + k + 1 ; //\u4e0d\u540c\u5219\u8df3\u8f6c if ( i == j ) i ++ ; //\u82e5\u8df3\u8f6c\u540e\u4e0d\u540c\uff0c\u8981\u4fdd\u8bc1\u6bd4\u8f83\u7684\u53cc\u65b9\u4e0d\u540c k = 0 ; } } return min ( i , j ); }","title":"\u6700\u5c0f\u8868\u793a\u6cd5"},{"location":"OI/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","text":"\u6570\u636e\u7ed3\u6784 \u00b6 \u6811\u72b6\u6570\u7ec4 \u00b6 \u5355\u70b9\u66f4\u65b0 \u533a\u95f4\u67e5\u8be2 int a [ maxn ], c [ maxn ]; //\u539f\u6570\u7ec4\u548c\u6811\u72b6\u6570\u7ec4 int lowbit ( int x ){ return x & ( - x ); } void updata ( int i , int k ) //\u7b2c i \u4e2a\u5143\u7d20\u52a0 k { while ( i <= n ) { c [ i ] += k ; i += lowbit ( i ); } } int getsum ( int i ) //\u524di\u4e2a\u548c { int res = 0 ; while ( i > 0 ) { res += c [ i ]; i -= lowbit ( i ); } return res ; } \u533a\u95f4\u66f4\u65b0 \u5355\u70b9\u67e5\u8be2 //\u5229\u7528\u539f\u6570\u7ec4\u7684\u5dee\u5206\u6570\u7ec4\u5efa\u6811 int a [ maxn ] = { 0 }, c [ maxn ]; //\u539f\u6570\u7ec4\u548c\u6811\u72b6\u6570\u7ec4 int lowbit ( int x ){ return x & ( - x ); } void updata ( int i , int k ) //\u7b2c i \u4e2a\u5143\u7d20\u52a0 k { while ( i <= n ) { c [ i ] += k ; i += lowbit ( i ); } } int getsum ( int i ) //\u524di\u4e2a { int res = 0 ; while ( i > 0 ) { res += c [ i ]; i -= lowbit ( i ); } return res ; } /* updata(i,a[i] - a[i-1]); //\u5dee\u5206\u5efa\u6811 //[x,y]\u533a\u95f4\u5185\u52a0\u4e0ak updata(x,k); //A[x] - A[x-1]\u589e\u52a0k updata(y+1,-k); //A[y+1] - A[y]\u51cf\u5c11k //\u5355\u70b9\u67e5\u8be2 \u5dee\u5206\u5efa\u6811\u6240\u4ee5\u5355\u70b9\u67e5\u8be2\u53d8\u6210\u4e86\u6c42\u548c int sum = getsum(i); */ \u533a\u95f4\u66f4\u65b0 \u533a\u95f4\u67e5\u8be2 d \u662f a \u7684\u5dee\u5206\u6570\u7ec4 \u6709 \\(a_i = \\sum_{j=1}^{i}{d_j}\\) $\\therefore\\sum_{i=1}^{r}{a_i} = \\sum_{i=1}^{r}{\\sum_{j=1}^{i}{d_j}} $ \u200b \\(= \\sum_{i=1}^{r}{d_i \\times(r-i+1)}\\) \u200b $ = \\sum_{i=1}^{r}{d_i \\times(r+1)}-\\sum_{i=1}^{r}{d_i \\times i}$ \u6240\u4ee5\u7ef4\u62a42\u4e2a\u6811\u72b6\u6570\u7ec4 sum1[i] = d[i]\uff0csum2[i] = d[i]*(i-1) \u7ebf\u6bb5\u6811 \u00b6 /*\u533a\u95f4\u548c\u7684\u7ebf\u6bb5\u6811*/ //\u5efa\u6811 void build ( ll x , ll l , ll r ) { if ( l == r ) { scanf ( \"%lld\" , & sum [ x ]); return ; } ll mid = ( l + r ) >> 1 ; build ( x << 1 , l , mid ); build ( x << 1 | 1 , mid + 1 , r ); sum [ x ] = sum [ x << 1 ] + sum [ x << 1 | 1 ]; } //\u4e0b\u653e\u61d2\u6807\u8bb0 void pushdown ( ll x , ll l , ll r ) { ll mid = ( l + r ) / 2 ; lz [ x << 1 ] += lz [ x ], lz [ x << 1 | 1 ] += lz [ x ]; sum [ x << 1 ] += lz [ x ] * ( mid - l + 1 ), sum [ x << 1 | 1 ] += lz [ x ] * ( r - mid ); lz [ x ] = 0 ; } //\u533a\u95f4\u66f4\u65b0 void update ( ll x , ll l , ll r , ll gl , ll gr , ll k ) { if ( l >= gl && r <= gr ) { lz [ x ] += k ; sum [ x ] += ( r - l + 1 ) * k ; return ; } pushdown ( x , l , r ); ll mid = ( l + r ) / 2 ; if ( gl <= mid ) update ( x << 1 , l , mid , gl , gr , k ); if ( gr > mid ) update ( x << 1 | 1 , mid + 1 , r , gl , gr , k ); sum [ x ] = sum [ x << 1 ] + sum [ x << 1 | 1 ]; } //\u533a\u95f4\u548c ll get_sum ( ll x , ll l , ll r , ll gl , ll gr ) { if ( l >= gl && r <= gr ) return sum [ x ]; pushdown ( x , l , r ); ll res = 0 ; ll mid = ( l + r ) / 2 ; if ( gl <= mid ) res += get_sum ( x << 1 , l , mid , gl , gr ); if ( gr > mid ) res += get_sum ( x << 1 | 1 , mid + 1 , r , gl , gr ); return res ; } \u5e76\u67e5\u96c6 \u00b6 int fa [ MAXN ]; //\u521d\u59cb\u5316 void init ( int n ){ for ( int i = 0 ; i < n ; i ++ ) fa [ i ] = i ; //\u7236\u7ed3\u70b9\u662f\u81ea\u5df1 } //\u67e5\u8be2\u5e76\u8def\u5f84\u538b\u7f29 int find ( int x ){ if ( fa [ x ] != x ) fa [ x ] = find ( fa [ x ]); return fa [ x ]; } //\u5408\u5e76 void unite ( int x , int y ){ int fx = find ( x ); int fy = find ( y ); fa [ fx ] = fy ; } //\u67e5\u8be2\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u96c6\u5408 bool same ( int x , int y ){ return find ( x ) == find ( y ); } \u5e26\u6743\u5e76\u67e5\u96c6 int fa [ MAXN ], value [ MAXN ]; //\u7236\u7ed3\u70b9 \u6743\u503c //\u67e5\u8be2 int find ( int x ){ if ( x != fa [ x ]){ int t = fa [ x ]; fa [ x ] = find ( fa [ x ]); value [ x ] += value [ t ]; //\u8fd9\u65f6\u7684\u7236\u4eb2\u7ed3\u70b9\u7684\u6743\u503c\u662f\u7236\u7ed3\u70b9\u5230\u6839\u7ed3\u70b9\u7684\u6743\u503c //\u6240\u4ee5\u52a0\u4e0a\u539f\u672c\u81ea\u5df1\u5230\u7236\u7ed3\u70b9\u7684\u6743\u503c\u5c31\u662f\u81ea\u5df1\u5230\u6839\u7ed3\u70b9\u7684\u6743\u503c } return fa [ x ]; } //\u5408\u5e76, s\u662fx->y\u7684\u6743\u503c void unite ( int x , int y , int s ){ int px = find ( x ); int py = find ( y ); if ( px != py ){ fa [ px ] = py ; value [ px ] = s + value [ y ] - value [ x ]; //x->y->py\u7684\u6743\u503c = x->px->py\u7684\u6743\u503c\uff0c\u6240\u4ee5\u5f97px->py\u7684\u6743\u503c\u4e3a\u4e0a\u5f0f } } \u6808 \u00b6 \u5355\u8c03\u6808 \u00b6 //\u6c42\u51fa\u6bcf\u4e2a\u5143\u7d20\u5de6\u53f3\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u5b83\u7684\u5143\u7d20\u7684\u4e0b\u6807 for ( int i = 1 ; i <= n ; i ++ ) { while ( ! st . empty () && num [ st . top ()] > num [ i ]) { r [ st . top ()] = i ; st . pop (); } if ( st . empty ()) l [ i ] = -1 ; else if ( num [ st . top ()] == num [ i ]) l [ i ] = l [ st . top ()]; else l [ i ] = st . top (); st . push ( i ); } while ( ! st . empty ()) { r [ st . top ()] = n + 1 ; st . pop (); } \u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784 \u00b6 \u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811(\u4e3b\u5e2d\u6811) \u00b6 \u6d1b\u8c37 P3834 //\u4e00\u822c\u5f0032\u500d\u7a7a\u95f4 const int maxn = 2e5 + 5 ; int a [ maxn ], b [ maxn ], n , m , tot , q ; int lc [ maxn << 5 ], rc [ maxn << 5 ], sum [ maxn << 5 ], rt [ maxn << 5 ]; void build ( int & rt , int l , int r ) { rt = ++ tot , sum [ rt ] = 0 ; if ( l == r ) return ; int mid = ( l + r ) >> 1 ; build ( lc [ rt ], l , mid ), build ( rc [ rt ], mid + 1 , r ); } int update ( int x , int l , int r , int t ) { int xx = ++ tot ; lc [ xx ] = lc [ x ], rc [ xx ] = rc [ x ], sum [ xx ] = sum [ x ] + 1 ; if ( l == r ) return xx ; int mid = ( l + r ) >> 1 ; if ( t <= mid ) lc [ xx ] = update ( lc [ xx ], l , mid , t ); else rc [ xx ] = update ( rc [ xx ], mid + 1 , r , t ); return xx ; } int query ( int u , int v , int l , int r , int k ) { int mid = ( l + r ) >> 1 , t = sum [ lc [ v ]] - sum [ lc [ u ]]; if ( l == r ) return l ; if ( k <= t ) return query ( lc [ u ], lc [ v ], l , mid , k ); else return query ( rc [ u ], rc [ v ], mid + 1 , r , k - t ); } int main () { cin >> n >> m ; for ( int i = 1 ; i <= m ; i ++ ) scanf ( \"%d\" , a + i ), b [ i ] = a [ i ]; sort ( b + 1 , b + 1 + n ); q = unique ( b + 1 , b + 1 + n ) - b - 1 ; build ( rt [ 0 ], 1 , q ); for ( int i = 1 ; i <= n ; i ++ ) { int t = lower_bound ( b + 1 , b + 1 + q , a [ i ]) - b ; rt [ i ] = update ( rt [ i - 1 ], 1 , q , t ); } int l , r , k ; for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%d %d %d\" , & l , & r , & k ); printf ( \"%d \\n \" , b [ query ( rt [ l - 1 ], rt [ r ], 1 , q , k )]); } return 0 ; } \u4e8c\u4f4d\u524d\u7f00\u548c \u00b6 //\u9884\u5904\u7406 for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) dp [ i ][ j ] = dp [ i -1 ][ j ] + dp [ i ][ j -1 ] - dp [ i -1 ][ j -1 ] + matrix [ i ][ j ]; //x1, y1, x2, y2 (\u67e5\u8be2\u533a\u95f4) int res = dp [ x2 ][ y2 ] - dp [ x2 ][ y1 -1 ] - dp [ x1 -1 ][ y2 ] + dp [ x1 -1 ][ y1 -1 ];","title":"\u6570\u636e\u7ed3\u6784"},{"location":"OI/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_1","text":"","title":"\u6570\u636e\u7ed3\u6784"},{"location":"OI/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_2","text":"\u5355\u70b9\u66f4\u65b0 \u533a\u95f4\u67e5\u8be2 int a [ maxn ], c [ maxn ]; //\u539f\u6570\u7ec4\u548c\u6811\u72b6\u6570\u7ec4 int lowbit ( int x ){ return x & ( - x ); } void updata ( int i , int k ) //\u7b2c i \u4e2a\u5143\u7d20\u52a0 k { while ( i <= n ) { c [ i ] += k ; i += lowbit ( i ); } } int getsum ( int i ) //\u524di\u4e2a\u548c { int res = 0 ; while ( i > 0 ) { res += c [ i ]; i -= lowbit ( i ); } return res ; } \u533a\u95f4\u66f4\u65b0 \u5355\u70b9\u67e5\u8be2 //\u5229\u7528\u539f\u6570\u7ec4\u7684\u5dee\u5206\u6570\u7ec4\u5efa\u6811 int a [ maxn ] = { 0 }, c [ maxn ]; //\u539f\u6570\u7ec4\u548c\u6811\u72b6\u6570\u7ec4 int lowbit ( int x ){ return x & ( - x ); } void updata ( int i , int k ) //\u7b2c i \u4e2a\u5143\u7d20\u52a0 k { while ( i <= n ) { c [ i ] += k ; i += lowbit ( i ); } } int getsum ( int i ) //\u524di\u4e2a { int res = 0 ; while ( i > 0 ) { res += c [ i ]; i -= lowbit ( i ); } return res ; } /* updata(i,a[i] - a[i-1]); //\u5dee\u5206\u5efa\u6811 //[x,y]\u533a\u95f4\u5185\u52a0\u4e0ak updata(x,k); //A[x] - A[x-1]\u589e\u52a0k updata(y+1,-k); //A[y+1] - A[y]\u51cf\u5c11k //\u5355\u70b9\u67e5\u8be2 \u5dee\u5206\u5efa\u6811\u6240\u4ee5\u5355\u70b9\u67e5\u8be2\u53d8\u6210\u4e86\u6c42\u548c int sum = getsum(i); */ \u533a\u95f4\u66f4\u65b0 \u533a\u95f4\u67e5\u8be2 d \u662f a \u7684\u5dee\u5206\u6570\u7ec4 \u6709 \\(a_i = \\sum_{j=1}^{i}{d_j}\\) $\\therefore\\sum_{i=1}^{r}{a_i} = \\sum_{i=1}^{r}{\\sum_{j=1}^{i}{d_j}} $ \u200b \\(= \\sum_{i=1}^{r}{d_i \\times(r-i+1)}\\) \u200b $ = \\sum_{i=1}^{r}{d_i \\times(r+1)}-\\sum_{i=1}^{r}{d_i \\times i}$ \u6240\u4ee5\u7ef4\u62a42\u4e2a\u6811\u72b6\u6570\u7ec4 sum1[i] = d[i]\uff0csum2[i] = d[i]*(i-1)","title":"\u6811\u72b6\u6570\u7ec4"},{"location":"OI/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_3","text":"/*\u533a\u95f4\u548c\u7684\u7ebf\u6bb5\u6811*/ //\u5efa\u6811 void build ( ll x , ll l , ll r ) { if ( l == r ) { scanf ( \"%lld\" , & sum [ x ]); return ; } ll mid = ( l + r ) >> 1 ; build ( x << 1 , l , mid ); build ( x << 1 | 1 , mid + 1 , r ); sum [ x ] = sum [ x << 1 ] + sum [ x << 1 | 1 ]; } //\u4e0b\u653e\u61d2\u6807\u8bb0 void pushdown ( ll x , ll l , ll r ) { ll mid = ( l + r ) / 2 ; lz [ x << 1 ] += lz [ x ], lz [ x << 1 | 1 ] += lz [ x ]; sum [ x << 1 ] += lz [ x ] * ( mid - l + 1 ), sum [ x << 1 | 1 ] += lz [ x ] * ( r - mid ); lz [ x ] = 0 ; } //\u533a\u95f4\u66f4\u65b0 void update ( ll x , ll l , ll r , ll gl , ll gr , ll k ) { if ( l >= gl && r <= gr ) { lz [ x ] += k ; sum [ x ] += ( r - l + 1 ) * k ; return ; } pushdown ( x , l , r ); ll mid = ( l + r ) / 2 ; if ( gl <= mid ) update ( x << 1 , l , mid , gl , gr , k ); if ( gr > mid ) update ( x << 1 | 1 , mid + 1 , r , gl , gr , k ); sum [ x ] = sum [ x << 1 ] + sum [ x << 1 | 1 ]; } //\u533a\u95f4\u548c ll get_sum ( ll x , ll l , ll r , ll gl , ll gr ) { if ( l >= gl && r <= gr ) return sum [ x ]; pushdown ( x , l , r ); ll res = 0 ; ll mid = ( l + r ) / 2 ; if ( gl <= mid ) res += get_sum ( x << 1 , l , mid , gl , gr ); if ( gr > mid ) res += get_sum ( x << 1 | 1 , mid + 1 , r , gl , gr ); return res ; }","title":"\u7ebf\u6bb5\u6811"},{"location":"OI/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_4","text":"int fa [ MAXN ]; //\u521d\u59cb\u5316 void init ( int n ){ for ( int i = 0 ; i < n ; i ++ ) fa [ i ] = i ; //\u7236\u7ed3\u70b9\u662f\u81ea\u5df1 } //\u67e5\u8be2\u5e76\u8def\u5f84\u538b\u7f29 int find ( int x ){ if ( fa [ x ] != x ) fa [ x ] = find ( fa [ x ]); return fa [ x ]; } //\u5408\u5e76 void unite ( int x , int y ){ int fx = find ( x ); int fy = find ( y ); fa [ fx ] = fy ; } //\u67e5\u8be2\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u96c6\u5408 bool same ( int x , int y ){ return find ( x ) == find ( y ); } \u5e26\u6743\u5e76\u67e5\u96c6 int fa [ MAXN ], value [ MAXN ]; //\u7236\u7ed3\u70b9 \u6743\u503c //\u67e5\u8be2 int find ( int x ){ if ( x != fa [ x ]){ int t = fa [ x ]; fa [ x ] = find ( fa [ x ]); value [ x ] += value [ t ]; //\u8fd9\u65f6\u7684\u7236\u4eb2\u7ed3\u70b9\u7684\u6743\u503c\u662f\u7236\u7ed3\u70b9\u5230\u6839\u7ed3\u70b9\u7684\u6743\u503c //\u6240\u4ee5\u52a0\u4e0a\u539f\u672c\u81ea\u5df1\u5230\u7236\u7ed3\u70b9\u7684\u6743\u503c\u5c31\u662f\u81ea\u5df1\u5230\u6839\u7ed3\u70b9\u7684\u6743\u503c } return fa [ x ]; } //\u5408\u5e76, s\u662fx->y\u7684\u6743\u503c void unite ( int x , int y , int s ){ int px = find ( x ); int py = find ( y ); if ( px != py ){ fa [ px ] = py ; value [ px ] = s + value [ y ] - value [ x ]; //x->y->py\u7684\u6743\u503c = x->px->py\u7684\u6743\u503c\uff0c\u6240\u4ee5\u5f97px->py\u7684\u6743\u503c\u4e3a\u4e0a\u5f0f } }","title":"\u5e76\u67e5\u96c6"},{"location":"OI/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_5","text":"","title":"\u6808"},{"location":"OI/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_6","text":"//\u6c42\u51fa\u6bcf\u4e2a\u5143\u7d20\u5de6\u53f3\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u5b83\u7684\u5143\u7d20\u7684\u4e0b\u6807 for ( int i = 1 ; i <= n ; i ++ ) { while ( ! st . empty () && num [ st . top ()] > num [ i ]) { r [ st . top ()] = i ; st . pop (); } if ( st . empty ()) l [ i ] = -1 ; else if ( num [ st . top ()] == num [ i ]) l [ i ] = l [ st . top ()]; else l [ i ] = st . top (); st . push ( i ); } while ( ! st . empty ()) { r [ st . top ()] = n + 1 ; st . pop (); }","title":"\u5355\u8c03\u6808"},{"location":"OI/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_7","text":"","title":"\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784"},{"location":"OI/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_8","text":"\u6d1b\u8c37 P3834 //\u4e00\u822c\u5f0032\u500d\u7a7a\u95f4 const int maxn = 2e5 + 5 ; int a [ maxn ], b [ maxn ], n , m , tot , q ; int lc [ maxn << 5 ], rc [ maxn << 5 ], sum [ maxn << 5 ], rt [ maxn << 5 ]; void build ( int & rt , int l , int r ) { rt = ++ tot , sum [ rt ] = 0 ; if ( l == r ) return ; int mid = ( l + r ) >> 1 ; build ( lc [ rt ], l , mid ), build ( rc [ rt ], mid + 1 , r ); } int update ( int x , int l , int r , int t ) { int xx = ++ tot ; lc [ xx ] = lc [ x ], rc [ xx ] = rc [ x ], sum [ xx ] = sum [ x ] + 1 ; if ( l == r ) return xx ; int mid = ( l + r ) >> 1 ; if ( t <= mid ) lc [ xx ] = update ( lc [ xx ], l , mid , t ); else rc [ xx ] = update ( rc [ xx ], mid + 1 , r , t ); return xx ; } int query ( int u , int v , int l , int r , int k ) { int mid = ( l + r ) >> 1 , t = sum [ lc [ v ]] - sum [ lc [ u ]]; if ( l == r ) return l ; if ( k <= t ) return query ( lc [ u ], lc [ v ], l , mid , k ); else return query ( rc [ u ], rc [ v ], mid + 1 , r , k - t ); } int main () { cin >> n >> m ; for ( int i = 1 ; i <= m ; i ++ ) scanf ( \"%d\" , a + i ), b [ i ] = a [ i ]; sort ( b + 1 , b + 1 + n ); q = unique ( b + 1 , b + 1 + n ) - b - 1 ; build ( rt [ 0 ], 1 , q ); for ( int i = 1 ; i <= n ; i ++ ) { int t = lower_bound ( b + 1 , b + 1 + q , a [ i ]) - b ; rt [ i ] = update ( rt [ i - 1 ], 1 , q , t ); } int l , r , k ; for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%d %d %d\" , & l , & r , & k ); printf ( \"%d \\n \" , b [ query ( rt [ l - 1 ], rt [ r ], 1 , q , k )]); } return 0 ; }","title":"\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811(\u4e3b\u5e2d\u6811)"},{"location":"OI/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_9","text":"//\u9884\u5904\u7406 for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) dp [ i ][ j ] = dp [ i -1 ][ j ] + dp [ i ][ j -1 ] - dp [ i -1 ][ j -1 ] + matrix [ i ][ j ]; //x1, y1, x2, y2 (\u67e5\u8be2\u533a\u95f4) int res = dp [ x2 ][ y2 ] - dp [ x2 ][ y1 -1 ] - dp [ x1 -1 ][ y2 ] + dp [ x1 -1 ][ y1 -1 ];","title":"\u4e8c\u4f4d\u524d\u7f00\u548c"},{"location":"OI/%E6%95%B0%E8%AE%BA/","text":"\u6570\u8bba \u00b6 \u57fa\u7840\u51fd\u6570 \u00b6 gcd \u00b6 \u8bbe \\(a/b=d, a\\%b=r\\) \u5373 \\(a=b\\times d+r\\) \uff0c\u6240\u4ee5 \\(gcd(b, r) | a\\) \uff0c\u53c8 \\(gcd(b, r) | b\\) \uff0c\u6240\u4ee5 \\(gcd(b, r) | gcd(a, b)\\) \u53c8 \\(r=a-b\\times d\\) \uff0c\u6240\u4ee5 \\(gcd(a, b) | r\\) \uff0c\u53c8 \\(gcd(a, b) | b\\) \uff0c\u6240\u4ee5 \\(gcd(a, b) | gcd(b, r)\\) \u6240\u4ee5 \\(gcd(a, b) = gcd(b, r)\\) , \u5373 \\(gcd(a, b) = gcd(b, a\\%b)\\) \u4e00\u4e9b\u6027\u8d28 \\(gcd(a,b)=gcd(a,a+b)=gcd(a,ka+b)\\) \\(gcd(ka,kb)=k*gcd(a,b)\\) \\(gcd(a,b,c)=gcd(gcd(a,b),c)\\) int gcd ( int a , int b ){ return b ? gcd ( b , a % b ) : a ; } lcm \u00b6 int lcm ( int a , int b ){ return a * b / gcd ( a , b ); } exgcd \u00b6 \u6c42 \\(ax + by = gcd(a, b)\\) \u7684\u4e00\u7ec4\u6574\u6570\u89e3 x\uff0cy b = 0\u65f6\uff0c \\(gcd(a, b) = a\\) , x=1\u200b, y=0 \u4e3a\u4e00\u7ec4\u89e3 b != 0 \u65f6 \u8bbe \\(ax_{1} + by_{1} = gcd(a, b)\\) \u200b \\(bx_{2}+ (a\\%b)y_{2} = gcd(b, a\\%b)\\) \u56e0\u4e3a \\(gcd(a, b) = gcd(b, a\\%b)\\) \u6240\u4ee5 \\(bx_{2} + (a\\%b)y_{2} = ax_{1} + by_{1}\\) \u200b \\(a\\%b = a-(a/b)*b\\) , \u4ee3\u5165\u4e0a\u5f0f\u5f97 \u200b \\(bx_{2}+ ( a - (a/b) * b)*y_{2} = ax_{1} + by_{1}\\) \u200b \\(ay_{2} + bx_{2~}- (a/b)*by_{2} = ax_{1} + by_{1}\\) \u200b \\(ay_{2} + b[x_{2}-(a/b)*y_{2}] = ax_{1} + by_{1}\\) \u6240\u4ee5 \\(x_{1} = y_{2}\\) \u200b \\(y_{1} = x_{2} - (a/b)*y_{2}\\) ll exgcd ( ll a , ll b , ll & x , ll & y ) { //\u8fd4\u56de gcd(a, b) if ( ! b ){ x = 1 , y = 0 ; return a ; } ll d = exgcd ( b , a % b , x , y ); ll t = x ; x = y ; y = t - ( a / b ) * y ; return d ; } \u5feb\u901f\u5e42 \u00b6 typedef long long ll ; ll pow ( ll a , ll b , ll p ) { // a^b (mod p) ll res = 1 ; while ( b ){ if ( b & 1 ) res = res * a % p ; a = a * a % p ; b >>= 1 ; } return res ; } \u5feb\u901f\u4e58 \u00b6 //\u9632\u6b62\u4e58\u6cd5\u7206ll ll mul ( ll a , ll b , ll p ){ ll res = 0 ; while ( b ){ if ( b & 1 ) res = ( res + a ) % p ; a = ( a + a ) % p ; b >>= 1 ; } return res ; } \u7d20\u6570 \u00b6 bool isprime ( int x ){ if ( x <= 1 ) return false ; for ( int i = 2 ; i <= x / i ; i ++ ) if ( x % i == 0 ) return false ; return true ; } \u57c3\u6c0f\u7b5b\u7d20\u6570 \u00b6 bool isprime [ N + 1 ]; //0 1 \u662f\u975e\u7d20\u6570 void getPrime (){ for ( int i = 2 , i <= N ; i ++ ) isprime [ i ] = true ; for ( int i = 2 ; i <= N / i ; i ++ ) //\u5982\u679c x>sqrt(N) \u662f\u5408\u6570\uff0c \u5728\u524d\u9762\u5c31\u4f1a\u88ab\u7b5b\u6389 if ( isprime [ i ]) for ( int j = i * i ; j <= N ; j += i ) //2i, 3i, 5i \u90fd\u5df2\u7ecf\u7b5b\u8fc7\uff0c\u53ef\u4ee5\u4ecei*i\u5f00\u59cb isprime [ i ] = false ; } \u6b27\u62c9\u7b5b\u7d20\u6570(\u7ebf\u6027\u7b5b) \u00b6 \\(O(n)\\) int cnt = 0 ; int prime [ N + 1 ]; //\u8bb0\u5f55\u7d20\u6570 bool isprime [ N + 1 ]; void euler (){ for ( int i = 2 ; i <= N ; i ++ ) isprime [ i ] = true ; for ( int i = 2 ; i <= N ; i ++ ){ if ( isprime [ i ]) prime [ cnt ++ ] = i ; //\u8bb0\u5f55 for ( int j = 0 ; j < cnt && i * prime [ j ] <= N ; j ++ ){ isprime [ i * prime [ j ]] = false ; if ( i % prime [ j ] == 0 ) break ; //\u4fdd\u8bc1\u5408\u6570\u88ab\u6700\u5c0f\u7684\u8d28\u56e0\u5b50\u7b5b\u53bb } } } \u7b5b\u533a\u95f4\u5185\u7d20\u6570 \u00b6 //\u7b5b[l, r)\u4e4b\u95f4\u7684\u7d20\u6570 //\u6ce8\u610f\u533a\u95f4\u5f00\u95ed //\u5982\u679cl==1,l++\uff0c\u5426\u5219\u4f1a\u8ba4\u4e3a1\u662f\u7d20\u6570 bool isprime_small [ MAXN ]; //\u8bb0\u5f55\u524d sqrt(r) \u7684\u7d20\u6570 bool isprime [ MAXN ]; //\u5982\u679ci\u662f\u7d20\u6570\uff0c\u8bb0isprime[i-l] = true void segement_prime ( ll l , ll r ){ for ( ll i = 0 ; i * i < r ; i ++ ) isprime_small [ i ] = true ; for ( ll i = 0 ; i < r - l ; i ++ ) isprime [ i ] = true ; for ( ll i = 2 ; i * i < r ; i ++ ) if ( isprime_small [ i ]) { //\u5982\u679c\u662f\u7d20\u6570 for ( ll j = i * i ; j * j < r ; j += i ) //\u7b5b[2, sqrt(b)] isprime_small [ j ] = false ; for ( ll j = max ( 2L L , ( l + i -1 ) / i ) * i ; j < r ; j += i ) //\u7b5b[a, b] isprime [ j - l ] = false ; } } Miller-Rabin \u7d20\u6027\u6d4b\u8bd5 \u00b6 bool check ( ll a , ll r , ll t , ll n ) { ll ret = pow ( a , r , n ), last = ret ; for ( int i = 0 ; i < t ; i ++ ) { ret = mul ( ret , ret , n ); if ( ret == 1 && last != 1 && last != n - 1 ) return true ; last = ret ; } return ret != 1 ; } bool Miller_Rabin ( ll n ) { if ( n == 2 ) return true ; if ( n < 2 || ! ( n & 1 )) return false ; ll r = n - 1 , t = 0 ; while ( ! ( r & 1 )) r >>= 1 , t ++ ; for ( int i = 1 , j ; i <= 8 ; i ++ ) { ll a = rand () % ( n - 2 ) + 2 ; if ( check ( a , r , t , n )) return false ; } return true ; } Pollard-Rho\u5927\u6570\u5206\u89e3 \u00b6 ll pollard ( ll n ) { if ( ! ( n & 1 )) return 2 ; ll c = rand () % ( n - 1 ) + 1 ; ll x = rand () % ( n - 1 ) + 1 , y = x , i = 1 , k = 2 ; while ( true ) { i ++ ; x = ( mul ( x , x , n ) + c ) % n ; ll d = gcd ( y - x + n , n ); if ( d != 1 && d != n ) return d ; if ( y == x ) return n ; if ( i == k ) { y = x ; k <<= 1 ; } } } /* \u500d\u589e\u4f18\u5316 ll pr(ll n) { ll x = 0, y = 0; ll c = 1ll * rand() % (n - 1) + 1; int step = 0, goal = 1; ll val = 1; for (goal = 1;; goal <<= 1, y = x, val = 1) { for (step = 1; step <= goal; ++step) { x = (mul(x, x, n) + c) % n; val = mul(val, abs(y - x), n); if ((step % 127) == 0) { ll d = gcd(val, n); if (d > 1) return d; } } ll d = gcd(val, n); if (d > 1) return d; } } */ ll fac [ 10000 ]; ll tot = 0 ; void find_fac ( ll n ) { if ( Miller_Rabin ( n )) { fac [ tot ++ ] = n ; return ; } ll p = n ; while ( p >= n ) p = pollard ( p ); find_fac ( p ), find_fac ( n / p ); } \u6b27\u62c9\u51fd\u6570 \u00b6 \u5b9a\u4e49: \\(\\varphi(n)\\) \u8868\u793a\u5c0f\u4e8e\u7b49\u4e8e \\(n\\) \u4e14\u4e0e \\(n\\) \u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570\uff0c\u6bd4\u5982 \\(\\varphi(1)=1\\) \u901a\u5f0f\uff1a \\(\\varphi(x)=x\\prod_{i=1}^n{(1-\\frac{1}{p_i})}\\) \uff0c\u5176\u4e2d \\(p_i\\) \u662f \\(x\\) \u7684\u6240\u6709\u8d28\u56e0\u6570 \u57fa\u672c\u6027\u8d28 \u00b6 \\(n\\) \u662f\u8d28\u6570\u65f6\uff0c \\(\\varphi(n)=n-1\\) \\(p\\) \u662f\u8d28\u6570\u65f6\uff0c \\(\\varphi(p^k)=(p-1)\\times p^{k-1}\\) \u79ef\u6027\u6027\u8d28\uff0c\u5982\u679c \\(gcd(a,b)=1\\) \uff0c\u5219 \\(\\varphi(a\\times b)=\\varphi(a)\\times \\varphi(b)\\) \u7279\u522b\u7684\uff0c \\(n\\) \u662f\u5947\u6570\u65f6\uff0c \\(\\varphi(2n)=\\varphi(n)\\) \\(n > 2\\) \u65f6\uff0c \\(\\varphi(n)\\) \u4e3a\u5076\u6570 \\(n=\\sum_{d|n}\\varphi(d)\\) \u6b27\u62c9\u5b9a\u7406\uff0c\u82e5 \\(gcd(a,m)=1\\) \uff0c\u5219 \\(a^{\\varphi(m)}\\equiv 1(mod \\quad m)\\) \u6269\u5c55\u6b27\u62c9\u5b9a\u7406 \\[ a^b\\equiv \\begin{cases} a^{b \\% \\varphi(p)}&gcd(a,p)=1 \\\\ a^b&gcd(a,p)\\neq1,b<\\varphi(p) \\\\ a^{b \\% \\varphi(p)+\\varphi(p)}&gcd(a,p)\\neq1,b\\geq\\varphi(p) \\end{cases} (mod\\ p) \\] \u6c42\u5355\u4e2a\u6570\u7684\u6b27\u62c9\u51fd\u6570 \u00b6 \\(O(\\sqrt{n})\\) ll phi ( ll n ){ ll res = n ; for ( ll i = 2 ; i * i <= n ; i ++ ){ if ( n % i == 0 ){ res -= res / i ; while ( n % i == 0 ) n /= i ; } } if ( n > 1 ) res -= res / n ; return res ; } \u57c3\u6c0f\u6c42\u6b27\u62c9\u51fd\u6570 \u00b6 \\(\\varphi(x)=x\\prod_{i=1}^n{(1-\\frac{1}{p_i})}\\) void euler ( int n ){ for ( int i = 1 ; i <= n ; i ++ ) phi [ i ] = i ; for ( int i = 2 ; i <= n ; i ++ ) if ( phi [ i ] == i ) //\u8fd9\u4ee3\u8868i\u662f\u8d28\u6570 for ( int j = i ; j <= n ; j += i ) phi [ j ] = phi [ j ] / i * ( i -1 ); //\u628ai\u7684\u500d\u6570\u66f4\u65b0\u6389 } \u6b27\u62c9\u7b5b\u6c42\u6b27\u62c9\u51fd\u6570 \u00b6 \\(if(i\\%prime[j] != 0)\\) \uff0c\u5219 \\(i\\) \u4e0e \\(prime[j]\\) \u4e92\u8d28 \u7531\u79ef\u6027\u6027\u8d28\u53ef\u5f97\uff0c \\(phi[i*prime[j]] = phi[i]*phi[prime[j]]\\) \\(if(i\\%prime[j] == 0)\\) \uff0c\u5219 \\(i\\) \u4e2d\u6709 \\(i*prime[j]\\) \u7684\u6240\u6709\u8d28\u56e0\u5b50\uff0c\u6709 \\(\\varphi(i*prime[j])=prime[j]*i*\\prod_{k=1}^n{(1-\\frac{1}{k_i})}=\\varphi(i)*prime[j]\\) int prime [ maxn ], cnt = 0 ; bool vis [ maxn ]; void euler ( int n ){ phi [ 1 ] = 1 ; //1\u8981\u7279\u5224 for ( int i = 2 ; i < = n ; i ++ ){ if ( vis [ i ] == 0 ){ //i\u662f\u8d28\u6570 prime [ cnt ++ ] = i ; phi [ i ] = i -1 ; } for ( int j = 1 ; j < cnt && prime [ j ] * i <= n ; j ++ ){ vis [ i * prime [ j ]] = 1 ; if ( i % prime [ j ] == 0 ){ phi [ i * prime [ j ]] = phi [ i ] * prime [ j ]; //\u82e5prime[j]\u662fi\u7684\u8d28\u56e0\u5b50\uff0c\u5219\u6839\u636e\u8ba1\u7b97\u516c\u5f0f\uff0ci\u5df2\u7ecf\u5305\u62eci*prime[j]\u7684\u6240\u6709\u8d28\u56e0\u5b50 break ; //\u4fdd\u8bc1\u6bcf\u4e2a\u6570\u53ea\u4f1a\u88ab\u81ea\u5df1\u6700\u5c0f\u7684\u56e0\u5b50\u7b5b\u6389\u4e00\u6b21 } else phi [ i * prime [ j ]] = phi [ i ] * phi [ prime [ j ]]; //\u79ef\u6027\u51fd\u6570\u7684\u6027\u8d28 } } } \u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 \u00b6 CRT \u00b6 \u6d1b\u8c37 P3868 \\(X \u2261 r_{i} ( mod\\quad m_{i} )\\) \u8981\u6c42\uff1a \\(m_i\\) \u4e24\u4e24\u4e92\u8d28 ll CRT ( ll n , ll * r , ll * m ){ ll res = 0 , M = 1 ; for ( int i = 0 ; i < n ; i ++ ) M *= m [ i ]; for ( int i = 0 ; i < n ; i ++ ) { ll x , y ; ll tmp = M / m [ i ]; ll d = exgcd ( tmp , m [ i ], x , y ); //gcd(tmp, m[i]) = 1 x = ( x % m [ i ] + m [ i ]) % m [ i ]; res = ( res + tmp * x * r [ i ]) % M ; //\u53ef\u80fd\u9700\u8981\u7528\u5230\u5feb\u901f\u4e58\u9632\u6b62\u6ea2\u51fa } return ( res + M ) % M ; } EXCRT \u00b6 \u6d1b\u8c37 P4777 \\(X \u2261 r_{i} ( mod\\quad m_{i} )\\) \u4e0d\u8981\u6c42 \\(m_i\\) \u4e24\u4e24\u4e92\u8d28 \u6ee1\u8db3\u7b2c\u4e00\u4e2a\u6761\u4ef6\u7684\u89e3\u4e3a \\(r_1\\) \u5047\u8bbe\u6ee1\u8db3\u524d \\(k-1\\) \u4e2a\u6761\u4ef6\u7684\u4e00\u4e2a\u7279\u89e3\u4e3a \\(res\\) \uff0c \\(M_{k-1}\\) \u4e3a\u524d \\(k-1\\) \u4e2a \\(m\\) \u7684 lcm \u5219\u524d \\(k-1\\) \u4e2a\u65b9\u7a0b\u7684\u901a\u89e3\u4e3a $$ res+x\\times M_{k-1} $$ \u90a3\u4e48\u5bf9\u4e8e\u524d \\(k\\) \u4e2a\u65b9\u7a0b,\u5982\u679c\u6709\u89e3\uff0c\u5219 \u5b58\u5728\u6574\u6570 \\(x\\) \uff0c\u4f7f $$ res+x\\times M_{k-1}\\equiv r_k\\quad (mod\\quad m_k) $$ \u5373 $$ x\\times M_{k-1}\\equiv r_k-res\\quad (mod\\quad m_k) $$ \u5229\u7528\u62d3\u6b27\u6c42\u89e3\u5f97 \\(x\\) \uff0c\u5219\u524d \\(k\\) \u4e2a\u65b9\u7a0b\u7684\u4e00\u4e2a\u7279\u89e3\u4e3a $$ res+x\\times M_{k-1} $$ \u901a\u89e3\u4e3a \\(\u7279\u89e3 + x^{'}M_k\\) ll EXCRT ( ll n , ll * r , ll * m ){ ll res = r [ 0 ], M = m [ 0 ]; ll x , y ; for ( int i = 1 ; i < n ; i ++ ) { ll c = ( r [ i ] - res % m [ i ] + m [ i ]) % m [ i ]; ll d = exgcd ( M , m [ i ], x , y ), bg = m [ i ] / d ; x = ( x % bg + bg ) % bg ; if ( c % d != 0 ) return -1 ; //\u65e0\u89e3,\u56e0\u4e3a\u65e0\u6cd5\u8ba9\u4f59\u6570\u6269\u5927\u6210c x = mul ( x , c / d , bg ); //\u5feb\u901f\u4e58 res += x * M ; M *= bg ; //lcm res = ( res % M + M ) % M ; } return res ; } \u540c\u4f59\u95ee\u9898 \u00b6 \u9006\u5143 \u00b6 \u540c\u4f59\u4e0d\u6ee1\u8db3\u9664\u6cd5\uff0c \\(a/b\\quad mod \\quad p\\quad != (a\\quad mod\\quad p)/(b\\quad mod\\quad p)\\) \u5f15\u5165 \\(b\\) \u7684\u9006\u5143 \\(x\\) , \u5373 \\(b*x = 1 (mod\\quad p)\\) \uff0cb \u4e0e p \u4e92\u8d28 \u5047\u8bbe \\(a/b = k (mod\\quad p)\\) \u540c\u4e58 \\(bx\\) \u5f97 $ a/b * bx = k * 1\uff08mod\\quad p)$ \u200b \\(a*x = k (mod\\quad p)\\) \u6ce8\u610f\uff1a b \u548c p \u4e92\u8d28\uff0cb \u624d\u6709\u5173\u4e8e p \u7684\u9006\u5143 \u8d39\u9a6c\u5c0f\u5b9a\u7406\u6c42\u9006\u5143 \u00b6 \u8d39\u9a6c\u5c0f\u5b9a\u7406 \uff1a\u5982\u679c \\(p\\) \u4e3a\u8d28\u6570\uff0c\u4e14 \\(a\\) \u4e0e \\(p\\) \u4e92\u8d28(\u5373 \\(a\\) \u4e0d\u662f \\(p\\) \u7684\u500d\u6570)\uff0c\u5219 \\(a^{p-1} \\equiv 1 \uff08mod\\quad p)\\) \u6240\u4ee5\u6709 \\(a * a^{p-2} \\equiv 1 (mod\\quad p)\\) , \u5373 \\(a^{p-2} (mod\\quad p)\\) \u662f a \u7684\u9006\u5143 //\u7528\u5feb\u901f\u5e42 ll pow ( ll a , ll p ){ int res = 1 ; int d = p -2 ; while ( d ) { if ( d & 1 ) res = res * a % p ; a = a * a % p ; d >>= 1 ; } return res ; } \u62d3\u5c55\u6b27\u51e0\u91cc\u5f97\u6c42\u9006\u5143 \u00b6 \u5982\u679c \\(b\\) \u4e0e \\(p\\) \u4e92\u8d28\uff0c\u5373 \\(gcd(b, p) = 1\\) \u8981\u89e3 \\(b*x = 1 (mod\\quad p)\\) , \u5373\u6c42 \\(bx + yp = 1 = gcd(b, p)\\) \u7684\u89e3 \\(x\\) ll inv ( ll b , ll p ) { ll x , y ; ll d = exgcd ( b , p , x , y ); return d == 1 ? ( x + p ) % p : -1 ; //\u8fd4\u56de -1 \u8bf4\u660e b,p \u4e0d\u4e92\u8d28 } \u6b27\u62c9\u51fd\u6570\u6c42\u9006\u5143 \u00b6 \u6d1b\u8c37 P3811 \u662f\u8d39\u5c0f\u7684\u63a8\u5e7f\uff0c\u4e0d\u8981\u6c42 \\(p\\) \u4e3a\u8d28\u6570\uff0c\u4f46 \\(gcd(a,p)=1\\) \\(a^{\\varphi(p)}\\equiv1(mod\\quad p)\\) \uff0c\u6240\u4ee5\u5176\u9006\u5143\u4e3a \\(a^{\\varphi(n)-1}\\) ll phi ( ll n ){ ll res = n ; for ( ll i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { res -= res / i ; while ( n % i == 0 ) n /= i ; } } if ( n > 1 ) res -= res / n ; return res ; } ans = pow ( a , phi ( p ) -1 , p ); \u9636\u4e58\u9006\u5143 \u00b6 \u6c42\u9636\u4e58\u7684\u9006\u5143\uff0c\u5148\u7528\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6c42\u51fa n! \u5728 p \u4e0b\u7684\u9006\u5143\uff0c\u518d\u5f80\u524d\u63a8 \u5047\u8bbe n! \u7684\u9006\u5143\u4e3a \\([n!]^{-1}\\) , \u8981\u6c42 \\((n-1)!\\) \u7684\u9006\u5143 $$ (n-1)! \\times n[n!]^{-1} \u2261 1 (mod\\quad p) $$ \u6240\u4ee5\uff0c \\((n-1)!\\) \u7684\u9006\u5143\u5c31\u662f \\(n[n!]^{-1}\\) void fa_inv ( ll n , ll p ){ fact [ 0 ] = 1 ; //factorial for ( int i = 1 ; i <= n ; i ++ ) fact [ i ] = fact [ i -1 ] * i % p ; finv [ N ] = pow ( fact [ n ], p -2 , p ); for ( int i = n -1 ; i >= 0 ; i -- ) finv [ i ] = ( i + 1 ) * finv [ i + 1 ] % p ; } \u7ebf\u6027\u6c42\u9006\u5143(\u6253\u8868) \u00b6 \u6d1b\u8c37 P3811 \u8981\u6c42\u51fa 1~n \u4e2d\u6240\u6709\u6570\u5bf9 \\(p\\) \u7684\u9006\u5143\uff0c\u9009\u62e9\u6253\u8868 \u200b \\(1^{\u22121} \u2261 1 (mod\\quad p)\\) \u8bbe \\(p = k * i + r\\) \u5176\u4e2d 1 < r < i < p, \u5373 \\(k = p/i, r = p\\quad mod\\quad i\\) \u6240\u4ee5\u6709 \\(k * i + r \u2261 0 ( mod\\quad p )\\) \u4e24\u8fb9\u540c\u65f6\u4e58\u4e0a \\(i^{\u22121} * r^{\u22121}\\) \u5f97 \\(k * r^{\u22121} + i^{\u22121} \u2261 0 ( mod\\quad p )\\) \u200b \\(i^{\u22121} \u2261 \u2212k * r^{\u22121} ( mod\\quad p )\\) \u5f97\u9012\u63a8\u516c\u5f0f \\(i^{-1} \u2261 -\uff08p/i) * (p\\quad mod\\quad i)^{-1} (mod\\quad p)\\) \u6574\u7406\u5f97 \\(inv[i] = (p - p/i) * inv[p\\%i] \\% p\\) \u5176\u4e2d p % i \u6bd4 i \u5c0f void inverse =- ( int n , int p ) { inv [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) inv [ i ] = ( ll )( p - p / i ) * inv [ p % i ] % p ; } Lucas\u5b9a\u7406 \u00b6 \u6d1b\u8c37 P3807 HDU 3037 \u89e3\u51b3\u7ec4\u5408\u6570\u53d6\u4f59\u7684\u95ee\u9898\uff1a (p\u5fc5\u987b\u662f\u7d20\u6570,\u4e0d\u7136\u4e0d\u80fd\u7528\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6c42\u9006\u5143) $$ C(n,m) = \\prod_{i=0}^{k}{C(n_i, m_i)}(mod\\quad p) $$ \\[ n = n_k p^k+n_{k-1} p^{k-1}+\\cdots+n_1p+n_0 \\] \\[ m=m_k p^k+m_{k-1} p^{k-1}+\\cdots+m_1p+m_0 \\] //\u9884\u5904\u7406\u9636\u4e58 void getFact ( ll p ) { fact [ 0 ] = 1 ; for ( ll i = 1 ; i <= p ; i ++ ) f [ i ] = f [ i -1 ] * i % p ; } //\u8ba1\u7b97\u7ec4\u5408\u6570 ll comb ( ll n , ll m , ll p ) { if ( m > n ) return 0 ; return fact [ n ] * pow ( f [ m ], p -2 , p ) % p * pow ( f [ n - m ], p -2 , p ) % p ; //\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6c42\u9006\u5143 } ll lucas ( ll n , ll m , ll p ) { if ( ! m ) return 1 ; return lucas ( n / p , m / p , p ) % p * comb ( n % p , m % p , p ) % p ; } BSGS \u00b6 \u6c42 \\(a^x=b(mod\\ \\ p)\\) \u7684 \\(x\\) \u6700\u5c0f\u7684\u89e3 ll bsgs ( ll a , ll b , ll p ) { map < ll , ll > hash ; hash . clear (); b %= p ; ll t = sqrt ( p ) + 1 ; for ( ll i = 0 ; i < t ; i ++ ) hash [ b * ksm ( a , i , p ) % p ] = i ; a = ksm ( a , t , p ); if ( ! a ) return b == 0 ? 1 : -1 ; for ( ll i = 1 ; i <= t ; i ++ ) { ll val = ksm ( a , i , p ); int j = hash . find ( val ) == hash . end () ? -1 : hash [ val ]; if ( j >= 0 && i * t - j >= 0 ) return i * t - j ; } return -1 ; //\u65e0\u89e3 } \u6570\u503c\u5206\u6790 \u00b6 Simpson \u516c\u5f0f \u00b6 \u5982\u679c\u539f\u51fd\u6570\u662f\u6b21\u6570\u4e0d\u8d85\u8fc7\u4e8c\u6b21\u7684\u591a\u9879\u5f0f\uff0c\u53ef\u4ee5\u7cbe\u786e\u8ba1\u7b97\u79ef\u5206\u503c\uff0c\u53ea\u9700\u8981\u77e5\u9053\u7aef\u70b9\u548c\u4e2d\u70b9\u7684\u503c $$ \\int_{a}^{b}{f(x)}dx \\approx \\frac{b-a}{6}(\\quad f(a)+4f(\\frac{a+b}{2})+f(b)\\quad) $$ \u9ad8\u65af\u7ea6\u65e6\u6d88\u5143 \u00b6 \u6d1b\u8c37 P3389 \\(O(n^3)\\) \uff0c\u65b9\u7a0b\u6570\u548c\u672a\u77e5\u6570\u90fd\u8981\u6c42\u662fn\uff0c\u7ed3\u679c\u5728 \\(a[i][n+1]\\) \u4e2d\uff0c\u8fd4\u56de\u503c1\u8868\u793a\u6709\u552f\u4e00\u89e3\uff0c0\u8868\u793a\u65e0\u89e3 const double eps = 1e-8 ; int guass_jordan ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) { int r = i ; for ( int j = i ; j <= n ; j ++ ) //\u628a\u6b63\u5728\u5904\u7406\u7684\u672a\u77e5\u6570\u7cfb\u6570\u7edd\u5bf9\u503c\u6700\u5927\u7684\u653e\u4e0a\u6765 if ( fabs ( a [ r ][ i ]) < fabs ( a [ j ][ i ])) r = j ; if ( r != i ) //\u4ea4\u6362 for ( int j = 1 ; j <= n + 1 ; j ++ ) swap ( a [ i ][ j ], a [ r ][ j ]); if ( fabs ( a [ i ][ i ]) < eps ) return 0 ; //\u65e0\u89e3 for ( int j = i + 1 ; j <= n + 1 ; j ++ ) a [ i ][ j ] /= a [ i ][ i ]; //\u7cfb\u6570\u5316\u4e3a1,\u6ce8\u610fi+1\uff0c\u5982\u679c\u4ecei\u5f00\u59cb\u4f1a\u5f71\u54cd\u5230\u540e\u9762 for ( int j = 1 ; j <= n ; j ++ ) if ( j != i ) for ( int k = i + 1 ; k <= n + 1 ; k ++ ) //\u6ce8\u610fi+1\uff0c\u5982\u679c\u4ecei\u5f00\u59cb\u4f1a\u5f71\u54cd\u5230\u540e\u9762 a [ j ][ k ] -= a [ i ][ k ] * a [ j ][ i ]; } return 1 ; } \u5176\u4ed6 \u00b6 \u88f4\u8700\u5b9a\u7406 \u00b6 \u82e5 \\(a,b\\) \u662f\u6574\u6570,\u4e14 \\(gcd(a,b)=d\\) \uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u7684\u6574\u6570 \\(x,y\\) , \\(ax+by\\) \u90fd\u4e00\u5b9a\u662f \\(d\\) \u7684\u500d\u6570\uff0c\u5373 \\(d|(ax+by)\\) \u7279\u522b\u5730\uff0c\u4e00\u5b9a\u5b58\u5728\u6574\u6570 \\(x,y\\) \uff0c\u4f7f \\(ax+by=d\\) \u6210\u7acb\u3002 \u91cd\u8981\u63a8\u8bba\uff1a \\(a,b\\) \u4e92\u8d28\u7684\u5145\u8981\u6761\u4ef6\u662f\u5b58\u5728\u6574\u6570 \\(x,y\\) \u4f7f \\(ax+by=1\\) \u552f\u4e00\u5206\u89e3\u5b9a\u7406 \u00b6 \u6b63\u6574\u6570 \\(N\\) \u7684\u6807\u51c6\u5206\u89e3\u5f0f\uff1a \\(N=p_1^{a_1}p_2^{a_2}...p_n^{a_n}\\) \u90a3 \\(N\\) \u7684\u6b63\u56e0\u6570\u4e2a\u6570\u4e3a \\(\\sigma_0(N)=(1+a_1)(1+a_2)...(1+a_n)\\) \u6240\u6709\u6b63\u56e0\u6570\u7684\u548c\u4e3a \\(\\sigma_1(N)=(1+p_1+p_1^2+...+p_1^{a_1})...(1+p_n+p_n^2+...+p_n^{a_n})\\) \u6574\u6570\u5206\u5757 \u00b6 \\(\\frac{n}{1}+\\frac{n}{2}+\\frac{n}{3}+..+\\frac{n}{n}\\) \u7684\u548c ll ans = 0 ; for ( int l = 1 , r ; l <= n ; l = r + 1 ) { r = n / ( n / l ); //\u6bcf\u6bb5\u533a\u95f4\u7684\u53f3\u7aef\u70b9 ans += ( ll )( n / l ) * ( r - l + 1 ); } \u65af\u7279\u6797\u516c\u5f0f \u00b6 \\[ n! \\approx \\sqrt{2 \\pi n}(\\frac{n}{e})^n \\] \u7528 \\(log10\\) \u5feb\u901f\u8ba1\u7b97\u5927\u6570\u7684\u4f4d\u6570 \u9519\u6392\u516c\u5f0f \u00b6 \\[ f(n) = (n-1)(f(n-1)f(n-2)) \\] \u5bb9\u65a5\u539f\u7406 \u00b6 HDU 4135 $$ |U(A_i)|=\\sum_{1\\leq i\\leq m}{|A_i|}-\\sum_{i\\leq i<j\\leq m}{|A_i\\bigcap A_j|}+ \\dots+(-1)^{m+1}\\sum|A_1\\bigcap A_2\\bigcap \\dots\\bigcap A_m| $$ void solve () { int res = 0 ; for ( int i = 1 ; i < ( 1 << m ); i ++ ) { int cnt = 0 ; for ( int j = i ; j != 0 ; j >>= 1 ) cnt += j & 1 ; ll lcm = 1 ; for ( int j = 0 ; j < m ; j ++ ) { if ( ( i >> j ) & 1 ) { lcm = lcm / gcd ( lcm , num [ j ]) * num [ j ]; //eg,\u662f2\u7684\u500d\u6570\u4e0d\u4e00\u5b9a\u662f4\u7684\u500d\u6570 if ( lcm > n ) break ; } } if ( cnt % 2 == 0 ) res -= n / lcm ; else res += n / lcm ; } cout << res ; } Catalan\u6570 \u00b6 \u8bbe h(n) \u8868\u793a Catalan\u6570\u7684\u7b2cn\u9879\uff0c \\(h(0) = 1, h(1) = 1\\) \u9012\u63a8\u5f0f\uff1a \\(h(n)=h(0)*h(n-1)+h(1)*h(n-2)+...+h(n-1)*h(0)(n\\geq2)\\) \u53e6\u7c7b\u9012\u63a8\u5f0f\uff1a \\(h(n)=h(n-1)*(4*n-2)/(n+1)\\) \u9012\u63a8\u5173\u7cfb\u7684\u89e3\uff1a \\(h(n)=C(2n,n)/(n+1)(n=0,1,2,...)\\) \u9012\u63a8\u5173\u7cfb\u7684\u53e6\u7c7b\u89e3\uff1a \\(h(n)=C(2n,n)-C(2n,n-1)(n=0,1,2,...)\\) eg\uff1a\u8fdb\u51fa\u6808\uff0c\u7535\u5f71\u8d2d\u7968\uff0c\u5706\u5185\u8fde\u5f26\uff0c\u51f8\u591a\u8fb9\u5f62\u7684\u5256\u5206\uff0cn\u5bf9\u62ec\u53f7\u5f62\u6210\u7684\u5408\u6cd5\u62ec\u53f7\u8868\u8fbe\u5f0f\u7684\u4e2a\u6570\uff0c n+1\u4e2a\u6570\u8fde\u4e58\u4e0d\u540c\u7684\u4e58\u6cd5\u987a\u5e8f\u6570\u3001 Bell\u6570\u548cStirling\u6570 \u00b6 \u7b2c\u4e00\u7c7b Stirling\u6570\u9012\u63a8\u5f0f\uff1a \\(S(i,j)=(i-1)*S(i-1,j)+S(i-1,j-1)\\) eg\uff1ai \u4e2a\u4e0d\u540c\u5143\u7d20\u6784\u6210 j \u4e2a\u5706\u6392\u5217\u7684\u6570\u76ee \u7b2c\u4e8c\u7c7b Stirling\u6570\u9012\u63a8\u5f0f\uff1a \\(S(i,j)=j*S(i-1,j)+S(i-1,j-1)\\) eg\uff1ai \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u5212\u5206\u4e3a j \u4e2a\u975e\u7a7a\u96c6\u7684\u65b9\u6cd5\u7684\u6570\u76ee Bell\u6570\u548c\u7b2c\u4e8c\u7c7bStirling\u6570\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a \\(B_n=\\sum_{k=1}^n{S(n,k)}\\) eg\uff1an \u4e2a\u4e0d\u540c\u7684\u6570\u7684\u5212\u5206\u65b9\u6848\u6570","title":"\u6570\u8bba"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_1","text":"","title":"\u6570\u8bba"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_2","text":"","title":"\u57fa\u7840\u51fd\u6570"},{"location":"OI/%E6%95%B0%E8%AE%BA/#gcd","text":"\u8bbe \\(a/b=d, a\\%b=r\\) \u5373 \\(a=b\\times d+r\\) \uff0c\u6240\u4ee5 \\(gcd(b, r) | a\\) \uff0c\u53c8 \\(gcd(b, r) | b\\) \uff0c\u6240\u4ee5 \\(gcd(b, r) | gcd(a, b)\\) \u53c8 \\(r=a-b\\times d\\) \uff0c\u6240\u4ee5 \\(gcd(a, b) | r\\) \uff0c\u53c8 \\(gcd(a, b) | b\\) \uff0c\u6240\u4ee5 \\(gcd(a, b) | gcd(b, r)\\) \u6240\u4ee5 \\(gcd(a, b) = gcd(b, r)\\) , \u5373 \\(gcd(a, b) = gcd(b, a\\%b)\\) \u4e00\u4e9b\u6027\u8d28 \\(gcd(a,b)=gcd(a,a+b)=gcd(a,ka+b)\\) \\(gcd(ka,kb)=k*gcd(a,b)\\) \\(gcd(a,b,c)=gcd(gcd(a,b),c)\\) int gcd ( int a , int b ){ return b ? gcd ( b , a % b ) : a ; }","title":"gcd"},{"location":"OI/%E6%95%B0%E8%AE%BA/#lcm","text":"int lcm ( int a , int b ){ return a * b / gcd ( a , b ); }","title":"lcm"},{"location":"OI/%E6%95%B0%E8%AE%BA/#exgcd","text":"\u6c42 \\(ax + by = gcd(a, b)\\) \u7684\u4e00\u7ec4\u6574\u6570\u89e3 x\uff0cy b = 0\u65f6\uff0c \\(gcd(a, b) = a\\) , x=1\u200b, y=0 \u4e3a\u4e00\u7ec4\u89e3 b != 0 \u65f6 \u8bbe \\(ax_{1} + by_{1} = gcd(a, b)\\) \u200b \\(bx_{2}+ (a\\%b)y_{2} = gcd(b, a\\%b)\\) \u56e0\u4e3a \\(gcd(a, b) = gcd(b, a\\%b)\\) \u6240\u4ee5 \\(bx_{2} + (a\\%b)y_{2} = ax_{1} + by_{1}\\) \u200b \\(a\\%b = a-(a/b)*b\\) , \u4ee3\u5165\u4e0a\u5f0f\u5f97 \u200b \\(bx_{2}+ ( a - (a/b) * b)*y_{2} = ax_{1} + by_{1}\\) \u200b \\(ay_{2} + bx_{2~}- (a/b)*by_{2} = ax_{1} + by_{1}\\) \u200b \\(ay_{2} + b[x_{2}-(a/b)*y_{2}] = ax_{1} + by_{1}\\) \u6240\u4ee5 \\(x_{1} = y_{2}\\) \u200b \\(y_{1} = x_{2} - (a/b)*y_{2}\\) ll exgcd ( ll a , ll b , ll & x , ll & y ) { //\u8fd4\u56de gcd(a, b) if ( ! b ){ x = 1 , y = 0 ; return a ; } ll d = exgcd ( b , a % b , x , y ); ll t = x ; x = y ; y = t - ( a / b ) * y ; return d ; }","title":"exgcd"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_3","text":"typedef long long ll ; ll pow ( ll a , ll b , ll p ) { // a^b (mod p) ll res = 1 ; while ( b ){ if ( b & 1 ) res = res * a % p ; a = a * a % p ; b >>= 1 ; } return res ; }","title":"\u5feb\u901f\u5e42"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_4","text":"//\u9632\u6b62\u4e58\u6cd5\u7206ll ll mul ( ll a , ll b , ll p ){ ll res = 0 ; while ( b ){ if ( b & 1 ) res = ( res + a ) % p ; a = ( a + a ) % p ; b >>= 1 ; } return res ; }","title":"\u5feb\u901f\u4e58"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_5","text":"bool isprime ( int x ){ if ( x <= 1 ) return false ; for ( int i = 2 ; i <= x / i ; i ++ ) if ( x % i == 0 ) return false ; return true ; }","title":"\u7d20\u6570"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_6","text":"bool isprime [ N + 1 ]; //0 1 \u662f\u975e\u7d20\u6570 void getPrime (){ for ( int i = 2 , i <= N ; i ++ ) isprime [ i ] = true ; for ( int i = 2 ; i <= N / i ; i ++ ) //\u5982\u679c x>sqrt(N) \u662f\u5408\u6570\uff0c \u5728\u524d\u9762\u5c31\u4f1a\u88ab\u7b5b\u6389 if ( isprime [ i ]) for ( int j = i * i ; j <= N ; j += i ) //2i, 3i, 5i \u90fd\u5df2\u7ecf\u7b5b\u8fc7\uff0c\u53ef\u4ee5\u4ecei*i\u5f00\u59cb isprime [ i ] = false ; }","title":"\u57c3\u6c0f\u7b5b\u7d20\u6570"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_7","text":"\\(O(n)\\) int cnt = 0 ; int prime [ N + 1 ]; //\u8bb0\u5f55\u7d20\u6570 bool isprime [ N + 1 ]; void euler (){ for ( int i = 2 ; i <= N ; i ++ ) isprime [ i ] = true ; for ( int i = 2 ; i <= N ; i ++ ){ if ( isprime [ i ]) prime [ cnt ++ ] = i ; //\u8bb0\u5f55 for ( int j = 0 ; j < cnt && i * prime [ j ] <= N ; j ++ ){ isprime [ i * prime [ j ]] = false ; if ( i % prime [ j ] == 0 ) break ; //\u4fdd\u8bc1\u5408\u6570\u88ab\u6700\u5c0f\u7684\u8d28\u56e0\u5b50\u7b5b\u53bb } } }","title":"\u6b27\u62c9\u7b5b\u7d20\u6570(\u7ebf\u6027\u7b5b)"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_8","text":"//\u7b5b[l, r)\u4e4b\u95f4\u7684\u7d20\u6570 //\u6ce8\u610f\u533a\u95f4\u5f00\u95ed //\u5982\u679cl==1,l++\uff0c\u5426\u5219\u4f1a\u8ba4\u4e3a1\u662f\u7d20\u6570 bool isprime_small [ MAXN ]; //\u8bb0\u5f55\u524d sqrt(r) \u7684\u7d20\u6570 bool isprime [ MAXN ]; //\u5982\u679ci\u662f\u7d20\u6570\uff0c\u8bb0isprime[i-l] = true void segement_prime ( ll l , ll r ){ for ( ll i = 0 ; i * i < r ; i ++ ) isprime_small [ i ] = true ; for ( ll i = 0 ; i < r - l ; i ++ ) isprime [ i ] = true ; for ( ll i = 2 ; i * i < r ; i ++ ) if ( isprime_small [ i ]) { //\u5982\u679c\u662f\u7d20\u6570 for ( ll j = i * i ; j * j < r ; j += i ) //\u7b5b[2, sqrt(b)] isprime_small [ j ] = false ; for ( ll j = max ( 2L L , ( l + i -1 ) / i ) * i ; j < r ; j += i ) //\u7b5b[a, b] isprime [ j - l ] = false ; } }","title":"\u7b5b\u533a\u95f4\u5185\u7d20\u6570"},{"location":"OI/%E6%95%B0%E8%AE%BA/#miller-rabin","text":"bool check ( ll a , ll r , ll t , ll n ) { ll ret = pow ( a , r , n ), last = ret ; for ( int i = 0 ; i < t ; i ++ ) { ret = mul ( ret , ret , n ); if ( ret == 1 && last != 1 && last != n - 1 ) return true ; last = ret ; } return ret != 1 ; } bool Miller_Rabin ( ll n ) { if ( n == 2 ) return true ; if ( n < 2 || ! ( n & 1 )) return false ; ll r = n - 1 , t = 0 ; while ( ! ( r & 1 )) r >>= 1 , t ++ ; for ( int i = 1 , j ; i <= 8 ; i ++ ) { ll a = rand () % ( n - 2 ) + 2 ; if ( check ( a , r , t , n )) return false ; } return true ; }","title":"Miller-Rabin \u7d20\u6027\u6d4b\u8bd5"},{"location":"OI/%E6%95%B0%E8%AE%BA/#pollard-rho","text":"ll pollard ( ll n ) { if ( ! ( n & 1 )) return 2 ; ll c = rand () % ( n - 1 ) + 1 ; ll x = rand () % ( n - 1 ) + 1 , y = x , i = 1 , k = 2 ; while ( true ) { i ++ ; x = ( mul ( x , x , n ) + c ) % n ; ll d = gcd ( y - x + n , n ); if ( d != 1 && d != n ) return d ; if ( y == x ) return n ; if ( i == k ) { y = x ; k <<= 1 ; } } } /* \u500d\u589e\u4f18\u5316 ll pr(ll n) { ll x = 0, y = 0; ll c = 1ll * rand() % (n - 1) + 1; int step = 0, goal = 1; ll val = 1; for (goal = 1;; goal <<= 1, y = x, val = 1) { for (step = 1; step <= goal; ++step) { x = (mul(x, x, n) + c) % n; val = mul(val, abs(y - x), n); if ((step % 127) == 0) { ll d = gcd(val, n); if (d > 1) return d; } } ll d = gcd(val, n); if (d > 1) return d; } } */ ll fac [ 10000 ]; ll tot = 0 ; void find_fac ( ll n ) { if ( Miller_Rabin ( n )) { fac [ tot ++ ] = n ; return ; } ll p = n ; while ( p >= n ) p = pollard ( p ); find_fac ( p ), find_fac ( n / p ); }","title":"Pollard-Rho\u5927\u6570\u5206\u89e3"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_9","text":"\u5b9a\u4e49: \\(\\varphi(n)\\) \u8868\u793a\u5c0f\u4e8e\u7b49\u4e8e \\(n\\) \u4e14\u4e0e \\(n\\) \u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570\uff0c\u6bd4\u5982 \\(\\varphi(1)=1\\) \u901a\u5f0f\uff1a \\(\\varphi(x)=x\\prod_{i=1}^n{(1-\\frac{1}{p_i})}\\) \uff0c\u5176\u4e2d \\(p_i\\) \u662f \\(x\\) \u7684\u6240\u6709\u8d28\u56e0\u6570","title":"\u6b27\u62c9\u51fd\u6570"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_10","text":"\\(n\\) \u662f\u8d28\u6570\u65f6\uff0c \\(\\varphi(n)=n-1\\) \\(p\\) \u662f\u8d28\u6570\u65f6\uff0c \\(\\varphi(p^k)=(p-1)\\times p^{k-1}\\) \u79ef\u6027\u6027\u8d28\uff0c\u5982\u679c \\(gcd(a,b)=1\\) \uff0c\u5219 \\(\\varphi(a\\times b)=\\varphi(a)\\times \\varphi(b)\\) \u7279\u522b\u7684\uff0c \\(n\\) \u662f\u5947\u6570\u65f6\uff0c \\(\\varphi(2n)=\\varphi(n)\\) \\(n > 2\\) \u65f6\uff0c \\(\\varphi(n)\\) \u4e3a\u5076\u6570 \\(n=\\sum_{d|n}\\varphi(d)\\) \u6b27\u62c9\u5b9a\u7406\uff0c\u82e5 \\(gcd(a,m)=1\\) \uff0c\u5219 \\(a^{\\varphi(m)}\\equiv 1(mod \\quad m)\\) \u6269\u5c55\u6b27\u62c9\u5b9a\u7406 \\[ a^b\\equiv \\begin{cases} a^{b \\% \\varphi(p)}&gcd(a,p)=1 \\\\ a^b&gcd(a,p)\\neq1,b<\\varphi(p) \\\\ a^{b \\% \\varphi(p)+\\varphi(p)}&gcd(a,p)\\neq1,b\\geq\\varphi(p) \\end{cases} (mod\\ p) \\]","title":"\u57fa\u672c\u6027\u8d28"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_11","text":"\\(O(\\sqrt{n})\\) ll phi ( ll n ){ ll res = n ; for ( ll i = 2 ; i * i <= n ; i ++ ){ if ( n % i == 0 ){ res -= res / i ; while ( n % i == 0 ) n /= i ; } } if ( n > 1 ) res -= res / n ; return res ; }","title":"\u6c42\u5355\u4e2a\u6570\u7684\u6b27\u62c9\u51fd\u6570"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_12","text":"\\(\\varphi(x)=x\\prod_{i=1}^n{(1-\\frac{1}{p_i})}\\) void euler ( int n ){ for ( int i = 1 ; i <= n ; i ++ ) phi [ i ] = i ; for ( int i = 2 ; i <= n ; i ++ ) if ( phi [ i ] == i ) //\u8fd9\u4ee3\u8868i\u662f\u8d28\u6570 for ( int j = i ; j <= n ; j += i ) phi [ j ] = phi [ j ] / i * ( i -1 ); //\u628ai\u7684\u500d\u6570\u66f4\u65b0\u6389 }","title":"\u57c3\u6c0f\u6c42\u6b27\u62c9\u51fd\u6570"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_13","text":"\\(if(i\\%prime[j] != 0)\\) \uff0c\u5219 \\(i\\) \u4e0e \\(prime[j]\\) \u4e92\u8d28 \u7531\u79ef\u6027\u6027\u8d28\u53ef\u5f97\uff0c \\(phi[i*prime[j]] = phi[i]*phi[prime[j]]\\) \\(if(i\\%prime[j] == 0)\\) \uff0c\u5219 \\(i\\) \u4e2d\u6709 \\(i*prime[j]\\) \u7684\u6240\u6709\u8d28\u56e0\u5b50\uff0c\u6709 \\(\\varphi(i*prime[j])=prime[j]*i*\\prod_{k=1}^n{(1-\\frac{1}{k_i})}=\\varphi(i)*prime[j]\\) int prime [ maxn ], cnt = 0 ; bool vis [ maxn ]; void euler ( int n ){ phi [ 1 ] = 1 ; //1\u8981\u7279\u5224 for ( int i = 2 ; i < = n ; i ++ ){ if ( vis [ i ] == 0 ){ //i\u662f\u8d28\u6570 prime [ cnt ++ ] = i ; phi [ i ] = i -1 ; } for ( int j = 1 ; j < cnt && prime [ j ] * i <= n ; j ++ ){ vis [ i * prime [ j ]] = 1 ; if ( i % prime [ j ] == 0 ){ phi [ i * prime [ j ]] = phi [ i ] * prime [ j ]; //\u82e5prime[j]\u662fi\u7684\u8d28\u56e0\u5b50\uff0c\u5219\u6839\u636e\u8ba1\u7b97\u516c\u5f0f\uff0ci\u5df2\u7ecf\u5305\u62eci*prime[j]\u7684\u6240\u6709\u8d28\u56e0\u5b50 break ; //\u4fdd\u8bc1\u6bcf\u4e2a\u6570\u53ea\u4f1a\u88ab\u81ea\u5df1\u6700\u5c0f\u7684\u56e0\u5b50\u7b5b\u6389\u4e00\u6b21 } else phi [ i * prime [ j ]] = phi [ i ] * phi [ prime [ j ]]; //\u79ef\u6027\u51fd\u6570\u7684\u6027\u8d28 } } }","title":"\u6b27\u62c9\u7b5b\u6c42\u6b27\u62c9\u51fd\u6570"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_14","text":"","title":"\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406"},{"location":"OI/%E6%95%B0%E8%AE%BA/#crt","text":"\u6d1b\u8c37 P3868 \\(X \u2261 r_{i} ( mod\\quad m_{i} )\\) \u8981\u6c42\uff1a \\(m_i\\) \u4e24\u4e24\u4e92\u8d28 ll CRT ( ll n , ll * r , ll * m ){ ll res = 0 , M = 1 ; for ( int i = 0 ; i < n ; i ++ ) M *= m [ i ]; for ( int i = 0 ; i < n ; i ++ ) { ll x , y ; ll tmp = M / m [ i ]; ll d = exgcd ( tmp , m [ i ], x , y ); //gcd(tmp, m[i]) = 1 x = ( x % m [ i ] + m [ i ]) % m [ i ]; res = ( res + tmp * x * r [ i ]) % M ; //\u53ef\u80fd\u9700\u8981\u7528\u5230\u5feb\u901f\u4e58\u9632\u6b62\u6ea2\u51fa } return ( res + M ) % M ; }","title":"CRT"},{"location":"OI/%E6%95%B0%E8%AE%BA/#excrt","text":"\u6d1b\u8c37 P4777 \\(X \u2261 r_{i} ( mod\\quad m_{i} )\\) \u4e0d\u8981\u6c42 \\(m_i\\) \u4e24\u4e24\u4e92\u8d28 \u6ee1\u8db3\u7b2c\u4e00\u4e2a\u6761\u4ef6\u7684\u89e3\u4e3a \\(r_1\\) \u5047\u8bbe\u6ee1\u8db3\u524d \\(k-1\\) \u4e2a\u6761\u4ef6\u7684\u4e00\u4e2a\u7279\u89e3\u4e3a \\(res\\) \uff0c \\(M_{k-1}\\) \u4e3a\u524d \\(k-1\\) \u4e2a \\(m\\) \u7684 lcm \u5219\u524d \\(k-1\\) \u4e2a\u65b9\u7a0b\u7684\u901a\u89e3\u4e3a $$ res+x\\times M_{k-1} $$ \u90a3\u4e48\u5bf9\u4e8e\u524d \\(k\\) \u4e2a\u65b9\u7a0b,\u5982\u679c\u6709\u89e3\uff0c\u5219 \u5b58\u5728\u6574\u6570 \\(x\\) \uff0c\u4f7f $$ res+x\\times M_{k-1}\\equiv r_k\\quad (mod\\quad m_k) $$ \u5373 $$ x\\times M_{k-1}\\equiv r_k-res\\quad (mod\\quad m_k) $$ \u5229\u7528\u62d3\u6b27\u6c42\u89e3\u5f97 \\(x\\) \uff0c\u5219\u524d \\(k\\) \u4e2a\u65b9\u7a0b\u7684\u4e00\u4e2a\u7279\u89e3\u4e3a $$ res+x\\times M_{k-1} $$ \u901a\u89e3\u4e3a \\(\u7279\u89e3 + x^{'}M_k\\) ll EXCRT ( ll n , ll * r , ll * m ){ ll res = r [ 0 ], M = m [ 0 ]; ll x , y ; for ( int i = 1 ; i < n ; i ++ ) { ll c = ( r [ i ] - res % m [ i ] + m [ i ]) % m [ i ]; ll d = exgcd ( M , m [ i ], x , y ), bg = m [ i ] / d ; x = ( x % bg + bg ) % bg ; if ( c % d != 0 ) return -1 ; //\u65e0\u89e3,\u56e0\u4e3a\u65e0\u6cd5\u8ba9\u4f59\u6570\u6269\u5927\u6210c x = mul ( x , c / d , bg ); //\u5feb\u901f\u4e58 res += x * M ; M *= bg ; //lcm res = ( res % M + M ) % M ; } return res ; }","title":"EXCRT"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_15","text":"","title":"\u540c\u4f59\u95ee\u9898"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_16","text":"\u540c\u4f59\u4e0d\u6ee1\u8db3\u9664\u6cd5\uff0c \\(a/b\\quad mod \\quad p\\quad != (a\\quad mod\\quad p)/(b\\quad mod\\quad p)\\) \u5f15\u5165 \\(b\\) \u7684\u9006\u5143 \\(x\\) , \u5373 \\(b*x = 1 (mod\\quad p)\\) \uff0cb \u4e0e p \u4e92\u8d28 \u5047\u8bbe \\(a/b = k (mod\\quad p)\\) \u540c\u4e58 \\(bx\\) \u5f97 $ a/b * bx = k * 1\uff08mod\\quad p)$ \u200b \\(a*x = k (mod\\quad p)\\) \u6ce8\u610f\uff1a b \u548c p \u4e92\u8d28\uff0cb \u624d\u6709\u5173\u4e8e p \u7684\u9006\u5143","title":"\u9006\u5143"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_17","text":"\u8d39\u9a6c\u5c0f\u5b9a\u7406 \uff1a\u5982\u679c \\(p\\) \u4e3a\u8d28\u6570\uff0c\u4e14 \\(a\\) \u4e0e \\(p\\) \u4e92\u8d28(\u5373 \\(a\\) \u4e0d\u662f \\(p\\) \u7684\u500d\u6570)\uff0c\u5219 \\(a^{p-1} \\equiv 1 \uff08mod\\quad p)\\) \u6240\u4ee5\u6709 \\(a * a^{p-2} \\equiv 1 (mod\\quad p)\\) , \u5373 \\(a^{p-2} (mod\\quad p)\\) \u662f a \u7684\u9006\u5143 //\u7528\u5feb\u901f\u5e42 ll pow ( ll a , ll p ){ int res = 1 ; int d = p -2 ; while ( d ) { if ( d & 1 ) res = res * a % p ; a = a * a % p ; d >>= 1 ; } return res ; }","title":"\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6c42\u9006\u5143"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_18","text":"\u5982\u679c \\(b\\) \u4e0e \\(p\\) \u4e92\u8d28\uff0c\u5373 \\(gcd(b, p) = 1\\) \u8981\u89e3 \\(b*x = 1 (mod\\quad p)\\) , \u5373\u6c42 \\(bx + yp = 1 = gcd(b, p)\\) \u7684\u89e3 \\(x\\) ll inv ( ll b , ll p ) { ll x , y ; ll d = exgcd ( b , p , x , y ); return d == 1 ? ( x + p ) % p : -1 ; //\u8fd4\u56de -1 \u8bf4\u660e b,p \u4e0d\u4e92\u8d28 }","title":"\u62d3\u5c55\u6b27\u51e0\u91cc\u5f97\u6c42\u9006\u5143"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_19","text":"\u6d1b\u8c37 P3811 \u662f\u8d39\u5c0f\u7684\u63a8\u5e7f\uff0c\u4e0d\u8981\u6c42 \\(p\\) \u4e3a\u8d28\u6570\uff0c\u4f46 \\(gcd(a,p)=1\\) \\(a^{\\varphi(p)}\\equiv1(mod\\quad p)\\) \uff0c\u6240\u4ee5\u5176\u9006\u5143\u4e3a \\(a^{\\varphi(n)-1}\\) ll phi ( ll n ){ ll res = n ; for ( ll i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { res -= res / i ; while ( n % i == 0 ) n /= i ; } } if ( n > 1 ) res -= res / n ; return res ; } ans = pow ( a , phi ( p ) -1 , p );","title":"\u6b27\u62c9\u51fd\u6570\u6c42\u9006\u5143"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_20","text":"\u6c42\u9636\u4e58\u7684\u9006\u5143\uff0c\u5148\u7528\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6c42\u51fa n! \u5728 p \u4e0b\u7684\u9006\u5143\uff0c\u518d\u5f80\u524d\u63a8 \u5047\u8bbe n! \u7684\u9006\u5143\u4e3a \\([n!]^{-1}\\) , \u8981\u6c42 \\((n-1)!\\) \u7684\u9006\u5143 $$ (n-1)! \\times n[n!]^{-1} \u2261 1 (mod\\quad p) $$ \u6240\u4ee5\uff0c \\((n-1)!\\) \u7684\u9006\u5143\u5c31\u662f \\(n[n!]^{-1}\\) void fa_inv ( ll n , ll p ){ fact [ 0 ] = 1 ; //factorial for ( int i = 1 ; i <= n ; i ++ ) fact [ i ] = fact [ i -1 ] * i % p ; finv [ N ] = pow ( fact [ n ], p -2 , p ); for ( int i = n -1 ; i >= 0 ; i -- ) finv [ i ] = ( i + 1 ) * finv [ i + 1 ] % p ; }","title":"\u9636\u4e58\u9006\u5143"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_21","text":"\u6d1b\u8c37 P3811 \u8981\u6c42\u51fa 1~n \u4e2d\u6240\u6709\u6570\u5bf9 \\(p\\) \u7684\u9006\u5143\uff0c\u9009\u62e9\u6253\u8868 \u200b \\(1^{\u22121} \u2261 1 (mod\\quad p)\\) \u8bbe \\(p = k * i + r\\) \u5176\u4e2d 1 < r < i < p, \u5373 \\(k = p/i, r = p\\quad mod\\quad i\\) \u6240\u4ee5\u6709 \\(k * i + r \u2261 0 ( mod\\quad p )\\) \u4e24\u8fb9\u540c\u65f6\u4e58\u4e0a \\(i^{\u22121} * r^{\u22121}\\) \u5f97 \\(k * r^{\u22121} + i^{\u22121} \u2261 0 ( mod\\quad p )\\) \u200b \\(i^{\u22121} \u2261 \u2212k * r^{\u22121} ( mod\\quad p )\\) \u5f97\u9012\u63a8\u516c\u5f0f \\(i^{-1} \u2261 -\uff08p/i) * (p\\quad mod\\quad i)^{-1} (mod\\quad p)\\) \u6574\u7406\u5f97 \\(inv[i] = (p - p/i) * inv[p\\%i] \\% p\\) \u5176\u4e2d p % i \u6bd4 i \u5c0f void inverse =- ( int n , int p ) { inv [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) inv [ i ] = ( ll )( p - p / i ) * inv [ p % i ] % p ; }","title":"\u7ebf\u6027\u6c42\u9006\u5143(\u6253\u8868)"},{"location":"OI/%E6%95%B0%E8%AE%BA/#lucas","text":"\u6d1b\u8c37 P3807 HDU 3037 \u89e3\u51b3\u7ec4\u5408\u6570\u53d6\u4f59\u7684\u95ee\u9898\uff1a (p\u5fc5\u987b\u662f\u7d20\u6570,\u4e0d\u7136\u4e0d\u80fd\u7528\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6c42\u9006\u5143) $$ C(n,m) = \\prod_{i=0}^{k}{C(n_i, m_i)}(mod\\quad p) $$ \\[ n = n_k p^k+n_{k-1} p^{k-1}+\\cdots+n_1p+n_0 \\] \\[ m=m_k p^k+m_{k-1} p^{k-1}+\\cdots+m_1p+m_0 \\] //\u9884\u5904\u7406\u9636\u4e58 void getFact ( ll p ) { fact [ 0 ] = 1 ; for ( ll i = 1 ; i <= p ; i ++ ) f [ i ] = f [ i -1 ] * i % p ; } //\u8ba1\u7b97\u7ec4\u5408\u6570 ll comb ( ll n , ll m , ll p ) { if ( m > n ) return 0 ; return fact [ n ] * pow ( f [ m ], p -2 , p ) % p * pow ( f [ n - m ], p -2 , p ) % p ; //\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6c42\u9006\u5143 } ll lucas ( ll n , ll m , ll p ) { if ( ! m ) return 1 ; return lucas ( n / p , m / p , p ) % p * comb ( n % p , m % p , p ) % p ; }","title":"Lucas\u5b9a\u7406"},{"location":"OI/%E6%95%B0%E8%AE%BA/#bsgs","text":"\u6c42 \\(a^x=b(mod\\ \\ p)\\) \u7684 \\(x\\) \u6700\u5c0f\u7684\u89e3 ll bsgs ( ll a , ll b , ll p ) { map < ll , ll > hash ; hash . clear (); b %= p ; ll t = sqrt ( p ) + 1 ; for ( ll i = 0 ; i < t ; i ++ ) hash [ b * ksm ( a , i , p ) % p ] = i ; a = ksm ( a , t , p ); if ( ! a ) return b == 0 ? 1 : -1 ; for ( ll i = 1 ; i <= t ; i ++ ) { ll val = ksm ( a , i , p ); int j = hash . find ( val ) == hash . end () ? -1 : hash [ val ]; if ( j >= 0 && i * t - j >= 0 ) return i * t - j ; } return -1 ; //\u65e0\u89e3 }","title":"BSGS"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_22","text":"","title":"\u6570\u503c\u5206\u6790"},{"location":"OI/%E6%95%B0%E8%AE%BA/#simpson","text":"\u5982\u679c\u539f\u51fd\u6570\u662f\u6b21\u6570\u4e0d\u8d85\u8fc7\u4e8c\u6b21\u7684\u591a\u9879\u5f0f\uff0c\u53ef\u4ee5\u7cbe\u786e\u8ba1\u7b97\u79ef\u5206\u503c\uff0c\u53ea\u9700\u8981\u77e5\u9053\u7aef\u70b9\u548c\u4e2d\u70b9\u7684\u503c $$ \\int_{a}^{b}{f(x)}dx \\approx \\frac{b-a}{6}(\\quad f(a)+4f(\\frac{a+b}{2})+f(b)\\quad) $$","title":"Simpson \u516c\u5f0f"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_23","text":"\u6d1b\u8c37 P3389 \\(O(n^3)\\) \uff0c\u65b9\u7a0b\u6570\u548c\u672a\u77e5\u6570\u90fd\u8981\u6c42\u662fn\uff0c\u7ed3\u679c\u5728 \\(a[i][n+1]\\) \u4e2d\uff0c\u8fd4\u56de\u503c1\u8868\u793a\u6709\u552f\u4e00\u89e3\uff0c0\u8868\u793a\u65e0\u89e3 const double eps = 1e-8 ; int guass_jordan ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) { int r = i ; for ( int j = i ; j <= n ; j ++ ) //\u628a\u6b63\u5728\u5904\u7406\u7684\u672a\u77e5\u6570\u7cfb\u6570\u7edd\u5bf9\u503c\u6700\u5927\u7684\u653e\u4e0a\u6765 if ( fabs ( a [ r ][ i ]) < fabs ( a [ j ][ i ])) r = j ; if ( r != i ) //\u4ea4\u6362 for ( int j = 1 ; j <= n + 1 ; j ++ ) swap ( a [ i ][ j ], a [ r ][ j ]); if ( fabs ( a [ i ][ i ]) < eps ) return 0 ; //\u65e0\u89e3 for ( int j = i + 1 ; j <= n + 1 ; j ++ ) a [ i ][ j ] /= a [ i ][ i ]; //\u7cfb\u6570\u5316\u4e3a1,\u6ce8\u610fi+1\uff0c\u5982\u679c\u4ecei\u5f00\u59cb\u4f1a\u5f71\u54cd\u5230\u540e\u9762 for ( int j = 1 ; j <= n ; j ++ ) if ( j != i ) for ( int k = i + 1 ; k <= n + 1 ; k ++ ) //\u6ce8\u610fi+1\uff0c\u5982\u679c\u4ecei\u5f00\u59cb\u4f1a\u5f71\u54cd\u5230\u540e\u9762 a [ j ][ k ] -= a [ i ][ k ] * a [ j ][ i ]; } return 1 ; }","title":"\u9ad8\u65af\u7ea6\u65e6\u6d88\u5143"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_24","text":"","title":"\u5176\u4ed6"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_25","text":"\u82e5 \\(a,b\\) \u662f\u6574\u6570,\u4e14 \\(gcd(a,b)=d\\) \uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u7684\u6574\u6570 \\(x,y\\) , \\(ax+by\\) \u90fd\u4e00\u5b9a\u662f \\(d\\) \u7684\u500d\u6570\uff0c\u5373 \\(d|(ax+by)\\) \u7279\u522b\u5730\uff0c\u4e00\u5b9a\u5b58\u5728\u6574\u6570 \\(x,y\\) \uff0c\u4f7f \\(ax+by=d\\) \u6210\u7acb\u3002 \u91cd\u8981\u63a8\u8bba\uff1a \\(a,b\\) \u4e92\u8d28\u7684\u5145\u8981\u6761\u4ef6\u662f\u5b58\u5728\u6574\u6570 \\(x,y\\) \u4f7f \\(ax+by=1\\)","title":"\u88f4\u8700\u5b9a\u7406"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_26","text":"\u6b63\u6574\u6570 \\(N\\) \u7684\u6807\u51c6\u5206\u89e3\u5f0f\uff1a \\(N=p_1^{a_1}p_2^{a_2}...p_n^{a_n}\\) \u90a3 \\(N\\) \u7684\u6b63\u56e0\u6570\u4e2a\u6570\u4e3a \\(\\sigma_0(N)=(1+a_1)(1+a_2)...(1+a_n)\\) \u6240\u6709\u6b63\u56e0\u6570\u7684\u548c\u4e3a \\(\\sigma_1(N)=(1+p_1+p_1^2+...+p_1^{a_1})...(1+p_n+p_n^2+...+p_n^{a_n})\\)","title":"\u552f\u4e00\u5206\u89e3\u5b9a\u7406"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_27","text":"\\(\\frac{n}{1}+\\frac{n}{2}+\\frac{n}{3}+..+\\frac{n}{n}\\) \u7684\u548c ll ans = 0 ; for ( int l = 1 , r ; l <= n ; l = r + 1 ) { r = n / ( n / l ); //\u6bcf\u6bb5\u533a\u95f4\u7684\u53f3\u7aef\u70b9 ans += ( ll )( n / l ) * ( r - l + 1 ); }","title":"\u6574\u6570\u5206\u5757"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_28","text":"\\[ n! \\approx \\sqrt{2 \\pi n}(\\frac{n}{e})^n \\] \u7528 \\(log10\\) \u5feb\u901f\u8ba1\u7b97\u5927\u6570\u7684\u4f4d\u6570","title":"\u65af\u7279\u6797\u516c\u5f0f"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_29","text":"\\[ f(n) = (n-1)(f(n-1)f(n-2)) \\]","title":"\u9519\u6392\u516c\u5f0f"},{"location":"OI/%E6%95%B0%E8%AE%BA/#_30","text":"HDU 4135 $$ |U(A_i)|=\\sum_{1\\leq i\\leq m}{|A_i|}-\\sum_{i\\leq i<j\\leq m}{|A_i\\bigcap A_j|}+ \\dots+(-1)^{m+1}\\sum|A_1\\bigcap A_2\\bigcap \\dots\\bigcap A_m| $$ void solve () { int res = 0 ; for ( int i = 1 ; i < ( 1 << m ); i ++ ) { int cnt = 0 ; for ( int j = i ; j != 0 ; j >>= 1 ) cnt += j & 1 ; ll lcm = 1 ; for ( int j = 0 ; j < m ; j ++ ) { if ( ( i >> j ) & 1 ) { lcm = lcm / gcd ( lcm , num [ j ]) * num [ j ]; //eg,\u662f2\u7684\u500d\u6570\u4e0d\u4e00\u5b9a\u662f4\u7684\u500d\u6570 if ( lcm > n ) break ; } } if ( cnt % 2 == 0 ) res -= n / lcm ; else res += n / lcm ; } cout << res ; }","title":"\u5bb9\u65a5\u539f\u7406"},{"location":"OI/%E6%95%B0%E8%AE%BA/#catalan","text":"\u8bbe h(n) \u8868\u793a Catalan\u6570\u7684\u7b2cn\u9879\uff0c \\(h(0) = 1, h(1) = 1\\) \u9012\u63a8\u5f0f\uff1a \\(h(n)=h(0)*h(n-1)+h(1)*h(n-2)+...+h(n-1)*h(0)(n\\geq2)\\) \u53e6\u7c7b\u9012\u63a8\u5f0f\uff1a \\(h(n)=h(n-1)*(4*n-2)/(n+1)\\) \u9012\u63a8\u5173\u7cfb\u7684\u89e3\uff1a \\(h(n)=C(2n,n)/(n+1)(n=0,1,2,...)\\) \u9012\u63a8\u5173\u7cfb\u7684\u53e6\u7c7b\u89e3\uff1a \\(h(n)=C(2n,n)-C(2n,n-1)(n=0,1,2,...)\\) eg\uff1a\u8fdb\u51fa\u6808\uff0c\u7535\u5f71\u8d2d\u7968\uff0c\u5706\u5185\u8fde\u5f26\uff0c\u51f8\u591a\u8fb9\u5f62\u7684\u5256\u5206\uff0cn\u5bf9\u62ec\u53f7\u5f62\u6210\u7684\u5408\u6cd5\u62ec\u53f7\u8868\u8fbe\u5f0f\u7684\u4e2a\u6570\uff0c n+1\u4e2a\u6570\u8fde\u4e58\u4e0d\u540c\u7684\u4e58\u6cd5\u987a\u5e8f\u6570\u3001","title":"Catalan\u6570"},{"location":"OI/%E6%95%B0%E8%AE%BA/#bellstirling","text":"\u7b2c\u4e00\u7c7b Stirling\u6570\u9012\u63a8\u5f0f\uff1a \\(S(i,j)=(i-1)*S(i-1,j)+S(i-1,j-1)\\) eg\uff1ai \u4e2a\u4e0d\u540c\u5143\u7d20\u6784\u6210 j \u4e2a\u5706\u6392\u5217\u7684\u6570\u76ee \u7b2c\u4e8c\u7c7b Stirling\u6570\u9012\u63a8\u5f0f\uff1a \\(S(i,j)=j*S(i-1,j)+S(i-1,j-1)\\) eg\uff1ai \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u5212\u5206\u4e3a j \u4e2a\u975e\u7a7a\u96c6\u7684\u65b9\u6cd5\u7684\u6570\u76ee Bell\u6570\u548c\u7b2c\u4e8c\u7c7bStirling\u6570\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a \\(B_n=\\sum_{k=1}^n{S(n,k)}\\) eg\uff1an \u4e2a\u4e0d\u540c\u7684\u6570\u7684\u5212\u5206\u65b9\u6848\u6570","title":"Bell\u6570\u548cStirling\u6570"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/","text":"\u8ba1\u7b97\u51e0\u4f55 \u00b6 \u70b9\u548c\u7ebf \u00b6 \u7cbe\u5ea6\u63a7\u5236 \u00b6 const double eps = 1e-10 ; double dcmp ( double x ) { //\u5224\u65ad \u6b63/\u8d1f/0 if ( fabs ( x ) < eps ) return 0 ; else return x > 0 ? 1 : -1 ; } \u70b9\u548c\u5411\u91cf\u5b58\u50a8 \u00b6 struct Vector { double x , y ; Point ( double x = 0 , y = 0 ) : x ( x ), y ( y ){} Vector rotate_90 () { return Vector ( y , - x );} //\u987a\u65f6\u948890\u5ea6 Vector rotate_90_c () { return Vector ( - y , x );} //\u9006\u65f6\u948890\u5ea6 }; typedef Vector Point ; \u5411\u91cf\u7684\u56db\u5219\u8fd0\u7b97 \u00b6 //\u8fd9\u79cd\u8fd4\u56de\u65b9\u5f0f\u4f3c\u4e4e\u6709\u65f6\u5019\u4f1a\u51fa\u95ee\u9898 //\u5411\u91cf+\u5411\u91cf=\u5411\u91cf \u70b9+\u5411\u91cf=\u70b9 Vector operator + ( Vector a , Vector b ){ return Vector ( a . x + b . x , a . y + b . y ); } //\u70b9-\u70b9=\u5411\u91cf Vector operator - ( Vector a , Vector b ){ return Vector ( a . x - b . x , a . y - b . y ); } //\u5411\u91cf*\u6570=\u5411\u91cf Vector operator * ( Vector a , double p ){ return Vector ( a . x * p , a . y * p ); } //\u5411\u91cf/\u6570=\u5411\u91cf Vector operator / ( Vector a , double p ){ return Vector ( a . x / p . a . y / p ); } \u70b9\u79ef \u53c9\u79ef \u53ca \u5e94\u7528 \u00b6 \\[\\vec{a} \\cdot \\vec{b} = |a||b|cos\\theta\\] \\( \\(|\\vec{a} \\times \\vec{b}| = |a||b|sin\\theta\\) \\) \uff0c\u6b63\u8d1f\u7531\u4e24\u5411\u91cf\u7684\u76f8\u5bf9\u5173\u7cfb\u51b3\u5b9a //\u70b9\u79ef double Dot ( Vector a , Vector b ){ return a . x * b . x + a . y * b . y ; } //\u53c9\u79ef double Cross ( Vector a , Vector b ){ return a . x * b . y - a . y * b . x ; } //\u5e94\u7528 //\u6c42\u6a21\u957f double Length ( Vector a ){ return sqrt ( Dot ( a , a )); } //\u6c42\u89d2\u5ea6 double Angle ( Vector a , Vector b ){ return acos ( Dot ( a , b ) / Length ( a ) / Length ( b )); } \u5224\u65ad\u70b9\u662f\u5426\u5728\u7ebf\u6bb5\u4e0a \u00b6 bool OnSegment ( Point p1 , Point p2 , Point q ){ //p1-p2\u662f\u7ebf\u6bb5 return Cross ( p1 - q , p2 - q ) == 0 && Dot ( p1 - q , p2 - q ) <= 0 ; } \u6c42\u4e24\u76f4\u7ebf\u7684\u4ea4\u70b9 \u00b6 \u7531 \\( \\(q_2,q_1,p_2,p_1\\) \\) \u786e\u5b9a\u7684\u4e24\u6761\u76f4\u7ebf\uff0c\u5047\u8bbe\u4ea4\u70b9\u4e3a \\( \\(p_1+t(p_2-p_1)\\) \\) \u6709 \\( \\((q_2-q_1) \\times (p_1 + t(p_2-p_1)-q_1)=0\\) \\) \u5f97 \\( \\(t = \\frac{(q_2-q_1)\\times(q_1-p_1)}{(q_2-q_1)\\times(p_2-p_1)}\\) \\) /*Point GetLineIntersection(Point p1, Point p2, Point q1, Point q2){ return p1+(p2-p1)*Cross(q2-q1, q1-p1)/Cross(q2-q1, p2-p1) }*/ Point GetLineIntersection ( Point p , Vector v1 , Point q , Vector v2 ){ return p + v1 * Cross ( v2 , q - p ) / Cross ( v2 , v1 ); } //\u5e73\u884c\u7279\u5224 \u7ebf\u6bb5\u76f8\u4ea4\u5224\u5b9a \u00b6 \u8de8\u7acb\u5b9e\u9a8c\uff1a\u5224\u65adq1,q2\u5728\u7ebf\u6bb5p2-p1\u4e24\u4fa7 \u4e14 p1,p2\u5728\u7ebf\u6bb5q2-q1\u4e24\u4fa7 bool SegmentProperIntersection ( Point p1 , Point p2 , Point q1 , Point q2 ){ double a1 = Cross ( p2 - p1 , q2 - p1 ), a2 = Cross ( p2 - p1 , q1 - p1 ); double a3 = Cross ( q2 - q1 , p1 - q1 ), a4 = Cross ( q2 - q1 , p2 - q1 ); return dcmp ( a1 ) * dcmp ( a2 ) < 0 && dcmp ( a3 ) * dcmp ( a4 ) < 0 ; } /*\u7279\u5224\u7aef\u70b9\u5728\u53e6\u4e00\u6761\u7ebf\u6bb5\u7684\u60c5\u51b5 if(OnSegment(p[i],q[i],p[j]) || OnSegment(p[i],q[i],q[j]) || OnSegment(p[j],q[j],p[i]) || OnSegment(p[j],q[j],q[i]) ) G[i][j] = G[j][i] = true; */ \u7ebf\u6bb5\u548c\u76f4\u7ebf\u76f8\u4ea4\u5224\u5b9a \u00b6 bool fun ( Point a , Point b , Point c , Point d ) { //a b \u786e\u5b9a\u76f4\u7ebf c d \u786e\u5b9a\u7ebf\u6bb5 return Cross ( a - b , a - c ) * Cross ( a - b , a - d ) <= eps } \u5411\u91cf\u65cb\u8f6c\u4e0e\u5355\u4f4d\u5316 \u00b6 \u9006\u65f6\u9488\uff1a $$ \\left[ \\matrix{ x^{'} \\ y^{'} } \\right] = \\left[ \\matrix{ x \\ y } \\right] \\left[ \\matrix{ cos\\theta & sin\\theta\\ -sin\\theta & cos\\theta } \\right] $$ \u987a\u65f6\u9488\uff1a $$ \\left[ \\matrix{ x^{'} \\ y^{'} } \\right] = \\left[ \\matrix{ x \\ y } \\right] \\left[ \\matrix{ cos\\theta & -sin\\theta\\ sin\\theta & cos\\theta } \\right] $$ //rad \u662f\u5f27\u5ea6, \u9006\u65f6\u9488 Vector Rotate ( Vector a , double rad ) { return Vector ( a . x * cos ( rad ) - a . y * sin ( rad ), a . x * sin ( rad ) + a . y * soc ( rad )); } //\u5355\u4f4d\u5316 Vector Normal ( Vector a ) { double L = length ( a ); return Vector ( a . x / L , a . y / L ); } \u70b9\u5230\u76f4\u7ebf\u7684\u8ddd\u79bb \u00b6 double DistaceToLine ( Point p , Point a , Point b ) { Vector v1 = b - a , v2 = p - a ; return fabs ( Cross ( v1 , v2 )) / Length ( v1 ); //\u5e73\u884c\u56db\u8fb9\u5f62\u9762\u79ef \u9664/\u5e95=\u9ad8 } \u5706 \u00b6 \u5706\u7684\u5b58\u50a8 \u00b6 struct Circle { Point c ; double r ; Circle ( Point a , double b = 0 ) : c ( a ), r ( b ){} } \u4e09\u89d2\u5f62\u5916\u63a5\u5706 \u00b6 //\u4e09\u70b9\u4e0d\u5171\u7ebf Circle circumcircle ( Point p1 , Point p2 , Point p3 ) { Point p = GetLineIntersection (( p1 + p2 ) / 2 , ( p2 - p1 ). rotate_90 (), ( p1 + p3 ) / 2 , ( p3 - p1 ). rotate_90 ()); return Circle ( p , Length ( p1 - p )); } \u6700\u5c0f\u5706\u8986\u76d6 \u00b6 \u968f\u673a\u589e\u91cf\u6cd5 \\(O(n)\\) //\u6d1b\u8c37 P1742 #include <iostream> #include <algorithm> #include <cmath> using namespace std ; const int maxn = 1e5 + 5 ; typedef struct Vector { double x , y ; Vector ( double a = 0 , double b = 0 ) : x ( a ), y ( b ){} Vector rotate_90 (){ return Vector ( y , - x ); } } Point ; struct Circle { Point c ; double r ; Circle ( Point a , double b ) : c ( a ), r ( b ){} }; Point operator - ( const Point & a , const Point & b ){ return Vector ( a . x - b . x , a . y - b . y ); } Point operator + ( const Point & a , const Point & b ){ return Vector ( a . x + b . x , a . y + b . y ); } Point operator / ( const Point & a , const double & b ){ return Vector ( a . x / b , a . y / b ); } Point operator * ( const Point & a , const double & b ){ return Vector ( a . x * b , a . y * b ); } double Dot ( Vector a , Vector b ){ return a . x * b . x + a . y * b . y ; } double Cross ( Vector a , Vector b ){ return a . x * b . y - a . y * b . x ; } double Length ( Vector a ){ return sqrt ( Dot ( a , a )); } Point GetLineIntersection ( Point p , Vector v1 , Point q , Vector v2 ){ return p + v1 * Cross ( v2 , q - p ) / Cross ( v2 , v1 ); } Circle circumcircle ( Point p1 , Point p2 , Point p3 ){ Point p = GetLineIntersection (( p1 + p2 ) / 2 , ( p2 - p1 ). rotate_90 (), ( p1 + p3 ) / 2 , ( p3 - p1 ). rotate_90 ()); return Circle ( p , Length ( p1 - p )); } Circle min_circle ( Point * p , int n ) { //\u6700\u5c0f\u5706\u8986\u76d6 random_shuffle ( p + 1 , p + 1 + n ); Point o ; double r = 0 ; for ( int i = 1 ; i <= n ; i ++ ) if ( Length ( p [ i ] - o ) > r ) { o = p [ i ], r = 0 ; for ( int j = 1 ; j < i ; j ++ ) if ( Length ( p [ j ] - o ) > r ) { o = ( p [ i ] + p [ j ]) / 2 , r = Length ( p [ i ] - p [ j ]) / 2 ; for ( int k = 1 ; k < j ; k ++ ) if ( Length ( o - p [ k ]) > r ) { Circle tmp = circumcircle ( p [ i ], p [ j ], p [ k ]); o = tmp . c , r = tmp . r ; } } } return Circle ( o , r ); } int main (){ int n ; Point p [ maxn ]; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) cin >> p [ i ]. x >> p [ i ]. y ; Circle res = min_circle ( p , n ); printf ( \"%.10lf \\n %.10lf %.10lf \\n \" , res . r , res . c . x , res . c . y ); return 0 ; } \u51f8\u5305 \u00b6 Graham\u626b\u63cf\u6cd5 \u7b97\u51f8\u5305 \u00b6 \u6309x\uff0cy\u5750\u6807\u5347\u5e8f\u6392\u5217\uff0c\u786e\u5b9a\u51f8\u5305\u76842\u7684\u9876\u70b9\uff0c\u7136\u540e\u518d\u786e\u5b9a\u4e0a\u4e0b\u4e24\u4e2a\u51f8\u58f3 \u6392\u5e8f \\( \\(O(nlogn)\\) \\) \u5176\u4ed6 \\( \\(O(n)\\) \\) bool cmp ( Point & p , Point & q ){ if ( p . x != p . x ) return p . x < q . x ; else return p . y < q . y ; } vector < Point > ConvexHull ( Point * ps , int n ){ sort ( ps , ps + n , cmp ); int k = 0 ; //\u51f8\u5305\u9876\u70b9\u6570 vector < Point > qs ( n * 2 ); //\u4e0b\u51f8\u58f3 for ( int i = 0 ; i < n ; i ++ ){ //while\u8981\u6ce8\u610f while ( k > 1 && Cross ( qs [ k -1 ] - qs [ k -2 ], ps [ i ] - qs [ k -1 ] <= 0 )) k -- ; qs [ k ++ ] = ps [ i ]; } //\u4e0a\u51f8\u58f3 for ( int i = n -2 , t = k ; i >= 0 ; i -- ){ while ( k > t && Cross ( qs [ k -1 ] - qs [ k -2 ], ps [ i ] - qs [ k -1 ] <= 0 )) k -- ; qs [ k ++ ] = ps [ i ]; } qs . resize ( k -1 ); return qs ; }","title":"\u8ba1\u7b97\u51e0\u4f55"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_1","text":"","title":"\u8ba1\u7b97\u51e0\u4f55"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_2","text":"","title":"\u70b9\u548c\u7ebf"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_3","text":"const double eps = 1e-10 ; double dcmp ( double x ) { //\u5224\u65ad \u6b63/\u8d1f/0 if ( fabs ( x ) < eps ) return 0 ; else return x > 0 ? 1 : -1 ; }","title":"\u7cbe\u5ea6\u63a7\u5236"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_4","text":"struct Vector { double x , y ; Point ( double x = 0 , y = 0 ) : x ( x ), y ( y ){} Vector rotate_90 () { return Vector ( y , - x );} //\u987a\u65f6\u948890\u5ea6 Vector rotate_90_c () { return Vector ( - y , x );} //\u9006\u65f6\u948890\u5ea6 }; typedef Vector Point ;","title":"\u70b9\u548c\u5411\u91cf\u5b58\u50a8"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_5","text":"//\u8fd9\u79cd\u8fd4\u56de\u65b9\u5f0f\u4f3c\u4e4e\u6709\u65f6\u5019\u4f1a\u51fa\u95ee\u9898 //\u5411\u91cf+\u5411\u91cf=\u5411\u91cf \u70b9+\u5411\u91cf=\u70b9 Vector operator + ( Vector a , Vector b ){ return Vector ( a . x + b . x , a . y + b . y ); } //\u70b9-\u70b9=\u5411\u91cf Vector operator - ( Vector a , Vector b ){ return Vector ( a . x - b . x , a . y - b . y ); } //\u5411\u91cf*\u6570=\u5411\u91cf Vector operator * ( Vector a , double p ){ return Vector ( a . x * p , a . y * p ); } //\u5411\u91cf/\u6570=\u5411\u91cf Vector operator / ( Vector a , double p ){ return Vector ( a . x / p . a . y / p ); }","title":"\u5411\u91cf\u7684\u56db\u5219\u8fd0\u7b97"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_6","text":"\\[\\vec{a} \\cdot \\vec{b} = |a||b|cos\\theta\\] \\( \\(|\\vec{a} \\times \\vec{b}| = |a||b|sin\\theta\\) \\) \uff0c\u6b63\u8d1f\u7531\u4e24\u5411\u91cf\u7684\u76f8\u5bf9\u5173\u7cfb\u51b3\u5b9a //\u70b9\u79ef double Dot ( Vector a , Vector b ){ return a . x * b . x + a . y * b . y ; } //\u53c9\u79ef double Cross ( Vector a , Vector b ){ return a . x * b . y - a . y * b . x ; } //\u5e94\u7528 //\u6c42\u6a21\u957f double Length ( Vector a ){ return sqrt ( Dot ( a , a )); } //\u6c42\u89d2\u5ea6 double Angle ( Vector a , Vector b ){ return acos ( Dot ( a , b ) / Length ( a ) / Length ( b )); }","title":"\u70b9\u79ef \u53c9\u79ef \u53ca \u5e94\u7528"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_7","text":"bool OnSegment ( Point p1 , Point p2 , Point q ){ //p1-p2\u662f\u7ebf\u6bb5 return Cross ( p1 - q , p2 - q ) == 0 && Dot ( p1 - q , p2 - q ) <= 0 ; }","title":"\u5224\u65ad\u70b9\u662f\u5426\u5728\u7ebf\u6bb5\u4e0a"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_8","text":"\u7531 \\( \\(q_2,q_1,p_2,p_1\\) \\) \u786e\u5b9a\u7684\u4e24\u6761\u76f4\u7ebf\uff0c\u5047\u8bbe\u4ea4\u70b9\u4e3a \\( \\(p_1+t(p_2-p_1)\\) \\) \u6709 \\( \\((q_2-q_1) \\times (p_1 + t(p_2-p_1)-q_1)=0\\) \\) \u5f97 \\( \\(t = \\frac{(q_2-q_1)\\times(q_1-p_1)}{(q_2-q_1)\\times(p_2-p_1)}\\) \\) /*Point GetLineIntersection(Point p1, Point p2, Point q1, Point q2){ return p1+(p2-p1)*Cross(q2-q1, q1-p1)/Cross(q2-q1, p2-p1) }*/ Point GetLineIntersection ( Point p , Vector v1 , Point q , Vector v2 ){ return p + v1 * Cross ( v2 , q - p ) / Cross ( v2 , v1 ); } //\u5e73\u884c\u7279\u5224","title":"\u6c42\u4e24\u76f4\u7ebf\u7684\u4ea4\u70b9"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_9","text":"\u8de8\u7acb\u5b9e\u9a8c\uff1a\u5224\u65adq1,q2\u5728\u7ebf\u6bb5p2-p1\u4e24\u4fa7 \u4e14 p1,p2\u5728\u7ebf\u6bb5q2-q1\u4e24\u4fa7 bool SegmentProperIntersection ( Point p1 , Point p2 , Point q1 , Point q2 ){ double a1 = Cross ( p2 - p1 , q2 - p1 ), a2 = Cross ( p2 - p1 , q1 - p1 ); double a3 = Cross ( q2 - q1 , p1 - q1 ), a4 = Cross ( q2 - q1 , p2 - q1 ); return dcmp ( a1 ) * dcmp ( a2 ) < 0 && dcmp ( a3 ) * dcmp ( a4 ) < 0 ; } /*\u7279\u5224\u7aef\u70b9\u5728\u53e6\u4e00\u6761\u7ebf\u6bb5\u7684\u60c5\u51b5 if(OnSegment(p[i],q[i],p[j]) || OnSegment(p[i],q[i],q[j]) || OnSegment(p[j],q[j],p[i]) || OnSegment(p[j],q[j],q[i]) ) G[i][j] = G[j][i] = true; */","title":"\u7ebf\u6bb5\u76f8\u4ea4\u5224\u5b9a"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_10","text":"bool fun ( Point a , Point b , Point c , Point d ) { //a b \u786e\u5b9a\u76f4\u7ebf c d \u786e\u5b9a\u7ebf\u6bb5 return Cross ( a - b , a - c ) * Cross ( a - b , a - d ) <= eps }","title":"\u7ebf\u6bb5\u548c\u76f4\u7ebf\u76f8\u4ea4\u5224\u5b9a"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_11","text":"\u9006\u65f6\u9488\uff1a $$ \\left[ \\matrix{ x^{'} \\ y^{'} } \\right] = \\left[ \\matrix{ x \\ y } \\right] \\left[ \\matrix{ cos\\theta & sin\\theta\\ -sin\\theta & cos\\theta } \\right] $$ \u987a\u65f6\u9488\uff1a $$ \\left[ \\matrix{ x^{'} \\ y^{'} } \\right] = \\left[ \\matrix{ x \\ y } \\right] \\left[ \\matrix{ cos\\theta & -sin\\theta\\ sin\\theta & cos\\theta } \\right] $$ //rad \u662f\u5f27\u5ea6, \u9006\u65f6\u9488 Vector Rotate ( Vector a , double rad ) { return Vector ( a . x * cos ( rad ) - a . y * sin ( rad ), a . x * sin ( rad ) + a . y * soc ( rad )); } //\u5355\u4f4d\u5316 Vector Normal ( Vector a ) { double L = length ( a ); return Vector ( a . x / L , a . y / L ); }","title":"\u5411\u91cf\u65cb\u8f6c\u4e0e\u5355\u4f4d\u5316"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_12","text":"double DistaceToLine ( Point p , Point a , Point b ) { Vector v1 = b - a , v2 = p - a ; return fabs ( Cross ( v1 , v2 )) / Length ( v1 ); //\u5e73\u884c\u56db\u8fb9\u5f62\u9762\u79ef \u9664/\u5e95=\u9ad8 }","title":"\u70b9\u5230\u76f4\u7ebf\u7684\u8ddd\u79bb"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_13","text":"","title":"\u5706"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_14","text":"struct Circle { Point c ; double r ; Circle ( Point a , double b = 0 ) : c ( a ), r ( b ){} }","title":"\u5706\u7684\u5b58\u50a8"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_15","text":"//\u4e09\u70b9\u4e0d\u5171\u7ebf Circle circumcircle ( Point p1 , Point p2 , Point p3 ) { Point p = GetLineIntersection (( p1 + p2 ) / 2 , ( p2 - p1 ). rotate_90 (), ( p1 + p3 ) / 2 , ( p3 - p1 ). rotate_90 ()); return Circle ( p , Length ( p1 - p )); }","title":"\u4e09\u89d2\u5f62\u5916\u63a5\u5706"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_16","text":"\u968f\u673a\u589e\u91cf\u6cd5 \\(O(n)\\) //\u6d1b\u8c37 P1742 #include <iostream> #include <algorithm> #include <cmath> using namespace std ; const int maxn = 1e5 + 5 ; typedef struct Vector { double x , y ; Vector ( double a = 0 , double b = 0 ) : x ( a ), y ( b ){} Vector rotate_90 (){ return Vector ( y , - x ); } } Point ; struct Circle { Point c ; double r ; Circle ( Point a , double b ) : c ( a ), r ( b ){} }; Point operator - ( const Point & a , const Point & b ){ return Vector ( a . x - b . x , a . y - b . y ); } Point operator + ( const Point & a , const Point & b ){ return Vector ( a . x + b . x , a . y + b . y ); } Point operator / ( const Point & a , const double & b ){ return Vector ( a . x / b , a . y / b ); } Point operator * ( const Point & a , const double & b ){ return Vector ( a . x * b , a . y * b ); } double Dot ( Vector a , Vector b ){ return a . x * b . x + a . y * b . y ; } double Cross ( Vector a , Vector b ){ return a . x * b . y - a . y * b . x ; } double Length ( Vector a ){ return sqrt ( Dot ( a , a )); } Point GetLineIntersection ( Point p , Vector v1 , Point q , Vector v2 ){ return p + v1 * Cross ( v2 , q - p ) / Cross ( v2 , v1 ); } Circle circumcircle ( Point p1 , Point p2 , Point p3 ){ Point p = GetLineIntersection (( p1 + p2 ) / 2 , ( p2 - p1 ). rotate_90 (), ( p1 + p3 ) / 2 , ( p3 - p1 ). rotate_90 ()); return Circle ( p , Length ( p1 - p )); } Circle min_circle ( Point * p , int n ) { //\u6700\u5c0f\u5706\u8986\u76d6 random_shuffle ( p + 1 , p + 1 + n ); Point o ; double r = 0 ; for ( int i = 1 ; i <= n ; i ++ ) if ( Length ( p [ i ] - o ) > r ) { o = p [ i ], r = 0 ; for ( int j = 1 ; j < i ; j ++ ) if ( Length ( p [ j ] - o ) > r ) { o = ( p [ i ] + p [ j ]) / 2 , r = Length ( p [ i ] - p [ j ]) / 2 ; for ( int k = 1 ; k < j ; k ++ ) if ( Length ( o - p [ k ]) > r ) { Circle tmp = circumcircle ( p [ i ], p [ j ], p [ k ]); o = tmp . c , r = tmp . r ; } } } return Circle ( o , r ); } int main (){ int n ; Point p [ maxn ]; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) cin >> p [ i ]. x >> p [ i ]. y ; Circle res = min_circle ( p , n ); printf ( \"%.10lf \\n %.10lf %.10lf \\n \" , res . r , res . c . x , res . c . y ); return 0 ; }","title":"\u6700\u5c0f\u5706\u8986\u76d6"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_17","text":"","title":"\u51f8\u5305"},{"location":"OI/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#graham","text":"\u6309x\uff0cy\u5750\u6807\u5347\u5e8f\u6392\u5217\uff0c\u786e\u5b9a\u51f8\u5305\u76842\u7684\u9876\u70b9\uff0c\u7136\u540e\u518d\u786e\u5b9a\u4e0a\u4e0b\u4e24\u4e2a\u51f8\u58f3 \u6392\u5e8f \\( \\(O(nlogn)\\) \\) \u5176\u4ed6 \\( \\(O(n)\\) \\) bool cmp ( Point & p , Point & q ){ if ( p . x != p . x ) return p . x < q . x ; else return p . y < q . y ; } vector < Point > ConvexHull ( Point * ps , int n ){ sort ( ps , ps + n , cmp ); int k = 0 ; //\u51f8\u5305\u9876\u70b9\u6570 vector < Point > qs ( n * 2 ); //\u4e0b\u51f8\u58f3 for ( int i = 0 ; i < n ; i ++ ){ //while\u8981\u6ce8\u610f while ( k > 1 && Cross ( qs [ k -1 ] - qs [ k -2 ], ps [ i ] - qs [ k -1 ] <= 0 )) k -- ; qs [ k ++ ] = ps [ i ]; } //\u4e0a\u51f8\u58f3 for ( int i = n -2 , t = k ; i >= 0 ; i -- ){ while ( k > t && Cross ( qs [ k -1 ] - qs [ k -2 ], ps [ i ] - qs [ k -1 ] <= 0 )) k -- ; qs [ k ++ ] = ps [ i ]; } qs . resize ( k -1 ); return qs ; }","title":"Graham\u626b\u63cf\u6cd5 \u7b97\u51f8\u5305"},{"location":"Python/Easygui/","text":"","title":"Easygui"},{"location":"Python/Matplotlib/","text":"Matplotlib \u00b6 Overview \u2014 Matplotlib 3.4.2 documentation pyplot() \u00b6 import matplotlib.pyplot as plt ply . plot ([ x ], y , [ fmt ], [ x2 ], y2 , [ fmt2 ], ... , ** kwargs ) # https://blog.csdn.net/sinat_36219858/article/details/79800460 # color='red' \u5168\u90e8\u70b9\u8bbe\u7f6e\u4e3a\u7ea2\u8272 # marker='.' \u70b9\u5f62\u4e3a\u5706\u70b9 # linestyle='' \u7ebf\u578b\u4e3a\u7a7a\uff0c\u4e5f\u5373\u70b9\u4e0e\u70b9\u4e4b\u95f4\u4e0d\u7528\u7ebf\u8fde\u63a5 # plot('xlabel', 'ylabel', data=obj) \u5e26\u6807\u7b7e\u7684\u6570\u636e\u4f5c\u56fe # markeredgecolor or mec: color # markeredgewidth or mew: float # markersize or ms: float # linewidth or lw: float # \u989c\u8272\u53c2\u6570 ============= =============================== character color ============= =============================== `` 'b' `` blue \u84dd `` 'g' `` green \u7eff `` 'r' `` red \u7ea2 `` 'c' `` cyan \u84dd\u7eff `` 'm' `` magenta \u6d0b\u7ea2 `` 'y' `` yellow \u9ec4 `` 'k' `` black \u9ed1 `` 'w' `` white \u767d ============= =============================== # \u70b9\u578b\u53c2\u6570 ============= =============================== character description ============= =============================== `` '.' `` point marker `` ',' `` pixel marker `` 'o' `` circle marker `` 'v' `` triangle_down marker `` '^' `` triangle_up marker `` '<' `` triangle_left marker `` '>' `` triangle_right marker `` '1' `` tri_down marker `` '2' `` tri_up marker `` '3' `` tri_left marker `` '4' `` tri_right marker `` 's' `` square marker `` 'p' `` pentagon marker `` '*' `` star marker `` 'h' `` hexagon1 marker `` 'H' `` hexagon2 marker `` '+' `` plus marker `` 'x' `` x marker `` 'D' `` diamond marker `` 'd' `` thin_diamond marker `` '|' `` vline marker `` '_' `` hline marker ============= =============================== # \u7ebf\u578b\u53c2\u6570 ============= =============================== character description ============= =============================== `` '-' `` solid line style \u5b9e\u7ebf `` '--' `` dashed line style \u865a\u7ebf `` '-.' `` dash - dot line style \u70b9\u753b\u7ebf `` ':' `` dotted line style \u70b9\u7ebf ============= =============================== \u5750\u6807\u8f74 \u00b6 matplotlib . pyplot . xlim ( * args , ** kwargs ) # left, right = xlim() # return the current xlim # xlim(left, right) # set the xlim to left, right matplotlib . pyplot . xlabel ( xlabel , fontdict = None , labelpad = None , * , loc = None , ** kwargs ) # fontsize:\u6570\u5b57\u6216\u2019small\u2019\uff0c\u2018large\u2019\uff0c\u2018medium\u2019 # plt.xlabel(r'$b$',fontsize=16) contourf() / contour() \u00b6 \u7ed8\u5236\u7b49\u9ad8\u7ebf\uff0ccontourf()\u4f1a\u586b\u5145\u8f6e\u5ed3 matplotlib . pyplot . contourf ([ X , Y ,] Z , [ levels ], ** kwargs ) # https://blog.csdn.net/lens___/article/details/83960810 # colors:colors='black' # cmap:colormap \u70ed\u529b\u56fe cmap=plt.cm.hot # alpha:float, default 1, between 0 (transparent) and 1 (opaque) # \u7b49\u9ad8\u7ebf\u5bc6\u96c6\u7a0b\u5ea6:plt.contour(X, Y, f(X, Y), 8, colors='black'),\u5176\u4e2d8\u4e3a\u5bc6\u96c6\u7a0b\u5ea6 \u5176\u4ed6 \u00b6 matplotlib . use ( \u2018 agg \u2019 ) # \u5728\u6267\u884cimport matplotlib.pyplot as plt\u524d\u8fd0\u884c, \u4e0d\u4f1a\u663e\u793a\u7ed8\u56fe","title":"Matplotlib"},{"location":"Python/Matplotlib/#matplotlib","text":"Overview \u2014 Matplotlib 3.4.2 documentation","title":"Matplotlib"},{"location":"Python/Matplotlib/#pyplot","text":"import matplotlib.pyplot as plt ply . plot ([ x ], y , [ fmt ], [ x2 ], y2 , [ fmt2 ], ... , ** kwargs ) # https://blog.csdn.net/sinat_36219858/article/details/79800460 # color='red' \u5168\u90e8\u70b9\u8bbe\u7f6e\u4e3a\u7ea2\u8272 # marker='.' \u70b9\u5f62\u4e3a\u5706\u70b9 # linestyle='' \u7ebf\u578b\u4e3a\u7a7a\uff0c\u4e5f\u5373\u70b9\u4e0e\u70b9\u4e4b\u95f4\u4e0d\u7528\u7ebf\u8fde\u63a5 # plot('xlabel', 'ylabel', data=obj) \u5e26\u6807\u7b7e\u7684\u6570\u636e\u4f5c\u56fe # markeredgecolor or mec: color # markeredgewidth or mew: float # markersize or ms: float # linewidth or lw: float # \u989c\u8272\u53c2\u6570 ============= =============================== character color ============= =============================== `` 'b' `` blue \u84dd `` 'g' `` green \u7eff `` 'r' `` red \u7ea2 `` 'c' `` cyan \u84dd\u7eff `` 'm' `` magenta \u6d0b\u7ea2 `` 'y' `` yellow \u9ec4 `` 'k' `` black \u9ed1 `` 'w' `` white \u767d ============= =============================== # \u70b9\u578b\u53c2\u6570 ============= =============================== character description ============= =============================== `` '.' `` point marker `` ',' `` pixel marker `` 'o' `` circle marker `` 'v' `` triangle_down marker `` '^' `` triangle_up marker `` '<' `` triangle_left marker `` '>' `` triangle_right marker `` '1' `` tri_down marker `` '2' `` tri_up marker `` '3' `` tri_left marker `` '4' `` tri_right marker `` 's' `` square marker `` 'p' `` pentagon marker `` '*' `` star marker `` 'h' `` hexagon1 marker `` 'H' `` hexagon2 marker `` '+' `` plus marker `` 'x' `` x marker `` 'D' `` diamond marker `` 'd' `` thin_diamond marker `` '|' `` vline marker `` '_' `` hline marker ============= =============================== # \u7ebf\u578b\u53c2\u6570 ============= =============================== character description ============= =============================== `` '-' `` solid line style \u5b9e\u7ebf `` '--' `` dashed line style \u865a\u7ebf `` '-.' `` dash - dot line style \u70b9\u753b\u7ebf `` ':' `` dotted line style \u70b9\u7ebf ============= ===============================","title":"pyplot()"},{"location":"Python/Matplotlib/#_1","text":"matplotlib . pyplot . xlim ( * args , ** kwargs ) # left, right = xlim() # return the current xlim # xlim(left, right) # set the xlim to left, right matplotlib . pyplot . xlabel ( xlabel , fontdict = None , labelpad = None , * , loc = None , ** kwargs ) # fontsize:\u6570\u5b57\u6216\u2019small\u2019\uff0c\u2018large\u2019\uff0c\u2018medium\u2019 # plt.xlabel(r'$b$',fontsize=16)","title":"\u5750\u6807\u8f74"},{"location":"Python/Matplotlib/#contourf-contour","text":"\u7ed8\u5236\u7b49\u9ad8\u7ebf\uff0ccontourf()\u4f1a\u586b\u5145\u8f6e\u5ed3 matplotlib . pyplot . contourf ([ X , Y ,] Z , [ levels ], ** kwargs ) # https://blog.csdn.net/lens___/article/details/83960810 # colors:colors='black' # cmap:colormap \u70ed\u529b\u56fe cmap=plt.cm.hot # alpha:float, default 1, between 0 (transparent) and 1 (opaque) # \u7b49\u9ad8\u7ebf\u5bc6\u96c6\u7a0b\u5ea6:plt.contour(X, Y, f(X, Y), 8, colors='black'),\u5176\u4e2d8\u4e3a\u5bc6\u96c6\u7a0b\u5ea6","title":"contourf() / contour()"},{"location":"Python/Matplotlib/#_2","text":"matplotlib . use ( \u2018 agg \u2019 ) # \u5728\u6267\u884cimport matplotlib.pyplot as plt\u524d\u8fd0\u884c, \u4e0d\u4f1a\u663e\u793a\u7ed8\u56fe","title":"\u5176\u4ed6"},{"location":"Python/Numpy/","text":"Numpy \u00b6 NumPy Reference \u2014 NumPy v1.20 Manual ndarray \u00b6 \u521b\u5efa \u00b6 numpy . array ( object , dtype = None , copy = True , order = None , subok = False , ndmin = 0 ) numpy . empty ( shape , dtype = float , order = 'C' , * , like = None ) # \u5e76\u4e0d\u521d\u59cb\u5316\u4e3a0 numpy . ones ( shape , dtype = None , order = 'C' , * , like = None ) # \u521d\u59cb\u5316\u4e3a 1 numpy . zeros ( shape , dtype = float , order = 'C' , * , like = None ) # \u521d\u59cb\u5316\u4e3a 0 a = np . arange ( 24 ) . reshape (( 2 , 3 , 4 )) a = np . arange ( 24 ) . reshape (( 2 , 3 , - 1 )) # \u53c2\u6570\u6709-1\u65f6\u4f1a\u81ea\u52a8\u6839\u636e\u5176\u4ed6\u7684\u53c2\u6570\u8ba1\u7b97 \u540d\u79f0 \u63cf\u8ff0 object \u6570\u7ec4\u6216\u5d4c\u5957\u7684\u6570\u5217 dtype \u6570\u7ec4\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\uff0c\u53ef\u9009 copy \u5bf9\u8c61\u662f\u5426\u9700\u8981\u590d\u5236\uff0c\u53ef\u9009 order \u521b\u5efa\u6570\u7ec4\u7684\u6837\u5f0f\uff0cC\u4e3a\u884c\u65b9\u5411\uff0cF\u4e3a\u5217\u65b9\u5411\uff0cA\u4e3a\u4efb\u610f\u65b9\u5411\uff08\u9ed8\u8ba4\uff09 subok \u9ed8\u8ba4\u8fd4\u56de\u4e00\u4e2a\u4e0e\u57fa\u7c7b\u7c7b\u578b\u4e00\u81f4\u7684\u6570\u7ec4 ndmin \u6307\u5b9a\u751f\u6210\u6570\u7ec4\u7684\u6700\u5c0f\u7ef4\u5ea6 \u8bfb\u53d6 \u00b6 # \u4e00\u7ef4 a [ 2 ] # \u7d22\u5f15 4 a [ 1 : 4 : 2 ] # \u5207\u7247 3 5 \u6b65\u957f2 # \u591a\u7ef4\u6570\u7ec4 a = np . arange ( 24 ) . reshape (( 2 , 3 , 4 )) a [ 1 , 2 , 3 ] # \u7d22\u5f15 23 a [::,::,::] # \u5207\u7247 \u8d4b\u503c \u00b6 \u589e\u52a0\u6570\u636e \u00b6 # concatenate numpy . concatenate (( a1 , a2 , ... ), axis = 0 , out = None , dtype = None , casting = \"same_kind\" ) # \u62fc\u63a5 # append numpy . append ( arr , values , axis = None ) \u5220\u9664\u6570\u636e \u00b6 \u5176\u4ed6 \u00b6 # transpose numpy . ndarray . T () # \u6570\u636e\u7c7b\u578b\u8f6c\u6362 ndarray . astype ( dtype , order = 'K' , casting = 'unsafe' , subok = True , copy = True ) # axis = 0 \u6309\u5217\u6c42\u5747\u503c\uff0c axis = 1 \u6309\u884c\u6c42\u5747\u503c numpy . mean ( a , axis = None , dtype = None , out = None , keepdims =< no value > , * , where =< no value > ) # \u6c42\u6807\u51c6\u5dee numpy . std ( a , axis = None , dtype = None , out = None , ddof = 0 , keepdims =< no value > , * , where =< no value > ) # meshgrid numpy . meshgrid ( * xi , copy = True , sparse = False , indexing = 'xy' ) # \u751f\u6210\u7f51\u683c\u70b9\u5750\u6807\u77e9\u9635 X , Y = np . meshgrid ( x , y ) # \u628a x,y \u8fdb\u884c\u7b1b\u5361\u5c14\u79ef\u7684\u7ed3\u679c\u7684\u7b2c\u4e00\u4f4d\u5143\u7d20\u653e\u8fdb X, \u7b2c\u4e8c\u4f4d\u5143\u7d20\u7ed9 Y \u53c2\u8003 \u00b6 numpy\u5165\u95e8\u8be6\u7ec6\u6559\u7a0b(\u4e8c)_Smallactive-CSDN\u535a\u5ba2 numpy\u5165\u95e8\u8be6\u7ec6\u6559\u7a0b(\u4e09)_Smallactive-CSDN\u535a\u5ba2","title":"Numpy"},{"location":"Python/Numpy/#numpy","text":"NumPy Reference \u2014 NumPy v1.20 Manual","title":"Numpy"},{"location":"Python/Numpy/#ndarray","text":"","title":"ndarray"},{"location":"Python/Numpy/#_1","text":"numpy . array ( object , dtype = None , copy = True , order = None , subok = False , ndmin = 0 ) numpy . empty ( shape , dtype = float , order = 'C' , * , like = None ) # \u5e76\u4e0d\u521d\u59cb\u5316\u4e3a0 numpy . ones ( shape , dtype = None , order = 'C' , * , like = None ) # \u521d\u59cb\u5316\u4e3a 1 numpy . zeros ( shape , dtype = float , order = 'C' , * , like = None ) # \u521d\u59cb\u5316\u4e3a 0 a = np . arange ( 24 ) . reshape (( 2 , 3 , 4 )) a = np . arange ( 24 ) . reshape (( 2 , 3 , - 1 )) # \u53c2\u6570\u6709-1\u65f6\u4f1a\u81ea\u52a8\u6839\u636e\u5176\u4ed6\u7684\u53c2\u6570\u8ba1\u7b97 \u540d\u79f0 \u63cf\u8ff0 object \u6570\u7ec4\u6216\u5d4c\u5957\u7684\u6570\u5217 dtype \u6570\u7ec4\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\uff0c\u53ef\u9009 copy \u5bf9\u8c61\u662f\u5426\u9700\u8981\u590d\u5236\uff0c\u53ef\u9009 order \u521b\u5efa\u6570\u7ec4\u7684\u6837\u5f0f\uff0cC\u4e3a\u884c\u65b9\u5411\uff0cF\u4e3a\u5217\u65b9\u5411\uff0cA\u4e3a\u4efb\u610f\u65b9\u5411\uff08\u9ed8\u8ba4\uff09 subok \u9ed8\u8ba4\u8fd4\u56de\u4e00\u4e2a\u4e0e\u57fa\u7c7b\u7c7b\u578b\u4e00\u81f4\u7684\u6570\u7ec4 ndmin \u6307\u5b9a\u751f\u6210\u6570\u7ec4\u7684\u6700\u5c0f\u7ef4\u5ea6","title":"\u521b\u5efa"},{"location":"Python/Numpy/#_2","text":"# \u4e00\u7ef4 a [ 2 ] # \u7d22\u5f15 4 a [ 1 : 4 : 2 ] # \u5207\u7247 3 5 \u6b65\u957f2 # \u591a\u7ef4\u6570\u7ec4 a = np . arange ( 24 ) . reshape (( 2 , 3 , 4 )) a [ 1 , 2 , 3 ] # \u7d22\u5f15 23 a [::,::,::] # \u5207\u7247","title":"\u8bfb\u53d6"},{"location":"Python/Numpy/#_3","text":"","title":"\u8d4b\u503c"},{"location":"Python/Numpy/#_4","text":"# concatenate numpy . concatenate (( a1 , a2 , ... ), axis = 0 , out = None , dtype = None , casting = \"same_kind\" ) # \u62fc\u63a5 # append numpy . append ( arr , values , axis = None )","title":"\u589e\u52a0\u6570\u636e"},{"location":"Python/Numpy/#_5","text":"","title":"\u5220\u9664\u6570\u636e"},{"location":"Python/Numpy/#_6","text":"# transpose numpy . ndarray . T () # \u6570\u636e\u7c7b\u578b\u8f6c\u6362 ndarray . astype ( dtype , order = 'K' , casting = 'unsafe' , subok = True , copy = True ) # axis = 0 \u6309\u5217\u6c42\u5747\u503c\uff0c axis = 1 \u6309\u884c\u6c42\u5747\u503c numpy . mean ( a , axis = None , dtype = None , out = None , keepdims =< no value > , * , where =< no value > ) # \u6c42\u6807\u51c6\u5dee numpy . std ( a , axis = None , dtype = None , out = None , ddof = 0 , keepdims =< no value > , * , where =< no value > ) # meshgrid numpy . meshgrid ( * xi , copy = True , sparse = False , indexing = 'xy' ) # \u751f\u6210\u7f51\u683c\u70b9\u5750\u6807\u77e9\u9635 X , Y = np . meshgrid ( x , y ) # \u628a x,y \u8fdb\u884c\u7b1b\u5361\u5c14\u79ef\u7684\u7ed3\u679c\u7684\u7b2c\u4e00\u4f4d\u5143\u7d20\u653e\u8fdb X, \u7b2c\u4e8c\u4f4d\u5143\u7d20\u7ed9 Y","title":"\u5176\u4ed6"},{"location":"Python/Numpy/#_7","text":"numpy\u5165\u95e8\u8be6\u7ec6\u6559\u7a0b(\u4e8c)_Smallactive-CSDN\u535a\u5ba2 numpy\u5165\u95e8\u8be6\u7ec6\u6559\u7a0b(\u4e09)_Smallactive-CSDN\u535a\u5ba2","title":"\u53c2\u8003"},{"location":"Python/Pandas/","text":"Pandas \u00b6 pandas documentation \u2014 pandas 1.2.4 documentation (pydata.org) DataFrame \u00b6 \u521b\u5efa DataFrame \u00b6 pandas . DataFrame ( data = None , index = None , columns = None , dtype = None , copy = None ) # \u6570\u636e \u7d22\u5f15\uff08\u884c\u6807\u7b7e\uff09 \u5217\u6807\u7b7e \u6570\u636e\u7c7b\u578b \u62f7\u8d1d\u6570\u636e \u7528\u5b57\u5178\u521b\u5efa \u00b6 data = { \"one\" : np . random . randn ( 4 ), \"two\" : np . linspace ( 1 , 4 , 4 ), \"three\" :[ 'zhangsan' , '\u674e\u56db' , 999 , 0.1 ]} df = pd . DataFrame ( data , index = [ 1 , 2 , 3 , 4 ]) \u7528\u6570\u7ec4\u521b\u5efa \u00b6 data = np . random . randn ( 6 , 4 ) #\u521b\u5efa\u4e00\u4e2a6\u884c4\u5217\u7684\u6570\u7ec4 df = pd . DataFrame ( data , columns = list ( 'ABCD' ), index = [ 1 , 2 , 'a' , 'b' , '2006-10-1' , '\u7b2c\u516d\u884c' ]) \u7a7a DataFrame \u00b6 pd . DataFrame ( columns = ( 'id' , 'name' , 'grade' , 'class' )) \u7d22\u5f15\u8bbe\u7f6e \u00b6 \u521b\u5efa df \u662f\u4e0d\u6307\u5b9a\u7d22\u5f15\u9ed8\u8ba4\u4f1a\u4ece 0 \u5f00\u59cb set_index \uff1a\u5c06 df \u4e2d\u7684\u67d0\u5217\u8bbe\u7f6e\u4e3a\u7d22\u5f15 df . set_index ( 'one' , drop = False ) # drop\u9ed8\u8ba4\u4e3aTrue, \u8868\u793a\u8bbe\u7f6e\u7d22\u5f15\u540e\u5c06\u8be5\u5217\u5220\u9664 reset_index \uff1a\u91cd\u7f6e\u7d22\u5f15 df . set_index ( drop = True ) # drop\u9ed8\u8ba4\u4e3aFalse, \u8868\u793a\u539f\u7d22\u5f15\u5c06\u4f5c\u4e3a\u6570\u636e\u4fdd\u7559 \u8bfb\u53d6 DataFrame \u00b6 loc \u90fd\u662f\u884c\u540d\u548c\u5217\u540d\uff0ciloc \u90fd\u662f\u884c\u53f7\u548c\u5217\u53f7 loc \u4e0d\u652f\u6301\u884c\u53f7\u5207\u7247 \u6309\u5217\u8bfb\u53d6 \u00b6 # \u6309\u5217\u540d f . \u5217\u540d df [ '\u5217\u540d' ] / df [[ '\u5217\u540d' ]] / df [[ '\u5217\u540d1' , '\u5217\u540d2' , ... ]] # series Dataframe Dataframe # \u6309\u5217\u53f7 iloc df . iloc [:, 0 : 2 ] # [0,2)\u5217 \u6309\u884c\u8bfb\u53d6 \u00b6 # \u6309\u884c\u6807\u7b7e loc\uff08\u884c\u6807\u7b7e\u4e0d\u4e00\u5b9a\u662f\u5b57\u7b26\u4e32 df . loc [ '\u884c\u6807\u7b7e' ] / df . loc [[ '\u884c\u6807\u7b7e' ]] / df . loc [[ '\u884c\u6807\u7b7e1' , '\u884c\u6807\u7b7e2' , ... ]] # series Dataframe Dataframe # \u6309\u884c\u53f7 iloc df . iloc [ \u884c\u53f7 ] / df . iloc [[ \u884c\u53f7 ]] / df . iloc [[ \u884c\u53f71 , \u884c\u53f72 , ... ]] / df . iloc [ \u884c\u53f71 : \u884c\u53f72 ] # \u7b2c\u4e00\u4e2a\u662fseries \u540e\u9762\u7684\u662fDataframe \u6309\u5355\u5143\u683c\u8bfb\u53d6 \u00b6 df [ col ][ row ] # df['a'][1] /* loc */ # \u4e00\u4e2a\u5355\u5143\u683c df . loc [ row ][ col ] / df . loc [ row , col ] # \u4e00\u884c\u591a\u5217 df . loc [ row ][[ col1 , col2 ]] / df . loc [ 1 ,[ col1 , col2 ]] / df . loc [ row ][ firstCol : endCol ] / df . loc [ row , firstCol : endCol ] # \u591a\u884c\u4e00\u5217 \u884c\u53f7\u4e0d\u80fd\u7528\u5207\u7247 df . loc [[ row1 , row2 ]][ col ] / df . loc [[ row1 , row2 ]] . col / df . loc [[ row1 , row2 ], col ] # \u591a\u884c\u591a\u5217 \u884c\u53f7\u4e0d\u80fd\u7528\u5207\u7247 df . loc [[ row1 , row2 ],[ col1 , col2 ]] / df . loc [[ row1 , row2 ]][[ col1 , col2 ]] / df . loc [[ row1 , row3 ], firstCol : endCol ] /* iloc */ # \u4e00\u4e2a\u5355\u5143\u683c \u4e0d\u652f\u6301df.iloc[rowNo,col] df . iloc [ rowNo ] . col / df . iloc [ rowNo ][ col ] / df . iloc [ rowNo , colNo ] # \u4e00\u884c\u591a\u5217 \u4e0d\u652f\u6301df.iloc[rowNo,[col1,col2]],df.iloc[rowNo,firstColNo:endColNo] df . iloc [ rowNo , firestColNo : endColNo ] / df . iloc [ rowNo ][[ col1 , col2 ]] / df . iloc [ rowNo ][ firesCol : endCol ] # \u591a\u884c\u4e00\u5217 df . iloc [[ rowNo1 , rowNo2 ], colNo ] / df . iloc [ firstRowNo : endRowNo , colNo ] / df . iloc [[ rowNo1 , rowNo2 ]][ col ] / df . iloc [ firstRowNo : endRowNo ][ col ] # \u591a\u884c\u591a\u5217 df . iloc [ firstRowNo : endRowNo , firstColNo : endColNo ] / df . iloc [[ RowNo1 , RowNo2 ],[ ColNo1 , ColNo2 ]] / df . iloc [ firstRowNo : endRowNo ][[ col1 , col2 ]] \u8d4b\u503c \u00b6 \u5982\u679c\u7528\u4e00\u4e2a\u5217\u8868\u6216\u6570\u7ec4\u8d4b\u503c\uff0c\u5176\u957f\u5ea6\u5fc5\u987b\u76f8\u540c \u6309\u5217\u8d4b\u503c \u00b6 df . col = colList / colValue df [ col ] = colList / colValue # eg: df.A=[1,2,3,4,5,6],df['A']=0 \u6309\u884c\u8d4b\u503c \u00b6 df . loc [ row ] = rowList df . loc [ row ] = rowValue \u591a\u884c\u591a\u5217\u8d4b\u503c \u00b6 df . loc [[ row1 , row2 ],[ col1 , col2 ]] = value / valueList df . iloc [[ rowNo1 , rowNo2 ],[ colNo1 , colNo2 ]] = value / valueList df . iloc [[ rowNo1 , rowNo2 ]][[ col1 , col2 ]] = value / valueList \u5176\u4ed6 \u00b6 df [ df == 'NR' ] = 0 # \u6240\u6709 NR \u66ff\u6362\u6210 0 \u589e\u52a0\u6570\u636e \u00b6 \u5220\u9664\u6570\u636e \u00b6 \u5176\u4ed6 \u00b6 __version \u00b6 pd . __version__ # \u67e5\u770b\u7248\u672c read_csv() \u00b6 df = pd . read_csv ( 'nba.csv' , encoding = 'utf-8' ) \u5e38\u7528\u5c5e\u6027\uff1a sep\uff1a\u5206\u9694\u7b26\uff0c\u5982 sep=',' header\uff1a\u6307\u5b9a\u4e00\u884c\u4e3a\u8868\u5934\uff0c\u5982 header=0 \u5373\u6307\u5b9a\u7b2c\u4e00\u884c\u4e3a\u8868\u5934 name\uff1a\u6307\u5b9a\u8868\u5934\uff0c\u5982name=['a','b] header\u4e0d\u6307\u5b9a\uff0cname\u4e0d\u6307\u5b9a\uff1a\u7b2c\u4e00\u884c\u4f5c\u4e3a\u8868\u5934 header\u6307\u5b9a\uff0cname\u6307\u5b9a\uff1a\u5148\u7528header\u6307\u5b9a\u884c\u4f5c\u4e3a\u8868\u5934\uff0c\u7136\u540e\u7528name\u8986\u76d6\uff0c\u76f8\u5f53\u4e8e\u5220\u9664\u4e86header\u6307\u5b9a\u7684\u884c\uff0c\u5e76\u7528name\u6307\u5b9a\u8868\u5934 to_csv() \u00b6 \u4f7f\u7528 to_csv() \u65b9\u6cd5\u5c06 DataFrame \u5b58\u50a8\u4e3a csv \u6587\u4ef6 df . to_csv ( 'site.csv' , encoding = 'utf-8' ) head(n) / tail(n) \u00b6 print ( df . head ( 10 )) # \u8bfb\u53d6\u524d10\u884c\uff0c\u9ed8\u8ba4\u4e3a5\u884c to_numpy() \u00b6 data = df . to_numpy () # \u8f6c\u6362\u4e3a numpy to_string() \u00b6 print ( df . to_string ()) #to_string() \u7528\u4e8e\u8fd4\u56de DataFrame \u7c7b\u578b\u7684\u6570\u636e\uff0c\u5982\u679c\u4e0d\u4f7f\u7528\u8be5\u51fd\u6570\uff0c\u5219\u8f93\u51fa\u7ed3\u679c\u4e3a\u6570\u636e\u7684\u524d\u9762 5 \u884c\u548c\u672b\u5c3e 5 \u884c\uff0c\u4e2d\u95f4\u90e8\u5206\u4ee5 ... \u4ee3\u66ff \u53c2\u8003 \u00b6 pandas \u5165\u95e8\uff1aDataFrame\u7684\u521b\u5efa\uff0c\u8bfb\u5199\uff0c\u63d2\u5165\u548c\u5220\u9664_\u4e0d\u53bb\u60f3\u7ed3\u679c\uff0c\u4e00\u76f4\u5728\u8def\u4e0a-CSDN\u535a\u5ba2 \u8be6\u89e3pandas\u7684read_csv\u65b9\u6cd5 - \u53e4\u660e\u5730\u76c6 - \u535a\u5ba2\u56ed","title":"Pandas"},{"location":"Python/Pandas/#pandas","text":"pandas documentation \u2014 pandas 1.2.4 documentation (pydata.org)","title":"Pandas"},{"location":"Python/Pandas/#dataframe","text":"","title":"DataFrame"},{"location":"Python/Pandas/#dataframe_1","text":"pandas . DataFrame ( data = None , index = None , columns = None , dtype = None , copy = None ) # \u6570\u636e \u7d22\u5f15\uff08\u884c\u6807\u7b7e\uff09 \u5217\u6807\u7b7e \u6570\u636e\u7c7b\u578b \u62f7\u8d1d\u6570\u636e","title":"\u521b\u5efa DataFrame"},{"location":"Python/Pandas/#_1","text":"data = { \"one\" : np . random . randn ( 4 ), \"two\" : np . linspace ( 1 , 4 , 4 ), \"three\" :[ 'zhangsan' , '\u674e\u56db' , 999 , 0.1 ]} df = pd . DataFrame ( data , index = [ 1 , 2 , 3 , 4 ])","title":"\u7528\u5b57\u5178\u521b\u5efa"},{"location":"Python/Pandas/#_2","text":"data = np . random . randn ( 6 , 4 ) #\u521b\u5efa\u4e00\u4e2a6\u884c4\u5217\u7684\u6570\u7ec4 df = pd . DataFrame ( data , columns = list ( 'ABCD' ), index = [ 1 , 2 , 'a' , 'b' , '2006-10-1' , '\u7b2c\u516d\u884c' ])","title":"\u7528\u6570\u7ec4\u521b\u5efa"},{"location":"Python/Pandas/#dataframe_2","text":"pd . DataFrame ( columns = ( 'id' , 'name' , 'grade' , 'class' ))","title":"\u7a7a DataFrame"},{"location":"Python/Pandas/#_3","text":"\u521b\u5efa df \u662f\u4e0d\u6307\u5b9a\u7d22\u5f15\u9ed8\u8ba4\u4f1a\u4ece 0 \u5f00\u59cb set_index \uff1a\u5c06 df \u4e2d\u7684\u67d0\u5217\u8bbe\u7f6e\u4e3a\u7d22\u5f15 df . set_index ( 'one' , drop = False ) # drop\u9ed8\u8ba4\u4e3aTrue, \u8868\u793a\u8bbe\u7f6e\u7d22\u5f15\u540e\u5c06\u8be5\u5217\u5220\u9664 reset_index \uff1a\u91cd\u7f6e\u7d22\u5f15 df . set_index ( drop = True ) # drop\u9ed8\u8ba4\u4e3aFalse, \u8868\u793a\u539f\u7d22\u5f15\u5c06\u4f5c\u4e3a\u6570\u636e\u4fdd\u7559","title":"\u7d22\u5f15\u8bbe\u7f6e"},{"location":"Python/Pandas/#dataframe_3","text":"loc \u90fd\u662f\u884c\u540d\u548c\u5217\u540d\uff0ciloc \u90fd\u662f\u884c\u53f7\u548c\u5217\u53f7 loc \u4e0d\u652f\u6301\u884c\u53f7\u5207\u7247","title":"\u8bfb\u53d6 DataFrame"},{"location":"Python/Pandas/#_4","text":"# \u6309\u5217\u540d f . \u5217\u540d df [ '\u5217\u540d' ] / df [[ '\u5217\u540d' ]] / df [[ '\u5217\u540d1' , '\u5217\u540d2' , ... ]] # series Dataframe Dataframe # \u6309\u5217\u53f7 iloc df . iloc [:, 0 : 2 ] # [0,2)\u5217","title":"\u6309\u5217\u8bfb\u53d6"},{"location":"Python/Pandas/#_5","text":"# \u6309\u884c\u6807\u7b7e loc\uff08\u884c\u6807\u7b7e\u4e0d\u4e00\u5b9a\u662f\u5b57\u7b26\u4e32 df . loc [ '\u884c\u6807\u7b7e' ] / df . loc [[ '\u884c\u6807\u7b7e' ]] / df . loc [[ '\u884c\u6807\u7b7e1' , '\u884c\u6807\u7b7e2' , ... ]] # series Dataframe Dataframe # \u6309\u884c\u53f7 iloc df . iloc [ \u884c\u53f7 ] / df . iloc [[ \u884c\u53f7 ]] / df . iloc [[ \u884c\u53f71 , \u884c\u53f72 , ... ]] / df . iloc [ \u884c\u53f71 : \u884c\u53f72 ] # \u7b2c\u4e00\u4e2a\u662fseries \u540e\u9762\u7684\u662fDataframe","title":"\u6309\u884c\u8bfb\u53d6"},{"location":"Python/Pandas/#_6","text":"df [ col ][ row ] # df['a'][1] /* loc */ # \u4e00\u4e2a\u5355\u5143\u683c df . loc [ row ][ col ] / df . loc [ row , col ] # \u4e00\u884c\u591a\u5217 df . loc [ row ][[ col1 , col2 ]] / df . loc [ 1 ,[ col1 , col2 ]] / df . loc [ row ][ firstCol : endCol ] / df . loc [ row , firstCol : endCol ] # \u591a\u884c\u4e00\u5217 \u884c\u53f7\u4e0d\u80fd\u7528\u5207\u7247 df . loc [[ row1 , row2 ]][ col ] / df . loc [[ row1 , row2 ]] . col / df . loc [[ row1 , row2 ], col ] # \u591a\u884c\u591a\u5217 \u884c\u53f7\u4e0d\u80fd\u7528\u5207\u7247 df . loc [[ row1 , row2 ],[ col1 , col2 ]] / df . loc [[ row1 , row2 ]][[ col1 , col2 ]] / df . loc [[ row1 , row3 ], firstCol : endCol ] /* iloc */ # \u4e00\u4e2a\u5355\u5143\u683c \u4e0d\u652f\u6301df.iloc[rowNo,col] df . iloc [ rowNo ] . col / df . iloc [ rowNo ][ col ] / df . iloc [ rowNo , colNo ] # \u4e00\u884c\u591a\u5217 \u4e0d\u652f\u6301df.iloc[rowNo,[col1,col2]],df.iloc[rowNo,firstColNo:endColNo] df . iloc [ rowNo , firestColNo : endColNo ] / df . iloc [ rowNo ][[ col1 , col2 ]] / df . iloc [ rowNo ][ firesCol : endCol ] # \u591a\u884c\u4e00\u5217 df . iloc [[ rowNo1 , rowNo2 ], colNo ] / df . iloc [ firstRowNo : endRowNo , colNo ] / df . iloc [[ rowNo1 , rowNo2 ]][ col ] / df . iloc [ firstRowNo : endRowNo ][ col ] # \u591a\u884c\u591a\u5217 df . iloc [ firstRowNo : endRowNo , firstColNo : endColNo ] / df . iloc [[ RowNo1 , RowNo2 ],[ ColNo1 , ColNo2 ]] / df . iloc [ firstRowNo : endRowNo ][[ col1 , col2 ]]","title":"\u6309\u5355\u5143\u683c\u8bfb\u53d6"},{"location":"Python/Pandas/#_7","text":"\u5982\u679c\u7528\u4e00\u4e2a\u5217\u8868\u6216\u6570\u7ec4\u8d4b\u503c\uff0c\u5176\u957f\u5ea6\u5fc5\u987b\u76f8\u540c","title":"\u8d4b\u503c"},{"location":"Python/Pandas/#_8","text":"df . col = colList / colValue df [ col ] = colList / colValue # eg: df.A=[1,2,3,4,5,6],df['A']=0","title":"\u6309\u5217\u8d4b\u503c"},{"location":"Python/Pandas/#_9","text":"df . loc [ row ] = rowList df . loc [ row ] = rowValue","title":"\u6309\u884c\u8d4b\u503c"},{"location":"Python/Pandas/#_10","text":"df . loc [[ row1 , row2 ],[ col1 , col2 ]] = value / valueList df . iloc [[ rowNo1 , rowNo2 ],[ colNo1 , colNo2 ]] = value / valueList df . iloc [[ rowNo1 , rowNo2 ]][[ col1 , col2 ]] = value / valueList","title":"\u591a\u884c\u591a\u5217\u8d4b\u503c"},{"location":"Python/Pandas/#_11","text":"df [ df == 'NR' ] = 0 # \u6240\u6709 NR \u66ff\u6362\u6210 0","title":"\u5176\u4ed6"},{"location":"Python/Pandas/#_12","text":"","title":"\u589e\u52a0\u6570\u636e"},{"location":"Python/Pandas/#_13","text":"","title":"\u5220\u9664\u6570\u636e"},{"location":"Python/Pandas/#_14","text":"","title":"\u5176\u4ed6"},{"location":"Python/Pandas/#__version","text":"pd . __version__ # \u67e5\u770b\u7248\u672c","title":"__version"},{"location":"Python/Pandas/#read_csv","text":"df = pd . read_csv ( 'nba.csv' , encoding = 'utf-8' ) \u5e38\u7528\u5c5e\u6027\uff1a sep\uff1a\u5206\u9694\u7b26\uff0c\u5982 sep=',' header\uff1a\u6307\u5b9a\u4e00\u884c\u4e3a\u8868\u5934\uff0c\u5982 header=0 \u5373\u6307\u5b9a\u7b2c\u4e00\u884c\u4e3a\u8868\u5934 name\uff1a\u6307\u5b9a\u8868\u5934\uff0c\u5982name=['a','b] header\u4e0d\u6307\u5b9a\uff0cname\u4e0d\u6307\u5b9a\uff1a\u7b2c\u4e00\u884c\u4f5c\u4e3a\u8868\u5934 header\u6307\u5b9a\uff0cname\u6307\u5b9a\uff1a\u5148\u7528header\u6307\u5b9a\u884c\u4f5c\u4e3a\u8868\u5934\uff0c\u7136\u540e\u7528name\u8986\u76d6\uff0c\u76f8\u5f53\u4e8e\u5220\u9664\u4e86header\u6307\u5b9a\u7684\u884c\uff0c\u5e76\u7528name\u6307\u5b9a\u8868\u5934","title":"read_csv()"},{"location":"Python/Pandas/#to_csv","text":"\u4f7f\u7528 to_csv() \u65b9\u6cd5\u5c06 DataFrame \u5b58\u50a8\u4e3a csv \u6587\u4ef6 df . to_csv ( 'site.csv' , encoding = 'utf-8' )","title":"to_csv()"},{"location":"Python/Pandas/#headn-tailn","text":"print ( df . head ( 10 )) # \u8bfb\u53d6\u524d10\u884c\uff0c\u9ed8\u8ba4\u4e3a5\u884c","title":"head(n) / tail(n)"},{"location":"Python/Pandas/#to_numpy","text":"data = df . to_numpy () # \u8f6c\u6362\u4e3a numpy","title":"to_numpy()"},{"location":"Python/Pandas/#to_string","text":"print ( df . to_string ()) #to_string() \u7528\u4e8e\u8fd4\u56de DataFrame \u7c7b\u578b\u7684\u6570\u636e\uff0c\u5982\u679c\u4e0d\u4f7f\u7528\u8be5\u51fd\u6570\uff0c\u5219\u8f93\u51fa\u7ed3\u679c\u4e3a\u6570\u636e\u7684\u524d\u9762 5 \u884c\u548c\u672b\u5c3e 5 \u884c\uff0c\u4e2d\u95f4\u90e8\u5206\u4ee5 ... \u4ee3\u66ff","title":"to_string()"},{"location":"Python/Pandas/#_15","text":"pandas \u5165\u95e8\uff1aDataFrame\u7684\u521b\u5efa\uff0c\u8bfb\u5199\uff0c\u63d2\u5165\u548c\u5220\u9664_\u4e0d\u53bb\u60f3\u7ed3\u679c\uff0c\u4e00\u76f4\u5728\u8def\u4e0a-CSDN\u535a\u5ba2 \u8be6\u89e3pandas\u7684read_csv\u65b9\u6cd5 - \u53e4\u660e\u5730\u76c6 - \u535a\u5ba2\u56ed","title":"\u53c2\u8003"},{"location":"Python/Pymssql/","text":"Pymssql \u00b6 pymssql \u2014 pymssql 2.2.2.dev0+gff84c14.d20210416 documentation \u8fde\u63a5 \u00b6 # \u8fde\u63a5 autocommit \u81ea\u52a8\u4fee\u6539\u64cd\u4f5c conn = sql . connect ( serverName , userName , password , autocommit = True ) cursor = conn . cursor () # \u5173\u95ed\u8fde\u63a5 conn . close () \u53ef\u80fd\u9047\u5230\u7684\u9519\u8bef\uff1a 18456 \uff1a\u5148\u7528 windows \u8eab\u4efd\u9a8c\u8bc1\u767b\u5f55\uff0c\u53f3\u51fb\u6570\u636e\u5e93\uff08\u4e0d\u662f\u91cc\u9762\u6570\u636e\u5e93\u90a3\u4e2a\u6587\u4ef6\u5939\uff0c\u662f\u6700\u5916\u9762\u90a3\u4e2a\uff0c\u56fe\u6807\u662f\u6570\u636e\u5e93\uff09\uff0c\u53f3\u51fb\u5c5e\u6027\uff0c\u5b89\u5168\u6027\uff0c\u670d\u52a1\u5668\u9a8c\u8bc1\u8eab\u4efd\u6539\u4e3a SQL Server \u548c Windows \u8eab\u4efd\u9a8c\u8bc1\u6a21\u5f0f 233 \uff1a\u6253\u5f00 SQL Server \u914d\u7f6e\u7ba1\u7406\u5668\uff0cSQL Server\u7f51\u7edc\u914d\u7f6e\uff0cMSSQLSERVER\u7684\u534f\u8bae\uff0c\u542f\u7528 TCP / IP\uff0c\u6700\u597d\u518d\u91cd\u542f\u4e00\u4e0b SQL Server\u914d\u7f6e\u7ba1\u7406\u5668\uff08\u672c\u5730\uff09\u4e2d\u7684 SQL Server \u6267\u884c\u6307\u4ee4 \u00b6 # \u6267\u884c cursor . execute ( 'sql\u8bed\u53e5' ) # \u8c03\u7528\u5b58\u50a8\u8fc7\u7a0b cursor . callproc ( 'FindPerson' , ( 'Jane Doe' ,)) # \u5b58\u50a8\u8fc7\u7a0b\u540d \u53c2\u6570 \u83b7\u53d6\u7ed3\u679c \u00b6 cnt = cursor . fetchone ()[ 0 ] # \u83b7\u53d6\u7b2c\u4e00\u884c # \u83b7\u53d6\u591a\u884c row = cursor . fetchone () while row : print ( \"ID= %d , Name= %s \" % ( row [ 0 ], row [ 1 ])) row = cursor . fetchone () cursor . execute ( 'SELECT * FROM persons WHERE salesrep= %s ' , 'John Doe' ) for row in cursor : print ( 'row = %r ' % ( row ,)) cursor . execute ( 'SELECT * FROM persons' ) for row in cursor : print ( \"ID= %d , Name= %s \" % ( row [ 'id' ], row [ 'name' ])) \u6ce8\u610f\u4e8b\u9879\uff1a\u4e00\u6761\u94fe\u63a5\u5728\u4efb\u4f55\u65f6\u5019\u53ea\u4f1a\u6709\u4e00\u4e2aCursor\u5bf9\u8c61\u5904\u4e8e\u67e5\u8be2\u72b6\u6001","title":"Pymssql"},{"location":"Python/Pymssql/#pymssql","text":"pymssql \u2014 pymssql 2.2.2.dev0+gff84c14.d20210416 documentation","title":"Pymssql"},{"location":"Python/Pymssql/#_1","text":"# \u8fde\u63a5 autocommit \u81ea\u52a8\u4fee\u6539\u64cd\u4f5c conn = sql . connect ( serverName , userName , password , autocommit = True ) cursor = conn . cursor () # \u5173\u95ed\u8fde\u63a5 conn . close () \u53ef\u80fd\u9047\u5230\u7684\u9519\u8bef\uff1a 18456 \uff1a\u5148\u7528 windows \u8eab\u4efd\u9a8c\u8bc1\u767b\u5f55\uff0c\u53f3\u51fb\u6570\u636e\u5e93\uff08\u4e0d\u662f\u91cc\u9762\u6570\u636e\u5e93\u90a3\u4e2a\u6587\u4ef6\u5939\uff0c\u662f\u6700\u5916\u9762\u90a3\u4e2a\uff0c\u56fe\u6807\u662f\u6570\u636e\u5e93\uff09\uff0c\u53f3\u51fb\u5c5e\u6027\uff0c\u5b89\u5168\u6027\uff0c\u670d\u52a1\u5668\u9a8c\u8bc1\u8eab\u4efd\u6539\u4e3a SQL Server \u548c Windows \u8eab\u4efd\u9a8c\u8bc1\u6a21\u5f0f 233 \uff1a\u6253\u5f00 SQL Server \u914d\u7f6e\u7ba1\u7406\u5668\uff0cSQL Server\u7f51\u7edc\u914d\u7f6e\uff0cMSSQLSERVER\u7684\u534f\u8bae\uff0c\u542f\u7528 TCP / IP\uff0c\u6700\u597d\u518d\u91cd\u542f\u4e00\u4e0b SQL Server\u914d\u7f6e\u7ba1\u7406\u5668\uff08\u672c\u5730\uff09\u4e2d\u7684 SQL Server","title":"\u8fde\u63a5"},{"location":"Python/Pymssql/#_2","text":"# \u6267\u884c cursor . execute ( 'sql\u8bed\u53e5' ) # \u8c03\u7528\u5b58\u50a8\u8fc7\u7a0b cursor . callproc ( 'FindPerson' , ( 'Jane Doe' ,)) # \u5b58\u50a8\u8fc7\u7a0b\u540d \u53c2\u6570","title":"\u6267\u884c\u6307\u4ee4"},{"location":"Python/Pymssql/#_3","text":"cnt = cursor . fetchone ()[ 0 ] # \u83b7\u53d6\u7b2c\u4e00\u884c # \u83b7\u53d6\u591a\u884c row = cursor . fetchone () while row : print ( \"ID= %d , Name= %s \" % ( row [ 0 ], row [ 1 ])) row = cursor . fetchone () cursor . execute ( 'SELECT * FROM persons WHERE salesrep= %s ' , 'John Doe' ) for row in cursor : print ( 'row = %r ' % ( row ,)) cursor . execute ( 'SELECT * FROM persons' ) for row in cursor : print ( \"ID= %d , Name= %s \" % ( row [ 'id' ], row [ 'name' ])) \u6ce8\u610f\u4e8b\u9879\uff1a\u4e00\u6761\u94fe\u63a5\u5728\u4efb\u4f55\u65f6\u5019\u53ea\u4f1a\u6709\u4e00\u4e2aCursor\u5bf9\u8c61\u5904\u4e8e\u67e5\u8be2\u72b6\u6001","title":"\u83b7\u53d6\u7ed3\u679c"},{"location":"Python/Streamlit/","text":"Streamlit \u00b6 \u4ec5\u8bb0\u5f55\u4e00\u4e9b\u7528\u5230\u4e86\u7684 import streamlit as st st . set_page_config ( layout = \"wide\" , page_icon = \":shark:\" ) # \u5bbd\u5c4f\u6a21\u5f0f\uff0c\u56fe\u6807\u9ca8\u9c7c st . markdown ( \"...\" ) # \u8f93\u51famd st . text_input ( \"...\" ) # \u8f93\u5165\u6587\u5b57 st . number_input ( \"...\" ) # \u8f93\u5165\u6570\u5b57 st . table ( df ) # \u4e5f\u53ef\u4ee5\u76f4\u63a5 df st . button ( \"...\" ) # \u8fd4\u56de bool st . write ( \"...\" ) # \u8f93\u51fa st . selectbox ( \"...\" , ( \"-\" , \"...\" )) # \u9009\u62e9\u6846 st . st . sidebar . selectbox ( \"...\" ) # \u4fa7\u8fb9\u680f siderbar.\u5176\u4ed6API \u53c2\u8003 \u00b6 Python\uff1a\u4f7f\u7528Streamlit\u5feb\u901f\u642d\u5efa\u6570\u636e\u79d1\u5b66Web App_\u5fd7\u6d69\u540c\u5b66\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_python streamlit","title":"Streamlit"},{"location":"Python/Streamlit/#streamlit","text":"\u4ec5\u8bb0\u5f55\u4e00\u4e9b\u7528\u5230\u4e86\u7684 import streamlit as st st . set_page_config ( layout = \"wide\" , page_icon = \":shark:\" ) # \u5bbd\u5c4f\u6a21\u5f0f\uff0c\u56fe\u6807\u9ca8\u9c7c st . markdown ( \"...\" ) # \u8f93\u51famd st . text_input ( \"...\" ) # \u8f93\u5165\u6587\u5b57 st . number_input ( \"...\" ) # \u8f93\u5165\u6570\u5b57 st . table ( df ) # \u4e5f\u53ef\u4ee5\u76f4\u63a5 df st . button ( \"...\" ) # \u8fd4\u56de bool st . write ( \"...\" ) # \u8f93\u51fa st . selectbox ( \"...\" , ( \"-\" , \"...\" )) # \u9009\u62e9\u6846 st . st . sidebar . selectbox ( \"...\" ) # \u4fa7\u8fb9\u680f siderbar.\u5176\u4ed6API","title":"Streamlit"},{"location":"Python/Streamlit/#_1","text":"Python\uff1a\u4f7f\u7528Streamlit\u5feb\u901f\u642d\u5efa\u6570\u636e\u79d1\u5b66Web App_\u5fd7\u6d69\u540c\u5b66\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_python streamlit","title":"\u53c2\u8003"},{"location":"Python/%E8%AF%B4%E6%98%8E/","text":"\u8bf4\u660e \u00b6 Python\u5b66\u4e60\u4e2d\u7684\u7b14\u8bb0","title":"\u8bf4\u660e"},{"location":"Python/%E8%AF%B4%E6%98%8E/#_1","text":"Python\u5b66\u4e60\u4e2d\u7684\u7b14\u8bb0","title":"\u8bf4\u660e"},{"location":"%E5%85%B6%E4%BB%96/Markdown/","text":"Markdown \u00b6 \u4e00\u79cd\u65b9\u4fbf\u7b80\u5355\u7684\u6392\u7248\u8bed\u8a00 \u4e0d\u540c\u7684\u5e73\u53f0\u4f7f\u7528 Markdow \u89c4\u5219\u53ef\u80fd\u6709\u4e9b\u8bb8\u4e0d\u540c\uff0c\u6bd4\u5982\u6807\u9898 # \u540e\u9762\u53ef\u80fd\u4e0d\u9700\u8981\u52a0\u7a7a\u683c\uff0c\u672c\u6587\u4e3b\u8981\u57fa\u4e8e typora \u57fa\u672c\u8bed\u6cd5 \u00b6 \u6807\u9898 \u00b6 \u4e00\u7ea7\u6807\u9898 # + \u7a7a\u683c \u4e8c\u7ea7\u6807\u9898 ## + \u7a7a\u683c ...\u6700\u591a\u6709\u516d\u7ea7\u6807\u9898 # Markdown ## \u57fa\u672c\u8bed\u6cd5 \u5f15\u7528 \u00b6 > + \u7a7a\u683c \u8fd9\u662f\u4e00\u4e2a\u4f8b\u5b50 \u5f15\u7528\u53ef\u4ee5\u5d4c\u5957 \u4f8b\u5b50 \u5d4c\u5957 \u5f3a\u8c03 \u00b6 * \u548c _ \u90fd\u53ef\u4ee5\u8868\u793a\u5f3a\u8c03 \u4f7f\u7528\u65b9\u5f0f\uff1a\u5728\u9700\u8981\u5f3a\u8c03\u7684\u90e8\u5206\u7684\u5934\u548c\u5c3e\u90fd\u8981\u52a0 \u4e00\u4e2a * \u6216\u8005 _ \u8868\u793a \u503e\u659c \u4e24\u4e2a * \u6216\u8005 _ \u8868\u793a \u52a0\u7c97 \u4e09\u4e2a * \u6216\u8005 _ \u8868\u793a \u52a0\u7c97\uff0b\u503e\u659c `\u53ef\u4ee5\u7528\u4e8e\u5f3a\u8c03\u4e00\u4e9b\u5b57\u7b26\uff0c\u8bed\u6cd5\u5982\u4e0b\uff1a `+` \u6548\u679c\uff1a + \u5217\u8868 \u00b6 * + \u7a7a\u683c \u6216\u8005 + + \u7a7a\u683c \u8fd9\u662f\u4e00\u4e2a\u4f8b\u5b50 \u8fd9\u662f\u4e00\u4e2a\u4f8b\u5b50 \u5728\u4e00\u4e2a\u5217\u8868\u4e0b\u6309 tab \u4f1a\u53d8\u6210\u4e8c\u7ea7\u5217\u8868 \u8fd9\u662f\u4e00\u7ea7\u5217\u8868 \u8fd9\u662f\u4e8c\u7ea7\u5217\u8868 \u4ee3\u7801\u5757 \u00b6 ``` + \u8bed\u8a00(\u6bd4\u5982C++) + \u56de\u8f66 \u6548\u679c\u5982\u4e0b: #include <iostream> using namespace std ; int main () { cout << \"hello, world.\" return 0 ; } \u5206\u5272\u7ebf \u00b6 \u4e09\u4e2a\u6216\u8005\u66f4\u591a\u7684 + \u6216 _ \u6216 - + \u56de\u8f66 \u6548\u679c\uff1a \u8d85\u94fe\u63a5\u4e0e\u56fe\u7247 \u00b6 \u884c\u5185\u5f0f \u683c\u5f0f\uff1a[\u540d\u5b57] (URL) [ \u767e\u5ea6 ]( https://www.baidu.com/ ) \u6548\u679c\u5982\u4e0b\uff1a \u767e\u5ea6 \u53c2\u8003\u5f0f \u5728\u8981\u591a\u6b21\u4f7f\u7528\u540c\u4e00\u4e2a\u8d85\u94fe\u63a5\u65f6\u4f7f\u7528 \u683c\u5f0f\uff1a[\u7ed9\u7f51\u7ad9\u8d77\u7684\u540d\u5b57]\uff1aURL \uff08\u76f8\u5f53\u4e8e\u5b9a\u4e49\uff09 \u4f7f\u7528\u65b9\u5f0f\uff1a[\u8d85\u94fe\u63a5\u7684\u540d\u5b57] [\u7ed9\u7f51\u7ad9\u8d77\u7684\u540d\u5b57] [ \u767e\u5ea6 ]: https://www.baidu.com/ [ here ][ \u767e\u5ea6 ] \u56fe\u7247 \u4e5f\u6709\u884c\u5185\u5f0f\u4e0e\u53c2\u8003\u5f0f\uff0c\u9700\u8981\u5728\u524d\u9762\u52a0\u4e2a ! ![\u56fe\u7247\u540d][\u5177\u4f53\u5730\u5740\uff0c\u672c\u5730\u6216\u8005\u7f51\u9875] \u6570\u5b66\u516c\u5f0f \u00b6 1.\u5185\u8054\u5f0f typora\u4e2d \u6587\u4ef6-\u504f\u597d\u8bbe\u7f6e-markdown-\u6253\u5f00\u5185\u8054\u516c\u5f0f $\u516c\u5f0f\u5185\u5bb9$ 2.\u975e\u5185\u8054\u5f0f \u6dfb\u52a0\u6570\u5b66\u516c\u5f0f\uff1a $$ \u516c\u5f0f\u5185\u5bb9 $$ \u5e38\u7528\u7b26\u53f7 \u8fd9\u91cc\u4ec5\u5217\u51fa\u4e00\u4e9b\u5e38\u7528\u7684\uff0c\u5177\u4f53\u8bf7\u770b\u53c2\u8003 \u7b26\u53f7 \u6548\u679c \u8868\u793a\u65b9\u5f0f \u4e0a\u4e0b\u6807 \\(x^2\\) x^2 x_2 \u5206\u5f0f \\(\\frac{1}{2}\\) \\frac{1}{2} \u6839\u53f7 \\(\\sqrt{2}\\) \\sqrt{2} \u77e2\u91cf \\(\\vec{a}\\) \\vec{a} \u4e0d\u5b9a\u79ef\u5206 \\(\\int{x}dx\\) \\int{x}dx \u5b9a\u79ef\u5206 \\(\\int_{1}^{2}{x}dx\\) \\int_{1}^{2}{x}dx \u7a7a\u683c \\quad \u6781\u9650 \\(\\lim{a+b}\\) \\lim{a+b} \\(\\lim_{n\\rightarrow+\\infty}\\) \\lim_{n\\rightarrow+\\infty} \\(\\lim_{n\\rightarrow+\\infty}{a+b}\\) \\lim_{n\\rightarrow+\\infty}{a+b} \u7d2f\u52a0 \\(\\sum{a}\\) \\sum{a} \\(\\sum_{i=1}^{n}{a_i}\\) \\sum_{i=1}^{n}{a_i} \u7d2f\u4e58 \\(\\prod{x}\\) \\prod{x} \\(\\prod_{i=1}^{n}{x_i}\\) \\prod_{i=1}^{n}{x_i} \u5bf9\u6570\u51fd\u6570 \\(\\ln2\\) \\ln2 \\(\\log_{11}{121}\\) \\log_{11}{121} \\(\\lg10\\) \\lg10 \u52a0\u51cf \\(\\pm\\) \\pm \u53c9\u4e58 \\(\\times\\) \\times \u70b9\u4e58 \\(\\cdot\\) \\cdot \u9664\u6cd5 \\(\u00f7\\) \\div \u4e0d\u7b49 \\(\\neq\\) \\neq \u6052\u7b49 \\(\\equiv\\) \\equiv \u5c0f\u4e8e\u7b49\u4e8e \\(\\leq\\) \\leq \u5927\u4e8e\u7b49\u4e8e \\(\\geq\\) \\geq \u7ea6\u7b49\u4e8e \\(\\approx\\) \\approx \u56e0\u4e3a \\(\\because\\) \\because \u6240\u4ee5 \\(\\therefore\\) \\therefore \u5408\u53d6 \\(\\wedge\\) \\wedge \u6790\u53d6 \\(\\vee\\) \\vee \u8574\u542b \\(\\Rightarrow\\) \\Rightarrow \u975e \\(\\urcorner\\) \\urcorner \u5927\u62ec\u53f7 \\[ y = \\begin{cases} 1 &x\\geq 0 \\\\ 0 &x<0 \\end{cases} \\] y = \\begin{cases} 1 &x\\geq 0 \\\\ 0 &x<0 \\end{cases} \u77e9\u9635 $$ \\begin{bmatrix} a & b \\ c & d \\end{bmatrix} $$ \\begin{bmatrix} a & b \\\\ c & d \\end{bmatrix} \u8868\u683c\u5143\u7d20 \u00b6 typora \u4e2d\u4f7f\u7528\u5feb\u6377\u952e Ctrl+T name|score ----|---- abcd|100 defg|0 name score abcd 100 defg 0 \u6298\u53e0\u4ee3\u7801\u548c\u4fa7\u8fb9\u680f \u00b6 typora\u4e2d\u6298\u53e0\u4fa7\u8fb9\u680f\uff1a\u6587\u4ef6-\u504f\u597d\u8bbe\u7f6e-\u5916\u89c2-\u4fa7\u8fb9\u680f \u6298\u53e0\u4ee3\u7801\uff1a <details> <summary>tag</summary> <code> Hello world! </code> </details> \u6548\u679c\u5982\u4e0b\uff1a tag Hello world! \u5bfc\u51fa\u5176\u4ed6\u683c\u5f0f \u00b6 typora \u4e2d\u53ef\u4ee5\u76f4\u63a5\u70b9\u51fb \u6587\u4ef6-\u5bfc\u51fa \u5e76\u9009\u62e9\u6587\u4ef6\u683c\u5f0f\u5373\u53ef \u5bfc\u51fa\u4e3a word \u4e4b\u524d\u9700\u8981\u4e0b\u8f7d pandoc\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003\u7f51\u4e0a\u535a\u5ba2 \u53c2\u8003 \u00b6 Introduction | Learning-Markdown (Markdown \u5165\u95e8\u53c2\u8003) Supported Functions \u00b7 KaTeX Mathjax\u516c\u5f0f\u6559\u7a0b_dabokele\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_mathjax\u516c\u5f0f","title":"Markdown"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#markdown","text":"\u4e00\u79cd\u65b9\u4fbf\u7b80\u5355\u7684\u6392\u7248\u8bed\u8a00 \u4e0d\u540c\u7684\u5e73\u53f0\u4f7f\u7528 Markdow \u89c4\u5219\u53ef\u80fd\u6709\u4e9b\u8bb8\u4e0d\u540c\uff0c\u6bd4\u5982\u6807\u9898 # \u540e\u9762\u53ef\u80fd\u4e0d\u9700\u8981\u52a0\u7a7a\u683c\uff0c\u672c\u6587\u4e3b\u8981\u57fa\u4e8e typora","title":"Markdown"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_1","text":"","title":"\u57fa\u672c\u8bed\u6cd5"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_2","text":"\u4e00\u7ea7\u6807\u9898 # + \u7a7a\u683c \u4e8c\u7ea7\u6807\u9898 ## + \u7a7a\u683c ...\u6700\u591a\u6709\u516d\u7ea7\u6807\u9898 # Markdown ## \u57fa\u672c\u8bed\u6cd5","title":"\u6807\u9898"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_3","text":"> + \u7a7a\u683c \u8fd9\u662f\u4e00\u4e2a\u4f8b\u5b50 \u5f15\u7528\u53ef\u4ee5\u5d4c\u5957 \u4f8b\u5b50 \u5d4c\u5957","title":"\u5f15\u7528"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_4","text":"* \u548c _ \u90fd\u53ef\u4ee5\u8868\u793a\u5f3a\u8c03 \u4f7f\u7528\u65b9\u5f0f\uff1a\u5728\u9700\u8981\u5f3a\u8c03\u7684\u90e8\u5206\u7684\u5934\u548c\u5c3e\u90fd\u8981\u52a0 \u4e00\u4e2a * \u6216\u8005 _ \u8868\u793a \u503e\u659c \u4e24\u4e2a * \u6216\u8005 _ \u8868\u793a \u52a0\u7c97 \u4e09\u4e2a * \u6216\u8005 _ \u8868\u793a \u52a0\u7c97\uff0b\u503e\u659c `\u53ef\u4ee5\u7528\u4e8e\u5f3a\u8c03\u4e00\u4e9b\u5b57\u7b26\uff0c\u8bed\u6cd5\u5982\u4e0b\uff1a `+` \u6548\u679c\uff1a +","title":"\u5f3a\u8c03"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_5","text":"* + \u7a7a\u683c \u6216\u8005 + + \u7a7a\u683c \u8fd9\u662f\u4e00\u4e2a\u4f8b\u5b50 \u8fd9\u662f\u4e00\u4e2a\u4f8b\u5b50 \u5728\u4e00\u4e2a\u5217\u8868\u4e0b\u6309 tab \u4f1a\u53d8\u6210\u4e8c\u7ea7\u5217\u8868 \u8fd9\u662f\u4e00\u7ea7\u5217\u8868 \u8fd9\u662f\u4e8c\u7ea7\u5217\u8868","title":"\u5217\u8868"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_6","text":"``` + \u8bed\u8a00(\u6bd4\u5982C++) + \u56de\u8f66 \u6548\u679c\u5982\u4e0b: #include <iostream> using namespace std ; int main () { cout << \"hello, world.\" return 0 ; }","title":"\u4ee3\u7801\u5757"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_7","text":"\u4e09\u4e2a\u6216\u8005\u66f4\u591a\u7684 + \u6216 _ \u6216 - + \u56de\u8f66 \u6548\u679c\uff1a","title":"\u5206\u5272\u7ebf"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_8","text":"\u884c\u5185\u5f0f \u683c\u5f0f\uff1a[\u540d\u5b57] (URL) [ \u767e\u5ea6 ]( https://www.baidu.com/ ) \u6548\u679c\u5982\u4e0b\uff1a \u767e\u5ea6 \u53c2\u8003\u5f0f \u5728\u8981\u591a\u6b21\u4f7f\u7528\u540c\u4e00\u4e2a\u8d85\u94fe\u63a5\u65f6\u4f7f\u7528 \u683c\u5f0f\uff1a[\u7ed9\u7f51\u7ad9\u8d77\u7684\u540d\u5b57]\uff1aURL \uff08\u76f8\u5f53\u4e8e\u5b9a\u4e49\uff09 \u4f7f\u7528\u65b9\u5f0f\uff1a[\u8d85\u94fe\u63a5\u7684\u540d\u5b57] [\u7ed9\u7f51\u7ad9\u8d77\u7684\u540d\u5b57] [ \u767e\u5ea6 ]: https://www.baidu.com/ [ here ][ \u767e\u5ea6 ] \u56fe\u7247 \u4e5f\u6709\u884c\u5185\u5f0f\u4e0e\u53c2\u8003\u5f0f\uff0c\u9700\u8981\u5728\u524d\u9762\u52a0\u4e2a ! ![\u56fe\u7247\u540d][\u5177\u4f53\u5730\u5740\uff0c\u672c\u5730\u6216\u8005\u7f51\u9875]","title":"\u8d85\u94fe\u63a5\u4e0e\u56fe\u7247"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_9","text":"1.\u5185\u8054\u5f0f typora\u4e2d \u6587\u4ef6-\u504f\u597d\u8bbe\u7f6e-markdown-\u6253\u5f00\u5185\u8054\u516c\u5f0f $\u516c\u5f0f\u5185\u5bb9$ 2.\u975e\u5185\u8054\u5f0f \u6dfb\u52a0\u6570\u5b66\u516c\u5f0f\uff1a $$ \u516c\u5f0f\u5185\u5bb9 $$ \u5e38\u7528\u7b26\u53f7 \u8fd9\u91cc\u4ec5\u5217\u51fa\u4e00\u4e9b\u5e38\u7528\u7684\uff0c\u5177\u4f53\u8bf7\u770b\u53c2\u8003 \u7b26\u53f7 \u6548\u679c \u8868\u793a\u65b9\u5f0f \u4e0a\u4e0b\u6807 \\(x^2\\) x^2 x_2 \u5206\u5f0f \\(\\frac{1}{2}\\) \\frac{1}{2} \u6839\u53f7 \\(\\sqrt{2}\\) \\sqrt{2} \u77e2\u91cf \\(\\vec{a}\\) \\vec{a} \u4e0d\u5b9a\u79ef\u5206 \\(\\int{x}dx\\) \\int{x}dx \u5b9a\u79ef\u5206 \\(\\int_{1}^{2}{x}dx\\) \\int_{1}^{2}{x}dx \u7a7a\u683c \\quad \u6781\u9650 \\(\\lim{a+b}\\) \\lim{a+b} \\(\\lim_{n\\rightarrow+\\infty}\\) \\lim_{n\\rightarrow+\\infty} \\(\\lim_{n\\rightarrow+\\infty}{a+b}\\) \\lim_{n\\rightarrow+\\infty}{a+b} \u7d2f\u52a0 \\(\\sum{a}\\) \\sum{a} \\(\\sum_{i=1}^{n}{a_i}\\) \\sum_{i=1}^{n}{a_i} \u7d2f\u4e58 \\(\\prod{x}\\) \\prod{x} \\(\\prod_{i=1}^{n}{x_i}\\) \\prod_{i=1}^{n}{x_i} \u5bf9\u6570\u51fd\u6570 \\(\\ln2\\) \\ln2 \\(\\log_{11}{121}\\) \\log_{11}{121} \\(\\lg10\\) \\lg10 \u52a0\u51cf \\(\\pm\\) \\pm \u53c9\u4e58 \\(\\times\\) \\times \u70b9\u4e58 \\(\\cdot\\) \\cdot \u9664\u6cd5 \\(\u00f7\\) \\div \u4e0d\u7b49 \\(\\neq\\) \\neq \u6052\u7b49 \\(\\equiv\\) \\equiv \u5c0f\u4e8e\u7b49\u4e8e \\(\\leq\\) \\leq \u5927\u4e8e\u7b49\u4e8e \\(\\geq\\) \\geq \u7ea6\u7b49\u4e8e \\(\\approx\\) \\approx \u56e0\u4e3a \\(\\because\\) \\because \u6240\u4ee5 \\(\\therefore\\) \\therefore \u5408\u53d6 \\(\\wedge\\) \\wedge \u6790\u53d6 \\(\\vee\\) \\vee \u8574\u542b \\(\\Rightarrow\\) \\Rightarrow \u975e \\(\\urcorner\\) \\urcorner \u5927\u62ec\u53f7 \\[ y = \\begin{cases} 1 &x\\geq 0 \\\\ 0 &x<0 \\end{cases} \\] y = \\begin{cases} 1 &x\\geq 0 \\\\ 0 &x<0 \\end{cases} \u77e9\u9635 $$ \\begin{bmatrix} a & b \\ c & d \\end{bmatrix} $$ \\begin{bmatrix} a & b \\\\ c & d \\end{bmatrix}","title":"\u6570\u5b66\u516c\u5f0f"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_10","text":"typora \u4e2d\u4f7f\u7528\u5feb\u6377\u952e Ctrl+T name|score ----|---- abcd|100 defg|0 name score abcd 100 defg 0","title":"\u8868\u683c\u5143\u7d20"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_11","text":"typora\u4e2d\u6298\u53e0\u4fa7\u8fb9\u680f\uff1a\u6587\u4ef6-\u504f\u597d\u8bbe\u7f6e-\u5916\u89c2-\u4fa7\u8fb9\u680f \u6298\u53e0\u4ee3\u7801\uff1a <details> <summary>tag</summary> <code> Hello world! </code> </details> \u6548\u679c\u5982\u4e0b\uff1a tag Hello world!","title":"\u6298\u53e0\u4ee3\u7801\u548c\u4fa7\u8fb9\u680f"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_12","text":"typora \u4e2d\u53ef\u4ee5\u76f4\u63a5\u70b9\u51fb \u6587\u4ef6-\u5bfc\u51fa \u5e76\u9009\u62e9\u6587\u4ef6\u683c\u5f0f\u5373\u53ef \u5bfc\u51fa\u4e3a word \u4e4b\u524d\u9700\u8981\u4e0b\u8f7d pandoc\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003\u7f51\u4e0a\u535a\u5ba2","title":"\u5bfc\u51fa\u5176\u4ed6\u683c\u5f0f"},{"location":"%E5%85%B6%E4%BB%96/Markdown/#_13","text":"Introduction | Learning-Markdown (Markdown \u5165\u95e8\u53c2\u8003) Supported Functions \u00b7 KaTeX Mathjax\u516c\u5f0f\u6559\u7a0b_dabokele\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_mathjax\u516c\u5f0f","title":"\u53c2\u8003"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/","text":"\u57fa\u4e8eMaterial for MkDocs\u642d\u5efa\u9759\u6001\u6587\u6863 \u00b6 Mkdocs \u53ef\u4ee5\u5341\u5206\u65b9\u4fbf\u7684\u5efa\u7acb\u4e00\u4e2a\u9759\u6001\u6587\u6863\uff0c\u6bd4\u5982 OI Wiki \uff0c\u6b64\u6587\u6863\u4e5f\u662f\u57fa\u4e8e Mkdocs \u6b64\u6587\u6863\u5185\u5bb9\u4ec5\u662f\u57fa\u4e8e\u4e2a\u4eba\u7ecf\u5386\u7684\u7406\u89e3 \u53ef\u80fd\u9700\u8981\u7684\u7528\u5230\u7684\u5de5\u5177\uff1a Markdown \uff0c python3 \u5b89\u88c5/\u521d\u59cb\u5316/\u914d\u7f6e\u8303\u4f8b \u00b6 \u5b89\u88c5 \u00b6 \u5229\u7528 python3 \u81ea\u5e26\u7684 pip \u5de5\u5177\u5728 cmd \u4e2d\u8f93\u5165 pip install mkdocs mkdocs-material \u5982\u679c\u540e\u9762\u63d0\u793a 'mkdocs' \u4e0d\u662f\u5185\u90e8\u6216\u5916\u90e8\u547d\u4ee4.... \u7684\u8bdd\u5c31\u9700\u8981\u81ea\u5df1\u52a0\u4e00\u4e0b\u73af\u5883\u53d8\u91cf\uff0c\u6b64\u5904\u4e0d\u5c55\u5f00\u8bf4\u660e \u521d\u59cb\u5316 \u00b6 \u5728\u4f60\u60f3\u8981\u65b0\u5efa\u6587\u6863\u7684\u76ee\u5f55\u542f\u52a8 cmd\uff0c\u5e76\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4 mkdocs new my-project \u7136\u540e\u6253\u5f00\u65b0\u5efa\u7684\u6587\u4ef6\u5939\u6253\u5f00 mkdocs.yml \uff0c\u4ee5\u4e0b\u5217\u51fa\u6211\u5199\u6b64\u6587\u6863\u65f6\u7684\u914d\u7f6e\u5e76\u914d\u4e0a\u4e86\u6ce8\u91ca\u4f5c\u4e3a\u53c2\u8003 # site site_name: hucorz's Docs # \u6587\u6863\u7684\u540d\u5b57\uff0c\u4f1a\u4f53\u73b0\u5728\u5de6\u4e0a\u89d2 site_url: https://hucorz.github.io/myDoc/ # \u7f51\u7ad9\u7684\u94fe\u63a5\uff0c\u4f3c\u4e4e\u70b9\u51fb\u5de6\u4e0a\u89d2\u7684logo\u540e\u4f1a\u8fdb\u53bb\uff0c\u6211\u4e5f\u6ca1\u505a\u5b9e\u9a8c # repo repo_name: 'hucorz/myDoc' # github\u4ed3\u5e93\u7684\u540d\u5b57\uff0c\u4f1a\u4f53\u73b0\u5728\u53f3\u4e0a\u89d2 repo_url: https://github.com/hucorz/myDoc # github\u4ed3\u5e93\u7684\u94fe\u63a5\uff0c\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684logo\u540e\u4f1a\u8fdb\u53bb nav: # \u5bfc\u822a\u9875\uff0c\u5177\u4f53\u5185\u5bb9\u8981\u57fa\u4e8e\u81ea\u5df1\u6587\u6863\u7684\u5185\u5bb9 - Home: 'index.md' # : \u540e\u9762\u662f\u6587\u4ef6\u7684\u540d\u5b57\uff0c\u524d\u9762\u662f\u6587\u6863\u4e2d\u663e\u793a\u7684\u540d\u5b57\uff0c\u53ef\u4ee5\u5d4c\u5957 - Makrdown: 'Markdown.md' - OI: - \u53c2\u8003: 'OI/\u53c2\u8003.md' - \u6570\u8bba: 'OI/\u6570\u8bba.md' - \u8ba1\u7b97\u51e0\u4f55: 'OI/\u8ba1\u7b97\u51e0\u4f55.md' - \u56fe\u8bba: 'OI/\u56fe\u8bba.md' - \u6570\u636e\u7ed3\u6784: 'OI/\u6570\u636e\u7ed3\u6784.md' - \u5b57\u7b26\u4e32: 'OI/\u5b57\u7b26\u4e32.md' - \u5176\u4ed6: 'OI/\u5176\u4ed6.md' - STL: 'OI/STL.md' - \u8bfe\u7a0b\u7b14\u8bb0: - \u53c2\u8003: '\u8bfe\u7a0b\u7b14\u8bb0/\u53c2\u8003.md' - \u6570\u636e\u5e93\u7cfb\u7edf: '\u8bfe\u7a0b\u7b14\u8bb0/\u6570\u636e\u5e93\u7cfb\u7edf.md' theme: name: 'material' # \u4e3b\u9898\uff0c\u5c31\u7528 material features: # \u8fd9\u540e\u9762\u662f\u4e3b\u9898\u7684\u914d\u7f6e\uff0c\u5177\u4f53\u6211\u4f1a\u5199\u5728\u6587\u6863\u540e\u9762 - navigation.tabs - navigation.tabs.sticky palette: primary: 'white' # \u914d\u8272 accent: 'indigo' logo: 'img/cat-solid.svg' # \u5de6\u4e0a\u89d2logo icon: repo: fontawesome/brands/github-alt # repo\u7684logo favicon: 'img/favicon.ico' #\u7f51\u9875\u56fe\u6807 markdown_extensions: - pymdownx.arithmatex: generic: true - pymdownx.emoji: emoji_index: !!python/name:materialx.emoji.twemoji emoji_generator: !!python/name:materialx.emoji.to_svg - pymdownx.highlight # \u4ee3\u7801\u9ad8\u4eae - pymdownx.superfences - toc: permalink: true # \u6bcf\u4e2a\u6807\u9898\u540e\u9762\u7684 \u951a\u94fe\u63a5 #toc_depth: 2 # table of content \u663e\u793a\u7684\u7ea7\u6570\uff0c0\u5c31\u4e0d\u4f1a\u663e\u793a extra_javascript: - javascripts/config.js - https://polyfill.io/v3/polyfill.min.js?features=es6 - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js plugins: - search: lang: ja # \u5b9e\u6d4b\u641c\u7d22\u8bed\u8a00\u6539\u6210\u65e5\u672c\u53ef\u4ee5\u652f\u6301\u4e2d\u6587\u641c\u641c \u90e8\u7f72 github \u00b6 \u8fd9\u91cc\u7684\u6b65\u9aa4\u53ef\u80fd\u9700\u8981\u79d1\u5b66\u4e0a\u7f51\uff0c\u4e0d\u8fc7 github \u6709\u65f6\u5019\u4e5f\u4e0d\u9700\u8981 \u9996\u5148\u9700\u8981\u4e00\u4e2a github \u8d26\u53f7\uff0c\u7136\u540e\u65b0\u5efa\u4e00\u4e2a\u7a7a\u4ed3\u5e93\uff0c\u5e76\u5229\u7528 git \u5c06\u4ed3\u5e93 clone \u5230\u672c\u5730\uff0c\u8fd9\u91cc\u4e0d\u5c55\u5f00\uff0c\u56e0\u4e3a\u672c\u849f\u84bb\u4e5f\u4e0d\u662f\u5f88\u61c2\uff0c\u7f51\u4e0a\u7684\u535a\u5ba2\u8fd8\u662f\u5f88\u591a \u4ec5\u8bb2\u4e00\u4e0b\u6211\u9047\u5230\u7684\u95ee\u9898\uff1a Failed to connect to github.com port 443: Timed out \u89e3\u51b3\u65b9\u6cd5\uff1a\u7ed9 git \u8bbe\u7f6e\u4ee3\u7406 \u79d1\u5b66\u4e0a\u7f51\u65f6\u6253\u5f00 win10 \u8bbe\u7f6e\u91cc\u7684\u4ee3\u7406\u8bbe\u7f6e\uff0c\u627e\u5230\u4ee3\u7406\u7684\u5730\u5740\u548c\u7aef\u53e3 git config --global http.proxy 172.17.18.80:8080 # \u540e\u9762\u662f \u5730\u5740:\u7aef\u53e3 \u67e5\u770b\u662f\u5426\u6210\u529f git config --get http.proxy \u514b\u9686\u6210\u529f\u540e\u628a .yml \u548c docs \u653e\u5728\u514b\u9686\u6587\u4ef6\u5939\u91cc\uff0c\u7136\u540e\u5728\u6b64\u6587\u4ef6\u5939\u542f\u52a8 cmd\uff0c\u8f93\u5165\u4ee5\u4e0b\u6307\u4ee4\u5373\u53ef\u90e8\u7f72 mkdocs gh-deploy \u7f8e\u5316\u914d\u7f6e \u00b6 \u5b98\u65b9\u6587\u6863 \u6587\u6863\u540d\u79f0 \u00b6 site_name: hucorz's Docs site_url: https://hucorz.github.io/myDoc/ \u6587\u6863\u4e3b\u9898 \u00b6 theme: name: 'material' \u914d\u8272 \u00b6 \u914d\u8272\u76f8\u5173\u914d\u7f6e theme: palette: primary: 'white' accent: 'indigo' \u5bfc\u822a\u9875 \u00b6 \u5bfc\u822a\u9875\u76f8\u5173\u914d\u7f6e features: - navigation.tabs - navigation.tabs.sticky logo && favicon \u00b6 \u6587\u6863\u7684 logo && favicon \u00b6 logo && favicon \u76f8\u5173\u914d\u7f6e theme: # \u8fd9\u4e24\u4e2a\u6211\u90fd\u662f\u4e0b\u4e0b\u6765\u540e\u7528\u7684 logo: 'img/cat-solid.svg' favicon: 'img/favicon.ico' repo \u7684 logo \u00b6 repo \u76f8\u5173\u914d\u7f6e \u4f60\u9700\u8981\u5148\u5728\u914d\u7f6e\u4e2d\u6dfb\u52a0 repo \u7684\u540d\u5b57\u548c url repo_name: 'hucorz/myDoc' repo_url: https://github.com/hucorz/myDoc \u7136\u540e logo \u53c2\u8003\u7684\u5b98\u65b9\u6587\u6863\uff1a theme: icon: repo: fontawesome/brands/github-alt \u6269\u5c55 \u00b6 markdown\u6269\u5c55 \u00b6 \u6570\u5b66\u516c\u5f0f MathJax - Material for MkDocs markdown_extensions: - pymdownx.arithmatex: generic: true extra_javascript: - javascripts/config.js - https://polyfill.io/v3/polyfill.min.js?features=es6 - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js \u4ee3\u7801\u9ad8\u4eae Code blocks - Material for MkDocs markdown_extensions: - pymdownx.highlight # code hilight - pymdownx.superfences toc\uff08table of content\uff09 Setting up navigation - Material for MkDocs markdown_extensions: # \u8fd92\u4e2a\u90fd\u662f\u548c\u6bcf\u4e2amarkdown\u6587\u6863\u7684\u6807\u9898\u6709\u5173 - toc: permalink: true # \u5f00\u542f\u6bcf\u4e2a\u6807\u9898\u540e\u9762\u7684 \u951a\u94fe\u63a5 #toc_depth: 2 # toc\u663e\u793a\u7684\u7ea7\u6570,\u8d8a\u9ad8\u663e\u793a\u7684\u8d8a\u591a\uff0c\u4e0d\u5199\u90fd\u663e\u793a\uff0c0\u4e0d\u663e\u793a \u652f\u6301\u4e2d\u6587\u641c\u7d22 \u00b6 Setting up site search - Material for MkDocs plugins: - search: lang: ja \u53c2\u8003 \u00b6 1.\u4ecb\u7ecd - \u57fa\u4e8e Material for MkDocs \u642d\u5efa\u9759\u6001\u7f51\u9875 Material for MkDocs - Material forMkDocs Failed to connect to github.com port 443: Timed out_\u5929\u751f\u6211\u6750\u5fc5\u6709\u7528-CSDN\u535a\u5ba2","title":"Mkdocs"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#material-for-mkdocs","text":"Mkdocs \u53ef\u4ee5\u5341\u5206\u65b9\u4fbf\u7684\u5efa\u7acb\u4e00\u4e2a\u9759\u6001\u6587\u6863\uff0c\u6bd4\u5982 OI Wiki \uff0c\u6b64\u6587\u6863\u4e5f\u662f\u57fa\u4e8e Mkdocs \u6b64\u6587\u6863\u5185\u5bb9\u4ec5\u662f\u57fa\u4e8e\u4e2a\u4eba\u7ecf\u5386\u7684\u7406\u89e3 \u53ef\u80fd\u9700\u8981\u7684\u7528\u5230\u7684\u5de5\u5177\uff1a Markdown \uff0c python3","title":"\u57fa\u4e8eMaterial for MkDocs\u642d\u5efa\u9759\u6001\u6587\u6863"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#_1","text":"","title":"\u5b89\u88c5/\u521d\u59cb\u5316/\u914d\u7f6e\u8303\u4f8b"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#_2","text":"\u5229\u7528 python3 \u81ea\u5e26\u7684 pip \u5de5\u5177\u5728 cmd \u4e2d\u8f93\u5165 pip install mkdocs mkdocs-material \u5982\u679c\u540e\u9762\u63d0\u793a 'mkdocs' \u4e0d\u662f\u5185\u90e8\u6216\u5916\u90e8\u547d\u4ee4.... \u7684\u8bdd\u5c31\u9700\u8981\u81ea\u5df1\u52a0\u4e00\u4e0b\u73af\u5883\u53d8\u91cf\uff0c\u6b64\u5904\u4e0d\u5c55\u5f00\u8bf4\u660e","title":"\u5b89\u88c5"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#_3","text":"\u5728\u4f60\u60f3\u8981\u65b0\u5efa\u6587\u6863\u7684\u76ee\u5f55\u542f\u52a8 cmd\uff0c\u5e76\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4 mkdocs new my-project \u7136\u540e\u6253\u5f00\u65b0\u5efa\u7684\u6587\u4ef6\u5939\u6253\u5f00 mkdocs.yml \uff0c\u4ee5\u4e0b\u5217\u51fa\u6211\u5199\u6b64\u6587\u6863\u65f6\u7684\u914d\u7f6e\u5e76\u914d\u4e0a\u4e86\u6ce8\u91ca\u4f5c\u4e3a\u53c2\u8003 # site site_name: hucorz's Docs # \u6587\u6863\u7684\u540d\u5b57\uff0c\u4f1a\u4f53\u73b0\u5728\u5de6\u4e0a\u89d2 site_url: https://hucorz.github.io/myDoc/ # \u7f51\u7ad9\u7684\u94fe\u63a5\uff0c\u4f3c\u4e4e\u70b9\u51fb\u5de6\u4e0a\u89d2\u7684logo\u540e\u4f1a\u8fdb\u53bb\uff0c\u6211\u4e5f\u6ca1\u505a\u5b9e\u9a8c # repo repo_name: 'hucorz/myDoc' # github\u4ed3\u5e93\u7684\u540d\u5b57\uff0c\u4f1a\u4f53\u73b0\u5728\u53f3\u4e0a\u89d2 repo_url: https://github.com/hucorz/myDoc # github\u4ed3\u5e93\u7684\u94fe\u63a5\uff0c\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684logo\u540e\u4f1a\u8fdb\u53bb nav: # \u5bfc\u822a\u9875\uff0c\u5177\u4f53\u5185\u5bb9\u8981\u57fa\u4e8e\u81ea\u5df1\u6587\u6863\u7684\u5185\u5bb9 - Home: 'index.md' # : \u540e\u9762\u662f\u6587\u4ef6\u7684\u540d\u5b57\uff0c\u524d\u9762\u662f\u6587\u6863\u4e2d\u663e\u793a\u7684\u540d\u5b57\uff0c\u53ef\u4ee5\u5d4c\u5957 - Makrdown: 'Markdown.md' - OI: - \u53c2\u8003: 'OI/\u53c2\u8003.md' - \u6570\u8bba: 'OI/\u6570\u8bba.md' - \u8ba1\u7b97\u51e0\u4f55: 'OI/\u8ba1\u7b97\u51e0\u4f55.md' - \u56fe\u8bba: 'OI/\u56fe\u8bba.md' - \u6570\u636e\u7ed3\u6784: 'OI/\u6570\u636e\u7ed3\u6784.md' - \u5b57\u7b26\u4e32: 'OI/\u5b57\u7b26\u4e32.md' - \u5176\u4ed6: 'OI/\u5176\u4ed6.md' - STL: 'OI/STL.md' - \u8bfe\u7a0b\u7b14\u8bb0: - \u53c2\u8003: '\u8bfe\u7a0b\u7b14\u8bb0/\u53c2\u8003.md' - \u6570\u636e\u5e93\u7cfb\u7edf: '\u8bfe\u7a0b\u7b14\u8bb0/\u6570\u636e\u5e93\u7cfb\u7edf.md' theme: name: 'material' # \u4e3b\u9898\uff0c\u5c31\u7528 material features: # \u8fd9\u540e\u9762\u662f\u4e3b\u9898\u7684\u914d\u7f6e\uff0c\u5177\u4f53\u6211\u4f1a\u5199\u5728\u6587\u6863\u540e\u9762 - navigation.tabs - navigation.tabs.sticky palette: primary: 'white' # \u914d\u8272 accent: 'indigo' logo: 'img/cat-solid.svg' # \u5de6\u4e0a\u89d2logo icon: repo: fontawesome/brands/github-alt # repo\u7684logo favicon: 'img/favicon.ico' #\u7f51\u9875\u56fe\u6807 markdown_extensions: - pymdownx.arithmatex: generic: true - pymdownx.emoji: emoji_index: !!python/name:materialx.emoji.twemoji emoji_generator: !!python/name:materialx.emoji.to_svg - pymdownx.highlight # \u4ee3\u7801\u9ad8\u4eae - pymdownx.superfences - toc: permalink: true # \u6bcf\u4e2a\u6807\u9898\u540e\u9762\u7684 \u951a\u94fe\u63a5 #toc_depth: 2 # table of content \u663e\u793a\u7684\u7ea7\u6570\uff0c0\u5c31\u4e0d\u4f1a\u663e\u793a extra_javascript: - javascripts/config.js - https://polyfill.io/v3/polyfill.min.js?features=es6 - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js plugins: - search: lang: ja # \u5b9e\u6d4b\u641c\u7d22\u8bed\u8a00\u6539\u6210\u65e5\u672c\u53ef\u4ee5\u652f\u6301\u4e2d\u6587\u641c\u641c","title":"\u521d\u59cb\u5316"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#github","text":"\u8fd9\u91cc\u7684\u6b65\u9aa4\u53ef\u80fd\u9700\u8981\u79d1\u5b66\u4e0a\u7f51\uff0c\u4e0d\u8fc7 github \u6709\u65f6\u5019\u4e5f\u4e0d\u9700\u8981 \u9996\u5148\u9700\u8981\u4e00\u4e2a github \u8d26\u53f7\uff0c\u7136\u540e\u65b0\u5efa\u4e00\u4e2a\u7a7a\u4ed3\u5e93\uff0c\u5e76\u5229\u7528 git \u5c06\u4ed3\u5e93 clone \u5230\u672c\u5730\uff0c\u8fd9\u91cc\u4e0d\u5c55\u5f00\uff0c\u56e0\u4e3a\u672c\u849f\u84bb\u4e5f\u4e0d\u662f\u5f88\u61c2\uff0c\u7f51\u4e0a\u7684\u535a\u5ba2\u8fd8\u662f\u5f88\u591a \u4ec5\u8bb2\u4e00\u4e0b\u6211\u9047\u5230\u7684\u95ee\u9898\uff1a Failed to connect to github.com port 443: Timed out \u89e3\u51b3\u65b9\u6cd5\uff1a\u7ed9 git \u8bbe\u7f6e\u4ee3\u7406 \u79d1\u5b66\u4e0a\u7f51\u65f6\u6253\u5f00 win10 \u8bbe\u7f6e\u91cc\u7684\u4ee3\u7406\u8bbe\u7f6e\uff0c\u627e\u5230\u4ee3\u7406\u7684\u5730\u5740\u548c\u7aef\u53e3 git config --global http.proxy 172.17.18.80:8080 # \u540e\u9762\u662f \u5730\u5740:\u7aef\u53e3 \u67e5\u770b\u662f\u5426\u6210\u529f git config --get http.proxy \u514b\u9686\u6210\u529f\u540e\u628a .yml \u548c docs \u653e\u5728\u514b\u9686\u6587\u4ef6\u5939\u91cc\uff0c\u7136\u540e\u5728\u6b64\u6587\u4ef6\u5939\u542f\u52a8 cmd\uff0c\u8f93\u5165\u4ee5\u4e0b\u6307\u4ee4\u5373\u53ef\u90e8\u7f72 mkdocs gh-deploy","title":"\u90e8\u7f72 github"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#_4","text":"\u5b98\u65b9\u6587\u6863","title":"\u7f8e\u5316\u914d\u7f6e"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#_5","text":"site_name: hucorz's Docs site_url: https://hucorz.github.io/myDoc/","title":"\u6587\u6863\u540d\u79f0"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#_6","text":"theme: name: 'material'","title":"\u6587\u6863\u4e3b\u9898"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#_7","text":"\u914d\u8272\u76f8\u5173\u914d\u7f6e theme: palette: primary: 'white' accent: 'indigo'","title":"\u914d\u8272"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#_8","text":"\u5bfc\u822a\u9875\u76f8\u5173\u914d\u7f6e features: - navigation.tabs - navigation.tabs.sticky","title":"\u5bfc\u822a\u9875"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#logo-favicon","text":"","title":"logo &amp;&amp; favicon"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#logo-favicon_1","text":"logo && favicon \u76f8\u5173\u914d\u7f6e theme: # \u8fd9\u4e24\u4e2a\u6211\u90fd\u662f\u4e0b\u4e0b\u6765\u540e\u7528\u7684 logo: 'img/cat-solid.svg' favicon: 'img/favicon.ico'","title":"\u6587\u6863\u7684 logo &amp;&amp; favicon"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#repo-logo","text":"repo \u76f8\u5173\u914d\u7f6e \u4f60\u9700\u8981\u5148\u5728\u914d\u7f6e\u4e2d\u6dfb\u52a0 repo \u7684\u540d\u5b57\u548c url repo_name: 'hucorz/myDoc' repo_url: https://github.com/hucorz/myDoc \u7136\u540e logo \u53c2\u8003\u7684\u5b98\u65b9\u6587\u6863\uff1a theme: icon: repo: fontawesome/brands/github-alt","title":"repo \u7684 logo"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#_9","text":"","title":"\u6269\u5c55"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#markdown","text":"\u6570\u5b66\u516c\u5f0f MathJax - Material for MkDocs markdown_extensions: - pymdownx.arithmatex: generic: true extra_javascript: - javascripts/config.js - https://polyfill.io/v3/polyfill.min.js?features=es6 - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js \u4ee3\u7801\u9ad8\u4eae Code blocks - Material for MkDocs markdown_extensions: - pymdownx.highlight # code hilight - pymdownx.superfences toc\uff08table of content\uff09 Setting up navigation - Material for MkDocs markdown_extensions: # \u8fd92\u4e2a\u90fd\u662f\u548c\u6bcf\u4e2amarkdown\u6587\u6863\u7684\u6807\u9898\u6709\u5173 - toc: permalink: true # \u5f00\u542f\u6bcf\u4e2a\u6807\u9898\u540e\u9762\u7684 \u951a\u94fe\u63a5 #toc_depth: 2 # toc\u663e\u793a\u7684\u7ea7\u6570,\u8d8a\u9ad8\u663e\u793a\u7684\u8d8a\u591a\uff0c\u4e0d\u5199\u90fd\u663e\u793a\uff0c0\u4e0d\u663e\u793a","title":"markdown\u6269\u5c55"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#_10","text":"Setting up site search - Material for MkDocs plugins: - search: lang: ja","title":"\u652f\u6301\u4e2d\u6587\u641c\u7d22"},{"location":"%E5%85%B6%E4%BB%96/Mkdocs/#_11","text":"1.\u4ecb\u7ecd - \u57fa\u4e8e Material for MkDocs \u642d\u5efa\u9759\u6001\u7f51\u9875 Material for MkDocs - Material forMkDocs Failed to connect to github.com port 443: Timed out_\u5929\u751f\u6211\u6750\u5fc5\u6709\u7528-CSDN\u535a\u5ba2","title":"\u53c2\u8003"},{"location":"%E5%89%8D%E7%AB%AF/CSS/","text":"CSS \u00b6 Cascading Style Sheets\uff1a\u5c42\u53e0\u6837\u5f0f\u8868 \u548c HTML \u4e00\u6837\u4e5f\u662f\u4e00\u79cd\u6807\u8bb0\u8bed\u8a00 \u4f5c\u7528\uff1a\u7f8e\u5316 HTML \u6587\u6863\uff0c\u5b9e\u73b0\u7ed3\u6784\uff08HTML\uff09\u4e0e\u6837\u5f0f\uff08CSS\uff09\u76f8\u5206\u79bb \u9009\u62e9\u5668\u5206\u7c7b\uff1a\u57fa\u7840\u9009\u62e9\u5668 \u548c \u590d\u5408\u9009\u62e9\u5668 \u57fa\u7840\u6982\u5ff5 \u00b6 CSS \u89c4\u5219\u7684\u6784\u6210\uff1a\u9009\u62e9\u5668(HTML\u6807\u7b7e) + \u4e00\u6761\u6216\u591a\u6761\u58f0\u660e \u4e00\u822c\u5199\u5728 \\(<head>\\) \u4e2d eg\uff1a < head > < style > /*style \u53ef\u4ee5\u5199\u5728\u4efb\u4f55\u5730\u65b9*/ p { color : red ; /*\u6bb5\u843d\u8bbe\u7f6e\u4e3a\u7ea2\u8272*/ font-size : 12 px ; /*\u5b57\u4f53\u5927\u5c0f12\u50cf\u7d20*/ } </ style > </ head > CSS\u5f15\u5165\u65b9\u5f0f \u00b6 \u884c\u5185\u5f0f\uff0c\u5728\u6807\u7b7e\u7684\u5c5e\u6027\u91cc\u76f4\u63a5\u6dfb\u52a0\u6837\u5f0f \\(<p\\ style=\"\\ color:red;\\ \">\\) \uff0c\u9002\u5408\u4fee\u6539\u7b80\u5355\u6837\u5f0f\uff0c\u6ca1\u6709\u4e0e\u7ed3\u6784\u5206\u79bb \u5d4c\u5165\u5f0f\uff0c\u5199\u5728 html \u9875\u9762\u5185\u90e8\uff0c\u5373 \\(<style></style>\\) \u4e2d\uff0c\u5e76\u6ca1\u6709\u5b8c\u5168\u4e0e\u7ed3\u6784\u5206\u79bb \u94fe\u63a5\u5f0f\uff0c\u5355\u72ec\u5199\u5728 CSS \u6587\u4ef6\u4e2d\uff0c\u9002\u7528\u4e8e\u6837\u5f0f\u6bd4\u8f83\u591a\u7684\u65f6\u5019\uff0c\u5b9e\u73b0\u4e86\u4e0e\u7ed3\u6784\u5206\u79bb /*.css\u6587\u4ef6\u4e2d*/ \u4e0d\u9700\u8981\u5199 < style ></ style > , \u53ea\u9700\u8981\u5199\u6837\u5f0f /*.html\u6587\u4ef6\u4e2d*/ < link rel = \"stylesheet\" href = \"css\u6587\u4ef6\u8def\u5f84\" > \u57fa\u7840\u9009\u62e9\u5668 \u00b6 \u57fa\u7840\u9009\u62e9\u5668\u7531\u5355\u4e2a\u9009\u62e9\u5668\u7ec4\u6210 \u6807\u7b7e\u9009\u62e9\u5668 \u00b6 \u6807\u7b7e\u540d\u4f5c\u4e3a\u9009\u62e9\u5668 \u6807\u7b7e\u540d { \u5c5e\u60271: \u5c5e\u6027\u503c1; ... } \u7c7b\u9009\u62e9\u5668 \u00b6 \u53ef\u4ee5\u5355\u72ec\u9009\u62e9\u4e00\u4e2a\u6216\u51e0\u4e2a\u6807\u7b7e\uff0c\u4e00\u4e2a\u6807\u7b7e\u4e5f\u53ef\u4ee5\u6709\u591a\u4e2a\u7c7b\u540d\uff0c\u7528 . \u6765\u5b9a\u4e49 .\u7c7b\u540d { \u5c5e\u60271: \u5c5e\u6027\u503c1; ... } < div class = \"\u7c7b\u540d\" > eg </ div > < div class = \"\u7c7b\u540d1 \u7c7b\u540d2\" > </ div > id\u9009\u62e9\u5668 \u00b6 \u4e3a\u6807\u6709\u7279\u5b9a id \u7684 HTML\u5143\u7d20 \u6307\u5b9a\u6837\u5f0f\uff0c\u7528 # \u6765\u5b9a\u4e49 \u4e0e\u7c7b\u9009\u62e9\u5668\u7684\u533a\u522b\u5728\u4e8e\uff0cid\u9009\u62e9\u5668\u53ea\u80fd\u8c03\u7528\u4e00\u6b21 #\u7c7b\u540d { \u5c5e\u60271: \u5c5e\u6027\u503c1; ... } \u901a\u914d\u7b26\u9009\u62e9\u5668 \u00b6 \u4e3a\u9875\u9762\u4e2d\u6240\u6709\u7684\u5143\u7d20\u6307\u5b9a\u6837\u5f0f\uff0c\u7528 * \u6765\u5b9a\u4e49 \u4e0d\u9700\u8981\u8c03\u7528 * { \u5c5e\u60271: \u5c5e\u6027\u503c1; ... } \u590d\u5408\u9009\u62e9\u5668 \u00b6 \u5e38\u7528\u5c5e\u6027\u603b\u7ed3 \u00b6 \u5b57\u4f53\u5c5e\u6027 \u00b6 \u5b57\u4f53\uff0c\u5927\u5c0f\uff0c\u7c97\u7ec6\uff0c\u6587\u672c\u6837\u5f0f \u5c5e\u6027 \u542b\u4e49 \u5c5e\u6027\u503c\u4e3e\u4f8b font-family \u5b57\u4f53 \"Microsoft YaHei\" font-size \u5927\u5c0f 20px\uff08\u4e0d\u4f1a\u5f71\u54cd\u6807\u9898\uff09 font-weight \u7c97\u7ec6 700\uff08\u52a0\u7c97:100\uff0c\u666e\u901a:100\uff09 font-style \u6587\u5b57\u6837\u5f0f normal\uff08\u659c\u4f53:italic\uff09 \u590d\u5408\u5c5e\u6027 /*font: font-style font-weight font-size/line-height font-family*/ /*\u4e0a\u9762\u7684\u987a\u5e8f\u4e0d\u80fd\u66f4\u6539*/ /*font-size \u548c font-famliy \u4e0d\u53ef\u4ee5\u7701\u7565*/ font: italic 700 16px 'Microsoft yahei'; \u6587\u672c\u5c5e\u6027 \u00b6 \u6587\u672c\u7684\u5916\u89c2\u5c5e\u6027 \u5c5e\u6027 \u542b\u4e49 \u5c5e\u6027\u503c\u4e3e\u4f8b color \u989c\u8272 red / #FF0000 text-align \u6c34\u5e73\u5bf9\u9f50 center / left / right text-decoration \u88c5\u9970\u6587\u672c none / underline / overline / line-through text-indent \u9996\u884c\u7f29\u8fdb 10px / 2em\uff082\u4e2a\u5f53\u524d\u6587\u5b57\u5927\u5c0f\uff09 ling-height \u884c\u95f4\u8ddd 26px \u88c5\u9970\u5c5e\u6027\u53d6 none \u5e38\u7528\u5728\u53d6\u6d88\u8d85\u94fe\u63a5\u7684\u4e0b\u5212\u7ebf \u5176\u4ed6 \u00b6 \u5c5e\u6027\u540d \u542b\u4e49 color \u989c\u8272 width / height \u9ad8\u5ea6 / \u5bbd\u5ea6 background-color \u80cc\u666f\u989c\u8272 margin padding \u7c7b\u540d\u89c4\u8303 \u00b6 \u7c7b\u540d\u542b\u4e49 \u7c7b\u540d \u9875\u5c3e / \u9875\u811a footer \u56fe\u7247 pic \u5de5\u5177 \u00b6 FSCaputer\uff1a\u6d4b\u884c\u9ad8\uff0c\u62fe\u8272\u5668 \u4e00\u4e9b\u5b9e\u4f8b \u00b6 \u56fe\u7247\u5c45\u4e2d\u5bf9\u9f50 \u00b6 .pic { text-align:center; } < div class = \"pic\" > < img src = \"...\" alt = \"...\" > </ div >","title":"CSS"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#css","text":"Cascading Style Sheets\uff1a\u5c42\u53e0\u6837\u5f0f\u8868 \u548c HTML \u4e00\u6837\u4e5f\u662f\u4e00\u79cd\u6807\u8bb0\u8bed\u8a00 \u4f5c\u7528\uff1a\u7f8e\u5316 HTML \u6587\u6863\uff0c\u5b9e\u73b0\u7ed3\u6784\uff08HTML\uff09\u4e0e\u6837\u5f0f\uff08CSS\uff09\u76f8\u5206\u79bb \u9009\u62e9\u5668\u5206\u7c7b\uff1a\u57fa\u7840\u9009\u62e9\u5668 \u548c \u590d\u5408\u9009\u62e9\u5668","title":"CSS"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_1","text":"CSS \u89c4\u5219\u7684\u6784\u6210\uff1a\u9009\u62e9\u5668(HTML\u6807\u7b7e) + \u4e00\u6761\u6216\u591a\u6761\u58f0\u660e \u4e00\u822c\u5199\u5728 \\(<head>\\) \u4e2d eg\uff1a < head > < style > /*style \u53ef\u4ee5\u5199\u5728\u4efb\u4f55\u5730\u65b9*/ p { color : red ; /*\u6bb5\u843d\u8bbe\u7f6e\u4e3a\u7ea2\u8272*/ font-size : 12 px ; /*\u5b57\u4f53\u5927\u5c0f12\u50cf\u7d20*/ } </ style > </ head >","title":"\u57fa\u7840\u6982\u5ff5"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#css_1","text":"\u884c\u5185\u5f0f\uff0c\u5728\u6807\u7b7e\u7684\u5c5e\u6027\u91cc\u76f4\u63a5\u6dfb\u52a0\u6837\u5f0f \\(<p\\ style=\"\\ color:red;\\ \">\\) \uff0c\u9002\u5408\u4fee\u6539\u7b80\u5355\u6837\u5f0f\uff0c\u6ca1\u6709\u4e0e\u7ed3\u6784\u5206\u79bb \u5d4c\u5165\u5f0f\uff0c\u5199\u5728 html \u9875\u9762\u5185\u90e8\uff0c\u5373 \\(<style></style>\\) \u4e2d\uff0c\u5e76\u6ca1\u6709\u5b8c\u5168\u4e0e\u7ed3\u6784\u5206\u79bb \u94fe\u63a5\u5f0f\uff0c\u5355\u72ec\u5199\u5728 CSS \u6587\u4ef6\u4e2d\uff0c\u9002\u7528\u4e8e\u6837\u5f0f\u6bd4\u8f83\u591a\u7684\u65f6\u5019\uff0c\u5b9e\u73b0\u4e86\u4e0e\u7ed3\u6784\u5206\u79bb /*.css\u6587\u4ef6\u4e2d*/ \u4e0d\u9700\u8981\u5199 < style ></ style > , \u53ea\u9700\u8981\u5199\u6837\u5f0f /*.html\u6587\u4ef6\u4e2d*/ < link rel = \"stylesheet\" href = \"css\u6587\u4ef6\u8def\u5f84\" >","title":"CSS\u5f15\u5165\u65b9\u5f0f"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_2","text":"\u57fa\u7840\u9009\u62e9\u5668\u7531\u5355\u4e2a\u9009\u62e9\u5668\u7ec4\u6210","title":"\u57fa\u7840\u9009\u62e9\u5668"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_3","text":"\u6807\u7b7e\u540d\u4f5c\u4e3a\u9009\u62e9\u5668 \u6807\u7b7e\u540d { \u5c5e\u60271: \u5c5e\u6027\u503c1; ... }","title":"\u6807\u7b7e\u9009\u62e9\u5668"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_4","text":"\u53ef\u4ee5\u5355\u72ec\u9009\u62e9\u4e00\u4e2a\u6216\u51e0\u4e2a\u6807\u7b7e\uff0c\u4e00\u4e2a\u6807\u7b7e\u4e5f\u53ef\u4ee5\u6709\u591a\u4e2a\u7c7b\u540d\uff0c\u7528 . \u6765\u5b9a\u4e49 .\u7c7b\u540d { \u5c5e\u60271: \u5c5e\u6027\u503c1; ... } < div class = \"\u7c7b\u540d\" > eg </ div > < div class = \"\u7c7b\u540d1 \u7c7b\u540d2\" > </ div >","title":"\u7c7b\u9009\u62e9\u5668"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#id","text":"\u4e3a\u6807\u6709\u7279\u5b9a id \u7684 HTML\u5143\u7d20 \u6307\u5b9a\u6837\u5f0f\uff0c\u7528 # \u6765\u5b9a\u4e49 \u4e0e\u7c7b\u9009\u62e9\u5668\u7684\u533a\u522b\u5728\u4e8e\uff0cid\u9009\u62e9\u5668\u53ea\u80fd\u8c03\u7528\u4e00\u6b21 #\u7c7b\u540d { \u5c5e\u60271: \u5c5e\u6027\u503c1; ... }","title":"id\u9009\u62e9\u5668"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_5","text":"\u4e3a\u9875\u9762\u4e2d\u6240\u6709\u7684\u5143\u7d20\u6307\u5b9a\u6837\u5f0f\uff0c\u7528 * \u6765\u5b9a\u4e49 \u4e0d\u9700\u8981\u8c03\u7528 * { \u5c5e\u60271: \u5c5e\u6027\u503c1; ... }","title":"\u901a\u914d\u7b26\u9009\u62e9\u5668"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_6","text":"","title":"\u590d\u5408\u9009\u62e9\u5668"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_7","text":"","title":"\u5e38\u7528\u5c5e\u6027\u603b\u7ed3"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_8","text":"\u5b57\u4f53\uff0c\u5927\u5c0f\uff0c\u7c97\u7ec6\uff0c\u6587\u672c\u6837\u5f0f \u5c5e\u6027 \u542b\u4e49 \u5c5e\u6027\u503c\u4e3e\u4f8b font-family \u5b57\u4f53 \"Microsoft YaHei\" font-size \u5927\u5c0f 20px\uff08\u4e0d\u4f1a\u5f71\u54cd\u6807\u9898\uff09 font-weight \u7c97\u7ec6 700\uff08\u52a0\u7c97:100\uff0c\u666e\u901a:100\uff09 font-style \u6587\u5b57\u6837\u5f0f normal\uff08\u659c\u4f53:italic\uff09 \u590d\u5408\u5c5e\u6027 /*font: font-style font-weight font-size/line-height font-family*/ /*\u4e0a\u9762\u7684\u987a\u5e8f\u4e0d\u80fd\u66f4\u6539*/ /*font-size \u548c font-famliy \u4e0d\u53ef\u4ee5\u7701\u7565*/ font: italic 700 16px 'Microsoft yahei';","title":"\u5b57\u4f53\u5c5e\u6027"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_9","text":"\u6587\u672c\u7684\u5916\u89c2\u5c5e\u6027 \u5c5e\u6027 \u542b\u4e49 \u5c5e\u6027\u503c\u4e3e\u4f8b color \u989c\u8272 red / #FF0000 text-align \u6c34\u5e73\u5bf9\u9f50 center / left / right text-decoration \u88c5\u9970\u6587\u672c none / underline / overline / line-through text-indent \u9996\u884c\u7f29\u8fdb 10px / 2em\uff082\u4e2a\u5f53\u524d\u6587\u5b57\u5927\u5c0f\uff09 ling-height \u884c\u95f4\u8ddd 26px \u88c5\u9970\u5c5e\u6027\u53d6 none \u5e38\u7528\u5728\u53d6\u6d88\u8d85\u94fe\u63a5\u7684\u4e0b\u5212\u7ebf","title":"\u6587\u672c\u5c5e\u6027"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_10","text":"\u5c5e\u6027\u540d \u542b\u4e49 color \u989c\u8272 width / height \u9ad8\u5ea6 / \u5bbd\u5ea6 background-color \u80cc\u666f\u989c\u8272 margin padding","title":"\u5176\u4ed6"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_11","text":"\u7c7b\u540d\u542b\u4e49 \u7c7b\u540d \u9875\u5c3e / \u9875\u811a footer \u56fe\u7247 pic","title":"\u7c7b\u540d\u89c4\u8303"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_12","text":"FSCaputer\uff1a\u6d4b\u884c\u9ad8\uff0c\u62fe\u8272\u5668","title":"\u5de5\u5177"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_13","text":"","title":"\u4e00\u4e9b\u5b9e\u4f8b"},{"location":"%E5%89%8D%E7%AB%AF/CSS/#_14","text":".pic { text-align:center; } < div class = \"pic\" > < img src = \"...\" alt = \"...\" > </ div >","title":"\u56fe\u7247\u5c45\u4e2d\u5bf9\u9f50"},{"location":"%E5%89%8D%E7%AB%AF/HTML/","text":"HTML \u00b6 \u57fa\u7840\u6982\u5ff5 \u00b6 HTML \u00b6 HTML \u662f\u4e00\u79cd\u8d85\u6587\u672c\u6807\u8bb0\u8bed\u8a00\uff08\u5373\u53ef\u4ee5\u52a0\u5165\u591a\u5a92\u4f53\u5185\u5bb9\uff0c\u8d85\u8d8a\u4e86\u6587\u672c\u9650\u5236\uff0c\u8fd8\u652f\u6301\u8d85\u94fe\u63a5\uff09 WEB\u6807\u51c6 \u00b6 \u6784\u6210\uff1a\u7ed3\u6784\uff08HTML\uff09\uff0c\u8868\u73b0\uff08CSS\uff09\uff0c\u884c\u4e3a\uff08JS\uff09 VSCODE\u63d2\u4ef6 \u00b6 \u63d2\u4ef6 \u4f5c\u7528 open in browser \u53f3\u952e\u5373\u53ef\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00 Auto Rename Tag \u81ea\u52a8\u8865\u5168\u53cc\u6807\u7b7e \u5728 html \u6587\u4ef6\u4e2d \uff01 + \u56de\u8f66\u53ef\u4ee5\u81ea\u52a8\u751f\u6210\u57fa\u672c\u7684\u7ed3\u6784\u6807\u7b7e \u5199\u4e86\u6807\u7b7e\u540d\u540e\u6309 TAB \u53ef\u4ee5\u81ea\u52a8\u8865\u5168 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > </ head > < body > </ body > </ html > \u6807\u7b7e \u00b6 \u57fa\u672c\u7ed3\u6784\u6807\u7b7e \u00b6 \u6807\u7b7e\u540d \u8bf4\u660e \\(<html></html>\\) \u6839\u6807\u7b7e \\(<head></head>\\) \u5934\u90e8\u6807\u7b7e \\(<title></title>\\) \u6807\u9898\u6807\u7b7e \\(<body></body>\\) \u4e3b\u4f53\u6807\u7b7e \\(<!DOCTYPE html>\\) \u58f0\u660ehtml\u7248\u672c \\(<html lang=\"zh-CN\">\\) \u58f0\u660e\u7f51\u9875\u8bed\u8a00 \\(<meta charset=\"UTF-8\">\\) \u58f0\u660e\u5b57\u7b26\u96c6\u4e3a\u4e07\u56fd\u7801 \u6807\u9898\u6807\u7b7e \u00b6 \u6700\u591a\u67096\u7ea7\u6807\u9898\u6807\u7b7e < h1 > \u4e00\u7ea7\u6807\u9898 </ h1 > < h2 > \u4e8c\u7ea7\u6807\u9898 </ h2 > < h3 > \u4e09\u7ea7\u6807\u9898 </ h3 > \u6bb5\u843d\u548c\u6362\u884c\u6807\u7b7e \u00b6 \u6807\u7b7e\u540d \u8bf4\u660e \\(<p></p>\\) \u6bb5\u843d\u6807\u7b7e\uff0cparagraph \\(<br>\\) \u6362\u884c\u6807\u7b7e\uff0cbreak \u6587\u672c\u683c\u5f0f\u5316\u6807\u7b7e \u00b6 \u6807\u7b7e\u540d \u8bf4\u660e \\(<strong></strong>\\) \u6216\u8005 \\(<b></b>\\) \u52a0\u7c97 \\(<em></em>\\) \u6216\u8005 \\(<i></i>\\) \u503e\u659c \\(<del></del>\\) \u6216\u8005 \\(<s></s>\\) \u5220\u9664\u7ebf \\(<ins></ins>\\) \u6216\u8005 \\(<u></u>\\) \u4e0b\u5212\u7ebf div \u548c span \u6807\u7b7e \u00b6 \u8fd92\u4e2a\u6807\u7b7e\u90fd\u662f\u5e03\u5c40\u7528 \u6807\u7b7e\u540d \u8bf4\u660e \\(<div></div>\\) \u5206\u533a\uff0c\u5360\u4e00\u884c\uff0cdivision \\(<span></span>\\) \u8de8\u8ddd\uff0c\u53ef\u4ee5\u591a\u4e2a\u5360\u4e00\u884c\uff0c \u56fe\u50cf\u6807\u7b7e \u00b6 < img src = \"\u8def\u5f84\u6216\u8005\u94fe\u63a5\" /> img \u6807\u7b7e\u4e2d\u53ef\u52a0\u7684\u5c5e\u6027 \u5c5e\u6027 \u8bf4\u660e src \u8def\u5f84\u6216\u94fe\u63a5\uff0csource alt \u663e\u793a\u5931\u8d25\u65f6\u7684\u66ff\u6362\u6587\u672c\uff0calternative title \u9f20\u6807\u653e\u5728\u56fe\u7247\u4e0a\u65f6\u7684\u8bf4\u660e\u6587\u5b57 width \u8bbe\u5b9a\u5bbd\u5ea6 height \u8bbe\u5b9a\u9ad8\u5ea6 border \u8bbe\u5b9a\u8fb9\u6846\u7c97\u7ec6 \u5bbd\u5ea6\u548c\u9ad8\u5ea6\u53ea\u8bbe\u5b9a\u4e00\u4e2a\u65f6\u7eb5\u6a2a\u6bd4\u662f\u56fa\u5b9a\u7684 \u8d85\u94fe\u63a5\u6807\u7b7e \u00b6 <!-- anchor --> <!-- target=\"_self\"\u65f6\u4e0d\u5f00\u65b0\u7a97\u53e3 \"_blank\"\u65f6\u5f00\u65b0\u7a97\u53e3 --> < a herf = \"\u8df3\u8f6c\u76ee\u6807\" target = \"\u7a97\u53e3\u5f39\u51fa\u65b9\u5f0f\" > \u6587\u672c\u6216\u56fe\u50cf\u6807\u7b7e </ a > <!-- herf \u662fhtml\u6587\u4ef6\u65f6\u662f\u5185\u90e8\u94fe\u63a5\uff0c\u662f\u7f51\u9875\u94fe\u63a5\u65f6\u662f\u5916\u90e8\u94fe\u63a5 --> <!-- herf = \"#\" \u8868\u793a \u7a7a\u94fe\u63a5--> <!-- herf = \"\u6587\u4ef6\u8def\u5f84\" \u65f6\u53ef\u4ee5\u5b9e\u73b0\u4e0b\u8f7d\u6587\u4ef6--> \u951a\u70b9\u94fe\u63a5 <!-- \u51fa\u53d1\u4f4d\u7f6e --> < a herf = \"#tag\" > \u6587\u672c\u6216\u56fe\u50cf\u6807\u7b7e </ a > <!-- \u76ee\u6807\u4f4d\u7f6e\u5728\u6807\u9898\u5904 --> < h2 id = \"tag\" > \u6807\u9898 </ h2 > \u6ce8\u91ca\u548c\u7279\u6b8a\u5b57\u7b26 \u00b6 <!-- \u8fd9\u662f\u6ce8\u91ca\u6807\u7b7e\uff0cvscode \u7528 Ctrl+/ --> \u7279\u6b8a\u5b57\u7b26\uff1a HTML \u7b26\u53f7\u5b9e\u4f53\u53c2\u8003\u624b\u518c | \u83dc\u9e1f\u6559\u7a0b \u5e38\u7528\uff1a | \u63cf\u8ff0 | \u4ee3\u7801 | | -------- | ----------- | | \u7a7a\u683c | &nbsp; | | \u5927\u4e8e | &gt; | | \u5c0f\u4e8e | &lt; | | \u4e0e\u53f7 | &amp; | | \u4e58\u6cd5 | &times; | | \u9664\u6cd5 | &divide; | | \u5e73\u65b9 | &sup2; | | \u7acb\u65b9 | &sup3; | \u8868\u683c\u6807\u7b7e \u00b6 < table > <!-- \u8868\u683c\u6839\u6807\u7b7e --> < tr > <!-- \u8868\u683c\u4e2d\u7684\u884c --> < td > \u5355\u5143\u683c\u5185\u7684\u6587\u5b57 </ td > <!-- \u6bcf\u884c\u4e2d\u6bcf\u683c\u7684\u5185\u5bb9 --> ... </ tr > ... </ table > <!-- \u8868\u5934\u5355\u5143\u683c\u6807\u7b7e\uff0c\u6307\u660e\u67d0\u4e00\u884c\u662f\u8868\u5934\uff0c\u548ctd\u540c\u7ea7\uff0c\u4f1a\u52a0\u7c97\u5e76\u5c45\u4e2d --> < th > ... </ th > \u8868\u683c\u5c5e\u6027 \u4e0d\u592a\u5e38\u7528\uff0c\u4f1a\u901a\u8fc7CSS\u8bbe\u7f6e \u5c5e\u6027\u540d \u5c5e\u6027\u503c \u63cf\u8ff0 align left / center / right \u76f8\u5bf9\u5468\u56f4\u5143\u7d20\u7684\u5bf9\u9f50\u65b9\u5f0f border 1 / \"\" \u662f\u5426\u6709\u8fb9\u6846\uff0c\"\"\u4e3a\u9ed8\u8ba4\uff0c\u8868\u793a\u6ca1\u6709 cellpadding \u50cf\u7d20\u503c \u8fb9\u6cbf\u4e0e\u5185\u5bb9\u4e4b\u95f4\u7684\u7a7a\u767d\uff0c\u9ed8\u8ba4\u4e3a1 cellspacing \u50cf\u7d20\u503c \u5355\u5143\u683c\u4e4b\u95f4\u7684\u7a7a\u767d\uff0c\u9ed8\u8ba42 width \u50cf\u7d20\u503c / \u767e\u5206\u6bd4 \u5bbd\u5ea6 height \u50cf\u7d20\u503c / \u767e\u5206\u6bd4 \u9ad8\u5ea6 \u8868\u683c\u7ed3\u6784\u6807\u7b7e < table > < thead ></ thead > <!-- \u5934\u90e8\u6807\u7b7e --> < tbody ></ tbody > <!-- \u4e3b\u4f53\u6807\u7b7e --> </ table > \u5408\u5e76\u5355\u5143\u683c\uff08td\u7684\u5c5e\u6027\uff09 \u8de8\u884c\u5408\u5e76\uff1arowspan=\"\u5408\u5e76\u5355\u5143\u683c\u7684\u4e2a\u6570\"\uff0c\u6700\u4e0a\u4fa7\u5355\u5143\u683c\u4e3a\u76ee\u6807\u5355\u5143\u683c \u8de8\u5217\u5408\u5e76\uff1acolspan=\"\u5408\u5e76\u5355\u5143\u683c\u7684\u4e2a\u6570\"\uff0c\u6700\u5de6\u4fa7\u5355\u5143\u683c\u4e3a\u76ee\u6807\u5355\u5143\u683c \u5217\u8868\u6807\u7b7e \u00b6 \u5206\u7c7b\uff1a\u65e0\u5e8f\u5217\u8868\uff0c\u6709\u5e8f\u5217\u8868\uff0c\u81ea\u5b9a\u4e49\u5217\u8868 \u5217\u8868\u81ea\u5e26\u7684\u6837\u5f0f\u5c5e\u6027\u53ef\u4ee5\u901a\u8fc7CSS\u4fee\u6539 \u65e0\u5e8f\u5217\u8868 < ul > <!-- ul\u4e2d\u53ea\u80fd\u653eli\u6807\u7b7e\uff0c\u4f46li\u4e2d\u53ef\u4ee5\u653e\u4efb\u4f55\u6807\u7b7e --> < li > \u5217\u8868\u98791 </ li > < li > \u5217\u8868\u98792 </ li > < li > \u5217\u8868\u98793 </ li > ... </ ul > \u6709\u5e8f\u5217\u8868 < ol > <!-- ol\u4e2d\u53ea\u80fd\u653eli\u6807\u7b7e\uff0c\u4f46li\u4e2d\u53ef\u4ee5\u653e\u4efb\u4f55\u6807\u7b7e --> < li > \u5217\u8868\u98791 </ li > < li > \u5217\u8868\u98792 </ li > < li > \u5217\u8868\u98793 </ li > ... </ ol > \u81ea\u5b9a\u4e49\u5217\u8868 < dl > <!-- dl\u4e2d\u53ea\u80fd\u653edt/dd\u6807\u7b7e\uff0c\u4f46dt/dd\u4e2d\u53ef\u4ee5\u653e\u4efb\u4f55\u6807\u7b7e --> < dt > \u540d\u8bcd1 </ dt > < dd > \u540d\u8bcd1\u89e3\u91ca1 </ dd > < dd > \u540d\u8bcd1\u89e3\u91ca2 </ dd > </ dl > \u8868\u5355\u6807\u7b7e \u00b6 \u8868\u5355\u7528\u4e8e\u6536\u96c6\u7528\u6237\u4fe1\u606f \u8868\u5355\u7531 \u8868\u5355\u57df\uff0c\u8868\u5355\u63a7\u4ef6(\u8868\u5355\u5143\u7d20)\uff0c\u63d0\u793a\u4fe1\u606f \u6784\u6210 < form > </ form > \u5c5e\u6027 \u5c5e\u6027\u503c \u4f5c\u7528 action url\u5730\u5740 \u6307\u5b9a\u63a5\u53d7\u5e76\u5904\u7406\u8868\u8fbe\u90a3\u6570\u636e\u7684\u670d\u52a1\u5668\u7a0b\u5e8f\u7684url\u5730\u5740 method get/post \u8bbe\u7f6e\u8868\u5355\u6570\u636e\u7684\u63d0\u4ea4\u65b9\u5f0f name \u540d\u79f0 \u8bbe\u7f6e\u8868\u5355\u540d\u79f0 input \u8f93\u5165\u8868\u5355\u5143\u7d20 \u00b6 < input type = \"\" /> <!-- type\u6307\u5b9a\u4e0d\u540c\u7684\u63a7\u4ef6\u7c7b\u578b --> <!-- eg --> <!-- \u5355\u9009\u5c5e\u6027\u5fc5\u987b\u6709\u76f8\u540c\u7684name\u503c --> \u6027\u522b\uff1a\u7537 < input type = \"radio\" name = \"sex\" > \u5973 < input type = \"radio\" name = \"sex\" > type\u5c5e\u6027\u503c \u63cf\u8ff0 button \u70b9\u51fb\u6309\u94ae\uff08\u591a\u6570\u60c5\u51b5\u4e0b\u901a\u8fc7JS\u542f\u52a8\u811a\u672c\uff09 checkbox \u590d\u9009\u6846 file \u8f93\u5165\u5b57\u6bb5\u548c\"\u6d4f\u89c8\"\u6309\u94ae\uff0c\u4f9b\u6587\u4ef6\u4e0a\u4f20 hidden \u9690\u85cf\u7684\u8f93\u5165\u5b57\u6bb5 image \u56fe\u50cf\u5f62\u5f0f\u7684\u63d0\u4ea4\u6309\u94ae password \u5bc6\u7801\u5b57\u6bb5\uff0c\u6697\u6587\u8f93\u5165 radio \u5355\u9009\u6309\u94ae reset \u91cd\u7f6e\u6309\u94ae submit \u63d0\u4ea4\u6309\u94ae text \u8f93\u5165\u5b57\u6bb5\uff0c\u5bbd\u5ea6\u9ed8\u8ba4\u4e3a20\u5b57\u7b26 input\u5176\u4ed6\u5c5e\u6027 \u5c5e\u6027\u503c \u63cf\u8ff0 name \u81ea\u5b9a\u4e49 \u540d\u79f0 value \u81ea\u5b9a\u4e49 input\u7684\u5143\u7d20\u503c checked checked \u89c4\u5b9a\u6b64input\u5143\u7d20\u9996\u6b21\u52a0\u8f7d\u65f6\u5e94\u5f53\u88ab\u9009\u4e2d maxlength \u6b63\u6574\u6570 \u8f93\u5165\u5b57\u6bb5\u5b57\u7b26\u7684\u6700\u5927\u957f\u5ea6 label \u6807\u7b7e \u00b6 \u7ed1\u5b9a\u4e00\u4e2a\u8868\u5355\u5143\u7d20\uff0c\u5f53\u7528\u6237\u70b9\u51fb label \u6807\u7b7e\u5185\u7684\u6587\u672c\u65f6\uff0c\u4f1a\u81ea\u52a8\u5bf9\u5e94\u5230\u5bf9\u5e94\u7684\u8868\u5355\u5143\u7d20\u4e0a < label for = \"sex\" > \u7537 </ label > < input type = \"radio\" name = \"sex\" id = \"sex\" /> <!-- for \u4e0e id \u7684\u5c5e\u6027\u503c\u8981\u76f8\u540c --> select \u4e0b\u62c9\u8868\u5355\u5143\u7d20 \u00b6 select \u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a option\uff0coption < select > < option > \u9009\u98791 </ option > < option > \u9009\u98792 </ option > <!-- selected \u8868\u793a\u9ed8\u8ba4\u9009\u4e2d\u9879 --> < option selected = \"selected\" > \u9009\u98793 </ option > ... </ select > textarea \u6587\u672c\u57df\u5143\u7d20 \u00b6 \u7528\u4e8e\u8f93\u5165\u591a\u884c\u7684\u6587\u672c\u8f93\u5165\u7684\u63a7\u4ef6 <!-- \u5b9e\u9645\u5f00\u53d1\u4e2d\u90fd\u662f\u7528CSS\u6765\u6539\u53d8\u5927\u5c0f --> < textraea rows = \"3\" cols = \"20\" > \u6587\u672c\u5185\u5bb9 </ textraea > \u5176\u4ed6\u6807\u7b7e \u00b6 button \u00b6 < button > \u641c\u7d22 </ button > /*\u7b49\u6548\u4e8e < input type = \"button\" value = \"\u641c\u7d22\" > */ \u53c2\u8003 \u00b6 \u9ed1\u9a6c\u7a0b\u5e8f\u5458pink\u8001\u5e08\u524d\u7aef\u5165\u95e8\u6559\u7a0b\uff0c\u96f6\u57fa\u7840\u5fc5\u770b\u7684h5(html5)+css3+\u79fb\u52a8\u7aef\u524d\u7aef\u89c6\u9891\u6559\u7a0b_\u54d4\u54e9\u54d4\u54e9_bilibili","title":"HTML"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#html","text":"","title":"HTML"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_1","text":"","title":"\u57fa\u7840\u6982\u5ff5"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#html_1","text":"HTML \u662f\u4e00\u79cd\u8d85\u6587\u672c\u6807\u8bb0\u8bed\u8a00\uff08\u5373\u53ef\u4ee5\u52a0\u5165\u591a\u5a92\u4f53\u5185\u5bb9\uff0c\u8d85\u8d8a\u4e86\u6587\u672c\u9650\u5236\uff0c\u8fd8\u652f\u6301\u8d85\u94fe\u63a5\uff09","title":"HTML"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#web","text":"\u6784\u6210\uff1a\u7ed3\u6784\uff08HTML\uff09\uff0c\u8868\u73b0\uff08CSS\uff09\uff0c\u884c\u4e3a\uff08JS\uff09","title":"WEB\u6807\u51c6"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#vscode","text":"\u63d2\u4ef6 \u4f5c\u7528 open in browser \u53f3\u952e\u5373\u53ef\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00 Auto Rename Tag \u81ea\u52a8\u8865\u5168\u53cc\u6807\u7b7e \u5728 html \u6587\u4ef6\u4e2d \uff01 + \u56de\u8f66\u53ef\u4ee5\u81ea\u52a8\u751f\u6210\u57fa\u672c\u7684\u7ed3\u6784\u6807\u7b7e \u5199\u4e86\u6807\u7b7e\u540d\u540e\u6309 TAB \u53ef\u4ee5\u81ea\u52a8\u8865\u5168 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > </ head > < body > </ body > </ html >","title":"VSCODE\u63d2\u4ef6"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_2","text":"","title":"\u6807\u7b7e"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_3","text":"\u6807\u7b7e\u540d \u8bf4\u660e \\(<html></html>\\) \u6839\u6807\u7b7e \\(<head></head>\\) \u5934\u90e8\u6807\u7b7e \\(<title></title>\\) \u6807\u9898\u6807\u7b7e \\(<body></body>\\) \u4e3b\u4f53\u6807\u7b7e \\(<!DOCTYPE html>\\) \u58f0\u660ehtml\u7248\u672c \\(<html lang=\"zh-CN\">\\) \u58f0\u660e\u7f51\u9875\u8bed\u8a00 \\(<meta charset=\"UTF-8\">\\) \u58f0\u660e\u5b57\u7b26\u96c6\u4e3a\u4e07\u56fd\u7801","title":"\u57fa\u672c\u7ed3\u6784\u6807\u7b7e"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_4","text":"\u6700\u591a\u67096\u7ea7\u6807\u9898\u6807\u7b7e < h1 > \u4e00\u7ea7\u6807\u9898 </ h1 > < h2 > \u4e8c\u7ea7\u6807\u9898 </ h2 > < h3 > \u4e09\u7ea7\u6807\u9898 </ h3 >","title":"\u6807\u9898\u6807\u7b7e"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_5","text":"\u6807\u7b7e\u540d \u8bf4\u660e \\(<p></p>\\) \u6bb5\u843d\u6807\u7b7e\uff0cparagraph \\(<br>\\) \u6362\u884c\u6807\u7b7e\uff0cbreak","title":"\u6bb5\u843d\u548c\u6362\u884c\u6807\u7b7e"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_6","text":"\u6807\u7b7e\u540d \u8bf4\u660e \\(<strong></strong>\\) \u6216\u8005 \\(<b></b>\\) \u52a0\u7c97 \\(<em></em>\\) \u6216\u8005 \\(<i></i>\\) \u503e\u659c \\(<del></del>\\) \u6216\u8005 \\(<s></s>\\) \u5220\u9664\u7ebf \\(<ins></ins>\\) \u6216\u8005 \\(<u></u>\\) \u4e0b\u5212\u7ebf","title":"\u6587\u672c\u683c\u5f0f\u5316\u6807\u7b7e"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#div-span","text":"\u8fd92\u4e2a\u6807\u7b7e\u90fd\u662f\u5e03\u5c40\u7528 \u6807\u7b7e\u540d \u8bf4\u660e \\(<div></div>\\) \u5206\u533a\uff0c\u5360\u4e00\u884c\uff0cdivision \\(<span></span>\\) \u8de8\u8ddd\uff0c\u53ef\u4ee5\u591a\u4e2a\u5360\u4e00\u884c\uff0c","title":"div \u548c span \u6807\u7b7e"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_7","text":"< img src = \"\u8def\u5f84\u6216\u8005\u94fe\u63a5\" /> img \u6807\u7b7e\u4e2d\u53ef\u52a0\u7684\u5c5e\u6027 \u5c5e\u6027 \u8bf4\u660e src \u8def\u5f84\u6216\u94fe\u63a5\uff0csource alt \u663e\u793a\u5931\u8d25\u65f6\u7684\u66ff\u6362\u6587\u672c\uff0calternative title \u9f20\u6807\u653e\u5728\u56fe\u7247\u4e0a\u65f6\u7684\u8bf4\u660e\u6587\u5b57 width \u8bbe\u5b9a\u5bbd\u5ea6 height \u8bbe\u5b9a\u9ad8\u5ea6 border \u8bbe\u5b9a\u8fb9\u6846\u7c97\u7ec6 \u5bbd\u5ea6\u548c\u9ad8\u5ea6\u53ea\u8bbe\u5b9a\u4e00\u4e2a\u65f6\u7eb5\u6a2a\u6bd4\u662f\u56fa\u5b9a\u7684","title":"\u56fe\u50cf\u6807\u7b7e"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_8","text":"<!-- anchor --> <!-- target=\"_self\"\u65f6\u4e0d\u5f00\u65b0\u7a97\u53e3 \"_blank\"\u65f6\u5f00\u65b0\u7a97\u53e3 --> < a herf = \"\u8df3\u8f6c\u76ee\u6807\" target = \"\u7a97\u53e3\u5f39\u51fa\u65b9\u5f0f\" > \u6587\u672c\u6216\u56fe\u50cf\u6807\u7b7e </ a > <!-- herf \u662fhtml\u6587\u4ef6\u65f6\u662f\u5185\u90e8\u94fe\u63a5\uff0c\u662f\u7f51\u9875\u94fe\u63a5\u65f6\u662f\u5916\u90e8\u94fe\u63a5 --> <!-- herf = \"#\" \u8868\u793a \u7a7a\u94fe\u63a5--> <!-- herf = \"\u6587\u4ef6\u8def\u5f84\" \u65f6\u53ef\u4ee5\u5b9e\u73b0\u4e0b\u8f7d\u6587\u4ef6--> \u951a\u70b9\u94fe\u63a5 <!-- \u51fa\u53d1\u4f4d\u7f6e --> < a herf = \"#tag\" > \u6587\u672c\u6216\u56fe\u50cf\u6807\u7b7e </ a > <!-- \u76ee\u6807\u4f4d\u7f6e\u5728\u6807\u9898\u5904 --> < h2 id = \"tag\" > \u6807\u9898 </ h2 >","title":"\u8d85\u94fe\u63a5\u6807\u7b7e"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_9","text":"<!-- \u8fd9\u662f\u6ce8\u91ca\u6807\u7b7e\uff0cvscode \u7528 Ctrl+/ --> \u7279\u6b8a\u5b57\u7b26\uff1a HTML \u7b26\u53f7\u5b9e\u4f53\u53c2\u8003\u624b\u518c | \u83dc\u9e1f\u6559\u7a0b \u5e38\u7528\uff1a | \u63cf\u8ff0 | \u4ee3\u7801 | | -------- | ----------- | | \u7a7a\u683c | &nbsp; | | \u5927\u4e8e | &gt; | | \u5c0f\u4e8e | &lt; | | \u4e0e\u53f7 | &amp; | | \u4e58\u6cd5 | &times; | | \u9664\u6cd5 | &divide; | | \u5e73\u65b9 | &sup2; | | \u7acb\u65b9 | &sup3; |","title":"\u6ce8\u91ca\u548c\u7279\u6b8a\u5b57\u7b26"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_10","text":"< table > <!-- \u8868\u683c\u6839\u6807\u7b7e --> < tr > <!-- \u8868\u683c\u4e2d\u7684\u884c --> < td > \u5355\u5143\u683c\u5185\u7684\u6587\u5b57 </ td > <!-- \u6bcf\u884c\u4e2d\u6bcf\u683c\u7684\u5185\u5bb9 --> ... </ tr > ... </ table > <!-- \u8868\u5934\u5355\u5143\u683c\u6807\u7b7e\uff0c\u6307\u660e\u67d0\u4e00\u884c\u662f\u8868\u5934\uff0c\u548ctd\u540c\u7ea7\uff0c\u4f1a\u52a0\u7c97\u5e76\u5c45\u4e2d --> < th > ... </ th > \u8868\u683c\u5c5e\u6027 \u4e0d\u592a\u5e38\u7528\uff0c\u4f1a\u901a\u8fc7CSS\u8bbe\u7f6e \u5c5e\u6027\u540d \u5c5e\u6027\u503c \u63cf\u8ff0 align left / center / right \u76f8\u5bf9\u5468\u56f4\u5143\u7d20\u7684\u5bf9\u9f50\u65b9\u5f0f border 1 / \"\" \u662f\u5426\u6709\u8fb9\u6846\uff0c\"\"\u4e3a\u9ed8\u8ba4\uff0c\u8868\u793a\u6ca1\u6709 cellpadding \u50cf\u7d20\u503c \u8fb9\u6cbf\u4e0e\u5185\u5bb9\u4e4b\u95f4\u7684\u7a7a\u767d\uff0c\u9ed8\u8ba4\u4e3a1 cellspacing \u50cf\u7d20\u503c \u5355\u5143\u683c\u4e4b\u95f4\u7684\u7a7a\u767d\uff0c\u9ed8\u8ba42 width \u50cf\u7d20\u503c / \u767e\u5206\u6bd4 \u5bbd\u5ea6 height \u50cf\u7d20\u503c / \u767e\u5206\u6bd4 \u9ad8\u5ea6 \u8868\u683c\u7ed3\u6784\u6807\u7b7e < table > < thead ></ thead > <!-- \u5934\u90e8\u6807\u7b7e --> < tbody ></ tbody > <!-- \u4e3b\u4f53\u6807\u7b7e --> </ table > \u5408\u5e76\u5355\u5143\u683c\uff08td\u7684\u5c5e\u6027\uff09 \u8de8\u884c\u5408\u5e76\uff1arowspan=\"\u5408\u5e76\u5355\u5143\u683c\u7684\u4e2a\u6570\"\uff0c\u6700\u4e0a\u4fa7\u5355\u5143\u683c\u4e3a\u76ee\u6807\u5355\u5143\u683c \u8de8\u5217\u5408\u5e76\uff1acolspan=\"\u5408\u5e76\u5355\u5143\u683c\u7684\u4e2a\u6570\"\uff0c\u6700\u5de6\u4fa7\u5355\u5143\u683c\u4e3a\u76ee\u6807\u5355\u5143\u683c","title":"\u8868\u683c\u6807\u7b7e"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_11","text":"\u5206\u7c7b\uff1a\u65e0\u5e8f\u5217\u8868\uff0c\u6709\u5e8f\u5217\u8868\uff0c\u81ea\u5b9a\u4e49\u5217\u8868 \u5217\u8868\u81ea\u5e26\u7684\u6837\u5f0f\u5c5e\u6027\u53ef\u4ee5\u901a\u8fc7CSS\u4fee\u6539 \u65e0\u5e8f\u5217\u8868 < ul > <!-- ul\u4e2d\u53ea\u80fd\u653eli\u6807\u7b7e\uff0c\u4f46li\u4e2d\u53ef\u4ee5\u653e\u4efb\u4f55\u6807\u7b7e --> < li > \u5217\u8868\u98791 </ li > < li > \u5217\u8868\u98792 </ li > < li > \u5217\u8868\u98793 </ li > ... </ ul > \u6709\u5e8f\u5217\u8868 < ol > <!-- ol\u4e2d\u53ea\u80fd\u653eli\u6807\u7b7e\uff0c\u4f46li\u4e2d\u53ef\u4ee5\u653e\u4efb\u4f55\u6807\u7b7e --> < li > \u5217\u8868\u98791 </ li > < li > \u5217\u8868\u98792 </ li > < li > \u5217\u8868\u98793 </ li > ... </ ol > \u81ea\u5b9a\u4e49\u5217\u8868 < dl > <!-- dl\u4e2d\u53ea\u80fd\u653edt/dd\u6807\u7b7e\uff0c\u4f46dt/dd\u4e2d\u53ef\u4ee5\u653e\u4efb\u4f55\u6807\u7b7e --> < dt > \u540d\u8bcd1 </ dt > < dd > \u540d\u8bcd1\u89e3\u91ca1 </ dd > < dd > \u540d\u8bcd1\u89e3\u91ca2 </ dd > </ dl >","title":"\u5217\u8868\u6807\u7b7e"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_12","text":"\u8868\u5355\u7528\u4e8e\u6536\u96c6\u7528\u6237\u4fe1\u606f \u8868\u5355\u7531 \u8868\u5355\u57df\uff0c\u8868\u5355\u63a7\u4ef6(\u8868\u5355\u5143\u7d20)\uff0c\u63d0\u793a\u4fe1\u606f \u6784\u6210 < form > </ form > \u5c5e\u6027 \u5c5e\u6027\u503c \u4f5c\u7528 action url\u5730\u5740 \u6307\u5b9a\u63a5\u53d7\u5e76\u5904\u7406\u8868\u8fbe\u90a3\u6570\u636e\u7684\u670d\u52a1\u5668\u7a0b\u5e8f\u7684url\u5730\u5740 method get/post \u8bbe\u7f6e\u8868\u5355\u6570\u636e\u7684\u63d0\u4ea4\u65b9\u5f0f name \u540d\u79f0 \u8bbe\u7f6e\u8868\u5355\u540d\u79f0","title":"\u8868\u5355\u6807\u7b7e"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#input","text":"< input type = \"\" /> <!-- type\u6307\u5b9a\u4e0d\u540c\u7684\u63a7\u4ef6\u7c7b\u578b --> <!-- eg --> <!-- \u5355\u9009\u5c5e\u6027\u5fc5\u987b\u6709\u76f8\u540c\u7684name\u503c --> \u6027\u522b\uff1a\u7537 < input type = \"radio\" name = \"sex\" > \u5973 < input type = \"radio\" name = \"sex\" > type\u5c5e\u6027\u503c \u63cf\u8ff0 button \u70b9\u51fb\u6309\u94ae\uff08\u591a\u6570\u60c5\u51b5\u4e0b\u901a\u8fc7JS\u542f\u52a8\u811a\u672c\uff09 checkbox \u590d\u9009\u6846 file \u8f93\u5165\u5b57\u6bb5\u548c\"\u6d4f\u89c8\"\u6309\u94ae\uff0c\u4f9b\u6587\u4ef6\u4e0a\u4f20 hidden \u9690\u85cf\u7684\u8f93\u5165\u5b57\u6bb5 image \u56fe\u50cf\u5f62\u5f0f\u7684\u63d0\u4ea4\u6309\u94ae password \u5bc6\u7801\u5b57\u6bb5\uff0c\u6697\u6587\u8f93\u5165 radio \u5355\u9009\u6309\u94ae reset \u91cd\u7f6e\u6309\u94ae submit \u63d0\u4ea4\u6309\u94ae text \u8f93\u5165\u5b57\u6bb5\uff0c\u5bbd\u5ea6\u9ed8\u8ba4\u4e3a20\u5b57\u7b26 input\u5176\u4ed6\u5c5e\u6027 \u5c5e\u6027\u503c \u63cf\u8ff0 name \u81ea\u5b9a\u4e49 \u540d\u79f0 value \u81ea\u5b9a\u4e49 input\u7684\u5143\u7d20\u503c checked checked \u89c4\u5b9a\u6b64input\u5143\u7d20\u9996\u6b21\u52a0\u8f7d\u65f6\u5e94\u5f53\u88ab\u9009\u4e2d maxlength \u6b63\u6574\u6570 \u8f93\u5165\u5b57\u6bb5\u5b57\u7b26\u7684\u6700\u5927\u957f\u5ea6","title":"input \u8f93\u5165\u8868\u5355\u5143\u7d20"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#label","text":"\u7ed1\u5b9a\u4e00\u4e2a\u8868\u5355\u5143\u7d20\uff0c\u5f53\u7528\u6237\u70b9\u51fb label \u6807\u7b7e\u5185\u7684\u6587\u672c\u65f6\uff0c\u4f1a\u81ea\u52a8\u5bf9\u5e94\u5230\u5bf9\u5e94\u7684\u8868\u5355\u5143\u7d20\u4e0a < label for = \"sex\" > \u7537 </ label > < input type = \"radio\" name = \"sex\" id = \"sex\" /> <!-- for \u4e0e id \u7684\u5c5e\u6027\u503c\u8981\u76f8\u540c -->","title":"label \u6807\u7b7e"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#select","text":"select \u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a option\uff0coption < select > < option > \u9009\u98791 </ option > < option > \u9009\u98792 </ option > <!-- selected \u8868\u793a\u9ed8\u8ba4\u9009\u4e2d\u9879 --> < option selected = \"selected\" > \u9009\u98793 </ option > ... </ select >","title":"select \u4e0b\u62c9\u8868\u5355\u5143\u7d20"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#textarea","text":"\u7528\u4e8e\u8f93\u5165\u591a\u884c\u7684\u6587\u672c\u8f93\u5165\u7684\u63a7\u4ef6 <!-- \u5b9e\u9645\u5f00\u53d1\u4e2d\u90fd\u662f\u7528CSS\u6765\u6539\u53d8\u5927\u5c0f --> < textraea rows = \"3\" cols = \"20\" > \u6587\u672c\u5185\u5bb9 </ textraea >","title":"textarea \u6587\u672c\u57df\u5143\u7d20"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_13","text":"","title":"\u5176\u4ed6\u6807\u7b7e"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#button","text":"< button > \u641c\u7d22 </ button > /*\u7b49\u6548\u4e8e < input type = \"button\" value = \"\u641c\u7d22\" > */","title":"button"},{"location":"%E5%89%8D%E7%AB%AF/HTML/#_14","text":"\u9ed1\u9a6c\u7a0b\u5e8f\u5458pink\u8001\u5e08\u524d\u7aef\u5165\u95e8\u6559\u7a0b\uff0c\u96f6\u57fa\u7840\u5fc5\u770b\u7684h5(html5)+css3+\u79fb\u52a8\u7aef\u524d\u7aef\u89c6\u9891\u6559\u7a0b_\u54d4\u54e9\u54d4\u54e9_bilibili","title":"\u53c2\u8003"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/","text":"\u6570\u636e\u5e93\u7cfb\u7edf \u00b6 \u7b2c\u4e00\u7ae0 \u6570\u636e\u5e93\u6982\u89c8 \u00b6 \u6570\u636e\u5e93\u53d1\u5c55\u4e09\u9636\u6bb5 \u00b6 \u4eba\u5de5\u7ba1\u7406\u9636\u6bb5\uff1a\u4e0d\u80fd\u957f\u671f\u4fdd\u5b58\uff0c\u4e0d\u5177\u6709\u72ec\u7acb\u6027\uff0c\u4e0d\u5171\u4eab \u6587\u4ef6\u7cfb\u7edf\u9636\u6bb5\uff1a\u957f\u671f\u4fdd\u5b58\uff0c\u72ec\u7acb\u6027\u5dee\uff0c\u5171\u4eab\u6027\u5dee\uff0c\u5197\u4f59\u5ea6\u5927\uff0c \u6570\u636e\u5e93\u7cfb\u7edf\u9636\u6bb5\uff1a\u7279\u70b9\uff1a1.\u6570\u636e\u7ed3\u6784\u5316 2.\u5171\u4eab\u6027\u9ad8\uff0c\u5197\u4f59\u5ea6\u4f4e\uff0c\u6613\u4e8e\u6269\u5145 3.\u6570\u636e\u72ec\u7acb\u6027\u9ad8 4.\u6570\u636e\u7edf\u4e00\u7ba1\u7406\u4e0e\u63a7\u5236 \u6570\u636e\u5e93\u7cfb\u7edf\u7ec4\u6210 \u00b6 \u6570\u636e\u5e93 \u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\uff08DBMS\uff09 \u6570\u636e\u5e93\u7684\u5e94\u7528\u7a0b\u5e8f \u6570\u636e\u5e93\u7cfb\u7edf\u7684\u4eba\u5458\uff1a\u7ba1\u7406\u5458\uff08DBA\uff09 ... \u4e09\u7ea7\u6a21\u5f0f\u4e0e\u4e8c\u7ea7\u6620\u50cf \u00b6 \u4e09\u7ea7\u6a21\u5f0f\uff1a\u5916\u6a21\u5f0f\uff0c\u6a21\u5f0f\uff0c\u5185\u6a21\u5f0f \u6a21\u5f0f\uff1a\u4e5f\u79f0\u903b\u8f91\u6a21\u5f0f\uff0c\u4e00\u4e2a\u6570\u636e\u5e93\u53ea\u6709\u4e00\u4e2a\u6a21\u5f0f\uff0c\u662f\u6570\u636e\u5e93\u5168\u4f53\u6570\u636e\u7684\u903b\u8f91\u7ed3\u6784\u548c\u7279\u5f81\u7684\u63cf\u8ff0 \u5916\u6a21\u5f0f\uff1a\u4e5f\u79f0\u5b50\u6a21\u5f0f\u6216\u7528\u6237\u6a21\u5f0f\uff0c\u662f\u6a21\u5f0f\u7684\u5b50\u96c6\uff0c\u4e00\u4e2a\u6570\u636e\u5e93\u53ef\u4ee5\u6709\u591a\u4e2a\u5916\u6a21\u5f0f \u5185\u6a21\u5f0f\uff1a\u4e5f\u79f0\u5b58\u50a8\u6a21\u5f0f\uff0c\u53ea\u6709\u4e00\u4e2a\u5185\u6a21\u5f0f\uff0c\u662f\u6570\u636e\u7269\u7406\u7ed3\u6784\u548c\u5b58\u50a8\u65b9\u5f0f\u7684\u63cf\u8ff0 \u4e8c\u7ea7\u6620\u50cf\uff1a \u5916\u6a21\u5f0f/\u6a21\u5f0f\u6620\u50cf\uff1a\u6a21\u5f0f\u6539\u53d8\u65f6\uff0c\u5bf9\u6620\u50cf\u505a\u51fa\u76f8\u5e94\u7684\u6539\u53d8\u53ef\u4ee5\u4f7f\u5916\u6a21\u5f0f\u4fdd\u6301\u4e0d\u53d8\uff0c\u4fdd\u8bc1\u6570\u636e\u548c\u7a0b\u5e8f\u7684\u903b\u8f91\u72ec\u7acb\u6027 \u6a21\u5f0f/\u5185\u6a21\u5f0f\u6620\u50cf\uff1a\u5185\u6a21\u5f0f\u6539\u53d8\u65f6\uff0c\u5bf9\u6620\u50cf\u505a\u51fa\u76f8\u5e94\u7684\u6539\u53d8\u53ef\u4ee5\u4f7f\u6a21\u5f0f\u4fdd\u6301\u4e0d\u53d8\uff0c\u4fdd\u8bc1\u6570\u636e\u7684\u7269\u7406\u72ec\u7acb\u6027 \u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf \u00b6 \u529f\u80fd\uff1a\u6570\u636e\u5b9a\u4e49\uff0c\u6570\u636e\u64cd\u7eb5\uff0c\u6570\u636e\u5e93\u7684\u4e8b\u52a1\u7ba1\u7406\u548c\u8fd0\u884c\u7ba1\u7406\uff0c\u6570\u636e\u5e93\u7684\u521b\u5efa\u548c\u7ef4\u62a4 \u6570\u636e\u6a21\u578b \u00b6 \u5206\u7c7b\uff1a\u6982\u5ff5\u6570\u636e\u6a21\u578b\uff0c\u903b\u8f91\u6570\u636e\u6a21\u578b\uff0c\u7269\u7406\u6570\u636e\u6a21\u578b \u6982\u5ff5\u6570\u636e\u6a21\u578b\uff1aER\u56fe ER\u6a21\u578b\u4e09\u8981\u7d20\uff1a\u5b9e\u4f53\uff0c\u5c5e\u6027\uff0c\u8054\u7cfb \u903b\u8f91\u6570\u636e\u6a21\u578b\uff08\u4e00\u822c\u90fd\u76f4\u63a5\u53eb\u6570\u636e\u6a21\u578b\uff09\uff1a\u5c42\u6b21\u6a21\u578b\uff0c\u7f51\u72b6\u6a21\u578b\uff0c\u5173\u7cfb\u6a21\u578b\uff0c\u9762\u5411\u5bf9\u8c61\u6a21\u578b \u6570\u636e\u6a21\u578b\u4e09\u8981\u7d20\uff1a\u6570\u636e\u7ed3\u6784\uff0c\u6570\u636e\u64cd\u4f5c\uff0c\u6570\u636e\u5b8c\u6574\u6027\u7ea6\u675f \u5c42\u6b21\u6a21\u578b\u662f\u4e00\u68f5\u6811\uff0c\u5173\u7cfb\u6a21\u578b\u662f\u4e00\u5f20\u4e8c\u7ef4\u8868 \u7b2c\u4e8c\u7ae0 \u5173\u7cfb\u6570\u636e\u5e93\u6a21\u578b \u00b6 \u5173\u7cfb\u7684\u6027\u8d28 \u00b6 \u5217\u662f\u540c\u8d28\u7684\uff0c\u5373\u6570\u636e\u7c7b\u578b\u76f8\u540c \u4e0d\u540c\u7684\u5217\u53ef\u4ee5\u51fa\u5176\u540c\u4e00\u4e2a\u57df\uff0c\u4f46\u5c5e\u6027\u540d\u8981\u4e0d\u540c \u5217\u7684\u987a\u5e8f\u53ef\u4ee5\u4efb\u610f\u4ea4\u6362 \u4efb\u610f\u4e24\u4e2a\u5143\u7ec4\u4e0d\u53ef\u4ee5\u5b8c\u5168\u76f8\u540c \u5143\u7ec4\u987a\u5e8f\u53ef\u4ee5\u4efb\u610f \u5206\u91cf\u5fc5\u987b\u53d6\u539f\u5b50\u503c\uff0c\u5373\u8981\u6c42\u6bcf\u4e2a\u5206\u91cf\u90fd\u662f\u4e0d\u53ef\u518d\u5206\u7684\u6570\u636e\u9879 \u5173\u7cfb\u6570\u636e\u7ed3\u6784 \u00b6 \u4e00\u4e2a\u5173\u7cfb\u5c31\u662f\u4e00\u4e2a\u89c4\u8303\u5316\u7684\u4e8c\u7ef4\u8868\uff0c\u7b1b\u5361\u5c14\u79ef\u7684\u6709\u610f\u4e49\u7684\u6709\u9650\u5b50\u96c6 \u4e00\u4e2a\u5173\u7cfb\u7531\u5173\u7cfb\u540d\uff0c\u5173\u7cfb\u6a21\u5f0f\uff0c\u5173\u7cfb\u5b9e\u4f8b\u7ec4\u6210 \u5143\u7ec4\uff0c\u5c5e\u6027\uff0c\u7801\uff0c\u57df\uff0c\u5206\u91cf\uff0c\u5173\u7cfb\u6a21\u5f0f \u5019\u9009\u7801\uff1a\u552f\u4e00\u6027\uff0c\u6700\u5c0f\u6027 \u8d85\u7801\uff1a\u53ef\u4ee5\u552f\u4e00\u7684\u786e\u5b9a\u4e00\u884c\uff0c\u5019\u9009\u7801\u662f\u8d85\u7801\u7684\u5b50\u96c6 \u4e3b\u7801\uff1a\u5982\u679c\u7531\u591a\u4e2a\u5019\u9009\u7801\uff0c\u9009\u4e00\u4e2a \u4e3b\u5c5e\u6027\uff1a\u5305\u542b\u5728\u5019\u9009\u7801\u4e2d\u7684\u5404\u5c5e\u6027 \u5916\u7801 \u5173\u7cfb\u6570\u636e\u8bed\u8a00\u7684\u5206\u7c7b \u00b6 \u5173\u7cfb\u4ee3\u6570\uff0c\u5173\u7cfb\u6f14\u7b97\uff0c\u57df\u6f14\u7b97\uff0cSQL \u5173\u7cfb\u64cd\u4f5c & \u5173\u7cfb\u4ee3\u6570 \u00b6 \u4f20\u7edf\u7684\u96c6\u5408\u8fd0\u7b97\uff1a\u7b1b\u5361\u5c14\u79ef\uff0c\u5e76\uff0c\u4ea4\uff0c\u5dee \u4e13\u95e8\u7684\u5173\u7cfb\u8fd0\u7b97\uff1a\u9009\u62e9\uff0c\u6295\u5f71\uff0c\u8fde\u63a5\uff08\u7b49\u503c\uff0c\u81ea\u7136\u8fde\u63a5\uff0c\u5916\u8fde\u63a5\uff0c\u5de6\u5916\uff0c\u53f3\u5916\uff09\uff0c\u9664\u6cd5 \u6570\u636e\u5b8c\u6574\u6027 \u00b6 \u5b9e\u4f53\u5b8c\u6574\u6027 \u53c2\u7167\u5b8c\u6574\u6027 \u7528\u6237\u81ea\u5b9a\u4e49\u5b8c\u6574\u6027 \u5217\u7ea7\u5b8c\u6574\u6027\u7ea6\u675f\u53ea\u80fd\u6d89\u53ca\u4e00\u4e2a\u5c5e\u6027\uff0c\u8868\u7ea7\u53ef\u4ee5\u6d89\u53ca\u591a\u4e2a\u5c5e\u6027 \u7b2c\u4e09\u7ae0 SQL\u8bed\u8a00 \u00b6 SQL\u6982\u8ff0 \u00b6 \u7279\u70b9\uff1a\u7efc\u5408\u7edf\u4e00\uff0c\u9ad8\u5ea6\u975e\u8fc7\u7a0b\u5316\uff0c\u9762\u5411\u96c6\u5408\u7684\u64cd\u4f5c\u65b9\u5f0f\uff0c\u4ee5\u540c\u4e00\u79cd\u8bed\u6cd5\u7ed3\u6784\u63d0\u4f9b\u4e24\u79cd\u4f7f\u7528\u65b9\u5f0f\uff0c\u8bed\u8a00\u7b80\u6d01\u6613\u5b66\u6613\u7528 \u6570\u636e\u5b9a\u4e49\uff08DDL\uff09\uff0c\u6570\u636e\u64cd\u7eb5\uff08DML\uff09\uff0c\u6570\u636e\u63a7\u5236\uff08DCL\uff09 \u5df4\u79d1\u65af\u8303\u5f0f\uff08BNF\uff09 \u00b6 <> \u5fc5\u9009\u9879 [ ] \u53ef\u4ee5\u51fa\u73b0\u4e00\u6b21\u6216\u4e0d\u51fa\u73b0 { } \u53ef\u4ee5\u591a\u6b21\u51fa\u73b0\u6216\u4e0d\u51fa\u73b0 | \u591a\u9009\u4e00 \u6570\u636e\u5b9a\u4e49 \u00b6 \u6570\u636e\u5e93 \u00b6 create database < \u6570\u636e\u5e93\u540d > use < \u6570\u636e\u5e93\u540d > alter database < \u6570\u636e\u5e93\u540d > drop database < \u6570\u636e\u5e93\u540d > \u57fa\u672c\u8868 \u00b6 \u5b9a\u4e49 create table < \u8868\u540d > ( < \u5217\u540d >< \u6570\u636e\u7c7b\u578b > [ < \u5217\u7ea7\u5b8c\u6574\u6027\u7ea6\u675f > ] { , < \u5217\u540d >< \u6570\u636e\u7c7b\u578b > [ < \u5217\u7ea7\u5b8c\u6574\u6027\u7ea6\u675f > ] } [, < \u8868\u7ea7\u5b8c\u6574\u6027\u7ea6\u675f > ] ) \u5217\u7ea7\u7ea6\u675f\uff1a not null, default, unique, check, primary key, foreign key foreign key: foreign key (<\u5217\u540d>) references <\u5916\u8868\u540d>(<\u5916\u8868\u5217\u540d>) \u4fee\u6539 alter table < \u8868\u540d > alter column < \u5217\u540d > < \u65b0\u6570\u636e\u7c7b\u578b > [ null | not null ] | add < \u5217\u540d > < \u6570\u636e\u7c7b\u578b > [ \u7ea6\u675f ] | drop column < \u5217\u540d > | add [ constraint < \u7ea6\u675f\u540d > ] < \u7ea6\u675f\u5b9a\u4e49 > | drop constraint < \u7ea6\u675f\u540d > \u5220\u9664 drop table < \u57fa\u672c\u8868\u540d > \u7d22\u5f15 \u00b6 \u5206\u7c7b\uff1a\u805a\u7c07\u7d22\u5f15\u548c\u975e\u805a\u7c07\u7d22\u5f15 \u9ed8\u8ba4\u975e\u805a\u7c07\uff0c\u805a\u7c07\u7d22\u5f15\u53ea\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a \u805a\u7c07\u7d22\u5f15\uff1a\u7d22\u5f15\u9879\u987a\u5e8f\u548c\u7269\u7406\u987a\u5e8f\u4e00\u81f4 \u5b9a\u4e49 create [ unique ][ clustered | notclustered ] index < \u7d22\u5f15\u540d > on < \u57fa\u672c\u8868\u540d > ( < \u5217\u540d > [ asc | desc ] [ { ,( < \u5217\u540d > [ asc | desc ] } ...]) \u5220\u9664 drop index < \u8868\u540d > . < \u7d22\u5f15\u540d > \u6570\u636e\u67e5\u8be2 \u00b6 select [ all | distinct ] < \u76ee\u6807\u5217\u8868\u8fbe\u5f0f > [, < \u76ee\u6807\u5217\u8868\u8fbe\u5f0f > ]... from < \u8868\u540d\u6216\u89c6\u56fe\u540d > [, < \u8868\u540d\u6216\u89c6\u56fe\u540d > ]... [ where < \u6761\u4ef6\u8868\u8fbe\u5f0f > ] [ group by < \u5217\u540d 1 > ] [ having < \u6761\u4ef6\u8868\u8fbe\u5f0f > ] -- having \u7528\u4e8e\u6307\u5b9a\u5206\u7ec4\u8fc7\u6ee4\u6761\u4ef6 [ order by < \u5217\u540d 2 > [ asc | desc ]] \u66f4\u6539\u7ed3\u679c\u5217\u6807\u9898 \u00b6 select \u5ba2\u6237\u7f16\u53f7 as cno from CustomerInfo select 'cno' = \u5ba2\u6237\u7f16\u53f7 # = \u5217\u540d\u5fc5\u987b\u5199\u53f3\u8fb9 from CustomerInfo \u66ff\u6362\u67e5\u8be2\u7ed3\u679c\u4e2d\u7684\u6570\u636e \u00b6 select < \u5217\u540d > = case when \u6761\u4ef6 1 then \u8868\u8fbe\u5f0f 1 ... else \u8868\u8fbe\u5f0f end from < \u8868\u540d > where < \u6761\u4ef6\u8868\u8fbe\u5f0f > \u53bb\u9664\u91cd\u590d\u884c \u00b6 select unique < \u5217\u540d > from < \u8868\u540d > \u6a21\u7cca\u67e5\u8be2 \u00b6 % \u8868\u793a\u4efb\u610f\u957f\u5ea6\u7684\u5b57\u7b26\u4e32 _ \u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26 select * from < \u8868\u540d > where < \u5217\u540d > like '\u6c5f\u82cf%' \u5982\u679c\u67e5\u8be2\u7684\u6761\u4ef6\u4e2d\u5305\u542b\u901a\u914d\u7b26\u9700\u8981\u8f6c\u4e49\uff1a escape\\ where \u5fae\u4fe1\u53f7 like 'wxid\\_%' escape '\\' \u7a7a\u503c\u6bd4\u8f83 \u00b6 < \u8868\u8fbe\u5f0f > is [ not ] null \u5bf9\u7ed3\u679c\u96c6\u6392\u5e8f \u00b6 [ order by < \u5217\u540d > [ asc | desc ]] [, < \u5217\u540d > [ asc | desc ]]...] # \u9ed8\u8ba4 asc \u5347\u5e8f \u5bf9\u7ed3\u679c\u96c6\u5206\u7c7b \u00b6 group by < \u8868\u8fbe\u5f0f > # eg select \u5546\u54c1\u7c7b\u522b , count ( \u5546\u54c1\u7f16\u53f7 ) as '\u79cd\u6570' from GoodsInfo group by \u5546\u54c1\u7c7b\u522b having\u7b5b\u9009 \u00b6 having \u8bed\u53e5\u7528\u5728 group by \u5b50\u53e5\u540e\u6765\u8fdb\u884c\u7b5b\u9009\uff0c\u53ea\u8f93\u51fa\u7b26\u5408\u6761\u4ef6\u7684 [ having < \u6761\u4ef6 > ] # eg select \u5546\u54c1\u7c7b\u522b , count ( \u5546\u54c1\u7f16\u53f7 ) as '\u79cd\u6570' from GoodsInfo group by \u5546\u54c1\u7c7b\u522b having count ( * ) > 1 \u805a\u5408\u51fd\u6570 \u00b6 \u805a\u5408\u51fd\u6570 \u4e0d\u5141\u8bb8 \u5d4c\u5957 sum | avg () max | min () count () # eg select count ( \u5ba2\u6237\u7f16\u53f7 ) as '\u5ba2\u6237\u6570' from OrderList \u8fde\u63a5\u67e5\u8be2 \u00b6 \u8fde\u63a5\u8c13\u8bcd from < \u8868 1 > [ \u8868 1 \u522b\u540d ], < \u8868 2 > [ \u8868 2 \u522b\u540d ][, < \u8868 3 > [ \u8868 3 \u522b\u540d ]...] \u4ee5join\u5173\u952e\u5b57\u8fde\u63a5 # \u5185\u8fde\u63a5 \u9ed8\u8ba4\u5185\u8fde\u63a5 inner join ( inner\u53ef\u4ee5\u4e0d\u5199 ) select ... # 2 \u4e2a\u8868 from < \u8868 1 > join < \u8868 2 > on < \u6761\u4ef6 > where ... select ... # 3 \u4e2a\u8868 from < \u8868 1 > join < \u8868 2 > join < \u8868 3 > on < \u6761\u4ef6 1 > on < \u6761\u4ef6 2 > where ... # \u5916\u8fde\u63a5 outer join # \u5de6\u5916 : left outer join \u53f3\u5916 : right outer join \u5b8c\u5168\u5916 : full outer join \u5d4c\u5957\u67e5\u8be2 \u00b6 \u5b50\u67e5\u8be2\u4e0d\u80fd\u5305\u542b order by \uff0c\u5373 order by \u53ea\u80fd\u5bf9\u6700\u7ec8\u67e5\u8be2\u6392\u5e8f \u5e26 in \u7684\u5b50\u67e5\u8be2 \u00b6 where \u6240\u5728\u7701\u5e02 in ( \u5b50\u67e5\u8be2 ) \u5e26\u6bd4\u8f83\u8fd0\u7b97\u7b26\u7684\u5b50\u67e5\u8be2 \u00b6 where \u6570\u91cf > ( \u5b50\u67e5\u8be2 ) # \u8fd9\u91cc\u7684\u5b50\u67e5\u8be2\u8981\u6c42\u7ed3\u679c\u53ea\u6709\u4e00\u4e2a \u5e26 ALL / ANY \u8c13\u8bcd\u7684\u5b50\u67e5\u8be2 \u00b6 \u7528\u4ee5\u89e3\u9664\u6bd4\u8f83\u8fd0\u7b97\u7b26\u8981\u6c42\u5b50\u67e5\u8be2\u7684\u7ed3\u679c\u96c6\u5143\u7d20\u53ea\u80fd\u6709\u4e00\u4e2a\u7684\u9650\u5236 where \u6570\u91cf > all ( \u5b50\u67e5\u8be2 ) # \u7b49\u6548\u4e8e where \u6570\u91cf > ( \u5e26 MAX \u7684\u5b50\u67e5\u8be2 ) # \u5f53\u7136\u8fd9\u91cc\u5b50\u67e5\u8be2\u53ea\u80fd\u67e5\u8be2\u4e00\u5217 \u5e26 EXISTS \u8c13\u8bcd\u7684\u5b50\u67e5\u8be2 \u00b6 [ not ] exists ( \u5b50\u67e5\u8be2 ) \u96c6\u5408\u67e5\u8be2 \u00b6 select \u8bed\u53e5\u7684\u67e5\u8be2\u7ed3\u679c\u662f\u7ed3\u679c\u96c6\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fdb\u884c\u96c6\u5408\u8fd0\u7b97 \u5e76 UNION \u4ea4 INTERSECT \u5dee EXCEPT \u8fd9\u91cc\u7684\u7ed3\u679c\u96c6\u5217\u6570\u5fc5\u987b\u76f8\u540c\uff0c\u5bf9\u5e94\u5217\u7684\u6570\u636e\u7c7b\u578b\u4e5f\u5fc5\u987b\u76f8\u540c select ... union select ... select ... intersect select ... \u6570\u636e\u66f4\u65b0\uff08\u63d2\u5165&\u4fee\u6539&\u5220\u9664\uff09 \u00b6 \u6570\u636e\u63d2\u5165 \u00b6 # \u63d2\u5165\u5143\u7ec4 insert into < \u8868\u540d > [( < \u5217 1 > [, < \u5217 2 > ...])] values ( < \u5e38\u91cf 1 > [, < \u5e38\u91cf 2 > ...]) # \u63d2\u5165\u5b50\u67e5\u8be2 insert into < \u8868\u540d > [( < \u5217 1 > [, < \u5217 2 > ...])] < \u5b50\u67e5\u8be2 > \u6570\u636e\u4fee\u6539 \u00b6 update < \u8868\u540d > [[ as ] < \u522b\u540d > ] set < \u5217\u540d > = < \u5e38\u91cf > [, < \u5217\u540d > = < \u5e38\u91cf > ...] [ where < \u6761\u4ef6\u8868\u8fbe\u5f0f > ] \u6570\u636e\u5220\u9664 \u00b6 delete [ from ] < \u8868\u540d > [ where < \u6761\u4ef6\u8868\u8fbe\u5f0f > ] \u89c6\u56fe \u00b6 \u865a\u8868\uff0c\u53ef\u4ee5\u7528\u4ee5\u4fdd\u62a4\u6570\u636e\u5b89\u5168\u548c\u6ee1\u8db3\u4e0d\u540c\u7528\u6237\u7684\u9700\u6c42 \u521b\u5efa\u89c6\u56fe \u00b6 create view < \u89c6\u56fe\u540d > [( < \u5217\u540d > [, < \u5217\u540d > ])] as < select \u67e5\u8be2\u8bed\u53e5 > \u4fee\u6539\u89c6\u56fe \u00b6 alter view < \u89c6\u56fe\u540d > [( < \u5217\u540d > [, < \u5217\u540d > ])] as < select \u67e5\u8be2\u8bed\u53e5 > \u5220\u9664\u89c6\u56fe \u00b6 drop view < \u89c6\u56fe\u540d > \u89c6\u56fe\u67e5\u8be2 \u00b6 \u548c \u57fa\u672c\u8868 \u4e00\u81f4 \u89c6\u56fe\u66f4\u65b0 \u00b6 \u9632\u6b62\u51fa\u73b0\u8303\u56f4\u5916\u7684\u6570\u636e\u53ef\u4ee5\u5728\u5b9a\u4e49\u89c6\u56fe\u65f6\u52a0\u4e0a with check option \u63d2\u5165\u6570\u636e\uff0c\u4fee\u6539\u6570\u636e\uff0c\u5220\u9664\u6570\u636e\u90fd\u548c \u57fa\u672c\u8868 \u4e00\u81f4 \u4f46\u6709\u5f88\u591a\u9650\u5236\uff0c\u5982\u679c\u66f4\u65b0\u6210\u529f\u4e86\u4f1a\u6620\u5c04\u5230\u57fa\u672c\u8868 \u7b2c\u56db\u7ae0 \u6570\u636e\u5e93\u8bbe\u8ba1 \u00b6 \u5e7f\u4e49\uff1a\u6570\u636e\u5e93\u53ca\u5176\u5e94\u7528\u7cfb\u7edf\u7684\u8bbe\u8ba1\uff0c\u5373\u8bbe\u8ba1\u6574\u4e2a\u7684\u6570\u636e\u5e93\u5e94\u7528\u7cfb\u7edf \u72ed\u4e49\uff1a\u6570\u636e\u5e93\u672c\u8eab\u7684\u8bbe\u8ba1\uff0c\u5373\u8bbe\u8ba1\u6570\u636e\u5e93\u7684\u5404\u7ea7\u6a21\u5f0f\u5e76\u5efa\u7acb\u6570\u636e\u5e93 \u6570\u636e\u5e93\u8bbe\u8ba1\u7684 6 \u4e2a\u9636\u6bb5\uff1a \u9700\u6c42\u5206\u6790\u9636\u6bb5\uff1a\u6570\u636e\u6d41\u56fe\uff0c\u6570\u636e\u5b57\u5178 \u6982\u5ff5\u7ed3\u6784\u8bbe\u8ba1\u9636\u6bb5\uff1a\u6982\u5ff5\u6570\u636e\u6a21\u578b ER \u56fe \u903b\u8f91\u7ed3\u6784\u8bbe\u8ba1\u9636\u6bb5 \u7269\u7406\u7ed3\u6784\u8bbe\u8ba1\u9636\u6bb5 \u6570\u636e\u5e93\u5b9e\u65bd\u9636\u6bb5 \u6570\u636e\u5e93\u8fd0\u884c\u4e0e\u7ef4\u62a4\u9636\u6bb5 \u6982\u5ff5\u7ed3\u6784\u8bbe\u8ba1 \u00b6 \u81ea\u9876\u5411\u4e0b\uff0c\u81ea\u5e95\u5411\u4e0a\uff0cER\u8bbe\u8ba1\u65b9\u6cd5\uff0cEER\u8bbe\u8ba1\u65b9\u6cd5 \u7531\u5c40\u90e8\u89c6\u56fe\u5230\u5168\u5c40\u6982\u5ff5\u7ed3\u6784\uff1a\u4e00\u6b21\u96c6\u6210\uff0c\u591a\u6b21\u96c6\u6210 \u96c6\u6210\u5305\u62ec\uff1a\u5408\u5e76\uff0c\u6d88\u9664\u5197\u4f59 \u5408\u5e76\u7684\u4e09\u79cd\u7c7b\u578b\u7684\u51b2\u7a81\uff1a\u547d\u540d\u51b2\u7a81\uff0c\u5c5e\u6027\u51b2\u7a81\uff0c\u6982\u5ff5\u51b2\u7a81 \u903b\u8f91\u7ed3\u6784\u8bbe\u8ba1 \u00b6 \u6b65\u9aa4\uff1a \u5c06\u6982\u5ff5\u6a21\u578b\u8f6c\u5316\u4e3a\u4e00\u822c\u7684\u5173\u7cfb\uff0c\u7f51\u72b6\uff0c\u5c42\u6b21\u6a21\u578b \u5bf9\u6570\u636e\u6a21\u578b\u8fdb\u884c\u4f18\u5316 \u8bbe\u8ba1\u7528\u6237\u5916\u6a21\u5f0f \u4e8c\u5143\u5173\u7cfb\uff1a1\u5bf91\uff0c1\u5bf9\u591a\uff0c\u591a\u5bf9\u591a \u7b2c\u4e94\u7ae0 \u5173\u7cfb\u89c4\u8303\u5316\u7406\u8bba \u00b6 \u6570\u636e\u5197\u4f59\u548c\u64cd\u4f5c\u5f02\u5e38 \u00b6 \u6570\u636e\u5197\u4f59\uff1a\u540c\u4e00\u6570\u636e\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u6570\u636e\u6587\u4ef6\u4e2d\u91cd\u590d\u50a8\u5b58 \u6570\u636e\u5197\u4f59\u4f1a\u5bfc\u81f4\u7684\u64cd\u4f5c\u5f02\u5e38\uff1a\u63d2\u5165\u5f02\u5e38\uff0c\u5220\u9664\u5f02\u5e38\uff0c\u4fee\u6539\u5f02\u5e38 \u51fd\u6570\u4f9d\u8d56 \u00b6 \u5206\u7c7b\uff1a \u5e73\u51e1\u51fd\u6570\u4f9d\u8d56\u548c\u975e\u5e73\u51e1\u51fd\u6570\u4f9d\u8d56 \u90e8\u5206\u51fd\u6570\u4f9d\u8d56\u4e0e\u5b8c\u5168\u51fd\u6570\u4f9d\u8d56 \u4f20\u9012\u51fd\u6570\u4f9d\u8d56 \u591a\u503c\u4f9d\u8d56\uff0c\u5e73\u51e1\u591a\u503c\u4f9d\u8d56 \u8303\u5f0f \u00b6 \u7b2c\u4e00\u8303\u5f0f\uff1a\u6bcf\u4e2a\u5173\u7cfb\u6a21\u5f0f\u5fc5\u5b9a\u5c5e\u4e8e1NF \u7b2c\u4e8c\u8303\u5f0f\uff1a\u6ca1\u6709\u90e8\u5206\u51fd\u6570\u4f9d\u8d56\uff0c\u5c5e\u4e8e2NF \u7b2c\u4e09\u8303\u5f0f\uff1a\u4e0d\u5b58\u5728\u4f20\u9012\u51fd\u6570\u4f9d\u8d56\uff0c\u5c5e\u4e8e3NF BC\u8303\u5f0f\uff1a\u6bcf\u4e2a\u51b3\u5b9a\u56e0\u7d20\u90fd\u542b\u6709\u5019\u9009\u7801 \u7b2c\u56db\u8303\u5f0f\uff1a\u6240\u6709\u7684\u975e\u5e73\u51e1\u591a\u503c\u4f9d\u8d56\u7684\u51b3\u5b9a\u56e0\u7d20\u90fd\u542b\u6709\u7801 \u6570\u636e\u4f9d\u8d56\u516c\u7406\u7cfb\u7edf \u00b6 \u903b\u8f91\u8574\u542b \u00b6 \u8bbe\u53c8\u6ee1\u8db3\u51fd\u6570\u4f9d\u8d56\u96c6 F \u7684\u5173\u7cfb\u6a21\u5f0f \\(R<U, F>\\) \uff0c\u5bf9\u4e8e R \u7684\u4efb\u4e00\u5173\u7cfb r\uff0c\u82e5\u4e00\u4e2a\u5173\u7cfb\u4e2d\u51fd\u6570\u4f9d\u8d56 \\(X\\rightarrow Y\\) \u90fd\u6210\u7acb\uff0c\u5219\u79f0\u903b\u8f91\u8574\u542b \\(X\\rightarrow Y\\) \uff0c\u8bb0\u4e3a \\(F\\Rightarrow X\\rightarrow Y\\) Armstrong \u516c\u7406\u7cfb\u7edf \u00b6 \u7528\u9014\uff1a\u6c42\u7ed9\u5b9a\u5173\u7cfb\u6a21\u5f0f\u7684\u7801\uff0c\u4ece\u4e00\u7ec4\u51fd\u6570\u4f9d\u8d56\u6c42\u5f97\u8574\u542b\u7684\u51fd\u6570\u4f9d\u8d56 \u5bf9\u4e8e\u5173\u7cfb\u6a21\u5f0f \\(R<U,F>\\) \uff0c\u6709\u4e00\u4e0b\u5b9a\u5f8b \u81ea\u53cd\u5f8b\uff1a\u82e5 \\(Y\\subseteq X \\subseteq U\\) \uff0c\u5219 \\(F\\Rightarrow X\\rightarrow Y\\) \u589e\u5e7f\u5f8b\uff1a\u82e5 \\(F\\Rightarrow X\\rightarrow Y\\) \uff0c\u4e14 \\(Z\\subseteq U\\) \uff0c\u5219 \\(F\\Rightarrow ZX\\rightarrow ZY\\) \u4f20\u9012\u5f8b\uff1a\u82e5 \\(F\\Rightarrow X\\rightarrow Y\\) \u53ca \\(F\\Rightarrow Y\\rightarrow Z\\) \uff0c\u5219 \\(F\\Rightarrow X\\rightarrow Z\\) \u63a8\u7406\u53ef\u5f97\u4ee5\u4e0b\u89c4\u5219 \u5408\u5e76\u89c4\u5219\uff1a\u82e5 \\(X\\rightarrow Y,X\\rightarrow Z\\) \uff0c\u5219 \\(X\\rightarrow YZ\\) \u4f2a\u4f20\u9012\u89c4\u5219\uff1a\u82e5 \\(X\\rightarrow Y,WY\\rightarrow Z\\) \uff0c\u5219\u6709 \\(WX\\rightarrow Z\\) \u5206\u89e3\u89c4\u5219\uff1a\u82e5 \\(X\\rightarrow Y\\) \uff0c\u4e14 \\(Z\\subseteq Y\\) \uff0c\u5219\u6709 \\(X\\rightarrow Z\\) \u51fd\u6570\u4f9d\u8d56\u96c6\u7684\u95ed\u5305 \u00b6 \\(X^+_F\\) \u79f0\u4e3a\u5c5e\u6027\u96c6 \\(X\\) \u5173\u4e8e\u51fd\u6570\u4f9d\u8d56\u96c6 \\(F\\) \u7684\u95ed\u5305 \u6c42 \\(X^+_F\\) \u7684\u65b9\u6cd5\uff1a\u5728\u51fd\u6570\u4f9d\u8d56 \\(F\\) \u627e\u5de6\u4fa7\u662f X \u7684\u5b50\u96c6\u7684\u4f9d\u8d56\u5e76\u4e0d\u65ad\u6269\u5927 \\(X\\) \u8fd9\u4e2a\u96c6\u5408\uff0c\u76f4\u5230\u4e0d\u80fd\u6269\u5927\u4e3a\u6b62 \u6700\u5c0f\u4f9d\u8d56\u96c6 \u00b6 \u51fd\u6570\u4f9d\u8d56\u96c6\u7b49\u4ef7\uff1a\u5982\u679c \\(G^+=F^+\\) \uff0c\u5219\u79f0\u51fd\u6570\u4f9d\u8d56\u96c6 \\(G\\) \u548c \\(F\\) \u7b49\u4ef7 / \u4e92\u4e3a\u8986\u76d6 \u6700\u5c0f\u4f9d\u8d56\u96c6\uff1a\u5982\u679c\u51fd\u6570\u4f9d\u8d56\u96c6 \\(F\\) \u6ee1\u8db3 $F $ \u4e2d\u4efb\u4e00\u51fd\u6570\u4f9d\u8d56\u7684\u53f3\u90e8\u4ec5\u6709\u5355\u4e00\u5c5e\u6027 \\(F\\) \u4e2d\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u51fd\u6570\u4f9d\u8d56 \\(X\\rightarrow A\\) \uff0c\u4f7f\u5f97 \\(F\\) \u4e0e \\(F-\\{X\\rightarrow A\\}\\) \u7b49\u4ef7 \\(F\\) \u4e2d\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u51fd\u6570\u4f9d\u8d56 \\(X\\rightarrow A\\) \uff0c \\(X\\) \u6709\u771f\u5b50\u96c6 \\(Z\\) \u4f7f\u5f97 \\(F\\) \u4e0e \\(F-\\{X\\rightarrow A\\}\\cup \\{Z\\rightarrow A\\}\\) \u7b49\u4ef7 \u5219\u79f0 \\(F\\) \u662f\u6700\u5c0f\u4f9d\u8d56\u96c6 \u6216 \u6700\u5c0f\u8986\u76d6\uff0c\u8bb0\u4e3a \\(F_{min}\\) \uff0c\u5373\u8981\u6c42\u51fd\u6570\u4f9d\u8d56\u96c6\u662f\u6700\u5c0f\u7684 \u6c42\u51fd\u6570\u4f9d\u8d56\u96c6 \\(F\\) \u7684 \\(F_{min}\\) \u7684\u65b9\u6cd5 \u5148\u5c06\u51fd\u6570\u4f9d\u8d56\u53f3\u4fa7\u53f3\u4fa7\u662f\u591a\u5c5e\u6027\u7684\u5206\u89e3\u5f00\u591a\u4e2a\u51fd\u6570\u4f9d\u8d56 \u7136\u540e\u9010\u4e00\u68c0\u67e5\u6bcf\u4e00\u4e2a\u51fd\u6570\u4f9d\u8d56\uff0c\u68c0\u67e5\u8fd9\u4e2a\u51fd\u6570\u4f9d\u8d56\u662f\u5426\u53ef\u53bb \u6700\u540e\u9010\u4e00\u68c0\u67e5\u6bcf\u4e00\u4e2a\u51fd\u6570\u4f9d\u8d56\u7684\u5de6\u4fa7\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5c5e\u6027\uff0c\u68c0\u67e5\u5355\u4e2a\u5c5e\u6027\u662f\u5426\u53ef\u53bb \u5176\u4ed6\u8003\u70b9\uff1a\u8ba1\u7b97\u7801\u7684\u7b97\u6cd5 \u6a21\u5f0f\u5206\u89e3 \u00b6 \u65e0\u635f\u8fde\u63a5\u6027 \u00b6 \u638c\u63e1\u5224\u65ad\u6a21\u5f0f\u5206\u89e3\u65e0\u635f\u8fde\u63a5\u6027\u7684\u7b97\u6cd5\uff0c\u7565 \u51fd\u6570\u4f9d\u8d56\u4fdd\u6301 \u00b6 \u7565 \u7b2c\u516d\u7ae0 \u6570\u636e\u5e93\u5e94\u7528\u5f00\u53d1 \u00b6 T-SQL \u00b6 \u53d8\u91cf \u00b6 declare @< \u5c40\u90e8\u53d8\u91cf\u540d > < \u6570\u636e\u7c7b\u578b > [, @< \u5c40\u90e8\u53d8\u91cf\u540d > < \u6570\u636e\u7c7b\u578b > ...] # \u58f0\u660e set @< \u5c40\u90e8\u53d8\u91cf\u540d > = < \u8868\u8fbe\u5f0f > # \u8d4b\u503c select @< \u5c40\u90e8\u53d8\u91cf\u540d > = < \u8868\u8fbe\u5f0f > [, @< \u5c40\u90e8\u53d8\u91cf\u540d > = < \u8868\u8fbe\u5f0f > ] # select \u53ef\u4ee5\u4e00\u6b21\u8d4b\u503c\u591a\u4e2a\u53d8\u91cf set @< \u5c40\u90e8\u53d8\u91cf\u540d > = ( select \u67e5\u8be2 ) # \u67e5\u8be2\u7ed3\u679c\u8d4b\u503c print \u5b57\u7b26\u4e32 | \u5c40\u90e8\u53d8\u91cf | \u5168\u5c40\u53d8\u91cf | \u51fd\u6570 # \u8f93\u51fa \u6d41\u7a0b\u63a7\u5236\u8bed\u53e5 \u00b6 begin...end begin # \u4e00\u4e2a begin ... end \u662f\u4e00\u4e2a\u8bed\u53e5\u5757 SQL\u8bed\u53e51 SQL\u8bed\u53e52 ... end if...else if < \u6761\u4ef6\u8868\u8fbe\u5f0f > { \u8bed\u53e5 1 | \u8bed\u53e5\u5757 1 } # \u91cc\u9762\u6709 begin ... end [ else { \u8bed\u53e5 2 | \u8bed\u53e5\u5757 2 } ] while while < \u903b\u8f91\u8868\u8fbe\u5f0f > { \u8bed\u53e5 1 | \u8bed\u53e5\u5757 1 } # \u91cc\u9762\u6709 begin ... end break / continue / return \u7565 \u51fd\u6570 \u00b6 \u5185\u7f6e\u51fd\u6570 \u00b6 \u7565 \u7528\u6237\u81ea\u5b9a\u4e49\u51fd\u6570 \u00b6 \u6807\u91cf\u51fd\u6570 create function [ < \u6240\u6709\u8005 > .] < \u51fd\u6570\u540d > ([ { @< \u53c2\u6570\u540d > [ as ] < \u53c2\u6570\u7c7b\u578b > [ =< \u9ed8\u8ba4\u503c > ] } [,....] ]) returns < \u8fd4\u56de\u53c2\u6570\u7c7b\u578b > [ as ] begin < \u51fd\u6570\u4f53 > return < \u8fd4\u56de\u503c\u8868\u8fbe\u5f0f > end \u6807\u91cf\u51fd\u6570\u7684\u8c03\u7528 select @< \u53d8\u91cf\u540d > = dbo . < \u51fd\u6570\u540d > ( \u5b9e\u53c2 1 ,..., \u5b9e\u53c2 n ) # \u65b9\u5f0f 1 select exec @< \u53d8\u91cf\u540d > = dbo . < \u51fd\u6570\u540d > \u5b9e\u53c2 1 ,..., \u5b9e\u53c2 n # \u65b9\u5f0f 2 exec \u5185\u5d4c\u8868\u503c\u51fd\u6570 create function [ < \u6240\u6709\u8005 > .] < \u51fd\u6570\u540d > ([ { @< \u53c2\u6570\u540d > [ as ] < \u53c2\u6570\u7c7b\u578b > [ =< \u9ed8\u8ba4\u503c > ] } [,....] ]) returns table [ as ] begin return ( < select > \u8bed\u53e5 ) end \u5185\u5d4c\u8868\u503c\u51fd\u6570\u7684\u8c03\u7528 # \u53ea\u80fd\u901a\u8fc7 select select * from < \u51fd\u6570\u540d > ( \u53c2\u6570\u8868 ) \u591a\u8bed\u53e5\u8868\u503c\u51fd\u6570 create function [ < \u6240\u6709\u8005 > .] < \u51fd\u6570\u540d > ([ { @< \u53c2\u6570\u540d > [ as ] < \u53c2\u6570\u7c7b\u578b > [ =< \u9ed8\u8ba4\u503c > ] } [,....] ]) returns @ reuturn_variable table < \u8868\u7684\u5b9a\u4e49 > [ as ] begin < \u51fd\u6570\u4f53 > return end \u591a\u8bed\u53e5\u8868\u503c\u51fd\u6570 # \u53ea\u80fd\u901a\u8fc7 select select * from < \u51fd\u6570\u540d > ( \u53c2\u6570\u8868 ) \u5220\u9664\u51fd\u6570 drop function { [ < \u6240\u6709\u8005 > .] < \u51fd\u6570\u540d > } [,... n ] \u6e38\u6807 \u00b6 \u6e38\u6807\u7c7b\u578b \u00b6 \u9759\u6001\u6e38\u6807 \u53ea\u8bfb \u52a8\u6001\u6e38\u6807 \u80fd\u591f\u53cd\u6620\u5bf9\u7ed3\u679c\u96c6\u4e2d\u6240\u505a\u7684\u66f4\u6539 \u53ea\u8fdb\u6e38\u6807 \u53ea\u652f\u6301\u4ece\u5934\u5230\u5c3e\u63d0\u53d6\u6570\u636e \u952e\u96c6\u9a71\u52a8\u6e38\u6807 \u53ef\u4ee5\u4fee\u6539\u57fa\u672c\u8868\u4e2d\u975e\u5173\u952e\u5b57\u5217\u7684\u503c\uff0c\u4f46\u4e0d\u53ef\u4ee5\u63d2\u5165\u6570\u636e \u58f0\u660e\u6e38\u6807 \u00b6 declare < \u6e38\u6807\u540d > cursor [ local | global ] -- \u6e38\u6807\u4f5c\u7528\u57df [ forword_only | scroll ] -- \u6e38\u6807\u79fb\u52a8\u65b9\u5411 [ static | keyset | dynamic | fast_forward ] -- \u6e38\u6807\u7c7b\u578b [ read_only | scroll_locks | optimistic ] -- \u8bbf\u95ee\u5c5e\u6027 [ type_warning ] -- \u7c7b\u578b\u8f6c\u6362\u8b66\u544a for < select\u8bed\u53e5 > [ for update [ of < \u5217\u540d > [,... n ]] -- \u53ef\u4fee\u6539\u7684\u5217 \u6253\u5f00\u6e38\u6807 \u00b6 open { { [ global ] < \u6e38\u6807\u540d > } | @< \u6e38\u6807\u53d8\u91cf\u540d > } -- eg select '\u6e38\u6807 KH_cur \u6570\u636e\u884c\u6570' = @@ CURSOR_ROWS \u8bfb\u53d6\u6e38\u6807 \u00b6 fetch [ [ next | prior | first | last | absolute { n |@ nvar } | relative { n |@ nvar } ] from ] { { [ global ] < \u6e38\u6807\u540d > } | @< \u6e38\u6807\u53d8\u91cf\u540d > } [ into @ variable_name [,... n ]] \u5173\u95ed\u6e38\u6807 \u00b6 close { { [ global ] < \u6e38\u6807\u540d > } |@< \u6e38\u6807\u53d8\u91cf\u540d > } \u91ca\u653e\u6e38\u6807 \u00b6 deallocate { { [ global ] < \u6e38\u6807\u540d > } |@< \u6e38\u6807\u53d8\u91cf\u540d > } \u6e38\u6807\u53d8\u91cf \u00b6 \u7565 \u6e38\u6807\u51fd\u6570 \u00b6 CURSOR_STATUS ( 'loacl' | 'global' | 'variable' , '\u6e38\u6807\u540d' | '\u6e38\u6807\u53d8\u91cf\u540d' ) -- eg set @ statusVar = CURSOR_STATUS ( 'local' , 'CUR' ) \u5b58\u50a8\u8fc7\u7a0b \u00b6 \u5b58\u50a8\u8fc7\u7a0b\u7f16\u8bd1\u548c\u4f18\u5316\u540e\u5b58\u653e\u5728\u6570\u636e\u5e93\u670d\u52a1\u5668\u4e0a\uff0c\u6267\u884c\u4e00\u6b21\u540e\u5b58\u653e\u5728 \u9ad8\u7f13 \u4e2d \u4f18\u70b9\uff1a \u63d0\u9ad8\u7cfb\u7edf\u6027\u80fd \u4ee3\u7801\u590d\u7528\uff0c\u6267\u884c\u6548\u7387\u9ad8 \u5b58\u50a8\u8fc7\u7a0b\u7684\u5b9a\u4e49 \u00b6 create proc [ edure ] < \u5b58\u50a8\u8fc7\u7a0b\u540d > [ { @< \u53c2\u6570 >< \u6570\u636e\u7c7b\u578b > } [ = default ][ output ]] [,... n1 ] as < SQL\u8bed\u53e5 > [... n2 ] \u5b58\u50a8\u8fc7\u7a0b\u7684\u6267\u884c \u00b6 [ exec [ ute ]] < \u5b58\u50a8\u8fc7\u7a0b\u540d > [[ @< \u53c2\u6570\u540d >= ] { < \u503c >|@< \u53d8\u91cf > [ output ] | [ default ] } [,... n ]] -- deaflut \u8868\u793a\u7528\u9ed8\u8ba4\u503c \u5220\u9664\u540c\u540d\u5b58\u50a8\u8fc7\u7a0b \u00b6 if exists ( select name from sysobjects where name = 'eg' and type = 'P' ) drop procedure eg -- \u5220\u9664\u51fd\u6570\u7b49\u540c\u7406 \u4fee\u6539\u5b58\u50a8\u8fc7\u7a0b \u00b6 alter proc [ edure ] < \u5b58\u50a8\u8fc7\u7a0b\u540d > [ { @< \u53c2\u6570 >< \u6570\u636e\u7c7b\u578b > } [ = default ][ output ]] [,... n1 ] as < SQL\u8bed\u53e5 > [... n2 ] \u5220\u9664\u5b58\u50a8\u8fc7\u7a0b \u00b6 drop proc [ edure ] { < \u5b58\u50a8\u8fc7\u7a0b\u540d > } [,... n ] \u89e6\u53d1\u5668 \u00b6 \u89e6\u53d1\u5668\u7684\u5206\u7c7b \u00b6 \u89e6\u53d1\u7c7b\u578b\uff1ainsert / update / delete \u89e6\u53d1\u65b9\u5f0f\uff1aafter / instead of \u521b\u5efa\u89e6\u53d1\u5668 \u00b6 create trigger < \u89e6\u53d1\u5668\u540d > on { < \u57fa\u672c\u8868 >|< \u89c6\u56fe > } -- \u6307\u5b9a\u89e6\u53d1\u5668\u540d\u53ca\u64cd\u4f5c\u5bf9\u8c61 { for | after | instead of } { [ delete ][,][ insert ][,][ update ] } -- \u5b9a\u4e49\u89e6\u53d1\u5668\u7684\u7c7b\u578b\uff0c\u9ed8\u8ba4\u662f after as [ if update ( < \u5217\u540d > )[ { and | or } update ( < \u5217\u540d > )] [,... n ] ] < SQL\u8bed\u53e5 > [,... n ] -- \u53ef\u5305\u542b\u4e00\u6761\u6216\u591a\u6761SQL\u8bed\u53e5 \u89e6\u53d1\u5668\u7684\u7981\u6b62\u4e0e\u542f\u7528 \u00b6 alter table { enable | disable } < \u89e6\u53d1\u5668\u540d > \u4fee\u6539\u89e6\u53d1\u5668 \u00b6 alter trigger < \u89e6\u53d1\u5668\u540d > on { < \u57fa\u672c\u8868 >|< \u89c6\u56fe > } -- \u6307\u5b9a\u89e6\u53d1\u5668\u540d\u53ca\u64cd\u4f5c\u5bf9\u8c61 { for | after | instead of } { [ delete ][,][ insert ][,][ update ] } -- \u5b9a\u4e49\u89e6\u53d1\u5668\u7684\u7c7b\u578b\uff0c\u9ed8\u8ba4\u662f after as [ if update ( < \u5217\u540d > )[ { and | or } update ( < \u5217\u540d > )] [,... n ] ] < SQL\u8bed\u53e5 > [,... n ] -- \u53ef\u5305\u542b\u4e00\u6761\u6216\u591a\u6761SQL\u8bed\u53e5 \u5220\u9664\u89e6\u53d1\u5668 \u00b6 drop trigger { < \u89e6\u53d1\u5668\u540d > } [,... n ] \u6570\u636e\u5e93\u8bbf\u95ee\u63a5\u53e3 \u00b6 \u5f00\u653e\u6570\u636e\u5e93\u8fde\u63a5(ODBC) \u00b6 \u7ec4\u6210\uff1aODBC\u6570\u636e\u5e93\u5e94\u7528\u7a0b\u5e8f\uff0c\u9a71\u52a8\u7a0b\u5e8f\u7ba1\u7406\u5668\uff0c\u9a71\u52a8\u7a0b\u5e8f\uff0c\u6570\u636e\u6e90 5\u9636\u6bb5\uff1a\u914d\u7f6e\u6570\u636e\u6e90\uff0c\u8fde\u63a5\u6570\u636e\u6e90\uff0c\u521d\u59cb\u5316\u5e94\u7528\u7a0b\u5e8f\uff0cSQL\u5904\u7406\uff0c\u5904\u7406\u7ed3\u675f \u4f18\u70b9\uff1a\u4ee5\u7edf\u4e00\u7684\u65b9\u5f0f\u5904\u7406\u6240\u6709\u6570\u636e\u5e93 JDBC \u00b6 \u7ec4\u6210\uff1aJava\u5e94\u7528\u7a0b\u5e8f\uff0cJDBC\u9a71\u52a8\u7a0b\u5e8f\u7ba1\u7406\u5668\uff0cJDBC\u9a71\u52a8\u7a0b\u5e8f\uff0c\u6570\u636e\u5e93 ADO.NET \u00b6 \u6570\u636e\u5e93\u5e94\u7528\u7cfb\u7edf\u4f53\u7cfb\u7ed3\u6784 \u00b6 \u4f53\u7cfb\u7ed3\u6784\uff1a\u5355\u7528\u6237\u6a21\u5f0f\uff0c\u4e3b\u4ece\u5f0f\u591a\u7528\u6237\u6a21\u5f0f\uff0cC/S\u6a21\u5f0f\uff0cB/S\u6a21\u5f0f \u7b2c\u4e03\u7ae0 \u6570\u636e\u5e93\u4fdd\u62a4 \u00b6 \u5bf9\u6570\u636e\u5e93\u7684\u7834\u574f \u00b6 \u975e\u6cd5\u7528\u6237 \u975e\u6cd5\u6570\u636e \u5404\u79cd\u6545\u969c \u591a\u7528\u6237\u7684\u5e76\u53d1\u8bbf\u95ee \u6570\u636e\u5e93\u5b89\u5168 \u00b6 \u6570\u636e\u5e93\u7684\u5b89\u5168\u63a7\u5236 \u7528\u6237\u8bc6\u522b\u4e0e\u9274\u522b -- \u521b\u5efa\u767b\u5f55\u540d create login < \u767b\u5f55\u540d > with password = '<\u5bc6\u7801>' , default_database = < \u5173\u8054\u7684\u6570\u636e\u5e93 > -- \u521b\u5efa\u7528\u6237\u540d create user < \u7528\u6237\u540d > for login < \u767b\u5f55\u540d > # \u767b\u5f55\u540d\u4e0e\u7528\u6237\u540d\u5173\u8054 \u8bbf\u95ee\u63a7\u5236 -- \u6388\u6743 grant < \u6743\u9650 > [, < \u6743\u9650 > ...] # all privileges on < \u5bf9\u8c61\u7c7b\u578b > < \u5bf9\u8c61\u540d > [, < \u5bf9\u8c61\u7c7b\u578b > < \u5bf9\u8c61\u540d > ...] to < \u7528\u6237 > [, < \u7528\u6237 > ...] [ with grant option ] # \u5141\u8bb8\u8f6c\u6388 -- \u6536\u56de\u6743\u9650 revoke < \u6743\u9650 > [, < \u6743\u9650 > ...] on < \u5bf9\u8c61\u7c7b\u578b > < \u5bf9\u8c61\u540d > [, < \u5bf9\u8c61\u7c7b\u578b > < \u5bf9\u8c61\u540d > ...] from < \u7528\u6237 > [, < \u7528\u6237 > ...] [ cascade ] # cascade \u8868\u793a\u7ea7\u8054\u56de\u6536 \u89c6\u56fe\u673a\u5236 \u5b89\u5168\u5ba1\u8ba1\u673a\u5236 SQL Server\u7684\u5b89\u5168\u673a\u5236 \u8eab\u4efd\u9a8c\u8bc1\u6a21\u5f0f \u767b\u5f55\u548c\u7528\u6237 \u6743\u9650\u7ba1\u7406 \u89d2\u8272\u7ba1\u7406 \u6570\u636e\u5e93\u5b8c\u6574\u6027 \u00b6 \u51c6\u786e\u6027\uff0c\u6709\u6548\u6027\uff0c\u76f8\u5bb9\u6027 \u6570\u636e\u5e93\u5b8c\u6574\u6027\u63a7\u5236 \u00b6 \u5b9e\u4f53\u5b8c\u6574\u6027 \u53c2\u7167\u5b8c\u6574\u6027 \u7528\u6237\u81ea\u5b9a\u4e49\u5b8c\u6574\u6027 SQL Server \u7684\u5b8c\u6574\u6027\u673a\u5236 \u00b6 \u7ea6\u675f Constraint \u00b6 not null primary key check foreign key default unique check \u7ea6\u675f \u7ea6\u675f\u5b57\u6bb5\u6240\u5141\u8bb8\u7684\u8303\u56f4 [ constraint < \u7ea6\u675f\u540d > ] check ( < \u6761\u4ef6 > ) unique \u7ea6\u675f [ constraint < \u7ea6\u675f\u540d > ] unique \u89c4\u5219 Rule \u00b6 \u521b\u5efa\u89c4\u5219 create rule < \u89c4\u5219\u540d > as < \u6761\u4ef6\u8868\u8fbe\u5f0f > \u7ed1\u5b9a\u89c4\u5219 [ exec [ ute ]] sp_bindrule [ @ rulename = ] '<\u89c4\u5219\u540d>' ,[ @ objanme ] '<\u7ed1\u5b9a\u5bf9\u8c61\u540d>' \u89e3\u7ed1\u89c4\u5219 [ exec [ ute ]] sp_unbindrule [ @ objanme ] '<\u7ed1\u5b9a\u5bf9\u8c61\u540d>' \u5220\u9664\u89c4\u5219 drop rule < \u89c4\u5219\u540d > [,...] \u9ed8\u8ba4 Default \u00b6 \u7565 \u5e76\u53d1\u63a7\u5236 \u00b6 \u4e8b\u52a1\uff1a\u662f\u7528\u6237\u5b9a\u4e49\u7684\u4e00\u4e2a\u6570\u636e\u5e93\u64cd\u4f5c\u5e8f\u5217\uff0c\u8981\u4e48\u5168\u505a\uff0c\u8981\u4e48\u90fd\u4e0d\u505a\uff0c\u662f\u4e00\u4e2a\u4e0d\u53ef\u5206\u5272\u7684\u5de5\u4f5c\u5355\u4f4d\uff0c\u662fDBMS\u7684\u57fa\u672c\u5355\u4f4d \u4e8b\u52a1\u7684 ACID \u6027\u8d28 \u00b6 \u539f\u5b50\u6027 \u4e00\u81f4\u6027 \u9694\u79bb\u6027 \u6301\u4e45\u6027 \u4e8b\u52a1\u7684\u6d3b\u52a8\u8fc7\u7a0b \u00b6 4 \u4e2a\u72b6\u6001 \u4e8b\u52a1\u5f00\u59cb \u4e8b\u52a1\u8bfb / \u5199 \u4e8b\u52a1\u63d0\u4ea4 (COMMIT) \u4e8b\u52a1\u56de\u6eda (ROLLBACK) \u4e8b\u52a1\u7684\u5e76\u53d1\u6267\u884c \u00b6 \u4e22\u5931\u66f4\u65b0 \u8bfb \u201c\u810f\u201d \u6570\u636e \u4e0d\u53ef\u91cd\u590d\u8bfb \u5e76\u53d1\u8c03\u5ea6\u7684\u53ef\u4e32\u884c\u6027 \u00b6 \u4e8b\u52a1\u7684\u5e76\u53d1\u8c03\u5ea6\u662f\u6b63\u786e\u7684\u5f53\u4e14\u4ec5\u5f53\u5176\u7ed3\u679c\u4e0e\u4e32\u884c\u8c03\u5ea6\u6267\u884c\u7684\u7ed3\u679c\u76f8\u540c\uff0c\u53ef\u4e32\u884c\u5316\u662f\u5e76\u53d1\u63a7\u5236\u7684\u6b63\u786e\u6027\u7684\u51c6\u5219 \u5c01\u9501 \u00b6 \u5c01\u9501\u7c7b\u578b\uff1a \u6392\u4ed6\u9501\uff1a\u5199\u9501\u6216 X \u9501\uff0c\u81ea\u5df1\u53ef\u8bfb\u53ef\u5199\uff0c\u5176\u4ed6\u4e8b\u52a1\u65e0\u6cd5\u5bf9\u6570\u636e\u8fdb\u884c\u52a0\u9501\u6216\u64cd\u4f5c \u5171\u4eab\u9501\uff1a\u8bfb\u9501\u6216 S \u9501\uff0c\u81ea\u5df1\u53ea\u53ef\u8bfb\uff0c\u5176\u4ed6\u4e8b\u52a1\u53ea\u80fd\u52a0 S \u9501 \u5c01\u9501\u534f\u8bae\uff1a \u4e00\u7ea7\u5c01\u9501\u534f\u8bae\uff1a\u5bf9\u6570\u636e\u8fdb\u884c\u5199\u64cd\u4f5c\u65f6\u5fc5\u987b\u52a0X\u9501\uff0c\u4e8b\u52a1\u7ed3\u675f\u91ca\u653e\uff0c\u89e3\u51b3\u2018\u4e22\u5931\u66f4\u65b0\u2019 \u4e8c\u7ea7\u5c01\u9501\u534f\u8bae\uff1a\u4e00\u7ea7\u5c01\u9501\u534f\u8bae\u518d\u52a0\u4e0a\u5728\u8bfb\u6570\u636e\u524d\u52a0\u4e0a S \u9501\uff0c\u8bfb\u5b8c\u5373\u91ca\u653e\uff0c\u8fdb\u4e00\u6b65\u89e3\u51b3\u2018\u8bfb\u810f\u6570\u636e\u2019 \u4e09\u7ea7\u5c01\u9501\u534f\u8bae\uff1a\u4e00\u7ea7\u5c01\u9501\u534f\u8bae\u518d\u52a0\u4e0a\u5728\u8bfb\u6570\u636e\u524d\u52a0\u4e0a S \u9501\uff0c\u4e8b\u52a1\u7ed3\u675f\u91ca\u653e\uff0c\u8fdb\u4e00\u6b65\u89e3\u51b3\u2018\u4e0d\u53ef\u91cd\u590d\u5ea6\u2019 \u4e24\u6bb5\u9501\u534f\u8bae\uff1a\u6240\u6709\u4e8b\u52a1\u5fc5\u987b\u5206\u4e24\u4e2a\u9636\u6bb5\u5bf9\u6570\u636e\u52a0\u9501\u548c\u89e3\u9501\uff0c\u5373\u540c\u610f\u4e0a\u9501\uff0c\u7136\u540e\u518d\u7edf\u4e00\u89e3\u9501 \u6d3b\u9501 & \u6b7b\u9501\uff1a \u6d3b\u9501\uff1a\u5728\u5c01\u9501\u8fc7\u7a0b\u4e2d\u67d0\u4e2a\u4e8b\u52a1\u6c38\u8fdc\u5904\u4e8e\u7b49\u5f85\u7684\u72b6\u6001\u800c\u5f97\u4e0d\u5230\u5c01\u9501\u673a\u4f1a \u89e3\u51b3\u65b9\u6cd5\uff1a\u5148\u6765\u5148\u670d\u52a1 \u6b7b\u9501\uff1a\u82e5\u5e72\u4e8b\u52a1\u90fd\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\uff0c\u76f8\u4e92\u7b49\u5f85\u5bf9\u65b9\u91ca\u653e\u9501 \u89e3\u51b3\u65b9\u6cd5\uff1a\u9884\u9632\u6cd5\uff1a\u987a\u5e8f\u7533\u8bf7\u6cd5\uff0c\u4e00\u6b21\u7533\u8bf7\u6cd5 \u200b \u89e3\u9664\u6cd5\uff1a\u5b9a\u65f6\u6cd5\uff0c\u6b7b\u9501\u68c0\u6d4b\u6cd5 \u6570\u636e\u5e93\u6062\u590d \u00b6 \u6545\u969c\u79cd\u7c7b \u00b6 \u7cfb\u7edf\u6545\u969c \u4e8b\u52a1\u6545\u969c \u4ecb\u8d28\u6545\u969c \u8ba1\u7b97\u673a\u75c5\u6bd2 \u8bef\u64cd\u4f5c \u81ea\u7136\u707e\u5bb3 \u76d7\u7a83 \u6570\u636e\u5e93\u6062\u590d\u6280\u672f \u00b6 \u628a\u6570\u636e\u5e93\u4ece\u9519\u8bef\u72b6\u6001\u6062\u590d\u5230\u67d0\u4e2a\u6b63\u786e\u7684\u72b6\u6001 \u6570\u636e\u5e93\u6062\u590d\u673a\u5236\u7684\u4e24\u4e2a\u65b9\u9762\uff1a\u4e00\u662f\u5efa\u7acb\u5197\u4f59\u6570\u636e\uff0c\u4e8c\u662f\u7cfb\u7edf\u51fa\u73b0\u6545\u969c\u540e\u5229\u7528\u5197\u4f59\u6570\u636e\u5c06\u6570\u636e\u5e93\u6062\u590d\u5230\u67d0\u4e2a\u6b63\u5e38\u7684\u72b6\u6001 \u5907\u4efd\uff1a\u6570\u636e\u8f6c\u5b58\uff0c\u767b\u5f55\u65e5\u5fd7\u6587\u4ef6 \u53c2\u8003 \u00b6 \u6570\u636e\u5e93\u57fa\u7840\u6559\u7a0b\uff08\u7b2c\u4e09\u7248\uff09 \u987e\u97f5\u534e \u7535\u5b50\u5de5\u4e1a\u51fa\u7248\u793e","title":"\u6570\u636e\u5e93\u7cfb\u7edf"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_1","text":"","title":"\u6570\u636e\u5e93\u7cfb\u7edf"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_2","text":"","title":"\u7b2c\u4e00\u7ae0 \u6570\u636e\u5e93\u6982\u89c8"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_3","text":"\u4eba\u5de5\u7ba1\u7406\u9636\u6bb5\uff1a\u4e0d\u80fd\u957f\u671f\u4fdd\u5b58\uff0c\u4e0d\u5177\u6709\u72ec\u7acb\u6027\uff0c\u4e0d\u5171\u4eab \u6587\u4ef6\u7cfb\u7edf\u9636\u6bb5\uff1a\u957f\u671f\u4fdd\u5b58\uff0c\u72ec\u7acb\u6027\u5dee\uff0c\u5171\u4eab\u6027\u5dee\uff0c\u5197\u4f59\u5ea6\u5927\uff0c \u6570\u636e\u5e93\u7cfb\u7edf\u9636\u6bb5\uff1a\u7279\u70b9\uff1a1.\u6570\u636e\u7ed3\u6784\u5316 2.\u5171\u4eab\u6027\u9ad8\uff0c\u5197\u4f59\u5ea6\u4f4e\uff0c\u6613\u4e8e\u6269\u5145 3.\u6570\u636e\u72ec\u7acb\u6027\u9ad8 4.\u6570\u636e\u7edf\u4e00\u7ba1\u7406\u4e0e\u63a7\u5236","title":"\u6570\u636e\u5e93\u53d1\u5c55\u4e09\u9636\u6bb5"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_4","text":"\u6570\u636e\u5e93 \u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\uff08DBMS\uff09 \u6570\u636e\u5e93\u7684\u5e94\u7528\u7a0b\u5e8f \u6570\u636e\u5e93\u7cfb\u7edf\u7684\u4eba\u5458\uff1a\u7ba1\u7406\u5458\uff08DBA\uff09 ...","title":"\u6570\u636e\u5e93\u7cfb\u7edf\u7ec4\u6210"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_5","text":"\u4e09\u7ea7\u6a21\u5f0f\uff1a\u5916\u6a21\u5f0f\uff0c\u6a21\u5f0f\uff0c\u5185\u6a21\u5f0f \u6a21\u5f0f\uff1a\u4e5f\u79f0\u903b\u8f91\u6a21\u5f0f\uff0c\u4e00\u4e2a\u6570\u636e\u5e93\u53ea\u6709\u4e00\u4e2a\u6a21\u5f0f\uff0c\u662f\u6570\u636e\u5e93\u5168\u4f53\u6570\u636e\u7684\u903b\u8f91\u7ed3\u6784\u548c\u7279\u5f81\u7684\u63cf\u8ff0 \u5916\u6a21\u5f0f\uff1a\u4e5f\u79f0\u5b50\u6a21\u5f0f\u6216\u7528\u6237\u6a21\u5f0f\uff0c\u662f\u6a21\u5f0f\u7684\u5b50\u96c6\uff0c\u4e00\u4e2a\u6570\u636e\u5e93\u53ef\u4ee5\u6709\u591a\u4e2a\u5916\u6a21\u5f0f \u5185\u6a21\u5f0f\uff1a\u4e5f\u79f0\u5b58\u50a8\u6a21\u5f0f\uff0c\u53ea\u6709\u4e00\u4e2a\u5185\u6a21\u5f0f\uff0c\u662f\u6570\u636e\u7269\u7406\u7ed3\u6784\u548c\u5b58\u50a8\u65b9\u5f0f\u7684\u63cf\u8ff0 \u4e8c\u7ea7\u6620\u50cf\uff1a \u5916\u6a21\u5f0f/\u6a21\u5f0f\u6620\u50cf\uff1a\u6a21\u5f0f\u6539\u53d8\u65f6\uff0c\u5bf9\u6620\u50cf\u505a\u51fa\u76f8\u5e94\u7684\u6539\u53d8\u53ef\u4ee5\u4f7f\u5916\u6a21\u5f0f\u4fdd\u6301\u4e0d\u53d8\uff0c\u4fdd\u8bc1\u6570\u636e\u548c\u7a0b\u5e8f\u7684\u903b\u8f91\u72ec\u7acb\u6027 \u6a21\u5f0f/\u5185\u6a21\u5f0f\u6620\u50cf\uff1a\u5185\u6a21\u5f0f\u6539\u53d8\u65f6\uff0c\u5bf9\u6620\u50cf\u505a\u51fa\u76f8\u5e94\u7684\u6539\u53d8\u53ef\u4ee5\u4f7f\u6a21\u5f0f\u4fdd\u6301\u4e0d\u53d8\uff0c\u4fdd\u8bc1\u6570\u636e\u7684\u7269\u7406\u72ec\u7acb\u6027","title":"\u4e09\u7ea7\u6a21\u5f0f\u4e0e\u4e8c\u7ea7\u6620\u50cf"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_6","text":"\u529f\u80fd\uff1a\u6570\u636e\u5b9a\u4e49\uff0c\u6570\u636e\u64cd\u7eb5\uff0c\u6570\u636e\u5e93\u7684\u4e8b\u52a1\u7ba1\u7406\u548c\u8fd0\u884c\u7ba1\u7406\uff0c\u6570\u636e\u5e93\u7684\u521b\u5efa\u548c\u7ef4\u62a4","title":"\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_7","text":"\u5206\u7c7b\uff1a\u6982\u5ff5\u6570\u636e\u6a21\u578b\uff0c\u903b\u8f91\u6570\u636e\u6a21\u578b\uff0c\u7269\u7406\u6570\u636e\u6a21\u578b \u6982\u5ff5\u6570\u636e\u6a21\u578b\uff1aER\u56fe ER\u6a21\u578b\u4e09\u8981\u7d20\uff1a\u5b9e\u4f53\uff0c\u5c5e\u6027\uff0c\u8054\u7cfb \u903b\u8f91\u6570\u636e\u6a21\u578b\uff08\u4e00\u822c\u90fd\u76f4\u63a5\u53eb\u6570\u636e\u6a21\u578b\uff09\uff1a\u5c42\u6b21\u6a21\u578b\uff0c\u7f51\u72b6\u6a21\u578b\uff0c\u5173\u7cfb\u6a21\u578b\uff0c\u9762\u5411\u5bf9\u8c61\u6a21\u578b \u6570\u636e\u6a21\u578b\u4e09\u8981\u7d20\uff1a\u6570\u636e\u7ed3\u6784\uff0c\u6570\u636e\u64cd\u4f5c\uff0c\u6570\u636e\u5b8c\u6574\u6027\u7ea6\u675f \u5c42\u6b21\u6a21\u578b\u662f\u4e00\u68f5\u6811\uff0c\u5173\u7cfb\u6a21\u578b\u662f\u4e00\u5f20\u4e8c\u7ef4\u8868","title":"\u6570\u636e\u6a21\u578b"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_8","text":"","title":"\u7b2c\u4e8c\u7ae0 \u5173\u7cfb\u6570\u636e\u5e93\u6a21\u578b"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_9","text":"\u5217\u662f\u540c\u8d28\u7684\uff0c\u5373\u6570\u636e\u7c7b\u578b\u76f8\u540c \u4e0d\u540c\u7684\u5217\u53ef\u4ee5\u51fa\u5176\u540c\u4e00\u4e2a\u57df\uff0c\u4f46\u5c5e\u6027\u540d\u8981\u4e0d\u540c \u5217\u7684\u987a\u5e8f\u53ef\u4ee5\u4efb\u610f\u4ea4\u6362 \u4efb\u610f\u4e24\u4e2a\u5143\u7ec4\u4e0d\u53ef\u4ee5\u5b8c\u5168\u76f8\u540c \u5143\u7ec4\u987a\u5e8f\u53ef\u4ee5\u4efb\u610f \u5206\u91cf\u5fc5\u987b\u53d6\u539f\u5b50\u503c\uff0c\u5373\u8981\u6c42\u6bcf\u4e2a\u5206\u91cf\u90fd\u662f\u4e0d\u53ef\u518d\u5206\u7684\u6570\u636e\u9879","title":"\u5173\u7cfb\u7684\u6027\u8d28"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_10","text":"\u4e00\u4e2a\u5173\u7cfb\u5c31\u662f\u4e00\u4e2a\u89c4\u8303\u5316\u7684\u4e8c\u7ef4\u8868\uff0c\u7b1b\u5361\u5c14\u79ef\u7684\u6709\u610f\u4e49\u7684\u6709\u9650\u5b50\u96c6 \u4e00\u4e2a\u5173\u7cfb\u7531\u5173\u7cfb\u540d\uff0c\u5173\u7cfb\u6a21\u5f0f\uff0c\u5173\u7cfb\u5b9e\u4f8b\u7ec4\u6210 \u5143\u7ec4\uff0c\u5c5e\u6027\uff0c\u7801\uff0c\u57df\uff0c\u5206\u91cf\uff0c\u5173\u7cfb\u6a21\u5f0f \u5019\u9009\u7801\uff1a\u552f\u4e00\u6027\uff0c\u6700\u5c0f\u6027 \u8d85\u7801\uff1a\u53ef\u4ee5\u552f\u4e00\u7684\u786e\u5b9a\u4e00\u884c\uff0c\u5019\u9009\u7801\u662f\u8d85\u7801\u7684\u5b50\u96c6 \u4e3b\u7801\uff1a\u5982\u679c\u7531\u591a\u4e2a\u5019\u9009\u7801\uff0c\u9009\u4e00\u4e2a \u4e3b\u5c5e\u6027\uff1a\u5305\u542b\u5728\u5019\u9009\u7801\u4e2d\u7684\u5404\u5c5e\u6027 \u5916\u7801","title":"\u5173\u7cfb\u6570\u636e\u7ed3\u6784"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_11","text":"\u5173\u7cfb\u4ee3\u6570\uff0c\u5173\u7cfb\u6f14\u7b97\uff0c\u57df\u6f14\u7b97\uff0cSQL","title":"\u5173\u7cfb\u6570\u636e\u8bed\u8a00\u7684\u5206\u7c7b"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_12","text":"\u4f20\u7edf\u7684\u96c6\u5408\u8fd0\u7b97\uff1a\u7b1b\u5361\u5c14\u79ef\uff0c\u5e76\uff0c\u4ea4\uff0c\u5dee \u4e13\u95e8\u7684\u5173\u7cfb\u8fd0\u7b97\uff1a\u9009\u62e9\uff0c\u6295\u5f71\uff0c\u8fde\u63a5\uff08\u7b49\u503c\uff0c\u81ea\u7136\u8fde\u63a5\uff0c\u5916\u8fde\u63a5\uff0c\u5de6\u5916\uff0c\u53f3\u5916\uff09\uff0c\u9664\u6cd5","title":"\u5173\u7cfb\u64cd\u4f5c &amp; \u5173\u7cfb\u4ee3\u6570"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_13","text":"\u5b9e\u4f53\u5b8c\u6574\u6027 \u53c2\u7167\u5b8c\u6574\u6027 \u7528\u6237\u81ea\u5b9a\u4e49\u5b8c\u6574\u6027 \u5217\u7ea7\u5b8c\u6574\u6027\u7ea6\u675f\u53ea\u80fd\u6d89\u53ca\u4e00\u4e2a\u5c5e\u6027\uff0c\u8868\u7ea7\u53ef\u4ee5\u6d89\u53ca\u591a\u4e2a\u5c5e\u6027","title":"\u6570\u636e\u5b8c\u6574\u6027"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#sql","text":"","title":"\u7b2c\u4e09\u7ae0 SQL\u8bed\u8a00"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#sql_1","text":"\u7279\u70b9\uff1a\u7efc\u5408\u7edf\u4e00\uff0c\u9ad8\u5ea6\u975e\u8fc7\u7a0b\u5316\uff0c\u9762\u5411\u96c6\u5408\u7684\u64cd\u4f5c\u65b9\u5f0f\uff0c\u4ee5\u540c\u4e00\u79cd\u8bed\u6cd5\u7ed3\u6784\u63d0\u4f9b\u4e24\u79cd\u4f7f\u7528\u65b9\u5f0f\uff0c\u8bed\u8a00\u7b80\u6d01\u6613\u5b66\u6613\u7528 \u6570\u636e\u5b9a\u4e49\uff08DDL\uff09\uff0c\u6570\u636e\u64cd\u7eb5\uff08DML\uff09\uff0c\u6570\u636e\u63a7\u5236\uff08DCL\uff09","title":"SQL\u6982\u8ff0"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#bnf","text":"<> \u5fc5\u9009\u9879 [ ] \u53ef\u4ee5\u51fa\u73b0\u4e00\u6b21\u6216\u4e0d\u51fa\u73b0 { } \u53ef\u4ee5\u591a\u6b21\u51fa\u73b0\u6216\u4e0d\u51fa\u73b0 | \u591a\u9009\u4e00","title":"\u5df4\u79d1\u65af\u8303\u5f0f\uff08BNF\uff09"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_14","text":"","title":"\u6570\u636e\u5b9a\u4e49"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_15","text":"create database < \u6570\u636e\u5e93\u540d > use < \u6570\u636e\u5e93\u540d > alter database < \u6570\u636e\u5e93\u540d > drop database < \u6570\u636e\u5e93\u540d >","title":"\u6570\u636e\u5e93"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_16","text":"\u5b9a\u4e49 create table < \u8868\u540d > ( < \u5217\u540d >< \u6570\u636e\u7c7b\u578b > [ < \u5217\u7ea7\u5b8c\u6574\u6027\u7ea6\u675f > ] { , < \u5217\u540d >< \u6570\u636e\u7c7b\u578b > [ < \u5217\u7ea7\u5b8c\u6574\u6027\u7ea6\u675f > ] } [, < \u8868\u7ea7\u5b8c\u6574\u6027\u7ea6\u675f > ] ) \u5217\u7ea7\u7ea6\u675f\uff1a not null, default, unique, check, primary key, foreign key foreign key: foreign key (<\u5217\u540d>) references <\u5916\u8868\u540d>(<\u5916\u8868\u5217\u540d>) \u4fee\u6539 alter table < \u8868\u540d > alter column < \u5217\u540d > < \u65b0\u6570\u636e\u7c7b\u578b > [ null | not null ] | add < \u5217\u540d > < \u6570\u636e\u7c7b\u578b > [ \u7ea6\u675f ] | drop column < \u5217\u540d > | add [ constraint < \u7ea6\u675f\u540d > ] < \u7ea6\u675f\u5b9a\u4e49 > | drop constraint < \u7ea6\u675f\u540d > \u5220\u9664 drop table < \u57fa\u672c\u8868\u540d >","title":"\u57fa\u672c\u8868"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_17","text":"\u5206\u7c7b\uff1a\u805a\u7c07\u7d22\u5f15\u548c\u975e\u805a\u7c07\u7d22\u5f15 \u9ed8\u8ba4\u975e\u805a\u7c07\uff0c\u805a\u7c07\u7d22\u5f15\u53ea\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a \u805a\u7c07\u7d22\u5f15\uff1a\u7d22\u5f15\u9879\u987a\u5e8f\u548c\u7269\u7406\u987a\u5e8f\u4e00\u81f4 \u5b9a\u4e49 create [ unique ][ clustered | notclustered ] index < \u7d22\u5f15\u540d > on < \u57fa\u672c\u8868\u540d > ( < \u5217\u540d > [ asc | desc ] [ { ,( < \u5217\u540d > [ asc | desc ] } ...]) \u5220\u9664 drop index < \u8868\u540d > . < \u7d22\u5f15\u540d >","title":"\u7d22\u5f15"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_18","text":"select [ all | distinct ] < \u76ee\u6807\u5217\u8868\u8fbe\u5f0f > [, < \u76ee\u6807\u5217\u8868\u8fbe\u5f0f > ]... from < \u8868\u540d\u6216\u89c6\u56fe\u540d > [, < \u8868\u540d\u6216\u89c6\u56fe\u540d > ]... [ where < \u6761\u4ef6\u8868\u8fbe\u5f0f > ] [ group by < \u5217\u540d 1 > ] [ having < \u6761\u4ef6\u8868\u8fbe\u5f0f > ] -- having \u7528\u4e8e\u6307\u5b9a\u5206\u7ec4\u8fc7\u6ee4\u6761\u4ef6 [ order by < \u5217\u540d 2 > [ asc | desc ]]","title":"\u6570\u636e\u67e5\u8be2"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_19","text":"select \u5ba2\u6237\u7f16\u53f7 as cno from CustomerInfo select 'cno' = \u5ba2\u6237\u7f16\u53f7 # = \u5217\u540d\u5fc5\u987b\u5199\u53f3\u8fb9 from CustomerInfo","title":"\u66f4\u6539\u7ed3\u679c\u5217\u6807\u9898"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_20","text":"select < \u5217\u540d > = case when \u6761\u4ef6 1 then \u8868\u8fbe\u5f0f 1 ... else \u8868\u8fbe\u5f0f end from < \u8868\u540d > where < \u6761\u4ef6\u8868\u8fbe\u5f0f >","title":"\u66ff\u6362\u67e5\u8be2\u7ed3\u679c\u4e2d\u7684\u6570\u636e"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_21","text":"select unique < \u5217\u540d > from < \u8868\u540d >","title":"\u53bb\u9664\u91cd\u590d\u884c"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_22","text":"% \u8868\u793a\u4efb\u610f\u957f\u5ea6\u7684\u5b57\u7b26\u4e32 _ \u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26 select * from < \u8868\u540d > where < \u5217\u540d > like '\u6c5f\u82cf%' \u5982\u679c\u67e5\u8be2\u7684\u6761\u4ef6\u4e2d\u5305\u542b\u901a\u914d\u7b26\u9700\u8981\u8f6c\u4e49\uff1a escape\\ where \u5fae\u4fe1\u53f7 like 'wxid\\_%' escape '\\'","title":"\u6a21\u7cca\u67e5\u8be2"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_23","text":"< \u8868\u8fbe\u5f0f > is [ not ] null","title":"\u7a7a\u503c\u6bd4\u8f83"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_24","text":"[ order by < \u5217\u540d > [ asc | desc ]] [, < \u5217\u540d > [ asc | desc ]]...] # \u9ed8\u8ba4 asc \u5347\u5e8f","title":"\u5bf9\u7ed3\u679c\u96c6\u6392\u5e8f"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_25","text":"group by < \u8868\u8fbe\u5f0f > # eg select \u5546\u54c1\u7c7b\u522b , count ( \u5546\u54c1\u7f16\u53f7 ) as '\u79cd\u6570' from GoodsInfo group by \u5546\u54c1\u7c7b\u522b","title":"\u5bf9\u7ed3\u679c\u96c6\u5206\u7c7b"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#having","text":"having \u8bed\u53e5\u7528\u5728 group by \u5b50\u53e5\u540e\u6765\u8fdb\u884c\u7b5b\u9009\uff0c\u53ea\u8f93\u51fa\u7b26\u5408\u6761\u4ef6\u7684 [ having < \u6761\u4ef6 > ] # eg select \u5546\u54c1\u7c7b\u522b , count ( \u5546\u54c1\u7f16\u53f7 ) as '\u79cd\u6570' from GoodsInfo group by \u5546\u54c1\u7c7b\u522b having count ( * ) > 1","title":"having\u7b5b\u9009"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_26","text":"\u805a\u5408\u51fd\u6570 \u4e0d\u5141\u8bb8 \u5d4c\u5957 sum | avg () max | min () count () # eg select count ( \u5ba2\u6237\u7f16\u53f7 ) as '\u5ba2\u6237\u6570' from OrderList","title":"\u805a\u5408\u51fd\u6570"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_27","text":"\u8fde\u63a5\u8c13\u8bcd from < \u8868 1 > [ \u8868 1 \u522b\u540d ], < \u8868 2 > [ \u8868 2 \u522b\u540d ][, < \u8868 3 > [ \u8868 3 \u522b\u540d ]...] \u4ee5join\u5173\u952e\u5b57\u8fde\u63a5 # \u5185\u8fde\u63a5 \u9ed8\u8ba4\u5185\u8fde\u63a5 inner join ( inner\u53ef\u4ee5\u4e0d\u5199 ) select ... # 2 \u4e2a\u8868 from < \u8868 1 > join < \u8868 2 > on < \u6761\u4ef6 > where ... select ... # 3 \u4e2a\u8868 from < \u8868 1 > join < \u8868 2 > join < \u8868 3 > on < \u6761\u4ef6 1 > on < \u6761\u4ef6 2 > where ... # \u5916\u8fde\u63a5 outer join # \u5de6\u5916 : left outer join \u53f3\u5916 : right outer join \u5b8c\u5168\u5916 : full outer join","title":"\u8fde\u63a5\u67e5\u8be2"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_28","text":"\u5b50\u67e5\u8be2\u4e0d\u80fd\u5305\u542b order by \uff0c\u5373 order by \u53ea\u80fd\u5bf9\u6700\u7ec8\u67e5\u8be2\u6392\u5e8f","title":"\u5d4c\u5957\u67e5\u8be2"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#in","text":"where \u6240\u5728\u7701\u5e02 in ( \u5b50\u67e5\u8be2 )","title":"\u5e26 in \u7684\u5b50\u67e5\u8be2"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_29","text":"where \u6570\u91cf > ( \u5b50\u67e5\u8be2 ) # \u8fd9\u91cc\u7684\u5b50\u67e5\u8be2\u8981\u6c42\u7ed3\u679c\u53ea\u6709\u4e00\u4e2a","title":"\u5e26\u6bd4\u8f83\u8fd0\u7b97\u7b26\u7684\u5b50\u67e5\u8be2"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#all-any","text":"\u7528\u4ee5\u89e3\u9664\u6bd4\u8f83\u8fd0\u7b97\u7b26\u8981\u6c42\u5b50\u67e5\u8be2\u7684\u7ed3\u679c\u96c6\u5143\u7d20\u53ea\u80fd\u6709\u4e00\u4e2a\u7684\u9650\u5236 where \u6570\u91cf > all ( \u5b50\u67e5\u8be2 ) # \u7b49\u6548\u4e8e where \u6570\u91cf > ( \u5e26 MAX \u7684\u5b50\u67e5\u8be2 ) # \u5f53\u7136\u8fd9\u91cc\u5b50\u67e5\u8be2\u53ea\u80fd\u67e5\u8be2\u4e00\u5217","title":"\u5e26 ALL / ANY \u8c13\u8bcd\u7684\u5b50\u67e5\u8be2"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#exists","text":"[ not ] exists ( \u5b50\u67e5\u8be2 )","title":"\u5e26 EXISTS \u8c13\u8bcd\u7684\u5b50\u67e5\u8be2"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_30","text":"select \u8bed\u53e5\u7684\u67e5\u8be2\u7ed3\u679c\u662f\u7ed3\u679c\u96c6\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fdb\u884c\u96c6\u5408\u8fd0\u7b97 \u5e76 UNION \u4ea4 INTERSECT \u5dee EXCEPT \u8fd9\u91cc\u7684\u7ed3\u679c\u96c6\u5217\u6570\u5fc5\u987b\u76f8\u540c\uff0c\u5bf9\u5e94\u5217\u7684\u6570\u636e\u7c7b\u578b\u4e5f\u5fc5\u987b\u76f8\u540c select ... union select ... select ... intersect select ...","title":"\u96c6\u5408\u67e5\u8be2"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_31","text":"","title":"\u6570\u636e\u66f4\u65b0\uff08\u63d2\u5165&amp;\u4fee\u6539&amp;\u5220\u9664\uff09"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_32","text":"# \u63d2\u5165\u5143\u7ec4 insert into < \u8868\u540d > [( < \u5217 1 > [, < \u5217 2 > ...])] values ( < \u5e38\u91cf 1 > [, < \u5e38\u91cf 2 > ...]) # \u63d2\u5165\u5b50\u67e5\u8be2 insert into < \u8868\u540d > [( < \u5217 1 > [, < \u5217 2 > ...])] < \u5b50\u67e5\u8be2 >","title":"\u6570\u636e\u63d2\u5165"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_33","text":"update < \u8868\u540d > [[ as ] < \u522b\u540d > ] set < \u5217\u540d > = < \u5e38\u91cf > [, < \u5217\u540d > = < \u5e38\u91cf > ...] [ where < \u6761\u4ef6\u8868\u8fbe\u5f0f > ]","title":"\u6570\u636e\u4fee\u6539"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_34","text":"delete [ from ] < \u8868\u540d > [ where < \u6761\u4ef6\u8868\u8fbe\u5f0f > ]","title":"\u6570\u636e\u5220\u9664"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_35","text":"\u865a\u8868\uff0c\u53ef\u4ee5\u7528\u4ee5\u4fdd\u62a4\u6570\u636e\u5b89\u5168\u548c\u6ee1\u8db3\u4e0d\u540c\u7528\u6237\u7684\u9700\u6c42","title":"\u89c6\u56fe"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_36","text":"create view < \u89c6\u56fe\u540d > [( < \u5217\u540d > [, < \u5217\u540d > ])] as < select \u67e5\u8be2\u8bed\u53e5 >","title":"\u521b\u5efa\u89c6\u56fe"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_37","text":"alter view < \u89c6\u56fe\u540d > [( < \u5217\u540d > [, < \u5217\u540d > ])] as < select \u67e5\u8be2\u8bed\u53e5 >","title":"\u4fee\u6539\u89c6\u56fe"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_38","text":"drop view < \u89c6\u56fe\u540d >","title":"\u5220\u9664\u89c6\u56fe"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_39","text":"\u548c \u57fa\u672c\u8868 \u4e00\u81f4","title":"\u89c6\u56fe\u67e5\u8be2"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_40","text":"\u9632\u6b62\u51fa\u73b0\u8303\u56f4\u5916\u7684\u6570\u636e\u53ef\u4ee5\u5728\u5b9a\u4e49\u89c6\u56fe\u65f6\u52a0\u4e0a with check option \u63d2\u5165\u6570\u636e\uff0c\u4fee\u6539\u6570\u636e\uff0c\u5220\u9664\u6570\u636e\u90fd\u548c \u57fa\u672c\u8868 \u4e00\u81f4 \u4f46\u6709\u5f88\u591a\u9650\u5236\uff0c\u5982\u679c\u66f4\u65b0\u6210\u529f\u4e86\u4f1a\u6620\u5c04\u5230\u57fa\u672c\u8868","title":"\u89c6\u56fe\u66f4\u65b0"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_41","text":"\u5e7f\u4e49\uff1a\u6570\u636e\u5e93\u53ca\u5176\u5e94\u7528\u7cfb\u7edf\u7684\u8bbe\u8ba1\uff0c\u5373\u8bbe\u8ba1\u6574\u4e2a\u7684\u6570\u636e\u5e93\u5e94\u7528\u7cfb\u7edf \u72ed\u4e49\uff1a\u6570\u636e\u5e93\u672c\u8eab\u7684\u8bbe\u8ba1\uff0c\u5373\u8bbe\u8ba1\u6570\u636e\u5e93\u7684\u5404\u7ea7\u6a21\u5f0f\u5e76\u5efa\u7acb\u6570\u636e\u5e93 \u6570\u636e\u5e93\u8bbe\u8ba1\u7684 6 \u4e2a\u9636\u6bb5\uff1a \u9700\u6c42\u5206\u6790\u9636\u6bb5\uff1a\u6570\u636e\u6d41\u56fe\uff0c\u6570\u636e\u5b57\u5178 \u6982\u5ff5\u7ed3\u6784\u8bbe\u8ba1\u9636\u6bb5\uff1a\u6982\u5ff5\u6570\u636e\u6a21\u578b ER \u56fe \u903b\u8f91\u7ed3\u6784\u8bbe\u8ba1\u9636\u6bb5 \u7269\u7406\u7ed3\u6784\u8bbe\u8ba1\u9636\u6bb5 \u6570\u636e\u5e93\u5b9e\u65bd\u9636\u6bb5 \u6570\u636e\u5e93\u8fd0\u884c\u4e0e\u7ef4\u62a4\u9636\u6bb5","title":"\u7b2c\u56db\u7ae0 \u6570\u636e\u5e93\u8bbe\u8ba1"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_42","text":"\u81ea\u9876\u5411\u4e0b\uff0c\u81ea\u5e95\u5411\u4e0a\uff0cER\u8bbe\u8ba1\u65b9\u6cd5\uff0cEER\u8bbe\u8ba1\u65b9\u6cd5 \u7531\u5c40\u90e8\u89c6\u56fe\u5230\u5168\u5c40\u6982\u5ff5\u7ed3\u6784\uff1a\u4e00\u6b21\u96c6\u6210\uff0c\u591a\u6b21\u96c6\u6210 \u96c6\u6210\u5305\u62ec\uff1a\u5408\u5e76\uff0c\u6d88\u9664\u5197\u4f59 \u5408\u5e76\u7684\u4e09\u79cd\u7c7b\u578b\u7684\u51b2\u7a81\uff1a\u547d\u540d\u51b2\u7a81\uff0c\u5c5e\u6027\u51b2\u7a81\uff0c\u6982\u5ff5\u51b2\u7a81","title":"\u6982\u5ff5\u7ed3\u6784\u8bbe\u8ba1"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_43","text":"\u6b65\u9aa4\uff1a \u5c06\u6982\u5ff5\u6a21\u578b\u8f6c\u5316\u4e3a\u4e00\u822c\u7684\u5173\u7cfb\uff0c\u7f51\u72b6\uff0c\u5c42\u6b21\u6a21\u578b \u5bf9\u6570\u636e\u6a21\u578b\u8fdb\u884c\u4f18\u5316 \u8bbe\u8ba1\u7528\u6237\u5916\u6a21\u5f0f \u4e8c\u5143\u5173\u7cfb\uff1a1\u5bf91\uff0c1\u5bf9\u591a\uff0c\u591a\u5bf9\u591a","title":"\u903b\u8f91\u7ed3\u6784\u8bbe\u8ba1"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_44","text":"","title":"\u7b2c\u4e94\u7ae0 \u5173\u7cfb\u89c4\u8303\u5316\u7406\u8bba"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_45","text":"\u6570\u636e\u5197\u4f59\uff1a\u540c\u4e00\u6570\u636e\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u6570\u636e\u6587\u4ef6\u4e2d\u91cd\u590d\u50a8\u5b58 \u6570\u636e\u5197\u4f59\u4f1a\u5bfc\u81f4\u7684\u64cd\u4f5c\u5f02\u5e38\uff1a\u63d2\u5165\u5f02\u5e38\uff0c\u5220\u9664\u5f02\u5e38\uff0c\u4fee\u6539\u5f02\u5e38","title":"\u6570\u636e\u5197\u4f59\u548c\u64cd\u4f5c\u5f02\u5e38"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_46","text":"\u5206\u7c7b\uff1a \u5e73\u51e1\u51fd\u6570\u4f9d\u8d56\u548c\u975e\u5e73\u51e1\u51fd\u6570\u4f9d\u8d56 \u90e8\u5206\u51fd\u6570\u4f9d\u8d56\u4e0e\u5b8c\u5168\u51fd\u6570\u4f9d\u8d56 \u4f20\u9012\u51fd\u6570\u4f9d\u8d56 \u591a\u503c\u4f9d\u8d56\uff0c\u5e73\u51e1\u591a\u503c\u4f9d\u8d56","title":"\u51fd\u6570\u4f9d\u8d56"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_47","text":"\u7b2c\u4e00\u8303\u5f0f\uff1a\u6bcf\u4e2a\u5173\u7cfb\u6a21\u5f0f\u5fc5\u5b9a\u5c5e\u4e8e1NF \u7b2c\u4e8c\u8303\u5f0f\uff1a\u6ca1\u6709\u90e8\u5206\u51fd\u6570\u4f9d\u8d56\uff0c\u5c5e\u4e8e2NF \u7b2c\u4e09\u8303\u5f0f\uff1a\u4e0d\u5b58\u5728\u4f20\u9012\u51fd\u6570\u4f9d\u8d56\uff0c\u5c5e\u4e8e3NF BC\u8303\u5f0f\uff1a\u6bcf\u4e2a\u51b3\u5b9a\u56e0\u7d20\u90fd\u542b\u6709\u5019\u9009\u7801 \u7b2c\u56db\u8303\u5f0f\uff1a\u6240\u6709\u7684\u975e\u5e73\u51e1\u591a\u503c\u4f9d\u8d56\u7684\u51b3\u5b9a\u56e0\u7d20\u90fd\u542b\u6709\u7801","title":"\u8303\u5f0f"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_48","text":"","title":"\u6570\u636e\u4f9d\u8d56\u516c\u7406\u7cfb\u7edf"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_49","text":"\u8bbe\u53c8\u6ee1\u8db3\u51fd\u6570\u4f9d\u8d56\u96c6 F \u7684\u5173\u7cfb\u6a21\u5f0f \\(R<U, F>\\) \uff0c\u5bf9\u4e8e R \u7684\u4efb\u4e00\u5173\u7cfb r\uff0c\u82e5\u4e00\u4e2a\u5173\u7cfb\u4e2d\u51fd\u6570\u4f9d\u8d56 \\(X\\rightarrow Y\\) \u90fd\u6210\u7acb\uff0c\u5219\u79f0\u903b\u8f91\u8574\u542b \\(X\\rightarrow Y\\) \uff0c\u8bb0\u4e3a \\(F\\Rightarrow X\\rightarrow Y\\)","title":"\u903b\u8f91\u8574\u542b"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#armstrong","text":"\u7528\u9014\uff1a\u6c42\u7ed9\u5b9a\u5173\u7cfb\u6a21\u5f0f\u7684\u7801\uff0c\u4ece\u4e00\u7ec4\u51fd\u6570\u4f9d\u8d56\u6c42\u5f97\u8574\u542b\u7684\u51fd\u6570\u4f9d\u8d56 \u5bf9\u4e8e\u5173\u7cfb\u6a21\u5f0f \\(R<U,F>\\) \uff0c\u6709\u4e00\u4e0b\u5b9a\u5f8b \u81ea\u53cd\u5f8b\uff1a\u82e5 \\(Y\\subseteq X \\subseteq U\\) \uff0c\u5219 \\(F\\Rightarrow X\\rightarrow Y\\) \u589e\u5e7f\u5f8b\uff1a\u82e5 \\(F\\Rightarrow X\\rightarrow Y\\) \uff0c\u4e14 \\(Z\\subseteq U\\) \uff0c\u5219 \\(F\\Rightarrow ZX\\rightarrow ZY\\) \u4f20\u9012\u5f8b\uff1a\u82e5 \\(F\\Rightarrow X\\rightarrow Y\\) \u53ca \\(F\\Rightarrow Y\\rightarrow Z\\) \uff0c\u5219 \\(F\\Rightarrow X\\rightarrow Z\\) \u63a8\u7406\u53ef\u5f97\u4ee5\u4e0b\u89c4\u5219 \u5408\u5e76\u89c4\u5219\uff1a\u82e5 \\(X\\rightarrow Y,X\\rightarrow Z\\) \uff0c\u5219 \\(X\\rightarrow YZ\\) \u4f2a\u4f20\u9012\u89c4\u5219\uff1a\u82e5 \\(X\\rightarrow Y,WY\\rightarrow Z\\) \uff0c\u5219\u6709 \\(WX\\rightarrow Z\\) \u5206\u89e3\u89c4\u5219\uff1a\u82e5 \\(X\\rightarrow Y\\) \uff0c\u4e14 \\(Z\\subseteq Y\\) \uff0c\u5219\u6709 \\(X\\rightarrow Z\\)","title":"Armstrong \u516c\u7406\u7cfb\u7edf"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_50","text":"\\(X^+_F\\) \u79f0\u4e3a\u5c5e\u6027\u96c6 \\(X\\) \u5173\u4e8e\u51fd\u6570\u4f9d\u8d56\u96c6 \\(F\\) \u7684\u95ed\u5305 \u6c42 \\(X^+_F\\) \u7684\u65b9\u6cd5\uff1a\u5728\u51fd\u6570\u4f9d\u8d56 \\(F\\) \u627e\u5de6\u4fa7\u662f X \u7684\u5b50\u96c6\u7684\u4f9d\u8d56\u5e76\u4e0d\u65ad\u6269\u5927 \\(X\\) \u8fd9\u4e2a\u96c6\u5408\uff0c\u76f4\u5230\u4e0d\u80fd\u6269\u5927\u4e3a\u6b62","title":"\u51fd\u6570\u4f9d\u8d56\u96c6\u7684\u95ed\u5305"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_51","text":"\u51fd\u6570\u4f9d\u8d56\u96c6\u7b49\u4ef7\uff1a\u5982\u679c \\(G^+=F^+\\) \uff0c\u5219\u79f0\u51fd\u6570\u4f9d\u8d56\u96c6 \\(G\\) \u548c \\(F\\) \u7b49\u4ef7 / \u4e92\u4e3a\u8986\u76d6 \u6700\u5c0f\u4f9d\u8d56\u96c6\uff1a\u5982\u679c\u51fd\u6570\u4f9d\u8d56\u96c6 \\(F\\) \u6ee1\u8db3 $F $ \u4e2d\u4efb\u4e00\u51fd\u6570\u4f9d\u8d56\u7684\u53f3\u90e8\u4ec5\u6709\u5355\u4e00\u5c5e\u6027 \\(F\\) \u4e2d\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u51fd\u6570\u4f9d\u8d56 \\(X\\rightarrow A\\) \uff0c\u4f7f\u5f97 \\(F\\) \u4e0e \\(F-\\{X\\rightarrow A\\}\\) \u7b49\u4ef7 \\(F\\) \u4e2d\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u51fd\u6570\u4f9d\u8d56 \\(X\\rightarrow A\\) \uff0c \\(X\\) \u6709\u771f\u5b50\u96c6 \\(Z\\) \u4f7f\u5f97 \\(F\\) \u4e0e \\(F-\\{X\\rightarrow A\\}\\cup \\{Z\\rightarrow A\\}\\) \u7b49\u4ef7 \u5219\u79f0 \\(F\\) \u662f\u6700\u5c0f\u4f9d\u8d56\u96c6 \u6216 \u6700\u5c0f\u8986\u76d6\uff0c\u8bb0\u4e3a \\(F_{min}\\) \uff0c\u5373\u8981\u6c42\u51fd\u6570\u4f9d\u8d56\u96c6\u662f\u6700\u5c0f\u7684 \u6c42\u51fd\u6570\u4f9d\u8d56\u96c6 \\(F\\) \u7684 \\(F_{min}\\) \u7684\u65b9\u6cd5 \u5148\u5c06\u51fd\u6570\u4f9d\u8d56\u53f3\u4fa7\u53f3\u4fa7\u662f\u591a\u5c5e\u6027\u7684\u5206\u89e3\u5f00\u591a\u4e2a\u51fd\u6570\u4f9d\u8d56 \u7136\u540e\u9010\u4e00\u68c0\u67e5\u6bcf\u4e00\u4e2a\u51fd\u6570\u4f9d\u8d56\uff0c\u68c0\u67e5\u8fd9\u4e2a\u51fd\u6570\u4f9d\u8d56\u662f\u5426\u53ef\u53bb \u6700\u540e\u9010\u4e00\u68c0\u67e5\u6bcf\u4e00\u4e2a\u51fd\u6570\u4f9d\u8d56\u7684\u5de6\u4fa7\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5c5e\u6027\uff0c\u68c0\u67e5\u5355\u4e2a\u5c5e\u6027\u662f\u5426\u53ef\u53bb \u5176\u4ed6\u8003\u70b9\uff1a\u8ba1\u7b97\u7801\u7684\u7b97\u6cd5","title":"\u6700\u5c0f\u4f9d\u8d56\u96c6"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_52","text":"","title":"\u6a21\u5f0f\u5206\u89e3"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_53","text":"\u638c\u63e1\u5224\u65ad\u6a21\u5f0f\u5206\u89e3\u65e0\u635f\u8fde\u63a5\u6027\u7684\u7b97\u6cd5\uff0c\u7565","title":"\u65e0\u635f\u8fde\u63a5\u6027"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_54","text":"\u7565","title":"\u51fd\u6570\u4f9d\u8d56\u4fdd\u6301"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_55","text":"","title":"\u7b2c\u516d\u7ae0 \u6570\u636e\u5e93\u5e94\u7528\u5f00\u53d1"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#t-sql","text":"","title":"T-SQL"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_56","text":"declare @< \u5c40\u90e8\u53d8\u91cf\u540d > < \u6570\u636e\u7c7b\u578b > [, @< \u5c40\u90e8\u53d8\u91cf\u540d > < \u6570\u636e\u7c7b\u578b > ...] # \u58f0\u660e set @< \u5c40\u90e8\u53d8\u91cf\u540d > = < \u8868\u8fbe\u5f0f > # \u8d4b\u503c select @< \u5c40\u90e8\u53d8\u91cf\u540d > = < \u8868\u8fbe\u5f0f > [, @< \u5c40\u90e8\u53d8\u91cf\u540d > = < \u8868\u8fbe\u5f0f > ] # select \u53ef\u4ee5\u4e00\u6b21\u8d4b\u503c\u591a\u4e2a\u53d8\u91cf set @< \u5c40\u90e8\u53d8\u91cf\u540d > = ( select \u67e5\u8be2 ) # \u67e5\u8be2\u7ed3\u679c\u8d4b\u503c print \u5b57\u7b26\u4e32 | \u5c40\u90e8\u53d8\u91cf | \u5168\u5c40\u53d8\u91cf | \u51fd\u6570 # \u8f93\u51fa","title":"\u53d8\u91cf"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_57","text":"begin...end begin # \u4e00\u4e2a begin ... end \u662f\u4e00\u4e2a\u8bed\u53e5\u5757 SQL\u8bed\u53e51 SQL\u8bed\u53e52 ... end if...else if < \u6761\u4ef6\u8868\u8fbe\u5f0f > { \u8bed\u53e5 1 | \u8bed\u53e5\u5757 1 } # \u91cc\u9762\u6709 begin ... end [ else { \u8bed\u53e5 2 | \u8bed\u53e5\u5757 2 } ] while while < \u903b\u8f91\u8868\u8fbe\u5f0f > { \u8bed\u53e5 1 | \u8bed\u53e5\u5757 1 } # \u91cc\u9762\u6709 begin ... end break / continue / return \u7565","title":"\u6d41\u7a0b\u63a7\u5236\u8bed\u53e5"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_58","text":"","title":"\u51fd\u6570"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_59","text":"\u7565","title":"\u5185\u7f6e\u51fd\u6570"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_60","text":"\u6807\u91cf\u51fd\u6570 create function [ < \u6240\u6709\u8005 > .] < \u51fd\u6570\u540d > ([ { @< \u53c2\u6570\u540d > [ as ] < \u53c2\u6570\u7c7b\u578b > [ =< \u9ed8\u8ba4\u503c > ] } [,....] ]) returns < \u8fd4\u56de\u53c2\u6570\u7c7b\u578b > [ as ] begin < \u51fd\u6570\u4f53 > return < \u8fd4\u56de\u503c\u8868\u8fbe\u5f0f > end \u6807\u91cf\u51fd\u6570\u7684\u8c03\u7528 select @< \u53d8\u91cf\u540d > = dbo . < \u51fd\u6570\u540d > ( \u5b9e\u53c2 1 ,..., \u5b9e\u53c2 n ) # \u65b9\u5f0f 1 select exec @< \u53d8\u91cf\u540d > = dbo . < \u51fd\u6570\u540d > \u5b9e\u53c2 1 ,..., \u5b9e\u53c2 n # \u65b9\u5f0f 2 exec \u5185\u5d4c\u8868\u503c\u51fd\u6570 create function [ < \u6240\u6709\u8005 > .] < \u51fd\u6570\u540d > ([ { @< \u53c2\u6570\u540d > [ as ] < \u53c2\u6570\u7c7b\u578b > [ =< \u9ed8\u8ba4\u503c > ] } [,....] ]) returns table [ as ] begin return ( < select > \u8bed\u53e5 ) end \u5185\u5d4c\u8868\u503c\u51fd\u6570\u7684\u8c03\u7528 # \u53ea\u80fd\u901a\u8fc7 select select * from < \u51fd\u6570\u540d > ( \u53c2\u6570\u8868 ) \u591a\u8bed\u53e5\u8868\u503c\u51fd\u6570 create function [ < \u6240\u6709\u8005 > .] < \u51fd\u6570\u540d > ([ { @< \u53c2\u6570\u540d > [ as ] < \u53c2\u6570\u7c7b\u578b > [ =< \u9ed8\u8ba4\u503c > ] } [,....] ]) returns @ reuturn_variable table < \u8868\u7684\u5b9a\u4e49 > [ as ] begin < \u51fd\u6570\u4f53 > return end \u591a\u8bed\u53e5\u8868\u503c\u51fd\u6570 # \u53ea\u80fd\u901a\u8fc7 select select * from < \u51fd\u6570\u540d > ( \u53c2\u6570\u8868 ) \u5220\u9664\u51fd\u6570 drop function { [ < \u6240\u6709\u8005 > .] < \u51fd\u6570\u540d > } [,... n ]","title":"\u7528\u6237\u81ea\u5b9a\u4e49\u51fd\u6570"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_61","text":"","title":"\u6e38\u6807"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_62","text":"\u9759\u6001\u6e38\u6807 \u53ea\u8bfb \u52a8\u6001\u6e38\u6807 \u80fd\u591f\u53cd\u6620\u5bf9\u7ed3\u679c\u96c6\u4e2d\u6240\u505a\u7684\u66f4\u6539 \u53ea\u8fdb\u6e38\u6807 \u53ea\u652f\u6301\u4ece\u5934\u5230\u5c3e\u63d0\u53d6\u6570\u636e \u952e\u96c6\u9a71\u52a8\u6e38\u6807 \u53ef\u4ee5\u4fee\u6539\u57fa\u672c\u8868\u4e2d\u975e\u5173\u952e\u5b57\u5217\u7684\u503c\uff0c\u4f46\u4e0d\u53ef\u4ee5\u63d2\u5165\u6570\u636e","title":"\u6e38\u6807\u7c7b\u578b"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_63","text":"declare < \u6e38\u6807\u540d > cursor [ local | global ] -- \u6e38\u6807\u4f5c\u7528\u57df [ forword_only | scroll ] -- \u6e38\u6807\u79fb\u52a8\u65b9\u5411 [ static | keyset | dynamic | fast_forward ] -- \u6e38\u6807\u7c7b\u578b [ read_only | scroll_locks | optimistic ] -- \u8bbf\u95ee\u5c5e\u6027 [ type_warning ] -- \u7c7b\u578b\u8f6c\u6362\u8b66\u544a for < select\u8bed\u53e5 > [ for update [ of < \u5217\u540d > [,... n ]] -- \u53ef\u4fee\u6539\u7684\u5217","title":"\u58f0\u660e\u6e38\u6807"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_64","text":"open { { [ global ] < \u6e38\u6807\u540d > } | @< \u6e38\u6807\u53d8\u91cf\u540d > } -- eg select '\u6e38\u6807 KH_cur \u6570\u636e\u884c\u6570' = @@ CURSOR_ROWS","title":"\u6253\u5f00\u6e38\u6807"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_65","text":"fetch [ [ next | prior | first | last | absolute { n |@ nvar } | relative { n |@ nvar } ] from ] { { [ global ] < \u6e38\u6807\u540d > } | @< \u6e38\u6807\u53d8\u91cf\u540d > } [ into @ variable_name [,... n ]]","title":"\u8bfb\u53d6\u6e38\u6807"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_66","text":"close { { [ global ] < \u6e38\u6807\u540d > } |@< \u6e38\u6807\u53d8\u91cf\u540d > }","title":"\u5173\u95ed\u6e38\u6807"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_67","text":"deallocate { { [ global ] < \u6e38\u6807\u540d > } |@< \u6e38\u6807\u53d8\u91cf\u540d > }","title":"\u91ca\u653e\u6e38\u6807"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_68","text":"\u7565","title":"\u6e38\u6807\u53d8\u91cf"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_69","text":"CURSOR_STATUS ( 'loacl' | 'global' | 'variable' , '\u6e38\u6807\u540d' | '\u6e38\u6807\u53d8\u91cf\u540d' ) -- eg set @ statusVar = CURSOR_STATUS ( 'local' , 'CUR' )","title":"\u6e38\u6807\u51fd\u6570"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_70","text":"\u5b58\u50a8\u8fc7\u7a0b\u7f16\u8bd1\u548c\u4f18\u5316\u540e\u5b58\u653e\u5728\u6570\u636e\u5e93\u670d\u52a1\u5668\u4e0a\uff0c\u6267\u884c\u4e00\u6b21\u540e\u5b58\u653e\u5728 \u9ad8\u7f13 \u4e2d \u4f18\u70b9\uff1a \u63d0\u9ad8\u7cfb\u7edf\u6027\u80fd \u4ee3\u7801\u590d\u7528\uff0c\u6267\u884c\u6548\u7387\u9ad8","title":"\u5b58\u50a8\u8fc7\u7a0b"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_71","text":"create proc [ edure ] < \u5b58\u50a8\u8fc7\u7a0b\u540d > [ { @< \u53c2\u6570 >< \u6570\u636e\u7c7b\u578b > } [ = default ][ output ]] [,... n1 ] as < SQL\u8bed\u53e5 > [... n2 ]","title":"\u5b58\u50a8\u8fc7\u7a0b\u7684\u5b9a\u4e49"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_72","text":"[ exec [ ute ]] < \u5b58\u50a8\u8fc7\u7a0b\u540d > [[ @< \u53c2\u6570\u540d >= ] { < \u503c >|@< \u53d8\u91cf > [ output ] | [ default ] } [,... n ]] -- deaflut \u8868\u793a\u7528\u9ed8\u8ba4\u503c","title":"\u5b58\u50a8\u8fc7\u7a0b\u7684\u6267\u884c"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_73","text":"if exists ( select name from sysobjects where name = 'eg' and type = 'P' ) drop procedure eg -- \u5220\u9664\u51fd\u6570\u7b49\u540c\u7406","title":"\u5220\u9664\u540c\u540d\u5b58\u50a8\u8fc7\u7a0b"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_74","text":"alter proc [ edure ] < \u5b58\u50a8\u8fc7\u7a0b\u540d > [ { @< \u53c2\u6570 >< \u6570\u636e\u7c7b\u578b > } [ = default ][ output ]] [,... n1 ] as < SQL\u8bed\u53e5 > [... n2 ]","title":"\u4fee\u6539\u5b58\u50a8\u8fc7\u7a0b"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_75","text":"drop proc [ edure ] { < \u5b58\u50a8\u8fc7\u7a0b\u540d > } [,... n ]","title":"\u5220\u9664\u5b58\u50a8\u8fc7\u7a0b"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_76","text":"","title":"\u89e6\u53d1\u5668"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_77","text":"\u89e6\u53d1\u7c7b\u578b\uff1ainsert / update / delete \u89e6\u53d1\u65b9\u5f0f\uff1aafter / instead of","title":"\u89e6\u53d1\u5668\u7684\u5206\u7c7b"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_78","text":"create trigger < \u89e6\u53d1\u5668\u540d > on { < \u57fa\u672c\u8868 >|< \u89c6\u56fe > } -- \u6307\u5b9a\u89e6\u53d1\u5668\u540d\u53ca\u64cd\u4f5c\u5bf9\u8c61 { for | after | instead of } { [ delete ][,][ insert ][,][ update ] } -- \u5b9a\u4e49\u89e6\u53d1\u5668\u7684\u7c7b\u578b\uff0c\u9ed8\u8ba4\u662f after as [ if update ( < \u5217\u540d > )[ { and | or } update ( < \u5217\u540d > )] [,... n ] ] < SQL\u8bed\u53e5 > [,... n ] -- \u53ef\u5305\u542b\u4e00\u6761\u6216\u591a\u6761SQL\u8bed\u53e5","title":"\u521b\u5efa\u89e6\u53d1\u5668"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_79","text":"alter table { enable | disable } < \u89e6\u53d1\u5668\u540d >","title":"\u89e6\u53d1\u5668\u7684\u7981\u6b62\u4e0e\u542f\u7528"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_80","text":"alter trigger < \u89e6\u53d1\u5668\u540d > on { < \u57fa\u672c\u8868 >|< \u89c6\u56fe > } -- \u6307\u5b9a\u89e6\u53d1\u5668\u540d\u53ca\u64cd\u4f5c\u5bf9\u8c61 { for | after | instead of } { [ delete ][,][ insert ][,][ update ] } -- \u5b9a\u4e49\u89e6\u53d1\u5668\u7684\u7c7b\u578b\uff0c\u9ed8\u8ba4\u662f after as [ if update ( < \u5217\u540d > )[ { and | or } update ( < \u5217\u540d > )] [,... n ] ] < SQL\u8bed\u53e5 > [,... n ] -- \u53ef\u5305\u542b\u4e00\u6761\u6216\u591a\u6761SQL\u8bed\u53e5","title":"\u4fee\u6539\u89e6\u53d1\u5668"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_81","text":"drop trigger { < \u89e6\u53d1\u5668\u540d > } [,... n ]","title":"\u5220\u9664\u89e6\u53d1\u5668"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_82","text":"","title":"\u6570\u636e\u5e93\u8bbf\u95ee\u63a5\u53e3"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#odbc","text":"\u7ec4\u6210\uff1aODBC\u6570\u636e\u5e93\u5e94\u7528\u7a0b\u5e8f\uff0c\u9a71\u52a8\u7a0b\u5e8f\u7ba1\u7406\u5668\uff0c\u9a71\u52a8\u7a0b\u5e8f\uff0c\u6570\u636e\u6e90 5\u9636\u6bb5\uff1a\u914d\u7f6e\u6570\u636e\u6e90\uff0c\u8fde\u63a5\u6570\u636e\u6e90\uff0c\u521d\u59cb\u5316\u5e94\u7528\u7a0b\u5e8f\uff0cSQL\u5904\u7406\uff0c\u5904\u7406\u7ed3\u675f \u4f18\u70b9\uff1a\u4ee5\u7edf\u4e00\u7684\u65b9\u5f0f\u5904\u7406\u6240\u6709\u6570\u636e\u5e93","title":"\u5f00\u653e\u6570\u636e\u5e93\u8fde\u63a5(ODBC)"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#jdbc","text":"\u7ec4\u6210\uff1aJava\u5e94\u7528\u7a0b\u5e8f\uff0cJDBC\u9a71\u52a8\u7a0b\u5e8f\u7ba1\u7406\u5668\uff0cJDBC\u9a71\u52a8\u7a0b\u5e8f\uff0c\u6570\u636e\u5e93","title":"JDBC"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#adonet","text":"","title":"ADO.NET"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_83","text":"\u4f53\u7cfb\u7ed3\u6784\uff1a\u5355\u7528\u6237\u6a21\u5f0f\uff0c\u4e3b\u4ece\u5f0f\u591a\u7528\u6237\u6a21\u5f0f\uff0cC/S\u6a21\u5f0f\uff0cB/S\u6a21\u5f0f","title":"\u6570\u636e\u5e93\u5e94\u7528\u7cfb\u7edf\u4f53\u7cfb\u7ed3\u6784"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_84","text":"","title":"\u7b2c\u4e03\u7ae0 \u6570\u636e\u5e93\u4fdd\u62a4"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_85","text":"\u975e\u6cd5\u7528\u6237 \u975e\u6cd5\u6570\u636e \u5404\u79cd\u6545\u969c \u591a\u7528\u6237\u7684\u5e76\u53d1\u8bbf\u95ee","title":"\u5bf9\u6570\u636e\u5e93\u7684\u7834\u574f"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_86","text":"\u6570\u636e\u5e93\u7684\u5b89\u5168\u63a7\u5236 \u7528\u6237\u8bc6\u522b\u4e0e\u9274\u522b -- \u521b\u5efa\u767b\u5f55\u540d create login < \u767b\u5f55\u540d > with password = '<\u5bc6\u7801>' , default_database = < \u5173\u8054\u7684\u6570\u636e\u5e93 > -- \u521b\u5efa\u7528\u6237\u540d create user < \u7528\u6237\u540d > for login < \u767b\u5f55\u540d > # \u767b\u5f55\u540d\u4e0e\u7528\u6237\u540d\u5173\u8054 \u8bbf\u95ee\u63a7\u5236 -- \u6388\u6743 grant < \u6743\u9650 > [, < \u6743\u9650 > ...] # all privileges on < \u5bf9\u8c61\u7c7b\u578b > < \u5bf9\u8c61\u540d > [, < \u5bf9\u8c61\u7c7b\u578b > < \u5bf9\u8c61\u540d > ...] to < \u7528\u6237 > [, < \u7528\u6237 > ...] [ with grant option ] # \u5141\u8bb8\u8f6c\u6388 -- \u6536\u56de\u6743\u9650 revoke < \u6743\u9650 > [, < \u6743\u9650 > ...] on < \u5bf9\u8c61\u7c7b\u578b > < \u5bf9\u8c61\u540d > [, < \u5bf9\u8c61\u7c7b\u578b > < \u5bf9\u8c61\u540d > ...] from < \u7528\u6237 > [, < \u7528\u6237 > ...] [ cascade ] # cascade \u8868\u793a\u7ea7\u8054\u56de\u6536 \u89c6\u56fe\u673a\u5236 \u5b89\u5168\u5ba1\u8ba1\u673a\u5236 SQL Server\u7684\u5b89\u5168\u673a\u5236 \u8eab\u4efd\u9a8c\u8bc1\u6a21\u5f0f \u767b\u5f55\u548c\u7528\u6237 \u6743\u9650\u7ba1\u7406 \u89d2\u8272\u7ba1\u7406","title":"\u6570\u636e\u5e93\u5b89\u5168"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_87","text":"\u51c6\u786e\u6027\uff0c\u6709\u6548\u6027\uff0c\u76f8\u5bb9\u6027","title":"\u6570\u636e\u5e93\u5b8c\u6574\u6027"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_88","text":"\u5b9e\u4f53\u5b8c\u6574\u6027 \u53c2\u7167\u5b8c\u6574\u6027 \u7528\u6237\u81ea\u5b9a\u4e49\u5b8c\u6574\u6027","title":"\u6570\u636e\u5e93\u5b8c\u6574\u6027\u63a7\u5236"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#sql-server","text":"","title":"SQL Server \u7684\u5b8c\u6574\u6027\u673a\u5236"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#constraint","text":"not null primary key check foreign key default unique check \u7ea6\u675f \u7ea6\u675f\u5b57\u6bb5\u6240\u5141\u8bb8\u7684\u8303\u56f4 [ constraint < \u7ea6\u675f\u540d > ] check ( < \u6761\u4ef6 > ) unique \u7ea6\u675f [ constraint < \u7ea6\u675f\u540d > ] unique","title":"\u7ea6\u675f Constraint"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#rule","text":"\u521b\u5efa\u89c4\u5219 create rule < \u89c4\u5219\u540d > as < \u6761\u4ef6\u8868\u8fbe\u5f0f > \u7ed1\u5b9a\u89c4\u5219 [ exec [ ute ]] sp_bindrule [ @ rulename = ] '<\u89c4\u5219\u540d>' ,[ @ objanme ] '<\u7ed1\u5b9a\u5bf9\u8c61\u540d>' \u89e3\u7ed1\u89c4\u5219 [ exec [ ute ]] sp_unbindrule [ @ objanme ] '<\u7ed1\u5b9a\u5bf9\u8c61\u540d>' \u5220\u9664\u89c4\u5219 drop rule < \u89c4\u5219\u540d > [,...]","title":"\u89c4\u5219 Rule"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#default","text":"\u7565","title":"\u9ed8\u8ba4 Default"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_89","text":"\u4e8b\u52a1\uff1a\u662f\u7528\u6237\u5b9a\u4e49\u7684\u4e00\u4e2a\u6570\u636e\u5e93\u64cd\u4f5c\u5e8f\u5217\uff0c\u8981\u4e48\u5168\u505a\uff0c\u8981\u4e48\u90fd\u4e0d\u505a\uff0c\u662f\u4e00\u4e2a\u4e0d\u53ef\u5206\u5272\u7684\u5de5\u4f5c\u5355\u4f4d\uff0c\u662fDBMS\u7684\u57fa\u672c\u5355\u4f4d","title":"\u5e76\u53d1\u63a7\u5236"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#acid","text":"\u539f\u5b50\u6027 \u4e00\u81f4\u6027 \u9694\u79bb\u6027 \u6301\u4e45\u6027","title":"\u4e8b\u52a1\u7684 ACID \u6027\u8d28"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_90","text":"4 \u4e2a\u72b6\u6001 \u4e8b\u52a1\u5f00\u59cb \u4e8b\u52a1\u8bfb / \u5199 \u4e8b\u52a1\u63d0\u4ea4 (COMMIT) \u4e8b\u52a1\u56de\u6eda (ROLLBACK)","title":"\u4e8b\u52a1\u7684\u6d3b\u52a8\u8fc7\u7a0b"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_91","text":"\u4e22\u5931\u66f4\u65b0 \u8bfb \u201c\u810f\u201d \u6570\u636e \u4e0d\u53ef\u91cd\u590d\u8bfb","title":"\u4e8b\u52a1\u7684\u5e76\u53d1\u6267\u884c"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_92","text":"\u4e8b\u52a1\u7684\u5e76\u53d1\u8c03\u5ea6\u662f\u6b63\u786e\u7684\u5f53\u4e14\u4ec5\u5f53\u5176\u7ed3\u679c\u4e0e\u4e32\u884c\u8c03\u5ea6\u6267\u884c\u7684\u7ed3\u679c\u76f8\u540c\uff0c\u53ef\u4e32\u884c\u5316\u662f\u5e76\u53d1\u63a7\u5236\u7684\u6b63\u786e\u6027\u7684\u51c6\u5219","title":"\u5e76\u53d1\u8c03\u5ea6\u7684\u53ef\u4e32\u884c\u6027"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_93","text":"\u5c01\u9501\u7c7b\u578b\uff1a \u6392\u4ed6\u9501\uff1a\u5199\u9501\u6216 X \u9501\uff0c\u81ea\u5df1\u53ef\u8bfb\u53ef\u5199\uff0c\u5176\u4ed6\u4e8b\u52a1\u65e0\u6cd5\u5bf9\u6570\u636e\u8fdb\u884c\u52a0\u9501\u6216\u64cd\u4f5c \u5171\u4eab\u9501\uff1a\u8bfb\u9501\u6216 S \u9501\uff0c\u81ea\u5df1\u53ea\u53ef\u8bfb\uff0c\u5176\u4ed6\u4e8b\u52a1\u53ea\u80fd\u52a0 S \u9501 \u5c01\u9501\u534f\u8bae\uff1a \u4e00\u7ea7\u5c01\u9501\u534f\u8bae\uff1a\u5bf9\u6570\u636e\u8fdb\u884c\u5199\u64cd\u4f5c\u65f6\u5fc5\u987b\u52a0X\u9501\uff0c\u4e8b\u52a1\u7ed3\u675f\u91ca\u653e\uff0c\u89e3\u51b3\u2018\u4e22\u5931\u66f4\u65b0\u2019 \u4e8c\u7ea7\u5c01\u9501\u534f\u8bae\uff1a\u4e00\u7ea7\u5c01\u9501\u534f\u8bae\u518d\u52a0\u4e0a\u5728\u8bfb\u6570\u636e\u524d\u52a0\u4e0a S \u9501\uff0c\u8bfb\u5b8c\u5373\u91ca\u653e\uff0c\u8fdb\u4e00\u6b65\u89e3\u51b3\u2018\u8bfb\u810f\u6570\u636e\u2019 \u4e09\u7ea7\u5c01\u9501\u534f\u8bae\uff1a\u4e00\u7ea7\u5c01\u9501\u534f\u8bae\u518d\u52a0\u4e0a\u5728\u8bfb\u6570\u636e\u524d\u52a0\u4e0a S \u9501\uff0c\u4e8b\u52a1\u7ed3\u675f\u91ca\u653e\uff0c\u8fdb\u4e00\u6b65\u89e3\u51b3\u2018\u4e0d\u53ef\u91cd\u590d\u5ea6\u2019 \u4e24\u6bb5\u9501\u534f\u8bae\uff1a\u6240\u6709\u4e8b\u52a1\u5fc5\u987b\u5206\u4e24\u4e2a\u9636\u6bb5\u5bf9\u6570\u636e\u52a0\u9501\u548c\u89e3\u9501\uff0c\u5373\u540c\u610f\u4e0a\u9501\uff0c\u7136\u540e\u518d\u7edf\u4e00\u89e3\u9501 \u6d3b\u9501 & \u6b7b\u9501\uff1a \u6d3b\u9501\uff1a\u5728\u5c01\u9501\u8fc7\u7a0b\u4e2d\u67d0\u4e2a\u4e8b\u52a1\u6c38\u8fdc\u5904\u4e8e\u7b49\u5f85\u7684\u72b6\u6001\u800c\u5f97\u4e0d\u5230\u5c01\u9501\u673a\u4f1a \u89e3\u51b3\u65b9\u6cd5\uff1a\u5148\u6765\u5148\u670d\u52a1 \u6b7b\u9501\uff1a\u82e5\u5e72\u4e8b\u52a1\u90fd\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\uff0c\u76f8\u4e92\u7b49\u5f85\u5bf9\u65b9\u91ca\u653e\u9501 \u89e3\u51b3\u65b9\u6cd5\uff1a\u9884\u9632\u6cd5\uff1a\u987a\u5e8f\u7533\u8bf7\u6cd5\uff0c\u4e00\u6b21\u7533\u8bf7\u6cd5 \u200b \u89e3\u9664\u6cd5\uff1a\u5b9a\u65f6\u6cd5\uff0c\u6b7b\u9501\u68c0\u6d4b\u6cd5","title":"\u5c01\u9501"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_94","text":"","title":"\u6570\u636e\u5e93\u6062\u590d"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_95","text":"\u7cfb\u7edf\u6545\u969c \u4e8b\u52a1\u6545\u969c \u4ecb\u8d28\u6545\u969c \u8ba1\u7b97\u673a\u75c5\u6bd2 \u8bef\u64cd\u4f5c \u81ea\u7136\u707e\u5bb3 \u76d7\u7a83","title":"\u6545\u969c\u79cd\u7c7b"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_96","text":"\u628a\u6570\u636e\u5e93\u4ece\u9519\u8bef\u72b6\u6001\u6062\u590d\u5230\u67d0\u4e2a\u6b63\u786e\u7684\u72b6\u6001 \u6570\u636e\u5e93\u6062\u590d\u673a\u5236\u7684\u4e24\u4e2a\u65b9\u9762\uff1a\u4e00\u662f\u5efa\u7acb\u5197\u4f59\u6570\u636e\uff0c\u4e8c\u662f\u7cfb\u7edf\u51fa\u73b0\u6545\u969c\u540e\u5229\u7528\u5197\u4f59\u6570\u636e\u5c06\u6570\u636e\u5e93\u6062\u590d\u5230\u67d0\u4e2a\u6b63\u5e38\u7684\u72b6\u6001 \u5907\u4efd\uff1a\u6570\u636e\u8f6c\u5b58\uff0c\u767b\u5f55\u65e5\u5fd7\u6587\u4ef6","title":"\u6570\u636e\u5e93\u6062\u590d\u6280\u672f"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/#_97","text":"\u6570\u636e\u5e93\u57fa\u7840\u6559\u7a0b\uff08\u7b2c\u4e09\u7248\uff09 \u987e\u97f5\u534e \u7535\u5b50\u5de5\u4e1a\u51fa\u7248\u793e","title":"\u53c2\u8003"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E8%AF%B4%E6%98%8E/","text":"\u8bf4\u660e \u00b6 \u6b64\u6587\u6863\u4ec5\u4f5c\u4e3a\u8bfe\u7a0b\u5e94\u8bd5\u590d\u4e60\u7b14\u8bb0\u548c\u53c2\u8003\u6587\u6863","title":"\u8bf4\u660e"},{"location":"%E5%A4%87%E8%80%83%E7%AC%94%E8%AE%B0/%E8%AF%B4%E6%98%8E/#_1","text":"\u6b64\u6587\u6863\u4ec5\u4f5c\u4e3a\u8bfe\u7a0b\u5e94\u8bd5\u590d\u4e60\u7b14\u8bb0\u548c\u53c2\u8003\u6587\u6863","title":"\u8bf4\u660e"}]}